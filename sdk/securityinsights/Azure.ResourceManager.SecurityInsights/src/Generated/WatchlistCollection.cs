// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class representing a collection of <see cref="WatchlistResource" /> and their operations.
    /// Each <see cref="WatchlistResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="WatchlistCollection" /> instance call the GetWatchlists method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class WatchlistCollection : ArmCollection, IEnumerable<WatchlistResource>, IAsyncEnumerable<WatchlistResource>
    {
        private readonly ClientDiagnostics _watchlistClientDiagnostics;
        private readonly WatchlistsRestOperations _watchlistRestClient;
        private readonly string _workspaceName;

        /// <summary> Initializes a new instance of the <see cref="WatchlistCollection"/> class for mocking. </summary>
        protected WatchlistCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="WatchlistCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        internal WatchlistCollection(ArmClient client, ResourceIdentifier id, string workspaceName) : base(client, id)
        {
            _workspaceName = workspaceName;
            _watchlistClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", WatchlistResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(WatchlistResource.ResourceType, out string watchlistApiVersion);
            _watchlistRestClient = new WatchlistsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, watchlistApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a Watchlist and its Watchlist Items (bulk creation, e.g. through text/csv content type). To create a Watchlist and its Items, we should call this endpoint with either rawContent or a valid SAR URI and contentType properties. The rawContent is mainly used for small watchlist (content size below 3.8 MB). The SAS URI enables the creation of large watchlist, where the content size can go up to 500 MB. The status of processing such large file can be polled through the URL returned in Azure-AsyncOperation header.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}
        /// Operation Id: Watchlists_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="watchlistAlias"> Watchlist Alias. </param>
        /// <param name="data"> The watchlist. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="watchlistAlias"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistAlias"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<WatchlistResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string watchlistAlias, WatchlistData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(watchlistAlias, nameof(watchlistAlias));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _watchlistClientDiagnostics.CreateScope("WatchlistCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _watchlistRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, watchlistAlias, data, cancellationToken).ConfigureAwait(false);
                var operation = new SecurityInsightsArmOperation<WatchlistResource>(Response.FromValue(new WatchlistResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a Watchlist and its Watchlist Items (bulk creation, e.g. through text/csv content type). To create a Watchlist and its Items, we should call this endpoint with either rawContent or a valid SAR URI and contentType properties. The rawContent is mainly used for small watchlist (content size below 3.8 MB). The SAS URI enables the creation of large watchlist, where the content size can go up to 500 MB. The status of processing such large file can be polled through the URL returned in Azure-AsyncOperation header.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}
        /// Operation Id: Watchlists_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="watchlistAlias"> Watchlist Alias. </param>
        /// <param name="data"> The watchlist. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="watchlistAlias"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistAlias"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<WatchlistResource> CreateOrUpdate(WaitUntil waitUntil, string watchlistAlias, WatchlistData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(watchlistAlias, nameof(watchlistAlias));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _watchlistClientDiagnostics.CreateScope("WatchlistCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _watchlistRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, watchlistAlias, data, cancellationToken);
                var operation = new SecurityInsightsArmOperation<WatchlistResource>(Response.FromValue(new WatchlistResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a watchlist, without its watchlist items.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}
        /// Operation Id: Watchlists_Get
        /// </summary>
        /// <param name="watchlistAlias"> Watchlist Alias. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="watchlistAlias"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistAlias"/> is null. </exception>
        public virtual async Task<Response<WatchlistResource>> GetAsync(string watchlistAlias, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(watchlistAlias, nameof(watchlistAlias));

            using var scope = _watchlistClientDiagnostics.CreateScope("WatchlistCollection.Get");
            scope.Start();
            try
            {
                var response = await _watchlistRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, watchlistAlias, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WatchlistResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a watchlist, without its watchlist items.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}
        /// Operation Id: Watchlists_Get
        /// </summary>
        /// <param name="watchlistAlias"> Watchlist Alias. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="watchlistAlias"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistAlias"/> is null. </exception>
        public virtual Response<WatchlistResource> Get(string watchlistAlias, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(watchlistAlias, nameof(watchlistAlias));

            using var scope = _watchlistClientDiagnostics.CreateScope("WatchlistCollection.Get");
            scope.Start();
            try
            {
                var response = _watchlistRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, watchlistAlias, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WatchlistResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all watchlists, without watchlist items.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists
        /// Operation Id: Watchlists_List
        /// </summary>
        /// <param name="skipToken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WatchlistResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WatchlistResource> GetAllAsync(string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<WatchlistResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _watchlistClientDiagnostics.CreateScope("WatchlistCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _watchlistRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WatchlistResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WatchlistResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _watchlistClientDiagnostics.CreateScope("WatchlistCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _watchlistRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WatchlistResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all watchlists, without watchlist items.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists
        /// Operation Id: Watchlists_List
        /// </summary>
        /// <param name="skipToken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WatchlistResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WatchlistResource> GetAll(string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<WatchlistResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _watchlistClientDiagnostics.CreateScope("WatchlistCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _watchlistRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WatchlistResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WatchlistResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _watchlistClientDiagnostics.CreateScope("WatchlistCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _watchlistRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WatchlistResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}
        /// Operation Id: Watchlists_Get
        /// </summary>
        /// <param name="watchlistAlias"> Watchlist Alias. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="watchlistAlias"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistAlias"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string watchlistAlias, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(watchlistAlias, nameof(watchlistAlias));

            using var scope = _watchlistClientDiagnostics.CreateScope("WatchlistCollection.Exists");
            scope.Start();
            try
            {
                var response = await _watchlistRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, watchlistAlias, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}
        /// Operation Id: Watchlists_Get
        /// </summary>
        /// <param name="watchlistAlias"> Watchlist Alias. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="watchlistAlias"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistAlias"/> is null. </exception>
        public virtual Response<bool> Exists(string watchlistAlias, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(watchlistAlias, nameof(watchlistAlias));

            using var scope = _watchlistClientDiagnostics.CreateScope("WatchlistCollection.Exists");
            scope.Start();
            try
            {
                var response = _watchlistRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, watchlistAlias, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<WatchlistResource> IEnumerable<WatchlistResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<WatchlistResource> IAsyncEnumerable<WatchlistResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
