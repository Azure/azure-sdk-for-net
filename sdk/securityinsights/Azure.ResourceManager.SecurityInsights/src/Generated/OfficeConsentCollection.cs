// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class representing a collection of <see cref="OfficeConsentResource" /> and their operations.
    /// Each <see cref="OfficeConsentResource" /> in the collection will belong to the same instance of <see cref="OperationalInsightsWorkspaceSecurityInsightsResource" />.
    /// To get an <see cref="OfficeConsentCollection" /> instance call the GetOfficeConsents method from an instance of <see cref="OperationalInsightsWorkspaceSecurityInsightsResource" />.
    /// </summary>
    public partial class OfficeConsentCollection : ArmCollection, IEnumerable<OfficeConsentResource>, IAsyncEnumerable<OfficeConsentResource>
    {
        private readonly ClientDiagnostics _officeConsentClientDiagnostics;
        private readonly OfficeConsentsRestOperations _officeConsentRestClient;

        /// <summary> Initializes a new instance of the <see cref="OfficeConsentCollection"/> class for mocking. </summary>
        protected OfficeConsentCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="OfficeConsentCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal OfficeConsentCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _officeConsentClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", OfficeConsentResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(OfficeConsentResource.ResourceType, out string officeConsentApiVersion);
            _officeConsentRestClient = new OfficeConsentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, officeConsentApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != OperationalInsightsWorkspaceSecurityInsightsResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, OperationalInsightsWorkspaceSecurityInsightsResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets an office365 consent.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/officeConsents/{consentId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OfficeConsents_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="consentId"> consent ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="consentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="consentId"/> is null. </exception>
        public virtual async Task<Response<OfficeConsentResource>> GetAsync(string consentId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(consentId, nameof(consentId));

            using var scope = _officeConsentClientDiagnostics.CreateScope("OfficeConsentCollection.Get");
            scope.Start();
            try
            {
                var response = await _officeConsentRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, consentId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OfficeConsentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an office365 consent.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/officeConsents/{consentId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OfficeConsents_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="consentId"> consent ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="consentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="consentId"/> is null. </exception>
        public virtual Response<OfficeConsentResource> Get(string consentId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(consentId, nameof(consentId));

            using var scope = _officeConsentClientDiagnostics.CreateScope("OfficeConsentCollection.Get");
            scope.Start();
            try
            {
                var response = _officeConsentRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, consentId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OfficeConsentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all office365 consents.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/officeConsents</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OfficeConsents_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OfficeConsentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OfficeConsentResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _officeConsentRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _officeConsentRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new OfficeConsentResource(Client, OfficeConsentData.DeserializeOfficeConsentData(e)), _officeConsentClientDiagnostics, Pipeline, "OfficeConsentCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets all office365 consents.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/officeConsents</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OfficeConsents_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OfficeConsentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OfficeConsentResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _officeConsentRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _officeConsentRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new OfficeConsentResource(Client, OfficeConsentData.DeserializeOfficeConsentData(e)), _officeConsentClientDiagnostics, Pipeline, "OfficeConsentCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/officeConsents/{consentId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OfficeConsents_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="consentId"> consent ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="consentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="consentId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string consentId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(consentId, nameof(consentId));

            using var scope = _officeConsentClientDiagnostics.CreateScope("OfficeConsentCollection.Exists");
            scope.Start();
            try
            {
                var response = await _officeConsentRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, consentId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/officeConsents/{consentId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OfficeConsents_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="consentId"> consent ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="consentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="consentId"/> is null. </exception>
        public virtual Response<bool> Exists(string consentId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(consentId, nameof(consentId));

            using var scope = _officeConsentClientDiagnostics.CreateScope("OfficeConsentCollection.Exists");
            scope.Start();
            try
            {
                var response = _officeConsentRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, consentId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<OfficeConsentResource> IEnumerable<OfficeConsentResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<OfficeConsentResource> IAsyncEnumerable<OfficeConsentResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
