// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A Class representing an Entity along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct an <see cref="EntityResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetEntityResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetEntity method.
    /// </summary>
    public partial class EntityResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="EntityResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string workspaceName, string entityId)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _entityClientDiagnostics;
        private readonly EntitiesRestOperations _entityRestClient;
        private readonly ClientDiagnostics _entitiesGetTimelineClientDiagnostics;
        private readonly EntitiesGetTimelineRestOperations _entitiesGetTimelineRestClient;
        private readonly EntityData _data;

        /// <summary> Initializes a new instance of the <see cref="EntityResource"/> class for mocking. </summary>
        protected EntityResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "EntityResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal EntityResource(ArmClient client, EntityData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="EntityResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal EntityResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _entityClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string entityApiVersion);
            _entityRestClient = new EntitiesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, entityApiVersion);
            _entitiesGetTimelineClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _entitiesGetTimelineRestClient = new EntitiesGetTimelineRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.SecurityInsights/entities";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual EntityData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of EntityRelationResources in the Entity. </summary>
        /// <returns> An object representing collection of EntityRelationResources and their operations over a EntityRelationResource. </returns>
        public virtual EntityRelationCollection GetEntityRelations()
        {
            return GetCachedClient(Client => new EntityRelationCollection(Client, Id));
        }

        /// <summary>
        /// Gets an entity relation.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/relations/{relationName}
        /// Operation Id: EntityRelations_GetRelation
        /// </summary>
        /// <param name="relationName"> Relation Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="relationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="relationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EntityRelationResource>> GetEntityRelationAsync(string relationName, CancellationToken cancellationToken = default)
        {
            return await GetEntityRelations().GetAsync(relationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an entity relation.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/relations/{relationName}
        /// Operation Id: EntityRelations_GetRelation
        /// </summary>
        /// <param name="relationName"> Relation Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="relationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="relationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<EntityRelationResource> GetEntityRelation(string relationName, CancellationToken cancellationToken = default)
        {
            return GetEntityRelations().Get(relationName, cancellationToken);
        }

        /// <summary>
        /// Gets an entity.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}
        /// Operation Id: Entities_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EntityResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _entityClientDiagnostics.CreateScope("EntityResource.Get");
            scope.Start();
            try
            {
                var response = await _entityRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EntityResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an entity.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}
        /// Operation Id: Entities_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EntityResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _entityClientDiagnostics.CreateScope("EntityResource.Get");
            scope.Start();
            try
            {
                var response = _entityRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EntityResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Expands an entity.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/expand
        /// Operation Id: Entities_Expand
        /// </summary>
        /// <param name="content"> The parameters required to execute an expand operation on the given entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<EntityExpandResponse>> ExpandAsync(EntityExpandContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _entityClientDiagnostics.CreateScope("EntityResource.Expand");
            scope.Start();
            try
            {
                var response = await _entityRestClient.ExpandAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Expands an entity.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/expand
        /// Operation Id: Entities_Expand
        /// </summary>
        /// <param name="content"> The parameters required to execute an expand operation on the given entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<EntityExpandResponse> Expand(EntityExpandContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _entityClientDiagnostics.CreateScope("EntityResource.Expand");
            scope.Start();
            try
            {
                var response = _entityRestClient.Expand(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Insights and Activities for an entity.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/queries
        /// Operation Id: Entities_Queries
        /// </summary>
        /// <param name="kind"> The Kind parameter for queries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EntityQueryItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EntityQueryItem> QueriesAsync(EntityItemQueryKind kind, CancellationToken cancellationToken = default)
        {
            async Task<Page<EntityQueryItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _entityClientDiagnostics.CreateScope("EntityResource.Queries");
                scope.Start();
                try
                {
                    var response = await _entityRestClient.QueriesAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, kind, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get Insights and Activities for an entity.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/queries
        /// Operation Id: Entities_Queries
        /// </summary>
        /// <param name="kind"> The Kind parameter for queries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EntityQueryItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EntityQueryItem> Queries(EntityItemQueryKind kind, CancellationToken cancellationToken = default)
        {
            Page<EntityQueryItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _entityClientDiagnostics.CreateScope("EntityResource.Queries");
                scope.Start();
                try
                {
                    var response = _entityRestClient.Queries(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, kind, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Execute Insights for an entity.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/getInsights
        /// Operation Id: Entities_GetInsights
        /// </summary>
        /// <param name="content"> The parameters required to execute insights on the given entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <returns> An async collection of <see cref="EntityInsightItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EntityInsightItem> GetInsightsAsync(EntityGetInsightsContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            async Task<Page<EntityInsightItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _entityClientDiagnostics.CreateScope("EntityResource.GetInsights");
                scope.Start();
                try
                {
                    var response = await _entityRestClient.GetInsightsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Execute Insights for an entity.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/getInsights
        /// Operation Id: Entities_GetInsights
        /// </summary>
        /// <param name="content"> The parameters required to execute insights on the given entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <returns> A collection of <see cref="EntityInsightItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EntityInsightItem> GetInsights(EntityGetInsightsContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            Page<EntityInsightItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _entityClientDiagnostics.CreateScope("EntityResource.GetInsights");
                scope.Start();
                try
                {
                    var response = _entityRestClient.GetInsights(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Timeline for an entity.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/getTimeline
        /// Operation Id: EntitiesGetTimeline_list
        /// </summary>
        /// <param name="content"> The parameters required to execute an timeline operation on the given entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <returns> An async collection of <see cref="EntityTimelineItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EntityTimelineItem> GetEntitiesGetTimelinesAsync(EntityTimelineContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            async Task<Page<EntityTimelineItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _entitiesGetTimelineClientDiagnostics.CreateScope("EntityResource.GetEntitiesGetTimelines");
                scope.Start();
                try
                {
                    var response = await _entitiesGetTimelineRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Timeline for an entity.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}/getTimeline
        /// Operation Id: EntitiesGetTimeline_list
        /// </summary>
        /// <param name="content"> The parameters required to execute an timeline operation on the given entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <returns> A collection of <see cref="EntityTimelineItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EntityTimelineItem> GetEntitiesGetTimelines(EntityTimelineContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            Page<EntityTimelineItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _entitiesGetTimelineClientDiagnostics.CreateScope("EntityResource.GetEntitiesGetTimelines");
                scope.Start();
                try
                {
                    var response = _entitiesGetTimelineRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }
    }
}
