// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    internal partial class ResourceGroupResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _threatIntelligenceIndicatorClientDiagnostics;
        private ThreatIntelligenceIndicatorRestOperations _threatIntelligenceIndicatorRestClient;
        private ClientDiagnostics _threatIntelligenceIndicatorMetricsClientDiagnostics;
        private ThreatIntelligenceIndicatorMetricsRestOperations _threatIntelligenceIndicatorMetricsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class for mocking. </summary>
        protected ResourceGroupResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ResourceGroupResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ThreatIntelligenceIndicatorClientDiagnostics => _threatIntelligenceIndicatorClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ThreatIntelligenceIndicatorRestOperations ThreatIntelligenceIndicatorRestClient => _threatIntelligenceIndicatorRestClient ??= new ThreatIntelligenceIndicatorRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ThreatIntelligenceIndicatorMetricsClientDiagnostics => _threatIntelligenceIndicatorMetricsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ThreatIntelligenceIndicatorMetricsRestOperations ThreatIntelligenceIndicatorMetricsRestClient => _threatIntelligenceIndicatorMetricsRestClient ??= new ThreatIntelligenceIndicatorMetricsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of SecurityInsightsAlertRuleResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SecurityInsightsAlertRuleResources and their operations over a SecurityInsightsAlertRuleResource. </returns>
        public virtual SecurityInsightsAlertRuleCollection GetSecurityInsightsAlertRules(string workspaceName)
        {
            return new SecurityInsightsAlertRuleCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SecurityInsightsAlertRuleTemplateResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SecurityInsightsAlertRuleTemplateResources and their operations over a SecurityInsightsAlertRuleTemplateResource. </returns>
        public virtual SecurityInsightsAlertRuleTemplateCollection GetSecurityInsightsAlertRuleTemplates(string workspaceName)
        {
            return new SecurityInsightsAlertRuleTemplateCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SecurityInsightsAutomationRuleResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SecurityInsightsAutomationRuleResources and their operations over a SecurityInsightsAutomationRuleResource. </returns>
        public virtual SecurityInsightsAutomationRuleCollection GetSecurityInsightsAutomationRules(string workspaceName)
        {
            return new SecurityInsightsAutomationRuleCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SecurityInsightsBookmarkResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SecurityInsightsBookmarkResources and their operations over a SecurityInsightsBookmarkResource. </returns>
        public virtual SecurityInsightsBookmarkCollection GetSecurityInsightsBookmarks(string workspaceName)
        {
            return new SecurityInsightsBookmarkCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SecurityInsightsDataConnectorResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SecurityInsightsDataConnectorResources and their operations over a SecurityInsightsDataConnectorResource. </returns>
        public virtual SecurityInsightsDataConnectorCollection GetSecurityInsightsDataConnectors(string workspaceName)
        {
            return new SecurityInsightsDataConnectorCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SecurityInsightsIncidentResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SecurityInsightsIncidentResources and their operations over a SecurityInsightsIncidentResource. </returns>
        public virtual SecurityInsightsIncidentCollection GetSecurityInsightsIncidents(string workspaceName)
        {
            return new SecurityInsightsIncidentCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SecurityInsightsSentinelOnboardingStateResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SecurityInsightsSentinelOnboardingStateResources and their operations over a SecurityInsightsSentinelOnboardingStateResource. </returns>
        public virtual SecurityInsightsSentinelOnboardingStateCollection GetSecurityInsightsSentinelOnboardingStates(string workspaceName)
        {
            return new SecurityInsightsSentinelOnboardingStateCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SecurityMLAnalyticsSettingResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SecurityMLAnalyticsSettingResources and their operations over a SecurityMLAnalyticsSettingResource. </returns>
        public virtual SecurityMLAnalyticsSettingCollection GetSecurityMLAnalyticsSettings(string workspaceName)
        {
            return new SecurityMLAnalyticsSettingCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SecurityInsightsThreatIntelligenceIndicatorResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SecurityInsightsThreatIntelligenceIndicatorResources and their operations over a SecurityInsightsThreatIntelligenceIndicatorResource. </returns>
        public virtual SecurityInsightsThreatIntelligenceIndicatorCollection GetSecurityInsightsThreatIntelligenceIndicators(string workspaceName)
        {
            return new SecurityInsightsThreatIntelligenceIndicatorCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SecurityInsightsWatchlistResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SecurityInsightsWatchlistResources and their operations over a SecurityInsightsWatchlistResource. </returns>
        public virtual SecurityInsightsWatchlistCollection GetSecurityInsightsWatchlists(string workspaceName)
        {
            return new SecurityInsightsWatchlistCollection(Client, Id, workspaceName);
        }

        /// <summary>
        /// Query threat intelligence indicators as per filtering criteria.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/queryIndicators
        /// Operation Id: ThreatIntelligenceIndicator_QueryIndicators
        /// </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="threatIntelligenceFilteringCriteria"> Filtering criteria for querying threat intelligence indicators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityInsightsThreatIntelligenceIndicatorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecurityInsightsThreatIntelligenceIndicatorResource> QueryThreatIntelligenceIndicatorsAsync(string workspaceName, ThreatIntelligenceFilteringCriteria threatIntelligenceFilteringCriteria, CancellationToken cancellationToken = default)
        {
            async Task<Page<SecurityInsightsThreatIntelligenceIndicatorResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceIndicatorClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.QueryThreatIntelligenceIndicators");
                scope.Start();
                try
                {
                    var response = await ThreatIntelligenceIndicatorRestClient.QueryIndicatorsAsync(Id.SubscriptionId, Id.ResourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityInsightsThreatIntelligenceIndicatorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecurityInsightsThreatIntelligenceIndicatorResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceIndicatorClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.QueryThreatIntelligenceIndicators");
                scope.Start();
                try
                {
                    var response = await ThreatIntelligenceIndicatorRestClient.QueryIndicatorsNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityInsightsThreatIntelligenceIndicatorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Query threat intelligence indicators as per filtering criteria.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/queryIndicators
        /// Operation Id: ThreatIntelligenceIndicator_QueryIndicators
        /// </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="threatIntelligenceFilteringCriteria"> Filtering criteria for querying threat intelligence indicators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityInsightsThreatIntelligenceIndicatorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecurityInsightsThreatIntelligenceIndicatorResource> QueryThreatIntelligenceIndicators(string workspaceName, ThreatIntelligenceFilteringCriteria threatIntelligenceFilteringCriteria, CancellationToken cancellationToken = default)
        {
            Page<SecurityInsightsThreatIntelligenceIndicatorResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceIndicatorClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.QueryThreatIntelligenceIndicators");
                scope.Start();
                try
                {
                    var response = ThreatIntelligenceIndicatorRestClient.QueryIndicators(Id.SubscriptionId, Id.ResourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityInsightsThreatIntelligenceIndicatorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecurityInsightsThreatIntelligenceIndicatorResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceIndicatorClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.QueryThreatIntelligenceIndicators");
                scope.Start();
                try
                {
                    var response = ThreatIntelligenceIndicatorRestClient.QueryIndicatorsNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityInsightsThreatIntelligenceIndicatorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get threat intelligence indicators metrics (Indicators counts by Type, Threat Type, Source).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/metrics
        /// Operation Id: ThreatIntelligenceIndicatorMetrics_List
        /// </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ThreatIntelligenceMetrics" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ThreatIntelligenceMetrics> GetAllThreatIntelligenceIndicatorMetricsAsync(string workspaceName, CancellationToken cancellationToken = default)
        {
            async Task<Page<ThreatIntelligenceMetrics>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceIndicatorMetricsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAllThreatIntelligenceIndicatorMetrics");
                scope.Start();
                try
                {
                    var response = await ThreatIntelligenceIndicatorMetricsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, workspaceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get threat intelligence indicators metrics (Indicators counts by Type, Threat Type, Source).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/metrics
        /// Operation Id: ThreatIntelligenceIndicatorMetrics_List
        /// </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ThreatIntelligenceMetrics" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ThreatIntelligenceMetrics> GetAllThreatIntelligenceIndicatorMetrics(string workspaceName, CancellationToken cancellationToken = default)
        {
            Page<ThreatIntelligenceMetrics> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceIndicatorMetricsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAllThreatIntelligenceIndicatorMetrics");
                scope.Start();
                try
                {
                    var response = ThreatIntelligenceIndicatorMetricsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, workspaceName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }
    }
}
