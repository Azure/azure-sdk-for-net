// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    internal partial class ResourceGroupResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _ipGeodataClientDiagnostics;
        private IPGeodataRestOperations _ipGeodataRestClient;
        private ClientDiagnostics _domainWhoisClientDiagnostics;
        private DomainWhoisRestOperations _domainWhoisRestClient;
        private ClientDiagnostics _sourceControlClientDiagnostics;
        private SourceControlRestOperations _sourceControlRestClient;
        private ClientDiagnostics _threatIntelligenceInformationThreatIntelligenceIndicatorClientDiagnostics;
        private ThreatIntelligenceIndicatorRestOperations _threatIntelligenceInformationThreatIntelligenceIndicatorRestClient;
        private ClientDiagnostics _threatIntelligenceIndicatorMetricsClientDiagnostics;
        private ThreatIntelligenceIndicatorMetricsRestOperations _threatIntelligenceIndicatorMetricsRestClient;
        private ClientDiagnostics _dataConnectorsCheckRequirementsClientDiagnostics;
        private DataConnectorsCheckRequirementsRestOperations _dataConnectorsCheckRequirementsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class for mocking. </summary>
        protected ResourceGroupResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ResourceGroupResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics IPGeodataClientDiagnostics => _ipGeodataClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private IPGeodataRestOperations IPGeodataRestClient => _ipGeodataRestClient ??= new IPGeodataRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics DomainWhoisClientDiagnostics => _domainWhoisClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private DomainWhoisRestOperations DomainWhoisRestClient => _domainWhoisRestClient ??= new DomainWhoisRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SourceControlClientDiagnostics => _sourceControlClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SourceControlRestOperations SourceControlRestClient => _sourceControlRestClient ??= new SourceControlRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ThreatIntelligenceInformationThreatIntelligenceIndicatorClientDiagnostics => _threatIntelligenceInformationThreatIntelligenceIndicatorClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ThreatIntelligenceInformationResource.ResourceType.Namespace, Diagnostics);
        private ThreatIntelligenceIndicatorRestOperations ThreatIntelligenceInformationThreatIntelligenceIndicatorRestClient => _threatIntelligenceInformationThreatIntelligenceIndicatorRestClient ??= new ThreatIntelligenceIndicatorRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ThreatIntelligenceInformationResource.ResourceType));
        private ClientDiagnostics ThreatIntelligenceIndicatorMetricsClientDiagnostics => _threatIntelligenceIndicatorMetricsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ThreatIntelligenceIndicatorMetricsRestOperations ThreatIntelligenceIndicatorMetricsRestClient => _threatIntelligenceIndicatorMetricsRestClient ??= new ThreatIntelligenceIndicatorMetricsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics DataConnectorsCheckRequirementsClientDiagnostics => _dataConnectorsCheckRequirementsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private DataConnectorsCheckRequirementsRestOperations DataConnectorsCheckRequirementsRestClient => _dataConnectorsCheckRequirementsRestClient ??= new DataConnectorsCheckRequirementsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of AlertRuleResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of AlertRuleResources and their operations over a AlertRuleResource. </returns>
        public virtual AlertRuleCollection GetAlertRules(string workspaceName)
        {
            return new AlertRuleCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of AlertRuleTemplateResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of AlertRuleTemplateResources and their operations over a AlertRuleTemplateResource. </returns>
        public virtual AlertRuleTemplateCollection GetAlertRuleTemplates(string workspaceName)
        {
            return new AlertRuleTemplateCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of AutomationRuleResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of AutomationRuleResources and their operations over a AutomationRuleResource. </returns>
        public virtual AutomationRuleCollection GetAutomationRules(string workspaceName)
        {
            return new AutomationRuleCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of IncidentResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of IncidentResources and their operations over a IncidentResource. </returns>
        public virtual IncidentCollection GetIncidents(string workspaceName)
        {
            return new IncidentCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of BookmarkResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of BookmarkResources and their operations over a BookmarkResource. </returns>
        public virtual BookmarkCollection GetBookmarks(string workspaceName)
        {
            return new BookmarkCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of EntityResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of EntityResources and their operations over a EntityResource. </returns>
        public virtual EntityCollection GetEntities(string workspaceName)
        {
            return new EntityCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of EntityQueryResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of EntityQueryResources and their operations over a EntityQueryResource. </returns>
        public virtual EntityQueryCollection GetEntityQueries(string workspaceName)
        {
            return new EntityQueryCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of EntityQueryTemplateResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of EntityQueryTemplateResources and their operations over a EntityQueryTemplateResource. </returns>
        public virtual EntityQueryTemplateCollection GetEntityQueryTemplates(string workspaceName)
        {
            return new EntityQueryTemplateCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of FileImportResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of FileImportResources and their operations over a FileImportResource. </returns>
        public virtual FileImportCollection GetFileImports(string workspaceName)
        {
            return new FileImportCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of MetadataModelResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of MetadataModelResources and their operations over a MetadataModelResource. </returns>
        public virtual MetadataModelCollection GetMetadataModels(string workspaceName)
        {
            return new MetadataModelCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of OfficeConsentResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of OfficeConsentResources and their operations over a OfficeConsentResource. </returns>
        public virtual OfficeConsentCollection GetOfficeConsents(string workspaceName)
        {
            return new OfficeConsentCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SentinelOnboardingStateResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SentinelOnboardingStateResources and their operations over a SentinelOnboardingStateResource. </returns>
        public virtual SentinelOnboardingStateCollection GetSentinelOnboardingStates(string workspaceName)
        {
            return new SentinelOnboardingStateCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SecurityMLAnalyticsSettingResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SecurityMLAnalyticsSettingResources and their operations over a SecurityMLAnalyticsSettingResource. </returns>
        public virtual SecurityMLAnalyticsSettingCollection GetSecurityMLAnalyticsSettings(string workspaceName)
        {
            return new SecurityMLAnalyticsSettingCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SettingResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SettingResources and their operations over a SettingResource. </returns>
        public virtual SettingCollection GetSettings(string workspaceName)
        {
            return new SettingCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of SourceControlResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of SourceControlResources and their operations over a SourceControlResource. </returns>
        public virtual SourceControlCollection GetSourceControls(string workspaceName)
        {
            return new SourceControlCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of ThreatIntelligenceInformationResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of ThreatIntelligenceInformationResources and their operations over a ThreatIntelligenceInformationResource. </returns>
        public virtual ThreatIntelligenceInformationCollection GetAllThreatIntelligenceInformation(string workspaceName)
        {
            return new ThreatIntelligenceInformationCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of WatchlistResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of WatchlistResources and their operations over a WatchlistResource. </returns>
        public virtual WatchlistCollection GetWatchlists(string workspaceName)
        {
            return new WatchlistCollection(Client, Id, workspaceName);
        }

        /// <summary> Gets a collection of DataConnectorResources in the ResourceGroupResource. </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> An object representing collection of DataConnectorResources and their operations over a DataConnectorResource. </returns>
        public virtual DataConnectorCollection GetDataConnectors(string workspaceName)
        {
            return new DataConnectorCollection(Client, Id, workspaceName);
        }

        /// <summary>
        /// Get geodata for a single IP address
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecurityInsights/enrichment/ip/geodata
        /// Operation Id: IPGeodata_Get
        /// </summary>
        /// <param name="ipAddress"> IP address (v4 or v6) to be enriched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EnrichmentIPGeodata>> GetIPGeodatumAsync(string ipAddress, CancellationToken cancellationToken = default)
        {
            using var scope = IPGeodataClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetIPGeodatum");
            scope.Start();
            try
            {
                var response = await IPGeodataRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, ipAddress, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get geodata for a single IP address
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecurityInsights/enrichment/ip/geodata
        /// Operation Id: IPGeodata_Get
        /// </summary>
        /// <param name="ipAddress"> IP address (v4 or v6) to be enriched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EnrichmentIPGeodata> GetIPGeodatum(string ipAddress, CancellationToken cancellationToken = default)
        {
            using var scope = IPGeodataClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetIPGeodatum");
            scope.Start();
            try
            {
                var response = IPGeodataRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, ipAddress, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get whois information for a single domain name
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecurityInsights/enrichment/domain/whois
        /// Operation Id: DomainWhois_Get
        /// </summary>
        /// <param name="domain"> Domain name to be enriched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<EnrichmentDomainWhois>> GetDomainWhoiAsync(string domain, CancellationToken cancellationToken = default)
        {
            using var scope = DomainWhoisClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetDomainWhoi");
            scope.Start();
            try
            {
                var response = await DomainWhoisRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, domain, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get whois information for a single domain name
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SecurityInsights/enrichment/domain/whois
        /// Operation Id: DomainWhois_Get
        /// </summary>
        /// <param name="domain"> Domain name to be enriched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<EnrichmentDomainWhois> GetDomainWhoi(string domain, CancellationToken cancellationToken = default)
        {
            using var scope = DomainWhoisClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetDomainWhoi");
            scope.Start();
            try
            {
                var response = DomainWhoisRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, domain, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of repositories metadata.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/listRepositories
        /// Operation Id: SourceControl_listRepositories
        /// </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="repoType"> The repo type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Repo" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Repo> GetRepositoriesSourceControlsAsync(string workspaceName, RepoType repoType, CancellationToken cancellationToken = default)
        {
            async Task<Page<Repo>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SourceControlClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetRepositoriesSourceControls");
                scope.Start();
                try
                {
                    var response = await SourceControlRestClient.ListRepositoriesAsync(Id.SubscriptionId, Id.ResourceGroupName, workspaceName, repoType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Repo>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SourceControlClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetRepositoriesSourceControls");
                scope.Start();
                try
                {
                    var response = await SourceControlRestClient.ListRepositoriesNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, workspaceName, repoType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of repositories metadata.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/listRepositories
        /// Operation Id: SourceControl_listRepositories
        /// </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="repoType"> The repo type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Repo" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Repo> GetRepositoriesSourceControls(string workspaceName, RepoType repoType, CancellationToken cancellationToken = default)
        {
            Page<Repo> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SourceControlClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetRepositoriesSourceControls");
                scope.Start();
                try
                {
                    var response = SourceControlRestClient.ListRepositories(Id.SubscriptionId, Id.ResourceGroupName, workspaceName, repoType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Repo> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SourceControlClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetRepositoriesSourceControls");
                scope.Start();
                try
                {
                    var response = SourceControlRestClient.ListRepositoriesNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, workspaceName, repoType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Create a new threat intelligence indicator.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/createIndicator
        /// Operation Id: ThreatIntelligenceIndicator_CreateIndicator
        /// </summary>
        /// <param name="threatIntelligenceProperties"> Properties of threat intelligence indicators to create and update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ThreatIntelligenceInformationResource>> CreateIndicatorThreatIntelligenceIndicatorAsync(ThreatIntelligenceIndicatorModel threatIntelligenceProperties, CancellationToken cancellationToken = default)
        {
            using var scope = ThreatIntelligenceInformationThreatIntelligenceIndicatorClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.CreateIndicatorThreatIntelligenceIndicator");
            scope.Start();
            try
            {
                var response = await ThreatIntelligenceInformationThreatIntelligenceIndicatorRestClient.CreateIndicatorAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, threatIntelligenceProperties, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new ThreatIntelligenceInformationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new threat intelligence indicator.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/createIndicator
        /// Operation Id: ThreatIntelligenceIndicator_CreateIndicator
        /// </summary>
        /// <param name="threatIntelligenceProperties"> Properties of threat intelligence indicators to create and update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ThreatIntelligenceInformationResource> CreateIndicatorThreatIntelligenceIndicator(ThreatIntelligenceIndicatorModel threatIntelligenceProperties, CancellationToken cancellationToken = default)
        {
            using var scope = ThreatIntelligenceInformationThreatIntelligenceIndicatorClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.CreateIndicatorThreatIntelligenceIndicator");
            scope.Start();
            try
            {
                var response = ThreatIntelligenceInformationThreatIntelligenceIndicatorRestClient.CreateIndicator(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, threatIntelligenceProperties, cancellationToken);
                return Response.FromValue(new ThreatIntelligenceInformationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Query threat intelligence indicators as per filtering criteria.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/queryIndicators
        /// Operation Id: ThreatIntelligenceIndicator_QueryIndicators
        /// </summary>
        /// <param name="threatIntelligenceFilteringCriteria"> Filtering criteria for querying threat intelligence indicators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ThreatIntelligenceInformationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ThreatIntelligenceInformationResource> GetAllThreatIntelligenceInformationByQueryIndicatorAsync(ThreatIntelligenceFilteringCriteria threatIntelligenceFilteringCriteria, CancellationToken cancellationToken = default)
        {
            async Task<Page<ThreatIntelligenceInformationResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceInformationThreatIntelligenceIndicatorClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAllThreatIntelligenceInformationByQueryIndicator");
                scope.Start();
                try
                {
                    var response = await ThreatIntelligenceInformationThreatIntelligenceIndicatorRestClient.QueryIndicatorsAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ThreatIntelligenceInformationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ThreatIntelligenceInformationResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceInformationThreatIntelligenceIndicatorClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAllThreatIntelligenceInformationByQueryIndicator");
                scope.Start();
                try
                {
                    var response = await ThreatIntelligenceInformationThreatIntelligenceIndicatorRestClient.QueryIndicatorsNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ThreatIntelligenceInformationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Query threat intelligence indicators as per filtering criteria.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/queryIndicators
        /// Operation Id: ThreatIntelligenceIndicator_QueryIndicators
        /// </summary>
        /// <param name="threatIntelligenceFilteringCriteria"> Filtering criteria for querying threat intelligence indicators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ThreatIntelligenceInformationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ThreatIntelligenceInformationResource> GetAllThreatIntelligenceInformationByQueryIndicator(ThreatIntelligenceFilteringCriteria threatIntelligenceFilteringCriteria, CancellationToken cancellationToken = default)
        {
            Page<ThreatIntelligenceInformationResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceInformationThreatIntelligenceIndicatorClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAllThreatIntelligenceInformationByQueryIndicator");
                scope.Start();
                try
                {
                    var response = ThreatIntelligenceInformationThreatIntelligenceIndicatorRestClient.QueryIndicators(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ThreatIntelligenceInformationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ThreatIntelligenceInformationResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceInformationThreatIntelligenceIndicatorClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAllThreatIntelligenceInformationByQueryIndicator");
                scope.Start();
                try
                {
                    var response = ThreatIntelligenceInformationThreatIntelligenceIndicatorRestClient.QueryIndicatorsNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ThreatIntelligenceInformationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get threat intelligence indicators metrics (Indicators counts by Type, Threat Type, Source).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/metrics
        /// Operation Id: ThreatIntelligenceIndicatorMetrics_List
        /// </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ThreatIntelligenceMetrics" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ThreatIntelligenceMetrics> GetThreatIntelligenceIndicatorMetricsAsync(string workspaceName, CancellationToken cancellationToken = default)
        {
            async Task<Page<ThreatIntelligenceMetrics>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceIndicatorMetricsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetThreatIntelligenceIndicatorMetrics");
                scope.Start();
                try
                {
                    var response = await ThreatIntelligenceIndicatorMetricsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, workspaceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get threat intelligence indicators metrics (Indicators counts by Type, Threat Type, Source).
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/metrics
        /// Operation Id: ThreatIntelligenceIndicatorMetrics_List
        /// </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ThreatIntelligenceMetrics" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ThreatIntelligenceMetrics> GetThreatIntelligenceIndicatorMetrics(string workspaceName, CancellationToken cancellationToken = default)
        {
            Page<ThreatIntelligenceMetrics> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ThreatIntelligenceIndicatorMetricsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetThreatIntelligenceIndicatorMetrics");
                scope.Start();
                try
                {
                    var response = ThreatIntelligenceIndicatorMetricsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, workspaceName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get requirements state for a data connector type.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectorsCheckRequirements
        /// Operation Id: DataConnectorsCheckRequirements_Post
        /// </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="dataConnectorsCheckRequirements"> The parameters for requirements check message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DataConnectorRequirementsState>> PostDataConnectorsCheckRequirementAsync(string workspaceName, DataConnectorsCheckRequirements dataConnectorsCheckRequirements, CancellationToken cancellationToken = default)
        {
            using var scope = DataConnectorsCheckRequirementsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.PostDataConnectorsCheckRequirement");
            scope.Start();
            try
            {
                var response = await DataConnectorsCheckRequirementsRestClient.PostAsync(Id.SubscriptionId, Id.ResourceGroupName, workspaceName, dataConnectorsCheckRequirements, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get requirements state for a data connector type.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectorsCheckRequirements
        /// Operation Id: DataConnectorsCheckRequirements_Post
        /// </summary>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="dataConnectorsCheckRequirements"> The parameters for requirements check message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DataConnectorRequirementsState> PostDataConnectorsCheckRequirement(string workspaceName, DataConnectorsCheckRequirements dataConnectorsCheckRequirements, CancellationToken cancellationToken = default)
        {
            using var scope = DataConnectorsCheckRequirementsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.PostDataConnectorsCheckRequirement");
            scope.Start();
            try
            {
                var response = DataConnectorsCheckRequirementsRestClient.Post(Id.SubscriptionId, Id.ResourceGroupName, workspaceName, dataConnectorsCheckRequirements, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
