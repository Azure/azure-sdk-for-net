// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class representing a collection of <see cref="AlertRuleTemplateResource" /> and their operations.
    /// Each <see cref="AlertRuleTemplateResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get an <see cref="AlertRuleTemplateCollection" /> instance call the GetAlertRuleTemplates method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class AlertRuleTemplateCollection : ArmCollection, IEnumerable<AlertRuleTemplateResource>, IAsyncEnumerable<AlertRuleTemplateResource>
    {
        private readonly ClientDiagnostics _alertRuleTemplateClientDiagnostics;
        private readonly AlertRuleTemplatesRestOperations _alertRuleTemplateRestClient;
        private readonly string _workspaceName;

        /// <summary> Initializes a new instance of the <see cref="AlertRuleTemplateCollection"/> class for mocking. </summary>
        protected AlertRuleTemplateCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AlertRuleTemplateCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        internal AlertRuleTemplateCollection(ArmClient client, ResourceIdentifier id, string workspaceName) : base(client, id)
        {
            _workspaceName = workspaceName;
            _alertRuleTemplateClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", AlertRuleTemplateResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AlertRuleTemplateResource.ResourceType, out string alertRuleTemplateApiVersion);
            _alertRuleTemplateRestClient = new AlertRuleTemplatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, alertRuleTemplateApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets the alert rule template.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRuleTemplates/{alertRuleTemplateId}
        /// Operation Id: AlertRuleTemplates_Get
        /// </summary>
        /// <param name="alertRuleTemplateId"> Alert rule template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="alertRuleTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="alertRuleTemplateId"/> is null. </exception>
        public virtual async Task<Response<AlertRuleTemplateResource>> GetAsync(string alertRuleTemplateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(alertRuleTemplateId, nameof(alertRuleTemplateId));

            using var scope = _alertRuleTemplateClientDiagnostics.CreateScope("AlertRuleTemplateCollection.Get");
            scope.Start();
            try
            {
                var response = await _alertRuleTemplateRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, alertRuleTemplateId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AlertRuleTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the alert rule template.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRuleTemplates/{alertRuleTemplateId}
        /// Operation Id: AlertRuleTemplates_Get
        /// </summary>
        /// <param name="alertRuleTemplateId"> Alert rule template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="alertRuleTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="alertRuleTemplateId"/> is null. </exception>
        public virtual Response<AlertRuleTemplateResource> Get(string alertRuleTemplateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(alertRuleTemplateId, nameof(alertRuleTemplateId));

            using var scope = _alertRuleTemplateClientDiagnostics.CreateScope("AlertRuleTemplateCollection.Get");
            scope.Start();
            try
            {
                var response = _alertRuleTemplateRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, alertRuleTemplateId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AlertRuleTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all alert rule templates.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRuleTemplates
        /// Operation Id: AlertRuleTemplates_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AlertRuleTemplateResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AlertRuleTemplateResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AlertRuleTemplateResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _alertRuleTemplateClientDiagnostics.CreateScope("AlertRuleTemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _alertRuleTemplateRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AlertRuleTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AlertRuleTemplateResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _alertRuleTemplateClientDiagnostics.CreateScope("AlertRuleTemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _alertRuleTemplateRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AlertRuleTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all alert rule templates.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRuleTemplates
        /// Operation Id: AlertRuleTemplates_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AlertRuleTemplateResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AlertRuleTemplateResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AlertRuleTemplateResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _alertRuleTemplateClientDiagnostics.CreateScope("AlertRuleTemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _alertRuleTemplateRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AlertRuleTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AlertRuleTemplateResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _alertRuleTemplateClientDiagnostics.CreateScope("AlertRuleTemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _alertRuleTemplateRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AlertRuleTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRuleTemplates/{alertRuleTemplateId}
        /// Operation Id: AlertRuleTemplates_Get
        /// </summary>
        /// <param name="alertRuleTemplateId"> Alert rule template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="alertRuleTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="alertRuleTemplateId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string alertRuleTemplateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(alertRuleTemplateId, nameof(alertRuleTemplateId));

            using var scope = _alertRuleTemplateClientDiagnostics.CreateScope("AlertRuleTemplateCollection.Exists");
            scope.Start();
            try
            {
                var response = await _alertRuleTemplateRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, alertRuleTemplateId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRuleTemplates/{alertRuleTemplateId}
        /// Operation Id: AlertRuleTemplates_Get
        /// </summary>
        /// <param name="alertRuleTemplateId"> Alert rule template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="alertRuleTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="alertRuleTemplateId"/> is null. </exception>
        public virtual Response<bool> Exists(string alertRuleTemplateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(alertRuleTemplateId, nameof(alertRuleTemplateId));

            using var scope = _alertRuleTemplateClientDiagnostics.CreateScope("AlertRuleTemplateCollection.Exists");
            scope.Start();
            try
            {
                var response = _alertRuleTemplateRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, alertRuleTemplateId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AlertRuleTemplateResource> IEnumerable<AlertRuleTemplateResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AlertRuleTemplateResource> IAsyncEnumerable<AlertRuleTemplateResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
