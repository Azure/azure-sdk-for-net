// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityInsights;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> Represents Expansion entity query. </summary>
    public partial class ExpansionEntityQuery : EntityQueryData
    {
        /// <summary> Initializes a new instance of ExpansionEntityQuery. </summary>
        public ExpansionEntityQuery()
        {
            DataSources = new ChangeTrackingList<string>();
            InputFields = new ChangeTrackingList<string>();
            OutputEntityTypes = new ChangeTrackingList<EntityType>();
            Kind = EntityQueryKind.Expansion;
        }

        /// <summary> Initializes a new instance of ExpansionEntityQuery. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="kind"> the entity query kind. </param>
        /// <param name="etag"> Etag of the azure resource. </param>
        /// <param name="dataSources"> List of the data sources that are required to run the query. </param>
        /// <param name="displayName"> The query display name. </param>
        /// <param name="inputEntityType"> The type of the query&apos;s source entity. </param>
        /// <param name="inputFields"> List of the fields of the source entity that are required to run the query. </param>
        /// <param name="outputEntityTypes"> List of the desired output types to be constructed from the result. </param>
        /// <param name="queryTemplate"> The template query string to be parsed and formatted. </param>
        internal ExpansionEntityQuery(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, EntityQueryKind kind, ETag? etag, IList<string> dataSources, string displayName, EntityType? inputEntityType, IList<string> inputFields, IList<EntityType> outputEntityTypes, string queryTemplate) : base(id, name, resourceType, systemData, kind, etag)
        {
            DataSources = dataSources;
            DisplayName = displayName;
            InputEntityType = inputEntityType;
            InputFields = inputFields;
            OutputEntityTypes = outputEntityTypes;
            QueryTemplate = queryTemplate;
            Kind = kind;
        }

        /// <summary> List of the data sources that are required to run the query. </summary>
        public IList<string> DataSources { get; }
        /// <summary> The query display name. </summary>
        public string DisplayName { get; set; }
        /// <summary> The type of the query&apos;s source entity. </summary>
        public EntityType? InputEntityType { get; set; }
        /// <summary> List of the fields of the source entity that are required to run the query. </summary>
        public IList<string> InputFields { get; }
        /// <summary> List of the desired output types to be constructed from the result. </summary>
        public IList<EntityType> OutputEntityTypes { get; }
        /// <summary> The template query string to be parsed and formatted. </summary>
        public string QueryTemplate { get; set; }
    }
}
