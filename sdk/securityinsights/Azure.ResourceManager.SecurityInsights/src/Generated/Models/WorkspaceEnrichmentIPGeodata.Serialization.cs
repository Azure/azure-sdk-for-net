// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class WorkspaceEnrichmentIPGeodata : IUtf8JsonSerializable, IJsonModel<WorkspaceEnrichmentIPGeodata>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<WorkspaceEnrichmentIPGeodata>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<WorkspaceEnrichmentIPGeodata>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkspaceEnrichmentIPGeodata>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WorkspaceEnrichmentIPGeodata)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Asn))
            {
                writer.WritePropertyName("asn"u8);
                writer.WriteStringValue(Asn);
            }
            if (Optional.IsDefined(Carrier))
            {
                writer.WritePropertyName("carrier"u8);
                writer.WriteStringValue(Carrier);
            }
            if (Optional.IsDefined(City))
            {
                writer.WritePropertyName("city"u8);
                writer.WriteStringValue(City);
            }
            if (Optional.IsDefined(CityConfidenceFactor))
            {
                writer.WritePropertyName("cityConfidenceFactor"u8);
                writer.WriteNumberValue(CityConfidenceFactor.Value);
            }
            if (Optional.IsDefined(Continent))
            {
                writer.WritePropertyName("continent"u8);
                writer.WriteStringValue(Continent);
            }
            if (Optional.IsDefined(Country))
            {
                writer.WritePropertyName("country"u8);
                writer.WriteStringValue(Country);
            }
            if (Optional.IsDefined(CountryConfidenceFactor))
            {
                writer.WritePropertyName("countryConfidenceFactor"u8);
                writer.WriteNumberValue(CountryConfidenceFactor.Value);
            }
            if (Optional.IsDefined(IPAddr))
            {
                writer.WritePropertyName("ipAddr"u8);
                writer.WriteStringValue(IPAddr);
            }
            if (Optional.IsDefined(IPRoutingType))
            {
                writer.WritePropertyName("ipRoutingType"u8);
                writer.WriteStringValue(IPRoutingType);
            }
            if (Optional.IsDefined(Latitude))
            {
                writer.WritePropertyName("latitude"u8);
                writer.WriteStringValue(Latitude);
            }
            if (Optional.IsDefined(Longitude))
            {
                writer.WritePropertyName("longitude"u8);
                writer.WriteStringValue(Longitude);
            }
            if (Optional.IsDefined(Organization))
            {
                writer.WritePropertyName("organization"u8);
                writer.WriteStringValue(Organization);
            }
            if (Optional.IsDefined(OrganizationType))
            {
                writer.WritePropertyName("organizationType"u8);
                writer.WriteStringValue(OrganizationType);
            }
            if (Optional.IsDefined(Region))
            {
                writer.WritePropertyName("region"u8);
                writer.WriteStringValue(Region);
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State);
            }
            if (Optional.IsDefined(StateConfidenceFactor))
            {
                writer.WritePropertyName("stateConfidenceFactor"u8);
                writer.WriteNumberValue(StateConfidenceFactor.Value);
            }
            if (Optional.IsDefined(StateCode))
            {
                writer.WritePropertyName("stateCode"u8);
                writer.WriteStringValue(StateCode);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        WorkspaceEnrichmentIPGeodata IJsonModel<WorkspaceEnrichmentIPGeodata>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkspaceEnrichmentIPGeodata>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WorkspaceEnrichmentIPGeodata)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeWorkspaceEnrichmentIPGeodata(document.RootElement, options);
        }

        internal static WorkspaceEnrichmentIPGeodata DeserializeWorkspaceEnrichmentIPGeodata(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string asn = default;
            string carrier = default;
            string city = default;
            int? cityConfidenceFactor = default;
            string continent = default;
            string country = default;
            int? countryConfidenceFactor = default;
            string ipAddr = default;
            string ipRoutingType = default;
            string latitude = default;
            string longitude = default;
            string organization = default;
            string organizationType = default;
            string region = default;
            string state = default;
            int? stateConfidenceFactor = default;
            string stateCode = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("asn"u8))
                {
                    asn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("carrier"u8))
                {
                    carrier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("city"u8))
                {
                    city = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cityConfidenceFactor"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cityConfidenceFactor = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("continent"u8))
                {
                    continent = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("country"u8))
                {
                    country = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryConfidenceFactor"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    countryConfidenceFactor = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ipAddr"u8))
                {
                    ipAddr = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipRoutingType"u8))
                {
                    ipRoutingType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("latitude"u8))
                {
                    latitude = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("longitude"u8))
                {
                    longitude = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organization"u8))
                {
                    organization = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organizationType"u8))
                {
                    organizationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("region"u8))
                {
                    region = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    state = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stateConfidenceFactor"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stateConfidenceFactor = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("stateCode"u8))
                {
                    stateCode = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new WorkspaceEnrichmentIPGeodata(
                asn,
                carrier,
                city,
                cityConfidenceFactor,
                continent,
                country,
                countryConfidenceFactor,
                ipAddr,
                ipRoutingType,
                latitude,
                longitude,
                organization,
                organizationType,
                region,
                state,
                stateConfidenceFactor,
                stateCode,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<WorkspaceEnrichmentIPGeodata>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkspaceEnrichmentIPGeodata>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(WorkspaceEnrichmentIPGeodata)} does not support writing '{options.Format}' format.");
            }
        }

        WorkspaceEnrichmentIPGeodata IPersistableModel<WorkspaceEnrichmentIPGeodata>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WorkspaceEnrichmentIPGeodata>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeWorkspaceEnrichmentIPGeodata(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(WorkspaceEnrichmentIPGeodata)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<WorkspaceEnrichmentIPGeodata>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
