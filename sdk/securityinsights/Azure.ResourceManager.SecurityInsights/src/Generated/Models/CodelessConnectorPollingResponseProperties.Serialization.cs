// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class CodelessConnectorPollingResponseProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("eventsJsonPaths"u8);
            writer.WriteStartArray();
            foreach (var item in EventsJsonPaths)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(SuccessStatusJsonPath))
            {
                writer.WritePropertyName("successStatusJsonPath"u8);
                writer.WriteStringValue(SuccessStatusJsonPath);
            }
            if (Optional.IsDefined(SuccessStatusValue))
            {
                writer.WritePropertyName("successStatusValue"u8);
                writer.WriteStringValue(SuccessStatusValue);
            }
            if (Optional.IsDefined(IsGzipCompressed))
            {
                writer.WritePropertyName("isGzipCompressed"u8);
                writer.WriteBooleanValue(IsGzipCompressed.Value);
            }
            writer.WriteEndObject();
        }

        internal static CodelessConnectorPollingResponseProperties DeserializeCodelessConnectorPollingResponseProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<string> eventsJsonPaths = default;
            Optional<string> successStatusJsonPath = default;
            Optional<string> successStatusValue = default;
            Optional<bool> isGzipCompressed = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("eventsJsonPaths"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    eventsJsonPaths = array;
                    continue;
                }
                if (property.NameEquals("successStatusJsonPath"u8))
                {
                    successStatusJsonPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("successStatusValue"u8))
                {
                    successStatusValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isGzipCompressed"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isGzipCompressed = property.Value.GetBoolean();
                    continue;
                }
            }
            return new CodelessConnectorPollingResponseProperties(eventsJsonPaths, successStatusJsonPath.Value, successStatusValue.Value, Optional.ToNullable(isGzipCompressed));
        }
    }
}
