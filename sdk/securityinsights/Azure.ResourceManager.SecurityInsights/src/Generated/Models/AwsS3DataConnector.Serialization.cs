// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class AwsS3DataConnector : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind.ToString());
            if (Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(ETag.Value.ToString());
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(DestinationTable))
            {
                writer.WritePropertyName("destinationTable");
                writer.WriteStringValue(DestinationTable);
            }
            if (Optional.IsCollectionDefined(SqsUrls))
            {
                writer.WritePropertyName("sqsUrls");
                writer.WriteStartArray();
                foreach (var item in SqsUrls)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(RoleArn))
            {
                writer.WritePropertyName("roleArn");
                writer.WriteStringValue(RoleArn);
            }
            writer.WritePropertyName("dataTypes");
            writer.WriteStartObject();
            if (Optional.IsDefined(Logs))
            {
                writer.WritePropertyName("logs");
                writer.WriteObjectValue(Logs);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static AwsS3DataConnector DeserializeAwsS3DataConnector(JsonElement element)
        {
            DataConnectorKind kind = default;
            Optional<ETag> etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> destinationTable = default;
            Optional<IList<string>> sqsUrls = default;
            Optional<string> roleArn = default;
            Optional<AwsS3DataConnectorDataTypesLogs> logs = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = new DataConnectorKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("destinationTable"))
                        {
                            destinationTable = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sqsUrls"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            sqsUrls = array;
                            continue;
                        }
                        if (property0.NameEquals("roleArn"))
                        {
                            roleArn = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dataTypes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("logs"))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    logs = AwsS3DataConnectorDataTypesLogs.DeserializeAwsS3DataConnectorDataTypesLogs(property1.Value);
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new AwsS3DataConnector(id, name, type, systemData.Value, kind, Optional.ToNullable(etag), destinationTable.Value, Optional.ToList(sqsUrls), roleArn.Value, logs.Value);
        }
    }
}
