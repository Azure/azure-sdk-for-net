// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class CodelessUiConnectorConfigProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("title");
            writer.WriteStringValue(Title);
            writer.WritePropertyName("publisher");
            writer.WriteStringValue(Publisher);
            writer.WritePropertyName("descriptionMarkdown");
            writer.WriteStringValue(DescriptionMarkdown);
            if (Optional.IsDefined(CustomImage))
            {
                writer.WritePropertyName("customImage");
                writer.WriteStringValue(CustomImage);
            }
            writer.WritePropertyName("graphQueriesTableName");
            writer.WriteStringValue(GraphQueriesTableName);
            writer.WritePropertyName("graphQueries");
            writer.WriteStartArray();
            foreach (var item in GraphQueries)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("sampleQueries");
            writer.WriteStartArray();
            foreach (var item in SampleQueries)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("dataTypes");
            writer.WriteStartArray();
            foreach (var item in DataTypes)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("connectivityCriteria");
            writer.WriteStartArray();
            foreach (var item in ConnectivityCriteria)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("availability");
            writer.WriteObjectValue(Availability);
            writer.WritePropertyName("permissions");
            writer.WriteObjectValue(Permissions);
            writer.WritePropertyName("instructionSteps");
            writer.WriteStartArray();
            foreach (var item in InstructionSteps)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static CodelessUiConnectorConfigProperties DeserializeCodelessUiConnectorConfigProperties(JsonElement element)
        {
            string title = default;
            string publisher = default;
            string descriptionMarkdown = default;
            Optional<string> customImage = default;
            string graphQueriesTableName = default;
            IList<CodelessUiConnectorConfigPropertiesGraphQueriesItem> graphQueries = default;
            IList<CodelessUiConnectorConfigPropertiesSampleQueriesItem> sampleQueries = default;
            IList<CodelessUiConnectorConfigPropertiesDataTypesItem> dataTypes = default;
            IList<CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem> connectivityCriteria = default;
            Availability availability = default;
            Permissions permissions = default;
            IList<CodelessUiConnectorConfigPropertiesInstructionStepsItem> instructionSteps = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("title"))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publisher"))
                {
                    publisher = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("descriptionMarkdown"))
                {
                    descriptionMarkdown = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customImage"))
                {
                    customImage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("graphQueriesTableName"))
                {
                    graphQueriesTableName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("graphQueries"))
                {
                    List<CodelessUiConnectorConfigPropertiesGraphQueriesItem> array = new List<CodelessUiConnectorConfigPropertiesGraphQueriesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodelessUiConnectorConfigPropertiesGraphQueriesItem.DeserializeCodelessUiConnectorConfigPropertiesGraphQueriesItem(item));
                    }
                    graphQueries = array;
                    continue;
                }
                if (property.NameEquals("sampleQueries"))
                {
                    List<CodelessUiConnectorConfigPropertiesSampleQueriesItem> array = new List<CodelessUiConnectorConfigPropertiesSampleQueriesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodelessUiConnectorConfigPropertiesSampleQueriesItem.DeserializeCodelessUiConnectorConfigPropertiesSampleQueriesItem(item));
                    }
                    sampleQueries = array;
                    continue;
                }
                if (property.NameEquals("dataTypes"))
                {
                    List<CodelessUiConnectorConfigPropertiesDataTypesItem> array = new List<CodelessUiConnectorConfigPropertiesDataTypesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodelessUiConnectorConfigPropertiesDataTypesItem.DeserializeCodelessUiConnectorConfigPropertiesDataTypesItem(item));
                    }
                    dataTypes = array;
                    continue;
                }
                if (property.NameEquals("connectivityCriteria"))
                {
                    List<CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem> array = new List<CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem.DeserializeCodelessUiConnectorConfigPropertiesConnectivityCriteriaItem(item));
                    }
                    connectivityCriteria = array;
                    continue;
                }
                if (property.NameEquals("availability"))
                {
                    availability = Availability.DeserializeAvailability(property.Value);
                    continue;
                }
                if (property.NameEquals("permissions"))
                {
                    permissions = Permissions.DeserializePermissions(property.Value);
                    continue;
                }
                if (property.NameEquals("instructionSteps"))
                {
                    List<CodelessUiConnectorConfigPropertiesInstructionStepsItem> array = new List<CodelessUiConnectorConfigPropertiesInstructionStepsItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodelessUiConnectorConfigPropertiesInstructionStepsItem.DeserializeCodelessUiConnectorConfigPropertiesInstructionStepsItem(item));
                    }
                    instructionSteps = array;
                    continue;
                }
            }
            return new CodelessUiConnectorConfigProperties(title, publisher, descriptionMarkdown, customImage.Value, graphQueriesTableName, graphQueries, sampleQueries, dataTypes, connectivityCriteria, availability, permissions, instructionSteps);
        }
    }
}
