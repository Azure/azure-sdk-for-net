// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class CodelessUiConnectorConfigProperties : IUtf8JsonSerializable, IJsonModel<CodelessUiConnectorConfigProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CodelessUiConnectorConfigProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CodelessUiConnectorConfigProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodelessUiConnectorConfigProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CodelessUiConnectorConfigProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("title"u8);
            writer.WriteStringValue(Title);
            writer.WritePropertyName("publisher"u8);
            writer.WriteStringValue(Publisher);
            writer.WritePropertyName("descriptionMarkdown"u8);
            writer.WriteStringValue(DescriptionMarkdown);
            if (Optional.IsDefined(CustomImage))
            {
                writer.WritePropertyName("customImage"u8);
                writer.WriteStringValue(CustomImage);
            }
            writer.WritePropertyName("graphQueriesTableName"u8);
            writer.WriteStringValue(GraphQueriesTableName);
            writer.WritePropertyName("graphQueries"u8);
            writer.WriteStartArray();
            foreach (var item in GraphQueries)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("sampleQueries"u8);
            writer.WriteStartArray();
            foreach (var item in SampleQueries)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("dataTypes"u8);
            writer.WriteStartArray();
            foreach (var item in DataTypes)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("connectivityCriteria"u8);
            writer.WriteStartArray();
            foreach (var item in ConnectivityCriteria)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("availability"u8);
            writer.WriteObjectValue(Availability, options);
            writer.WritePropertyName("permissions"u8);
            writer.WriteObjectValue(Permissions, options);
            writer.WritePropertyName("instructionSteps"u8);
            writer.WriteStartArray();
            foreach (var item in InstructionSteps)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        CodelessUiConnectorConfigProperties IJsonModel<CodelessUiConnectorConfigProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodelessUiConnectorConfigProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CodelessUiConnectorConfigProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCodelessUiConnectorConfigProperties(document.RootElement, options);
        }

        internal static CodelessUiConnectorConfigProperties DeserializeCodelessUiConnectorConfigProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string title = default;
            string publisher = default;
            string descriptionMarkdown = default;
            string customImage = default;
            string graphQueriesTableName = default;
            IList<CodelessUiConnectorConfigPropertiesGraphQueriesItem> graphQueries = default;
            IList<CodelessUiConnectorConfigPropertiesSampleQueriesItem> sampleQueries = default;
            IList<CodelessUiConnectorConfigPropertiesDataTypesItem> dataTypes = default;
            IList<CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem> connectivityCriteria = default;
            ConnectorAvailability availability = default;
            ConnectorPermissions permissions = default;
            IList<CodelessUiConnectorConfigPropertiesInstructionStepsItem> instructionSteps = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publisher"u8))
                {
                    publisher = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("descriptionMarkdown"u8))
                {
                    descriptionMarkdown = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customImage"u8))
                {
                    customImage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("graphQueriesTableName"u8))
                {
                    graphQueriesTableName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("graphQueries"u8))
                {
                    List<CodelessUiConnectorConfigPropertiesGraphQueriesItem> array = new List<CodelessUiConnectorConfigPropertiesGraphQueriesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodelessUiConnectorConfigPropertiesGraphQueriesItem.DeserializeCodelessUiConnectorConfigPropertiesGraphQueriesItem(item, options));
                    }
                    graphQueries = array;
                    continue;
                }
                if (property.NameEquals("sampleQueries"u8))
                {
                    List<CodelessUiConnectorConfigPropertiesSampleQueriesItem> array = new List<CodelessUiConnectorConfigPropertiesSampleQueriesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodelessUiConnectorConfigPropertiesSampleQueriesItem.DeserializeCodelessUiConnectorConfigPropertiesSampleQueriesItem(item, options));
                    }
                    sampleQueries = array;
                    continue;
                }
                if (property.NameEquals("dataTypes"u8))
                {
                    List<CodelessUiConnectorConfigPropertiesDataTypesItem> array = new List<CodelessUiConnectorConfigPropertiesDataTypesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodelessUiConnectorConfigPropertiesDataTypesItem.DeserializeCodelessUiConnectorConfigPropertiesDataTypesItem(item, options));
                    }
                    dataTypes = array;
                    continue;
                }
                if (property.NameEquals("connectivityCriteria"u8))
                {
                    List<CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem> array = new List<CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem.DeserializeCodelessUiConnectorConfigPropertiesConnectivityCriteriaItem(item, options));
                    }
                    connectivityCriteria = array;
                    continue;
                }
                if (property.NameEquals("availability"u8))
                {
                    availability = ConnectorAvailability.DeserializeConnectorAvailability(property.Value, options);
                    continue;
                }
                if (property.NameEquals("permissions"u8))
                {
                    permissions = ConnectorPermissions.DeserializeConnectorPermissions(property.Value, options);
                    continue;
                }
                if (property.NameEquals("instructionSteps"u8))
                {
                    List<CodelessUiConnectorConfigPropertiesInstructionStepsItem> array = new List<CodelessUiConnectorConfigPropertiesInstructionStepsItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodelessUiConnectorConfigPropertiesInstructionStepsItem.DeserializeCodelessUiConnectorConfigPropertiesInstructionStepsItem(item, options));
                    }
                    instructionSteps = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CodelessUiConnectorConfigProperties(
                title,
                publisher,
                descriptionMarkdown,
                customImage,
                graphQueriesTableName,
                graphQueries,
                sampleQueries,
                dataTypes,
                connectivityCriteria,
                availability,
                permissions,
                instructionSteps,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<CodelessUiConnectorConfigProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodelessUiConnectorConfigProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CodelessUiConnectorConfigProperties)} does not support writing '{options.Format}' format.");
            }
        }

        CodelessUiConnectorConfigProperties IPersistableModel<CodelessUiConnectorConfigProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodelessUiConnectorConfigProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeCodelessUiConnectorConfigProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CodelessUiConnectorConfigProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CodelessUiConnectorConfigProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
