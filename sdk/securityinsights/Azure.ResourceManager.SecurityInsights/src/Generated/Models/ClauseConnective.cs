// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary>
    /// Represents boolean connectives used to join clauses in conditions.
    /// Serialized Name: Connective
    /// </summary>
    public readonly partial struct ClauseConnective : IEquatable<ClauseConnective>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ClauseConnective"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ClauseConnective(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AndValue = "And";
        private const string OrValue = "Or";

        /// <summary>
        /// 'And' connective
        /// Serialized Name: Connective.And
        /// </summary>
        public static ClauseConnective And { get; } = new ClauseConnective(AndValue);
        /// <summary>
        /// 'Or' connective
        /// Serialized Name: Connective.Or
        /// </summary>
        public static ClauseConnective Or { get; } = new ClauseConnective(OrValue);
        /// <summary> Determines if two <see cref="ClauseConnective"/> values are the same. </summary>
        public static bool operator ==(ClauseConnective left, ClauseConnective right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ClauseConnective"/> values are not the same. </summary>
        public static bool operator !=(ClauseConnective left, ClauseConnective right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ClauseConnective"/>. </summary>
        public static implicit operator ClauseConnective(string value) => new ClauseConnective(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ClauseConnective other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ClauseConnective other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
