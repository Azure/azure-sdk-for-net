// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class MetadataDependencies : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ContentId))
            {
                writer.WritePropertyName("contentId");
                writer.WriteStringValue(ContentId);
            }
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind.Value.ToString());
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version");
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Operator))
            {
                writer.WritePropertyName("operator");
                writer.WriteStringValue(Operator.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Criteria))
            {
                writer.WritePropertyName("criteria");
                writer.WriteStartArray();
                foreach (var item in Criteria)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static MetadataDependencies DeserializeMetadataDependencies(JsonElement element)
        {
            Optional<string> contentId = default;
            Optional<SecurityInsightsKind> kind = default;
            Optional<string> version = default;
            Optional<string> name = default;
            Optional<Operator> @operator = default;
            Optional<IList<MetadataDependencies>> criteria = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("contentId"))
                {
                    contentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    kind = new SecurityInsightsKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operator"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @operator = new Operator(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("criteria"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataDependencies> array = new List<MetadataDependencies>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeMetadataDependencies(item));
                    }
                    criteria = array;
                    continue;
                }
            }
            return new MetadataDependencies(contentId.Value, Optional.ToNullable(kind), version.Value, name.Value, Optional.ToNullable(@operator), Optional.ToList(criteria));
        }
    }
}
