// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary>
    /// Represents a file.
    /// Serialized Name: FileMetadata
    /// </summary>
    public partial class FileMetadata
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FileMetadata"/>. </summary>
        public FileMetadata()
        {
        }

        /// <summary> Initializes a new instance of <see cref="FileMetadata"/>. </summary>
        /// <param name="fileFormat">
        /// The format of the file
        /// Serialized Name: FileMetadata.fileFormat
        /// </param>
        /// <param name="fileName">
        /// The name of the file.
        /// Serialized Name: FileMetadata.fileName
        /// </param>
        /// <param name="fileSize">
        /// The size of the file.
        /// Serialized Name: FileMetadata.fileSize
        /// </param>
        /// <param name="fileContentUri">
        /// A URI with a valid SAS token to allow uploading / downloading the file.
        /// Serialized Name: FileMetadata.fileContentUri
        /// </param>
        /// <param name="deleteStatus">
        /// Indicates whether the file was deleted from the storage account.
        /// Serialized Name: FileMetadata.deleteStatus
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FileMetadata(FileFormat? fileFormat, string fileName, int? fileSize, Uri fileContentUri, DeleteStatus? deleteStatus, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FileFormat = fileFormat;
            FileName = fileName;
            FileSize = fileSize;
            FileContentUri = fileContentUri;
            DeleteStatus = deleteStatus;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// The format of the file
        /// Serialized Name: FileMetadata.fileFormat
        /// </summary>
        public FileFormat? FileFormat { get; set; }
        /// <summary>
        /// The name of the file.
        /// Serialized Name: FileMetadata.fileName
        /// </summary>
        public string FileName { get; set; }
        /// <summary>
        /// The size of the file.
        /// Serialized Name: FileMetadata.fileSize
        /// </summary>
        public int? FileSize { get; set; }
        /// <summary>
        /// A URI with a valid SAS token to allow uploading / downloading the file.
        /// Serialized Name: FileMetadata.fileContentUri
        /// </summary>
        public Uri FileContentUri { get; }
        /// <summary>
        /// Indicates whether the file was deleted from the storage account.
        /// Serialized Name: FileMetadata.deleteStatus
        /// </summary>
        public DeleteStatus? DeleteStatus { get; }
    }
}
