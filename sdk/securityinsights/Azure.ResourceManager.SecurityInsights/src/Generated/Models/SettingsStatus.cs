// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> The anomaly SecurityMLAnalyticsSettings status. </summary>
    public readonly partial struct SettingsStatus : IEquatable<SettingsStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SettingsStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SettingsStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ProductionValue = "Production";
        private const string FlightingValue = "Flighting";

        /// <summary> Anomaly settings status in Production mode. </summary>
        public static SettingsStatus Production { get; } = new SettingsStatus(ProductionValue);
        /// <summary> Anomaly settings status in Flighting mode. </summary>
        public static SettingsStatus Flighting { get; } = new SettingsStatus(FlightingValue);
        /// <summary> Determines if two <see cref="SettingsStatus"/> values are the same. </summary>
        public static bool operator ==(SettingsStatus left, SettingsStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SettingsStatus"/> values are not the same. </summary>
        public static bool operator !=(SettingsStatus left, SettingsStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SettingsStatus"/>. </summary>
        public static implicit operator SettingsStatus(string value) => new SettingsStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SettingsStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SettingsStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
