// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> The classification reason the incident was closed with. </summary>
    public readonly partial struct IncidentClassificationReason : IEquatable<IncidentClassificationReason>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IncidentClassificationReason"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IncidentClassificationReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SuspiciousActivityValue = "SuspiciousActivity";
        private const string SuspiciousButExpectedValue = "SuspiciousButExpected";
        private const string IncorrectAlertLogicValue = "IncorrectAlertLogic";
        private const string InaccurateDataValue = "InaccurateData";

        /// <summary> Classification reason was suspicious activity. </summary>
        public static IncidentClassificationReason SuspiciousActivity { get; } = new IncidentClassificationReason(SuspiciousActivityValue);
        /// <summary> Classification reason was suspicious but expected. </summary>
        public static IncidentClassificationReason SuspiciousButExpected { get; } = new IncidentClassificationReason(SuspiciousButExpectedValue);
        /// <summary> Classification reason was incorrect alert logic. </summary>
        public static IncidentClassificationReason IncorrectAlertLogic { get; } = new IncidentClassificationReason(IncorrectAlertLogicValue);
        /// <summary> Classification reason was inaccurate data. </summary>
        public static IncidentClassificationReason InaccurateData { get; } = new IncidentClassificationReason(InaccurateDataValue);
        /// <summary> Determines if two <see cref="IncidentClassificationReason"/> values are the same. </summary>
        public static bool operator ==(IncidentClassificationReason left, IncidentClassificationReason right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IncidentClassificationReason"/> values are not the same. </summary>
        public static bool operator !=(IncidentClassificationReason left, IncidentClassificationReason right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IncidentClassificationReason"/>. </summary>
        public static implicit operator IncidentClassificationReason(string value) => new IncidentClassificationReason(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IncidentClassificationReason other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IncidentClassificationReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
