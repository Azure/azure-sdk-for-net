// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    internal static partial class DeliveryLocationExtensions
    {
        public static string ToSerialString(this DeliveryLocation value) => value switch
        {
            DeliveryLocation.Unknown => "Unknown",
            DeliveryLocation.Inbox => "Inbox",
            DeliveryLocation.JunkFolder => "JunkFolder",
            DeliveryLocation.DeletedFolder => "DeletedFolder",
            DeliveryLocation.Quarantine => "Quarantine",
            DeliveryLocation.External => "External",
            DeliveryLocation.Failed => "Failed",
            DeliveryLocation.Dropped => "Dropped",
            DeliveryLocation.Forwarded => "Forwarded",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DeliveryLocation value.")
        };

        public static DeliveryLocation ToDeliveryLocation(this string value)
        {
            if (string.Equals(value, "Unknown", StringComparison.InvariantCultureIgnoreCase)) return DeliveryLocation.Unknown;
            if (string.Equals(value, "Inbox", StringComparison.InvariantCultureIgnoreCase)) return DeliveryLocation.Inbox;
            if (string.Equals(value, "JunkFolder", StringComparison.InvariantCultureIgnoreCase)) return DeliveryLocation.JunkFolder;
            if (string.Equals(value, "DeletedFolder", StringComparison.InvariantCultureIgnoreCase)) return DeliveryLocation.DeletedFolder;
            if (string.Equals(value, "Quarantine", StringComparison.InvariantCultureIgnoreCase)) return DeliveryLocation.Quarantine;
            if (string.Equals(value, "External", StringComparison.InvariantCultureIgnoreCase)) return DeliveryLocation.External;
            if (string.Equals(value, "Failed", StringComparison.InvariantCultureIgnoreCase)) return DeliveryLocation.Failed;
            if (string.Equals(value, "Dropped", StringComparison.InvariantCultureIgnoreCase)) return DeliveryLocation.Dropped;
            if (string.Equals(value, "Forwarded", StringComparison.InvariantCultureIgnoreCase)) return DeliveryLocation.Forwarded;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DeliveryLocation value.");
        }
    }
}
