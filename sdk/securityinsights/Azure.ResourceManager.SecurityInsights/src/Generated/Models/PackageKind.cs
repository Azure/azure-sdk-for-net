// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary>
    /// The package kind
    /// Serialized Name: PackageKind
    /// </summary>
    public readonly partial struct PackageKind : IEquatable<PackageKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PackageKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PackageKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SolutionValue = "Solution";
        private const string StandaloneValue = "Standalone";

        /// <summary>
        /// Solution
        /// Serialized Name: PackageKind.Solution
        /// </summary>
        public static PackageKind Solution { get; } = new PackageKind(SolutionValue);
        /// <summary>
        /// Standalone
        /// Serialized Name: PackageKind.Standalone
        /// </summary>
        public static PackageKind Standalone { get; } = new PackageKind(StandaloneValue);
        /// <summary> Determines if two <see cref="PackageKind"/> values are the same. </summary>
        public static bool operator ==(PackageKind left, PackageKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PackageKind"/> values are not the same. </summary>
        public static bool operator !=(PackageKind left, PackageKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PackageKind"/>. </summary>
        public static implicit operator PackageKind(string value) => new PackageKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PackageKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PackageKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
