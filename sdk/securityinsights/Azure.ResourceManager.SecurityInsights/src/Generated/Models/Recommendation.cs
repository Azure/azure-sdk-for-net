// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> Recommendation object. </summary>
    public partial class Recommendation
    {
        /// <summary> Initializes a new instance of Recommendation. </summary>
        /// <param name="id"> id of recommendation. </param>
        /// <param name="instructions"> Instructions of the recommendation. </param>
        /// <param name="title"> Title of the recommendation. </param>
        /// <param name="description"> Description of the recommendation. </param>
        /// <param name="recommendationTypeTitle"> Title of the recommendation type. </param>
        /// <param name="recommendationTypeId"> Id of the recommendation type. </param>
        /// <param name="category"> Category of the recommendation. </param>
        /// <param name="context"> Context of the recommendation. </param>
        /// <param name="workspaceId"> Id of the workspace this recommendation refers to. </param>
        /// <param name="actions"> List of actions to take for this recommendation. </param>
        /// <param name="state"> State of the recommendation. </param>
        /// <param name="priority"> Priority of the recommendation. </param>
        /// <param name="lastEvaluatedTimeUtc"> The time stamp (UTC) when the recommendation was last evaluated. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instructions"/>, <paramref name="title"/>, <paramref name="description"/>, <paramref name="recommendationTypeTitle"/>, <paramref name="recommendationTypeId"/> or <paramref name="actions"/> is null. </exception>
        internal Recommendation(Guid id, Instructions instructions, string title, string description, string recommendationTypeTitle, string recommendationTypeId, Category category, Context context, Guid workspaceId, IEnumerable<RecommendedAction> actions, State state, Priority priority, DateTimeOffset lastEvaluatedTimeUtc)
        {
            Argument.AssertNotNull(instructions, nameof(instructions));
            Argument.AssertNotNull(title, nameof(title));
            Argument.AssertNotNull(description, nameof(description));
            Argument.AssertNotNull(recommendationTypeTitle, nameof(recommendationTypeTitle));
            Argument.AssertNotNull(recommendationTypeId, nameof(recommendationTypeId));
            Argument.AssertNotNull(actions, nameof(actions));

            Id = id;
            Instructions = instructions;
            AdditionalProperties = new ChangeTrackingDictionary<string, string>();
            Title = title;
            Description = description;
            RecommendationTypeTitle = recommendationTypeTitle;
            RecommendationTypeId = recommendationTypeId;
            Category = category;
            Context = context;
            WorkspaceId = workspaceId;
            Actions = actions.ToList();
            State = state;
            Priority = priority;
            LastEvaluatedTimeUtc = lastEvaluatedTimeUtc;
        }

        /// <summary> Initializes a new instance of Recommendation. </summary>
        /// <param name="id"> id of recommendation. </param>
        /// <param name="instructions"> Instructions of the recommendation. </param>
        /// <param name="content"> Content of the recommendation. </param>
        /// <param name="resourceId"> Id of the resource this recommendation refers to. </param>
        /// <param name="additionalProperties"> Collection of additional properties for the recommendation. </param>
        /// <param name="title"> Title of the recommendation. </param>
        /// <param name="description"> Description of the recommendation. </param>
        /// <param name="recommendationTypeTitle"> Title of the recommendation type. </param>
        /// <param name="recommendationTypeId"> Id of the recommendation type. </param>
        /// <param name="category"> Category of the recommendation. </param>
        /// <param name="context"> Context of the recommendation. </param>
        /// <param name="workspaceId"> Id of the workspace this recommendation refers to. </param>
        /// <param name="actions"> List of actions to take for this recommendation. </param>
        /// <param name="state"> State of the recommendation. </param>
        /// <param name="priority"> Priority of the recommendation. </param>
        /// <param name="lastEvaluatedTimeUtc"> The time stamp (UTC) when the recommendation was last evaluated. </param>
        /// <param name="hideUntilTimeUtc"> The time stamp (UTC) when the recommendation should be displayed again. </param>
        /// <param name="displayUntilTimeUtc"> The timestamp (UTC) after which the recommendation should not be displayed anymore. </param>
        /// <param name="visible"> Value indicating if the recommendation should be displayed or not. </param>
        internal Recommendation(Guid id, Instructions instructions, Content content, string resourceId, IReadOnlyDictionary<string, string> additionalProperties, string title, string description, string recommendationTypeTitle, string recommendationTypeId, Category category, Context context, Guid workspaceId, IReadOnlyList<RecommendedAction> actions, State state, Priority priority, DateTimeOffset lastEvaluatedTimeUtc, DateTimeOffset? hideUntilTimeUtc, DateTimeOffset? displayUntilTimeUtc, bool? visible)
        {
            Id = id;
            Instructions = instructions;
            Content = content;
            ResourceId = resourceId;
            AdditionalProperties = additionalProperties;
            Title = title;
            Description = description;
            RecommendationTypeTitle = recommendationTypeTitle;
            RecommendationTypeId = recommendationTypeId;
            Category = category;
            Context = context;
            WorkspaceId = workspaceId;
            Actions = actions;
            State = state;
            Priority = priority;
            LastEvaluatedTimeUtc = lastEvaluatedTimeUtc;
            HideUntilTimeUtc = hideUntilTimeUtc;
            DisplayUntilTimeUtc = displayUntilTimeUtc;
            Visible = visible;
        }

        /// <summary> id of recommendation. </summary>
        public Guid Id { get; }
        /// <summary> Instructions of the recommendation. </summary>
        public Instructions Instructions { get; }
        /// <summary> Content of the recommendation. </summary>
        public Content Content { get; }
        /// <summary> Id of the resource this recommendation refers to. </summary>
        public string ResourceId { get; }
        /// <summary> Collection of additional properties for the recommendation. </summary>
        public IReadOnlyDictionary<string, string> AdditionalProperties { get; }
        /// <summary> Title of the recommendation. </summary>
        public string Title { get; }
        /// <summary> Description of the recommendation. </summary>
        public string Description { get; }
        /// <summary> Title of the recommendation type. </summary>
        public string RecommendationTypeTitle { get; }
        /// <summary> Id of the recommendation type. </summary>
        public string RecommendationTypeId { get; }
        /// <summary> Category of the recommendation. </summary>
        public Category Category { get; }
        /// <summary> Context of the recommendation. </summary>
        public Context Context { get; }
        /// <summary> Id of the workspace this recommendation refers to. </summary>
        public Guid WorkspaceId { get; }
        /// <summary> List of actions to take for this recommendation. </summary>
        public IReadOnlyList<RecommendedAction> Actions { get; }
        /// <summary> State of the recommendation. </summary>
        public State State { get; }
        /// <summary> Priority of the recommendation. </summary>
        public Priority Priority { get; }
        /// <summary> The time stamp (UTC) when the recommendation was last evaluated. </summary>
        public DateTimeOffset LastEvaluatedTimeUtc { get; }
        /// <summary> The time stamp (UTC) when the recommendation should be displayed again. </summary>
        public DateTimeOffset? HideUntilTimeUtc { get; }
        /// <summary> The timestamp (UTC) after which the recommendation should not be displayed anymore. </summary>
        public DateTimeOffset? DisplayUntilTimeUtc { get; }
        /// <summary> Value indicating if the recommendation should be displayed or not. </summary>
        public bool? Visible { get; }
    }
}
