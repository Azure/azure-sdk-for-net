// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class FileMetadata : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(FileFormat))
            {
                writer.WritePropertyName("fileFormat");
                writer.WriteStringValue(FileFormat.Value.ToString());
            }
            if (Optional.IsDefined(FileName))
            {
                writer.WritePropertyName("fileName");
                writer.WriteStringValue(FileName);
            }
            if (Optional.IsDefined(FileSize))
            {
                writer.WritePropertyName("fileSize");
                writer.WriteNumberValue(FileSize.Value);
            }
            writer.WriteEndObject();
        }

        internal static FileMetadata DeserializeFileMetadata(JsonElement element)
        {
            Optional<FileFormat> fileFormat = default;
            Optional<string> fileName = default;
            Optional<int> fileSize = default;
            Optional<Uri> fileContentUri = default;
            Optional<DeleteStatus> deleteStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("fileFormat"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fileFormat = new FileFormat(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fileName"))
                {
                    fileName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fileSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fileContentUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        fileContentUri = null;
                        continue;
                    }
                    fileContentUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deleteStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deleteStatus = new DeleteStatus(property.Value.GetString());
                    continue;
                }
            }
            return new FileMetadata(Optional.ToNullable(fileFormat), fileName.Value, Optional.ToNullable(fileSize), fileContentUri.Value, Optional.ToNullable(deleteStatus));
        }
    }
}
