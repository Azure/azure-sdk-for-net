// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty. </summary>
    public readonly partial struct MatchingMethod : IEquatable<MatchingMethod>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MatchingMethod"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MatchingMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AllEntitiesValue = "AllEntities";
        private const string AnyAlertValue = "AnyAlert";
        private const string SelectedValue = "Selected";

        /// <summary> Grouping alerts into a single incident if all the entities match. </summary>
        public static MatchingMethod AllEntities { get; } = new MatchingMethod(AllEntitiesValue);
        /// <summary> Grouping any alerts triggered by this rule into a single incident. </summary>
        public static MatchingMethod AnyAlert { get; } = new MatchingMethod(AnyAlertValue);
        /// <summary> Grouping alerts into a single incident if the selected entities, custom details and alert details match. </summary>
        public static MatchingMethod Selected { get; } = new MatchingMethod(SelectedValue);
        /// <summary> Determines if two <see cref="MatchingMethod"/> values are the same. </summary>
        public static bool operator ==(MatchingMethod left, MatchingMethod right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MatchingMethod"/> values are not the same. </summary>
        public static bool operator !=(MatchingMethod left, MatchingMethod right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MatchingMethod"/>. </summary>
        public static implicit operator MatchingMethod(string value) => new MatchingMethod(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MatchingMethod other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MatchingMethod other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
