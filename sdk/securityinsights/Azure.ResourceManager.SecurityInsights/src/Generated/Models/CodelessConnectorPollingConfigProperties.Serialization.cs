// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class CodelessConnectorPollingConfigProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(IsActive))
            {
                writer.WritePropertyName("isActive");
                writer.WriteBooleanValue(IsActive.Value);
            }
            writer.WritePropertyName("auth");
            writer.WriteObjectValue(Auth);
            writer.WritePropertyName("request");
            writer.WriteObjectValue(Request);
            if (Optional.IsDefined(Paging))
            {
                writer.WritePropertyName("paging");
                writer.WriteObjectValue(Paging);
            }
            if (Optional.IsDefined(Response))
            {
                writer.WritePropertyName("response");
                writer.WriteObjectValue(Response);
            }
            writer.WriteEndObject();
        }

        internal static CodelessConnectorPollingConfigProperties DeserializeCodelessConnectorPollingConfigProperties(JsonElement element)
        {
            Optional<bool> isActive = default;
            CodelessConnectorPollingAuthProperties auth = default;
            CodelessConnectorPollingRequestProperties request = default;
            Optional<CodelessConnectorPollingPagingProperties> paging = default;
            Optional<CodelessConnectorPollingResponseProperties> response = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("isActive"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isActive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("auth"))
                {
                    auth = CodelessConnectorPollingAuthProperties.DeserializeCodelessConnectorPollingAuthProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("request"))
                {
                    request = CodelessConnectorPollingRequestProperties.DeserializeCodelessConnectorPollingRequestProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("paging"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    paging = CodelessConnectorPollingPagingProperties.DeserializeCodelessConnectorPollingPagingProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("response"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    response = CodelessConnectorPollingResponseProperties.DeserializeCodelessConnectorPollingResponseProperties(property.Value);
                    continue;
                }
            }
            return new CodelessConnectorPollingConfigProperties(Optional.ToNullable(isActive), auth, request, paging.Value, response.Value);
        }
    }
}
