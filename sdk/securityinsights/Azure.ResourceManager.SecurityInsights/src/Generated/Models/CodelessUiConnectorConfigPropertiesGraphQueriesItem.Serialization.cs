// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class CodelessUiConnectorConfigPropertiesGraphQueriesItem : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MetricName))
            {
                writer.WritePropertyName("metricName"u8);
                writer.WriteStringValue(MetricName);
            }
            if (Optional.IsDefined(Legend))
            {
                writer.WritePropertyName("legend"u8);
                writer.WriteStringValue(Legend);
            }
            if (Optional.IsDefined(BaseQuery))
            {
                writer.WritePropertyName("baseQuery"u8);
                writer.WriteStringValue(BaseQuery);
            }
            writer.WriteEndObject();
        }

        internal static CodelessUiConnectorConfigPropertiesGraphQueriesItem DeserializeCodelessUiConnectorConfigPropertiesGraphQueriesItem(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> metricName = default;
            Optional<string> legend = default;
            Optional<string> baseQuery = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("metricName"u8))
                {
                    metricName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("legend"u8))
                {
                    legend = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("baseQuery"u8))
                {
                    baseQuery = property.Value.GetString();
                    continue;
                }
            }
            return new CodelessUiConnectorConfigPropertiesGraphQueriesItem(metricName.Value, legend.Value, baseQuery.Value);
        }
    }
}
