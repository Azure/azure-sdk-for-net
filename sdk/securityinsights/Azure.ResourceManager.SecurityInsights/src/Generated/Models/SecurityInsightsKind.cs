// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary>
    /// The kind of content the metadata is for.
    /// Serialized Name: Kind
    /// </summary>
    public readonly partial struct SecurityInsightsKind : IEquatable<SecurityInsightsKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SecurityInsightsKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SecurityInsightsKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DataConnectorValue = "DataConnector";
        private const string DataTypeValue = "DataType";
        private const string WorkbookValue = "Workbook";
        private const string WorkbookTemplateValue = "WorkbookTemplate";
        private const string PlaybookValue = "Playbook";
        private const string PlaybookTemplateValue = "PlaybookTemplate";
        private const string AnalyticsRuleTemplateValue = "AnalyticsRuleTemplate";
        private const string AnalyticsRuleValue = "AnalyticsRule";
        private const string HuntingQueryValue = "HuntingQuery";
        private const string InvestigationQueryValue = "InvestigationQuery";
        private const string ParserValue = "Parser";
        private const string WatchlistValue = "Watchlist";
        private const string WatchlistTemplateValue = "WatchlistTemplate";
        private const string SolutionValue = "Solution";
        private const string AzureFunctionValue = "AzureFunction";
        private const string LogicAppsCustomConnectorValue = "LogicAppsCustomConnector";
        private const string AutomationRuleValue = "AutomationRule";

        /// <summary>
        /// DataConnector
        /// Serialized Name: Kind.DataConnector
        /// </summary>
        public static SecurityInsightsKind DataConnector { get; } = new SecurityInsightsKind(DataConnectorValue);
        /// <summary>
        /// DataType
        /// Serialized Name: Kind.DataType
        /// </summary>
        public static SecurityInsightsKind DataType { get; } = new SecurityInsightsKind(DataTypeValue);
        /// <summary>
        /// Workbook
        /// Serialized Name: Kind.Workbook
        /// </summary>
        public static SecurityInsightsKind Workbook { get; } = new SecurityInsightsKind(WorkbookValue);
        /// <summary>
        /// WorkbookTemplate
        /// Serialized Name: Kind.WorkbookTemplate
        /// </summary>
        public static SecurityInsightsKind WorkbookTemplate { get; } = new SecurityInsightsKind(WorkbookTemplateValue);
        /// <summary>
        /// Playbook
        /// Serialized Name: Kind.Playbook
        /// </summary>
        public static SecurityInsightsKind Playbook { get; } = new SecurityInsightsKind(PlaybookValue);
        /// <summary>
        /// PlaybookTemplate
        /// Serialized Name: Kind.PlaybookTemplate
        /// </summary>
        public static SecurityInsightsKind PlaybookTemplate { get; } = new SecurityInsightsKind(PlaybookTemplateValue);
        /// <summary>
        /// AnalyticsRuleTemplate
        /// Serialized Name: Kind.AnalyticsRuleTemplate
        /// </summary>
        public static SecurityInsightsKind AnalyticsRuleTemplate { get; } = new SecurityInsightsKind(AnalyticsRuleTemplateValue);
        /// <summary>
        /// AnalyticsRule
        /// Serialized Name: Kind.AnalyticsRule
        /// </summary>
        public static SecurityInsightsKind AnalyticsRule { get; } = new SecurityInsightsKind(AnalyticsRuleValue);
        /// <summary>
        /// HuntingQuery
        /// Serialized Name: Kind.HuntingQuery
        /// </summary>
        public static SecurityInsightsKind HuntingQuery { get; } = new SecurityInsightsKind(HuntingQueryValue);
        /// <summary>
        /// InvestigationQuery
        /// Serialized Name: Kind.InvestigationQuery
        /// </summary>
        public static SecurityInsightsKind InvestigationQuery { get; } = new SecurityInsightsKind(InvestigationQueryValue);
        /// <summary>
        /// Parser
        /// Serialized Name: Kind.Parser
        /// </summary>
        public static SecurityInsightsKind Parser { get; } = new SecurityInsightsKind(ParserValue);
        /// <summary>
        /// Watchlist
        /// Serialized Name: Kind.Watchlist
        /// </summary>
        public static SecurityInsightsKind Watchlist { get; } = new SecurityInsightsKind(WatchlistValue);
        /// <summary>
        /// WatchlistTemplate
        /// Serialized Name: Kind.WatchlistTemplate
        /// </summary>
        public static SecurityInsightsKind WatchlistTemplate { get; } = new SecurityInsightsKind(WatchlistTemplateValue);
        /// <summary>
        /// Solution
        /// Serialized Name: Kind.Solution
        /// </summary>
        public static SecurityInsightsKind Solution { get; } = new SecurityInsightsKind(SolutionValue);
        /// <summary>
        /// AzureFunction
        /// Serialized Name: Kind.AzureFunction
        /// </summary>
        public static SecurityInsightsKind AzureFunction { get; } = new SecurityInsightsKind(AzureFunctionValue);
        /// <summary>
        /// LogicAppsCustomConnector
        /// Serialized Name: Kind.LogicAppsCustomConnector
        /// </summary>
        public static SecurityInsightsKind LogicAppsCustomConnector { get; } = new SecurityInsightsKind(LogicAppsCustomConnectorValue);
        /// <summary>
        /// AutomationRule
        /// Serialized Name: Kind.AutomationRule
        /// </summary>
        public static SecurityInsightsKind AutomationRule { get; } = new SecurityInsightsKind(AutomationRuleValue);
        /// <summary> Determines if two <see cref="SecurityInsightsKind"/> values are the same. </summary>
        public static bool operator ==(SecurityInsightsKind left, SecurityInsightsKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SecurityInsightsKind"/> values are not the same. </summary>
        public static bool operator !=(SecurityInsightsKind left, SecurityInsightsKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SecurityInsightsKind"/>. </summary>
        public static implicit operator SecurityInsightsKind(string value) => new SecurityInsightsKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SecurityInsightsKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SecurityInsightsKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
