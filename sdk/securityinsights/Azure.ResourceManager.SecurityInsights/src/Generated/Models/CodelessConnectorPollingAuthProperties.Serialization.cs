// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class CodelessConnectorPollingAuthProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("authType");
            writer.WriteStringValue(AuthType);
            if (Optional.IsDefined(ApiKeyName))
            {
                writer.WritePropertyName("apiKeyName");
                writer.WriteStringValue(ApiKeyName);
            }
            if (Optional.IsDefined(ApiKeyIdentifier))
            {
                writer.WritePropertyName("apiKeyIdentifier");
                writer.WriteStringValue(ApiKeyIdentifier);
            }
            if (Optional.IsDefined(IsApiKeyInPostPayload))
            {
                writer.WritePropertyName("isApiKeyInPostPayload");
                writer.WriteStringValue(IsApiKeyInPostPayload);
            }
            if (Optional.IsDefined(FlowName))
            {
                writer.WritePropertyName("flowName");
                writer.WriteStringValue(FlowName);
            }
            if (Optional.IsDefined(TokenEndpoint))
            {
                writer.WritePropertyName("tokenEndpoint");
                writer.WriteStringValue(TokenEndpoint);
            }
            if (Optional.IsDefined(AuthorizationEndpoint))
            {
                writer.WritePropertyName("authorizationEndpoint");
                writer.WriteStringValue(AuthorizationEndpoint);
            }
            if (Optional.IsDefined(AuthorizationEndpointQueryParameters))
            {
                writer.WritePropertyName("authorizationEndpointQueryParameters");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(AuthorizationEndpointQueryParameters);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(AuthorizationEndpointQueryParameters.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(RedirectionEndpoint))
            {
                writer.WritePropertyName("redirectionEndpoint");
                writer.WriteStringValue(RedirectionEndpoint);
            }
            if (Optional.IsDefined(TokenEndpointHeaders))
            {
                writer.WritePropertyName("tokenEndpointHeaders");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(TokenEndpointHeaders);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(TokenEndpointHeaders.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(TokenEndpointQueryParameters))
            {
                writer.WritePropertyName("tokenEndpointQueryParameters");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(TokenEndpointQueryParameters);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(TokenEndpointQueryParameters.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(IsClientSecretInHeader))
            {
                writer.WritePropertyName("isClientSecretInHeader");
                writer.WriteBooleanValue(IsClientSecretInHeader.Value);
            }
            if (Optional.IsDefined(Scope))
            {
                writer.WritePropertyName("scope");
                writer.WriteStringValue(Scope);
            }
            writer.WriteEndObject();
        }

        internal static CodelessConnectorPollingAuthProperties DeserializeCodelessConnectorPollingAuthProperties(JsonElement element)
        {
            string authType = default;
            Optional<string> apiKeyName = default;
            Optional<string> apiKeyIdentifier = default;
            Optional<string> isApiKeyInPostPayload = default;
            Optional<string> flowName = default;
            Optional<string> tokenEndpoint = default;
            Optional<string> authorizationEndpoint = default;
            Optional<BinaryData> authorizationEndpointQueryParameters = default;
            Optional<string> redirectionEndpoint = default;
            Optional<BinaryData> tokenEndpointHeaders = default;
            Optional<BinaryData> tokenEndpointQueryParameters = default;
            Optional<bool> isClientSecretInHeader = default;
            Optional<string> scope = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("authType"))
                {
                    authType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("apiKeyName"))
                {
                    apiKeyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("apiKeyIdentifier"))
                {
                    apiKeyIdentifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isApiKeyInPostPayload"))
                {
                    isApiKeyInPostPayload = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("flowName"))
                {
                    flowName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tokenEndpoint"))
                {
                    tokenEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authorizationEndpoint"))
                {
                    authorizationEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authorizationEndpointQueryParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    authorizationEndpointQueryParameters = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("redirectionEndpoint"))
                {
                    redirectionEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tokenEndpointHeaders"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tokenEndpointHeaders = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("tokenEndpointQueryParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tokenEndpointQueryParameters = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("isClientSecretInHeader"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isClientSecretInHeader = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("scope"))
                {
                    scope = property.Value.GetString();
                    continue;
                }
            }
            return new CodelessConnectorPollingAuthProperties(authType, apiKeyName.Value, apiKeyIdentifier.Value, isApiKeyInPostPayload.Value, flowName.Value, tokenEndpoint.Value, authorizationEndpoint.Value, authorizationEndpointQueryParameters.Value, redirectionEndpoint.Value, tokenEndpointHeaders.Value, tokenEndpointQueryParameters.Value, Optional.ToNullable(isClientSecretInHeader), scope.Value);
        }
    }
}
