// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class CodelessConnectorPollingAuthProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("authType"u8);
            writer.WriteStringValue(AuthType);
            if (Optional.IsDefined(ApiKeyName))
            {
                writer.WritePropertyName("apiKeyName"u8);
                writer.WriteStringValue(ApiKeyName);
            }
            if (Optional.IsDefined(ApiKeyIdentifier))
            {
                writer.WritePropertyName("apiKeyIdentifier"u8);
                writer.WriteStringValue(ApiKeyIdentifier);
            }
            if (Optional.IsDefined(IsApiKeyInPostPayload))
            {
                writer.WritePropertyName("isApiKeyInPostPayload"u8);
                writer.WriteStringValue(IsApiKeyInPostPayload);
            }
            if (Optional.IsDefined(FlowName))
            {
                writer.WritePropertyName("flowName"u8);
                writer.WriteStringValue(FlowName);
            }
            if (Optional.IsDefined(TokenEndpoint))
            {
                writer.WritePropertyName("tokenEndpoint"u8);
                writer.WriteStringValue(TokenEndpoint);
            }
            if (Optional.IsDefined(AuthorizationEndpoint))
            {
                writer.WritePropertyName("authorizationEndpoint"u8);
                writer.WriteStringValue(AuthorizationEndpoint);
            }
            if (Optional.IsDefined(AuthorizationEndpointQueryParameters))
            {
                writer.WritePropertyName("authorizationEndpointQueryParameters"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(AuthorizationEndpointQueryParameters);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(AuthorizationEndpointQueryParameters.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(RedirectionEndpoint))
            {
                writer.WritePropertyName("redirectionEndpoint"u8);
                writer.WriteStringValue(RedirectionEndpoint);
            }
            if (Optional.IsDefined(TokenEndpointHeaders))
            {
                writer.WritePropertyName("tokenEndpointHeaders"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(TokenEndpointHeaders);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(TokenEndpointHeaders.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(TokenEndpointQueryParameters))
            {
                writer.WritePropertyName("tokenEndpointQueryParameters"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(TokenEndpointQueryParameters);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(TokenEndpointQueryParameters.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(IsClientSecretInHeader))
            {
                writer.WritePropertyName("isClientSecretInHeader"u8);
                writer.WriteBooleanValue(IsClientSecretInHeader.Value);
            }
            if (Optional.IsDefined(Scope))
            {
                writer.WritePropertyName("scope"u8);
                writer.WriteStringValue(Scope);
            }
            writer.WriteEndObject();
        }

        internal static CodelessConnectorPollingAuthProperties DeserializeCodelessConnectorPollingAuthProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string authType = default;
            Optional<string> apiKeyName = default;
            Optional<string> apiKeyIdentifier = default;
            Optional<string> isApiKeyInPostPayload = default;
            Optional<string> flowName = default;
            Optional<string> tokenEndpoint = default;
            Optional<string> authorizationEndpoint = default;
            Optional<BinaryData> authorizationEndpointQueryParameters = default;
            Optional<string> redirectionEndpoint = default;
            Optional<BinaryData> tokenEndpointHeaders = default;
            Optional<BinaryData> tokenEndpointQueryParameters = default;
            Optional<bool> isClientSecretInHeader = default;
            Optional<string> scope = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("authType"u8))
                {
                    authType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("apiKeyName"u8))
                {
                    apiKeyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("apiKeyIdentifier"u8))
                {
                    apiKeyIdentifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isApiKeyInPostPayload"u8))
                {
                    isApiKeyInPostPayload = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("flowName"u8))
                {
                    flowName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tokenEndpoint"u8))
                {
                    tokenEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authorizationEndpoint"u8))
                {
                    authorizationEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authorizationEndpointQueryParameters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authorizationEndpointQueryParameters = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("redirectionEndpoint"u8))
                {
                    redirectionEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tokenEndpointHeaders"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tokenEndpointHeaders = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("tokenEndpointQueryParameters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tokenEndpointQueryParameters = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("isClientSecretInHeader"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isClientSecretInHeader = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("scope"u8))
                {
                    scope = property.Value.GetString();
                    continue;
                }
            }
            return new CodelessConnectorPollingAuthProperties(authType, apiKeyName.Value, apiKeyIdentifier.Value, isApiKeyInPostPayload.Value, flowName.Value, tokenEndpoint.Value, authorizationEndpoint.Value, authorizationEndpointQueryParameters.Value, redirectionEndpoint.Value, tokenEndpointHeaders.Value, tokenEndpointQueryParameters.Value, Optional.ToNullable(isClientSecretInHeader), scope.Value);
        }
    }
}
