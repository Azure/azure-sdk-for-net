// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Xml;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class SecurityInsightsGroupingConfiguration : IUtf8JsonSerializable, IJsonModel<SecurityInsightsGroupingConfiguration>, IPersistableModel<SecurityInsightsGroupingConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SecurityInsightsGroupingConfiguration>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<SecurityInsightsGroupingConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SecurityInsightsGroupingConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SecurityInsightsGroupingConfiguration)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("enabled"u8);
            writer.WriteBooleanValue(IsEnabled);
            writer.WritePropertyName("reopenClosedIncident"u8);
            writer.WriteBooleanValue(IsClosedIncidentReopened);
            writer.WritePropertyName("lookbackDuration"u8);
            writer.WriteStringValue(LookbackDuration, "P");
            writer.WritePropertyName("matchingMethod"u8);
            writer.WriteStringValue(MatchingMethod.ToString());
            if (Optional.IsCollectionDefined(GroupByEntities))
            {
                writer.WritePropertyName("groupByEntities"u8);
                writer.WriteStartArray();
                foreach (var item in GroupByEntities)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(GroupByAlertDetails))
            {
                writer.WritePropertyName("groupByAlertDetails"u8);
                writer.WriteStartArray();
                foreach (var item in GroupByAlertDetails)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(GroupByCustomDetails))
            {
                writer.WritePropertyName("groupByCustomDetails"u8);
                writer.WriteStartArray();
                foreach (var item in GroupByCustomDetails)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SecurityInsightsGroupingConfiguration IJsonModel<SecurityInsightsGroupingConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SecurityInsightsGroupingConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SecurityInsightsGroupingConfiguration)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSecurityInsightsGroupingConfiguration(document.RootElement, options);
        }

        internal static SecurityInsightsGroupingConfiguration DeserializeSecurityInsightsGroupingConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool enabled = default;
            bool reopenClosedIncident = default;
            TimeSpan lookbackDuration = default;
            SecurityInsightsGroupingMatchingMethod matchingMethod = default;
            Optional<IList<SecurityInsightsAlertRuleEntityMappingType>> groupByEntities = default;
            Optional<IList<SecurityInsightsAlertDetail>> groupByAlertDetails = default;
            Optional<IList<string>> groupByCustomDetails = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enabled"u8))
                {
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("reopenClosedIncident"u8))
                {
                    reopenClosedIncident = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lookbackDuration"u8))
                {
                    lookbackDuration = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("matchingMethod"u8))
                {
                    matchingMethod = new SecurityInsightsGroupingMatchingMethod(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("groupByEntities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SecurityInsightsAlertRuleEntityMappingType> array = new List<SecurityInsightsAlertRuleEntityMappingType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new SecurityInsightsAlertRuleEntityMappingType(item.GetString()));
                    }
                    groupByEntities = array;
                    continue;
                }
                if (property.NameEquals("groupByAlertDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SecurityInsightsAlertDetail> array = new List<SecurityInsightsAlertDetail>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new SecurityInsightsAlertDetail(item.GetString()));
                    }
                    groupByAlertDetails = array;
                    continue;
                }
                if (property.NameEquals("groupByCustomDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    groupByCustomDetails = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SecurityInsightsGroupingConfiguration(enabled, reopenClosedIncident, lookbackDuration, matchingMethod, Optional.ToList(groupByEntities), Optional.ToList(groupByAlertDetails), Optional.ToList(groupByCustomDetails), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(IsEnabled))
            {
                builder.Append("  enabled:");
                var boolValue = IsEnabled == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsClosedIncidentReopened))
            {
                builder.Append("  reopenClosedIncident:");
                var boolValue = IsClosedIncidentReopened == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(LookbackDuration))
            {
                builder.Append("  lookbackDuration:");
                var formattedTimeSpan = XmlConvert.ToString(LookbackDuration);
                builder.AppendLine($" '{formattedTimeSpan}'");
            }

            if (Optional.IsDefined(MatchingMethod))
            {
                builder.Append("  matchingMethod:");
                builder.AppendLine($" '{MatchingMethod.ToString()}'");
            }

            if (Optional.IsCollectionDefined(GroupByEntities))
            {
                builder.Append("  groupByEntities:");
                builder.AppendLine(" [");
                foreach (var item in GroupByEntities)
                {
                    builder.AppendLine($"    '{item.ToString()}'");
                }
                builder.AppendLine("  ]");
            }

            if (Optional.IsCollectionDefined(GroupByAlertDetails))
            {
                builder.Append("  groupByAlertDetails:");
                builder.AppendLine(" [");
                foreach (var item in GroupByAlertDetails)
                {
                    builder.AppendLine($"    '{item.ToString()}'");
                }
                builder.AppendLine("  ]");
            }

            if (Optional.IsCollectionDefined(GroupByCustomDetails))
            {
                builder.Append("  groupByCustomDetails:");
                builder.AppendLine(" [");
                foreach (var item in GroupByCustomDetails)
                {
                    if (item == null)
                    {
                        builder.Append("null");
                        continue;
                    }
                    builder.AppendLine($"    '{item}'");
                }
                builder.AppendLine("  ]");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                stringBuilder.AppendLine($"{indent}{line}");
            }
        }

        BinaryData IPersistableModel<SecurityInsightsGroupingConfiguration>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SecurityInsightsGroupingConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(SecurityInsightsGroupingConfiguration)} does not support '{options.Format}' format.");
            }
        }

        SecurityInsightsGroupingConfiguration IPersistableModel<SecurityInsightsGroupingConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SecurityInsightsGroupingConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSecurityInsightsGroupingConfiguration(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(SecurityInsightsGroupingConfiguration)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<SecurityInsightsGroupingConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
