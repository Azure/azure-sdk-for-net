// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityInsights;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> Represents MTP (Microsoft Threat Protection) data connector. </summary>
    public partial class MTPDataConnector : SecurityInsightsDataConnectorData
    {
        /// <summary> Initializes a new instance of MTPDataConnector. </summary>
        public MTPDataConnector()
        {
            Kind = DataConnectorKind.MicrosoftThreatProtection;
        }

        /// <summary> Initializes a new instance of MTPDataConnector. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="kind"> The data connector kind. </param>
        /// <param name="etag"> Etag of the azure resource. </param>
        /// <param name="tenantId"> The tenant id to connect to, and get the data from. </param>
        /// <param name="filteredProviders"> The available filtered providers for the connector. </param>
        /// <param name="incidents"> Incidents data type for Microsoft Threat Protection Platforms data connector. </param>
        /// <param name="alerts"> Alerts data type for Microsoft Threat Protection Platforms data connector. </param>
        internal MTPDataConnector(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, DataConnectorKind kind, ETag? etag, Guid? tenantId, MtpFilteredProviders filteredProviders, MTPDataConnectorDataTypesIncidents incidents, MTPDataConnectorDataTypesAlerts alerts) : base(id, name, resourceType, systemData, kind, etag)
        {
            TenantId = tenantId;
            FilteredProviders = filteredProviders;
            Incidents = incidents;
            Alerts = alerts;
            Kind = kind;
        }

        /// <summary> The tenant id to connect to, and get the data from. </summary>
        public Guid? TenantId { get; set; }
        /// <summary> The available filtered providers for the connector. </summary>
        internal MtpFilteredProviders FilteredProviders { get; set; }
        /// <summary> Alerts filtered providers. When filters are not applied, all alerts will stream through the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state. </summary>
        public IList<MtpProvider> FilteredProvidersAlerts
        {
            get => FilteredProviders is null ? default : FilteredProviders.Alerts;
            set => FilteredProviders = new MtpFilteredProviders(value);
        }

        /// <summary> Incidents data type for Microsoft Threat Protection Platforms data connector. </summary>
        internal MTPDataConnectorDataTypesIncidents Incidents { get; set; }
        /// <summary> Describe whether this data type connection is enabled or not. </summary>
        public SecurityInsightsDataTypeConnectionState? IncidentsState
        {
            get => Incidents is null ? default(SecurityInsightsDataTypeConnectionState?) : Incidents.State;
            set
            {
                Incidents = value.HasValue ? new MTPDataConnectorDataTypesIncidents(value.Value) : null;
            }
        }

        /// <summary> Alerts data type for Microsoft Threat Protection Platforms data connector. </summary>
        internal MTPDataConnectorDataTypesAlerts Alerts { get; set; }
        /// <summary> Describe whether this data type connection is enabled or not. </summary>
        public SecurityInsightsDataTypeConnectionState? AlertsState
        {
            get => Alerts is null ? default(SecurityInsightsDataTypeConnectionState?) : Alerts.State;
            set
            {
                Alerts = value.HasValue ? new MTPDataConnectorDataTypesAlerts(value.Value) : null;
            }
        }
    }
}
