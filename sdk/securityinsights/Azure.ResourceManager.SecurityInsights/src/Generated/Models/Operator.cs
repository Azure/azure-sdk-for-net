// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> Represents an operator in a ConditionClause. </summary>
    public readonly partial struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Operator"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EqualsValueValue = "Equals";
        private const string NotEqualsValue = "NotEquals";
        private const string LessThanValue = "LessThan";
        private const string LessThanEqualValue = "LessThanEqual";
        private const string GreaterThanValue = "GreaterThan";
        private const string GreaterThanEqualValue = "GreaterThanEqual";
        private const string StringContainsValue = "StringContains";
        private const string StringNotContainsValue = "StringNotContains";
        private const string StringStartsWithValue = "StringStartsWith";
        private const string StringNotStartsWithValue = "StringNotStartsWith";
        private const string StringEndsWithValue = "StringEndsWith";
        private const string StringNotEndsWithValue = "StringNotEndsWith";
        private const string StringIsEmptyValue = "StringIsEmpty";
        private const string IsNullValue = "IsNull";
        private const string IsTrueValue = "IsTrue";
        private const string IsFalseValue = "IsFalse";
        private const string ArrayContainsValue = "ArrayContains";
        private const string ArrayNotContainsValue = "ArrayNotContains";
        private const string OnOrAfterRelativeValue = "OnOrAfterRelative";
        private const string AfterRelativeValue = "AfterRelative";
        private const string OnOrBeforeRelativeValue = "OnOrBeforeRelative";
        private const string BeforeRelativeValue = "BeforeRelative";
        private const string OnOrAfterAbsoluteValue = "OnOrAfterAbsolute";
        private const string AfterAbsoluteValue = "AfterAbsolute";
        private const string OnOrBeforeAbsoluteValue = "OnOrBeforeAbsolute";
        private const string BeforeAbsoluteValue = "BeforeAbsolute";

        /// <summary> Equals. </summary>
        public static Operator EqualsValue { get; } = new Operator(EqualsValueValue);
        /// <summary> NotEquals. </summary>
        public static Operator NotEquals { get; } = new Operator(NotEqualsValue);
        /// <summary> LessThan. </summary>
        public static Operator LessThan { get; } = new Operator(LessThanValue);
        /// <summary> LessThanEqual. </summary>
        public static Operator LessThanEqual { get; } = new Operator(LessThanEqualValue);
        /// <summary> GreaterThan. </summary>
        public static Operator GreaterThan { get; } = new Operator(GreaterThanValue);
        /// <summary> GreaterThanEqual. </summary>
        public static Operator GreaterThanEqual { get; } = new Operator(GreaterThanEqualValue);
        /// <summary> StringContains. </summary>
        public static Operator StringContains { get; } = new Operator(StringContainsValue);
        /// <summary> StringNotContains. </summary>
        public static Operator StringNotContains { get; } = new Operator(StringNotContainsValue);
        /// <summary> StringStartsWith. </summary>
        public static Operator StringStartsWith { get; } = new Operator(StringStartsWithValue);
        /// <summary> StringNotStartsWith. </summary>
        public static Operator StringNotStartsWith { get; } = new Operator(StringNotStartsWithValue);
        /// <summary> StringEndsWith. </summary>
        public static Operator StringEndsWith { get; } = new Operator(StringEndsWithValue);
        /// <summary> StringNotEndsWith. </summary>
        public static Operator StringNotEndsWith { get; } = new Operator(StringNotEndsWithValue);
        /// <summary> StringIsEmpty. </summary>
        public static Operator StringIsEmpty { get; } = new Operator(StringIsEmptyValue);
        /// <summary> IsNull. </summary>
        public static Operator IsNull { get; } = new Operator(IsNullValue);
        /// <summary> IsTrue. </summary>
        public static Operator IsTrue { get; } = new Operator(IsTrueValue);
        /// <summary> IsFalse. </summary>
        public static Operator IsFalse { get; } = new Operator(IsFalseValue);
        /// <summary> ArrayContains. </summary>
        public static Operator ArrayContains { get; } = new Operator(ArrayContainsValue);
        /// <summary> ArrayNotContains. </summary>
        public static Operator ArrayNotContains { get; } = new Operator(ArrayNotContainsValue);
        /// <summary> OnOrAfterRelative. </summary>
        public static Operator OnOrAfterRelative { get; } = new Operator(OnOrAfterRelativeValue);
        /// <summary> AfterRelative. </summary>
        public static Operator AfterRelative { get; } = new Operator(AfterRelativeValue);
        /// <summary> OnOrBeforeRelative. </summary>
        public static Operator OnOrBeforeRelative { get; } = new Operator(OnOrBeforeRelativeValue);
        /// <summary> BeforeRelative. </summary>
        public static Operator BeforeRelative { get; } = new Operator(BeforeRelativeValue);
        /// <summary> OnOrAfterAbsolute. </summary>
        public static Operator OnOrAfterAbsolute { get; } = new Operator(OnOrAfterAbsoluteValue);
        /// <summary> AfterAbsolute. </summary>
        public static Operator AfterAbsolute { get; } = new Operator(AfterAbsoluteValue);
        /// <summary> OnOrBeforeAbsolute. </summary>
        public static Operator OnOrBeforeAbsolute { get; } = new Operator(OnOrBeforeAbsoluteValue);
        /// <summary> BeforeAbsolute. </summary>
        public static Operator BeforeAbsolute { get; } = new Operator(BeforeAbsoluteValue);
        /// <summary> Determines if two <see cref="Operator"/> values are the same. </summary>
        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Operator"/> values are not the same. </summary>
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Operator"/>. </summary>
        public static implicit operator Operator(string value) => new Operator(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Operator other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
