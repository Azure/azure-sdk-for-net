// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary>
    /// Resource provider permissions required for the connector
    /// Serialized Name: ResourceProvider
    /// </summary>
    public partial class ResourceProvider
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ResourceProvider"/>. </summary>
        public ResourceProvider()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ResourceProvider"/>. </summary>
        /// <param name="provider">
        /// Provider name
        /// Serialized Name: ResourceProvider.provider
        /// </param>
        /// <param name="permissionsDisplayText">
        /// Permission description text
        /// Serialized Name: ResourceProvider.permissionsDisplayText
        /// </param>
        /// <param name="providerDisplayName">
        /// Permission provider display name
        /// Serialized Name: ResourceProvider.providerDisplayName
        /// </param>
        /// <param name="scope">
        /// Permission provider scope
        /// Serialized Name: ResourceProvider.scope
        /// </param>
        /// <param name="requiredPermissions">
        /// Required permissions for the connector
        /// Serialized Name: ResourceProvider.requiredPermissions
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ResourceProvider(ProviderName? provider, string permissionsDisplayText, string providerDisplayName, PermissionProviderScope? scope, RequiredPermissions requiredPermissions, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Provider = provider;
            PermissionsDisplayText = permissionsDisplayText;
            ProviderDisplayName = providerDisplayName;
            Scope = scope;
            RequiredPermissions = requiredPermissions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Provider name
        /// Serialized Name: ResourceProvider.provider
        /// </summary>
        public ProviderName? Provider { get; set; }
        /// <summary>
        /// Permission description text
        /// Serialized Name: ResourceProvider.permissionsDisplayText
        /// </summary>
        public string PermissionsDisplayText { get; set; }
        /// <summary>
        /// Permission provider display name
        /// Serialized Name: ResourceProvider.providerDisplayName
        /// </summary>
        public string ProviderDisplayName { get; set; }
        /// <summary>
        /// Permission provider scope
        /// Serialized Name: ResourceProvider.scope
        /// </summary>
        public PermissionProviderScope? Scope { get; set; }
        /// <summary>
        /// Required permissions for the connector
        /// Serialized Name: ResourceProvider.requiredPermissions
        /// </summary>
        public RequiredPermissions RequiredPermissions { get; set; }
    }
}
