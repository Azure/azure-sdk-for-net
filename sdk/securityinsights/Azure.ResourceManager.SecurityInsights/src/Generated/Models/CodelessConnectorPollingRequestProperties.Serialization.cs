// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class CodelessConnectorPollingRequestProperties : IUtf8JsonSerializable, IJsonModel<CodelessConnectorPollingRequestProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CodelessConnectorPollingRequestProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CodelessConnectorPollingRequestProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodelessConnectorPollingRequestProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CodelessConnectorPollingRequestProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("apiEndpoint"u8);
            writer.WriteStringValue(ApiEndpoint);
            if (Optional.IsDefined(RateLimitQps))
            {
                writer.WritePropertyName("rateLimitQps"u8);
                writer.WriteNumberValue(RateLimitQps.Value);
            }
            writer.WritePropertyName("queryWindowInMin"u8);
            writer.WriteNumberValue(QueryWindowInMin);
            writer.WritePropertyName("httpMethod"u8);
            writer.WriteStringValue(HttpMethod);
            writer.WritePropertyName("queryTimeFormat"u8);
            writer.WriteStringValue(QueryTimeFormat);
            if (Optional.IsDefined(RetryCount))
            {
                writer.WritePropertyName("retryCount"u8);
                writer.WriteNumberValue(RetryCount.Value);
            }
            if (Optional.IsDefined(TimeoutInSeconds))
            {
                writer.WritePropertyName("timeoutInSeconds"u8);
                writer.WriteNumberValue(TimeoutInSeconds.Value);
            }
            if (Optional.IsDefined(Headers))
            {
                writer.WritePropertyName("headers"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Headers);
#else
                using (JsonDocument document = JsonDocument.Parse(Headers))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(QueryParameters))
            {
                writer.WritePropertyName("queryParameters"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(QueryParameters);
#else
                using (JsonDocument document = JsonDocument.Parse(QueryParameters))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(QueryParametersTemplate))
            {
                writer.WritePropertyName("queryParametersTemplate"u8);
                writer.WriteStringValue(QueryParametersTemplate);
            }
            if (Optional.IsDefined(StartTimeAttributeName))
            {
                writer.WritePropertyName("startTimeAttributeName"u8);
                writer.WriteStringValue(StartTimeAttributeName);
            }
            if (Optional.IsDefined(EndTimeAttributeName))
            {
                writer.WritePropertyName("endTimeAttributeName"u8);
                writer.WriteStringValue(EndTimeAttributeName);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        CodelessConnectorPollingRequestProperties IJsonModel<CodelessConnectorPollingRequestProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodelessConnectorPollingRequestProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CodelessConnectorPollingRequestProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCodelessConnectorPollingRequestProperties(document.RootElement, options);
        }

        internal static CodelessConnectorPollingRequestProperties DeserializeCodelessConnectorPollingRequestProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string apiEndpoint = default;
            int? rateLimitQps = default;
            int queryWindowInMin = default;
            string httpMethod = default;
            string queryTimeFormat = default;
            int? retryCount = default;
            int? timeoutInSeconds = default;
            BinaryData headers = default;
            BinaryData queryParameters = default;
            string queryParametersTemplate = default;
            string startTimeAttributeName = default;
            string endTimeAttributeName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("apiEndpoint"u8))
                {
                    apiEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rateLimitQps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rateLimitQps = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("queryWindowInMin"u8))
                {
                    queryWindowInMin = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("httpMethod"u8))
                {
                    httpMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("queryTimeFormat"u8))
                {
                    queryTimeFormat = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("retryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retryCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("timeoutInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timeoutInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("headers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    headers = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("queryParameters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    queryParameters = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("queryParametersTemplate"u8))
                {
                    queryParametersTemplate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startTimeAttributeName"u8))
                {
                    startTimeAttributeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("endTimeAttributeName"u8))
                {
                    endTimeAttributeName = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CodelessConnectorPollingRequestProperties(
                apiEndpoint,
                rateLimitQps,
                queryWindowInMin,
                httpMethod,
                queryTimeFormat,
                retryCount,
                timeoutInSeconds,
                headers,
                queryParameters,
                queryParametersTemplate,
                startTimeAttributeName,
                endTimeAttributeName,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<CodelessConnectorPollingRequestProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodelessConnectorPollingRequestProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CodelessConnectorPollingRequestProperties)} does not support writing '{options.Format}' format.");
            }
        }

        CodelessConnectorPollingRequestProperties IPersistableModel<CodelessConnectorPollingRequestProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CodelessConnectorPollingRequestProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeCodelessConnectorPollingRequestProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CodelessConnectorPollingRequestProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CodelessConnectorPollingRequestProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
