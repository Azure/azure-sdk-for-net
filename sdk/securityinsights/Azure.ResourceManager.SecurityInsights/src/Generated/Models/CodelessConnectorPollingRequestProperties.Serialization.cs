// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class CodelessConnectorPollingRequestProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("apiEndpoint");
            writer.WriteStringValue(ApiEndpoint);
            if (Optional.IsDefined(RateLimitQps))
            {
                writer.WritePropertyName("rateLimitQps");
                writer.WriteNumberValue(RateLimitQps.Value);
            }
            writer.WritePropertyName("queryWindowInMin");
            writer.WriteNumberValue(QueryWindowInMin);
            writer.WritePropertyName("httpMethod");
            writer.WriteStringValue(HttpMethod);
            writer.WritePropertyName("queryTimeFormat");
            writer.WriteStringValue(QueryTimeFormat);
            if (Optional.IsDefined(RetryCount))
            {
                writer.WritePropertyName("retryCount");
                writer.WriteNumberValue(RetryCount.Value);
            }
            if (Optional.IsDefined(TimeoutInSeconds))
            {
                writer.WritePropertyName("timeoutInSeconds");
                writer.WriteNumberValue(TimeoutInSeconds.Value);
            }
            if (Optional.IsDefined(Headers))
            {
                writer.WritePropertyName("headers");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Headers);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Headers.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(QueryParameters))
            {
                writer.WritePropertyName("queryParameters");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(QueryParameters);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(QueryParameters.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(QueryParametersTemplate))
            {
                writer.WritePropertyName("queryParametersTemplate");
                writer.WriteStringValue(QueryParametersTemplate);
            }
            if (Optional.IsDefined(StartTimeAttributeName))
            {
                writer.WritePropertyName("startTimeAttributeName");
                writer.WriteStringValue(StartTimeAttributeName);
            }
            if (Optional.IsDefined(EndTimeAttributeName))
            {
                writer.WritePropertyName("endTimeAttributeName");
                writer.WriteStringValue(EndTimeAttributeName);
            }
            writer.WriteEndObject();
        }

        internal static CodelessConnectorPollingRequestProperties DeserializeCodelessConnectorPollingRequestProperties(JsonElement element)
        {
            string apiEndpoint = default;
            Optional<int> rateLimitQps = default;
            int queryWindowInMin = default;
            string httpMethod = default;
            string queryTimeFormat = default;
            Optional<int> retryCount = default;
            Optional<int> timeoutInSeconds = default;
            Optional<BinaryData> headers = default;
            Optional<BinaryData> queryParameters = default;
            Optional<string> queryParametersTemplate = default;
            Optional<string> startTimeAttributeName = default;
            Optional<string> endTimeAttributeName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("apiEndpoint"))
                {
                    apiEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rateLimitQps"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rateLimitQps = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("queryWindowInMin"))
                {
                    queryWindowInMin = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("httpMethod"))
                {
                    httpMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("queryTimeFormat"))
                {
                    queryTimeFormat = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("retryCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    retryCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("timeoutInSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timeoutInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("headers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    headers = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("queryParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    queryParameters = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("queryParametersTemplate"))
                {
                    queryParametersTemplate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startTimeAttributeName"))
                {
                    startTimeAttributeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("endTimeAttributeName"))
                {
                    endTimeAttributeName = property.Value.GetString();
                    continue;
                }
            }
            return new CodelessConnectorPollingRequestProperties(apiEndpoint, Optional.ToNullable(rateLimitQps), queryWindowInMin, httpMethod, queryTimeFormat, Optional.ToNullable(retryCount), Optional.ToNullable(timeoutInSeconds), headers.Value, queryParameters.Value, queryParametersTemplate.Value, startTimeAttributeName.Value, endTimeAttributeName.Value);
        }
    }
}
