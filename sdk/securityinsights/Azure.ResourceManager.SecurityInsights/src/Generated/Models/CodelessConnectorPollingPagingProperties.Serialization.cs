// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class CodelessConnectorPollingPagingProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("pagingType"u8);
            writer.WriteStringValue(PagingType);
            if (Optional.IsDefined(NextPageParaName))
            {
                writer.WritePropertyName("nextPageParaName"u8);
                writer.WriteStringValue(NextPageParaName);
            }
            if (Optional.IsDefined(NextPageTokenJsonPath))
            {
                writer.WritePropertyName("nextPageTokenJsonPath"u8);
                writer.WriteStringValue(NextPageTokenJsonPath);
            }
            if (Optional.IsDefined(PageCountAttributePath))
            {
                writer.WritePropertyName("pageCountAttributePath"u8);
                writer.WriteStringValue(PageCountAttributePath);
            }
            if (Optional.IsDefined(PageTotalCountAttributePath))
            {
                writer.WritePropertyName("pageTotalCountAttributePath"u8);
                writer.WriteStringValue(PageTotalCountAttributePath);
            }
            if (Optional.IsDefined(PageTimeStampAttributePath))
            {
                writer.WritePropertyName("pageTimeStampAttributePath"u8);
                writer.WriteStringValue(PageTimeStampAttributePath);
            }
            if (Optional.IsDefined(SearchTheLatestTimeStampFromEventsList))
            {
                writer.WritePropertyName("searchTheLatestTimeStampFromEventsList"u8);
                writer.WriteStringValue(SearchTheLatestTimeStampFromEventsList);
            }
            if (Optional.IsDefined(PageSizeParaName))
            {
                writer.WritePropertyName("pageSizeParaName"u8);
                writer.WriteStringValue(PageSizeParaName);
            }
            if (Optional.IsDefined(PageSize))
            {
                writer.WritePropertyName("pageSize"u8);
                writer.WriteNumberValue(PageSize.Value);
            }
            writer.WriteEndObject();
        }

        internal static CodelessConnectorPollingPagingProperties DeserializeCodelessConnectorPollingPagingProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string pagingType = default;
            Optional<string> nextPageParaName = default;
            Optional<string> nextPageTokenJsonPath = default;
            Optional<string> pageCountAttributePath = default;
            Optional<string> pageTotalCountAttributePath = default;
            Optional<string> pageTimeStampAttributePath = default;
            Optional<string> searchTheLatestTimeStampFromEventsList = default;
            Optional<string> pageSizeParaName = default;
            Optional<int> pageSize = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("pagingType"u8))
                {
                    pagingType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nextPageParaName"u8))
                {
                    nextPageParaName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nextPageTokenJsonPath"u8))
                {
                    nextPageTokenJsonPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pageCountAttributePath"u8))
                {
                    pageCountAttributePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pageTotalCountAttributePath"u8))
                {
                    pageTotalCountAttributePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pageTimeStampAttributePath"u8))
                {
                    pageTimeStampAttributePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("searchTheLatestTimeStampFromEventsList"u8))
                {
                    searchTheLatestTimeStampFromEventsList = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pageSizeParaName"u8))
                {
                    pageSizeParaName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pageSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pageSize = property.Value.GetInt32();
                    continue;
                }
            }
            return new CodelessConnectorPollingPagingProperties(pagingType, nextPageParaName.Value, nextPageTokenJsonPath.Value, pageCountAttributePath.Value, pageTotalCountAttributePath.Value, pageTimeStampAttributePath.Value, searchTheLatestTimeStampFromEventsList.Value, pageSizeParaName.Value, Optional.ToNullable(pageSize));
        }
    }
}
