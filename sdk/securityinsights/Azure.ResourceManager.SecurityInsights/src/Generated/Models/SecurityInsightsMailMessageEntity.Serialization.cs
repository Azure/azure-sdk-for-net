// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class SecurityInsightsMailMessageEntity : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("kind"u8);
            writer.WriteStringValue(Kind.ToString());
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(BodyFingerprintBin1))
            {
                writer.WritePropertyName("bodyFingerprintBin1"u8);
                writer.WriteNumberValue(BodyFingerprintBin1.Value);
            }
            if (Optional.IsDefined(BodyFingerprintBin2))
            {
                writer.WritePropertyName("bodyFingerprintBin2"u8);
                writer.WriteNumberValue(BodyFingerprintBin2.Value);
            }
            if (Optional.IsDefined(BodyFingerprintBin3))
            {
                writer.WritePropertyName("bodyFingerprintBin3"u8);
                writer.WriteNumberValue(BodyFingerprintBin3.Value);
            }
            if (Optional.IsDefined(BodyFingerprintBin4))
            {
                writer.WritePropertyName("bodyFingerprintBin4"u8);
                writer.WriteNumberValue(BodyFingerprintBin4.Value);
            }
            if (Optional.IsDefined(BodyFingerprintBin5))
            {
                writer.WritePropertyName("bodyFingerprintBin5"u8);
                writer.WriteNumberValue(BodyFingerprintBin5.Value);
            }
            if (Optional.IsDefined(AntispamDirection))
            {
                writer.WritePropertyName("antispamDirection"u8);
                writer.WriteStringValue(AntispamDirection.Value.ToString());
            }
            if (Optional.IsDefined(DeliveryAction))
            {
                writer.WritePropertyName("deliveryAction"u8);
                writer.WriteStringValue(DeliveryAction.Value.ToSerialString());
            }
            if (Optional.IsDefined(DeliveryLocation))
            {
                writer.WritePropertyName("deliveryLocation"u8);
                writer.WriteStringValue(DeliveryLocation.Value.ToSerialString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SecurityInsightsMailMessageEntity DeserializeSecurityInsightsMailMessageEntity(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            SecurityInsightsEntityKind kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<IReadOnlyDictionary<string, BinaryData>> additionalData = default;
            Optional<string> friendlyName = default;
            Optional<IReadOnlyList<string>> fileEntityIds = default;
            Optional<string> recipient = default;
            Optional<IReadOnlyList<Uri>> urls = default;
            Optional<IReadOnlyList<string>> threats = default;
            Optional<string> p1Sender = default;
            Optional<string> p1SenderDisplayName = default;
            Optional<string> p1SenderDomain = default;
            Optional<IPAddress> senderIP = default;
            Optional<string> p2Sender = default;
            Optional<string> p2SenderDisplayName = default;
            Optional<string> p2SenderDomain = default;
            Optional<DateTimeOffset> receiveDate = default;
            Optional<Guid> networkMessageId = default;
            Optional<string> internetMessageId = default;
            Optional<string> subject = default;
            Optional<string> language = default;
            Optional<IReadOnlyList<string>> threatDetectionMethods = default;
            Optional<int> bodyFingerprintBin1 = default;
            Optional<int> bodyFingerprintBin2 = default;
            Optional<int> bodyFingerprintBin3 = default;
            Optional<int> bodyFingerprintBin4 = default;
            Optional<int> bodyFingerprintBin5 = default;
            Optional<AntispamMailDirection> antispamDirection = default;
            Optional<SecurityInsightsMailMessageDeliveryAction> deliveryAction = default;
            Optional<SecurityInsightsMailMessageDeliveryLocation> deliveryLocation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = new SecurityInsightsEntityKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("additionalData"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.Value.ValueKind == JsonValueKind.Null)
                                {
                                    dictionary.Add(property1.Name, null);
                                }
                                else
                                {
                                    dictionary.Add(property1.Name, BinaryData.FromString(property1.Value.GetRawText()));
                                }
                            }
                            additionalData = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("friendlyName"u8))
                        {
                            friendlyName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("fileEntityIds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            fileEntityIds = array;
                            continue;
                        }
                        if (property0.NameEquals("recipient"u8))
                        {
                            recipient = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("urls"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<Uri> array = new List<Uri>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(new Uri(item.GetString()));
                                }
                            }
                            urls = array;
                            continue;
                        }
                        if (property0.NameEquals("threats"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            threats = array;
                            continue;
                        }
                        if (property0.NameEquals("p1Sender"u8))
                        {
                            p1Sender = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("p1SenderDisplayName"u8))
                        {
                            p1SenderDisplayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("p1SenderDomain"u8))
                        {
                            p1SenderDomain = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("senderIP"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            senderIP = IPAddress.Parse(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("p2Sender"u8))
                        {
                            p2Sender = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("p2SenderDisplayName"u8))
                        {
                            p2SenderDisplayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("p2SenderDomain"u8))
                        {
                            p2SenderDomain = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("receiveDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            receiveDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("networkMessageId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            networkMessageId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("internetMessageId"u8))
                        {
                            internetMessageId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("subject"u8))
                        {
                            subject = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("language"u8))
                        {
                            language = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("threatDetectionMethods"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            threatDetectionMethods = array;
                            continue;
                        }
                        if (property0.NameEquals("bodyFingerprintBin1"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bodyFingerprintBin1 = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("bodyFingerprintBin2"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bodyFingerprintBin2 = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("bodyFingerprintBin3"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bodyFingerprintBin3 = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("bodyFingerprintBin4"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bodyFingerprintBin4 = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("bodyFingerprintBin5"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bodyFingerprintBin5 = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("antispamDirection"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            antispamDirection = new AntispamMailDirection(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("deliveryAction"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            deliveryAction = property0.Value.GetString().ToSecurityInsightsMailMessageDeliveryAction();
                            continue;
                        }
                        if (property0.NameEquals("deliveryLocation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            deliveryLocation = property0.Value.GetString().ToSecurityInsightsMailMessageDeliveryLocation();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SecurityInsightsMailMessageEntity(id, name, type, systemData.Value, kind, Optional.ToDictionary(additionalData), friendlyName.Value, Optional.ToList(fileEntityIds), recipient.Value, Optional.ToList(urls), Optional.ToList(threats), p1Sender.Value, p1SenderDisplayName.Value, p1SenderDomain.Value, senderIP.Value, p2Sender.Value, p2SenderDisplayName.Value, p2SenderDomain.Value, Optional.ToNullable(receiveDate), Optional.ToNullable(networkMessageId), internetMessageId.Value, subject.Value, language.Value, Optional.ToList(threatDetectionMethods), Optional.ToNullable(bodyFingerprintBin1), Optional.ToNullable(bodyFingerprintBin2), Optional.ToNullable(bodyFingerprintBin3), Optional.ToNullable(bodyFingerprintBin4), Optional.ToNullable(bodyFingerprintBin5), Optional.ToNullable(antispamDirection), Optional.ToNullable(deliveryAction), Optional.ToNullable(deliveryLocation));
        }
    }
}
