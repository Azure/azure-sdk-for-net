// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> Expansion result metadata. </summary>
    internal partial class TimelineResultsMetadata
    {
        /// <summary> Initializes a new instance of TimelineResultsMetadata. </summary>
        /// <param name="totalCount"> the total items found for the timeline request. </param>
        /// <param name="aggregations"> timeline aggregation per kind. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="aggregations"/> is null. </exception>
        internal TimelineResultsMetadata(int totalCount, IEnumerable<TimelineAggregation> aggregations)
        {
            if (aggregations == null)
            {
                throw new ArgumentNullException(nameof(aggregations));
            }

            TotalCount = totalCount;
            Aggregations = aggregations.ToList();
            Errors = new ChangeTrackingList<TimelineError>();
        }

        /// <summary> Initializes a new instance of TimelineResultsMetadata. </summary>
        /// <param name="totalCount"> the total items found for the timeline request. </param>
        /// <param name="aggregations"> timeline aggregation per kind. </param>
        /// <param name="errors"> information about the failure queries. </param>
        internal TimelineResultsMetadata(int totalCount, IReadOnlyList<TimelineAggregation> aggregations, IReadOnlyList<TimelineError> errors)
        {
            TotalCount = totalCount;
            Aggregations = aggregations;
            Errors = errors;
        }

        /// <summary> the total items found for the timeline request. </summary>
        public int TotalCount { get; }
        /// <summary> timeline aggregation per kind. </summary>
        public IReadOnlyList<TimelineAggregation> Aggregations { get; }
        /// <summary> information about the failure queries. </summary>
        public IReadOnlyList<TimelineError> Errors { get; }
    }
}
