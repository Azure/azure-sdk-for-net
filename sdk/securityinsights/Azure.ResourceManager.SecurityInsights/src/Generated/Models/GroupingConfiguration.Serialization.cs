// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class GroupingConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("enabled");
            writer.WriteBooleanValue(Enabled);
            writer.WritePropertyName("reopenClosedIncident");
            writer.WriteBooleanValue(ReopenClosedIncident);
            writer.WritePropertyName("lookbackDuration");
            writer.WriteStringValue(LookbackDuration, "P");
            writer.WritePropertyName("matchingMethod");
            writer.WriteStringValue(MatchingMethod.ToString());
            if (Optional.IsCollectionDefined(GroupByEntities))
            {
                writer.WritePropertyName("groupByEntities");
                writer.WriteStartArray();
                foreach (var item in GroupByEntities)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(GroupByAlertDetails))
            {
                writer.WritePropertyName("groupByAlertDetails");
                writer.WriteStartArray();
                foreach (var item in GroupByAlertDetails)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(GroupByCustomDetails))
            {
                writer.WritePropertyName("groupByCustomDetails");
                writer.WriteStartArray();
                foreach (var item in GroupByCustomDetails)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static GroupingConfiguration DeserializeGroupingConfiguration(JsonElement element)
        {
            bool enabled = default;
            bool reopenClosedIncident = default;
            TimeSpan lookbackDuration = default;
            MatchingMethod matchingMethod = default;
            Optional<IList<EntityMappingType>> groupByEntities = default;
            Optional<IList<AlertDetail>> groupByAlertDetails = default;
            Optional<IList<string>> groupByCustomDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enabled"))
                {
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("reopenClosedIncident"))
                {
                    reopenClosedIncident = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lookbackDuration"))
                {
                    lookbackDuration = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("matchingMethod"))
                {
                    matchingMethod = new MatchingMethod(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("groupByEntities"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<EntityMappingType> array = new List<EntityMappingType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new EntityMappingType(item.GetString()));
                    }
                    groupByEntities = array;
                    continue;
                }
                if (property.NameEquals("groupByAlertDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AlertDetail> array = new List<AlertDetail>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AlertDetail(item.GetString()));
                    }
                    groupByAlertDetails = array;
                    continue;
                }
                if (property.NameEquals("groupByCustomDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    groupByCustomDetails = array;
                    continue;
                }
            }
            return new GroupingConfiguration(enabled, reopenClosedIncident, lookbackDuration, matchingMethod, Optional.ToList(groupByEntities), Optional.ToList(groupByAlertDetails), Optional.ToList(groupByCustomDetails));
        }
    }
}
