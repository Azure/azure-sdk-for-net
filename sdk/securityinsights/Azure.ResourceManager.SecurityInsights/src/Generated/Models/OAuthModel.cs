// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary>
    /// Model for API authentication with OAuth2.
    /// Serialized Name: OAuthModel
    /// </summary>
    public partial class OAuthModel : CcpAuthConfig
    {
        /// <summary> Initializes a new instance of <see cref="OAuthModel"/>. </summary>
        /// <param name="clientSecret">
        /// The Application (client) secret that the OAuth provider assigned to your app.
        /// Serialized Name: OAuthModel.clientSecret
        /// </param>
        /// <param name="clientId">
        /// The Application (client) ID that the OAuth provider assigned to your app.
        /// Serialized Name: OAuthModel.clientId
        /// </param>
        /// <param name="grantType">
        /// The grant type, usually will be 'authorization code'.
        /// Serialized Name: OAuthModel.grantType
        /// </param>
        /// <param name="tokenEndpoint">
        /// The token endpoint. Defines the OAuth2 refresh token.
        /// Serialized Name: OAuthModel.tokenEndpoint
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientSecret"/>, <paramref name="clientId"/>, <paramref name="grantType"/> or <paramref name="tokenEndpoint"/> is null. </exception>
        public OAuthModel(string clientSecret, string clientId, string grantType, string tokenEndpoint)
        {
            Argument.AssertNotNull(clientSecret, nameof(clientSecret));
            Argument.AssertNotNull(clientId, nameof(clientId));
            Argument.AssertNotNull(grantType, nameof(grantType));
            Argument.AssertNotNull(tokenEndpoint, nameof(tokenEndpoint));

            ClientSecret = clientSecret;
            ClientId = clientId;
            GrantType = grantType;
            TokenEndpoint = tokenEndpoint;
            TokenEndpointHeaders = new ChangeTrackingDictionary<string, string>();
            TokenEndpointQueryParameters = new ChangeTrackingDictionary<string, string>();
            AuthorizationEndpointHeaders = new ChangeTrackingDictionary<string, string>();
            AuthorizationEndpointQueryParameters = new ChangeTrackingDictionary<string, string>();
            AuthType = CcpAuthType.OAuth2;
        }

        /// <summary> Initializes a new instance of <see cref="OAuthModel"/>. </summary>
        /// <param name="authType">
        /// The auth type
        /// Serialized Name: CcpAuthConfig.type
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="authorizationCode">
        /// The user's authorization code.
        /// Serialized Name: OAuthModel.authorizationCode
        /// </param>
        /// <param name="clientSecret">
        /// The Application (client) secret that the OAuth provider assigned to your app.
        /// Serialized Name: OAuthModel.clientSecret
        /// </param>
        /// <param name="clientId">
        /// The Application (client) ID that the OAuth provider assigned to your app.
        /// Serialized Name: OAuthModel.clientId
        /// </param>
        /// <param name="isCredentialsInHeaders">
        /// Indicating whether we want to send the clientId and clientSecret to token endpoint in the headers.
        /// Serialized Name: OAuthModel.isCredentialsInHeaders
        /// </param>
        /// <param name="scope">
        /// The Application (client) Scope that the OAuth provider assigned to your app.
        /// Serialized Name: OAuthModel.scope
        /// </param>
        /// <param name="redirectUri">
        /// The Application redirect url that the user config in the OAuth provider.
        /// Serialized Name: OAuthModel.redirectUri
        /// </param>
        /// <param name="grantType">
        /// The grant type, usually will be 'authorization code'.
        /// Serialized Name: OAuthModel.grantType
        /// </param>
        /// <param name="tokenEndpoint">
        /// The token endpoint. Defines the OAuth2 refresh token.
        /// Serialized Name: OAuthModel.tokenEndpoint
        /// </param>
        /// <param name="tokenEndpointHeaders">
        /// The token endpoint headers.
        /// Serialized Name: OAuthModel.tokenEndpointHeaders
        /// </param>
        /// <param name="tokenEndpointQueryParameters">
        /// The token endpoint query parameters.
        /// Serialized Name: OAuthModel.tokenEndpointQueryParameters
        /// </param>
        /// <param name="authorizationEndpoint">
        /// The authorization endpoint.
        /// Serialized Name: OAuthModel.authorizationEndpoint
        /// </param>
        /// <param name="authorizationEndpointHeaders">
        /// The authorization endpoint headers.
        /// Serialized Name: OAuthModel.authorizationEndpointHeaders
        /// </param>
        /// <param name="authorizationEndpointQueryParameters">
        /// The authorization endpoint query parameters.
        /// Serialized Name: OAuthModel.authorizationEndpointQueryParameters
        /// </param>
        /// <param name="isJwtBearerFlow">
        /// A value indicating whether it's a JWT flow.
        /// Serialized Name: OAuthModel.isJwtBearerFlow
        /// </param>
        /// <param name="accessTokenPrepend">
        /// Access token prepend. Default is 'Bearer'.
        /// Serialized Name: OAuthModel.accessTokenPrepend
        /// </param>
        internal OAuthModel(CcpAuthType authType, IDictionary<string, BinaryData> serializedAdditionalRawData, string authorizationCode, string clientSecret, string clientId, bool? isCredentialsInHeaders, string scope, Uri redirectUri, string grantType, string tokenEndpoint, IDictionary<string, string> tokenEndpointHeaders, IDictionary<string, string> tokenEndpointQueryParameters, string authorizationEndpoint, IDictionary<string, string> authorizationEndpointHeaders, IDictionary<string, string> authorizationEndpointQueryParameters, bool? isJwtBearerFlow, string accessTokenPrepend) : base(authType, serializedAdditionalRawData)
        {
            AuthorizationCode = authorizationCode;
            ClientSecret = clientSecret;
            ClientId = clientId;
            IsCredentialsInHeaders = isCredentialsInHeaders;
            Scope = scope;
            RedirectUri = redirectUri;
            GrantType = grantType;
            TokenEndpoint = tokenEndpoint;
            TokenEndpointHeaders = tokenEndpointHeaders;
            TokenEndpointQueryParameters = tokenEndpointQueryParameters;
            AuthorizationEndpoint = authorizationEndpoint;
            AuthorizationEndpointHeaders = authorizationEndpointHeaders;
            AuthorizationEndpointQueryParameters = authorizationEndpointQueryParameters;
            IsJwtBearerFlow = isJwtBearerFlow;
            AccessTokenPrepend = accessTokenPrepend;
            AuthType = authType;
        }

        /// <summary> Initializes a new instance of <see cref="OAuthModel"/> for deserialization. </summary>
        internal OAuthModel()
        {
        }

        /// <summary>
        /// The user's authorization code.
        /// Serialized Name: OAuthModel.authorizationCode
        /// </summary>
        public string AuthorizationCode { get; set; }
        /// <summary>
        /// The Application (client) secret that the OAuth provider assigned to your app.
        /// Serialized Name: OAuthModel.clientSecret
        /// </summary>
        public string ClientSecret { get; set; }
        /// <summary>
        /// The Application (client) ID that the OAuth provider assigned to your app.
        /// Serialized Name: OAuthModel.clientId
        /// </summary>
        public string ClientId { get; set; }
        /// <summary>
        /// Indicating whether we want to send the clientId and clientSecret to token endpoint in the headers.
        /// Serialized Name: OAuthModel.isCredentialsInHeaders
        /// </summary>
        public bool? IsCredentialsInHeaders { get; set; }
        /// <summary>
        /// The Application (client) Scope that the OAuth provider assigned to your app.
        /// Serialized Name: OAuthModel.scope
        /// </summary>
        public string Scope { get; set; }
        /// <summary>
        /// The Application redirect url that the user config in the OAuth provider.
        /// Serialized Name: OAuthModel.redirectUri
        /// </summary>
        public Uri RedirectUri { get; set; }
        /// <summary>
        /// The grant type, usually will be 'authorization code'.
        /// Serialized Name: OAuthModel.grantType
        /// </summary>
        public string GrantType { get; set; }
        /// <summary>
        /// The token endpoint. Defines the OAuth2 refresh token.
        /// Serialized Name: OAuthModel.tokenEndpoint
        /// </summary>
        public string TokenEndpoint { get; set; }
        /// <summary>
        /// The token endpoint headers.
        /// Serialized Name: OAuthModel.tokenEndpointHeaders
        /// </summary>
        public IDictionary<string, string> TokenEndpointHeaders { get; }
        /// <summary>
        /// The token endpoint query parameters.
        /// Serialized Name: OAuthModel.tokenEndpointQueryParameters
        /// </summary>
        public IDictionary<string, string> TokenEndpointQueryParameters { get; }
        /// <summary>
        /// The authorization endpoint.
        /// Serialized Name: OAuthModel.authorizationEndpoint
        /// </summary>
        public string AuthorizationEndpoint { get; set; }
        /// <summary>
        /// The authorization endpoint headers.
        /// Serialized Name: OAuthModel.authorizationEndpointHeaders
        /// </summary>
        public IDictionary<string, string> AuthorizationEndpointHeaders { get; }
        /// <summary>
        /// The authorization endpoint query parameters.
        /// Serialized Name: OAuthModel.authorizationEndpointQueryParameters
        /// </summary>
        public IDictionary<string, string> AuthorizationEndpointQueryParameters { get; }
        /// <summary>
        /// A value indicating whether it's a JWT flow.
        /// Serialized Name: OAuthModel.isJwtBearerFlow
        /// </summary>
        public bool? IsJwtBearerFlow { get; set; }
        /// <summary>
        /// Access token prepend. Default is 'Bearer'.
        /// Serialized Name: OAuthModel.accessTokenPrepend
        /// </summary>
        public string AccessTokenPrepend { get; set; }
    }
}
