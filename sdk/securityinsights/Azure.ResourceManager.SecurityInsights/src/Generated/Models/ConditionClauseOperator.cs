// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> Represents an operator in a ConditionClause. </summary>
    public readonly partial struct ConditionClauseOperator : IEquatable<ConditionClauseOperator>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConditionClauseOperator"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConditionClauseOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EqualsValueValue = "Equals";
        private const string NotEqualsValue = "NotEquals";
        private const string LessThanValue = "LessThan";
        private const string LessThanEqualValue = "LessThanEqual";
        private const string GreaterThanValue = "GreaterThan";
        private const string GreaterThanEqualValue = "GreaterThanEqual";
        private const string StringContainsValue = "StringContains";
        private const string StringNotContainsValue = "StringNotContains";
        private const string StringStartsWithValue = "StringStartsWith";
        private const string StringNotStartsWithValue = "StringNotStartsWith";
        private const string StringEndsWithValue = "StringEndsWith";
        private const string StringNotEndsWithValue = "StringNotEndsWith";
        private const string StringIsEmptyValue = "StringIsEmpty";
        private const string IsNullValue = "IsNull";
        private const string IsTrueValue = "IsTrue";
        private const string IsFalseValue = "IsFalse";
        private const string ArrayContainsValue = "ArrayContains";
        private const string ArrayNotContainsValue = "ArrayNotContains";
        private const string OnOrAfterRelativeValue = "OnOrAfterRelative";
        private const string AfterRelativeValue = "AfterRelative";
        private const string OnOrBeforeRelativeValue = "OnOrBeforeRelative";
        private const string BeforeRelativeValue = "BeforeRelative";
        private const string OnOrAfterAbsoluteValue = "OnOrAfterAbsolute";
        private const string AfterAbsoluteValue = "AfterAbsolute";
        private const string OnOrBeforeAbsoluteValue = "OnOrBeforeAbsolute";
        private const string BeforeAbsoluteValue = "BeforeAbsolute";

        /// <summary> Equals. </summary>
        public static ConditionClauseOperator EqualsValue { get; } = new ConditionClauseOperator(EqualsValueValue);
        /// <summary> NotEquals. </summary>
        public static ConditionClauseOperator NotEquals { get; } = new ConditionClauseOperator(NotEqualsValue);
        /// <summary> LessThan. </summary>
        public static ConditionClauseOperator LessThan { get; } = new ConditionClauseOperator(LessThanValue);
        /// <summary> LessThanEqual. </summary>
        public static ConditionClauseOperator LessThanEqual { get; } = new ConditionClauseOperator(LessThanEqualValue);
        /// <summary> GreaterThan. </summary>
        public static ConditionClauseOperator GreaterThan { get; } = new ConditionClauseOperator(GreaterThanValue);
        /// <summary> GreaterThanEqual. </summary>
        public static ConditionClauseOperator GreaterThanEqual { get; } = new ConditionClauseOperator(GreaterThanEqualValue);
        /// <summary> StringContains. </summary>
        public static ConditionClauseOperator StringContains { get; } = new ConditionClauseOperator(StringContainsValue);
        /// <summary> StringNotContains. </summary>
        public static ConditionClauseOperator StringNotContains { get; } = new ConditionClauseOperator(StringNotContainsValue);
        /// <summary> StringStartsWith. </summary>
        public static ConditionClauseOperator StringStartsWith { get; } = new ConditionClauseOperator(StringStartsWithValue);
        /// <summary> StringNotStartsWith. </summary>
        public static ConditionClauseOperator StringNotStartsWith { get; } = new ConditionClauseOperator(StringNotStartsWithValue);
        /// <summary> StringEndsWith. </summary>
        public static ConditionClauseOperator StringEndsWith { get; } = new ConditionClauseOperator(StringEndsWithValue);
        /// <summary> StringNotEndsWith. </summary>
        public static ConditionClauseOperator StringNotEndsWith { get; } = new ConditionClauseOperator(StringNotEndsWithValue);
        /// <summary> StringIsEmpty. </summary>
        public static ConditionClauseOperator StringIsEmpty { get; } = new ConditionClauseOperator(StringIsEmptyValue);
        /// <summary> IsNull. </summary>
        public static ConditionClauseOperator IsNull { get; } = new ConditionClauseOperator(IsNullValue);
        /// <summary> IsTrue. </summary>
        public static ConditionClauseOperator IsTrue { get; } = new ConditionClauseOperator(IsTrueValue);
        /// <summary> IsFalse. </summary>
        public static ConditionClauseOperator IsFalse { get; } = new ConditionClauseOperator(IsFalseValue);
        /// <summary> ArrayContains. </summary>
        public static ConditionClauseOperator ArrayContains { get; } = new ConditionClauseOperator(ArrayContainsValue);
        /// <summary> ArrayNotContains. </summary>
        public static ConditionClauseOperator ArrayNotContains { get; } = new ConditionClauseOperator(ArrayNotContainsValue);
        /// <summary> OnOrAfterRelative. </summary>
        public static ConditionClauseOperator OnOrAfterRelative { get; } = new ConditionClauseOperator(OnOrAfterRelativeValue);
        /// <summary> AfterRelative. </summary>
        public static ConditionClauseOperator AfterRelative { get; } = new ConditionClauseOperator(AfterRelativeValue);
        /// <summary> OnOrBeforeRelative. </summary>
        public static ConditionClauseOperator OnOrBeforeRelative { get; } = new ConditionClauseOperator(OnOrBeforeRelativeValue);
        /// <summary> BeforeRelative. </summary>
        public static ConditionClauseOperator BeforeRelative { get; } = new ConditionClauseOperator(BeforeRelativeValue);
        /// <summary> OnOrAfterAbsolute. </summary>
        public static ConditionClauseOperator OnOrAfterAbsolute { get; } = new ConditionClauseOperator(OnOrAfterAbsoluteValue);
        /// <summary> AfterAbsolute. </summary>
        public static ConditionClauseOperator AfterAbsolute { get; } = new ConditionClauseOperator(AfterAbsoluteValue);
        /// <summary> OnOrBeforeAbsolute. </summary>
        public static ConditionClauseOperator OnOrBeforeAbsolute { get; } = new ConditionClauseOperator(OnOrBeforeAbsoluteValue);
        /// <summary> BeforeAbsolute. </summary>
        public static ConditionClauseOperator BeforeAbsolute { get; } = new ConditionClauseOperator(BeforeAbsoluteValue);
        /// <summary> Determines if two <see cref="ConditionClauseOperator"/> values are the same. </summary>
        public static bool operator ==(ConditionClauseOperator left, ConditionClauseOperator right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConditionClauseOperator"/> values are not the same. </summary>
        public static bool operator !=(ConditionClauseOperator left, ConditionClauseOperator right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConditionClauseOperator"/>. </summary>
        public static implicit operator ConditionClauseOperator(string value) => new ConditionClauseOperator(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConditionClauseOperator other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConditionClauseOperator other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
