// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class Deployment : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DeploymentId))
            {
                writer.WritePropertyName("deploymentId");
                writer.WriteStringValue(DeploymentId);
            }
            if (Optional.IsDefined(DeploymentState))
            {
                writer.WritePropertyName("deploymentState");
                writer.WriteStringValue(DeploymentState.Value.ToString());
            }
            if (Optional.IsDefined(DeploymentResult))
            {
                writer.WritePropertyName("deploymentResult");
                writer.WriteStringValue(DeploymentResult.Value.ToString());
            }
            if (Optional.IsDefined(DeploymentOn))
            {
                writer.WritePropertyName("deploymentTime");
                writer.WriteStringValue(DeploymentOn.Value, "O");
            }
            if (Optional.IsDefined(DeploymentLogsUri))
            {
                writer.WritePropertyName("deploymentLogsUrl");
                writer.WriteStringValue(DeploymentLogsUri.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static Deployment DeserializeDeployment(JsonElement element)
        {
            Optional<string> deploymentId = default;
            Optional<DeploymentState> deploymentState = default;
            Optional<DeploymentResult> deploymentResult = default;
            Optional<DateTimeOffset> deploymentTime = default;
            Optional<Uri> deploymentLogsUrl = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deploymentId"))
                {
                    deploymentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deploymentState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deploymentState = new DeploymentState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deploymentResult"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deploymentResult = new DeploymentResult(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deploymentTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deploymentTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("deploymentLogsUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        deploymentLogsUrl = null;
                        continue;
                    }
                    deploymentLogsUrl = new Uri(property.Value.GetString());
                    continue;
                }
            }
            return new Deployment(deploymentId.Value, Optional.ToNullable(deploymentState), Optional.ToNullable(deploymentResult), Optional.ToNullable(deploymentTime), deploymentLogsUrl.Value);
        }
    }
}
