// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> Type of support for content item. </summary>
    public readonly partial struct SupportTier : IEquatable<SupportTier>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SupportTier"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SupportTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MicrosoftValue = "Microsoft";
        private const string PartnerValue = "Partner";
        private const string CommunityValue = "Community";

        /// <summary> Microsoft. </summary>
        public static SupportTier Microsoft { get; } = new SupportTier(MicrosoftValue);
        /// <summary> Partner. </summary>
        public static SupportTier Partner { get; } = new SupportTier(PartnerValue);
        /// <summary> Community. </summary>
        public static SupportTier Community { get; } = new SupportTier(CommunityValue);
        /// <summary> Determines if two <see cref="SupportTier"/> values are the same. </summary>
        public static bool operator ==(SupportTier left, SupportTier right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SupportTier"/> values are not the same. </summary>
        public static bool operator !=(SupportTier left, SupportTier right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SupportTier"/>. </summary>
        public static implicit operator SupportTier(string value) => new SupportTier(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SupportTier other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SupportTier other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
