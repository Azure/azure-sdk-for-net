// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    [PersistableModelProxy(typeof(UnknownTIObject))]
    public partial class TIObject : IUtf8JsonSerializable, IJsonModel<TIObject>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TIObject>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TIObject>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TIObject>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TIObject)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("kind"u8);
            writer.WriteStringValue(Kind.ToString());
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsCollectionDefined(Data))
            {
                writer.WritePropertyName("data"u8);
                writer.WriteStartObject();
                foreach (var item in Data)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedBy))
            {
                writer.WritePropertyName("createdBy"u8);
                writer.WriteObjectValue(CreatedBy, options);
            }
            if (options.Format != "W" && Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source"u8);
                writer.WriteStringValue(Source);
            }
            if (options.Format != "W" && Optional.IsDefined(FirstIngestedOn))
            {
                writer.WritePropertyName("firstIngestedTimeUtc"u8);
                writer.WriteStringValue(FirstIngestedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastIngestedOn))
            {
                writer.WritePropertyName("lastIngestedTimeUtc"u8);
                writer.WriteStringValue(LastIngestedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(IngestionRulesVersion))
            {
                writer.WritePropertyName("ingestionRulesVersion"u8);
                writer.WriteStringValue(IngestionRulesVersion.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastUpdateMethod))
            {
                writer.WritePropertyName("lastUpdateMethod"u8);
                writer.WriteStringValue(LastUpdateMethod);
            }
            if (options.Format != "W" && Optional.IsDefined(LastModifiedBy))
            {
                writer.WritePropertyName("lastModifiedBy"u8);
                writer.WriteObjectValue(LastModifiedBy, options);
            }
            if (options.Format != "W" && Optional.IsDefined(LastUpdatedOn))
            {
                writer.WritePropertyName("lastUpdatedDateTimeUtc"u8);
                writer.WriteStringValue(LastUpdatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(RelationshipHints))
            {
                writer.WritePropertyName("relationshipHints"u8);
                writer.WriteStartArray();
                foreach (var item in RelationshipHints)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        TIObject IJsonModel<TIObject>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TIObject>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TIObject)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTIObject(document.RootElement, options);
        }

        internal static TIObject DeserializeTIObject(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("kind", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AttackPattern": return TiObjectKindAttackPattern.DeserializeTiObjectKindAttackPattern(element, options);
                    case "Identity": return TiObjectKindIdentity.DeserializeTiObjectKindIdentity(element, options);
                    case "Indicator": return TiObjectKindIndicator.DeserializeTiObjectKindIndicator(element, options);
                    case "Relationship": return TiObjectKindRelationship.DeserializeTiObjectKindRelationship(element, options);
                    case "ThreatActor": return TiObjectKindThreatActor.DeserializeTiObjectKindThreatActor(element, options);
                }
            }
            return UnknownTIObject.DeserializeUnknownTIObject(element, options);
        }

        BinaryData IPersistableModel<TIObject>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TIObject>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(TIObject)} does not support writing '{options.Format}' format.");
            }
        }

        TIObject IPersistableModel<TIObject>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TIObject>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeTIObject(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TIObject)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TIObject>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
