// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class Relationship : IUtf8JsonSerializable, IJsonModel<Relationship>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<Relationship>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<Relationship>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Relationship>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Relationship)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("kind"u8);
            writer.WriteStringValue(Kind.ToString());
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsCollectionDefined(Data))
            {
                writer.WritePropertyName("data"u8);
                writer.WriteStartObject();
                foreach (var item in Data)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedBy))
            {
                writer.WritePropertyName("createdBy"u8);
                writer.WriteObjectValue(CreatedBy, options);
            }
            if (options.Format != "W" && Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source"u8);
                writer.WriteStringValue(Source);
            }
            if (options.Format != "W" && Optional.IsDefined(FirstIngestedTimeUtc))
            {
                writer.WritePropertyName("firstIngestedTimeUtc"u8);
                writer.WriteStringValue(FirstIngestedTimeUtc.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastIngestedTimeUtc))
            {
                writer.WritePropertyName("lastIngestedTimeUtc"u8);
                writer.WriteStringValue(LastIngestedTimeUtc.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(IngestionRulesVersion))
            {
                writer.WritePropertyName("ingestionRulesVersion"u8);
                writer.WriteStringValue(IngestionRulesVersion.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastUpdateMethod))
            {
                writer.WritePropertyName("lastUpdateMethod"u8);
                writer.WriteStringValue(LastUpdateMethod);
            }
            if (options.Format != "W" && Optional.IsDefined(LastModifiedBy))
            {
                writer.WritePropertyName("lastModifiedBy"u8);
                writer.WriteObjectValue(LastModifiedBy, options);
            }
            if (options.Format != "W" && Optional.IsDefined(LastUpdatedDateTimeUtc))
            {
                writer.WritePropertyName("lastUpdatedDateTimeUtc"u8);
                writer.WriteStringValue(LastUpdatedDateTimeUtc.Value, "O");
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(RelationshipHints))
            {
                writer.WritePropertyName("relationshipHints"u8);
                writer.WriteStartArray();
                foreach (var item in RelationshipHints)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        Relationship IJsonModel<Relationship>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Relationship>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Relationship)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRelationship(document.RootElement, options);
        }

        internal static Relationship DeserializeRelationship(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            TIObjectKind kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IReadOnlyDictionary<string, BinaryData> data = default;
            ThreatIntelligenceUserInfo createdBy = default;
            string source = default;
            DateTimeOffset? firstIngestedTimeUtc = default;
            DateTimeOffset? lastIngestedTimeUtc = default;
            Guid? ingestionRulesVersion = default;
            string lastUpdateMethod = default;
            ThreatIntelligenceUserInfo lastModifiedBy = default;
            DateTimeOffset? lastUpdatedDateTimeUtc = default;
            IReadOnlyList<RelationshipHint> relationshipHints = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = new TIObjectKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("data"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.Value.ValueKind == JsonValueKind.Null)
                                {
                                    dictionary.Add(property1.Name, null);
                                }
                                else
                                {
                                    dictionary.Add(property1.Name, BinaryData.FromString(property1.Value.GetRawText()));
                                }
                            }
                            data = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("createdBy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdBy = ThreatIntelligenceUserInfo.DeserializeThreatIntelligenceUserInfo(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("source"u8))
                        {
                            source = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("firstIngestedTimeUtc"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            firstIngestedTimeUtc = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastIngestedTimeUtc"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastIngestedTimeUtc = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("ingestionRulesVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ingestionRulesVersion = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("lastUpdateMethod"u8))
                        {
                            lastUpdateMethod = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("lastModifiedBy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastModifiedBy = ThreatIntelligenceUserInfo.DeserializeThreatIntelligenceUserInfo(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("lastUpdatedDateTimeUtc"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastUpdatedDateTimeUtc = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("relationshipHints"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<RelationshipHint> array = new List<RelationshipHint>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(RelationshipHint.DeserializeRelationshipHint(item, options));
                            }
                            relationshipHints = array;
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new Relationship(
                id,
                name,
                type,
                systemData,
                kind,
                data ?? new ChangeTrackingDictionary<string, BinaryData>(),
                createdBy,
                source,
                firstIngestedTimeUtc,
                lastIngestedTimeUtc,
                ingestionRulesVersion,
                lastUpdateMethod,
                lastModifiedBy,
                lastUpdatedDateTimeUtc,
                relationshipHints ?? new ChangeTrackingList<RelationshipHint>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<Relationship>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Relationship>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(Relationship)} does not support writing '{options.Format}' format.");
            }
        }

        Relationship IPersistableModel<Relationship>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Relationship>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeRelationship(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(Relationship)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<Relationship>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
