// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    public partial class FileImportData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(IngestionMode))
            {
                writer.WritePropertyName("ingestionMode"u8);
                writer.WriteStringValue(IngestionMode.Value.ToString());
            }
            if (Optional.IsDefined(ContentType))
            {
                writer.WritePropertyName("contentType"u8);
                writer.WriteStringValue(ContentType.Value.ToString());
            }
            if (Optional.IsDefined(ImportFile))
            {
                writer.WritePropertyName("importFile"u8);
                writer.WriteObjectValue(ImportFile);
            }
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source"u8);
                writer.WriteStringValue(Source);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static FileImportData DeserializeFileImportData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<IngestionMode> ingestionMode = default;
            Optional<FileImportContentType> contentType = default;
            Optional<DateTimeOffset> createdTimeUTC = default;
            Optional<FileMetadata> errorFile = default;
            Optional<IReadOnlyList<ValidationError>> errorsPreview = default;
            Optional<FileMetadata> importFile = default;
            Optional<int> ingestedRecordCount = default;
            Optional<string> source = default;
            Optional<FileImportState> state = default;
            Optional<int> totalRecordCount = default;
            Optional<int> validRecordCount = default;
            Optional<DateTimeOffset> filesValidUntilTimeUTC = default;
            Optional<DateTimeOffset> importValidUntilTimeUTC = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("ingestionMode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ingestionMode = new IngestionMode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("contentType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contentType = new FileImportContentType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("createdTimeUTC"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdTimeUTC = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("errorFile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            errorFile = FileMetadata.DeserializeFileMetadata(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("errorsPreview"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ValidationError> array = new List<ValidationError>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ValidationError.DeserializeValidationError(item));
                            }
                            errorsPreview = array;
                            continue;
                        }
                        if (property0.NameEquals("importFile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            importFile = FileMetadata.DeserializeFileMetadata(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("ingestedRecordCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ingestedRecordCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("source"u8))
                        {
                            source = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("state"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            state = new FileImportState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("totalRecordCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalRecordCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("validRecordCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            validRecordCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("filesValidUntilTimeUTC"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            filesValidUntilTimeUTC = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("importValidUntilTimeUTC"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            importValidUntilTimeUTC = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new FileImportData(id, name, type, systemData.Value, Optional.ToNullable(ingestionMode), Optional.ToNullable(contentType), Optional.ToNullable(createdTimeUTC), errorFile.Value, Optional.ToList(errorsPreview), importFile.Value, Optional.ToNullable(ingestedRecordCount), source.Value, Optional.ToNullable(state), Optional.ToNullable(totalRecordCount), Optional.ToNullable(validRecordCount), Optional.ToNullable(filesValidUntilTimeUTC), Optional.ToNullable(importValidUntilTimeUTC));
        }
    }
}
