// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> Categories of recommendations. </summary>
    public readonly partial struct Category : IEquatable<Category>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Category"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Category(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OnboardingValue = "Onboarding";
        private const string NewFeatureValue = "NewFeature";
        private const string SocEfficiencyValue = "SocEfficiency";
        private const string CostOptimizationValue = "CostOptimization";
        private const string DemoValue = "Demo";

        /// <summary> Onboarding recommendation. </summary>
        public static Category Onboarding { get; } = new Category(OnboardingValue);
        /// <summary> New feature recommendation. </summary>
        public static Category NewFeature { get; } = new Category(NewFeatureValue);
        /// <summary> Soc Efficiency recommendation. </summary>
        public static Category SocEfficiency { get; } = new Category(SocEfficiencyValue);
        /// <summary> Cost optimization recommendation. </summary>
        public static Category CostOptimization { get; } = new Category(CostOptimizationValue);
        /// <summary> Demo recommendation. </summary>
        public static Category Demo { get; } = new Category(DemoValue);
        /// <summary> Determines if two <see cref="Category"/> values are the same. </summary>
        public static bool operator ==(Category left, Category right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Category"/> values are not the same. </summary>
        public static bool operator !=(Category left, Category right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Category"/>. </summary>
        public static implicit operator Category(string value) => new Category(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Category other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Category other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
