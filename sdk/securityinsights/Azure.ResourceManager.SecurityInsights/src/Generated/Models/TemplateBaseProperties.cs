// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary>
    /// Template property bag.
    /// Serialized Name: TemplateBaseProperties
    /// </summary>
    public partial class TemplateBaseProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TemplateBaseProperties"/>. </summary>
        internal TemplateBaseProperties()
        {
            Providers = new ChangeTrackingList<string>();
            ThreatAnalysisTactics = new ChangeTrackingList<string>();
            ThreatAnalysisTechniques = new ChangeTrackingList<string>();
            PreviewImages = new ChangeTrackingList<string>();
            PreviewImagesDark = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="TemplateBaseProperties"/>. </summary>
        /// <param name="contentId">
        /// Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
        /// Serialized Name: TemplateBaseProperties.contentId
        /// </param>
        /// <param name="contentProductId">
        /// Unique ID for the content. It should be generated based on the contentId of the package, contentId of the template, contentKind of the template and the contentVersion of the template
        /// Serialized Name: TemplateBaseProperties.contentProductId
        /// </param>
        /// <param name="packageVersion">
        /// Version of the package.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM metadata best practices.  Can also be any string, but then we cannot guarantee any version checks
        /// Serialized Name: TemplateBaseProperties.packageVersion
        /// </param>
        /// <param name="version">
        /// Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM metadata best practices.  Can also be any string, but then we cannot guarantee any version checks
        /// Serialized Name: TemplateBaseProperties.version
        /// </param>
        /// <param name="displayName">
        /// The display name of the template
        /// Serialized Name: TemplateBaseProperties.displayName
        /// </param>
        /// <param name="contentKind">
        /// The kind of content the template is for.
        /// Serialized Name: TemplateBaseProperties.contentKind
        /// </param>
        /// <param name="source">
        /// Source of the content.  This is where/how it was created.
        /// Serialized Name: TemplateBaseProperties.source
        /// </param>
        /// <param name="author">
        /// The creator of the content item.
        /// Serialized Name: TemplateBaseProperties.author
        /// </param>
        /// <param name="support">
        /// Support information for the template - type, name, contact information
        /// Serialized Name: TemplateBaseProperties.support
        /// </param>
        /// <param name="dependencies">
        /// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
        /// Serialized Name: TemplateBaseProperties.dependencies
        /// </param>
        /// <param name="categories">
        /// Categories for the item
        /// Serialized Name: TemplateBaseProperties.categories
        /// </param>
        /// <param name="providers">
        /// Providers for the content item
        /// Serialized Name: TemplateBaseProperties.providers
        /// </param>
        /// <param name="firstPublishOn">
        /// first publish date content item
        /// Serialized Name: TemplateBaseProperties.firstPublishDate
        /// </param>
        /// <param name="lastPublishOn">
        /// last publish date for the content item
        /// Serialized Name: TemplateBaseProperties.lastPublishDate
        /// </param>
        /// <param name="customVersion">
        /// The custom version of the content. A optional free text
        /// Serialized Name: TemplateBaseProperties.customVersion
        /// </param>
        /// <param name="contentSchemaVersion">
        /// Schema version of the content. Can be used to distinguish between different flow based on the schema version
        /// Serialized Name: TemplateBaseProperties.contentSchemaVersion
        /// </param>
        /// <param name="icon">
        /// the icon identifier. this id can later be fetched from the content metadata
        /// Serialized Name: TemplateBaseProperties.icon
        /// </param>
        /// <param name="threatAnalysisTactics">
        /// the tactics the resource covers
        /// Serialized Name: TemplateBaseProperties.threatAnalysisTactics
        /// </param>
        /// <param name="threatAnalysisTechniques">
        /// the techniques the resource covers, these have to be aligned with the tactics being used
        /// Serialized Name: TemplateBaseProperties.threatAnalysisTechniques
        /// </param>
        /// <param name="previewImages">
        /// preview image file names. These will be taken from the solution artifacts
        /// Serialized Name: TemplateBaseProperties.previewImages
        /// </param>
        /// <param name="previewImagesDark">
        /// preview image file names. These will be taken from the solution artifacts. used for dark theme support
        /// Serialized Name: TemplateBaseProperties.previewImagesDark
        /// </param>
        /// <param name="packageId">
        /// the package Id contains this template
        /// Serialized Name: TemplateBaseProperties.packageId
        /// </param>
        /// <param name="packageKind">
        /// the packageKind of the package contains this template
        /// Serialized Name: TemplateBaseProperties.packageKind
        /// </param>
        /// <param name="packageName">
        /// the name of the package contains this template
        /// Serialized Name: TemplateBaseProperties.packageName
        /// </param>
        /// <param name="isDeprecated">
        /// Flag indicates if this template is deprecated
        /// Serialized Name: TemplateBaseProperties.isDeprecated
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TemplateBaseProperties(string contentId, string contentProductId, string packageVersion, string version, string displayName, SecurityInsightsKind? contentKind, MetadataSource source, MetadataAuthor author, MetadataSupport support, MetadataDependencies dependencies, MetadataCategories categories, IReadOnlyList<string> providers, DateTimeOffset? firstPublishOn, DateTimeOffset? lastPublishOn, string customVersion, string contentSchemaVersion, string icon, IReadOnlyList<string> threatAnalysisTactics, IReadOnlyList<string> threatAnalysisTechniques, IReadOnlyList<string> previewImages, IReadOnlyList<string> previewImagesDark, string packageId, PackageKind? packageKind, string packageName, MetadataFlag? isDeprecated, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ContentId = contentId;
            ContentProductId = contentProductId;
            PackageVersion = packageVersion;
            Version = version;
            DisplayName = displayName;
            ContentKind = contentKind;
            Source = source;
            Author = author;
            Support = support;
            Dependencies = dependencies;
            Categories = categories;
            Providers = providers;
            FirstPublishOn = firstPublishOn;
            LastPublishOn = lastPublishOn;
            CustomVersion = customVersion;
            ContentSchemaVersion = contentSchemaVersion;
            Icon = icon;
            ThreatAnalysisTactics = threatAnalysisTactics;
            ThreatAnalysisTechniques = threatAnalysisTechniques;
            PreviewImages = previewImages;
            PreviewImagesDark = previewImagesDark;
            PackageId = packageId;
            PackageKind = packageKind;
            PackageName = packageName;
            IsDeprecated = isDeprecated;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
        /// Serialized Name: TemplateBaseProperties.contentId
        /// </summary>
        public string ContentId { get; }
        /// <summary>
        /// Unique ID for the content. It should be generated based on the contentId of the package, contentId of the template, contentKind of the template and the contentVersion of the template
        /// Serialized Name: TemplateBaseProperties.contentProductId
        /// </summary>
        public string ContentProductId { get; }
        /// <summary>
        /// Version of the package.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM metadata best practices.  Can also be any string, but then we cannot guarantee any version checks
        /// Serialized Name: TemplateBaseProperties.packageVersion
        /// </summary>
        public string PackageVersion { get; }
        /// <summary>
        /// Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM metadata best practices.  Can also be any string, but then we cannot guarantee any version checks
        /// Serialized Name: TemplateBaseProperties.version
        /// </summary>
        public string Version { get; }
        /// <summary>
        /// The display name of the template
        /// Serialized Name: TemplateBaseProperties.displayName
        /// </summary>
        public string DisplayName { get; }
        /// <summary>
        /// The kind of content the template is for.
        /// Serialized Name: TemplateBaseProperties.contentKind
        /// </summary>
        public SecurityInsightsKind? ContentKind { get; }
        /// <summary>
        /// Source of the content.  This is where/how it was created.
        /// Serialized Name: TemplateBaseProperties.source
        /// </summary>
        public MetadataSource Source { get; }
        /// <summary>
        /// The creator of the content item.
        /// Serialized Name: TemplateBaseProperties.author
        /// </summary>
        public MetadataAuthor Author { get; }
        /// <summary>
        /// Support information for the template - type, name, contact information
        /// Serialized Name: TemplateBaseProperties.support
        /// </summary>
        public MetadataSupport Support { get; }
        /// <summary>
        /// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
        /// Serialized Name: TemplateBaseProperties.dependencies
        /// </summary>
        public MetadataDependencies Dependencies { get; }
        /// <summary>
        /// Categories for the item
        /// Serialized Name: TemplateBaseProperties.categories
        /// </summary>
        public MetadataCategories Categories { get; }
        /// <summary>
        /// Providers for the content item
        /// Serialized Name: TemplateBaseProperties.providers
        /// </summary>
        public IReadOnlyList<string> Providers { get; }
        /// <summary>
        /// first publish date content item
        /// Serialized Name: TemplateBaseProperties.firstPublishDate
        /// </summary>
        public DateTimeOffset? FirstPublishOn { get; }
        /// <summary>
        /// last publish date for the content item
        /// Serialized Name: TemplateBaseProperties.lastPublishDate
        /// </summary>
        public DateTimeOffset? LastPublishOn { get; }
        /// <summary>
        /// The custom version of the content. A optional free text
        /// Serialized Name: TemplateBaseProperties.customVersion
        /// </summary>
        public string CustomVersion { get; }
        /// <summary>
        /// Schema version of the content. Can be used to distinguish between different flow based on the schema version
        /// Serialized Name: TemplateBaseProperties.contentSchemaVersion
        /// </summary>
        public string ContentSchemaVersion { get; }
        /// <summary>
        /// the icon identifier. this id can later be fetched from the content metadata
        /// Serialized Name: TemplateBaseProperties.icon
        /// </summary>
        public string Icon { get; }
        /// <summary>
        /// the tactics the resource covers
        /// Serialized Name: TemplateBaseProperties.threatAnalysisTactics
        /// </summary>
        public IReadOnlyList<string> ThreatAnalysisTactics { get; }
        /// <summary>
        /// the techniques the resource covers, these have to be aligned with the tactics being used
        /// Serialized Name: TemplateBaseProperties.threatAnalysisTechniques
        /// </summary>
        public IReadOnlyList<string> ThreatAnalysisTechniques { get; }
        /// <summary>
        /// preview image file names. These will be taken from the solution artifacts
        /// Serialized Name: TemplateBaseProperties.previewImages
        /// </summary>
        public IReadOnlyList<string> PreviewImages { get; }
        /// <summary>
        /// preview image file names. These will be taken from the solution artifacts. used for dark theme support
        /// Serialized Name: TemplateBaseProperties.previewImagesDark
        /// </summary>
        public IReadOnlyList<string> PreviewImagesDark { get; }
        /// <summary>
        /// the package Id contains this template
        /// Serialized Name: TemplateBaseProperties.packageId
        /// </summary>
        public string PackageId { get; }
        /// <summary>
        /// the packageKind of the package contains this template
        /// Serialized Name: TemplateBaseProperties.packageKind
        /// </summary>
        public PackageKind? PackageKind { get; }
        /// <summary>
        /// the name of the package contains this template
        /// Serialized Name: TemplateBaseProperties.packageName
        /// </summary>
        public string PackageName { get; }
        /// <summary>
        /// Flag indicates if this template is deprecated
        /// Serialized Name: TemplateBaseProperties.isDeprecated
        /// </summary>
        public MetadataFlag? IsDeprecated { get; }
    }
}
