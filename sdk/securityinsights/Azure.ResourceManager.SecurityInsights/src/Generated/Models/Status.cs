// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary>
    /// The status of the hunt.
    /// Serialized Name: Status
    /// </summary>
    public readonly partial struct Status : IEquatable<Status>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Status"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NewValue = "New";
        private const string ActiveValue = "Active";
        private const string ClosedValue = "Closed";
        private const string BacklogValue = "Backlog";
        private const string ApprovedValue = "Approved";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string InProgressValue = "InProgress";

        /// <summary>
        /// New
        /// Serialized Name: Status.New
        /// </summary>
        public static Status New { get; } = new Status(NewValue);
        /// <summary>
        /// Active
        /// Serialized Name: Status.Active
        /// </summary>
        public static Status Active { get; } = new Status(ActiveValue);
        /// <summary>
        /// Closed
        /// Serialized Name: Status.Closed
        /// </summary>
        public static Status Closed { get; } = new Status(ClosedValue);
        /// <summary>
        /// Backlog
        /// Serialized Name: Status.Backlog
        /// </summary>
        public static Status Backlog { get; } = new Status(BacklogValue);
        /// <summary>
        /// Approved
        /// Serialized Name: Status.Approved
        /// </summary>
        public static Status Approved { get; } = new Status(ApprovedValue);
        /// <summary>
        /// Succeeded
        /// Serialized Name: Status.Succeeded
        /// </summary>
        public static Status Succeeded { get; } = new Status(SucceededValue);
        /// <summary>
        /// Failed
        /// Serialized Name: Status.Failed
        /// </summary>
        public static Status Failed { get; } = new Status(FailedValue);
        /// <summary>
        /// InProgress
        /// Serialized Name: Status.InProgress
        /// </summary>
        public static Status InProgress { get; } = new Status(InProgressValue);
        /// <summary> Determines if two <see cref="Status"/> values are the same. </summary>
        public static bool operator ==(Status left, Status right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Status"/> values are not the same. </summary>
        public static bool operator !=(Status left, Status right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Status"/>. </summary>
        public static implicit operator Status(string value) => new Status(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Status other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
