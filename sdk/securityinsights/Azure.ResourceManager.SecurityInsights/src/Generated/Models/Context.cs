// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> Context of recommendation. </summary>
    public readonly partial struct Context : IEquatable<Context>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Context"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Context(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AnalyticsValue = "Analytics";
        private const string IncidentsValue = "Incidents";
        private const string OverviewValue = "Overview";
        private const string NoneValue = "None";

        /// <summary> Analytics context. </summary>
        public static Context Analytics { get; } = new Context(AnalyticsValue);
        /// <summary> Incidents context. </summary>
        public static Context Incidents { get; } = new Context(IncidentsValue);
        /// <summary> Overview context. </summary>
        public static Context Overview { get; } = new Context(OverviewValue);
        /// <summary> No context. </summary>
        public static Context None { get; } = new Context(NoneValue);
        /// <summary> Determines if two <see cref="Context"/> values are the same. </summary>
        public static bool operator ==(Context left, Context right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Context"/> values are not the same. </summary>
        public static bool operator !=(Context left, Context right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Context"/>. </summary>
        public static implicit operator Context(string value) => new Context(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Context other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Context other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
