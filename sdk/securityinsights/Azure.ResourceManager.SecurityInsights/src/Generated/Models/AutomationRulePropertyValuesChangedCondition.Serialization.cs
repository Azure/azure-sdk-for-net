// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class AutomationRulePropertyValuesChangedCondition : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PropertyName))
            {
                writer.WritePropertyName("propertyName");
                writer.WriteStringValue(PropertyName.Value.ToString());
            }
            if (Optional.IsDefined(ChangeType))
            {
                writer.WritePropertyName("changeType");
                writer.WriteStringValue(ChangeType.Value.ToString());
            }
            if (Optional.IsDefined(Operator))
            {
                writer.WritePropertyName("operator");
                writer.WriteStringValue(Operator.Value.ToString());
            }
            if (Optional.IsCollectionDefined(PropertyValues))
            {
                writer.WritePropertyName("propertyValues");
                writer.WriteStartArray();
                foreach (var item in PropertyValues)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AutomationRulePropertyValuesChangedCondition DeserializeAutomationRulePropertyValuesChangedCondition(JsonElement element)
        {
            Optional<AutomationRulePropertyChangedConditionSupportedPropertyType> propertyName = default;
            Optional<AutomationRulePropertyChangedConditionSupportedChangedType> changeType = default;
            Optional<AutomationRulePropertyConditionSupportedOperator> @operator = default;
            Optional<IList<string>> propertyValues = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("propertyName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    propertyName = new AutomationRulePropertyChangedConditionSupportedPropertyType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("changeType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    changeType = new AutomationRulePropertyChangedConditionSupportedChangedType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("operator"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @operator = new AutomationRulePropertyConditionSupportedOperator(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("propertyValues"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    propertyValues = array;
                    continue;
                }
            }
            return new AutomationRulePropertyValuesChangedCondition(Optional.ToNullable(propertyName), Optional.ToNullable(changeType), Optional.ToNullable(@operator), Optional.ToList(propertyValues));
        }
    }
}
