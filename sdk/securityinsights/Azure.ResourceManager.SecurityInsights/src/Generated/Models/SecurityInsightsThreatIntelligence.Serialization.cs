// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class SecurityInsightsThreatIntelligence
    {
        internal static SecurityInsightsThreatIntelligence DeserializeSecurityInsightsThreatIntelligence(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<double> confidence = default;
            Optional<string> providerName = default;
            Optional<string> reportLink = default;
            Optional<string> threatDescription = default;
            Optional<string> threatName = default;
            Optional<string> threatType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("confidence"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    confidence = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("providerName"u8))
                {
                    providerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reportLink"u8))
                {
                    reportLink = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("threatDescription"u8))
                {
                    threatDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("threatName"u8))
                {
                    threatName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("threatType"u8))
                {
                    threatType = property.Value.GetString();
                    continue;
                }
            }
            return new SecurityInsightsThreatIntelligence(Optional.ToNullable(confidence), providerName.Value, reportLink.Value, threatDescription.Value, threatName.Value, threatType.Value);
        }
    }
}
