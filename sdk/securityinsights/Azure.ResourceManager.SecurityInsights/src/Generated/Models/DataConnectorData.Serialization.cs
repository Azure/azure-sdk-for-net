// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    public partial class DataConnectorData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind.ToString());
            if (Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(ETag.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static DataConnectorData DeserializeDataConnectorData(JsonElement element)
        {
            if (element.TryGetProperty("kind", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "APIPolling": return CodelessApiPollingDataConnector.DeserializeCodelessApiPollingDataConnector(element);
                    case "AmazonWebServicesCloudTrail": return AwsCloudTrailDataConnector.DeserializeAwsCloudTrailDataConnector(element);
                    case "AmazonWebServicesS3": return AwsS3DataConnector.DeserializeAwsS3DataConnector(element);
                    case "AzureActiveDirectory": return AADDataConnector.DeserializeAADDataConnector(element);
                    case "AzureAdvancedThreatProtection": return AatpDataConnector.DeserializeAatpDataConnector(element);
                    case "AzureSecurityCenter": return ASCDataConnector.DeserializeASCDataConnector(element);
                    case "Dynamics365": return Dynamics365DataConnector.DeserializeDynamics365DataConnector(element);
                    case "GenericUI": return CodelessUiDataConnector.DeserializeCodelessUiDataConnector(element);
                    case "IOT": return IoTDataConnector.DeserializeIoTDataConnector(element);
                    case "MicrosoftCloudAppSecurity": return McasDataConnector.DeserializeMcasDataConnector(element);
                    case "MicrosoftDefenderAdvancedThreatProtection": return MdatpDataConnector.DeserializeMdatpDataConnector(element);
                    case "MicrosoftThreatIntelligence": return MstiDataConnector.DeserializeMstiDataConnector(element);
                    case "MicrosoftThreatProtection": return MTPDataConnector.DeserializeMTPDataConnector(element);
                    case "Office365": return OfficeDataConnector.DeserializeOfficeDataConnector(element);
                    case "Office365Project": return Office365ProjectDataConnector.DeserializeOffice365ProjectDataConnector(element);
                    case "OfficeATP": return OfficeATPDataConnector.DeserializeOfficeATPDataConnector(element);
                    case "OfficeIRM": return OfficeIRMDataConnector.DeserializeOfficeIRMDataConnector(element);
                    case "OfficePowerBI": return OfficePowerBIDataConnector.DeserializeOfficePowerBIDataConnector(element);
                    case "ThreatIntelligence": return TIDataConnector.DeserializeTIDataConnector(element);
                    case "ThreatIntelligenceTaxii": return TiTaxiiDataConnector.DeserializeTiTaxiiDataConnector(element);
                }
            }
            DataConnectorKind kind = default;
            Optional<ETag> etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = new DataConnectorKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
            }
            return new DataConnectorData(id, name, type, systemData.Value, kind, Optional.ToNullable(etag));
        }
    }
}
