// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary>
    /// The TiType.
    /// Serialized Name: TiType
    /// </summary>
    public readonly partial struct TiType : IEquatable<TiType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TiType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TiType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MainValue = "main";

        /// <summary>
        /// main
        /// Serialized Name: TiType.main
        /// </summary>
        public static TiType Main { get; } = new TiType(MainValue);
        /// <summary> Determines if two <see cref="TiType"/> values are the same. </summary>
        public static bool operator ==(TiType left, TiType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TiType"/> values are not the same. </summary>
        public static bool operator !=(TiType left, TiType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TiType"/>. </summary>
        public static implicit operator TiType(string value) => new TiType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TiType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TiType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
