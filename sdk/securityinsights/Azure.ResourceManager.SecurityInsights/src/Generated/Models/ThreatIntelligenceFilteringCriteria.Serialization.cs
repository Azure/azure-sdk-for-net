// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class ThreatIntelligenceFilteringCriteria : IUtf8JsonSerializable, IModelJsonSerializable<ThreatIntelligenceFilteringCriteria>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ThreatIntelligenceFilteringCriteria>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ThreatIntelligenceFilteringCriteria>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ThreatIntelligenceFilteringCriteria>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(PageSize))
            {
                writer.WritePropertyName("pageSize"u8);
                writer.WriteNumberValue(PageSize.Value);
            }
            if (Optional.IsDefined(MinConfidence))
            {
                writer.WritePropertyName("minConfidence"u8);
                writer.WriteNumberValue(MinConfidence.Value);
            }
            if (Optional.IsDefined(MaxConfidence))
            {
                writer.WritePropertyName("maxConfidence"u8);
                writer.WriteNumberValue(MaxConfidence.Value);
            }
            if (Optional.IsDefined(MinValidUntil))
            {
                writer.WritePropertyName("minValidUntil"u8);
                writer.WriteStringValue(MinValidUntil.Value, "O");
            }
            if (Optional.IsDefined(MaxValidUntil))
            {
                writer.WritePropertyName("maxValidUntil"u8);
                writer.WriteStringValue(MaxValidUntil.Value, "O");
            }
            if (Optional.IsDefined(IsIncludeDisabled))
            {
                writer.WritePropertyName("includeDisabled"u8);
                writer.WriteBooleanValue(IsIncludeDisabled.Value);
            }
            if (Optional.IsCollectionDefined(SortBy))
            {
                writer.WritePropertyName("sortBy"u8);
                writer.WriteStartArray();
                foreach (var item in SortBy)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<ThreatIntelligenceSortingCriteria>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Sources))
            {
                writer.WritePropertyName("sources"u8);
                writer.WriteStartArray();
                foreach (var item in Sources)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PatternTypes))
            {
                writer.WritePropertyName("patternTypes"u8);
                writer.WriteStartArray();
                foreach (var item in PatternTypes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ThreatTypes))
            {
                writer.WritePropertyName("threatTypes"u8);
                writer.WriteStartArray();
                foreach (var item in ThreatTypes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Ids))
            {
                writer.WritePropertyName("ids"u8);
                writer.WriteStartArray();
                foreach (var item in Ids)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Keywords))
            {
                writer.WritePropertyName("keywords"u8);
                writer.WriteStartArray();
                foreach (var item in Keywords)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SkipToken))
            {
                writer.WritePropertyName("skipToken"u8);
                writer.WriteStringValue(SkipToken);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ThreatIntelligenceFilteringCriteria DeserializeThreatIntelligenceFilteringCriteria(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> pageSize = default;
            Optional<int> minConfidence = default;
            Optional<int> maxConfidence = default;
            Optional<DateTimeOffset> minValidUntil = default;
            Optional<DateTimeOffset> maxValidUntil = default;
            Optional<bool> includeDisabled = default;
            Optional<IList<ThreatIntelligenceSortingCriteria>> sortBy = default;
            Optional<IList<string>> sources = default;
            Optional<IList<string>> patternTypes = default;
            Optional<IList<string>> threatTypes = default;
            Optional<IList<string>> ids = default;
            Optional<IList<string>> keywords = default;
            Optional<string> skipToken = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("pageSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pageSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minConfidence"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minConfidence = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxConfidence"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxConfidence = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minValidUntil"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minValidUntil = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("maxValidUntil"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxValidUntil = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("includeDisabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    includeDisabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sortBy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ThreatIntelligenceSortingCriteria> array = new List<ThreatIntelligenceSortingCriteria>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ThreatIntelligenceSortingCriteria.DeserializeThreatIntelligenceSortingCriteria(item));
                    }
                    sortBy = array;
                    continue;
                }
                if (property.NameEquals("sources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    sources = array;
                    continue;
                }
                if (property.NameEquals("patternTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    patternTypes = array;
                    continue;
                }
                if (property.NameEquals("threatTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    threatTypes = array;
                    continue;
                }
                if (property.NameEquals("ids"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ids = array;
                    continue;
                }
                if (property.NameEquals("keywords"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    keywords = array;
                    continue;
                }
                if (property.NameEquals("skipToken"u8))
                {
                    skipToken = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ThreatIntelligenceFilteringCriteria(Optional.ToNullable(pageSize), Optional.ToNullable(minConfidence), Optional.ToNullable(maxConfidence), Optional.ToNullable(minValidUntil), Optional.ToNullable(maxValidUntil), Optional.ToNullable(includeDisabled), Optional.ToList(sortBy), Optional.ToList(sources), Optional.ToList(patternTypes), Optional.ToList(threatTypes), Optional.ToList(ids), Optional.ToList(keywords), skipToken.Value, rawData);
        }

        ThreatIntelligenceFilteringCriteria IModelJsonSerializable<ThreatIntelligenceFilteringCriteria>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ThreatIntelligenceFilteringCriteria>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeThreatIntelligenceFilteringCriteria(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ThreatIntelligenceFilteringCriteria>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ThreatIntelligenceFilteringCriteria>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ThreatIntelligenceFilteringCriteria IModelSerializable<ThreatIntelligenceFilteringCriteria>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ThreatIntelligenceFilteringCriteria>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeThreatIntelligenceFilteringCriteria(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="ThreatIntelligenceFilteringCriteria"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="ThreatIntelligenceFilteringCriteria"/> to convert. </param>
        public static implicit operator RequestContent(ThreatIntelligenceFilteringCriteria model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="ThreatIntelligenceFilteringCriteria"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator ThreatIntelligenceFilteringCriteria(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeThreatIntelligenceFilteringCriteria(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
