// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class SessionAuthModel : IUtf8JsonSerializable, IJsonModel<SessionAuthModel>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SessionAuthModel>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SessionAuthModel>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SessionAuthModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SessionAuthModel)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("userName"u8);
            writer.WriteStartObject();
            foreach (var item in UserName)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("password"u8);
            writer.WriteStartObject();
            foreach (var item in Password)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            if (Optional.IsCollectionDefined(QueryParameters))
            {
                writer.WritePropertyName("queryParameters"u8);
                writer.WriteStartObject();
                foreach (var item in QueryParameters)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(IsPostPayloadJson))
            {
                if (IsPostPayloadJson != null)
                {
                    writer.WritePropertyName("isPostPayloadJson"u8);
                    writer.WriteBooleanValue(IsPostPayloadJson.Value);
                }
                else
                {
                    writer.WriteNull("isPostPayloadJson");
                }
            }
            if (Optional.IsCollectionDefined(Headers))
            {
                writer.WritePropertyName("headers"u8);
                writer.WriteStartObject();
                foreach (var item in Headers)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(SessionTimeoutInMinutes))
            {
                if (SessionTimeoutInMinutes != null)
                {
                    writer.WritePropertyName("sessionTimeoutInMinutes"u8);
                    writer.WriteNumberValue(SessionTimeoutInMinutes.Value);
                }
                else
                {
                    writer.WriteNull("sessionTimeoutInMinutes");
                }
            }
            if (Optional.IsDefined(SessionIdName))
            {
                writer.WritePropertyName("sessionIdName"u8);
                writer.WriteStringValue(SessionIdName);
            }
            if (Optional.IsDefined(SessionLoginRequestUri))
            {
                writer.WritePropertyName("sessionLoginRequestUri"u8);
                writer.WriteStringValue(SessionLoginRequestUri.AbsoluteUri);
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(AuthType.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SessionAuthModel IJsonModel<SessionAuthModel>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SessionAuthModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SessionAuthModel)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSessionAuthModel(document.RootElement, options);
        }

        internal static SessionAuthModel DeserializeSessionAuthModel(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> userName = default;
            IDictionary<string, string> password = default;
            IDictionary<string, BinaryData> queryParameters = default;
            bool? isPostPayloadJson = default;
            IDictionary<string, string> headers = default;
            int? sessionTimeoutInMinutes = default;
            string sessionIdName = default;
            Uri sessionLoginRequestUri = default;
            CcpAuthType type = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("userName"u8))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    userName = dictionary;
                    continue;
                }
                if (property.NameEquals("password"u8))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    password = dictionary;
                    continue;
                }
                if (property.NameEquals("queryParameters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    queryParameters = dictionary;
                    continue;
                }
                if (property.NameEquals("isPostPayloadJson"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isPostPayloadJson = null;
                        continue;
                    }
                    isPostPayloadJson = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("headers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    headers = dictionary;
                    continue;
                }
                if (property.NameEquals("sessionTimeoutInMinutes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sessionTimeoutInMinutes = null;
                        continue;
                    }
                    sessionTimeoutInMinutes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sessionIdName"u8))
                {
                    sessionIdName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sessionLoginRequestUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sessionLoginRequestUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new CcpAuthType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SessionAuthModel(
                type,
                serializedAdditionalRawData,
                userName,
                password,
                queryParameters ?? new ChangeTrackingDictionary<string, BinaryData>(),
                isPostPayloadJson,
                headers ?? new ChangeTrackingDictionary<string, string>(),
                sessionTimeoutInMinutes,
                sessionIdName,
                sessionLoginRequestUri);
        }

        BinaryData IPersistableModel<SessionAuthModel>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SessionAuthModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(SessionAuthModel)} does not support writing '{options.Format}' format.");
            }
        }

        SessionAuthModel IPersistableModel<SessionAuthModel>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SessionAuthModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSessionAuthModel(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SessionAuthModel)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SessionAuthModel>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
