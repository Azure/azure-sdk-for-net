// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary>
    /// Config to describe the instructions blade
    /// Serialized Name: CodelessUiConnectorConfigProperties
    /// </summary>
    public partial class CodelessUiConnectorConfigProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CodelessUiConnectorConfigProperties"/>. </summary>
        /// <param name="title">
        /// Connector blade title
        /// Serialized Name: CodelessUiConnectorConfigProperties.title
        /// </param>
        /// <param name="publisher">
        /// Connector publisher name
        /// Serialized Name: CodelessUiConnectorConfigProperties.publisher
        /// </param>
        /// <param name="descriptionMarkdown">
        /// Connector description
        /// Serialized Name: CodelessUiConnectorConfigProperties.descriptionMarkdown
        /// </param>
        /// <param name="graphQueriesTableName">
        /// Name of the table the connector will insert the data to
        /// Serialized Name: CodelessUiConnectorConfigProperties.graphQueriesTableName
        /// </param>
        /// <param name="graphQueries">
        /// The graph query to show the current data status
        /// Serialized Name: CodelessUiConnectorConfigProperties.graphQueries
        /// </param>
        /// <param name="sampleQueries">
        /// The sample queries for the connector
        /// Serialized Name: CodelessUiConnectorConfigProperties.sampleQueries
        /// </param>
        /// <param name="dataTypes">
        /// Data types to check for last data received
        /// Serialized Name: CodelessUiConnectorConfigProperties.dataTypes
        /// </param>
        /// <param name="connectivityCriteria">
        /// Define the way the connector check connectivity
        /// Serialized Name: CodelessUiConnectorConfigProperties.connectivityCriteria
        /// </param>
        /// <param name="availability">
        /// Connector Availability Status
        /// Serialized Name: CodelessUiConnectorConfigProperties.availability
        /// </param>
        /// <param name="permissions">
        /// Permissions required for the connector
        /// Serialized Name: CodelessUiConnectorConfigProperties.permissions
        /// </param>
        /// <param name="instructionSteps">
        /// Instruction steps to enable the connector
        /// Serialized Name: CodelessUiConnectorConfigProperties.instructionSteps
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="title"/>, <paramref name="publisher"/>, <paramref name="descriptionMarkdown"/>, <paramref name="graphQueriesTableName"/>, <paramref name="graphQueries"/>, <paramref name="sampleQueries"/>, <paramref name="dataTypes"/>, <paramref name="connectivityCriteria"/>, <paramref name="availability"/>, <paramref name="permissions"/> or <paramref name="instructionSteps"/> is null. </exception>
        public CodelessUiConnectorConfigProperties(string title, string publisher, string descriptionMarkdown, string graphQueriesTableName, IEnumerable<CodelessUiConnectorConfigPropertiesGraphQueriesItem> graphQueries, IEnumerable<CodelessUiConnectorConfigPropertiesSampleQueriesItem> sampleQueries, IEnumerable<CodelessUiConnectorConfigPropertiesDataTypesItem> dataTypes, IEnumerable<CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem> connectivityCriteria, ConnectorAvailability availability, ConnectorPermissions permissions, IEnumerable<CodelessUiConnectorConfigPropertiesInstructionStepsItem> instructionSteps)
        {
            Argument.AssertNotNull(title, nameof(title));
            Argument.AssertNotNull(publisher, nameof(publisher));
            Argument.AssertNotNull(descriptionMarkdown, nameof(descriptionMarkdown));
            Argument.AssertNotNull(graphQueriesTableName, nameof(graphQueriesTableName));
            Argument.AssertNotNull(graphQueries, nameof(graphQueries));
            Argument.AssertNotNull(sampleQueries, nameof(sampleQueries));
            Argument.AssertNotNull(dataTypes, nameof(dataTypes));
            Argument.AssertNotNull(connectivityCriteria, nameof(connectivityCriteria));
            Argument.AssertNotNull(availability, nameof(availability));
            Argument.AssertNotNull(permissions, nameof(permissions));
            Argument.AssertNotNull(instructionSteps, nameof(instructionSteps));

            Title = title;
            Publisher = publisher;
            DescriptionMarkdown = descriptionMarkdown;
            GraphQueriesTableName = graphQueriesTableName;
            GraphQueries = graphQueries.ToList();
            SampleQueries = sampleQueries.ToList();
            DataTypes = dataTypes.ToList();
            ConnectivityCriteria = connectivityCriteria.ToList();
            Availability = availability;
            Permissions = permissions;
            InstructionSteps = instructionSteps.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="CodelessUiConnectorConfigProperties"/>. </summary>
        /// <param name="title">
        /// Connector blade title
        /// Serialized Name: CodelessUiConnectorConfigProperties.title
        /// </param>
        /// <param name="publisher">
        /// Connector publisher name
        /// Serialized Name: CodelessUiConnectorConfigProperties.publisher
        /// </param>
        /// <param name="descriptionMarkdown">
        /// Connector description
        /// Serialized Name: CodelessUiConnectorConfigProperties.descriptionMarkdown
        /// </param>
        /// <param name="customImage">
        /// An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
        /// Serialized Name: CodelessUiConnectorConfigProperties.customImage
        /// </param>
        /// <param name="graphQueriesTableName">
        /// Name of the table the connector will insert the data to
        /// Serialized Name: CodelessUiConnectorConfigProperties.graphQueriesTableName
        /// </param>
        /// <param name="graphQueries">
        /// The graph query to show the current data status
        /// Serialized Name: CodelessUiConnectorConfigProperties.graphQueries
        /// </param>
        /// <param name="sampleQueries">
        /// The sample queries for the connector
        /// Serialized Name: CodelessUiConnectorConfigProperties.sampleQueries
        /// </param>
        /// <param name="dataTypes">
        /// Data types to check for last data received
        /// Serialized Name: CodelessUiConnectorConfigProperties.dataTypes
        /// </param>
        /// <param name="connectivityCriteria">
        /// Define the way the connector check connectivity
        /// Serialized Name: CodelessUiConnectorConfigProperties.connectivityCriteria
        /// </param>
        /// <param name="availability">
        /// Connector Availability Status
        /// Serialized Name: CodelessUiConnectorConfigProperties.availability
        /// </param>
        /// <param name="permissions">
        /// Permissions required for the connector
        /// Serialized Name: CodelessUiConnectorConfigProperties.permissions
        /// </param>
        /// <param name="instructionSteps">
        /// Instruction steps to enable the connector
        /// Serialized Name: CodelessUiConnectorConfigProperties.instructionSteps
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CodelessUiConnectorConfigProperties(string title, string publisher, string descriptionMarkdown, string customImage, string graphQueriesTableName, IList<CodelessUiConnectorConfigPropertiesGraphQueriesItem> graphQueries, IList<CodelessUiConnectorConfigPropertiesSampleQueriesItem> sampleQueries, IList<CodelessUiConnectorConfigPropertiesDataTypesItem> dataTypes, IList<CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem> connectivityCriteria, ConnectorAvailability availability, ConnectorPermissions permissions, IList<CodelessUiConnectorConfigPropertiesInstructionStepsItem> instructionSteps, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Title = title;
            Publisher = publisher;
            DescriptionMarkdown = descriptionMarkdown;
            CustomImage = customImage;
            GraphQueriesTableName = graphQueriesTableName;
            GraphQueries = graphQueries;
            SampleQueries = sampleQueries;
            DataTypes = dataTypes;
            ConnectivityCriteria = connectivityCriteria;
            Availability = availability;
            Permissions = permissions;
            InstructionSteps = instructionSteps;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CodelessUiConnectorConfigProperties"/> for deserialization. </summary>
        internal CodelessUiConnectorConfigProperties()
        {
        }

        /// <summary>
        /// Connector blade title
        /// Serialized Name: CodelessUiConnectorConfigProperties.title
        /// </summary>
        public string Title { get; set; }
        /// <summary>
        /// Connector publisher name
        /// Serialized Name: CodelessUiConnectorConfigProperties.publisher
        /// </summary>
        public string Publisher { get; set; }
        /// <summary>
        /// Connector description
        /// Serialized Name: CodelessUiConnectorConfigProperties.descriptionMarkdown
        /// </summary>
        public string DescriptionMarkdown { get; set; }
        /// <summary>
        /// An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
        /// Serialized Name: CodelessUiConnectorConfigProperties.customImage
        /// </summary>
        public string CustomImage { get; set; }
        /// <summary>
        /// Name of the table the connector will insert the data to
        /// Serialized Name: CodelessUiConnectorConfigProperties.graphQueriesTableName
        /// </summary>
        public string GraphQueriesTableName { get; set; }
        /// <summary>
        /// The graph query to show the current data status
        /// Serialized Name: CodelessUiConnectorConfigProperties.graphQueries
        /// </summary>
        public IList<CodelessUiConnectorConfigPropertiesGraphQueriesItem> GraphQueries { get; }
        /// <summary>
        /// The sample queries for the connector
        /// Serialized Name: CodelessUiConnectorConfigProperties.sampleQueries
        /// </summary>
        public IList<CodelessUiConnectorConfigPropertiesSampleQueriesItem> SampleQueries { get; }
        /// <summary>
        /// Data types to check for last data received
        /// Serialized Name: CodelessUiConnectorConfigProperties.dataTypes
        /// </summary>
        public IList<CodelessUiConnectorConfigPropertiesDataTypesItem> DataTypes { get; }
        /// <summary>
        /// Define the way the connector check connectivity
        /// Serialized Name: CodelessUiConnectorConfigProperties.connectivityCriteria
        /// </summary>
        public IList<CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem> ConnectivityCriteria { get; }
        /// <summary>
        /// Connector Availability Status
        /// Serialized Name: CodelessUiConnectorConfigProperties.availability
        /// </summary>
        public ConnectorAvailability Availability { get; set; }
        /// <summary>
        /// Permissions required for the connector
        /// Serialized Name: CodelessUiConnectorConfigProperties.permissions
        /// </summary>
        public ConnectorPermissions Permissions { get; set; }
        /// <summary>
        /// Instruction steps to enable the connector
        /// Serialized Name: CodelessUiConnectorConfigProperties.instructionSteps
        /// </summary>
        public IList<CodelessUiConnectorConfigPropertiesInstructionStepsItem> InstructionSteps { get; }
    }
}
