// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> The type of the owner the incident is assigned to. </summary>
    public readonly partial struct OwnerType : IEquatable<OwnerType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OwnerType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OwnerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string UserValue = "User";
        private const string GroupValue = "Group";

        /// <summary> The incident owner type is unknown. </summary>
        public static OwnerType Unknown { get; } = new OwnerType(UnknownValue);
        /// <summary> The incident owner type is an AAD user. </summary>
        public static OwnerType User { get; } = new OwnerType(UserValue);
        /// <summary> The incident owner type is an AAD group. </summary>
        public static OwnerType Group { get; } = new OwnerType(GroupValue);
        /// <summary> Determines if two <see cref="OwnerType"/> values are the same. </summary>
        public static bool operator ==(OwnerType left, OwnerType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OwnerType"/> values are not the same. </summary>
        public static bool operator !=(OwnerType left, OwnerType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OwnerType"/>. </summary>
        public static implicit operator OwnerType(string value) => new OwnerType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OwnerType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OwnerType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
