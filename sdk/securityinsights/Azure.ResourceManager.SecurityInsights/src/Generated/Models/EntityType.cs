// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> The type of the entity. </summary>
    public readonly partial struct EntityType : IEquatable<EntityType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EntityType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EntityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AccountValue = "Account";
        private const string HostValue = "Host";
        private const string FileValue = "File";
        private const string AzureResourceValue = "AzureResource";
        private const string CloudApplicationValue = "CloudApplication";
        private const string DnsValue = "DNS";
        private const string FileHashValue = "FileHash";
        private const string IPValue = "IP";
        private const string MalwareValue = "Malware";
        private const string ProcessValue = "Process";
        private const string RegistryKeyValue = "RegistryKey";
        private const string RegistryValueValue = "RegistryValue";
        private const string SecurityGroupValue = "SecurityGroup";
        private const string URLValue = "URL";
        private const string IoTDeviceValue = "IoTDevice";
        private const string SecurityAlertValue = "SecurityAlert";
        private const string HuntingBookmarkValue = "HuntingBookmark";
        private const string MailClusterValue = "MailCluster";
        private const string MailMessageValue = "MailMessage";
        private const string MailboxValue = "Mailbox";
        private const string SubmissionMailValue = "SubmissionMail";
        private const string NicValue = "Nic";

        /// <summary> Entity represents account in the system. </summary>
        public static EntityType Account { get; } = new EntityType(AccountValue);
        /// <summary> Entity represents host in the system. </summary>
        public static EntityType Host { get; } = new EntityType(HostValue);
        /// <summary> Entity represents file in the system. </summary>
        public static EntityType File { get; } = new EntityType(FileValue);
        /// <summary> Entity represents azure resource in the system. </summary>
        public static EntityType AzureResource { get; } = new EntityType(AzureResourceValue);
        /// <summary> Entity represents cloud application in the system. </summary>
        public static EntityType CloudApplication { get; } = new EntityType(CloudApplicationValue);
        /// <summary> Entity represents dns in the system. </summary>
        public static EntityType Dns { get; } = new EntityType(DnsValue);
        /// <summary> Entity represents file hash in the system. </summary>
        public static EntityType FileHash { get; } = new EntityType(FileHashValue);
        /// <summary> Entity represents ip in the system. </summary>
        public static EntityType IP { get; } = new EntityType(IPValue);
        /// <summary> Entity represents malware in the system. </summary>
        public static EntityType Malware { get; } = new EntityType(MalwareValue);
        /// <summary> Entity represents process in the system. </summary>
        public static EntityType Process { get; } = new EntityType(ProcessValue);
        /// <summary> Entity represents registry key in the system. </summary>
        public static EntityType RegistryKey { get; } = new EntityType(RegistryKeyValue);
        /// <summary> Entity represents registry value in the system. </summary>
        public static EntityType RegistryValue { get; } = new EntityType(RegistryValueValue);
        /// <summary> Entity represents security group in the system. </summary>
        public static EntityType SecurityGroup { get; } = new EntityType(SecurityGroupValue);
        /// <summary> Entity represents url in the system. </summary>
        public static EntityType URL { get; } = new EntityType(URLValue);
        /// <summary> Entity represents IoT device in the system. </summary>
        public static EntityType IoTDevice { get; } = new EntityType(IoTDeviceValue);
        /// <summary> Entity represents security alert in the system. </summary>
        public static EntityType SecurityAlert { get; } = new EntityType(SecurityAlertValue);
        /// <summary> Entity represents HuntingBookmark in the system. </summary>
        public static EntityType HuntingBookmark { get; } = new EntityType(HuntingBookmarkValue);
        /// <summary> Entity represents mail cluster in the system. </summary>
        public static EntityType MailCluster { get; } = new EntityType(MailClusterValue);
        /// <summary> Entity represents mail message in the system. </summary>
        public static EntityType MailMessage { get; } = new EntityType(MailMessageValue);
        /// <summary> Entity represents mailbox in the system. </summary>
        public static EntityType Mailbox { get; } = new EntityType(MailboxValue);
        /// <summary> Entity represents submission mail in the system. </summary>
        public static EntityType SubmissionMail { get; } = new EntityType(SubmissionMailValue);
        /// <summary> Entity represents network interface in the system. </summary>
        public static EntityType Nic { get; } = new EntityType(NicValue);
        /// <summary> Determines if two <see cref="EntityType"/> values are the same. </summary>
        public static bool operator ==(EntityType left, EntityType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EntityType"/> values are not the same. </summary>
        public static bool operator !=(EntityType left, EntityType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EntityType"/>. </summary>
        public static implicit operator EntityType(string value) => new EntityType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EntityType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EntityType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
