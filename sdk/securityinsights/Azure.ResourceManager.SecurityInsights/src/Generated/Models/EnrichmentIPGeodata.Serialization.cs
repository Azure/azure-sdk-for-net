// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class EnrichmentIPGeodata
    {
        internal static EnrichmentIPGeodata DeserializeEnrichmentIPGeodata(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> asn = default;
            Optional<string> carrier = default;
            Optional<string> city = default;
            Optional<int> cityCf = default;
            Optional<string> continent = default;
            Optional<string> country = default;
            Optional<int> countryCf = default;
            Optional<string> ipAddr = default;
            Optional<string> ipRoutingType = default;
            Optional<string> latitude = default;
            Optional<string> longitude = default;
            Optional<string> organization = default;
            Optional<string> organizationType = default;
            Optional<string> region = default;
            Optional<string> state = default;
            Optional<int> stateCf = default;
            Optional<string> stateCode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("asn"u8))
                {
                    asn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("carrier"u8))
                {
                    carrier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("city"u8))
                {
                    city = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cityCf"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cityCf = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("continent"u8))
                {
                    continent = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("country"u8))
                {
                    country = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryCf"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    countryCf = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ipAddr"u8))
                {
                    ipAddr = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipRoutingType"u8))
                {
                    ipRoutingType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("latitude"u8))
                {
                    latitude = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("longitude"u8))
                {
                    longitude = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organization"u8))
                {
                    organization = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organizationType"u8))
                {
                    organizationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("region"u8))
                {
                    region = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    state = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stateCf"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stateCf = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("stateCode"u8))
                {
                    stateCode = property.Value.GetString();
                    continue;
                }
            }
            return new EnrichmentIPGeodata(asn.Value, carrier.Value, city.Value, Optional.ToNullable(cityCf), continent.Value, country.Value, Optional.ToNullable(countryCf), ipAddr.Value, ipRoutingType.Value, latitude.Value, longitude.Value, organization.Value, organizationType.Value, region.Value, state.Value, Optional.ToNullable(stateCf), stateCode.Value);
        }
    }
}
