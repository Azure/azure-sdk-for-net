// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class InsightQueryItemProperties : IUtf8JsonSerializable, IJsonModel<InsightQueryItemProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<InsightQueryItemProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<InsightQueryItemProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InsightQueryItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InsightQueryItemProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(BaseQuery))
            {
                writer.WritePropertyName("baseQuery"u8);
                writer.WriteStringValue(BaseQuery);
            }
            if (Optional.IsDefined(TableQuery))
            {
                writer.WritePropertyName("tableQuery"u8);
                writer.WriteObjectValue(TableQuery, options);
            }
            if (Optional.IsDefined(ChartQuery))
            {
                writer.WritePropertyName("chartQuery"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(ChartQuery);
#else
                using (JsonDocument document = JsonDocument.Parse(ChartQuery))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(AdditionalQuery))
            {
                writer.WritePropertyName("additionalQuery"u8);
                writer.WriteObjectValue(AdditionalQuery, options);
            }
            if (Optional.IsDefined(DefaultTimeRange))
            {
                writer.WritePropertyName("defaultTimeRange"u8);
                writer.WriteObjectValue(DefaultTimeRange, options);
            }
            if (Optional.IsDefined(ReferenceTimeRange))
            {
                writer.WritePropertyName("referenceTimeRange"u8);
                writer.WriteObjectValue(ReferenceTimeRange, options);
            }
            if (Optional.IsCollectionDefined(DataTypes))
            {
                writer.WritePropertyName("dataTypes"u8);
                writer.WriteStartArray();
                foreach (var item in DataTypes)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(InputEntityType))
            {
                writer.WritePropertyName("inputEntityType"u8);
                writer.WriteStringValue(InputEntityType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(RequiredInputFieldsSets))
            {
                writer.WritePropertyName("requiredInputFieldsSets"u8);
                writer.WriteStartArray();
                foreach (var item in RequiredInputFieldsSets)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStartArray();
                    foreach (var item0 in item)
                    {
                        writer.WriteStringValue(item0);
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(EntitiesFilter))
            {
                writer.WritePropertyName("entitiesFilter"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(EntitiesFilter);
#else
                using (JsonDocument document = JsonDocument.Parse(EntitiesFilter))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        InsightQueryItemProperties IJsonModel<InsightQueryItemProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InsightQueryItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InsightQueryItemProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInsightQueryItemProperties(document.RootElement, options);
        }

        internal static InsightQueryItemProperties DeserializeInsightQueryItemProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string displayName = default;
            string description = default;
            string baseQuery = default;
            InsightQueryItemPropertiesTableQuery tableQuery = default;
            BinaryData chartQuery = default;
            InsightQueryItemPropertiesAdditionalQuery additionalQuery = default;
            InsightQueryItemPropertiesDefaultTimeRange defaultTimeRange = default;
            InsightQueryItemPropertiesReferenceTimeRange referenceTimeRange = default;
            IReadOnlyList<EntityQueryItemPropertiesDataTypesItem> dataTypes = default;
            EntityType? inputEntityType = default;
            IReadOnlyList<IList<string>> requiredInputFieldsSets = default;
            BinaryData entitiesFilter = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("baseQuery"u8))
                {
                    baseQuery = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tableQuery"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tableQuery = InsightQueryItemPropertiesTableQuery.DeserializeInsightQueryItemPropertiesTableQuery(property.Value, options);
                    continue;
                }
                if (property.NameEquals("chartQuery"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    chartQuery = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("additionalQuery"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    additionalQuery = InsightQueryItemPropertiesAdditionalQuery.DeserializeInsightQueryItemPropertiesAdditionalQuery(property.Value, options);
                    continue;
                }
                if (property.NameEquals("defaultTimeRange"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultTimeRange = InsightQueryItemPropertiesDefaultTimeRange.DeserializeInsightQueryItemPropertiesDefaultTimeRange(property.Value, options);
                    continue;
                }
                if (property.NameEquals("referenceTimeRange"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    referenceTimeRange = InsightQueryItemPropertiesReferenceTimeRange.DeserializeInsightQueryItemPropertiesReferenceTimeRange(property.Value, options);
                    continue;
                }
                if (property.NameEquals("dataTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EntityQueryItemPropertiesDataTypesItem> array = new List<EntityQueryItemPropertiesDataTypesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EntityQueryItemPropertiesDataTypesItem.DeserializeEntityQueryItemPropertiesDataTypesItem(item, options));
                    }
                    dataTypes = array;
                    continue;
                }
                if (property.NameEquals("inputEntityType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputEntityType = new EntityType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("requiredInputFieldsSets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IList<string>> array = new List<IList<string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            List<string> array0 = new List<string>();
                            foreach (var item0 in item.EnumerateArray())
                            {
                                array0.Add(item0.GetString());
                            }
                            array.Add(array0);
                        }
                    }
                    requiredInputFieldsSets = array;
                    continue;
                }
                if (property.NameEquals("entitiesFilter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    entitiesFilter = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new InsightQueryItemProperties(
                dataTypes ?? new ChangeTrackingList<EntityQueryItemPropertiesDataTypesItem>(),
                inputEntityType,
                requiredInputFieldsSets ?? new ChangeTrackingList<IList<string>>(),
                entitiesFilter,
                serializedAdditionalRawData,
                displayName,
                description,
                baseQuery,
                tableQuery,
                chartQuery,
                additionalQuery,
                defaultTimeRange,
                referenceTimeRange);
        }

        BinaryData IPersistableModel<InsightQueryItemProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InsightQueryItemProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(InsightQueryItemProperties)} does not support writing '{options.Format}' format.");
            }
        }

        InsightQueryItemProperties IPersistableModel<InsightQueryItemProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InsightQueryItemProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeInsightQueryItemProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InsightQueryItemProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InsightQueryItemProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
