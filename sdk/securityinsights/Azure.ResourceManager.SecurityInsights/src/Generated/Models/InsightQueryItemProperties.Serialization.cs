// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class InsightQueryItemProperties
    {
        internal static InsightQueryItemProperties DeserializeInsightQueryItemProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> displayName = default;
            Optional<string> description = default;
            Optional<string> baseQuery = default;
            Optional<InsightQueryItemPropertiesTableQuery> tableQuery = default;
            Optional<BinaryData> chartQuery = default;
            Optional<InsightQueryItemPropertiesAdditionalQuery> additionalQuery = default;
            Optional<InsightQueryItemPropertiesDefaultTimeRange> defaultTimeRange = default;
            Optional<InsightQueryItemPropertiesReferenceTimeRange> referenceTimeRange = default;
            Optional<IReadOnlyList<EntityQueryItemPropertiesDataTypesItem>> dataTypes = default;
            Optional<EntityType> inputEntityType = default;
            Optional<IReadOnlyList<IList<string>>> requiredInputFieldsSets = default;
            Optional<BinaryData> entitiesFilter = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("baseQuery"u8))
                {
                    baseQuery = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tableQuery"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tableQuery = InsightQueryItemPropertiesTableQuery.DeserializeInsightQueryItemPropertiesTableQuery(property.Value);
                    continue;
                }
                if (property.NameEquals("chartQuery"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    chartQuery = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("additionalQuery"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    additionalQuery = InsightQueryItemPropertiesAdditionalQuery.DeserializeInsightQueryItemPropertiesAdditionalQuery(property.Value);
                    continue;
                }
                if (property.NameEquals("defaultTimeRange"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultTimeRange = InsightQueryItemPropertiesDefaultTimeRange.DeserializeInsightQueryItemPropertiesDefaultTimeRange(property.Value);
                    continue;
                }
                if (property.NameEquals("referenceTimeRange"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    referenceTimeRange = InsightQueryItemPropertiesReferenceTimeRange.DeserializeInsightQueryItemPropertiesReferenceTimeRange(property.Value);
                    continue;
                }
                if (property.NameEquals("dataTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EntityQueryItemPropertiesDataTypesItem> array = new List<EntityQueryItemPropertiesDataTypesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EntityQueryItemPropertiesDataTypesItem.DeserializeEntityQueryItemPropertiesDataTypesItem(item));
                    }
                    dataTypes = array;
                    continue;
                }
                if (property.NameEquals("inputEntityType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputEntityType = new EntityType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("requiredInputFieldsSets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IList<string>> array = new List<IList<string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            List<string> array0 = new List<string>();
                            foreach (var item0 in item.EnumerateArray())
                            {
                                array0.Add(item0.GetString());
                            }
                            array.Add(array0);
                        }
                    }
                    requiredInputFieldsSets = array;
                    continue;
                }
                if (property.NameEquals("entitiesFilter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    entitiesFilter = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
            }
            return new InsightQueryItemProperties(Optional.ToList(dataTypes), Optional.ToNullable(inputEntityType), Optional.ToList(requiredInputFieldsSets), entitiesFilter.Value, displayName.Value, description.Value, baseQuery.Value, tableQuery.Value, chartQuery.Value, additionalQuery.Value, defaultTimeRange.Value, referenceTimeRange.Value);
        }
    }
}
