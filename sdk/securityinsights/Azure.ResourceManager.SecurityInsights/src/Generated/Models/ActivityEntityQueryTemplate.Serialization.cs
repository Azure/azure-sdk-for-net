// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class ActivityEntityQueryTemplate : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind.ToString());
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title");
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Content))
            {
                writer.WritePropertyName("content");
                writer.WriteStringValue(Content);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(QueryDefinitions))
            {
                writer.WritePropertyName("queryDefinitions");
                writer.WriteObjectValue(QueryDefinitions);
            }
            if (Optional.IsCollectionDefined(DataTypes))
            {
                writer.WritePropertyName("dataTypes");
                writer.WriteStartArray();
                foreach (var item in DataTypes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(InputEntityType))
            {
                writer.WritePropertyName("inputEntityType");
                writer.WriteStringValue(InputEntityType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(RequiredInputFieldsSets))
            {
                writer.WritePropertyName("requiredInputFieldsSets");
                writer.WriteStartArray();
                foreach (var item in RequiredInputFieldsSets)
                {
                    writer.WriteStartArray();
                    foreach (var item0 in item)
                    {
                        writer.WriteStringValue(item0);
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EntitiesFilter))
            {
                writer.WritePropertyName("entitiesFilter");
                writer.WriteStartObject();
                foreach (var item in EntitiesFilter)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStartArray();
                    foreach (var item0 in item.Value)
                    {
                        writer.WriteStringValue(item0);
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ActivityEntityQueryTemplate DeserializeActivityEntityQueryTemplate(JsonElement element)
        {
            EntityQueryTemplateKind kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> title = default;
            Optional<string> content = default;
            Optional<string> description = default;
            Optional<ActivityEntityQueryTemplatePropertiesQueryDefinitions> queryDefinitions = default;
            Optional<IList<DataTypeDefinitions>> dataTypes = default;
            Optional<EntityType> inputEntityType = default;
            Optional<IList<IList<string>>> requiredInputFieldsSets = default;
            Optional<IDictionary<string, IList<string>>> entitiesFilter = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = new EntityQueryTemplateKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("title"))
                        {
                            title = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("content"))
                        {
                            content = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("queryDefinitions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            queryDefinitions = ActivityEntityQueryTemplatePropertiesQueryDefinitions.DeserializeActivityEntityQueryTemplatePropertiesQueryDefinitions(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("dataTypes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<DataTypeDefinitions> array = new List<DataTypeDefinitions>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(DataTypeDefinitions.DeserializeDataTypeDefinitions(item));
                            }
                            dataTypes = array;
                            continue;
                        }
                        if (property0.NameEquals("inputEntityType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            inputEntityType = new EntityType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("requiredInputFieldsSets"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<IList<string>> array = new List<IList<string>>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                List<string> array0 = new List<string>();
                                foreach (var item0 in item.EnumerateArray())
                                {
                                    array0.Add(item0.GetString());
                                }
                                array.Add(array0);
                            }
                            requiredInputFieldsSets = array;
                            continue;
                        }
                        if (property0.NameEquals("entitiesFilter"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            Dictionary<string, IList<string>> dictionary = new Dictionary<string, IList<string>>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                List<string> array = new List<string>();
                                foreach (var item in property1.Value.EnumerateArray())
                                {
                                    array.Add(item.GetString());
                                }
                                dictionary.Add(property1.Name, array);
                            }
                            entitiesFilter = dictionary;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ActivityEntityQueryTemplate(id, name, type, systemData.Value, kind, title.Value, content.Value, description.Value, queryDefinitions.Value, Optional.ToList(dataTypes), Optional.ToNullable(inputEntityType), Optional.ToList(requiredInputFieldsSets), Optional.ToDictionary(entitiesFilter));
        }
    }
}
