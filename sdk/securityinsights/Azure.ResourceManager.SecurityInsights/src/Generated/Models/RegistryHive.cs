// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> the hive that holds the registry key. </summary>
    public readonly partial struct RegistryHive : IEquatable<RegistryHive>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RegistryHive"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RegistryHive(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HkeyLocalMachineValue = "HKEY_LOCAL_MACHINE";
        private const string HkeyClassesRootValue = "HKEY_CLASSES_ROOT";
        private const string HkeyCurrentConfigValue = "HKEY_CURRENT_CONFIG";
        private const string HkeyUsersValue = "HKEY_USERS";
        private const string HkeyCurrentUserLocalSettingsValue = "HKEY_CURRENT_USER_LOCAL_SETTINGS";
        private const string HkeyPerformanceDataValue = "HKEY_PERFORMANCE_DATA";
        private const string HkeyPerformanceNlstextValue = "HKEY_PERFORMANCE_NLSTEXT";
        private const string HkeyPerformanceTextValue = "HKEY_PERFORMANCE_TEXT";
        private const string HkeyAValue = "HKEY_A";
        private const string HkeyCurrentUserValue = "HKEY_CURRENT_USER";

        /// <summary> HKEY_LOCAL_MACHINE. </summary>
        public static RegistryHive HkeyLocalMachine { get; } = new RegistryHive(HkeyLocalMachineValue);
        /// <summary> HKEY_CLASSES_ROOT. </summary>
        public static RegistryHive HkeyClassesRoot { get; } = new RegistryHive(HkeyClassesRootValue);
        /// <summary> HKEY_CURRENT_CONFIG. </summary>
        public static RegistryHive HkeyCurrentConfig { get; } = new RegistryHive(HkeyCurrentConfigValue);
        /// <summary> HKEY_USERS. </summary>
        public static RegistryHive HkeyUsers { get; } = new RegistryHive(HkeyUsersValue);
        /// <summary> HKEY_CURRENT_USER_LOCAL_SETTINGS. </summary>
        public static RegistryHive HkeyCurrentUserLocalSettings { get; } = new RegistryHive(HkeyCurrentUserLocalSettingsValue);
        /// <summary> HKEY_PERFORMANCE_DATA. </summary>
        public static RegistryHive HkeyPerformanceData { get; } = new RegistryHive(HkeyPerformanceDataValue);
        /// <summary> HKEY_PERFORMANCE_NLSTEXT. </summary>
        public static RegistryHive HkeyPerformanceNlstext { get; } = new RegistryHive(HkeyPerformanceNlstextValue);
        /// <summary> HKEY_PERFORMANCE_TEXT. </summary>
        public static RegistryHive HkeyPerformanceText { get; } = new RegistryHive(HkeyPerformanceTextValue);
        /// <summary> HKEY_A. </summary>
        public static RegistryHive HkeyA { get; } = new RegistryHive(HkeyAValue);
        /// <summary> HKEY_CURRENT_USER. </summary>
        public static RegistryHive HkeyCurrentUser { get; } = new RegistryHive(HkeyCurrentUserValue);
        /// <summary> Determines if two <see cref="RegistryHive"/> values are the same. </summary>
        public static bool operator ==(RegistryHive left, RegistryHive right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RegistryHive"/> values are not the same. </summary>
        public static bool operator !=(RegistryHive left, RegistryHive right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RegistryHive"/>. </summary>
        public static implicit operator RegistryHive(string value) => new RegistryHive(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RegistryHive other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RegistryHive other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
