// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> The HTTP method, default value GET. </summary>
    public readonly partial struct HttpMethodVerb : IEquatable<HttpMethodVerb>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HttpMethodVerb"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HttpMethodVerb(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GETValue = "GET";
        private const string PostValue = "POST";
        private const string PUTValue = "PUT";
        private const string DeleteValue = "DELETE";

        /// <summary> GET. </summary>
        public static HttpMethodVerb GET { get; } = new HttpMethodVerb(GETValue);
        /// <summary> POST. </summary>
        public static HttpMethodVerb Post { get; } = new HttpMethodVerb(PostValue);
        /// <summary> PUT. </summary>
        public static HttpMethodVerb PUT { get; } = new HttpMethodVerb(PUTValue);
        /// <summary> DELETE. </summary>
        public static HttpMethodVerb Delete { get; } = new HttpMethodVerb(DeleteValue);
        /// <summary> Determines if two <see cref="HttpMethodVerb"/> values are the same. </summary>
        public static bool operator ==(HttpMethodVerb left, HttpMethodVerb right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HttpMethodVerb"/> values are not the same. </summary>
        public static bool operator !=(HttpMethodVerb left, HttpMethodVerb right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HttpMethodVerb"/>. </summary>
        public static implicit operator HttpMethodVerb(string value) => new HttpMethodVerb(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HttpMethodVerb other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HttpMethodVerb other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
