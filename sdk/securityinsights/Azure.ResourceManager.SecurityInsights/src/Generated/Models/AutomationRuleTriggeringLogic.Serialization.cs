// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class AutomationRuleTriggeringLogic : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("isEnabled");
            writer.WriteBooleanValue(IsEnabled);
            if (Optional.IsDefined(ExpirationTimeUtc))
            {
                writer.WritePropertyName("expirationTimeUtc");
                writer.WriteStringValue(ExpirationTimeUtc.Value, "O");
            }
            writer.WritePropertyName("triggersOn");
            writer.WriteStringValue(TriggersOn.ToString());
            writer.WritePropertyName("triggersWhen");
            writer.WriteStringValue(TriggersWhen.ToString());
            if (Optional.IsCollectionDefined(Conditions))
            {
                writer.WritePropertyName("conditions");
                writer.WriteStartArray();
                foreach (var item in Conditions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AutomationRuleTriggeringLogic DeserializeAutomationRuleTriggeringLogic(JsonElement element)
        {
            bool isEnabled = default;
            Optional<DateTimeOffset> expirationTimeUtc = default;
            TriggersOn triggersOn = default;
            TriggersWhen triggersWhen = default;
            Optional<IList<AutomationRuleCondition>> conditions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("isEnabled"))
                {
                    isEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("expirationTimeUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    expirationTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("triggersOn"))
                {
                    triggersOn = new TriggersOn(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("triggersWhen"))
                {
                    triggersWhen = new TriggersWhen(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("conditions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AutomationRuleCondition> array = new List<AutomationRuleCondition>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AutomationRuleCondition.DeserializeAutomationRuleCondition(item));
                    }
                    conditions = array;
                    continue;
                }
            }
            return new AutomationRuleTriggeringLogic(isEnabled, Optional.ToNullable(expirationTimeUtc), triggersOn, triggersWhen, Optional.ToList(conditions));
        }
    }
}
