// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class IncidentAdditionalData
    {
        internal static IncidentAdditionalData DeserializeIncidentAdditionalData(JsonElement element)
        {
            Optional<int> alertsCount = default;
            Optional<int> bookmarksCount = default;
            Optional<int> commentsCount = default;
            Optional<IReadOnlyList<string>> alertProductNames = default;
            Optional<Uri> providerIncidentUrl = default;
            Optional<IReadOnlyList<AttackTactic>> tactics = default;
            Optional<IReadOnlyList<string>> techniques = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("alertsCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    alertsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("bookmarksCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    bookmarksCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("commentsCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    commentsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("alertProductNames"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    alertProductNames = array;
                    continue;
                }
                if (property.NameEquals("providerIncidentUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        providerIncidentUrl = null;
                        continue;
                    }
                    providerIncidentUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tactics"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AttackTactic> array = new List<AttackTactic>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AttackTactic(item.GetString()));
                    }
                    tactics = array;
                    continue;
                }
                if (property.NameEquals("techniques"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    techniques = array;
                    continue;
                }
            }
            return new IncidentAdditionalData(Optional.ToNullable(alertsCount), Optional.ToNullable(bookmarksCount), Optional.ToNullable(commentsCount), Optional.ToList(alertProductNames), providerIncidentUrl.Value, Optional.ToList(tactics), Optional.ToList(techniques));
        }
    }
}
