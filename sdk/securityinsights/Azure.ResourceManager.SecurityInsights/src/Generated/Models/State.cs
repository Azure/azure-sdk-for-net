// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> State of recommendation. </summary>
    public readonly partial struct State : IEquatable<State>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="State"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string DisabledValue = "Disabled";
        private const string CompletedByUserValue = "CompletedByUser";
        private const string CompletedByActionValue = "CompletedByAction";
        private const string HiddenValue = "Hidden";

        /// <summary> Recommendation is active. </summary>
        public static State Active { get; } = new State(ActiveValue);
        /// <summary> Recommendation is disabled. </summary>
        public static State Disabled { get; } = new State(DisabledValue);
        /// <summary> Recommendation has been completed by user. </summary>
        public static State CompletedByUser { get; } = new State(CompletedByUserValue);
        /// <summary> Recommendation has been completed by action. </summary>
        public static State CompletedByAction { get; } = new State(CompletedByActionValue);
        /// <summary> Recommendation is hidden. </summary>
        public static State Hidden { get; } = new State(HiddenValue);
        /// <summary> Determines if two <see cref="State"/> values are the same. </summary>
        public static bool operator ==(State left, State right) => left.Equals(right);
        /// <summary> Determines if two <see cref="State"/> values are not the same. </summary>
        public static bool operator !=(State left, State right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="State"/>. </summary>
        public static implicit operator State(string value) => new State(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is State other && Equals(other);
        /// <inheritdoc />
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
