// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary>
    /// The type of repository.
    /// Serialized Name: RepoType
    /// </summary>
    public readonly partial struct RepoType : IEquatable<RepoType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RepoType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RepoType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GithubValue = "Github";
        private const string AzureDevOpsValue = "AzureDevOps";

        /// <summary>
        /// Github
        /// Serialized Name: RepoType.Github
        /// </summary>
        public static RepoType Github { get; } = new RepoType(GithubValue);
        /// <summary>
        /// AzureDevOps
        /// Serialized Name: RepoType.AzureDevOps
        /// </summary>
        public static RepoType AzureDevOps { get; } = new RepoType(AzureDevOpsValue);
        /// <summary> Determines if two <see cref="RepoType"/> values are the same. </summary>
        public static bool operator ==(RepoType left, RepoType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RepoType"/> values are not the same. </summary>
        public static bool operator !=(RepoType left, RepoType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RepoType"/>. </summary>
        public static implicit operator RepoType(string value) => new RepoType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RepoType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RepoType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
