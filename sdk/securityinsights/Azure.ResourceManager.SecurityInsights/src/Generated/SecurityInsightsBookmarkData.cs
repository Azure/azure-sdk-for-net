// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class representing the SecurityInsightsBookmark data model.
    /// Represents a bookmark in Azure Security Insights.
    /// Serialized Name: Bookmark
    /// </summary>
    public partial class SecurityInsightsBookmarkData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SecurityInsightsBookmarkData"/>. </summary>
        public SecurityInsightsBookmarkData()
        {
            Labels = new ChangeTrackingList<string>();
            EntityMappings = new ChangeTrackingList<BookmarkEntityMappings>();
            Tactics = new ChangeTrackingList<SecurityInsightsAttackTactic>();
            Techniques = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="SecurityInsightsBookmarkData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="createdOn">
        /// The time the bookmark was created
        /// Serialized Name: Bookmark.properties.created
        /// </param>
        /// <param name="createdBy">
        /// Describes a user that created the bookmark
        /// Serialized Name: Bookmark.properties.createdBy
        /// </param>
        /// <param name="displayName">
        /// The display name of the bookmark
        /// Serialized Name: Bookmark.properties.displayName
        /// </param>
        /// <param name="labels">
        /// List of labels relevant to this bookmark
        /// Serialized Name: Bookmark.properties.labels
        /// </param>
        /// <param name="notes">
        /// The notes of the bookmark
        /// Serialized Name: Bookmark.properties.notes
        /// </param>
        /// <param name="query">
        /// The query of the bookmark.
        /// Serialized Name: Bookmark.properties.query
        /// </param>
        /// <param name="queryResult">
        /// The query result of the bookmark.
        /// Serialized Name: Bookmark.properties.queryResult
        /// </param>
        /// <param name="updatedOn">
        /// The last time the bookmark was updated
        /// Serialized Name: Bookmark.properties.updated
        /// </param>
        /// <param name="updatedBy">
        /// Describes a user that updated the bookmark
        /// Serialized Name: Bookmark.properties.updatedBy
        /// </param>
        /// <param name="eventOn">
        /// The bookmark event time
        /// Serialized Name: Bookmark.properties.eventTime
        /// </param>
        /// <param name="queryStartOn">
        /// The start time for the query
        /// Serialized Name: Bookmark.properties.queryStartTime
        /// </param>
        /// <param name="queryEndOn">
        /// The end time for the query
        /// Serialized Name: Bookmark.properties.queryEndTime
        /// </param>
        /// <param name="incidentInfo">
        /// Describes an incident that relates to bookmark
        /// Serialized Name: Bookmark.properties.incidentInfo
        /// </param>
        /// <param name="entityMappings">
        /// Describes the entity mappings of the bookmark
        /// Serialized Name: Bookmark.properties.entityMappings
        /// </param>
        /// <param name="tactics">
        /// A list of relevant mitre attacks
        /// Serialized Name: Bookmark.properties.tactics
        /// </param>
        /// <param name="techniques">
        /// A list of relevant mitre techniques
        /// Serialized Name: Bookmark.properties.techniques
        /// </param>
        /// <param name="etag">
        /// Etag of the azure resource
        /// Serialized Name: ResourceWithEtag.etag
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SecurityInsightsBookmarkData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, DateTimeOffset? createdOn, SecurityInsightsUserInfo createdBy, string displayName, IList<string> labels, string notes, string query, string queryResult, DateTimeOffset? updatedOn, SecurityInsightsUserInfo updatedBy, DateTimeOffset? eventOn, DateTimeOffset? queryStartOn, DateTimeOffset? queryEndOn, SecurityInsightsBookmarkIncidentInfo incidentInfo, IList<BookmarkEntityMappings> entityMappings, IList<SecurityInsightsAttackTactic> tactics, IList<string> techniques, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            CreatedOn = createdOn;
            CreatedBy = createdBy;
            DisplayName = displayName;
            Labels = labels;
            Notes = notes;
            Query = query;
            QueryResult = queryResult;
            UpdatedOn = updatedOn;
            UpdatedBy = updatedBy;
            EventOn = eventOn;
            QueryStartOn = queryStartOn;
            QueryEndOn = queryEndOn;
            IncidentInfo = incidentInfo;
            EntityMappings = entityMappings;
            Tactics = tactics;
            Techniques = techniques;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// The time the bookmark was created
        /// Serialized Name: Bookmark.properties.created
        /// </summary>
        public DateTimeOffset? CreatedOn { get; set; }
        /// <summary>
        /// Describes a user that created the bookmark
        /// Serialized Name: Bookmark.properties.createdBy
        /// </summary>
        public SecurityInsightsUserInfo CreatedBy { get; set; }
        /// <summary>
        /// The display name of the bookmark
        /// Serialized Name: Bookmark.properties.displayName
        /// </summary>
        public string DisplayName { get; set; }
        /// <summary>
        /// List of labels relevant to this bookmark
        /// Serialized Name: Bookmark.properties.labels
        /// </summary>
        public IList<string> Labels { get; }
        /// <summary>
        /// The notes of the bookmark
        /// Serialized Name: Bookmark.properties.notes
        /// </summary>
        public string Notes { get; set; }
        /// <summary>
        /// The query of the bookmark.
        /// Serialized Name: Bookmark.properties.query
        /// </summary>
        public string Query { get; set; }
        /// <summary>
        /// The query result of the bookmark.
        /// Serialized Name: Bookmark.properties.queryResult
        /// </summary>
        public string QueryResult { get; set; }
        /// <summary>
        /// The last time the bookmark was updated
        /// Serialized Name: Bookmark.properties.updated
        /// </summary>
        public DateTimeOffset? UpdatedOn { get; set; }
        /// <summary>
        /// Describes a user that updated the bookmark
        /// Serialized Name: Bookmark.properties.updatedBy
        /// </summary>
        public SecurityInsightsUserInfo UpdatedBy { get; set; }
        /// <summary>
        /// The bookmark event time
        /// Serialized Name: Bookmark.properties.eventTime
        /// </summary>
        public DateTimeOffset? EventOn { get; set; }
        /// <summary>
        /// The start time for the query
        /// Serialized Name: Bookmark.properties.queryStartTime
        /// </summary>
        public DateTimeOffset? QueryStartOn { get; set; }
        /// <summary>
        /// The end time for the query
        /// Serialized Name: Bookmark.properties.queryEndTime
        /// </summary>
        public DateTimeOffset? QueryEndOn { get; set; }
        /// <summary>
        /// Describes an incident that relates to bookmark
        /// Serialized Name: Bookmark.properties.incidentInfo
        /// </summary>
        public SecurityInsightsBookmarkIncidentInfo IncidentInfo { get; set; }
        /// <summary>
        /// Describes the entity mappings of the bookmark
        /// Serialized Name: Bookmark.properties.entityMappings
        /// </summary>
        public IList<BookmarkEntityMappings> EntityMappings { get; }
        /// <summary>
        /// A list of relevant mitre attacks
        /// Serialized Name: Bookmark.properties.tactics
        /// </summary>
        public IList<SecurityInsightsAttackTactic> Tactics { get; }
        /// <summary>
        /// A list of relevant mitre techniques
        /// Serialized Name: Bookmark.properties.techniques
        /// </summary>
        public IList<string> Techniques { get; }
        /// <summary>
        /// Etag of the azure resource
        /// Serialized Name: ResourceWithEtag.etag
        /// </summary>
        public ETag? ETag { get; set; }
    }
}
