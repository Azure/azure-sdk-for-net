// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class extending from the OperationalInsightsWorkspaceResource in Azure.ResourceManager.SecurityInsights along with the instance operations that can be performed on it.
    /// You can only construct an <see cref="OperationalInsightsWorkspaceSecurityInsightsResource" /> from a <see cref="ResourceIdentifier" /> with a resource type of Microsoft.OperationalInsights/workspaces.
    /// </summary>
    public partial class OperationalInsightsWorkspaceSecurityInsightsResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="OperationalInsightsWorkspaceSecurityInsightsResource"/> instance. </summary>
        internal static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string workspaceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _getRecommendationsClientDiagnostics;
        private readonly GetRecommendationsRestOperations _getRecommendationsRestClient;
        private readonly ClientDiagnostics _getClientDiagnostics;
        private readonly GetRestOperations _getRestClient;
        private readonly ClientDiagnostics _updateClientDiagnostics;
        private readonly UpdateRestOperations _updateRestClient;
        private readonly ClientDiagnostics _sourceControlClientDiagnostics;
        private readonly SourceControlRestOperations _sourceControlRestClient;
        private readonly ClientDiagnostics _threatIntelligenceIndicatorClientDiagnostics;
        private readonly ThreatIntelligenceIndicatorRestOperations _threatIntelligenceIndicatorRestClient;
        private readonly ClientDiagnostics _threatIntelligenceIndicatorMetricsClientDiagnostics;
        private readonly ThreatIntelligenceIndicatorMetricsRestOperations _threatIntelligenceIndicatorMetricsRestClient;
        private readonly ClientDiagnostics _dataConnectorsCheckRequirementsClientDiagnostics;
        private readonly DataConnectorsCheckRequirementsRestOperations _dataConnectorsCheckRequirementsRestClient;

        /// <summary> Initializes a new instance of the <see cref="OperationalInsightsWorkspaceSecurityInsightsResource"/> class for mocking. </summary>
        protected OperationalInsightsWorkspaceSecurityInsightsResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="OperationalInsightsWorkspaceSecurityInsightsResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal OperationalInsightsWorkspaceSecurityInsightsResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _getRecommendationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _getRecommendationsRestClient = new GetRecommendationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _getClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _getRestClient = new GetRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _updateClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _updateRestClient = new UpdateRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _sourceControlClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _sourceControlRestClient = new SourceControlRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _threatIntelligenceIndicatorClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _threatIntelligenceIndicatorRestClient = new ThreatIntelligenceIndicatorRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _threatIntelligenceIndicatorMetricsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _threatIntelligenceIndicatorMetricsRestClient = new ThreatIntelligenceIndicatorMetricsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _dataConnectorsCheckRequirementsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _dataConnectorsCheckRequirementsRestClient = new DataConnectorsCheckRequirementsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.OperationalInsights/workspaces";

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of SecurityInsightsAlertRuleResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SecurityInsightsAlertRuleResources and their operations over a SecurityInsightsAlertRuleResource. </returns>
        public virtual SecurityInsightsAlertRuleCollection GetSecurityInsightsAlertRules()
        {
            return GetCachedClient(Client => new SecurityInsightsAlertRuleCollection(Client, Id));
        }

        /// <summary>
        /// Gets the alert rule.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AlertRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="ruleId"> Alert rule ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SecurityInsightsAlertRuleResource>> GetSecurityInsightsAlertRuleAsync(string ruleId, CancellationToken cancellationToken = default)
        {
            return await GetSecurityInsightsAlertRules().GetAsync(ruleId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the alert rule.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRules/{ruleId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AlertRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="ruleId"> Alert rule ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SecurityInsightsAlertRuleResource> GetSecurityInsightsAlertRule(string ruleId, CancellationToken cancellationToken = default)
        {
            return GetSecurityInsightsAlertRules().Get(ruleId, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityInsightsAlertRuleTemplateResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SecurityInsightsAlertRuleTemplateResources and their operations over a SecurityInsightsAlertRuleTemplateResource. </returns>
        public virtual SecurityInsightsAlertRuleTemplateCollection GetSecurityInsightsAlertRuleTemplates()
        {
            return GetCachedClient(Client => new SecurityInsightsAlertRuleTemplateCollection(Client, Id));
        }

        /// <summary>
        /// Gets the alert rule template.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRuleTemplates/{alertRuleTemplateId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AlertRuleTemplates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="alertRuleTemplateId"> Alert rule template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="alertRuleTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="alertRuleTemplateId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SecurityInsightsAlertRuleTemplateResource>> GetSecurityInsightsAlertRuleTemplateAsync(string alertRuleTemplateId, CancellationToken cancellationToken = default)
        {
            return await GetSecurityInsightsAlertRuleTemplates().GetAsync(alertRuleTemplateId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the alert rule template.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/alertRuleTemplates/{alertRuleTemplateId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AlertRuleTemplates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="alertRuleTemplateId"> Alert rule template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="alertRuleTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="alertRuleTemplateId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SecurityInsightsAlertRuleTemplateResource> GetSecurityInsightsAlertRuleTemplate(string alertRuleTemplateId, CancellationToken cancellationToken = default)
        {
            return GetSecurityInsightsAlertRuleTemplates().Get(alertRuleTemplateId, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityInsightsAutomationRuleResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SecurityInsightsAutomationRuleResources and their operations over a SecurityInsightsAutomationRuleResource. </returns>
        public virtual SecurityInsightsAutomationRuleCollection GetSecurityInsightsAutomationRules()
        {
            return GetCachedClient(Client => new SecurityInsightsAutomationRuleCollection(Client, Id));
        }

        /// <summary>
        /// Gets the automation rule.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/automationRules/{automationRuleId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AutomationRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="automationRuleId"> Automation rule ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="automationRuleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="automationRuleId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SecurityInsightsAutomationRuleResource>> GetSecurityInsightsAutomationRuleAsync(string automationRuleId, CancellationToken cancellationToken = default)
        {
            return await GetSecurityInsightsAutomationRules().GetAsync(automationRuleId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the automation rule.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/automationRules/{automationRuleId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AutomationRules_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="automationRuleId"> Automation rule ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="automationRuleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="automationRuleId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SecurityInsightsAutomationRuleResource> GetSecurityInsightsAutomationRule(string automationRuleId, CancellationToken cancellationToken = default)
        {
            return GetSecurityInsightsAutomationRules().Get(automationRuleId, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityInsightsEntityResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SecurityInsightsEntityResources and their operations over a SecurityInsightsEntityResource. </returns>
        public virtual SecurityInsightsEntityCollection GetSecurityInsightsEntities()
        {
            return GetCachedClient(Client => new SecurityInsightsEntityCollection(Client, Id));
        }

        /// <summary>
        /// Gets an entity.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Entities_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="entityId"> entity ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="entityId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="entityId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SecurityInsightsEntityResource>> GetSecurityInsightsEntityAsync(string entityId, CancellationToken cancellationToken = default)
        {
            return await GetSecurityInsightsEntities().GetAsync(entityId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an entity.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entities/{entityId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Entities_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="entityId"> entity ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="entityId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="entityId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SecurityInsightsEntityResource> GetSecurityInsightsEntity(string entityId, CancellationToken cancellationToken = default)
        {
            return GetSecurityInsightsEntities().Get(entityId, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityInsightsIncidentResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SecurityInsightsIncidentResources and their operations over a SecurityInsightsIncidentResource. </returns>
        public virtual SecurityInsightsIncidentCollection GetSecurityInsightsIncidents()
        {
            return GetCachedClient(Client => new SecurityInsightsIncidentCollection(Client, Id));
        }

        /// <summary>
        /// Gets an incident.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Incidents_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="incidentId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SecurityInsightsIncidentResource>> GetSecurityInsightsIncidentAsync(string incidentId, CancellationToken cancellationToken = default)
        {
            return await GetSecurityInsightsIncidents().GetAsync(incidentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an incident.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Incidents_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="incidentId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SecurityInsightsIncidentResource> GetSecurityInsightsIncident(string incidentId, CancellationToken cancellationToken = default)
        {
            return GetSecurityInsightsIncidents().Get(incidentId, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityInsightsBookmarkResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SecurityInsightsBookmarkResources and their operations over a SecurityInsightsBookmarkResource. </returns>
        public virtual SecurityInsightsBookmarkCollection GetSecurityInsightsBookmarks()
        {
            return GetCachedClient(Client => new SecurityInsightsBookmarkCollection(Client, Id));
        }

        /// <summary>
        /// Gets a bookmark.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks/{bookmarkId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Bookmarks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="bookmarkId"> Bookmark ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="bookmarkId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="bookmarkId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SecurityInsightsBookmarkResource>> GetSecurityInsightsBookmarkAsync(string bookmarkId, CancellationToken cancellationToken = default)
        {
            return await GetSecurityInsightsBookmarks().GetAsync(bookmarkId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a bookmark.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks/{bookmarkId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Bookmarks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="bookmarkId"> Bookmark ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="bookmarkId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="bookmarkId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SecurityInsightsBookmarkResource> GetSecurityInsightsBookmark(string bookmarkId, CancellationToken cancellationToken = default)
        {
            return GetSecurityInsightsBookmarks().Get(bookmarkId, cancellationToken);
        }

        /// <summary> Gets a collection of EntityQueryResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of EntityQueryResources and their operations over a EntityQueryResource. </returns>
        public virtual EntityQueryCollection GetEntityQueries()
        {
            return GetCachedClient(Client => new EntityQueryCollection(Client, Id));
        }

        /// <summary>
        /// Gets an entity query.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueries/{entityQueryId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EntityQueries_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="entityQueryId"> entity query ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="entityQueryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="entityQueryId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EntityQueryResource>> GetEntityQueryAsync(string entityQueryId, CancellationToken cancellationToken = default)
        {
            return await GetEntityQueries().GetAsync(entityQueryId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an entity query.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueries/{entityQueryId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EntityQueries_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="entityQueryId"> entity query ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="entityQueryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="entityQueryId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<EntityQueryResource> GetEntityQuery(string entityQueryId, CancellationToken cancellationToken = default)
        {
            return GetEntityQueries().Get(entityQueryId, cancellationToken);
        }

        /// <summary> Gets a collection of EntityQueryTemplateResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of EntityQueryTemplateResources and their operations over a EntityQueryTemplateResource. </returns>
        public virtual EntityQueryTemplateCollection GetEntityQueryTemplates()
        {
            return GetCachedClient(Client => new EntityQueryTemplateCollection(Client, Id));
        }

        /// <summary>
        /// Gets an entity query.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueryTemplates/{entityQueryTemplateId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EntityQueryTemplates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="entityQueryTemplateId"> entity query template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="entityQueryTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="entityQueryTemplateId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EntityQueryTemplateResource>> GetEntityQueryTemplateAsync(string entityQueryTemplateId, CancellationToken cancellationToken = default)
        {
            return await GetEntityQueryTemplates().GetAsync(entityQueryTemplateId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an entity query.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueryTemplates/{entityQueryTemplateId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EntityQueryTemplates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="entityQueryTemplateId"> entity query template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="entityQueryTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="entityQueryTemplateId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<EntityQueryTemplateResource> GetEntityQueryTemplate(string entityQueryTemplateId, CancellationToken cancellationToken = default)
        {
            return GetEntityQueryTemplates().Get(entityQueryTemplateId, cancellationToken);
        }

        /// <summary> Gets a collection of FileImportResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of FileImportResources and their operations over a FileImportResource. </returns>
        public virtual FileImportCollection GetFileImports()
        {
            return GetCachedClient(Client => new FileImportCollection(Client, Id));
        }

        /// <summary>
        /// Gets a file import.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/fileImports/{fileImportId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileImports_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fileImportId"> File import ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="fileImportId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="fileImportId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<FileImportResource>> GetFileImportAsync(string fileImportId, CancellationToken cancellationToken = default)
        {
            return await GetFileImports().GetAsync(fileImportId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a file import.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/fileImports/{fileImportId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileImports_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fileImportId"> File import ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="fileImportId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="fileImportId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<FileImportResource> GetFileImport(string fileImportId, CancellationToken cancellationToken = default)
        {
            return GetFileImports().Get(fileImportId, cancellationToken);
        }

        /// <summary> Gets a collection of MetadataModelResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of MetadataModelResources and their operations over a MetadataModelResource. </returns>
        public virtual MetadataModelCollection GetMetadataModels()
        {
            return GetCachedClient(Client => new MetadataModelCollection(Client, Id));
        }

        /// <summary>
        /// Get a Metadata.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata/{metadataName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Metadata_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="metadataName"> The Metadata name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="metadataName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="metadataName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MetadataModelResource>> GetMetadataModelAsync(string metadataName, CancellationToken cancellationToken = default)
        {
            return await GetMetadataModels().GetAsync(metadataName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Metadata.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata/{metadataName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Metadata_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="metadataName"> The Metadata name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="metadataName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="metadataName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<MetadataModelResource> GetMetadataModel(string metadataName, CancellationToken cancellationToken = default)
        {
            return GetMetadataModels().Get(metadataName, cancellationToken);
        }

        /// <summary> Gets a collection of OfficeConsentResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of OfficeConsentResources and their operations over a OfficeConsentResource. </returns>
        public virtual OfficeConsentCollection GetOfficeConsents()
        {
            return GetCachedClient(Client => new OfficeConsentCollection(Client, Id));
        }

        /// <summary>
        /// Gets an office365 consent.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/officeConsents/{consentId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OfficeConsents_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="consentId"> consent ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="consentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="consentId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<OfficeConsentResource>> GetOfficeConsentAsync(string consentId, CancellationToken cancellationToken = default)
        {
            return await GetOfficeConsents().GetAsync(consentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an office365 consent.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/officeConsents/{consentId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OfficeConsents_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="consentId"> consent ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="consentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="consentId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<OfficeConsentResource> GetOfficeConsent(string consentId, CancellationToken cancellationToken = default)
        {
            return GetOfficeConsents().Get(consentId, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityInsightsSentinelOnboardingStateResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SecurityInsightsSentinelOnboardingStateResources and their operations over a SecurityInsightsSentinelOnboardingStateResource. </returns>
        public virtual SecurityInsightsSentinelOnboardingStateCollection GetSecurityInsightsSentinelOnboardingStates()
        {
            return GetCachedClient(Client => new SecurityInsightsSentinelOnboardingStateCollection(Client, Id));
        }

        /// <summary>
        /// Get Sentinel onboarding state
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/onboardingStates/{sentinelOnboardingStateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SentinelOnboardingStates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sentinelOnboardingStateName"> The Sentinel onboarding state name. Supports - default. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sentinelOnboardingStateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sentinelOnboardingStateName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SecurityInsightsSentinelOnboardingStateResource>> GetSecurityInsightsSentinelOnboardingStateAsync(string sentinelOnboardingStateName, CancellationToken cancellationToken = default)
        {
            return await GetSecurityInsightsSentinelOnboardingStates().GetAsync(sentinelOnboardingStateName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Sentinel onboarding state
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/onboardingStates/{sentinelOnboardingStateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SentinelOnboardingStates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sentinelOnboardingStateName"> The Sentinel onboarding state name. Supports - default. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sentinelOnboardingStateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sentinelOnboardingStateName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SecurityInsightsSentinelOnboardingStateResource> GetSecurityInsightsSentinelOnboardingState(string sentinelOnboardingStateName, CancellationToken cancellationToken = default)
        {
            return GetSecurityInsightsSentinelOnboardingStates().Get(sentinelOnboardingStateName, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityMLAnalyticsSettingResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SecurityMLAnalyticsSettingResources and their operations over a SecurityMLAnalyticsSettingResource. </returns>
        public virtual SecurityMLAnalyticsSettingCollection GetSecurityMLAnalyticsSettings()
        {
            return GetCachedClient(Client => new SecurityMLAnalyticsSettingCollection(Client, Id));
        }

        /// <summary>
        /// Gets the Security ML Analytics Settings.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/securityMLAnalyticsSettings/{settingsResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SecurityMLAnalyticsSettings_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="settingsResourceName"> Security ML Analytics Settings resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="settingsResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="settingsResourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SecurityMLAnalyticsSettingResource>> GetSecurityMLAnalyticsSettingAsync(string settingsResourceName, CancellationToken cancellationToken = default)
        {
            return await GetSecurityMLAnalyticsSettings().GetAsync(settingsResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the Security ML Analytics Settings.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/securityMLAnalyticsSettings/{settingsResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SecurityMLAnalyticsSettings_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="settingsResourceName"> Security ML Analytics Settings resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="settingsResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="settingsResourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SecurityMLAnalyticsSettingResource> GetSecurityMLAnalyticsSetting(string settingsResourceName, CancellationToken cancellationToken = default)
        {
            return GetSecurityMLAnalyticsSettings().Get(settingsResourceName, cancellationToken);
        }

        /// <summary> Gets a collection of SettingResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SettingResources and their operations over a SettingResource. </returns>
        public virtual SettingCollection GetSettings()
        {
            return GetCachedClient(Client => new SettingCollection(Client, Id));
        }

        /// <summary>
        /// Gets a setting.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/settings/{settingsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProductSettings_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="settingsName"> The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="settingsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="settingsName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SettingResource>> GetSettingAsync(string settingsName, CancellationToken cancellationToken = default)
        {
            return await GetSettings().GetAsync(settingsName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a setting.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/settings/{settingsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProductSettings_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="settingsName"> The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="settingsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="settingsName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SettingResource> GetSetting(string settingsName, CancellationToken cancellationToken = default)
        {
            return GetSettings().Get(settingsName, cancellationToken);
        }

        /// <summary> Gets a collection of SourceControlResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SourceControlResources and their operations over a SourceControlResource. </returns>
        public virtual SourceControlCollection GetSourceControls()
        {
            return GetCachedClient(Client => new SourceControlCollection(Client, Id));
        }

        /// <summary>
        /// Gets a source control byt its identifier.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/sourcecontrols/{sourceControlId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SourceControls_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sourceControlId"> Source control Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sourceControlId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceControlId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SourceControlResource>> GetSourceControlAsync(string sourceControlId, CancellationToken cancellationToken = default)
        {
            return await GetSourceControls().GetAsync(sourceControlId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a source control byt its identifier.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/sourcecontrols/{sourceControlId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SourceControls_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sourceControlId"> Source control Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sourceControlId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceControlId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SourceControlResource> GetSourceControl(string sourceControlId, CancellationToken cancellationToken = default)
        {
            return GetSourceControls().Get(sourceControlId, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityInsightsThreatIntelligenceIndicatorResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SecurityInsightsThreatIntelligenceIndicatorResources and their operations over a SecurityInsightsThreatIntelligenceIndicatorResource. </returns>
        public virtual SecurityInsightsThreatIntelligenceIndicatorCollection GetSecurityInsightsThreatIntelligenceIndicators()
        {
            return GetCachedClient(Client => new SecurityInsightsThreatIntelligenceIndicatorCollection(Client, Id));
        }

        /// <summary>
        /// View a threat intelligence indicator by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ThreatIntelligenceIndicators_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> Threat intelligence indicator name field. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SecurityInsightsThreatIntelligenceIndicatorResource>> GetSecurityInsightsThreatIntelligenceIndicatorAsync(string name, CancellationToken cancellationToken = default)
        {
            return await GetSecurityInsightsThreatIntelligenceIndicators().GetAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// View a threat intelligence indicator by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ThreatIntelligenceIndicators_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> Threat intelligence indicator name field. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SecurityInsightsThreatIntelligenceIndicatorResource> GetSecurityInsightsThreatIntelligenceIndicator(string name, CancellationToken cancellationToken = default)
        {
            return GetSecurityInsightsThreatIntelligenceIndicators().Get(name, cancellationToken);
        }

        /// <summary> Gets a collection of TriggeredAnalyticsRuleRunResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of TriggeredAnalyticsRuleRunResources and their operations over a TriggeredAnalyticsRuleRunResource. </returns>
        public virtual TriggeredAnalyticsRuleRunCollection GetTriggeredAnalyticsRuleRuns()
        {
            return GetCachedClient(Client => new TriggeredAnalyticsRuleRunCollection(Client, Id));
        }

        /// <summary>
        /// Gets the triggered analytics rule run.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/triggeredAnalyticsRuleRuns/{ruleRunId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>triggeredAnalyticsRuleRun_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="ruleRunId"> the triggered rule id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleRunId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<TriggeredAnalyticsRuleRunResource>> GetTriggeredAnalyticsRuleRunAsync(string ruleRunId, CancellationToken cancellationToken = default)
        {
            return await GetTriggeredAnalyticsRuleRuns().GetAsync(ruleRunId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the triggered analytics rule run.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/triggeredAnalyticsRuleRuns/{ruleRunId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>triggeredAnalyticsRuleRun_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="ruleRunId"> the triggered rule id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleRunId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<TriggeredAnalyticsRuleRunResource> GetTriggeredAnalyticsRuleRun(string ruleRunId, CancellationToken cancellationToken = default)
        {
            return GetTriggeredAnalyticsRuleRuns().Get(ruleRunId, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityInsightsWatchlistResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SecurityInsightsWatchlistResources and their operations over a SecurityInsightsWatchlistResource. </returns>
        public virtual SecurityInsightsWatchlistCollection GetSecurityInsightsWatchlists()
        {
            return GetCachedClient(Client => new SecurityInsightsWatchlistCollection(Client, Id));
        }

        /// <summary>
        /// Gets a watchlist, without its watchlist items.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Watchlists_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="watchlistAlias"> Watchlist Alias. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="watchlistAlias"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistAlias"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SecurityInsightsWatchlistResource>> GetSecurityInsightsWatchlistAsync(string watchlistAlias, CancellationToken cancellationToken = default)
        {
            return await GetSecurityInsightsWatchlists().GetAsync(watchlistAlias, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a watchlist, without its watchlist items.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/watchlists/{watchlistAlias}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Watchlists_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="watchlistAlias"> Watchlist Alias. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="watchlistAlias"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistAlias"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SecurityInsightsWatchlistResource> GetSecurityInsightsWatchlist(string watchlistAlias, CancellationToken cancellationToken = default)
        {
            return GetSecurityInsightsWatchlists().Get(watchlistAlias, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityInsightsDataConnectorResources in the OperationalInsightsWorkspaceSecurityInsights. </summary>
        /// <returns> An object representing collection of SecurityInsightsDataConnectorResources and their operations over a SecurityInsightsDataConnectorResource. </returns>
        public virtual SecurityInsightsDataConnectorCollection GetSecurityInsightsDataConnectors()
        {
            return GetCachedClient(Client => new SecurityInsightsDataConnectorCollection(Client, Id));
        }

        /// <summary>
        /// Gets a data connector.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataConnectors_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataConnectorId"> Connector ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataConnectorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataConnectorId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SecurityInsightsDataConnectorResource>> GetSecurityInsightsDataConnectorAsync(string dataConnectorId, CancellationToken cancellationToken = default)
        {
            return await GetSecurityInsightsDataConnectors().GetAsync(dataConnectorId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a data connector.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataConnectors_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataConnectorId"> Connector ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataConnectorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataConnectorId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SecurityInsightsDataConnectorResource> GetSecurityInsightsDataConnector(string dataConnectorId, CancellationToken cancellationToken = default)
        {
            return GetSecurityInsightsDataConnectors().Get(dataConnectorId, cancellationToken);
        }

        /// <summary>
        /// Gets a list of all recommendations.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/recommendations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GetRecommendations_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Recommendation" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Recommendation> GetGetRecommendationsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _getRecommendationsRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, Recommendation.DeserializeRecommendation, _getRecommendationsClientDiagnostics, Pipeline, "OperationalInsightsWorkspaceSecurityInsightsResource.GetGetRecommendations", "value", null, cancellationToken);
        }

        /// <summary>
        /// Gets a list of all recommendations.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/recommendations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GetRecommendations_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Recommendation" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Recommendation> GetGetRecommendations(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _getRecommendationsRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, Recommendation.DeserializeRecommendation, _getRecommendationsClientDiagnostics, Pipeline, "OperationalInsightsWorkspaceSecurityInsightsResource.GetGetRecommendations", "value", null, cancellationToken);
        }

        /// <summary>
        /// Gets a recommendation by its id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/recommendations/{recommendationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Get_SingleRecommendation</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> Recommendation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Recommendation>> SingleRecommendationGetAsync(Guid recommendationId, CancellationToken cancellationToken = default)
        {
            using var scope = _getClientDiagnostics.CreateScope("OperationalInsightsWorkspaceSecurityInsightsResource.SingleRecommendationGet");
            scope.Start();
            try
            {
                var response = await _getRestClient.SingleRecommendationAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, recommendationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a recommendation by its id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/recommendations/{recommendationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Get_SingleRecommendation</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendationId"> Recommendation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Recommendation> SingleRecommendationGet(Guid recommendationId, CancellationToken cancellationToken = default)
        {
            using var scope = _getClientDiagnostics.CreateScope("OperationalInsightsWorkspaceSecurityInsightsResource.SingleRecommendationGet");
            scope.Start();
            try
            {
                var response = _getRestClient.SingleRecommendation(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, recommendationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patch a recommendation.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/recommendations/{recommendationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Update_Recommendation</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="recommendationId"> Recommendation Id. </param>
        /// <param name="patch"> Recommendation Fields to Update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<ArmOperation<Recommendation>> RecommendationUpdateAsync(WaitUntil waitUntil, Guid recommendationId, IEnumerable<RecommendationPatch> patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _updateClientDiagnostics.CreateScope("OperationalInsightsWorkspaceSecurityInsightsResource.RecommendationUpdate");
            scope.Start();
            try
            {
                var response = await _updateRestClient.RecommendationAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, recommendationId, patch, cancellationToken).ConfigureAwait(false);
                var operation = new SecurityInsightsArmOperation<Recommendation>(new RecommendationOperationSource(), _updateClientDiagnostics, Pipeline, _updateRestClient.CreateRecommendationRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, recommendationId, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patch a recommendation.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/recommendations/{recommendationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Update_Recommendation</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="recommendationId"> Recommendation Id. </param>
        /// <param name="patch"> Recommendation Fields to Update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual ArmOperation<Recommendation> RecommendationUpdate(WaitUntil waitUntil, Guid recommendationId, IEnumerable<RecommendationPatch> patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _updateClientDiagnostics.CreateScope("OperationalInsightsWorkspaceSecurityInsightsResource.RecommendationUpdate");
            scope.Start();
            try
            {
                var response = _updateRestClient.Recommendation(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, recommendationId, patch, cancellationToken);
                var operation = new SecurityInsightsArmOperation<Recommendation>(new RecommendationOperationSource(), _updateClientDiagnostics, Pipeline, _updateRestClient.CreateRecommendationRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, recommendationId, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of repositories metadata.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/listRepositories</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SourceControl_listRepositories</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="repoType"> The repo type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Repo" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Repo> GetRepositoriesSourceControlsAsync(RepoType repoType, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _sourceControlRestClient.CreateListRepositoriesRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, repoType);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _sourceControlRestClient.CreateListRepositoriesNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, repoType);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Repo.DeserializeRepo, _sourceControlClientDiagnostics, Pipeline, "OperationalInsightsWorkspaceSecurityInsightsResource.GetRepositoriesSourceControls", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets a list of repositories metadata.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/listRepositories</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SourceControl_listRepositories</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="repoType"> The repo type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Repo" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Repo> GetRepositoriesSourceControls(RepoType repoType, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _sourceControlRestClient.CreateListRepositoriesRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, repoType);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _sourceControlRestClient.CreateListRepositoriesNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, repoType);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Repo.DeserializeRepo, _sourceControlClientDiagnostics, Pipeline, "OperationalInsightsWorkspaceSecurityInsightsResource.GetRepositoriesSourceControls", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Query threat intelligence indicators as per filtering criteria.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/queryIndicators</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ThreatIntelligenceIndicator_QueryIndicators</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threatIntelligenceFilteringCriteria"> Filtering criteria for querying threat intelligence indicators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threatIntelligenceFilteringCriteria"/> is null. </exception>
        /// <returns> An async collection of <see cref="SecurityInsightsThreatIntelligenceIndicatorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecurityInsightsThreatIntelligenceIndicatorResource> QueryThreatIntelligenceIndicatorsAsync(ThreatIntelligenceFilteringCriteria threatIntelligenceFilteringCriteria, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(threatIntelligenceFilteringCriteria, nameof(threatIntelligenceFilteringCriteria));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _threatIntelligenceIndicatorRestClient.CreateQueryIndicatorsRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, threatIntelligenceFilteringCriteria);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _threatIntelligenceIndicatorRestClient.CreateQueryIndicatorsNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, threatIntelligenceFilteringCriteria);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new SecurityInsightsThreatIntelligenceIndicatorResource(Client, SecurityInsightsThreatIntelligenceIndicatorBaseData.DeserializeSecurityInsightsThreatIntelligenceIndicatorBaseData(e)), _threatIntelligenceIndicatorClientDiagnostics, Pipeline, "OperationalInsightsWorkspaceSecurityInsightsResource.QueryThreatIntelligenceIndicators", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Query threat intelligence indicators as per filtering criteria.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/queryIndicators</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ThreatIntelligenceIndicator_QueryIndicators</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threatIntelligenceFilteringCriteria"> Filtering criteria for querying threat intelligence indicators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threatIntelligenceFilteringCriteria"/> is null. </exception>
        /// <returns> A collection of <see cref="SecurityInsightsThreatIntelligenceIndicatorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecurityInsightsThreatIntelligenceIndicatorResource> QueryThreatIntelligenceIndicators(ThreatIntelligenceFilteringCriteria threatIntelligenceFilteringCriteria, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(threatIntelligenceFilteringCriteria, nameof(threatIntelligenceFilteringCriteria));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _threatIntelligenceIndicatorRestClient.CreateQueryIndicatorsRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, threatIntelligenceFilteringCriteria);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _threatIntelligenceIndicatorRestClient.CreateQueryIndicatorsNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, threatIntelligenceFilteringCriteria);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new SecurityInsightsThreatIntelligenceIndicatorResource(Client, SecurityInsightsThreatIntelligenceIndicatorBaseData.DeserializeSecurityInsightsThreatIntelligenceIndicatorBaseData(e)), _threatIntelligenceIndicatorClientDiagnostics, Pipeline, "OperationalInsightsWorkspaceSecurityInsightsResource.QueryThreatIntelligenceIndicators", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get threat intelligence indicators metrics (Indicators counts by Type, Threat Type, Source).
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/metrics</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ThreatIntelligenceIndicatorMetrics_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ThreatIntelligenceMetrics" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ThreatIntelligenceMetrics> GetAllThreatIntelligenceIndicatorMetricsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _threatIntelligenceIndicatorMetricsRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, ThreatIntelligenceMetrics.DeserializeThreatIntelligenceMetrics, _threatIntelligenceIndicatorMetricsClientDiagnostics, Pipeline, "OperationalInsightsWorkspaceSecurityInsightsResource.GetAllThreatIntelligenceIndicatorMetrics", "value", null, cancellationToken);
        }

        /// <summary>
        /// Get threat intelligence indicators metrics (Indicators counts by Type, Threat Type, Source).
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/metrics</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ThreatIntelligenceIndicatorMetrics_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ThreatIntelligenceMetrics" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ThreatIntelligenceMetrics> GetAllThreatIntelligenceIndicatorMetrics(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _threatIntelligenceIndicatorMetricsRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, ThreatIntelligenceMetrics.DeserializeThreatIntelligenceMetrics, _threatIntelligenceIndicatorMetricsClientDiagnostics, Pipeline, "OperationalInsightsWorkspaceSecurityInsightsResource.GetAllThreatIntelligenceIndicatorMetrics", "value", null, cancellationToken);
        }

        /// <summary>
        /// Get requirements state for a data connector type.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectorsCheckRequirements</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataConnectorsCheckRequirements_Post</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataConnectorsCheckRequirements"> The parameters for requirements check message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataConnectorsCheckRequirements"/> is null. </exception>
        public virtual async Task<Response<DataConnectorRequirementsState>> PostDataConnectorsCheckRequirementAsync(DataConnectorsCheckRequirements dataConnectorsCheckRequirements, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(dataConnectorsCheckRequirements, nameof(dataConnectorsCheckRequirements));

            using var scope = _dataConnectorsCheckRequirementsClientDiagnostics.CreateScope("OperationalInsightsWorkspaceSecurityInsightsResource.PostDataConnectorsCheckRequirement");
            scope.Start();
            try
            {
                var response = await _dataConnectorsCheckRequirementsRestClient.PostAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataConnectorsCheckRequirements, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get requirements state for a data connector type.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectorsCheckRequirements</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataConnectorsCheckRequirements_Post</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataConnectorsCheckRequirements"> The parameters for requirements check message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataConnectorsCheckRequirements"/> is null. </exception>
        public virtual Response<DataConnectorRequirementsState> PostDataConnectorsCheckRequirement(DataConnectorsCheckRequirements dataConnectorsCheckRequirements, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(dataConnectorsCheckRequirements, nameof(dataConnectorsCheckRequirements));

            using var scope = _dataConnectorsCheckRequirementsClientDiagnostics.CreateScope("OperationalInsightsWorkspaceSecurityInsightsResource.PostDataConnectorsCheckRequirement");
            scope.Start();
            try
            {
                var response = _dataConnectorsCheckRequirementsRestClient.Post(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataConnectorsCheckRequirements, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
