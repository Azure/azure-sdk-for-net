// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class representing a collection of <see cref="EntityQueryTemplateResource" /> and their operations.
    /// Each <see cref="EntityQueryTemplateResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get an <see cref="EntityQueryTemplateCollection" /> instance call the GetEntityQueryTemplates method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class EntityQueryTemplateCollection : ArmCollection, IEnumerable<EntityQueryTemplateResource>, IAsyncEnumerable<EntityQueryTemplateResource>
    {
        private readonly ClientDiagnostics _entityQueryTemplateClientDiagnostics;
        private readonly EntityQueryTemplatesRestOperations _entityQueryTemplateRestClient;
        private readonly string _workspaceName;

        /// <summary> Initializes a new instance of the <see cref="EntityQueryTemplateCollection"/> class for mocking. </summary>
        protected EntityQueryTemplateCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EntityQueryTemplateCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        internal EntityQueryTemplateCollection(ArmClient client, ResourceIdentifier id, string workspaceName) : base(client, id)
        {
            _workspaceName = workspaceName;
            _entityQueryTemplateClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", EntityQueryTemplateResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EntityQueryTemplateResource.ResourceType, out string entityQueryTemplateApiVersion);
            _entityQueryTemplateRestClient = new EntityQueryTemplatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, entityQueryTemplateApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets an entity query.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueryTemplates/{entityQueryTemplateId}
        /// Operation Id: EntityQueryTemplates_Get
        /// </summary>
        /// <param name="entityQueryTemplateId"> entity query template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="entityQueryTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="entityQueryTemplateId"/> is null. </exception>
        public virtual async Task<Response<EntityQueryTemplateResource>> GetAsync(string entityQueryTemplateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(entityQueryTemplateId, nameof(entityQueryTemplateId));

            using var scope = _entityQueryTemplateClientDiagnostics.CreateScope("EntityQueryTemplateCollection.Get");
            scope.Start();
            try
            {
                var response = await _entityQueryTemplateRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, entityQueryTemplateId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EntityQueryTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an entity query.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueryTemplates/{entityQueryTemplateId}
        /// Operation Id: EntityQueryTemplates_Get
        /// </summary>
        /// <param name="entityQueryTemplateId"> entity query template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="entityQueryTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="entityQueryTemplateId"/> is null. </exception>
        public virtual Response<EntityQueryTemplateResource> Get(string entityQueryTemplateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(entityQueryTemplateId, nameof(entityQueryTemplateId));

            using var scope = _entityQueryTemplateClientDiagnostics.CreateScope("EntityQueryTemplateCollection.Get");
            scope.Start();
            try
            {
                var response = _entityQueryTemplateRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, entityQueryTemplateId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EntityQueryTemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all entity query templates.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueryTemplates
        /// Operation Id: EntityQueryTemplates_List
        /// </summary>
        /// <param name="kind"> The entity template query kind we want to fetch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EntityQueryTemplateResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EntityQueryTemplateResource> GetAllAsync(Enum15? kind = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<EntityQueryTemplateResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _entityQueryTemplateClientDiagnostics.CreateScope("EntityQueryTemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _entityQueryTemplateRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, kind, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new EntityQueryTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<EntityQueryTemplateResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _entityQueryTemplateClientDiagnostics.CreateScope("EntityQueryTemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _entityQueryTemplateRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, kind, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new EntityQueryTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all entity query templates.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueryTemplates
        /// Operation Id: EntityQueryTemplates_List
        /// </summary>
        /// <param name="kind"> The entity template query kind we want to fetch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EntityQueryTemplateResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EntityQueryTemplateResource> GetAll(Enum15? kind = null, CancellationToken cancellationToken = default)
        {
            Page<EntityQueryTemplateResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _entityQueryTemplateClientDiagnostics.CreateScope("EntityQueryTemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _entityQueryTemplateRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, kind, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new EntityQueryTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<EntityQueryTemplateResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _entityQueryTemplateClientDiagnostics.CreateScope("EntityQueryTemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _entityQueryTemplateRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, kind, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new EntityQueryTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueryTemplates/{entityQueryTemplateId}
        /// Operation Id: EntityQueryTemplates_Get
        /// </summary>
        /// <param name="entityQueryTemplateId"> entity query template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="entityQueryTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="entityQueryTemplateId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string entityQueryTemplateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(entityQueryTemplateId, nameof(entityQueryTemplateId));

            using var scope = _entityQueryTemplateClientDiagnostics.CreateScope("EntityQueryTemplateCollection.Exists");
            scope.Start();
            try
            {
                var response = await _entityQueryTemplateRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, entityQueryTemplateId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/entityQueryTemplates/{entityQueryTemplateId}
        /// Operation Id: EntityQueryTemplates_Get
        /// </summary>
        /// <param name="entityQueryTemplateId"> entity query template ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="entityQueryTemplateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="entityQueryTemplateId"/> is null. </exception>
        public virtual Response<bool> Exists(string entityQueryTemplateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(entityQueryTemplateId, nameof(entityQueryTemplateId));

            using var scope = _entityQueryTemplateClientDiagnostics.CreateScope("EntityQueryTemplateCollection.Exists");
            scope.Start();
            try
            {
                var response = _entityQueryTemplateRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _workspaceName, entityQueryTemplateId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EntityQueryTemplateResource> IEnumerable<EntityQueryTemplateResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EntityQueryTemplateResource> IAsyncEnumerable<EntityQueryTemplateResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
