// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class representing the SecurityInsightsWatchlistItem data model.
    /// Represents a Watchlist item in Azure Security Insights.
    /// Serialized Name: WatchlistItem
    /// </summary>
    public partial class SecurityInsightsWatchlistItemData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SecurityInsightsWatchlistItemData"/>. </summary>
        public SecurityInsightsWatchlistItemData()
        {
            ItemsKeyValueDictionary = new ChangeTrackingDictionary<string, BinaryData>();
            EntityMappingDictionary = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="SecurityInsightsWatchlistItemData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="watchlistItemType">
        /// The type of the watchlist item
        /// Serialized Name: WatchlistItem.properties.watchlistItemType
        /// </param>
        /// <param name="watchlistItemId">
        /// The id (a Guid) of the watchlist item
        /// Serialized Name: WatchlistItem.properties.watchlistItemId
        /// </param>
        /// <param name="tenantId">
        /// The tenantId to which the watchlist item belongs to
        /// Serialized Name: WatchlistItem.properties.tenantId
        /// </param>
        /// <param name="isDeleted">
        /// A flag that indicates if the watchlist item is deleted or not
        /// Serialized Name: WatchlistItem.properties.isDeleted
        /// </param>
        /// <param name="createdOn">
        /// The time the watchlist item was created
        /// Serialized Name: WatchlistItem.properties.created
        /// </param>
        /// <param name="updatedOn">
        /// The last time the watchlist item was updated
        /// Serialized Name: WatchlistItem.properties.updated
        /// </param>
        /// <param name="createdBy">
        /// Describes a user that created the watchlist item
        /// Serialized Name: WatchlistItem.properties.createdBy
        /// </param>
        /// <param name="updatedBy">
        /// Describes a user that updated the watchlist item
        /// Serialized Name: WatchlistItem.properties.updatedBy
        /// </param>
        /// <param name="itemsKeyValueDictionary">
        /// key-value pairs for a watchlist item
        /// Serialized Name: WatchlistItem.properties.itemsKeyValue
        /// </param>
        /// <param name="entityMappingDictionary">
        /// key-value pairs for a watchlist item entity mapping
        /// Serialized Name: WatchlistItem.properties.entityMapping
        /// </param>
        /// <param name="etag">
        /// Etag of the azure resource
        /// Serialized Name: ResourceWithEtag.etag
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SecurityInsightsWatchlistItemData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string watchlistItemType, string watchlistItemId, Guid? tenantId, bool? isDeleted, DateTimeOffset? createdOn, DateTimeOffset? updatedOn, SecurityInsightsUserInfo createdBy, SecurityInsightsUserInfo updatedBy, IDictionary<string, BinaryData> itemsKeyValueDictionary, IDictionary<string, BinaryData> entityMappingDictionary, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            WatchlistItemType = watchlistItemType;
            WatchlistItemId = watchlistItemId;
            TenantId = tenantId;
            IsDeleted = isDeleted;
            CreatedOn = createdOn;
            UpdatedOn = updatedOn;
            CreatedBy = createdBy;
            UpdatedBy = updatedBy;
            ItemsKeyValueDictionary = itemsKeyValueDictionary;
            EntityMappingDictionary = entityMappingDictionary;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// The type of the watchlist item
        /// Serialized Name: WatchlistItem.properties.watchlistItemType
        /// </summary>
        public string WatchlistItemType { get; set; }
        /// <summary>
        /// The id (a Guid) of the watchlist item
        /// Serialized Name: WatchlistItem.properties.watchlistItemId
        /// </summary>
        public string WatchlistItemId { get; set; }
        /// <summary>
        /// The tenantId to which the watchlist item belongs to
        /// Serialized Name: WatchlistItem.properties.tenantId
        /// </summary>
        public Guid? TenantId { get; set; }
        /// <summary>
        /// A flag that indicates if the watchlist item is deleted or not
        /// Serialized Name: WatchlistItem.properties.isDeleted
        /// </summary>
        public bool? IsDeleted { get; set; }
        /// <summary>
        /// The time the watchlist item was created
        /// Serialized Name: WatchlistItem.properties.created
        /// </summary>
        public DateTimeOffset? CreatedOn { get; set; }
        /// <summary>
        /// The last time the watchlist item was updated
        /// Serialized Name: WatchlistItem.properties.updated
        /// </summary>
        public DateTimeOffset? UpdatedOn { get; set; }
        /// <summary>
        /// Describes a user that created the watchlist item
        /// Serialized Name: WatchlistItem.properties.createdBy
        /// </summary>
        public SecurityInsightsUserInfo CreatedBy { get; set; }
        /// <summary>
        /// Describes a user that updated the watchlist item
        /// Serialized Name: WatchlistItem.properties.updatedBy
        /// </summary>
        public SecurityInsightsUserInfo UpdatedBy { get; set; }
        /// <summary>
        /// key-value pairs for a watchlist item
        /// Serialized Name: WatchlistItem.properties.itemsKeyValue
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> ItemsKeyValueDictionary { get; }
        /// <summary>
        /// key-value pairs for a watchlist item entity mapping
        /// Serialized Name: WatchlistItem.properties.entityMapping
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> EntityMappingDictionary { get; }
        /// <summary>
        /// Etag of the azure resource
        /// Serialized Name: ResourceWithEtag.etag
        /// </summary>
        public ETag? ETag { get; set; }
    }
}
