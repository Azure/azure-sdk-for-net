// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class representing a collection of <see cref="BillingStatisticResource"/> and their operations.
    /// Each <see cref="BillingStatisticResource"/> in the collection will belong to the same instance of <see cref="OperationalInsightsWorkspaceSecurityInsightsResource"/>.
    /// To get a <see cref="BillingStatisticCollection"/> instance call the GetBillingStatistics method from an instance of <see cref="OperationalInsightsWorkspaceSecurityInsightsResource"/>.
    /// </summary>
    public partial class BillingStatisticCollection : ArmCollection, IEnumerable<BillingStatisticResource>, IAsyncEnumerable<BillingStatisticResource>
    {
        private readonly ClientDiagnostics _billingStatisticClientDiagnostics;
        private readonly BillingStatisticsRestOperations _billingStatisticRestClient;

        /// <summary> Initializes a new instance of the <see cref="BillingStatisticCollection"/> class for mocking. </summary>
        protected BillingStatisticCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="BillingStatisticCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal BillingStatisticCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _billingStatisticClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", BillingStatisticResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(BillingStatisticResource.ResourceType, out string billingStatisticApiVersion);
            _billingStatisticRestClient = new BillingStatisticsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, billingStatisticApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != OperationalInsightsWorkspaceSecurityInsightsResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, OperationalInsightsWorkspaceSecurityInsightsResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a billing statistic
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/billingStatistics/{billingStatisticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BillingStatistics_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingStatisticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="billingStatisticName"> The name of the billing statistic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="billingStatisticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="billingStatisticName"/> is null. </exception>
        public virtual async Task<Response<BillingStatisticResource>> GetAsync(string billingStatisticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(billingStatisticName, nameof(billingStatisticName));

            using var scope = _billingStatisticClientDiagnostics.CreateScope("BillingStatisticCollection.Get");
            scope.Start();
            try
            {
                var response = await _billingStatisticRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, billingStatisticName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BillingStatisticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a billing statistic
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/billingStatistics/{billingStatisticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BillingStatistics_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingStatisticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="billingStatisticName"> The name of the billing statistic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="billingStatisticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="billingStatisticName"/> is null. </exception>
        public virtual Response<BillingStatisticResource> Get(string billingStatisticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(billingStatisticName, nameof(billingStatisticName));

            using var scope = _billingStatisticClientDiagnostics.CreateScope("BillingStatisticCollection.Get");
            scope.Start();
            try
            {
                var response = _billingStatisticRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, billingStatisticName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BillingStatisticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all Microsoft Sentinel billing statistics.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/billingStatistics</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BillingStatistics_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingStatisticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BillingStatisticResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BillingStatisticResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _billingStatisticRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _billingStatisticRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new BillingStatisticResource(Client, BillingStatisticData.DeserializeBillingStatisticData(e)), _billingStatisticClientDiagnostics, Pipeline, "BillingStatisticCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets all Microsoft Sentinel billing statistics.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/billingStatistics</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BillingStatistics_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingStatisticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BillingStatisticResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BillingStatisticResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _billingStatisticRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _billingStatisticRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new BillingStatisticResource(Client, BillingStatisticData.DeserializeBillingStatisticData(e)), _billingStatisticClientDiagnostics, Pipeline, "BillingStatisticCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/billingStatistics/{billingStatisticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BillingStatistics_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingStatisticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="billingStatisticName"> The name of the billing statistic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="billingStatisticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="billingStatisticName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string billingStatisticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(billingStatisticName, nameof(billingStatisticName));

            using var scope = _billingStatisticClientDiagnostics.CreateScope("BillingStatisticCollection.Exists");
            scope.Start();
            try
            {
                var response = await _billingStatisticRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, billingStatisticName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/billingStatistics/{billingStatisticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BillingStatistics_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingStatisticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="billingStatisticName"> The name of the billing statistic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="billingStatisticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="billingStatisticName"/> is null. </exception>
        public virtual Response<bool> Exists(string billingStatisticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(billingStatisticName, nameof(billingStatisticName));

            using var scope = _billingStatisticClientDiagnostics.CreateScope("BillingStatisticCollection.Exists");
            scope.Start();
            try
            {
                var response = _billingStatisticRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, billingStatisticName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/billingStatistics/{billingStatisticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BillingStatistics_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingStatisticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="billingStatisticName"> The name of the billing statistic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="billingStatisticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="billingStatisticName"/> is null. </exception>
        public virtual async Task<NullableResponse<BillingStatisticResource>> GetIfExistsAsync(string billingStatisticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(billingStatisticName, nameof(billingStatisticName));

            using var scope = _billingStatisticClientDiagnostics.CreateScope("BillingStatisticCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _billingStatisticRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, billingStatisticName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<BillingStatisticResource>(response.GetRawResponse());
                return Response.FromValue(new BillingStatisticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/billingStatistics/{billingStatisticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BillingStatistics_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingStatisticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="billingStatisticName"> The name of the billing statistic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="billingStatisticName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="billingStatisticName"/> is null. </exception>
        public virtual NullableResponse<BillingStatisticResource> GetIfExists(string billingStatisticName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(billingStatisticName, nameof(billingStatisticName));

            using var scope = _billingStatisticClientDiagnostics.CreateScope("BillingStatisticCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _billingStatisticRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, billingStatisticName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<BillingStatisticResource>(response.GetRawResponse());
                return Response.FromValue(new BillingStatisticResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<BillingStatisticResource> IEnumerable<BillingStatisticResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<BillingStatisticResource> IAsyncEnumerable<BillingStatisticResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
