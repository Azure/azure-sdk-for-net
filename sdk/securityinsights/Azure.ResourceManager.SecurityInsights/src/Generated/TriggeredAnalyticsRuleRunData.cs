// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class representing the TriggeredAnalyticsRuleRun data model.
    /// The triggered analytics rule run
    /// Serialized Name: TriggeredAnalyticsRuleRun
    /// </summary>
    public partial class TriggeredAnalyticsRuleRunData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TriggeredAnalyticsRuleRunData"/>. </summary>
        /// <param name="executionTimeUtc"> Serialized Name: TriggeredAnalyticsRuleRun.properties.executionTimeUtc. </param>
        /// <param name="ruleId"> Serialized Name: TriggeredAnalyticsRuleRun.properties.ruleId. </param>
        /// <param name="triggeredAnalyticsRuleRunId"> Serialized Name: TriggeredAnalyticsRuleRun.properties.triggeredAnalyticsRuleRunId. </param>
        /// <param name="provisioningState">
        /// The triggered analytics rule run provisioning state
        /// Serialized Name: TriggeredAnalyticsRuleRun.properties.provisioningState
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="triggeredAnalyticsRuleRunId"/> is null. </exception>
        public TriggeredAnalyticsRuleRunData(DateTimeOffset executionTimeUtc, string ruleId, string triggeredAnalyticsRuleRunId, ProvisioningState provisioningState)
        {
            Argument.AssertNotNull(ruleId, nameof(ruleId));
            Argument.AssertNotNull(triggeredAnalyticsRuleRunId, nameof(triggeredAnalyticsRuleRunId));

            ExecutionTimeUtc = executionTimeUtc;
            RuleId = ruleId;
            TriggeredAnalyticsRuleRunId = triggeredAnalyticsRuleRunId;
            ProvisioningState = provisioningState;
            RuleRunAdditionalData = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="TriggeredAnalyticsRuleRunData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="executionTimeUtc"> Serialized Name: TriggeredAnalyticsRuleRun.properties.executionTimeUtc. </param>
        /// <param name="ruleId"> Serialized Name: TriggeredAnalyticsRuleRun.properties.ruleId. </param>
        /// <param name="triggeredAnalyticsRuleRunId"> Serialized Name: TriggeredAnalyticsRuleRun.properties.triggeredAnalyticsRuleRunId. </param>
        /// <param name="provisioningState">
        /// The triggered analytics rule run provisioning state
        /// Serialized Name: TriggeredAnalyticsRuleRun.properties.provisioningState
        /// </param>
        /// <param name="ruleRunAdditionalData">
        /// Dictionary of &lt;any&gt;
        /// Serialized Name: TriggeredAnalyticsRuleRun.properties.ruleRunAdditionalData
        /// </param>
        /// <param name="etag">
        /// Etag of the azure resource
        /// Serialized Name: ResourceWithEtag.etag
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TriggeredAnalyticsRuleRunData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, DateTimeOffset executionTimeUtc, string ruleId, string triggeredAnalyticsRuleRunId, ProvisioningState provisioningState, IDictionary<string, BinaryData> ruleRunAdditionalData, ETag? etag, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            ExecutionTimeUtc = executionTimeUtc;
            RuleId = ruleId;
            TriggeredAnalyticsRuleRunId = triggeredAnalyticsRuleRunId;
            ProvisioningState = provisioningState;
            RuleRunAdditionalData = ruleRunAdditionalData;
            ETag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TriggeredAnalyticsRuleRunData"/> for deserialization. </summary>
        internal TriggeredAnalyticsRuleRunData()
        {
        }

        /// <summary> Serialized Name: TriggeredAnalyticsRuleRun.properties.executionTimeUtc. </summary>
        public DateTimeOffset ExecutionTimeUtc { get; set; }
        /// <summary> Serialized Name: TriggeredAnalyticsRuleRun.properties.ruleId. </summary>
        public string RuleId { get; set; }
        /// <summary> Serialized Name: TriggeredAnalyticsRuleRun.properties.triggeredAnalyticsRuleRunId. </summary>
        public string TriggeredAnalyticsRuleRunId { get; set; }
        /// <summary>
        /// The triggered analytics rule run provisioning state
        /// Serialized Name: TriggeredAnalyticsRuleRun.properties.provisioningState
        /// </summary>
        public ProvisioningState ProvisioningState { get; set; }
        /// <summary>
        /// Dictionary of &lt;any&gt;
        /// Serialized Name: TriggeredAnalyticsRuleRun.properties.ruleRunAdditionalData
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> RuleRunAdditionalData { get; }
        /// <summary>
        /// Etag of the azure resource
        /// Serialized Name: ResourceWithEtag.etag
        /// </summary>
        public ETag? ETag { get; set; }
    }
}
