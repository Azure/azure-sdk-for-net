// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class representing the FileImport data model.
    /// Represents a file import in Azure Security Insights.
    /// Serialized Name: FileImport
    /// </summary>
    public partial class FileImportData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FileImportData"/>. </summary>
        public FileImportData()
        {
            ErrorsPreview = new ChangeTrackingList<ValidationError>();
        }

        /// <summary> Initializes a new instance of <see cref="FileImportData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="ingestionMode">
        /// Describes how to ingest the records in the file.
        /// Serialized Name: FileImport.properties.ingestionMode
        /// </param>
        /// <param name="contentType">
        /// The content type of this file.
        /// Serialized Name: FileImport.properties.contentType
        /// </param>
        /// <param name="createdOn">
        /// The time the file was imported.
        /// Serialized Name: FileImport.properties.createdTimeUTC
        /// </param>
        /// <param name="errorFile">
        /// Represents the error file (if the import was ingested with errors or failed the validation).
        /// Serialized Name: FileImport.properties.errorFile
        /// </param>
        /// <param name="errorsPreview">
        /// An ordered list of some of the errors that were encountered during validation.
        /// Serialized Name: FileImport.properties.errorsPreview
        /// </param>
        /// <param name="importFile">
        /// Represents the imported file.
        /// Serialized Name: FileImport.properties.importFile
        /// </param>
        /// <param name="ingestedRecordCount">
        /// The number of records that have been successfully ingested.
        /// Serialized Name: FileImport.properties.ingestedRecordCount
        /// </param>
        /// <param name="source">
        /// The source for the data in the file.
        /// Serialized Name: FileImport.properties.source
        /// </param>
        /// <param name="state">
        /// The state of the file import.
        /// Serialized Name: FileImport.properties.state
        /// </param>
        /// <param name="totalRecordCount">
        /// The number of records in the file.
        /// Serialized Name: FileImport.properties.totalRecordCount
        /// </param>
        /// <param name="validRecordCount">
        /// The number of records that have passed validation.
        /// Serialized Name: FileImport.properties.validRecordCount
        /// </param>
        /// <param name="filesValidUntil">
        /// The time the files associated with this import are deleted from the storage account.
        /// Serialized Name: FileImport.properties.filesValidUntilTimeUTC
        /// </param>
        /// <param name="importValidUntil">
        /// The time the file import record is soft deleted from the database and history.
        /// Serialized Name: FileImport.properties.importValidUntilTimeUTC
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FileImportData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IngestionMode? ingestionMode, FileImportContentType? contentType, DateTimeOffset? createdOn, FileMetadata errorFile, IReadOnlyList<ValidationError> errorsPreview, FileMetadata importFile, int? ingestedRecordCount, string source, FileImportState? state, int? totalRecordCount, int? validRecordCount, DateTimeOffset? filesValidUntil, DateTimeOffset? importValidUntil, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            IngestionMode = ingestionMode;
            ContentType = contentType;
            CreatedOn = createdOn;
            ErrorFile = errorFile;
            ErrorsPreview = errorsPreview;
            ImportFile = importFile;
            IngestedRecordCount = ingestedRecordCount;
            Source = source;
            State = state;
            TotalRecordCount = totalRecordCount;
            ValidRecordCount = validRecordCount;
            FilesValidUntil = filesValidUntil;
            ImportValidUntil = importValidUntil;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Describes how to ingest the records in the file.
        /// Serialized Name: FileImport.properties.ingestionMode
        /// </summary>
        public IngestionMode? IngestionMode { get; set; }
        /// <summary>
        /// The content type of this file.
        /// Serialized Name: FileImport.properties.contentType
        /// </summary>
        public FileImportContentType? ContentType { get; set; }
        /// <summary>
        /// The time the file was imported.
        /// Serialized Name: FileImport.properties.createdTimeUTC
        /// </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary>
        /// Represents the error file (if the import was ingested with errors or failed the validation).
        /// Serialized Name: FileImport.properties.errorFile
        /// </summary>
        public FileMetadata ErrorFile { get; }
        /// <summary>
        /// An ordered list of some of the errors that were encountered during validation.
        /// Serialized Name: FileImport.properties.errorsPreview
        /// </summary>
        public IReadOnlyList<ValidationError> ErrorsPreview { get; }
        /// <summary>
        /// Represents the imported file.
        /// Serialized Name: FileImport.properties.importFile
        /// </summary>
        public FileMetadata ImportFile { get; set; }
        /// <summary>
        /// The number of records that have been successfully ingested.
        /// Serialized Name: FileImport.properties.ingestedRecordCount
        /// </summary>
        public int? IngestedRecordCount { get; }
        /// <summary>
        /// The source for the data in the file.
        /// Serialized Name: FileImport.properties.source
        /// </summary>
        public string Source { get; set; }
        /// <summary>
        /// The state of the file import.
        /// Serialized Name: FileImport.properties.state
        /// </summary>
        public FileImportState? State { get; }
        /// <summary>
        /// The number of records in the file.
        /// Serialized Name: FileImport.properties.totalRecordCount
        /// </summary>
        public int? TotalRecordCount { get; }
        /// <summary>
        /// The number of records that have passed validation.
        /// Serialized Name: FileImport.properties.validRecordCount
        /// </summary>
        public int? ValidRecordCount { get; }
        /// <summary>
        /// The time the files associated with this import are deleted from the storage account.
        /// Serialized Name: FileImport.properties.filesValidUntilTimeUTC
        /// </summary>
        public DateTimeOffset? FilesValidUntil { get; }
        /// <summary>
        /// The time the file import record is soft deleted from the database and history.
        /// Serialized Name: FileImport.properties.importValidUntilTimeUTC
        /// </summary>
        public DateTimeOffset? ImportValidUntil { get; }
    }
}
