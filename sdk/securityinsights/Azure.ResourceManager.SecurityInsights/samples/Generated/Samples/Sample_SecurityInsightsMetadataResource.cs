// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights.Samples
{
    public partial class Sample_SecurityInsightsMetadataResource
    {
        // Get single metadata by name
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetSingleMetadataByName()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/metadata/GetMetadata.json
            // this example is just showing the usage of "Metadata_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsMetadataResource created on azure
            // for more information of creating SecurityInsightsMetadataResource, please refer to the document of SecurityInsightsMetadataResource
            string subscriptionId = "2e1dc338-d04d-4443-b721-037eff4fdcac";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string metadataName = "metadataName";
            ResourceIdentifier securityInsightsMetadataResourceId = SecurityInsightsMetadataResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, metadataName);
            SecurityInsightsMetadataResource securityInsightsMetadata = client.GetSecurityInsightsMetadataResource(securityInsightsMetadataResourceId);

            // invoke the operation
            SecurityInsightsMetadataResource result = await securityInsightsMetadata.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsMetadataData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete metadata.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteMetadata()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/metadata/DeleteMetadata.json
            // this example is just showing the usage of "Metadata_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsMetadataResource created on azure
            // for more information of creating SecurityInsightsMetadataResource, please refer to the document of SecurityInsightsMetadataResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string metadataName = "metadataName";
            ResourceIdentifier securityInsightsMetadataResourceId = SecurityInsightsMetadataResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, metadataName);
            SecurityInsightsMetadataResource securityInsightsMetadata = client.GetSecurityInsightsMetadataResource(securityInsightsMetadataResourceId);

            // invoke the operation
            await securityInsightsMetadata.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Update metadata.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateMetadata()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/metadata/PatchMetadata.json
            // this example is just showing the usage of "Metadata_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsMetadataResource created on azure
            // for more information of creating SecurityInsightsMetadataResource, please refer to the document of SecurityInsightsMetadataResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string metadataName = "metadataName";
            ResourceIdentifier securityInsightsMetadataResourceId = SecurityInsightsMetadataResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, metadataName);
            SecurityInsightsMetadataResource securityInsightsMetadata = client.GetSecurityInsightsMetadataResource(securityInsightsMetadataResourceId);

            // invoke the operation
            SecurityInsightsMetadataPatch patch = new SecurityInsightsMetadataPatch()
            {
                Author = new SecurityInsightsMetadataAuthor()
                {
                    Name = "User Name",
                    Email = "email@microsoft.com",
                },
            };
            SecurityInsightsMetadataResource result = await securityInsightsMetadata.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsMetadataData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
