// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights.Samples
{
    public partial class Sample_SecurityInsightsFileImportResource
    {
        // Get a file import.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAFileImport()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/fileImports/GetFileImportById.json
            // this example is just showing the usage of "FileImports_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsFileImportResource created on azure
            // for more information of creating SecurityInsightsFileImportResource, please refer to the document of SecurityInsightsFileImportResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string fileImportId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            ResourceIdentifier securityInsightsFileImportResourceId = SecurityInsightsFileImportResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, fileImportId);
            SecurityInsightsFileImportResource securityInsightsFileImport = client.GetSecurityInsightsFileImportResource(securityInsightsFileImportResourceId);

            // invoke the operation
            SecurityInsightsFileImportResource result = await securityInsightsFileImport.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsFileImportData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a file import.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateAFileImport()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/fileImports/CreateFileImport.json
            // this example is just showing the usage of "FileImports_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsFileImportResource created on azure
            // for more information of creating SecurityInsightsFileImportResource, please refer to the document of SecurityInsightsFileImportResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string fileImportId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            ResourceIdentifier securityInsightsFileImportResourceId = SecurityInsightsFileImportResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, fileImportId);
            SecurityInsightsFileImportResource securityInsightsFileImport = client.GetSecurityInsightsFileImportResource(securityInsightsFileImportResourceId);

            // invoke the operation
            SecurityInsightsFileImportData data = new SecurityInsightsFileImportData()
            {
                IngestionMode = IngestionMode.IngestAnyValidRecords,
                ContentType = SecurityInsightsFileImportContentType.StixIndicator,
                ImportFile = new SecurityInsightsFileMetadata()
                {
                    FileFormat = SecurityInsightsFileFormat.Json,
                    FileName = "myFile.json",
                    FileSize = 4653,
                },
                Source = "mySource",
            };
            ArmOperation<SecurityInsightsFileImportResource> lro = await securityInsightsFileImport.UpdateAsync(WaitUntil.Completed, data);
            SecurityInsightsFileImportResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsFileImportData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete a file import.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteAFileImport()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/fileImports/DeleteFileImport.json
            // this example is just showing the usage of "FileImports_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsFileImportResource created on azure
            // for more information of creating SecurityInsightsFileImportResource, please refer to the document of SecurityInsightsFileImportResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string fileImportId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            ResourceIdentifier securityInsightsFileImportResourceId = SecurityInsightsFileImportResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, fileImportId);
            SecurityInsightsFileImportResource securityInsightsFileImport = client.GetSecurityInsightsFileImportResource(securityInsightsFileImportResourceId);

            // invoke the operation
            await securityInsightsFileImport.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
