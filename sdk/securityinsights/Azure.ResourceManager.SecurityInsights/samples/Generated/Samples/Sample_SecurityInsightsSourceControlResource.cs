// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights.Samples
{
    public partial class Sample_SecurityInsightsSourceControlResource
    {
        // Get a source control.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetASourceControl()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/sourcecontrols/GetSourceControlById.json
            // this example is just showing the usage of "SourceControls_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsSourceControlResource created on azure
            // for more information of creating SecurityInsightsSourceControlResource, please refer to the document of SecurityInsightsSourceControlResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string sourceControlId = "789e0c1f-4a3d-43ad-809c-e713b677b04a";
            ResourceIdentifier securityInsightsSourceControlResourceId = SecurityInsightsSourceControlResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sourceControlId);
            SecurityInsightsSourceControlResource securityInsightsSourceControl = client.GetSecurityInsightsSourceControlResource(securityInsightsSourceControlResourceId);

            // invoke the operation
            SecurityInsightsSourceControlResource result = await securityInsightsSourceControl.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsSourceControlData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Creates or updates a source control.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreatesOrUpdatesASourceControl()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/sourcecontrols/CreateSourceControl.json
            // this example is just showing the usage of "SourceControls_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsSourceControlResource created on azure
            // for more information of creating SecurityInsightsSourceControlResource, please refer to the document of SecurityInsightsSourceControlResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string sourceControlId = "789e0c1f-4a3d-43ad-809c-e713b677b04a";
            ResourceIdentifier securityInsightsSourceControlResourceId = SecurityInsightsSourceControlResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sourceControlId);
            SecurityInsightsSourceControlResource securityInsightsSourceControl = client.GetSecurityInsightsSourceControlResource(securityInsightsSourceControlResourceId);

            // invoke the operation
            SecurityInsightsSourceControlData data = new SecurityInsightsSourceControlData("My Source Control", SourceControlRepoType.Github, new SourceControlContentType[]
            {
new SourceControlContentType("AnalyticRules"),SourceControlContentType.Workbook
            }, new SourceControlRepository(new Uri("https://github.com/user/repo"), "master")
            {
                DisplayUri = new Uri("https://github.com/user/repo"),
            })
            {
                Description = "This is a source control",
                RepositoryAccess = new RepositoryAccess(RepositoryAccessKind.OAuth)
                {
                    Code = "939fd7c6caf754f4f41f",
                    State = "state",
                    ClientId = "54b3c2c0-1f48-4a1c-af9f-6399c3240b73",
                },
                ETag = new ETag("\"0300bf09-0000-0000-0000-5c37296e0000\""),
            };
            ArmOperation<SecurityInsightsSourceControlResource> lro = await securityInsightsSourceControl.UpdateAsync(WaitUntil.Completed, data);
            SecurityInsightsSourceControlResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsSourceControlData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete a source control.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteASourceControl()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/sourcecontrols/DeleteSourceControl.json
            // this example is just showing the usage of "SourceControls_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsSourceControlResource created on azure
            // for more information of creating SecurityInsightsSourceControlResource, please refer to the document of SecurityInsightsSourceControlResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string sourceControlId = "789e0c1f-4a3d-43ad-809c-e713b677b04a";
            ResourceIdentifier securityInsightsSourceControlResourceId = SecurityInsightsSourceControlResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sourceControlId);
            SecurityInsightsSourceControlResource securityInsightsSourceControl = client.GetSecurityInsightsSourceControlResource(securityInsightsSourceControlResourceId);

            // invoke the operation
            RepositoryAccessProperties repositoryAccess = new RepositoryAccessProperties(RepositoryAccessKind.OAuth)
            {
                Code = "939fd7c6caf754f4f41f",
                State = "state",
                ClientId = "54b3c2c0-1f48-4a1c-af9f-6399c3240b73",
            };
            SourceControlOperationWarning result = await securityInsightsSourceControl.DeleteAsync(repositoryAccess);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
