// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights.Samples
{
    public partial class Sample_SecurityInsightsPackageResource
    {
        // Get installed packages by id.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetInstalledPackagesById()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/contentPackages/GetPackageById.json
            // this example is just showing the usage of "ContentPackages_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsPackageResource created on azure
            // for more information of creating SecurityInsightsPackageResource, please refer to the document of SecurityInsightsPackageResource
            string subscriptionId = "d0cfeab2-9ae0-4464-9919-dccaee2e48f0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string packageId = "str.azure-sentinel-solution-str";
            ResourceIdentifier securityInsightsPackageResourceId = SecurityInsightsPackageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, packageId);
            SecurityInsightsPackageResource securityInsightsPackage = client.GetSecurityInsightsPackageResource(securityInsightsPackageResourceId);

            // invoke the operation
            SecurityInsightsPackageResource result = await securityInsightsPackage.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsPackageData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Install a package to the workspace.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_InstallAPackageToTheWorkspace()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/contentPackages/InstallPackage.json
            // this example is just showing the usage of "ContentPackage_Install" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsPackageResource created on azure
            // for more information of creating SecurityInsightsPackageResource, please refer to the document of SecurityInsightsPackageResource
            string subscriptionId = "d0cfeab2-9ae0-4464-9919-dccaee2e48f0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string packageId = "str.azure-sentinel-solution-str";
            ResourceIdentifier securityInsightsPackageResourceId = SecurityInsightsPackageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, packageId);
            SecurityInsightsPackageResource securityInsightsPackage = client.GetSecurityInsightsPackageResource(securityInsightsPackageResourceId);

            // invoke the operation
            SecurityInsightsPackageData data = new SecurityInsightsPackageData()
            {
                ContentId = "str.azure-sentinel-solution-str",
                ContentProductId = "str.azure-sentinel-solution-str-sl-igl6jawr4gwmu",
                ContentKind = SecurityInsightsMetadataPackageKind.Solution,
                Version = "2.0.0",
                DisplayName = "str",
            };
            ArmOperation<SecurityInsightsPackageResource> lro = await securityInsightsPackage.UpdateAsync(WaitUntil.Completed, data);
            SecurityInsightsPackageResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsPackageData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Uninstall a package from the workspace.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_UninstallAPackageFromTheWorkspace()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/contentPackages/UninstallPackage.json
            // this example is just showing the usage of "ContentPackage_Uninstall" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsPackageResource created on azure
            // for more information of creating SecurityInsightsPackageResource, please refer to the document of SecurityInsightsPackageResource
            string subscriptionId = "d0cfeab2-9ae0-4464-9919-dccaee2e48f0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string packageId = "str.azure-sentinel-solution-str";
            ResourceIdentifier securityInsightsPackageResourceId = SecurityInsightsPackageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, packageId);
            SecurityInsightsPackageResource securityInsightsPackage = client.GetSecurityInsightsPackageResource(securityInsightsPackageResourceId);

            // invoke the operation
            await securityInsightsPackage.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
