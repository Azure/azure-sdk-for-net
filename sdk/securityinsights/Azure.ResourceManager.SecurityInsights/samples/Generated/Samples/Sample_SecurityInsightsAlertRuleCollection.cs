// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using System.Xml;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights.Samples
{
    public partial class Sample_SecurityInsightsAlertRuleCollection
    {
        // Get all alert rules.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GetAllAlertRules()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetAllAlertRules.json
            // this example is just showing the usage of "AlertRules_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation and iterate over the result
            await foreach (SecurityInsightsAlertRuleResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SecurityInsightsAlertRuleData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get a Fusion alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAFusionAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetFusionAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "myFirstFusionRule";
            SecurityInsightsAlertRuleResource result = await collection.GetAsync(ruleId);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsAlertRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get a Fusion alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetAFusionAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetFusionAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "myFirstFusionRule";
            bool result = await collection.ExistsAsync(ruleId);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get a Fusion alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GetAFusionAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetFusionAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "myFirstFusionRule";
            NullableResponse<SecurityInsightsAlertRuleResource> response = await collection.GetIfExistsAsync(ruleId);
            SecurityInsightsAlertRuleResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SecurityInsightsAlertRuleData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Get a MicrosoftSecurityIncidentCreation rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAMicrosoftSecurityIncidentCreationRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetMicrosoftSecurityIncidentCreationAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "microsoftSecurityIncidentCreationRuleExample";
            SecurityInsightsAlertRuleResource result = await collection.GetAsync(ruleId);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsAlertRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get a MicrosoftSecurityIncidentCreation rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetAMicrosoftSecurityIncidentCreationRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetMicrosoftSecurityIncidentCreationAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "microsoftSecurityIncidentCreationRuleExample";
            bool result = await collection.ExistsAsync(ruleId);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get a MicrosoftSecurityIncidentCreation rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GetAMicrosoftSecurityIncidentCreationRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetMicrosoftSecurityIncidentCreationAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "microsoftSecurityIncidentCreationRuleExample";
            NullableResponse<SecurityInsightsAlertRuleResource> response = await collection.GetIfExistsAsync(ruleId);
            SecurityInsightsAlertRuleResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SecurityInsightsAlertRuleData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Get a Scheduled alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAScheduledAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetScheduledAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            SecurityInsightsAlertRuleResource result = await collection.GetAsync(ruleId);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsAlertRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get a Scheduled alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetAScheduledAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetScheduledAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            bool result = await collection.ExistsAsync(ruleId);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get a Scheduled alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GetAScheduledAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetScheduledAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            NullableResponse<SecurityInsightsAlertRuleResource> response = await collection.GetIfExistsAsync(ruleId);
            SecurityInsightsAlertRuleResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SecurityInsightsAlertRuleData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Get an Nrt alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAnNrtAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetNrtAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            SecurityInsightsAlertRuleResource result = await collection.GetAsync(ruleId);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsAlertRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get an Nrt alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetAnNrtAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetNrtAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            bool result = await collection.ExistsAsync(ruleId);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get an Nrt alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GetAnNrtAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/GetNrtAlertRule.json
            // this example is just showing the usage of "AlertRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            NullableResponse<SecurityInsightsAlertRuleResource> response = await collection.GetIfExistsAsync(ruleId);
            SecurityInsightsAlertRuleResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SecurityInsightsAlertRuleData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Creates or updates a Fusion alert rule with scenario exclusion pattern.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreatesOrUpdatesAFusionAlertRuleWithScenarioExclusionPattern()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/CreateFusionAlertRuleWithFusionScenarioExclusion.json
            // this example is just showing the usage of "AlertRules_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "myFirstFusionRule";
            SecurityInsightsAlertRuleData data = new SecurityInsightsFusionAlertRule()
            {
                AlertRuleTemplateName = "f71aba3d-28fb-450b-b192-4e76a83015c8",
                IsEnabled = true,
                SourceSettings =
{
new FusionSourceSettings(true,"Anomalies")
{
SourceSubTypes =
{
},
},new FusionSourceSettings(true,"Alert providers")
{
SourceSubTypes =
{
new FusionSourceSubTypeSetting(true,"Azure Active Directory Identity Protection",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Azure Defender",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Azure Defender for IoT",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Microsoft 365 Defender",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Microsoft Cloud App Security",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Microsoft Defender for Endpoint",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Microsoft Defender for Identity",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Microsoft Defender for Office 365",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Azure Sentinel scheduled analytics rules",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
})
},
},new FusionSourceSettings(true,"Raw logs from other sources")
{
SourceSubTypes =
{
new FusionSourceSubTypeSetting(true,"Palo Alto Networks",new FusionSubTypeSeverityFilter()
{
Filters =
{
},
})
},
}
},
                ETag = new ETag("3d00c3ca-0000-0100-0000-5d42d5010000"),
            };
            ArmOperation<SecurityInsightsAlertRuleResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, ruleId, data);
            SecurityInsightsAlertRuleResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsAlertRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Creates or updates a Fusion alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreatesOrUpdatesAFusionAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/CreateFusionAlertRule.json
            // this example is just showing the usage of "AlertRules_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "myFirstFusionRule";
            SecurityInsightsAlertRuleData data = new SecurityInsightsFusionAlertRule()
            {
                AlertRuleTemplateName = "f71aba3d-28fb-450b-b192-4e76a83015c8",
                IsEnabled = true,
                SourceSettings =
{
new FusionSourceSettings(true,"Anomalies")
{
SourceSubTypes =
{
},
},new FusionSourceSettings(true,"Alert providers")
{
SourceSubTypes =
{
new FusionSourceSubTypeSetting(true,"Azure Active Directory Identity Protection",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Azure Defender",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Azure Defender for IoT",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Microsoft 365 Defender",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Microsoft Cloud App Security",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Microsoft Defender for Endpoint",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Microsoft Defender for Identity",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Microsoft Defender for Office 365",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
}),new FusionSourceSubTypeSetting(true,"Azure Sentinel scheduled analytics rules",new FusionSubTypeSeverityFilter()
{
Filters =
{
new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.High,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Medium,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Low,true),new FusionSubTypeSeverityFiltersItem(SecurityInsightsAlertSeverity.Informational,true)
},
})
},
},new FusionSourceSettings(true,"Raw logs from other sources")
{
SourceSubTypes =
{
new FusionSourceSubTypeSetting(true,"Palo Alto Networks",new FusionSubTypeSeverityFilter()
{
Filters =
{
},
})
},
}
},
                ETag = new ETag("3d00c3ca-0000-0100-0000-5d42d5010000"),
            };
            ArmOperation<SecurityInsightsAlertRuleResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, ruleId, data);
            SecurityInsightsAlertRuleResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsAlertRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Creates or updates a MicrosoftSecurityIncidentCreation rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreatesOrUpdatesAMicrosoftSecurityIncidentCreationRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/CreateMicrosoftSecurityIncidentCreationAlertRule.json
            // this example is just showing the usage of "AlertRules_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "microsoftSecurityIncidentCreationRuleExample";
            SecurityInsightsAlertRuleData data = new MicrosoftSecurityIncidentCreationAlertRule()
            {
                ProductFilter = MicrosoftSecurityProductName.MicrosoftCloudAppSecurity,
                DisplayName = "testing displayname",
                IsEnabled = true,
                ETag = new ETag("\"260097e0-0000-0d00-0000-5d6fa88f0000\""),
            };
            ArmOperation<SecurityInsightsAlertRuleResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, ruleId, data);
            SecurityInsightsAlertRuleResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsAlertRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Creates or updates a Nrt alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreatesOrUpdatesANrtAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/CreateNrtAlertRule.json
            // this example is just showing the usage of "AlertRules_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            SecurityInsightsAlertRuleData data = new NrtAlertRule()
            {
                Description = "",
                Query = "ProtectionStatus | extend HostCustomEntity = Computer | extend IPCustomEntity = ComputerIP_Hidden",
                Tactics =
{
SecurityInsightsAttackTactic.Persistence,SecurityInsightsAttackTactic.LateralMovement
},
                Techniques =
{
"T1037","T1021"
},
                DisplayName = "Rule2",
                IsEnabled = true,
                SuppressionDuration = XmlConvert.ToTimeSpan("PT1H"),
                IsSuppressionEnabled = false,
                Severity = SecurityInsightsAlertSeverity.High,
                IncidentConfiguration = new SecurityInsightsIncidentConfiguration(true)
                {
                    GroupingConfiguration = new SecurityInsightsGroupingConfiguration(true, false, XmlConvert.ToTimeSpan("PT5H"), SecurityInsightsGroupingMatchingMethod.Selected)
                    {
                        GroupByEntities =
{
SecurityInsightsAlertRuleEntityMappingType.Host,SecurityInsightsAlertRuleEntityMappingType.Account
},
                    },
                },
                EventGroupingAggregationKind = EventGroupingAggregationKind.AlertPerResult,
                ETag = new ETag("\"0300bf09-0000-0000-0000-5c37296e0000\""),
            };
            ArmOperation<SecurityInsightsAlertRuleResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, ruleId, data);
            SecurityInsightsAlertRuleResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsAlertRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Creates or updates a Scheduled alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreatesOrUpdatesAScheduledAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/alertRules/CreateScheduledAlertRule.json
            // this example is just showing the usage of "AlertRules_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsAlertRuleResource
            SecurityInsightsAlertRuleCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsAlertRules();

            // invoke the operation
            string ruleId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            SecurityInsightsAlertRuleData data = new SecurityInsightsScheduledAlertRule()
            {
                Query = "Heartbeat",
                QueryFrequency = XmlConvert.ToTimeSpan("PT1H"),
                QueryPeriod = XmlConvert.ToTimeSpan("P2DT1H30M"),
                Severity = SecurityInsightsAlertSeverity.High,
                TriggerOperator = SecurityInsightsAlertRuleTriggerOperator.GreaterThan,
                TriggerThreshold = 0,
                EventGroupingAggregationKind = EventGroupingAggregationKind.AlertPerResult,
                CustomDetails =
{
["OperatingSystemName"] = "OSName",
["OperatingSystemType"] = "OSType",
},
                EntityMappings =
{
new SecurityInsightsAlertRuleEntityMapping()
{
EntityType = SecurityInsightsAlertRuleEntityMappingType.Host,
FieldMappings =
{
new SecurityInsightsFieldMapping()
{
Identifier = "FullName",
ColumnName = "Computer",
}
},
},new SecurityInsightsAlertRuleEntityMapping()
{
EntityType = SecurityInsightsAlertRuleEntityMappingType.IP,
FieldMappings =
{
new SecurityInsightsFieldMapping()
{
Identifier = "Address",
ColumnName = "ComputerIP",
}
},
}
},
                AlertDetailsOverride = new SecurityInsightsAlertDetailsOverride()
                {
                    AlertDisplayNameFormat = "Alert from {{Computer}}",
                    AlertDescriptionFormat = "Suspicious activity was made by {{ComputerIP}}",
                    AlertDynamicProperties =
{
new SecurityInsightsAlertPropertyMapping()
{
AlertProperty = SecurityInsightsAlertProperty.ProductComponentName,
Value = "ProductComponentNameCustomColumn",
},new SecurityInsightsAlertPropertyMapping()
{
AlertProperty = SecurityInsightsAlertProperty.ProductName,
Value = "ProductNameCustomColumn",
},new SecurityInsightsAlertPropertyMapping()
{
AlertProperty = SecurityInsightsAlertProperty.AlertLink,
Value = "Link",
}
},
                },
                SentinelEntitiesMappings =
{
new SentinelEntityMapping()
{
ColumnName = "Entities",
}
},
                Description = "An example for a scheduled rule",
                DisplayName = "My scheduled rule",
                IsEnabled = true,
                SuppressionDuration = XmlConvert.ToTimeSpan("PT1H"),
                IsSuppressionEnabled = false,
                Tactics =
{
SecurityInsightsAttackTactic.Persistence,SecurityInsightsAttackTactic.LateralMovement
},
                Techniques =
{
"T1037","T1021"
},
                IncidentConfiguration = new SecurityInsightsIncidentConfiguration(true)
                {
                    GroupingConfiguration = new SecurityInsightsGroupingConfiguration(true, false, XmlConvert.ToTimeSpan("PT5H"), SecurityInsightsGroupingMatchingMethod.Selected)
                    {
                        GroupByEntities =
{
SecurityInsightsAlertRuleEntityMappingType.Host
},
                        GroupByAlertDetails =
{
SecurityInsightsAlertDetail.DisplayName
},
                        GroupByCustomDetails =
{
"OperatingSystemType","OperatingSystemName"
},
                    },
                },
                ETag = new ETag("\"0300bf09-0000-0000-0000-5c37296e0000\""),
            };
            ArmOperation<SecurityInsightsAlertRuleResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, ruleId, data);
            SecurityInsightsAlertRuleResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsAlertRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
