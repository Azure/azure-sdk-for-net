// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights.Samples
{
    public partial class Sample_SecurityInsightsThreatIntelligenceIndicatorCollection
    {
        // Get all threat intelligence indicators
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GetAllThreatIntelligenceIndicators()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/threatintelligence/GetThreatIntelligence.json
            // this example is just showing the usage of "ThreatIntelligenceIndicators_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "bd794837-4d29-4647-9105-6339bfdb4e6a";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsThreatIntelligenceIndicatorResource
            SecurityInsightsThreatIntelligenceIndicatorCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsThreatIntelligenceIndicators();

            // invoke the operation and iterate over the result
            await foreach (SecurityInsightsThreatIntelligenceIndicatorResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SecurityInsightsThreatIntelligenceIndicatorBaseData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // View a threat intelligence indicator by name
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ViewAThreatIntelligenceIndicatorByName()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/threatintelligence/GetThreatIntelligenceById.json
            // this example is just showing the usage of "ThreatIntelligenceIndicators_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "bd794837-4d29-4647-9105-6339bfdb4e6a";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsThreatIntelligenceIndicatorResource
            SecurityInsightsThreatIntelligenceIndicatorCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsThreatIntelligenceIndicators();

            // invoke the operation
            string name = "e16ef847-962e-d7b6-9c8b-a33e4bd30e47";
            SecurityInsightsThreatIntelligenceIndicatorResource result = await collection.GetAsync(name);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsThreatIntelligenceIndicatorBaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // View a threat intelligence indicator by name
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_ViewAThreatIntelligenceIndicatorByName()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/threatintelligence/GetThreatIntelligenceById.json
            // this example is just showing the usage of "ThreatIntelligenceIndicators_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "bd794837-4d29-4647-9105-6339bfdb4e6a";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsThreatIntelligenceIndicatorResource
            SecurityInsightsThreatIntelligenceIndicatorCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsThreatIntelligenceIndicators();

            // invoke the operation
            string name = "e16ef847-962e-d7b6-9c8b-a33e4bd30e47";
            bool result = await collection.ExistsAsync(name);

            Console.WriteLine($"Succeeded: {result}");
        }

        // View a threat intelligence indicator by name
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_ViewAThreatIntelligenceIndicatorByName()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/threatintelligence/GetThreatIntelligenceById.json
            // this example is just showing the usage of "ThreatIntelligenceIndicators_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "bd794837-4d29-4647-9105-6339bfdb4e6a";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsThreatIntelligenceIndicatorResource
            SecurityInsightsThreatIntelligenceIndicatorCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsThreatIntelligenceIndicators();

            // invoke the operation
            string name = "e16ef847-962e-d7b6-9c8b-a33e4bd30e47";
            NullableResponse<SecurityInsightsThreatIntelligenceIndicatorResource> response = await collection.GetIfExistsAsync(name);
            SecurityInsightsThreatIntelligenceIndicatorResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SecurityInsightsThreatIntelligenceIndicatorBaseData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Update a threat Intelligence indicator
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_UpdateAThreatIntelligenceIndicator()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/threatintelligence/UpdateThreatIntelligence.json
            // this example is just showing the usage of "ThreatIntelligenceIndicators_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "bd794837-4d29-4647-9105-6339bfdb4e6a";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsThreatIntelligenceIndicatorResource
            SecurityInsightsThreatIntelligenceIndicatorCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsThreatIntelligenceIndicators();

            // invoke the operation
            string name = "d9cd6f0b-96b9-3984-17cd-a779d1e15a93";
            SecurityInsightsThreatIntelligenceIndicatorData content = new SecurityInsightsThreatIntelligenceIndicatorData()
            {
                ThreatIntelligenceTags =
{
"new schema"
},
                Source = "Azure Sentinel",
                DisplayName = "new schema",
                Description = "debugging indicators",
                Pattern = "[url:value = 'https://www.contoso.com']",
                PatternType = "url",
                KillChainPhases =
{
},
                CreatedByRef = "contoso@contoso.com",
                ExternalReferences =
{
},
                GranularMarkings =
{
},
                Labels =
{
},
                IsRevoked = false,
                Confidence = 78,
                ThreatTypes =
{
"compromised"
},
                ValidFrom = DateTimeOffset.Parse("2020-04-15T17:44:00.114052Z"),
                ValidUntil = DateTimeOffset.Parse(""),
                Modified = "",
            };
            ArmOperation<SecurityInsightsThreatIntelligenceIndicatorResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, name, content);
            SecurityInsightsThreatIntelligenceIndicatorResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsThreatIntelligenceIndicatorBaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
