// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights.Samples
{
    public partial class Sample_SecurityInsightsAlertRuleActionResource
    {
        // Get an action of alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAnActionOfAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/actions/GetActionOfAlertRuleById.json
            // this example is just showing the usage of "Actions_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsAlertRuleActionResource created on azure
            // for more information of creating SecurityInsightsAlertRuleActionResource, please refer to the document of SecurityInsightsAlertRuleActionResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string ruleId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            string actionId = "912bec42-cb66-4c03-ac63-1761b6898c3e";
            ResourceIdentifier securityInsightsAlertRuleActionResourceId = SecurityInsightsAlertRuleActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, ruleId, actionId);
            SecurityInsightsAlertRuleActionResource securityInsightsAlertRuleAction = client.GetSecurityInsightsAlertRuleActionResource(securityInsightsAlertRuleActionResourceId);

            // invoke the operation
            SecurityInsightsAlertRuleActionResource result = await securityInsightsAlertRuleAction.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsAlertRuleActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Creates or updates an action of alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreatesOrUpdatesAnActionOfAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/actions/CreateActionOfAlertRule.json
            // this example is just showing the usage of "Actions_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsAlertRuleActionResource created on azure
            // for more information of creating SecurityInsightsAlertRuleActionResource, please refer to the document of SecurityInsightsAlertRuleActionResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string ruleId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            string actionId = "912bec42-cb66-4c03-ac63-1761b6898c3e";
            ResourceIdentifier securityInsightsAlertRuleActionResourceId = SecurityInsightsAlertRuleActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, ruleId, actionId);
            SecurityInsightsAlertRuleActionResource securityInsightsAlertRuleAction = client.GetSecurityInsightsAlertRuleActionResource(securityInsightsAlertRuleActionResourceId);

            // invoke the operation
            SecurityInsightsAlertRuleActionCreateOrUpdateContent content = new SecurityInsightsAlertRuleActionCreateOrUpdateContent()
            {
                LogicAppResourceId = new ResourceIdentifier("/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.Logic/workflows/MyAlerts"),
                TriggerUri = new Uri("https://prod-31.northcentralus.logic.azure.com:443/workflows/cd3765391efd48549fd7681ded1d48d7/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=signature"),
                ETag = new ETag("\"0300bf09-0000-0000-0000-5c37296e0000\""),
            };
            ArmOperation<SecurityInsightsAlertRuleActionResource> lro = await securityInsightsAlertRuleAction.UpdateAsync(WaitUntil.Completed, content);
            SecurityInsightsAlertRuleActionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsAlertRuleActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete an action of alert rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteAnActionOfAlertRule()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/actions/DeleteActionOfAlertRule.json
            // this example is just showing the usage of "Actions_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SecurityInsightsAlertRuleActionResource created on azure
            // for more information of creating SecurityInsightsAlertRuleActionResource, please refer to the document of SecurityInsightsAlertRuleActionResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            string ruleId = "73e01a99-5cd7-4139-a149-9f2736ff2ab5";
            string actionId = "912bec42-cb66-4c03-ac63-1761b6898c3e";
            ResourceIdentifier securityInsightsAlertRuleActionResourceId = SecurityInsightsAlertRuleActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, ruleId, actionId);
            SecurityInsightsAlertRuleActionResource securityInsightsAlertRuleAction = client.GetSecurityInsightsAlertRuleActionResource(securityInsightsAlertRuleActionResourceId);

            // invoke the operation
            await securityInsightsAlertRuleAction.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
