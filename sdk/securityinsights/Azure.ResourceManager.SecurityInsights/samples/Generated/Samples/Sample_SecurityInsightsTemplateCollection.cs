// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights.Samples
{
    public partial class Sample_SecurityInsightsTemplateCollection
    {
        // Get all installed templates.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GetAllInstalledTemplates()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/contentTemplates/GetTemplates.json
            // this example is just showing the usage of "ContentTemplates_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfeab2-9ae0-4464-9919-dccaee2e48f0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsTemplateResource
            SecurityInsightsTemplateCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsTemplates();

            // invoke the operation and iterate over the result
            SecurityInsightsTemplateCollectionGetAllOptions options = new SecurityInsightsTemplateCollectionGetAllOptions() { };
            await foreach (SecurityInsightsTemplateResource item in collection.GetAllAsync(options))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SecurityInsightsTemplateData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get a template.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_GetATemplate()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/contentTemplates/InstallTemplate.json
            // this example is just showing the usage of "ContentTemplate_Install" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfeab2-9ae0-4464-9919-dccaee2e48f0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsTemplateResource
            SecurityInsightsTemplateCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsTemplates();

            // invoke the operation
            string templateId = "str.azure-sentinel-solution-str";
            SecurityInsightsTemplateData data = new SecurityInsightsTemplateData()
            {
                ContentId = "8365ebfe-a381-45b7-ad08-7d818070e11f",
                ContentProductId = "str.azure-sentinel-solution-str-ar-cbfe4fndz66bi",
                PackageVersion = "1.0.0",
                Version = "1.0.1",
                DisplayName = "API Protection workbook template",
                ContentKind = SecurityInsightsKind.AnalyticsRule,
                Source = new SecurityInsightsMetadataSource(SecurityInsightsSourceKind.Solution)
                {
                    Name = "str",
                    SourceId = "str.azure-sentinel-solution-str",
                },
                Author = new SecurityInsightsMetadataAuthor()
                {
                    Name = "Microsoft",
                    Email = "support@microsoft.com",
                },
                Support = new SecurityInsightsMetadataSupport(SecurityInsightsSupportTier.Microsoft)
                {
                    Name = "Microsoft Corporation",
                    Email = "support@microsoft.com",
                    Link = "https://support.microsoft.com/",
                },
                PackageId = "str.azure-sentinel-solution-str",
                PackageKind = SecurityInsightsMetadataPackageKind.Solution,
                PackageName = "str",
                MainTemplate = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
                {
                    ["$schema"] = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    ["contentVersion"] = "1.0.1",
                    ["resources"] = new object[] { new Dictionary<string, object>()
{
["name"] = "8365ebfe-a381-45b7-ad08-7d818070e11f",
["type"] = "Microsoft.SecurityInsights/AlertRuleTemplates",
["apiVersion"] = "2022-04-01-preview",
["kind"] = "Scheduled",
["location"] = "[parameters('workspace-location')]",
["properties"] = new Dictionary<string, object>()
{
["description"] = "Creates an incident when a large number of Critical/High severity CrowdStrike Falcon sensor detections is triggered by a single user",
["displayName"] = "Critical or High Severity Detections by User",
["enabled"] = "false",
["query"] = "...",
["queryFrequency"] = "PT1H",
["queryPeriod"] = "PT1H",
["severity"] = "High",
["status"] = "Available",
["suppressionDuration"] = "PT1H",
["suppressionEnabled"] = "false",
["triggerOperator"] = "GreaterThan",
["triggerThreshold"] = "0"}}, new Dictionary<string, object>()
{
["name"] = "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split([resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 8365ebfe-a381-45b7-ad08-7d818070e11f)],'/'))))]",
["type"] = "Microsoft.OperationalInsights/workspaces/providers/metadata",
["apiVersion"] = "2022-01-01-preview",
["properties"] = new Dictionary<string, object>()
{
["description"] = "CrowdStrike Falcon Endpoint Protection Analytics Rule 1",
["author"] = new Dictionary<string, object>()
{
["name"] = "Microsoft",
["email"] = "support@microsoft.com"},
["contentId"] = "4465ebde-b381-45f7-ad08-7d818070a11c",
["kind"] = "AnalyticsRule",
["parentId"] = "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 8365ebfe-a381-45b7-ad08-7d818070e11f)]",
["source"] = new Dictionary<string, object>()
{
["name"] = "str",
["kind"] = "Solution",
["sourceId"] = "str.azure-sentinel-solution-str"},
["support"] = new Dictionary<string, object>()
{
["name"] = "Microsoft Corporation",
["email"] = "support@microsoft.com",
["link"] = "https://support.microsoft.com/",
["tier"] = "Microsoft"},
["version"] = "1.0.0"}} }
                }),
            };
            ArmOperation<SecurityInsightsTemplateResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, templateId, data);
            SecurityInsightsTemplateResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get a template.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetATemplate()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/contentTemplates/GetTemplateById.json
            // this example is just showing the usage of "ContentTemplate_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfeab2-9ae0-4464-9919-dccaee2e48f0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsTemplateResource
            SecurityInsightsTemplateCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsTemplates();

            // invoke the operation
            string templateId = "8365ebfe-a381-45b7-ad08-7d818070e11f";
            SecurityInsightsTemplateResource result = await collection.GetAsync(templateId);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SecurityInsightsTemplateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get a template.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetATemplate()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/contentTemplates/GetTemplateById.json
            // this example is just showing the usage of "ContentTemplate_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfeab2-9ae0-4464-9919-dccaee2e48f0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsTemplateResource
            SecurityInsightsTemplateCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsTemplates();

            // invoke the operation
            string templateId = "8365ebfe-a381-45b7-ad08-7d818070e11f";
            bool result = await collection.ExistsAsync(templateId);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get a template.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GetATemplate()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/contentTemplates/GetTemplateById.json
            // this example is just showing the usage of "ContentTemplate_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfeab2-9ae0-4464-9919-dccaee2e48f0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // get the collection of this SecurityInsightsTemplateResource
            SecurityInsightsTemplateCollection collection = operationalInsightsWorkspaceSecurityInsights.GetSecurityInsightsTemplates();

            // invoke the operation
            string templateId = "8365ebfe-a381-45b7-ad08-7d818070e11f";
            NullableResponse<SecurityInsightsTemplateResource> response = await collection.GetIfExistsAsync(templateId);
            SecurityInsightsTemplateResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SecurityInsightsTemplateData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
