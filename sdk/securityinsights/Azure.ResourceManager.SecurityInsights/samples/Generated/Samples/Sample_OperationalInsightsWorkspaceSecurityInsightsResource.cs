// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights.Samples
{
    public partial class Sample_OperationalInsightsWorkspaceSecurityInsightsResource
    {
        // Get geodata for a single IP address
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetGeodataByIP_GetGeodataForASingleIPAddress()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/enrichment/GetGeodataWithWorkspaceByIp.json
            // this example is just showing the usage of "ListGeodataByIP" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "bd794837-4d29-4647-9105-6339bfdb4e6a";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            EnrichmentType enrichmentType = EnrichmentType.Main;
            EnrichmentIPAddressContent content = new EnrichmentIPAddressContent()
            {
                IPAddress = "1.2.3.4",
            };
            WorkspaceEnrichmentIPGeodata result = await operationalInsightsWorkspaceSecurityInsights.GetGeodataByIPAsync(enrichmentType, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get whois information for a single domain name
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetWhoisByDomain_GetWhoisInformationForASingleDomainName()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/enrichment/GetWhoisWithWorkspaceByDomainName.json
            // this example is just showing the usage of "ListWhoisByDomain" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "bd794837-4d29-4647-9105-6339bfdb4e6a";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            EnrichmentType enrichmentType = EnrichmentType.Main;
            EnrichmentDomainContent content = new EnrichmentDomainContent()
            {
                Domain = "microsoft.com",
            };
            EnrichmentDomainWhois result = await operationalInsightsWorkspaceSecurityInsights.GetWhoisByDomainAsync(enrichmentType, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get repository list.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetRepositoriesSourceControls_GetRepositoryList()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/repositories/GetRepositories.json
            // this example is just showing the usage of "SourceControl_ListRepositories" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation and iterate over the result
            RepositoryAccessProperties repositoryAccess = new RepositoryAccessProperties(RepositoryAccessKind.OAuth)
            {
                Code = "939fd7c6caf754f4f41f",
                State = "state",
                ClientId = "54b3c2c0-1f48-4a1c-af9f-6399c3240b73",
            };
            await foreach (SourceControlRepo item in operationalInsightsWorkspaceSecurityInsights.GetRepositoriesSourceControlsAsync(repositoryAccess))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Query threat intelligence indicators as per filtering criteria
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task QueryThreatIntelligenceIndicators_QueryThreatIntelligenceIndicatorsAsPerFilteringCriteria()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/threatintelligence/QueryThreatIntelligence.json
            // this example is just showing the usage of "ThreatIntelligenceIndicator_QueryIndicators" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "bd794837-4d29-4647-9105-6339bfdb4e6a";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation and iterate over the result
            ThreatIntelligenceFilteringCriteria threatIntelligenceFilteringCriteria = new ThreatIntelligenceFilteringCriteria()
            {
                PageSize = 100,
                MinConfidence = 25,
                MaxConfidence = 80,
                MinValidUntil = DateTimeOffset.Parse("2021-04-05T17:44:00.114052Z"),
                MaxValidUntil = DateTimeOffset.Parse("2021-04-25T17:44:00.114052Z"),
                SortBy =
{
new ThreatIntelligenceSortingCriteria()
{
ItemKey = "lastUpdatedTimeUtc",
SortOrder = ThreatIntelligenceSortingOrder.Descending,
}
},
                Sources =
{
"Azure Sentinel"
},
            };
            await foreach (SecurityInsightsThreatIntelligenceIndicatorResource item in operationalInsightsWorkspaceSecurityInsights.QueryThreatIntelligenceIndicatorsAsync(threatIntelligenceFilteringCriteria))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SecurityInsightsThreatIntelligenceIndicatorBaseData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get threat intelligence indicators metrics.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAllThreatIntelligenceIndicatorMetrics_GetThreatIntelligenceIndicatorsMetrics()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/threatintelligence/CollectThreatIntelligenceMetrics.json
            // this example is just showing the usage of "ThreatIntelligenceIndicatorMetrics_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "bd794837-4d29-4647-9105-6339bfdb4e6a";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation and iterate over the result
            await foreach (ThreatIntelligenceMetrics item in operationalInsightsWorkspaceSecurityInsights.GetAllThreatIntelligenceIndicatorMetricsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get TI object count
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CountThreatIntelligence_GetTIObjectCount()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/threatintelligence/PostThreatIntelligenceCount.json
            // this example is just showing the usage of "ThreatIntelligence_Count" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "bd794837-4d29-4647-9105-6339bfdb4e6a";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            ThreatIntelligenceType tiType = ThreatIntelligenceType.Main;
            ThreatIntelligenceCountQuery query = new ThreatIntelligenceCountQuery();
            ThreatIntelligenceCount result = await operationalInsightsWorkspaceSecurityInsights.CountThreatIntelligenceAsync(tiType, query: query);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for AADIP (Azure Active Directory Identity Protection) - no authorization.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForAADIPAzureActiveDirectoryIdentityProtectionNoAuthorization()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectoryNoAuthorization.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new AadCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for AADIP (Azure Active Directory Identity Protection) - no license.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForAADIPAzureActiveDirectoryIdentityProtectionNoLicense()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectoryNoLicense.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new AadCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for AADIP (Azure Active Directory Identity Protection).
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForAADIPAzureActiveDirectoryIdentityProtection()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsAzureActiveDirectory.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new AadCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for ASC.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForASC()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsAzureSecurityCenter.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new AscCheckRequirements()
            {
                SubscriptionId = "c0688291-89d7-4bed-87a2-a7b1bff43f4c",
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for Dynamics365.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForDynamics365()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsDynamics365.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new Dynamics365CheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for IoT.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForIoT()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsIoT.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new IotCheckRequirements()
            {
                SubscriptionId = "c0688291-89d7-4bed-87a2-a7b1bff43f4c",
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for Mcas.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForMcas()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftCloudAppSecurity.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new McasCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for Mdatp.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForMdatp()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsMdatp.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new McasCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for MicrosoftPurviewInformationProtection.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForMicrosoftPurviewInformationProtection()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftPurviewInformationProtection.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new MicrosoftPurviewInformationProtectionCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for MicrosoftThreatIntelligence.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForMicrosoftThreatIntelligence()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftThreatIntelligence.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new MstiCheckRequirements()
            {
                TenantId = Guid.Parse("06b3ccb8-1384-4bcc-aec7-852f6d57161b"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for MicrosoftThreatProtection.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForMicrosoftThreatProtection()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsMicrosoftThreatProtection.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new MtpCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for Office365Project.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForOffice365Project()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsOffice365Project.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new Office365ProjectCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for OfficeATP.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForOfficeATP()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsOfficeATP.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new OfficeAtpCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for OfficeIRM.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForOfficeIRM()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsOfficeIRM.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new OfficeIrmCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for OfficePowerBI.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForOfficePowerBI()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsOfficePowerBI.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new OfficePowerBICheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for TI Taxii.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForTITaxii()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsThreatIntelligenceTaxii.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new ThreatIntelligenceTaxiiCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Check requirements for TI.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostDataConnectorsCheckRequirement_CheckRequirementsForTI()
        {
            // Generated from example definition: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/preview/2024-01-01-preview/examples/dataConnectors/CheckRequirementsThreatIntelligence.json
            // this example is just showing the usage of "DataConnectorsCheckRequirements_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OperationalInsightsWorkspaceSecurityInsightsResource created on azure
            // for more information of creating OperationalInsightsWorkspaceSecurityInsightsResource, please refer to the document of OperationalInsightsWorkspaceSecurityInsightsResource
            string subscriptionId = "d0cfe6b2-9ac0-4464-9919-dccaee2e48c0";
            string resourceGroupName = "myRg";
            string workspaceName = "myWorkspace";
            ResourceIdentifier operationalInsightsWorkspaceSecurityInsightsResourceId = OperationalInsightsWorkspaceSecurityInsightsResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            OperationalInsightsWorkspaceSecurityInsightsResource operationalInsightsWorkspaceSecurityInsights = client.GetOperationalInsightsWorkspaceSecurityInsightsResource(operationalInsightsWorkspaceSecurityInsightsResourceId);

            // invoke the operation
            DataConnectorsCheckRequirements dataConnectorsCheckRequirements = new ThreatIntelligenceCheckRequirements()
            {
                TenantId = Guid.Parse("2070ecc9-b4d5-4ae4-adaa-936fa1954fa8"),
            };
            DataConnectorRequirementsState result = await operationalInsightsWorkspaceSecurityInsights.PostDataConnectorsCheckRequirementAsync(dataConnectorsCheckRequirements);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
