// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Dependencies for the content item, what other content items it requires
    /// to work.  Can describe more complex dependencies using a
    /// recursive/nested structure. For a single dependency an id/kind/version
    /// can be supplied or operator/criteria for complex dependencies.
    /// </summary>
    public partial class MetadataDependencies
    {
        /// <summary>
        /// Initializes a new instance of the MetadataDependencies class.
        /// </summary>
        public MetadataDependencies()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetadataDependencies class.
        /// </summary>
        /// <param name="contentId">Id of the content item we depend on</param>
        /// <param name="kind">Type of the content item we depend on. Possible
        /// values include: 'DataConnector', 'DataType', 'Workbook',
        /// 'WorkbookTemplate', 'Playbook', 'PlaybookTemplate',
        /// 'AnalyticsRuleTemplate', 'AnalyticsRule', 'HuntingQuery',
        /// 'InvestigationQuery', 'Parser', 'Watchlist', 'WatchlistTemplate',
        /// 'Solution', 'AzureFunction', 'LogicAppsCustomConnector',
        /// 'AutomationRule'</param>
        /// <param name="version">Version of the the content item we depend on.
        /// Can be blank, * or missing to indicate any version fulfills the
        /// dependency.  If version does not match our defined numeric format
        /// then an exact match is required.</param>
        /// <param name="name">Name of the content item</param>
        /// <param name="operatorProperty">Operator used for list of
        /// dependencies in criteria array. Possible values include: 'AND',
        /// 'OR'</param>
        /// <param name="criteria">This is the list of dependencies we must
        /// fulfill, according to the AND/OR operator</param>
        public MetadataDependencies(string contentId = default(string), string kind = default(string), string version = default(string), string name = default(string), string operatorProperty = default(string), IList<MetadataDependencies> criteria = default(IList<MetadataDependencies>))
        {
            ContentId = contentId;
            Kind = kind;
            Version = version;
            Name = name;
            OperatorProperty = operatorProperty;
            Criteria = criteria;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets id of the content item we depend on
        /// </summary>
        [JsonProperty(PropertyName = "contentId")]
        public string ContentId { get; set; }

        /// <summary>
        /// Gets or sets type of the content item we depend on. Possible values
        /// include: 'DataConnector', 'DataType', 'Workbook',
        /// 'WorkbookTemplate', 'Playbook', 'PlaybookTemplate',
        /// 'AnalyticsRuleTemplate', 'AnalyticsRule', 'HuntingQuery',
        /// 'InvestigationQuery', 'Parser', 'Watchlist', 'WatchlistTemplate',
        /// 'Solution', 'AzureFunction', 'LogicAppsCustomConnector',
        /// 'AutomationRule'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets version of the the content item we depend on.  Can be
        /// blank, * or missing to indicate any version fulfills the
        /// dependency.  If version does not match our defined numeric format
        /// then an exact match is required.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets name of the content item
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets operator used for list of dependencies in criteria
        /// array. Possible values include: 'AND', 'OR'
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public string OperatorProperty { get; set; }

        /// <summary>
        /// Gets or sets this is the list of dependencies we must fulfill,
        /// according to the AND/OR operator
        /// </summary>
        [JsonProperty(PropertyName = "criteria")]
        public IList<MetadataDependencies> Criteria { get; set; }

    }
}
