// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Data type for Microsoft Threat Intelligence Platforms data connector.
    /// </summary>
    public partial class MSTIDataConnectorDataTypesBingSafetyPhishingURL : DataConnectorDataTypeCommon
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MSTIDataConnectorDataTypesBingSafetyPhishingURL class.
        /// </summary>
        public MSTIDataConnectorDataTypesBingSafetyPhishingURL()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MSTIDataConnectorDataTypesBingSafetyPhishingURL class.
        /// </summary>
        /// <param name="state">Describe whether this data type connection is
        /// enabled or not. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="lookbackPeriod">lookback period</param>
        public MSTIDataConnectorDataTypesBingSafetyPhishingURL(string state, string lookbackPeriod)
            : base(state)
        {
            LookbackPeriod = lookbackPeriod;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets lookback period
        /// </summary>
        [JsonProperty(PropertyName = "lookbackPeriod")]
        public string LookbackPeriod { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (LookbackPeriod == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LookbackPeriod");
            }
        }
    }
}
