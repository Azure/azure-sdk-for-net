// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a mail message entity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("MailMessage")]
    [Rest.Serialization.JsonTransformation]
    public partial class MailMessageEntity : Entity
    {
        /// <summary>
        /// Initializes a new instance of the MailMessageEntity class.
        /// </summary>
        public MailMessageEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MailMessageEntity class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="additionalData">A bag of custom fields that should be
        /// part of the entity and will be presented to the user.</param>
        /// <param name="friendlyName">The graph item display name which is a
        /// short humanly readable description of the graph item instance. This
        /// property is optional and might be system generated.</param>
        /// <param name="fileEntityIds">The File entity ids of this mail
        /// message's attachments</param>
        /// <param name="recipient">The recipient of this mail message. Note
        /// that in case of multiple recipients the mail message is forked and
        /// each copy has one recipient</param>
        /// <param name="urls">The Urls contained in this mail message</param>
        /// <param name="threats">The threats of this mail message</param>
        /// <param name="p1Sender">The p1 sender's email address</param>
        /// <param name="p1SenderDisplayName">The p1 sender's display
        /// name</param>
        /// <param name="p1SenderDomain">The p1 sender's domain</param>
        /// <param name="senderIP">The sender's IP address</param>
        /// <param name="p2Sender">The p2 sender's email address</param>
        /// <param name="p2SenderDisplayName">The p2 sender's display
        /// name</param>
        /// <param name="p2SenderDomain">The p2 sender's domain</param>
        /// <param name="receiveDate">The receive date of this message</param>
        /// <param name="networkMessageId">The network message id of this mail
        /// message</param>
        /// <param name="internetMessageId">The internet message id of this
        /// mail message</param>
        /// <param name="subject">The subject of this mail message</param>
        /// <param name="language">The language of this mail message</param>
        /// <param name="threatDetectionMethods">The threat detection
        /// methods</param>
        /// <param name="bodyFingerprintBin1">The bodyFingerprintBin1</param>
        /// <param name="bodyFingerprintBin2">The bodyFingerprintBin2</param>
        /// <param name="bodyFingerprintBin3">The bodyFingerprintBin3</param>
        /// <param name="bodyFingerprintBin4">The bodyFingerprintBin4</param>
        /// <param name="bodyFingerprintBin5">The bodyFingerprintBin5</param>
        /// <param name="antispamDirection">The directionality of this mail
        /// message. Possible values include: 'Unknown', 'Inbound', 'Outbound',
        /// 'Intraorg'</param>
        /// <param name="deliveryAction">The delivery action of this mail
        /// message like Delivered, Blocked, Replaced etc. Possible values
        /// include: 'Unknown', 'DeliveredAsSpam', 'Delivered', 'Blocked',
        /// 'Replaced'</param>
        /// <param name="deliveryLocation">The delivery location of this mail
        /// message like Inbox, JunkFolder etc. Possible values include:
        /// 'Unknown', 'Inbox', 'JunkFolder', 'DeletedFolder', 'Quarantine',
        /// 'External', 'Failed', 'Dropped', 'Forwarded'</param>
        public MailMessageEntity(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, object> additionalData = default(IDictionary<string, object>), string friendlyName = default(string), IList<string> fileEntityIds = default(IList<string>), string recipient = default(string), IList<string> urls = default(IList<string>), IList<string> threats = default(IList<string>), string p1Sender = default(string), string p1SenderDisplayName = default(string), string p1SenderDomain = default(string), string senderIP = default(string), string p2Sender = default(string), string p2SenderDisplayName = default(string), string p2SenderDomain = default(string), System.DateTime? receiveDate = default(System.DateTime?), System.Guid? networkMessageId = default(System.Guid?), string internetMessageId = default(string), string subject = default(string), string language = default(string), IList<string> threatDetectionMethods = default(IList<string>), int? bodyFingerprintBin1 = default(int?), int? bodyFingerprintBin2 = default(int?), int? bodyFingerprintBin3 = default(int?), int? bodyFingerprintBin4 = default(int?), int? bodyFingerprintBin5 = default(int?), string antispamDirection = default(string), DeliveryAction? deliveryAction = default(DeliveryAction?), DeliveryLocation? deliveryLocation = default(DeliveryLocation?))
            : base(id, name, type, systemData)
        {
            AdditionalData = additionalData;
            FriendlyName = friendlyName;
            FileEntityIds = fileEntityIds;
            Recipient = recipient;
            Urls = urls;
            Threats = threats;
            P1Sender = p1Sender;
            P1SenderDisplayName = p1SenderDisplayName;
            P1SenderDomain = p1SenderDomain;
            SenderIP = senderIP;
            P2Sender = p2Sender;
            P2SenderDisplayName = p2SenderDisplayName;
            P2SenderDomain = p2SenderDomain;
            ReceiveDate = receiveDate;
            NetworkMessageId = networkMessageId;
            InternetMessageId = internetMessageId;
            Subject = subject;
            Language = language;
            ThreatDetectionMethods = threatDetectionMethods;
            BodyFingerprintBin1 = bodyFingerprintBin1;
            BodyFingerprintBin2 = bodyFingerprintBin2;
            BodyFingerprintBin3 = bodyFingerprintBin3;
            BodyFingerprintBin4 = bodyFingerprintBin4;
            BodyFingerprintBin5 = bodyFingerprintBin5;
            AntispamDirection = antispamDirection;
            DeliveryAction = deliveryAction;
            DeliveryLocation = deliveryLocation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets a bag of custom fields that should be part of the entity and
        /// will be presented to the user.
        /// </summary>
        [JsonProperty(PropertyName = "properties.additionalData")]
        public IDictionary<string, object> AdditionalData { get; private set; }

        /// <summary>
        /// Gets the graph item display name which is a short humanly readable
        /// description of the graph item instance. This property is optional
        /// and might be system generated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.friendlyName")]
        public string FriendlyName { get; private set; }

        /// <summary>
        /// Gets the File entity ids of this mail message's attachments
        /// </summary>
        [JsonProperty(PropertyName = "properties.fileEntityIds")]
        public IList<string> FileEntityIds { get; private set; }

        /// <summary>
        /// Gets the recipient of this mail message. Note that in case of
        /// multiple recipients the mail message is forked and each copy has
        /// one recipient
        /// </summary>
        [JsonProperty(PropertyName = "properties.recipient")]
        public string Recipient { get; private set; }

        /// <summary>
        /// Gets the Urls contained in this mail message
        /// </summary>
        [JsonProperty(PropertyName = "properties.urls")]
        public IList<string> Urls { get; private set; }

        /// <summary>
        /// Gets the threats of this mail message
        /// </summary>
        [JsonProperty(PropertyName = "properties.threats")]
        public IList<string> Threats { get; private set; }

        /// <summary>
        /// Gets the p1 sender's email address
        /// </summary>
        [JsonProperty(PropertyName = "properties.p1Sender")]
        public string P1Sender { get; private set; }

        /// <summary>
        /// Gets the p1 sender's display name
        /// </summary>
        [JsonProperty(PropertyName = "properties.p1SenderDisplayName")]
        public string P1SenderDisplayName { get; private set; }

        /// <summary>
        /// Gets the p1 sender's domain
        /// </summary>
        [JsonProperty(PropertyName = "properties.p1SenderDomain")]
        public string P1SenderDomain { get; private set; }

        /// <summary>
        /// Gets the sender's IP address
        /// </summary>
        [JsonProperty(PropertyName = "properties.senderIP")]
        public string SenderIP { get; private set; }

        /// <summary>
        /// Gets the p2 sender's email address
        /// </summary>
        [JsonProperty(PropertyName = "properties.p2Sender")]
        public string P2Sender { get; private set; }

        /// <summary>
        /// Gets the p2 sender's display name
        /// </summary>
        [JsonProperty(PropertyName = "properties.p2SenderDisplayName")]
        public string P2SenderDisplayName { get; private set; }

        /// <summary>
        /// Gets the p2 sender's domain
        /// </summary>
        [JsonProperty(PropertyName = "properties.p2SenderDomain")]
        public string P2SenderDomain { get; private set; }

        /// <summary>
        /// Gets the receive date of this message
        /// </summary>
        [JsonProperty(PropertyName = "properties.receiveDate")]
        public System.DateTime? ReceiveDate { get; private set; }

        /// <summary>
        /// Gets the network message id of this mail message
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkMessageId")]
        public System.Guid? NetworkMessageId { get; private set; }

        /// <summary>
        /// Gets the internet message id of this mail message
        /// </summary>
        [JsonProperty(PropertyName = "properties.internetMessageId")]
        public string InternetMessageId { get; private set; }

        /// <summary>
        /// Gets the subject of this mail message
        /// </summary>
        [JsonProperty(PropertyName = "properties.subject")]
        public string Subject { get; private set; }

        /// <summary>
        /// Gets the language of this mail message
        /// </summary>
        [JsonProperty(PropertyName = "properties.language")]
        public string Language { get; private set; }

        /// <summary>
        /// Gets the threat detection methods
        /// </summary>
        [JsonProperty(PropertyName = "properties.threatDetectionMethods")]
        public IList<string> ThreatDetectionMethods { get; private set; }

        /// <summary>
        /// Gets or sets the bodyFingerprintBin1
        /// </summary>
        [JsonProperty(PropertyName = "properties.bodyFingerprintBin1")]
        public int? BodyFingerprintBin1 { get; set; }

        /// <summary>
        /// Gets or sets the bodyFingerprintBin2
        /// </summary>
        [JsonProperty(PropertyName = "properties.bodyFingerprintBin2")]
        public int? BodyFingerprintBin2 { get; set; }

        /// <summary>
        /// Gets or sets the bodyFingerprintBin3
        /// </summary>
        [JsonProperty(PropertyName = "properties.bodyFingerprintBin3")]
        public int? BodyFingerprintBin3 { get; set; }

        /// <summary>
        /// Gets or sets the bodyFingerprintBin4
        /// </summary>
        [JsonProperty(PropertyName = "properties.bodyFingerprintBin4")]
        public int? BodyFingerprintBin4 { get; set; }

        /// <summary>
        /// Gets or sets the bodyFingerprintBin5
        /// </summary>
        [JsonProperty(PropertyName = "properties.bodyFingerprintBin5")]
        public int? BodyFingerprintBin5 { get; set; }

        /// <summary>
        /// Gets or sets the directionality of this mail message. Possible
        /// values include: 'Unknown', 'Inbound', 'Outbound', 'Intraorg'
        /// </summary>
        [JsonProperty(PropertyName = "properties.antispamDirection")]
        public string AntispamDirection { get; set; }

        /// <summary>
        /// Gets or sets the delivery action of this mail message like
        /// Delivered, Blocked, Replaced etc. Possible values include:
        /// 'Unknown', 'DeliveredAsSpam', 'Delivered', 'Blocked', 'Replaced'
        /// </summary>
        [JsonProperty(PropertyName = "properties.deliveryAction")]
        public DeliveryAction? DeliveryAction { get; set; }

        /// <summary>
        /// Gets or sets the delivery location of this mail message like Inbox,
        /// JunkFolder etc. Possible values include: 'Unknown', 'Inbox',
        /// 'JunkFolder', 'DeletedFolder', 'Quarantine', 'External', 'Failed',
        /// 'Dropped', 'Forwarded'
        /// </summary>
        [JsonProperty(PropertyName = "properties.deliveryLocation")]
        public DeliveryLocation? DeliveryLocation { get; set; }

    }
}
