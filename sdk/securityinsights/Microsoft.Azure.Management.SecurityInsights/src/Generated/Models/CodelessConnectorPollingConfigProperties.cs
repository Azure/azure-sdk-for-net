// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Config to describe the polling config for API poller connector
    /// </summary>
    public partial class CodelessConnectorPollingConfigProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CodelessConnectorPollingConfigProperties class.
        /// </summary>
        public CodelessConnectorPollingConfigProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CodelessConnectorPollingConfigProperties class.
        /// </summary>
        /// <param name="auth">Describe the authentication type of the
        /// poller</param>
        /// <param name="request">Describe the poll request config parameters
        /// of the poller</param>
        /// <param name="isActive">The poller active status</param>
        /// <param name="paging">Describe the poll request paging config of the
        /// poller</param>
        /// <param name="response">Describe the response config parameters of
        /// the poller</param>
        public CodelessConnectorPollingConfigProperties(CodelessConnectorPollingAuthProperties auth, CodelessConnectorPollingRequestProperties request, bool? isActive = default(bool?), CodelessConnectorPollingPagingProperties paging = default(CodelessConnectorPollingPagingProperties), CodelessConnectorPollingResponseProperties response = default(CodelessConnectorPollingResponseProperties))
        {
            IsActive = isActive;
            Auth = auth;
            Request = request;
            Paging = paging;
            Response = response;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the poller active status
        /// </summary>
        [JsonProperty(PropertyName = "isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or sets describe the authentication type of the poller
        /// </summary>
        [JsonProperty(PropertyName = "auth")]
        public CodelessConnectorPollingAuthProperties Auth { get; set; }

        /// <summary>
        /// Gets or sets describe the poll request config parameters of the
        /// poller
        /// </summary>
        [JsonProperty(PropertyName = "request")]
        public CodelessConnectorPollingRequestProperties Request { get; set; }

        /// <summary>
        /// Gets or sets describe the poll request paging config of the poller
        /// </summary>
        [JsonProperty(PropertyName = "paging")]
        public CodelessConnectorPollingPagingProperties Paging { get; set; }

        /// <summary>
        /// Gets or sets describe the response config parameters of the poller
        /// </summary>
        [JsonProperty(PropertyName = "response")]
        public CodelessConnectorPollingResponseProperties Response { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Auth == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Auth");
            }
            if (Request == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Request");
            }
            if (Auth != null)
            {
                Auth.Validate();
            }
            if (Request != null)
            {
                Request.Validate();
            }
            if (Paging != null)
            {
                Paging.Validate();
            }
            if (Response != null)
            {
                Response.Validate();
            }
        }
    }
}
