// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for OSFamily.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum OSFamily
    {
        /// <summary>
        /// Host with Linux operating system.
        /// </summary>
        [EnumMember(Value = "Linux")]
        Linux,
        /// <summary>
        /// Host with Windows operating system.
        /// </summary>
        [EnumMember(Value = "Windows")]
        Windows,
        /// <summary>
        /// Host with Android operating system.
        /// </summary>
        [EnumMember(Value = "Android")]
        Android,
        /// <summary>
        /// Host with IOS operating system.
        /// </summary>
        [EnumMember(Value = "IOS")]
        IOS,
        /// <summary>
        /// Host with Unknown operating system.
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown
    }
    internal static class OSFamilyEnumExtension
    {
        internal static string ToSerializedValue(this OSFamily? value)
        {
            return value == null ? null : ((OSFamily)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this OSFamily value)
        {
            switch( value )
            {
                case OSFamily.Linux:
                    return "Linux";
                case OSFamily.Windows:
                    return "Windows";
                case OSFamily.Android:
                    return "Android";
                case OSFamily.IOS:
                    return "IOS";
                case OSFamily.Unknown:
                    return "Unknown";
            }
            return null;
        }

        internal static OSFamily? ParseOSFamily(this string value)
        {
            switch( value )
            {
                case "Linux":
                    return OSFamily.Linux;
                case "Windows":
                    return OSFamily.Windows;
                case "Android":
                    return OSFamily.Android;
                case "IOS":
                    return OSFamily.IOS;
                case "Unknown":
                    return OSFamily.Unknown;
            }
            return null;
        }
    }
}
