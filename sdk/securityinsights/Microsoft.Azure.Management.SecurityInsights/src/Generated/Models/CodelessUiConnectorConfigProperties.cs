// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Config to describe the instructions blade
    /// </summary>
    public partial class CodelessUiConnectorConfigProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CodelessUiConnectorConfigProperties class.
        /// </summary>
        public CodelessUiConnectorConfigProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CodelessUiConnectorConfigProperties class.
        /// </summary>
        /// <param name="title">Connector blade title</param>
        /// <param name="publisher">Connector publisher name</param>
        /// <param name="descriptionMarkdown">Connector description</param>
        /// <param name="graphQueriesTableName">Name of the table the connector
        /// will insert the data to</param>
        /// <param name="graphQueries">The graph query to show the current data
        /// status</param>
        /// <param name="sampleQueries">The sample queries for the
        /// connector</param>
        /// <param name="dataTypes">Data types to check for last data
        /// received</param>
        /// <param name="connectivityCriteria">Define the way the connector
        /// check connectivity</param>
        /// <param name="availability">Connector Availability Status</param>
        /// <param name="permissions">Permissions required for the
        /// connector</param>
        /// <param name="instructionSteps">Instruction steps to enable the
        /// connector</param>
        /// <param name="customImage">An optional custom image to be used when
        /// displaying the connector within Azure Sentinel's connector's
        /// gallery</param>
        public CodelessUiConnectorConfigProperties(string title, string publisher, string descriptionMarkdown, string graphQueriesTableName, IList<CodelessUiConnectorConfigPropertiesGraphQueriesItem> graphQueries, IList<CodelessUiConnectorConfigPropertiesSampleQueriesItem> sampleQueries, IList<CodelessUiConnectorConfigPropertiesDataTypesItem> dataTypes, IList<CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem> connectivityCriteria, Availability availability, Permissions permissions, IList<CodelessUiConnectorConfigPropertiesInstructionStepsItem> instructionSteps, string customImage = default(string))
        {
            Title = title;
            Publisher = publisher;
            DescriptionMarkdown = descriptionMarkdown;
            CustomImage = customImage;
            GraphQueriesTableName = graphQueriesTableName;
            GraphQueries = graphQueries;
            SampleQueries = sampleQueries;
            DataTypes = dataTypes;
            ConnectivityCriteria = connectivityCriteria;
            Availability = availability;
            Permissions = permissions;
            InstructionSteps = instructionSteps;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets connector blade title
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets connector publisher name
        /// </summary>
        [JsonProperty(PropertyName = "publisher")]
        public string Publisher { get; set; }

        /// <summary>
        /// Gets or sets connector description
        /// </summary>
        [JsonProperty(PropertyName = "descriptionMarkdown")]
        public string DescriptionMarkdown { get; set; }

        /// <summary>
        /// Gets or sets an optional custom image to be used when displaying
        /// the connector within Azure Sentinel's connector's gallery
        /// </summary>
        [JsonProperty(PropertyName = "customImage")]
        public string CustomImage { get; set; }

        /// <summary>
        /// Gets or sets name of the table the connector will insert the data
        /// to
        /// </summary>
        [JsonProperty(PropertyName = "graphQueriesTableName")]
        public string GraphQueriesTableName { get; set; }

        /// <summary>
        /// Gets or sets the graph query to show the current data status
        /// </summary>
        [JsonProperty(PropertyName = "graphQueries")]
        public IList<CodelessUiConnectorConfigPropertiesGraphQueriesItem> GraphQueries { get; set; }

        /// <summary>
        /// Gets or sets the sample queries for the connector
        /// </summary>
        [JsonProperty(PropertyName = "sampleQueries")]
        public IList<CodelessUiConnectorConfigPropertiesSampleQueriesItem> SampleQueries { get; set; }

        /// <summary>
        /// Gets or sets data types to check for last data received
        /// </summary>
        [JsonProperty(PropertyName = "dataTypes")]
        public IList<CodelessUiConnectorConfigPropertiesDataTypesItem> DataTypes { get; set; }

        /// <summary>
        /// Gets or sets define the way the connector check connectivity
        /// </summary>
        [JsonProperty(PropertyName = "connectivityCriteria")]
        public IList<CodelessUiConnectorConfigPropertiesConnectivityCriteriaItem> ConnectivityCriteria { get; set; }

        /// <summary>
        /// Gets or sets connector Availability Status
        /// </summary>
        [JsonProperty(PropertyName = "availability")]
        public Availability Availability { get; set; }

        /// <summary>
        /// Gets or sets permissions required for the connector
        /// </summary>
        [JsonProperty(PropertyName = "permissions")]
        public Permissions Permissions { get; set; }

        /// <summary>
        /// Gets or sets instruction steps to enable the connector
        /// </summary>
        [JsonProperty(PropertyName = "instructionSteps")]
        public IList<CodelessUiConnectorConfigPropertiesInstructionStepsItem> InstructionSteps { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (Publisher == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Publisher");
            }
            if (DescriptionMarkdown == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DescriptionMarkdown");
            }
            if (GraphQueriesTableName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GraphQueriesTableName");
            }
            if (GraphQueries == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GraphQueries");
            }
            if (SampleQueries == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SampleQueries");
            }
            if (DataTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataTypes");
            }
            if (ConnectivityCriteria == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectivityCriteria");
            }
            if (Availability == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Availability");
            }
            if (Permissions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Permissions");
            }
            if (InstructionSteps == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "InstructionSteps");
            }
        }
    }
}
