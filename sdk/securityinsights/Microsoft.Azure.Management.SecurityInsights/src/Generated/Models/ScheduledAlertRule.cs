// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents scheduled alert rule.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Scheduled")]
    [Rest.Serialization.JsonTransformation]
    public partial class ScheduledAlertRule : AlertRule
    {
        /// <summary>
        /// Initializes a new instance of the ScheduledAlertRule class.
        /// </summary>
        public ScheduledAlertRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduledAlertRule class.
        /// </summary>
        /// <param name="displayName">The display name for alerts created by
        /// this alert rule.</param>
        /// <param name="enabled">Determines whether this alert rule is enabled
        /// or disabled.</param>
        /// <param name="suppressionDuration">The suppression (in ISO 8601
        /// duration format) to wait since last time this alert rule been
        /// triggered.</param>
        /// <param name="suppressionEnabled">Determines whether the suppression
        /// for this alert rule is enabled or disabled.</param>
        /// <param name="id">Azure resource Id</param>
        /// <param name="name">Azure resource name</param>
        /// <param name="type">Azure resource type</param>
        /// <param name="etag">Etag of the azure resource</param>
        /// <param name="query">The query that creates alerts for this
        /// rule.</param>
        /// <param name="queryFrequency">The frequency (in ISO 8601 duration
        /// format) for this alert rule to run.</param>
        /// <param name="queryPeriod">The period (in ISO 8601 duration format)
        /// that this alert rule looks at.</param>
        /// <param name="severity">The severity for alerts created by this
        /// alert rule. Possible values include: 'High', 'Medium', 'Low',
        /// 'Informational'</param>
        /// <param name="triggerOperator">The operation against the threshold
        /// that triggers alert rule. Possible values include: 'GreaterThan',
        /// 'LessThan', 'Equal', 'NotEqual'</param>
        /// <param name="triggerThreshold">The threshold triggers this alert
        /// rule.</param>
        /// <param name="alertRuleTemplateName">The Name of the alert rule
        /// template used to create this rule.</param>
        /// <param name="description">The description of the alert
        /// rule.</param>
        /// <param name="lastModifiedUtc">The last time that this alert rule
        /// has been modified.</param>
        /// <param name="tactics">The tactics of the alert rule</param>
        public ScheduledAlertRule(string displayName, bool enabled, System.TimeSpan suppressionDuration, bool suppressionEnabled, string id = default(string), string name = default(string), string type = default(string), string etag = default(string), string query = default(string), System.TimeSpan? queryFrequency = default(System.TimeSpan?), System.TimeSpan? queryPeriod = default(System.TimeSpan?), string severity = default(string), TriggerOperator? triggerOperator = default(TriggerOperator?), int? triggerThreshold = default(int?), string alertRuleTemplateName = default(string), string description = default(string), System.DateTime? lastModifiedUtc = default(System.DateTime?), IList<string> tactics = default(IList<string>))
            : base(id, name, type, etag)
        {
            Query = query;
            QueryFrequency = queryFrequency;
            QueryPeriod = queryPeriod;
            Severity = severity;
            TriggerOperator = triggerOperator;
            TriggerThreshold = triggerThreshold;
            AlertRuleTemplateName = alertRuleTemplateName;
            Description = description;
            DisplayName = displayName;
            Enabled = enabled;
            LastModifiedUtc = lastModifiedUtc;
            SuppressionDuration = suppressionDuration;
            SuppressionEnabled = suppressionEnabled;
            Tactics = tactics;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the query that creates alerts for this rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.query")]
        public string Query { get; set; }

        /// <summary>
        /// Gets or sets the frequency (in ISO 8601 duration format) for this
        /// alert rule to run.
        /// </summary>
        [JsonProperty(PropertyName = "properties.queryFrequency")]
        public System.TimeSpan? QueryFrequency { get; set; }

        /// <summary>
        /// Gets or sets the period (in ISO 8601 duration format) that this
        /// alert rule looks at.
        /// </summary>
        [JsonProperty(PropertyName = "properties.queryPeriod")]
        public System.TimeSpan? QueryPeriod { get; set; }

        /// <summary>
        /// Gets or sets the severity for alerts created by this alert rule.
        /// Possible values include: 'High', 'Medium', 'Low', 'Informational'
        /// </summary>
        [JsonProperty(PropertyName = "properties.severity")]
        public string Severity { get; set; }

        /// <summary>
        /// Gets or sets the operation against the threshold that triggers
        /// alert rule. Possible values include: 'GreaterThan', 'LessThan',
        /// 'Equal', 'NotEqual'
        /// </summary>
        [JsonProperty(PropertyName = "properties.triggerOperator")]
        public TriggerOperator? TriggerOperator { get; set; }

        /// <summary>
        /// Gets or sets the threshold triggers this alert rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.triggerThreshold")]
        public int? TriggerThreshold { get; set; }

        /// <summary>
        /// Gets or sets the Name of the alert rule template used to create
        /// this rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.alertRuleTemplateName")]
        public string AlertRuleTemplateName { get; set; }

        /// <summary>
        /// Gets or sets the description of the alert rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the display name for alerts created by this alert
        /// rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets determines whether this alert rule is enabled or
        /// disabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets the last time that this alert rule has been modified.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModifiedUtc")]
        public System.DateTime? LastModifiedUtc { get; private set; }

        /// <summary>
        /// Gets or sets the suppression (in ISO 8601 duration format) to wait
        /// since last time this alert rule been triggered.
        /// </summary>
        [JsonProperty(PropertyName = "properties.suppressionDuration")]
        public System.TimeSpan SuppressionDuration { get; set; }

        /// <summary>
        /// Gets or sets determines whether the suppression for this alert rule
        /// is enabled or disabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.suppressionEnabled")]
        public bool SuppressionEnabled { get; set; }

        /// <summary>
        /// Gets or sets the tactics of the alert rule
        /// </summary>
        [JsonProperty(PropertyName = "properties.tactics")]
        public IList<string> Tactics { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
        }
    }
}
