// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a host entity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Host")]
    [Rest.Serialization.JsonTransformation]
    public partial class HostEntity : Entity
    {
        /// <summary>
        /// Initializes a new instance of the HostEntity class.
        /// </summary>
        public HostEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HostEntity class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="additionalData">A bag of custom fields that should be
        /// part of the entity and will be presented to the user.</param>
        /// <param name="friendlyName">The graph item display name which is a
        /// short humanly readable description of the graph item instance. This
        /// property is optional and might be system generated.</param>
        /// <param name="azureID">The azure resource id of the VM.</param>
        /// <param name="dnsDomain">The DNS domain that this host belongs to.
        /// Should contain the compete DNS suffix for the domain</param>
        /// <param name="hostName">The hostname without the domain
        /// suffix.</param>
        /// <param name="isDomainJoined">Determines whether this host belongs
        /// to a domain.</param>
        /// <param name="netBiosName">The host name (pre-windows2000).</param>
        /// <param name="ntDomain">The NT domain that this host belongs
        /// to.</param>
        /// <param name="omsAgentID">The OMS agent id, if the host has OMS
        /// agent installed.</param>
        /// <param name="osFamily">The operating system type. Possible values
        /// include: 'Linux', 'Windows', 'Android', 'IOS', 'Unknown'</param>
        /// <param name="osVersion">A free text representation of the operating
        /// system. This field is meant to hold specific versions the are more
        /// fine grained than OSFamily or future values not supported by
        /// OSFamily enumeration</param>
        public HostEntity(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, object> additionalData = default(IDictionary<string, object>), string friendlyName = default(string), string azureID = default(string), string dnsDomain = default(string), string hostName = default(string), bool? isDomainJoined = default(bool?), string netBiosName = default(string), string ntDomain = default(string), string omsAgentID = default(string), OSFamily? osFamily = default(OSFamily?), string osVersion = default(string))
            : base(id, name, type, systemData)
        {
            AdditionalData = additionalData;
            FriendlyName = friendlyName;
            AzureID = azureID;
            DnsDomain = dnsDomain;
            HostName = hostName;
            IsDomainJoined = isDomainJoined;
            NetBiosName = netBiosName;
            NtDomain = ntDomain;
            OmsAgentID = omsAgentID;
            OsFamily = osFamily;
            OsVersion = osVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets a bag of custom fields that should be part of the entity and
        /// will be presented to the user.
        /// </summary>
        [JsonProperty(PropertyName = "properties.additionalData")]
        public IDictionary<string, object> AdditionalData { get; private set; }

        /// <summary>
        /// Gets the graph item display name which is a short humanly readable
        /// description of the graph item instance. This property is optional
        /// and might be system generated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.friendlyName")]
        public string FriendlyName { get; private set; }

        /// <summary>
        /// Gets the azure resource id of the VM.
        /// </summary>
        [JsonProperty(PropertyName = "properties.azureID")]
        public string AzureID { get; private set; }

        /// <summary>
        /// Gets the DNS domain that this host belongs to. Should contain the
        /// compete DNS suffix for the domain
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsDomain")]
        public string DnsDomain { get; private set; }

        /// <summary>
        /// Gets the hostname without the domain suffix.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostName")]
        public string HostName { get; private set; }

        /// <summary>
        /// Gets determines whether this host belongs to a domain.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isDomainJoined")]
        public bool? IsDomainJoined { get; private set; }

        /// <summary>
        /// Gets the host name (pre-windows2000).
        /// </summary>
        [JsonProperty(PropertyName = "properties.netBiosName")]
        public string NetBiosName { get; private set; }

        /// <summary>
        /// Gets the NT domain that this host belongs to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ntDomain")]
        public string NtDomain { get; private set; }

        /// <summary>
        /// Gets the OMS agent id, if the host has OMS agent installed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.omsAgentID")]
        public string OmsAgentID { get; private set; }

        /// <summary>
        /// Gets or sets the operating system type. Possible values include:
        /// 'Linux', 'Windows', 'Android', 'IOS', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.osFamily")]
        public OSFamily? OsFamily { get; set; }

        /// <summary>
        /// Gets a free text representation of the operating system. This field
        /// is meant to hold specific versions the are more fine grained than
        /// OSFamily or future values not supported by OSFamily enumeration
        /// </summary>
        [JsonProperty(PropertyName = "properties.osVersion")]
        public string OsVersion { get; private set; }

    }
}
