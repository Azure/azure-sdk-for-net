// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a process entity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Process")]
    [Rest.Serialization.JsonTransformation]
    public partial class ProcessEntity : Entity
    {
        /// <summary>
        /// Initializes a new instance of the ProcessEntity class.
        /// </summary>
        public ProcessEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProcessEntity class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="additionalData">A bag of custom fields that should be
        /// part of the entity and will be presented to the user.</param>
        /// <param name="friendlyName">The graph item display name which is a
        /// short humanly readable description of the graph item instance. This
        /// property is optional and might be system generated.</param>
        /// <param name="accountEntityId">The account entity id running the
        /// processes.</param>
        /// <param name="commandLine">The command line used to create the
        /// process</param>
        /// <param name="creationTimeUtc">The time when the process started to
        /// run</param>
        /// <param name="elevationToken">The elevation token associated with
        /// the process. Possible values include: 'Default', 'Full',
        /// 'Limited'</param>
        /// <param name="hostEntityId">The host entity id on which the process
        /// was running</param>
        /// <param name="hostLogonSessionEntityId">The session entity id in
        /// which the process was running</param>
        /// <param name="imageFileEntityId">Image file entity id</param>
        /// <param name="parentProcessEntityId">The parent process entity
        /// id.</param>
        /// <param name="processId">The process ID</param>
        public ProcessEntity(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, object> additionalData = default(IDictionary<string, object>), string friendlyName = default(string), string accountEntityId = default(string), string commandLine = default(string), System.DateTime? creationTimeUtc = default(System.DateTime?), ElevationToken? elevationToken = default(ElevationToken?), string hostEntityId = default(string), string hostLogonSessionEntityId = default(string), string imageFileEntityId = default(string), string parentProcessEntityId = default(string), string processId = default(string))
            : base(id, name, type, systemData)
        {
            AdditionalData = additionalData;
            FriendlyName = friendlyName;
            AccountEntityId = accountEntityId;
            CommandLine = commandLine;
            CreationTimeUtc = creationTimeUtc;
            ElevationToken = elevationToken;
            HostEntityId = hostEntityId;
            HostLogonSessionEntityId = hostLogonSessionEntityId;
            ImageFileEntityId = imageFileEntityId;
            ParentProcessEntityId = parentProcessEntityId;
            ProcessId = processId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets a bag of custom fields that should be part of the entity and
        /// will be presented to the user.
        /// </summary>
        [JsonProperty(PropertyName = "properties.additionalData")]
        public IDictionary<string, object> AdditionalData { get; private set; }

        /// <summary>
        /// Gets the graph item display name which is a short humanly readable
        /// description of the graph item instance. This property is optional
        /// and might be system generated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.friendlyName")]
        public string FriendlyName { get; private set; }

        /// <summary>
        /// Gets the account entity id running the processes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.accountEntityId")]
        public string AccountEntityId { get; private set; }

        /// <summary>
        /// Gets the command line used to create the process
        /// </summary>
        [JsonProperty(PropertyName = "properties.commandLine")]
        public string CommandLine { get; private set; }

        /// <summary>
        /// Gets the time when the process started to run
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationTimeUtc")]
        public System.DateTime? CreationTimeUtc { get; private set; }

        /// <summary>
        /// Gets or sets the elevation token associated with the process.
        /// Possible values include: 'Default', 'Full', 'Limited'
        /// </summary>
        [JsonProperty(PropertyName = "properties.elevationToken")]
        public ElevationToken? ElevationToken { get; set; }

        /// <summary>
        /// Gets the host entity id on which the process was running
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostEntityId")]
        public string HostEntityId { get; private set; }

        /// <summary>
        /// Gets the session entity id in which the process was running
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostLogonSessionEntityId")]
        public string HostLogonSessionEntityId { get; private set; }

        /// <summary>
        /// Gets image file entity id
        /// </summary>
        [JsonProperty(PropertyName = "properties.imageFileEntityId")]
        public string ImageFileEntityId { get; private set; }

        /// <summary>
        /// Gets the parent process entity id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.parentProcessEntityId")]
        public string ParentProcessEntityId { get; private set; }

        /// <summary>
        /// Gets the process ID
        /// </summary>
        [JsonProperty(PropertyName = "properties.processId")]
        public string ProcessId { get; private set; }

    }
}
