// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Data connector requirements status.
    /// </summary>
    public partial class DataConnectorRequirementsState
    {
        /// <summary>
        /// Initializes a new instance of the DataConnectorRequirementsState
        /// class.
        /// </summary>
        public DataConnectorRequirementsState()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataConnectorRequirementsState
        /// class.
        /// </summary>
        /// <param name="authorizationState">Authorization state for this
        /// connector. Possible values include: 'Valid', 'Invalid'</param>
        /// <param name="licenseState">License state for this connector.
        /// Possible values include: 'Valid', 'Invalid', 'Unknown'</param>
        public DataConnectorRequirementsState(string authorizationState = default(string), string licenseState = default(string))
        {
            AuthorizationState = authorizationState;
            LicenseState = licenseState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets authorization state for this connector. Possible
        /// values include: 'Valid', 'Invalid'
        /// </summary>
        [JsonProperty(PropertyName = "authorizationState")]
        public string AuthorizationState { get; set; }

        /// <summary>
        /// Gets or sets license state for this connector. Possible values
        /// include: 'Valid', 'Invalid', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "licenseState")]
        public string LicenseState { get; set; }

    }
}
