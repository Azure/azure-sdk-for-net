// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Instruction step details
    /// </summary>
    public partial class ConnectorInstructionModelBase
    {
        /// <summary>
        /// Initializes a new instance of the ConnectorInstructionModelBase
        /// class.
        /// </summary>
        public ConnectorInstructionModelBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorInstructionModelBase
        /// class.
        /// </summary>
        /// <param name="type">The kind of the setting. Possible values
        /// include: 'CopyableLabel', 'InstructionStepsGroup',
        /// 'InfoMessage'</param>
        /// <param name="parameters">The parameters for the setting</param>
        public ConnectorInstructionModelBase(string type, object parameters = default(object))
        {
            Parameters = parameters;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the parameters for the setting
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public object Parameters { get; set; }

        /// <summary>
        /// Gets or sets the kind of the setting. Possible values include:
        /// 'CopyableLabel', 'InstructionStepsGroup', 'InfoMessage'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
