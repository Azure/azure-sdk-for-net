// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents NRT alert rule.
    /// </summary>
    [Newtonsoft.Json.JsonObject("NRT")]
    [Rest.Serialization.JsonTransformation]
    public partial class NrtAlertRule : AlertRule
    {
        /// <summary>
        /// Initializes a new instance of the NrtAlertRule class.
        /// </summary>
        public NrtAlertRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NrtAlertRule class.
        /// </summary>
        /// <param name="query">The query that creates alerts for this
        /// rule.</param>
        /// <param name="displayName">The display name for alerts created by
        /// this alert rule.</param>
        /// <param name="enabled">Determines whether this alert rule is enabled
        /// or disabled.</param>
        /// <param name="suppressionDuration">The suppression (in ISO 8601
        /// duration format) to wait since last time this alert rule been
        /// triggered.</param>
        /// <param name="suppressionEnabled">Determines whether the suppression
        /// for this alert rule is enabled or disabled.</param>
        /// <param name="severity">The severity for alerts created by this
        /// alert rule. Possible values include: 'High', 'Medium', 'Low',
        /// 'Informational'</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="etag">Etag of the azure resource</param>
        /// <param name="alertRuleTemplateName">The Name of the alert rule
        /// template used to create this rule.</param>
        /// <param name="templateVersion">The version of the alert rule
        /// template used to create this rule - in format &lt;a.b.c&gt;, where
        /// all are numbers, for example 0 &lt;1.0.2&gt;</param>
        /// <param name="description">The description of the alert
        /// rule.</param>
        /// <param name="tactics">The tactics of the alert rule</param>
        /// <param name="techniques">The techniques of the alert rule</param>
        /// <param name="lastModifiedUtc">The last time that this alert rule
        /// has been modified.</param>
        /// <param name="incidentConfiguration">The settings of the incidents
        /// that created from alerts triggered by this analytics rule</param>
        /// <param name="customDetails">Dictionary of string key-value pairs of
        /// columns to be attached to the alert</param>
        /// <param name="entityMappings">Array of the entity mappings of the
        /// alert rule</param>
        /// <param name="alertDetailsOverride">The alert details override
        /// settings</param>
        public NrtAlertRule(string query, string displayName, bool enabled, System.TimeSpan suppressionDuration, bool suppressionEnabled, string severity, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string etag = default(string), string alertRuleTemplateName = default(string), string templateVersion = default(string), string description = default(string), IList<string> tactics = default(IList<string>), IList<string> techniques = default(IList<string>), System.DateTime? lastModifiedUtc = default(System.DateTime?), IncidentConfiguration incidentConfiguration = default(IncidentConfiguration), IDictionary<string, string> customDetails = default(IDictionary<string, string>), IList<EntityMapping> entityMappings = default(IList<EntityMapping>), AlertDetailsOverride alertDetailsOverride = default(AlertDetailsOverride))
            : base(id, name, type, systemData, etag)
        {
            AlertRuleTemplateName = alertRuleTemplateName;
            TemplateVersion = templateVersion;
            Description = description;
            Query = query;
            Tactics = tactics;
            Techniques = techniques;
            DisplayName = displayName;
            Enabled = enabled;
            LastModifiedUtc = lastModifiedUtc;
            SuppressionDuration = suppressionDuration;
            SuppressionEnabled = suppressionEnabled;
            Severity = severity;
            IncidentConfiguration = incidentConfiguration;
            CustomDetails = customDetails;
            EntityMappings = entityMappings;
            AlertDetailsOverride = alertDetailsOverride;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Name of the alert rule template used to create
        /// this rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.alertRuleTemplateName")]
        public string AlertRuleTemplateName { get; set; }

        /// <summary>
        /// Gets or sets the version of the alert rule template used to create
        /// this rule - in format &amp;lt;a.b.c&amp;gt;, where all are numbers,
        /// for example 0 &amp;lt;1.0.2&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "properties.templateVersion")]
        public string TemplateVersion { get; set; }

        /// <summary>
        /// Gets or sets the description of the alert rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the query that creates alerts for this rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.query")]
        public string Query { get; set; }

        /// <summary>
        /// Gets or sets the tactics of the alert rule
        /// </summary>
        [JsonProperty(PropertyName = "properties.tactics")]
        public IList<string> Tactics { get; set; }

        /// <summary>
        /// Gets or sets the techniques of the alert rule
        /// </summary>
        [JsonProperty(PropertyName = "properties.techniques")]
        public IList<string> Techniques { get; set; }

        /// <summary>
        /// Gets or sets the display name for alerts created by this alert
        /// rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets determines whether this alert rule is enabled or
        /// disabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets the last time that this alert rule has been modified.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModifiedUtc")]
        public System.DateTime? LastModifiedUtc { get; private set; }

        /// <summary>
        /// Gets or sets the suppression (in ISO 8601 duration format) to wait
        /// since last time this alert rule been triggered.
        /// </summary>
        [JsonProperty(PropertyName = "properties.suppressionDuration")]
        public System.TimeSpan SuppressionDuration { get; set; }

        /// <summary>
        /// Gets or sets determines whether the suppression for this alert rule
        /// is enabled or disabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.suppressionEnabled")]
        public bool SuppressionEnabled { get; set; }

        /// <summary>
        /// Gets or sets the severity for alerts created by this alert rule.
        /// Possible values include: 'High', 'Medium', 'Low', 'Informational'
        /// </summary>
        [JsonProperty(PropertyName = "properties.severity")]
        public string Severity { get; set; }

        /// <summary>
        /// Gets or sets the settings of the incidents that created from alerts
        /// triggered by this analytics rule
        /// </summary>
        [JsonProperty(PropertyName = "properties.incidentConfiguration")]
        public IncidentConfiguration IncidentConfiguration { get; set; }

        /// <summary>
        /// Gets or sets dictionary of string key-value pairs of columns to be
        /// attached to the alert
        /// </summary>
        [JsonProperty(PropertyName = "properties.customDetails")]
        public IDictionary<string, string> CustomDetails { get; set; }

        /// <summary>
        /// Gets or sets array of the entity mappings of the alert rule
        /// </summary>
        [JsonProperty(PropertyName = "properties.entityMappings")]
        public IList<EntityMapping> EntityMappings { get; set; }

        /// <summary>
        /// Gets or sets the alert details override settings
        /// </summary>
        [JsonProperty(PropertyName = "properties.alertDetailsOverride")]
        public AlertDetailsOverride AlertDetailsOverride { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Query == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Query");
            }
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (Severity == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Severity");
            }
            if (IncidentConfiguration != null)
            {
                IncidentConfiguration.Validate();
            }
        }
    }
}
