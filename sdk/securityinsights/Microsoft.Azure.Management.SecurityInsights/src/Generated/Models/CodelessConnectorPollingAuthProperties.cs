// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describe the authentication properties needed to successfully
    /// authenticate with the server
    /// </summary>
    public partial class CodelessConnectorPollingAuthProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CodelessConnectorPollingAuthProperties class.
        /// </summary>
        public CodelessConnectorPollingAuthProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CodelessConnectorPollingAuthProperties class.
        /// </summary>
        /// <param name="authType">The authentication type</param>
        /// <param name="apiKeyName">The header name which the token is sent
        /// with</param>
        /// <param name="apiKeyIdentifier">A prefix send in the header before
        /// the actual token</param>
        /// <param name="isApiKeyInPostPayload">Marks if the key should sent in
        /// header</param>
        /// <param name="flowName">Describes the flow name, for example
        /// 'AuthCode' for Oauth 2.0</param>
        /// <param name="tokenEndpoint">The endpoint used to issue a token,
        /// used in Oauth 2.0 flow</param>
        /// <param name="authorizationEndpoint">The endpoint used to authorize
        /// the user, used in Oauth 2.0 flow</param>
        /// <param name="authorizationEndpointQueryParameters">The query
        /// parameters used in authorization request, used in Oauth 2.0
        /// flow</param>
        /// <param name="redirectionEndpoint">The redirect endpoint where we
        /// will get the authorization code, used in Oauth 2.0 flow</param>
        /// <param name="tokenEndpointHeaders">The query headers used in token
        /// request, used in Oauth 2.0 flow</param>
        /// <param name="tokenEndpointQueryParameters">The query parameters
        /// used in token request, used in Oauth 2.0 flow</param>
        /// <param name="isClientSecretInHeader">Marks if we should send the
        /// client secret in header or payload, used in Oauth 2.0 flow</param>
        /// <param name="scope">The OAuth token scope</param>
        public CodelessConnectorPollingAuthProperties(string authType, string apiKeyName = default(string), string apiKeyIdentifier = default(string), string isApiKeyInPostPayload = default(string), string flowName = default(string), string tokenEndpoint = default(string), string authorizationEndpoint = default(string), object authorizationEndpointQueryParameters = default(object), string redirectionEndpoint = default(string), object tokenEndpointHeaders = default(object), object tokenEndpointQueryParameters = default(object), bool? isClientSecretInHeader = default(bool?), string scope = default(string))
        {
            AuthType = authType;
            ApiKeyName = apiKeyName;
            ApiKeyIdentifier = apiKeyIdentifier;
            IsApiKeyInPostPayload = isApiKeyInPostPayload;
            FlowName = flowName;
            TokenEndpoint = tokenEndpoint;
            AuthorizationEndpoint = authorizationEndpoint;
            AuthorizationEndpointQueryParameters = authorizationEndpointQueryParameters;
            RedirectionEndpoint = redirectionEndpoint;
            TokenEndpointHeaders = tokenEndpointHeaders;
            TokenEndpointQueryParameters = tokenEndpointQueryParameters;
            IsClientSecretInHeader = isClientSecretInHeader;
            Scope = scope;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the authentication type
        /// </summary>
        [JsonProperty(PropertyName = "authType")]
        public string AuthType { get; set; }

        /// <summary>
        /// Gets or sets the header name which the token is sent with
        /// </summary>
        [JsonProperty(PropertyName = "apiKeyName")]
        public string ApiKeyName { get; set; }

        /// <summary>
        /// Gets or sets a prefix send in the header before the actual token
        /// </summary>
        [JsonProperty(PropertyName = "apiKeyIdentifier")]
        public string ApiKeyIdentifier { get; set; }

        /// <summary>
        /// Gets or sets marks if the key should sent in header
        /// </summary>
        [JsonProperty(PropertyName = "isApiKeyInPostPayload")]
        public string IsApiKeyInPostPayload { get; set; }

        /// <summary>
        /// Gets or sets describes the flow name, for example 'AuthCode' for
        /// Oauth 2.0
        /// </summary>
        [JsonProperty(PropertyName = "flowName")]
        public string FlowName { get; set; }

        /// <summary>
        /// Gets or sets the endpoint used to issue a token, used in Oauth 2.0
        /// flow
        /// </summary>
        [JsonProperty(PropertyName = "tokenEndpoint")]
        public string TokenEndpoint { get; set; }

        /// <summary>
        /// Gets or sets the endpoint used to authorize the user, used in Oauth
        /// 2.0 flow
        /// </summary>
        [JsonProperty(PropertyName = "authorizationEndpoint")]
        public string AuthorizationEndpoint { get; set; }

        /// <summary>
        /// Gets or sets the query parameters used in authorization request,
        /// used in Oauth 2.0 flow
        /// </summary>
        [JsonProperty(PropertyName = "authorizationEndpointQueryParameters")]
        public object AuthorizationEndpointQueryParameters { get; set; }

        /// <summary>
        /// Gets or sets the redirect endpoint where we will get the
        /// authorization code, used in Oauth 2.0 flow
        /// </summary>
        [JsonProperty(PropertyName = "redirectionEndpoint")]
        public string RedirectionEndpoint { get; set; }

        /// <summary>
        /// Gets or sets the query headers used in token request, used in Oauth
        /// 2.0 flow
        /// </summary>
        [JsonProperty(PropertyName = "tokenEndpointHeaders")]
        public object TokenEndpointHeaders { get; set; }

        /// <summary>
        /// Gets or sets the query parameters used in token request, used in
        /// Oauth 2.0 flow
        /// </summary>
        [JsonProperty(PropertyName = "tokenEndpointQueryParameters")]
        public object TokenEndpointQueryParameters { get; set; }

        /// <summary>
        /// Gets or sets marks if we should send the client secret in header or
        /// payload, used in Oauth 2.0 flow
        /// </summary>
        [JsonProperty(PropertyName = "isClientSecretInHeader")]
        public bool? IsClientSecretInHeader { get; set; }

        /// <summary>
        /// Gets or sets the OAuth token scope
        /// </summary>
        [JsonProperty(PropertyName = "scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AuthType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AuthType");
            }
        }
    }
}
