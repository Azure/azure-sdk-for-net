// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes an entity with kind.
    /// </summary>
    public partial class EntityKind1
    {
        /// <summary>
        /// Initializes a new instance of the EntityKind1 class.
        /// </summary>
        public EntityKind1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EntityKind1 class.
        /// </summary>
        /// <param name="kind">The kind of the entity. Possible values include:
        /// 'Account', 'Host', 'File', 'AzureResource', 'CloudApplication',
        /// 'DnsResolution', 'FileHash', 'Ip', 'Malware', 'Process',
        /// 'RegistryKey', 'RegistryValue', 'SecurityGroup', 'Url',
        /// 'IoTDevice', 'SecurityAlert', 'Bookmark'</param>
        public EntityKind1(string kind)
        {
            Kind = kind;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the kind of the entity. Possible values include:
        /// 'Account', 'Host', 'File', 'AzureResource', 'CloudApplication',
        /// 'DnsResolution', 'FileHash', 'Ip', 'Malware', 'Process',
        /// 'RegistryKey', 'RegistryValue', 'SecurityGroup', 'Url',
        /// 'IoTDevice', 'SecurityAlert', 'Bookmark'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Kind == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kind");
            }
        }
    }
}
