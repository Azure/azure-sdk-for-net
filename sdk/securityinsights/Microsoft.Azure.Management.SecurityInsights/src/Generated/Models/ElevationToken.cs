// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ElevationToken.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ElevationToken
    {
        /// <summary>
        /// Default elevation token
        /// </summary>
        [EnumMember(Value = "Default")]
        Default,
        /// <summary>
        /// Full elevation token
        /// </summary>
        [EnumMember(Value = "Full")]
        Full,
        /// <summary>
        /// Limited elevation token
        /// </summary>
        [EnumMember(Value = "Limited")]
        Limited
    }
    internal static class ElevationTokenEnumExtension
    {
        internal static string ToSerializedValue(this ElevationToken? value)
        {
            return value == null ? null : ((ElevationToken)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ElevationToken value)
        {
            switch( value )
            {
                case ElevationToken.Default:
                    return "Default";
                case ElevationToken.Full:
                    return "Full";
                case ElevationToken.Limited:
                    return "Limited";
            }
            return null;
        }

        internal static ElevationToken? ParseElevationToken(this string value)
        {
            switch( value )
            {
                case "Default":
                    return ElevationToken.Default;
                case "Full":
                    return ElevationToken.Full;
                case "Limited":
                    return ElevationToken.Limited;
            }
            return null;
        }
    }
}
