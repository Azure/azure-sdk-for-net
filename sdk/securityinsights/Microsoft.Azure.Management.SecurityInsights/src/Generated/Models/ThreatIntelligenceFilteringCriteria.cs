// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Filtering criteria for querying threat intelligence indicators.
    /// </summary>
    public partial class ThreatIntelligenceFilteringCriteria
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ThreatIntelligenceFilteringCriteria class.
        /// </summary>
        public ThreatIntelligenceFilteringCriteria()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ThreatIntelligenceFilteringCriteria class.
        /// </summary>
        /// <param name="pageSize">Page size</param>
        /// <param name="minConfidence">Minimum confidence.</param>
        /// <param name="maxConfidence">Maximum confidence.</param>
        /// <param name="minValidUntil">Start time for ValidUntil
        /// filter.</param>
        /// <param name="maxValidUntil">End time for ValidUntil filter.</param>
        /// <param name="includeDisabled">Parameter to include/exclude disabled
        /// indicators.</param>
        /// <param name="sortBy">Columns to sort by and sorting order</param>
        /// <param name="sources">Sources of threat intelligence
        /// indicators</param>
        /// <param name="patternTypes">Pattern types</param>
        /// <param name="threatTypes">Threat types of threat intelligence
        /// indicators</param>
        /// <param name="ids">Ids of threat intelligence indicators</param>
        /// <param name="keywords">Keywords for searching threat intelligence
        /// indicators</param>
        /// <param name="skipToken">Skip token.</param>
        public ThreatIntelligenceFilteringCriteria(int? pageSize = default(int?), int? minConfidence = default(int?), int? maxConfidence = default(int?), string minValidUntil = default(string), string maxValidUntil = default(string), bool? includeDisabled = default(bool?), IList<ThreatIntelligenceSortingCriteria> sortBy = default(IList<ThreatIntelligenceSortingCriteria>), IList<string> sources = default(IList<string>), IList<string> patternTypes = default(IList<string>), IList<string> threatTypes = default(IList<string>), IList<string> ids = default(IList<string>), IList<string> keywords = default(IList<string>), string skipToken = default(string))
        {
            PageSize = pageSize;
            MinConfidence = minConfidence;
            MaxConfidence = maxConfidence;
            MinValidUntil = minValidUntil;
            MaxValidUntil = maxValidUntil;
            IncludeDisabled = includeDisabled;
            SortBy = sortBy;
            Sources = sources;
            PatternTypes = patternTypes;
            ThreatTypes = threatTypes;
            Ids = ids;
            Keywords = keywords;
            SkipToken = skipToken;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets page size
        /// </summary>
        [JsonProperty(PropertyName = "pageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Gets or sets minimum confidence.
        /// </summary>
        [JsonProperty(PropertyName = "minConfidence")]
        public int? MinConfidence { get; set; }

        /// <summary>
        /// Gets or sets maximum confidence.
        /// </summary>
        [JsonProperty(PropertyName = "maxConfidence")]
        public int? MaxConfidence { get; set; }

        /// <summary>
        /// Gets or sets start time for ValidUntil filter.
        /// </summary>
        [JsonProperty(PropertyName = "minValidUntil")]
        public string MinValidUntil { get; set; }

        /// <summary>
        /// Gets or sets end time for ValidUntil filter.
        /// </summary>
        [JsonProperty(PropertyName = "maxValidUntil")]
        public string MaxValidUntil { get; set; }

        /// <summary>
        /// Gets or sets parameter to include/exclude disabled indicators.
        /// </summary>
        [JsonProperty(PropertyName = "includeDisabled")]
        public bool? IncludeDisabled { get; set; }

        /// <summary>
        /// Gets or sets columns to sort by and sorting order
        /// </summary>
        [JsonProperty(PropertyName = "sortBy")]
        public IList<ThreatIntelligenceSortingCriteria> SortBy { get; set; }

        /// <summary>
        /// Gets or sets sources of threat intelligence indicators
        /// </summary>
        [JsonProperty(PropertyName = "sources")]
        public IList<string> Sources { get; set; }

        /// <summary>
        /// Gets or sets pattern types
        /// </summary>
        [JsonProperty(PropertyName = "patternTypes")]
        public IList<string> PatternTypes { get; set; }

        /// <summary>
        /// Gets or sets threat types of threat intelligence indicators
        /// </summary>
        [JsonProperty(PropertyName = "threatTypes")]
        public IList<string> ThreatTypes { get; set; }

        /// <summary>
        /// Gets or sets ids of threat intelligence indicators
        /// </summary>
        [JsonProperty(PropertyName = "ids")]
        public IList<string> Ids { get; set; }

        /// <summary>
        /// Gets or sets keywords for searching threat intelligence indicators
        /// </summary>
        [JsonProperty(PropertyName = "keywords")]
        public IList<string> Keywords { get; set; }

        /// <summary>
        /// Gets or sets skip token.
        /// </summary>
        [JsonProperty(PropertyName = "skipToken")]
        public string SkipToken { get; set; }

    }
}
