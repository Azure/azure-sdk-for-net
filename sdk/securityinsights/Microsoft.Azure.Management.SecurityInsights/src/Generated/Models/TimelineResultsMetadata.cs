// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Expansion result metadata.
    /// </summary>
    public partial class TimelineResultsMetadata
    {
        /// <summary>
        /// Initializes a new instance of the TimelineResultsMetadata class.
        /// </summary>
        public TimelineResultsMetadata()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimelineResultsMetadata class.
        /// </summary>
        /// <param name="totalCount">the total items found for the timeline
        /// request</param>
        /// <param name="aggregations">timeline aggregation per kind</param>
        /// <param name="errors">information about the failure queries</param>
        public TimelineResultsMetadata(int totalCount, IList<TimelineAggregation> aggregations, IList<TimelineError> errors = default(IList<TimelineError>))
        {
            TotalCount = totalCount;
            Aggregations = aggregations;
            Errors = errors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the total items found for the timeline request
        /// </summary>
        [JsonProperty(PropertyName = "totalCount")]
        public int TotalCount { get; set; }

        /// <summary>
        /// Gets or sets timeline aggregation per kind
        /// </summary>
        [JsonProperty(PropertyName = "aggregations")]
        public IList<TimelineAggregation> Aggregations { get; set; }

        /// <summary>
        /// Gets or sets information about the failure queries
        /// </summary>
        [JsonProperty(PropertyName = "errors")]
        public IList<TimelineError> Errors { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Aggregations == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Aggregations");
            }
            if (Aggregations != null)
            {
                foreach (var element in Aggregations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Errors != null)
            {
                foreach (var element1 in Errors)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
