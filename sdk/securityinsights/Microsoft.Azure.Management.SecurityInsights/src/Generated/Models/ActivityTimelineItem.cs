// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents Activity timeline item.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Activity")]
    public partial class ActivityTimelineItem : EntityTimelineItem
    {
        /// <summary>
        /// Initializes a new instance of the ActivityTimelineItem class.
        /// </summary>
        public ActivityTimelineItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ActivityTimelineItem class.
        /// </summary>
        /// <param name="queryId">The activity query id.</param>
        /// <param name="bucketStartTimeUTC">The grouping bucket start
        /// time.</param>
        /// <param name="bucketEndTimeUTC">The grouping bucket end
        /// time.</param>
        /// <param name="firstActivityTimeUTC">The time of the first activity
        /// in the grouping bucket.</param>
        /// <param name="lastActivityTimeUTC">The time of the last activity in
        /// the grouping bucket.</param>
        /// <param name="content">The activity timeline content.</param>
        /// <param name="title">The activity timeline title.</param>
        public ActivityTimelineItem(string queryId, System.DateTime bucketStartTimeUTC, System.DateTime bucketEndTimeUTC, System.DateTime firstActivityTimeUTC, System.DateTime lastActivityTimeUTC, string content, string title)
        {
            QueryId = queryId;
            BucketStartTimeUTC = bucketStartTimeUTC;
            BucketEndTimeUTC = bucketEndTimeUTC;
            FirstActivityTimeUTC = firstActivityTimeUTC;
            LastActivityTimeUTC = lastActivityTimeUTC;
            Content = content;
            Title = title;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the activity query id.
        /// </summary>
        [JsonProperty(PropertyName = "queryId")]
        public string QueryId { get; set; }

        /// <summary>
        /// Gets or sets the grouping bucket start time.
        /// </summary>
        [JsonProperty(PropertyName = "bucketStartTimeUTC")]
        public System.DateTime BucketStartTimeUTC { get; set; }

        /// <summary>
        /// Gets or sets the grouping bucket end time.
        /// </summary>
        [JsonProperty(PropertyName = "bucketEndTimeUTC")]
        public System.DateTime BucketEndTimeUTC { get; set; }

        /// <summary>
        /// Gets or sets the time of the first activity in the grouping bucket.
        /// </summary>
        [JsonProperty(PropertyName = "firstActivityTimeUTC")]
        public System.DateTime FirstActivityTimeUTC { get; set; }

        /// <summary>
        /// Gets or sets the time of the last activity in the grouping bucket.
        /// </summary>
        [JsonProperty(PropertyName = "lastActivityTimeUTC")]
        public System.DateTime LastActivityTimeUTC { get; set; }

        /// <summary>
        /// Gets or sets the activity timeline content.
        /// </summary>
        [JsonProperty(PropertyName = "content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or sets the activity timeline title.
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (QueryId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "QueryId");
            }
            if (Content == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Content");
            }
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
        }
    }
}
