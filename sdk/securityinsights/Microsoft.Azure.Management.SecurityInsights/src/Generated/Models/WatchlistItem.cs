// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a Watchlist item in Azure Security Insights.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class WatchlistItem : ResourceWithEtag
    {
        /// <summary>
        /// Initializes a new instance of the WatchlistItem class.
        /// </summary>
        public WatchlistItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WatchlistItem class.
        /// </summary>
        /// <param name="itemsKeyValue">key-value pairs for a watchlist
        /// item</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="etag">Etag of the azure resource</param>
        /// <param name="watchlistItemType">The type of the watchlist
        /// item</param>
        /// <param name="watchlistItemId">The id (a Guid) of the watchlist
        /// item</param>
        /// <param name="tenantId">The tenantId to which the watchlist item
        /// belongs to</param>
        /// <param name="isDeleted">A flag that indicates if the watchlist item
        /// is deleted or not</param>
        /// <param name="created">The time the watchlist item was
        /// created</param>
        /// <param name="updated">The last time the watchlist item was
        /// updated</param>
        /// <param name="createdBy">Describes a user that created the watchlist
        /// item</param>
        /// <param name="updatedBy">Describes a user that updated the watchlist
        /// item</param>
        /// <param name="entityMapping">key-value pairs for a watchlist item
        /// entity mapping</param>
        public WatchlistItem(object itemsKeyValue, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string etag = default(string), string watchlistItemType = default(string), string watchlistItemId = default(string), string tenantId = default(string), bool? isDeleted = default(bool?), System.DateTime? created = default(System.DateTime?), System.DateTime? updated = default(System.DateTime?), UserInfo createdBy = default(UserInfo), UserInfo updatedBy = default(UserInfo), object entityMapping = default(object))
            : base(id, name, type, systemData, etag)
        {
            WatchlistItemType = watchlistItemType;
            WatchlistItemId = watchlistItemId;
            TenantId = tenantId;
            IsDeleted = isDeleted;
            Created = created;
            Updated = updated;
            CreatedBy = createdBy;
            UpdatedBy = updatedBy;
            ItemsKeyValue = itemsKeyValue;
            EntityMapping = entityMapping;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of the watchlist item
        /// </summary>
        [JsonProperty(PropertyName = "properties.watchlistItemType")]
        public string WatchlistItemType { get; set; }

        /// <summary>
        /// Gets or sets the id (a Guid) of the watchlist item
        /// </summary>
        [JsonProperty(PropertyName = "properties.watchlistItemId")]
        public string WatchlistItemId { get; set; }

        /// <summary>
        /// Gets or sets the tenantId to which the watchlist item belongs to
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or sets a flag that indicates if the watchlist item is deleted
        /// or not
        /// </summary>
        [JsonProperty(PropertyName = "properties.isDeleted")]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or sets the time the watchlist item was created
        /// </summary>
        [JsonProperty(PropertyName = "properties.created")]
        public System.DateTime? Created { get; set; }

        /// <summary>
        /// Gets or sets the last time the watchlist item was updated
        /// </summary>
        [JsonProperty(PropertyName = "properties.updated")]
        public System.DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or sets describes a user that created the watchlist item
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdBy")]
        public UserInfo CreatedBy { get; set; }

        /// <summary>
        /// Gets or sets describes a user that updated the watchlist item
        /// </summary>
        [JsonProperty(PropertyName = "properties.updatedBy")]
        public UserInfo UpdatedBy { get; set; }

        /// <summary>
        /// Gets or sets key-value pairs for a watchlist item
        /// </summary>
        [JsonProperty(PropertyName = "properties.itemsKeyValue")]
        public object ItemsKeyValue { get; set; }

        /// <summary>
        /// Gets or sets key-value pairs for a watchlist item entity mapping
        /// </summary>
        [JsonProperty(PropertyName = "properties.entityMapping")]
        public object EntityMapping { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ItemsKeyValue == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ItemsKeyValue");
            }
        }
    }
}
