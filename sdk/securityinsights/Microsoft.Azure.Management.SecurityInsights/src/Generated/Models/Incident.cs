// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents an incident in Azure Security Insights.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Incident : ResourceWithEtag
    {
        /// <summary>
        /// Initializes a new instance of the Incident class.
        /// </summary>
        public Incident()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Incident class.
        /// </summary>
        /// <param name="severity">The severity of the incident. Possible
        /// values include: 'High', 'Medium', 'Low', 'Informational'</param>
        /// <param name="status">The status of the incident. Possible values
        /// include: 'New', 'Active', 'Closed'</param>
        /// <param name="title">The title of the incident</param>
        /// <param name="id">Azure resource Id</param>
        /// <param name="name">Azure resource name</param>
        /// <param name="type">Azure resource type</param>
        /// <param name="etag">Etag of the azure resource</param>
        /// <param name="additionalData">Additional data on the
        /// incident</param>
        /// <param name="classification">The reason the incident was closed.
        /// Possible values include: 'Undetermined', 'TruePositive',
        /// 'BenignPositive', 'FalsePositive'</param>
        /// <param name="classificationComment">Describes the reason the
        /// incident was closed</param>
        /// <param name="classificationReason">The classification reason the
        /// incident was closed with. Possible values include:
        /// 'SuspiciousActivity', 'SuspiciousButExpected',
        /// 'IncorrectAlertLogic', 'InaccurateData'</param>
        /// <param name="createdTimeUtc">The time the incident was
        /// created</param>
        /// <param name="description">The description of the incident</param>
        /// <param name="firstActivityTimeUtc">The time of the first activity
        /// in the incident</param>
        /// <param name="incidentUrl">The deep-link url to the incident in
        /// Azure portal</param>
        /// <param name="incidentNumber">A sequential number</param>
        /// <param name="labels">List of labels relevant to this
        /// incident</param>
        /// <param name="lastActivityTimeUtc">The time of the last activity in
        /// the incident</param>
        /// <param name="lastModifiedTimeUtc">The last time the incident was
        /// updated</param>
        /// <param name="owner">Describes a user that the incident is assigned
        /// to</param>
        /// <param name="relatedAnalyticRuleIds">List of resource ids of
        /// Analytic rules related to the incident</param>
        public Incident(string severity, string status, string title, string id = default(string), string name = default(string), string type = default(string), string etag = default(string), IncidentAdditionalData additionalData = default(IncidentAdditionalData), string classification = default(string), string classificationComment = default(string), string classificationReason = default(string), System.DateTime? createdTimeUtc = default(System.DateTime?), string description = default(string), System.DateTime? firstActivityTimeUtc = default(System.DateTime?), string incidentUrl = default(string), int? incidentNumber = default(int?), IList<IncidentLabel> labels = default(IList<IncidentLabel>), System.DateTime? lastActivityTimeUtc = default(System.DateTime?), System.DateTime? lastModifiedTimeUtc = default(System.DateTime?), IncidentOwnerInfo owner = default(IncidentOwnerInfo), IList<string> relatedAnalyticRuleIds = default(IList<string>))
            : base(id, name, type, etag)
        {
            AdditionalData = additionalData;
            Classification = classification;
            ClassificationComment = classificationComment;
            ClassificationReason = classificationReason;
            CreatedTimeUtc = createdTimeUtc;
            Description = description;
            FirstActivityTimeUtc = firstActivityTimeUtc;
            IncidentUrl = incidentUrl;
            IncidentNumber = incidentNumber;
            Labels = labels;
            LastActivityTimeUtc = lastActivityTimeUtc;
            LastModifiedTimeUtc = lastModifiedTimeUtc;
            Owner = owner;
            RelatedAnalyticRuleIds = relatedAnalyticRuleIds;
            Severity = severity;
            Status = status;
            Title = title;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets additional data on the incident
        /// </summary>
        [JsonProperty(PropertyName = "properties.additionalData")]
        public IncidentAdditionalData AdditionalData { get; private set; }

        /// <summary>
        /// Gets or sets the reason the incident was closed. Possible values
        /// include: 'Undetermined', 'TruePositive', 'BenignPositive',
        /// 'FalsePositive'
        /// </summary>
        [JsonProperty(PropertyName = "properties.classification")]
        public string Classification { get; set; }

        /// <summary>
        /// Gets or sets describes the reason the incident was closed
        /// </summary>
        [JsonProperty(PropertyName = "properties.classificationComment")]
        public string ClassificationComment { get; set; }

        /// <summary>
        /// Gets or sets the classification reason the incident was closed
        /// with. Possible values include: 'SuspiciousActivity',
        /// 'SuspiciousButExpected', 'IncorrectAlertLogic', 'InaccurateData'
        /// </summary>
        [JsonProperty(PropertyName = "properties.classificationReason")]
        public string ClassificationReason { get; set; }

        /// <summary>
        /// Gets the time the incident was created
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdTimeUtc")]
        public System.DateTime? CreatedTimeUtc { get; private set; }

        /// <summary>
        /// Gets or sets the description of the incident
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the time of the first activity in the incident
        /// </summary>
        [JsonProperty(PropertyName = "properties.firstActivityTimeUtc")]
        public System.DateTime? FirstActivityTimeUtc { get; set; }

        /// <summary>
        /// Gets the deep-link url to the incident in Azure portal
        /// </summary>
        [JsonProperty(PropertyName = "properties.incidentUrl")]
        public string IncidentUrl { get; private set; }

        /// <summary>
        /// Gets a sequential number
        /// </summary>
        [JsonProperty(PropertyName = "properties.incidentNumber")]
        public int? IncidentNumber { get; private set; }

        /// <summary>
        /// Gets or sets list of labels relevant to this incident
        /// </summary>
        [JsonProperty(PropertyName = "properties.labels")]
        public IList<IncidentLabel> Labels { get; set; }

        /// <summary>
        /// Gets or sets the time of the last activity in the incident
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastActivityTimeUtc")]
        public System.DateTime? LastActivityTimeUtc { get; set; }

        /// <summary>
        /// Gets the last time the incident was updated
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModifiedTimeUtc")]
        public System.DateTime? LastModifiedTimeUtc { get; private set; }

        /// <summary>
        /// Gets or sets describes a user that the incident is assigned to
        /// </summary>
        [JsonProperty(PropertyName = "properties.owner")]
        public IncidentOwnerInfo Owner { get; set; }

        /// <summary>
        /// Gets list of resource ids of Analytic rules related to the incident
        /// </summary>
        [JsonProperty(PropertyName = "properties.relatedAnalyticRuleIds")]
        public IList<string> RelatedAnalyticRuleIds { get; private set; }

        /// <summary>
        /// Gets or sets the severity of the incident. Possible values include:
        /// 'High', 'Medium', 'Low', 'Informational'
        /// </summary>
        [JsonProperty(PropertyName = "properties.severity")]
        public string Severity { get; set; }

        /// <summary>
        /// Gets or sets the status of the incident. Possible values include:
        /// 'New', 'Active', 'Closed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the title of the incident
        /// </summary>
        [JsonProperty(PropertyName = "properties.title")]
        public string Title { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Severity == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Severity");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (Labels != null)
            {
                foreach (var element in Labels)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
