// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a security alert entity.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SecurityAlert : Entity
    {
        /// <summary>
        /// Initializes a new instance of the SecurityAlert class.
        /// </summary>
        public SecurityAlert()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAlert class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="additionalData">A bag of custom fields that should be
        /// part of the entity and will be presented to the user.</param>
        /// <param name="friendlyName">The graph item display name which is a
        /// short humanly readable description of the graph item instance. This
        /// property is optional and might be system generated.</param>
        /// <param name="alertDisplayName">The display name of the
        /// alert.</param>
        /// <param name="alertType">The type name of the alert.</param>
        /// <param name="compromisedEntity">Display name of the main entity
        /// being reported on.</param>
        /// <param name="confidenceLevel">The confidence level of this alert.
        /// Possible values include: 'Unknown', 'Low', 'High'</param>
        /// <param name="confidenceReasons">The confidence reasons</param>
        /// <param name="confidenceScore">The confidence score of the
        /// alert.</param>
        /// <param name="confidenceScoreStatus">The confidence score
        /// calculation status, i.e. indicating if score calculation is pending
        /// for this alert, not applicable or final. Possible values include:
        /// 'NotApplicable', 'InProcess', 'NotFinal', 'Final'</param>
        /// <param name="description">Alert description.</param>
        /// <param name="endTimeUtc">The impact end time of the alert (the time
        /// of the last event contributing to the alert).</param>
        /// <param name="intent">Holds the alert intent stage(s) mapping for
        /// this alert. Possible values include: 'Unknown', 'Probing',
        /// 'Exploitation', 'Persistence', 'PrivilegeEscalation',
        /// 'DefenseEvasion', 'CredentialAccess', 'Discovery',
        /// 'LateralMovement', 'Execution', 'Collection', 'Exfiltration',
        /// 'CommandAndControl', 'Impact'</param>
        /// <param name="providerAlertId">The identifier of the alert inside
        /// the product which generated the alert.</param>
        /// <param name="processingEndTime">The time the alert was made
        /// available for consumption.</param>
        /// <param name="productComponentName">The name of a component inside
        /// the product which generated the alert.</param>
        /// <param name="productName">The name of the product which published
        /// this alert.</param>
        /// <param name="productVersion">The version of the product generating
        /// the alert.</param>
        /// <param name="remediationSteps">Manual action items to take to
        /// remediate the alert.</param>
        /// <param name="severity">The severity of the alert. Possible values
        /// include: 'High', 'Medium', 'Low', 'Informational'</param>
        /// <param name="startTimeUtc">The impact start time of the alert (the
        /// time of the first event contributing to the alert).</param>
        /// <param name="status">The lifecycle status of the alert. Possible
        /// values include: 'Unknown', 'New', 'Resolved', 'Dismissed',
        /// 'InProgress'</param>
        /// <param name="systemAlertId">Holds the product identifier of the
        /// alert for the product.</param>
        /// <param name="tactics">The tactics of the alert</param>
        /// <param name="timeGenerated">The time the alert was
        /// generated.</param>
        /// <param name="vendorName">The name of the vendor that raise the
        /// alert.</param>
        /// <param name="alertLink">The uri link of the alert.</param>
        /// <param name="resourceIdentifiers">The list of resource identifiers
        /// of the alert.</param>
        public SecurityAlert(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, object> additionalData = default(IDictionary<string, object>), string friendlyName = default(string), string alertDisplayName = default(string), string alertType = default(string), string compromisedEntity = default(string), string confidenceLevel = default(string), IList<SecurityAlertPropertiesConfidenceReasonsItem> confidenceReasons = default(IList<SecurityAlertPropertiesConfidenceReasonsItem>), double? confidenceScore = default(double?), string confidenceScoreStatus = default(string), string description = default(string), System.DateTime? endTimeUtc = default(System.DateTime?), string intent = default(string), string providerAlertId = default(string), System.DateTime? processingEndTime = default(System.DateTime?), string productComponentName = default(string), string productName = default(string), string productVersion = default(string), IList<string> remediationSteps = default(IList<string>), string severity = default(string), System.DateTime? startTimeUtc = default(System.DateTime?), string status = default(string), string systemAlertId = default(string), IList<string> tactics = default(IList<string>), System.DateTime? timeGenerated = default(System.DateTime?), string vendorName = default(string), string alertLink = default(string), IList<object> resourceIdentifiers = default(IList<object>))
            : base(id, name, type, systemData)
        {
            AdditionalData = additionalData;
            FriendlyName = friendlyName;
            AlertDisplayName = alertDisplayName;
            AlertType = alertType;
            CompromisedEntity = compromisedEntity;
            ConfidenceLevel = confidenceLevel;
            ConfidenceReasons = confidenceReasons;
            ConfidenceScore = confidenceScore;
            ConfidenceScoreStatus = confidenceScoreStatus;
            Description = description;
            EndTimeUtc = endTimeUtc;
            Intent = intent;
            ProviderAlertId = providerAlertId;
            ProcessingEndTime = processingEndTime;
            ProductComponentName = productComponentName;
            ProductName = productName;
            ProductVersion = productVersion;
            RemediationSteps = remediationSteps;
            Severity = severity;
            StartTimeUtc = startTimeUtc;
            Status = status;
            SystemAlertId = systemAlertId;
            Tactics = tactics;
            TimeGenerated = timeGenerated;
            VendorName = vendorName;
            AlertLink = alertLink;
            ResourceIdentifiers = resourceIdentifiers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets a bag of custom fields that should be part of the entity and
        /// will be presented to the user.
        /// </summary>
        [JsonProperty(PropertyName = "properties.additionalData")]
        public IDictionary<string, object> AdditionalData { get; private set; }

        /// <summary>
        /// Gets the graph item display name which is a short humanly readable
        /// description of the graph item instance. This property is optional
        /// and might be system generated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.friendlyName")]
        public string FriendlyName { get; private set; }

        /// <summary>
        /// Gets the display name of the alert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.alertDisplayName")]
        public string AlertDisplayName { get; private set; }

        /// <summary>
        /// Gets the type name of the alert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.alertType")]
        public string AlertType { get; private set; }

        /// <summary>
        /// Gets display name of the main entity being reported on.
        /// </summary>
        [JsonProperty(PropertyName = "properties.compromisedEntity")]
        public string CompromisedEntity { get; private set; }

        /// <summary>
        /// Gets the confidence level of this alert. Possible values include:
        /// 'Unknown', 'Low', 'High'
        /// </summary>
        [JsonProperty(PropertyName = "properties.confidenceLevel")]
        public string ConfidenceLevel { get; private set; }

        /// <summary>
        /// Gets the confidence reasons
        /// </summary>
        [JsonProperty(PropertyName = "properties.confidenceReasons")]
        public IList<SecurityAlertPropertiesConfidenceReasonsItem> ConfidenceReasons { get; private set; }

        /// <summary>
        /// Gets the confidence score of the alert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.confidenceScore")]
        public double? ConfidenceScore { get; private set; }

        /// <summary>
        /// Gets the confidence score calculation status, i.e. indicating if
        /// score calculation is pending for this alert, not applicable or
        /// final. Possible values include: 'NotApplicable', 'InProcess',
        /// 'NotFinal', 'Final'
        /// </summary>
        [JsonProperty(PropertyName = "properties.confidenceScoreStatus")]
        public string ConfidenceScoreStatus { get; private set; }

        /// <summary>
        /// Gets alert description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets the impact end time of the alert (the time of the last event
        /// contributing to the alert).
        /// </summary>
        [JsonProperty(PropertyName = "properties.endTimeUtc")]
        public System.DateTime? EndTimeUtc { get; private set; }

        /// <summary>
        /// Gets holds the alert intent stage(s) mapping for this alert.
        /// Possible values include: 'Unknown', 'Probing', 'Exploitation',
        /// 'Persistence', 'PrivilegeEscalation', 'DefenseEvasion',
        /// 'CredentialAccess', 'Discovery', 'LateralMovement', 'Execution',
        /// 'Collection', 'Exfiltration', 'CommandAndControl', 'Impact'
        /// </summary>
        [JsonProperty(PropertyName = "properties.intent")]
        public string Intent { get; private set; }

        /// <summary>
        /// Gets the identifier of the alert inside the product which generated
        /// the alert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.providerAlertId")]
        public string ProviderAlertId { get; private set; }

        /// <summary>
        /// Gets the time the alert was made available for consumption.
        /// </summary>
        [JsonProperty(PropertyName = "properties.processingEndTime")]
        public System.DateTime? ProcessingEndTime { get; private set; }

        /// <summary>
        /// Gets the name of a component inside the product which generated the
        /// alert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.productComponentName")]
        public string ProductComponentName { get; private set; }

        /// <summary>
        /// Gets the name of the product which published this alert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.productName")]
        public string ProductName { get; private set; }

        /// <summary>
        /// Gets the version of the product generating the alert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.productVersion")]
        public string ProductVersion { get; private set; }

        /// <summary>
        /// Gets manual action items to take to remediate the alert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.remediationSteps")]
        public IList<string> RemediationSteps { get; private set; }

        /// <summary>
        /// Gets or sets the severity of the alert. Possible values include:
        /// 'High', 'Medium', 'Low', 'Informational'
        /// </summary>
        [JsonProperty(PropertyName = "properties.severity")]
        public string Severity { get; set; }

        /// <summary>
        /// Gets the impact start time of the alert (the time of the first
        /// event contributing to the alert).
        /// </summary>
        [JsonProperty(PropertyName = "properties.startTimeUtc")]
        public System.DateTime? StartTimeUtc { get; private set; }

        /// <summary>
        /// Gets the lifecycle status of the alert. Possible values include:
        /// 'Unknown', 'New', 'Resolved', 'Dismissed', 'InProgress'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets holds the product identifier of the alert for the product.
        /// </summary>
        [JsonProperty(PropertyName = "properties.systemAlertId")]
        public string SystemAlertId { get; private set; }

        /// <summary>
        /// Gets the tactics of the alert
        /// </summary>
        [JsonProperty(PropertyName = "properties.tactics")]
        public IList<string> Tactics { get; private set; }

        /// <summary>
        /// Gets the time the alert was generated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeGenerated")]
        public System.DateTime? TimeGenerated { get; private set; }

        /// <summary>
        /// Gets the name of the vendor that raise the alert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vendorName")]
        public string VendorName { get; private set; }

        /// <summary>
        /// Gets the uri link of the alert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.alertLink")]
        public string AlertLink { get; private set; }

        /// <summary>
        /// Gets the list of resource identifiers of the alert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceIdentifiers")]
        public IList<object> ResourceIdentifiers { get; private set; }

    }
}
