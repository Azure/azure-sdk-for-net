// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes the response from the external server
    /// </summary>
    public partial class CodelessConnectorPollingResponseProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CodelessConnectorPollingResponseProperties class.
        /// </summary>
        public CodelessConnectorPollingResponseProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CodelessConnectorPollingResponseProperties class.
        /// </summary>
        /// <param name="eventsJsonPaths">Describes the path we should extract
        /// the data in the response</param>
        /// <param name="successStatusJsonPath">Describes the path we should
        /// extract the status code in the response</param>
        /// <param name="successStatusValue">Describes the path we should
        /// extract the status value in the response</param>
        /// <param name="isGzipCompressed">Describes if the data in the
        /// response is Gzip</param>
        public CodelessConnectorPollingResponseProperties(IList<string> eventsJsonPaths, string successStatusJsonPath = default(string), string successStatusValue = default(string), bool? isGzipCompressed = default(bool?))
        {
            EventsJsonPaths = eventsJsonPaths;
            SuccessStatusJsonPath = successStatusJsonPath;
            SuccessStatusValue = successStatusValue;
            IsGzipCompressed = isGzipCompressed;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets describes the path we should extract the data in the
        /// response
        /// </summary>
        [JsonProperty(PropertyName = "eventsJsonPaths")]
        public IList<string> EventsJsonPaths { get; set; }

        /// <summary>
        /// Gets or sets describes the path we should extract the status code
        /// in the response
        /// </summary>
        [JsonProperty(PropertyName = "successStatusJsonPath")]
        public string SuccessStatusJsonPath { get; set; }

        /// <summary>
        /// Gets or sets describes the path we should extract the status value
        /// in the response
        /// </summary>
        [JsonProperty(PropertyName = "successStatusValue")]
        public string SuccessStatusValue { get; set; }

        /// <summary>
        /// Gets or sets describes if the data in the response is Gzip
        /// </summary>
        [JsonProperty(PropertyName = "isGzipCompressed")]
        public bool? IsGzipCompressed { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EventsJsonPaths == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EventsJsonPaths");
            }
        }
    }
}
