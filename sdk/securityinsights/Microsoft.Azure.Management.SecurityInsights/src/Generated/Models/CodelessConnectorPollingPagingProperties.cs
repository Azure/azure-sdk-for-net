// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describe the properties needed to make a pagination call
    /// </summary>
    public partial class CodelessConnectorPollingPagingProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CodelessConnectorPollingPagingProperties class.
        /// </summary>
        public CodelessConnectorPollingPagingProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CodelessConnectorPollingPagingProperties class.
        /// </summary>
        /// <param name="pagingType">Describes the type. could be 'None',
        /// 'PageToken', 'PageCount', 'TimeStamp'</param>
        /// <param name="nextPageParaName">Defines the name of a next page
        /// attribute</param>
        /// <param name="nextPageTokenJsonPath">Defines the path to a next page
        /// token JSON</param>
        /// <param name="pageCountAttributePath">Defines the path to a page
        /// count attribute</param>
        /// <param name="pageTotalCountAttributePath">Defines the path to a
        /// page total count attribute</param>
        /// <param name="pageTimeStampAttributePath">Defines the path to a
        /// paging time stamp attribute</param>
        /// <param name="searchTheLatestTimeStampFromEventsList">Determines
        /// whether to search for the latest time stamp in the events
        /// list</param>
        /// <param name="pageSizeParaName">Defines the name of the page size
        /// parameter</param>
        /// <param name="pageSize">Defines the paging size</param>
        public CodelessConnectorPollingPagingProperties(string pagingType, string nextPageParaName = default(string), string nextPageTokenJsonPath = default(string), string pageCountAttributePath = default(string), string pageTotalCountAttributePath = default(string), string pageTimeStampAttributePath = default(string), string searchTheLatestTimeStampFromEventsList = default(string), string pageSizeParaName = default(string), int? pageSize = default(int?))
        {
            PagingType = pagingType;
            NextPageParaName = nextPageParaName;
            NextPageTokenJsonPath = nextPageTokenJsonPath;
            PageCountAttributePath = pageCountAttributePath;
            PageTotalCountAttributePath = pageTotalCountAttributePath;
            PageTimeStampAttributePath = pageTimeStampAttributePath;
            SearchTheLatestTimeStampFromEventsList = searchTheLatestTimeStampFromEventsList;
            PageSizeParaName = pageSizeParaName;
            PageSize = pageSize;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets describes the type. could be 'None', 'PageToken',
        /// 'PageCount', 'TimeStamp'
        /// </summary>
        [JsonProperty(PropertyName = "pagingType")]
        public string PagingType { get; set; }

        /// <summary>
        /// Gets or sets defines the name of a next page attribute
        /// </summary>
        [JsonProperty(PropertyName = "nextPageParaName")]
        public string NextPageParaName { get; set; }

        /// <summary>
        /// Gets or sets defines the path to a next page token JSON
        /// </summary>
        [JsonProperty(PropertyName = "nextPageTokenJsonPath")]
        public string NextPageTokenJsonPath { get; set; }

        /// <summary>
        /// Gets or sets defines the path to a page count attribute
        /// </summary>
        [JsonProperty(PropertyName = "pageCountAttributePath")]
        public string PageCountAttributePath { get; set; }

        /// <summary>
        /// Gets or sets defines the path to a page total count attribute
        /// </summary>
        [JsonProperty(PropertyName = "pageTotalCountAttributePath")]
        public string PageTotalCountAttributePath { get; set; }

        /// <summary>
        /// Gets or sets defines the path to a paging time stamp attribute
        /// </summary>
        [JsonProperty(PropertyName = "pageTimeStampAttributePath")]
        public string PageTimeStampAttributePath { get; set; }

        /// <summary>
        /// Gets or sets determines whether to search for the latest time stamp
        /// in the events list
        /// </summary>
        [JsonProperty(PropertyName = "searchTheLatestTimeStampFromEventsList")]
        public string SearchTheLatestTimeStampFromEventsList { get; set; }

        /// <summary>
        /// Gets or sets defines the name of the page size parameter
        /// </summary>
        [JsonProperty(PropertyName = "pageSizeParaName")]
        public string PageSizeParaName { get; set; }

        /// <summary>
        /// Gets or sets defines the paging size
        /// </summary>
        [JsonProperty(PropertyName = "pageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PagingType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PagingType");
            }
        }
    }
}
