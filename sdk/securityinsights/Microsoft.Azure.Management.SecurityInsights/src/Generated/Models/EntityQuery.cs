// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Specific entity query.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class EntityQuery : Resource
    {
        /// <summary>
        /// Initializes a new instance of the EntityQuery class.
        /// </summary>
        public EntityQuery()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EntityQuery class.
        /// </summary>
        /// <param name="id">Azure resource Id</param>
        /// <param name="name">Azure resource name</param>
        /// <param name="type">Azure resource type</param>
        /// <param name="dataSources">List of the data sources that are
        /// required to run the query</param>
        /// <param name="displayName">The query display name</param>
        /// <param name="inputEntityType">The type of the query's source
        /// entity. Possible values include: 'Account', 'Host', 'File',
        /// 'AzureResource', 'CloudApplication', 'DNS', 'FileHash', 'IP',
        /// 'Malware', 'Process', 'RegistryKey', 'RegistryValue',
        /// 'SecurityGroup', 'URL', 'IoTDevice', 'SecurityAlert',
        /// 'HuntingBookmark'</param>
        /// <param name="inputFields">List of the fields of the source entity
        /// that are required to run the query</param>
        /// <param name="outputEntityTypes">List of the desired output types to
        /// be constructed from the result</param>
        /// <param name="queryTemplate">The template query string to be parsed
        /// and formatted</param>
        public EntityQuery(string id = default(string), string name = default(string), string type = default(string), IList<string> dataSources = default(IList<string>), string displayName = default(string), string inputEntityType = default(string), IList<string> inputFields = default(IList<string>), IList<string> outputEntityTypes = default(IList<string>), string queryTemplate = default(string))
            : base(id, name, type)
        {
            DataSources = dataSources;
            DisplayName = displayName;
            InputEntityType = inputEntityType;
            InputFields = inputFields;
            OutputEntityTypes = outputEntityTypes;
            QueryTemplate = queryTemplate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of the data sources that are required to run the
        /// query
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSources")]
        public IList<string> DataSources { get; set; }

        /// <summary>
        /// Gets or sets the query display name
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the type of the query's source entity. Possible values
        /// include: 'Account', 'Host', 'File', 'AzureResource',
        /// 'CloudApplication', 'DNS', 'FileHash', 'IP', 'Malware', 'Process',
        /// 'RegistryKey', 'RegistryValue', 'SecurityGroup', 'URL',
        /// 'IoTDevice', 'SecurityAlert', 'HuntingBookmark'
        /// </summary>
        [JsonProperty(PropertyName = "properties.inputEntityType")]
        public string InputEntityType { get; set; }

        /// <summary>
        /// Gets or sets list of the fields of the source entity that are
        /// required to run the query
        /// </summary>
        [JsonProperty(PropertyName = "properties.inputFields")]
        public IList<string> InputFields { get; set; }

        /// <summary>
        /// Gets or sets list of the desired output types to be constructed
        /// from the result
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputEntityTypes")]
        public IList<string> OutputEntityTypes { get; set; }

        /// <summary>
        /// Gets or sets the template query string to be parsed and formatted
        /// </summary>
        [JsonProperty(PropertyName = "properties.queryTemplate")]
        public string QueryTemplate { get; set; }

    }
}
