// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ThreatIntelligenceIndicatorOperations.
    /// </summary>
    public static partial class ThreatIntelligenceIndicatorOperationsExtensions
    {
            /// <summary>
            /// Create a new threat intelligence indicator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='threatIntelligenceProperties'>
            /// Properties of threat intelligence indicators to create and update.
            /// </param>
            public static ThreatIntelligenceInformation CreateIndicator(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, ThreatIntelligenceIndicatorModel threatIntelligenceProperties)
            {
                return operations.CreateIndicatorAsync(resourceGroupName, workspaceName, threatIntelligenceProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new threat intelligence indicator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='threatIntelligenceProperties'>
            /// Properties of threat intelligence indicators to create and update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThreatIntelligenceInformation> CreateIndicatorAsync(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, ThreatIntelligenceIndicatorModel threatIntelligenceProperties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateIndicatorWithHttpMessagesAsync(resourceGroupName, workspaceName, threatIntelligenceProperties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// View a threat intelligence indicator by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// Threat intelligence indicator name field.
            /// </param>
            public static ThreatIntelligenceInformation Get(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, string name)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// View a threat intelligence indicator by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// Threat intelligence indicator name field.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThreatIntelligenceInformation> GetAsync(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a threat Intelligence indicator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// Threat intelligence indicator name field.
            /// </param>
            /// <param name='threatIntelligenceProperties'>
            /// Properties of threat intelligence indicators to create and update.
            /// </param>
            public static ThreatIntelligenceInformation Create(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, string name, ThreatIntelligenceIndicatorModel threatIntelligenceProperties)
            {
                return operations.CreateAsync(resourceGroupName, workspaceName, name, threatIntelligenceProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a threat Intelligence indicator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// Threat intelligence indicator name field.
            /// </param>
            /// <param name='threatIntelligenceProperties'>
            /// Properties of threat intelligence indicators to create and update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThreatIntelligenceInformation> CreateAsync(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, string name, ThreatIntelligenceIndicatorModel threatIntelligenceProperties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, workspaceName, name, threatIntelligenceProperties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a threat intelligence indicator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// Threat intelligence indicator name field.
            /// </param>
            public static void Delete(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, string name)
            {
                operations.DeleteAsync(resourceGroupName, workspaceName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a threat intelligence indicator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// Threat intelligence indicator name field.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Query threat intelligence indicators as per filtering criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='threatIntelligenceFilteringCriteria'>
            /// Filtering criteria for querying threat intelligence indicators.
            /// </param>
            public static IPage<ThreatIntelligenceInformation> QueryIndicators(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, ThreatIntelligenceFilteringCriteria threatIntelligenceFilteringCriteria)
            {
                return operations.QueryIndicatorsAsync(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query threat intelligence indicators as per filtering criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='threatIntelligenceFilteringCriteria'>
            /// Filtering criteria for querying threat intelligence indicators.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ThreatIntelligenceInformation>> QueryIndicatorsAsync(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, ThreatIntelligenceFilteringCriteria threatIntelligenceFilteringCriteria, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryIndicatorsWithHttpMessagesAsync(resourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Append tags to a threat intelligence indicator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// Threat intelligence indicator name field.
            /// </param>
            /// <param name='threatIntelligenceTags'>
            /// List of tags to be appended.
            /// </param>
            public static void AppendTags(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, string name, IList<string> threatIntelligenceTags = default(IList<string>))
            {
                operations.AppendTagsAsync(resourceGroupName, workspaceName, name, threatIntelligenceTags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Append tags to a threat intelligence indicator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// Threat intelligence indicator name field.
            /// </param>
            /// <param name='threatIntelligenceTags'>
            /// List of tags to be appended.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AppendTagsAsync(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, string name, IList<string> threatIntelligenceTags = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AppendTagsWithHttpMessagesAsync(resourceGroupName, workspaceName, name, threatIntelligenceTags, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Replace tags added to a threat intelligence indicator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// Threat intelligence indicator name field.
            /// </param>
            /// <param name='threatIntelligenceReplaceTags'>
            /// Tags in the threat intelligence indicator to be replaced.
            /// </param>
            public static ThreatIntelligenceInformation ReplaceTags(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, string name, ThreatIntelligenceIndicatorModel threatIntelligenceReplaceTags)
            {
                return operations.ReplaceTagsAsync(resourceGroupName, workspaceName, name, threatIntelligenceReplaceTags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace tags added to a threat intelligence indicator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// Threat intelligence indicator name field.
            /// </param>
            /// <param name='threatIntelligenceReplaceTags'>
            /// Tags in the threat intelligence indicator to be replaced.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThreatIntelligenceInformation> ReplaceTagsAsync(this IThreatIntelligenceIndicatorOperations operations, string resourceGroupName, string workspaceName, string name, ThreatIntelligenceIndicatorModel threatIntelligenceReplaceTags, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceTagsWithHttpMessagesAsync(resourceGroupName, workspaceName, name, threatIntelligenceReplaceTags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query threat intelligence indicators as per filtering criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ThreatIntelligenceInformation> QueryIndicatorsNext(this IThreatIntelligenceIndicatorOperations operations, string nextPageLink)
            {
                return operations.QueryIndicatorsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query threat intelligence indicators as per filtering criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ThreatIntelligenceInformation>> QueryIndicatorsNextAsync(this IThreatIntelligenceIndicatorOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryIndicatorsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
