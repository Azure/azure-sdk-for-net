// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WatchlistsOperations.
    /// </summary>
    public static partial class WatchlistsOperationsExtensions
    {
            /// <summary>
            /// Gets all watchlists, without watchlist items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='skipToken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls. Optional.
            /// </param>
            public static IPage<Watchlist> List(this IWatchlistsOperations operations, string resourceGroupName, string workspaceName, string skipToken = default(string))
            {
                return operations.ListAsync(resourceGroupName, workspaceName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all watchlists, without watchlist items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='skipToken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Watchlist>> ListAsync(this IWatchlistsOperations operations, string resourceGroupName, string workspaceName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workspaceName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a watchlist, without its watchlist items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='watchlistAlias'>
            /// Watchlist Alias
            /// </param>
            public static Watchlist Get(this IWatchlistsOperations operations, string resourceGroupName, string workspaceName, string watchlistAlias)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, watchlistAlias).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a watchlist, without its watchlist items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='watchlistAlias'>
            /// Watchlist Alias
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Watchlist> GetAsync(this IWatchlistsOperations operations, string resourceGroupName, string workspaceName, string watchlistAlias, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, watchlistAlias, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a watchlist.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='watchlistAlias'>
            /// Watchlist Alias
            /// </param>
            public static WatchlistsDeleteHeaders Delete(this IWatchlistsOperations operations, string resourceGroupName, string workspaceName, string watchlistAlias)
            {
                return operations.DeleteAsync(resourceGroupName, workspaceName, watchlistAlias).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a watchlist.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='watchlistAlias'>
            /// Watchlist Alias
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WatchlistsDeleteHeaders> DeleteAsync(this IWatchlistsOperations operations, string resourceGroupName, string workspaceName, string watchlistAlias, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, watchlistAlias, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Create or update a Watchlist and its Watchlist Items (bulk creation, e.g.
            /// through text/csv content type). To create a Watchlist and its Items, we
            /// should call this endpoint with either rawContent or a valid SAR URI and
            /// contentType properties. The rawContent is mainly used for small watchlist
            /// (content size below 3.8 MB). The SAS URI enables the creation of large
            /// watchlist, where the content size can go up to 500 MB. The status of
            /// processing such large file can be polled through the URL returned in
            /// Azure-AsyncOperation header.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='watchlistAlias'>
            /// Watchlist Alias
            /// </param>
            /// <param name='watchlist'>
            /// The watchlist
            /// </param>
            public static Watchlist CreateOrUpdate(this IWatchlistsOperations operations, string resourceGroupName, string workspaceName, string watchlistAlias, Watchlist watchlist)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, watchlistAlias, watchlist).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Watchlist and its Watchlist Items (bulk creation, e.g.
            /// through text/csv content type). To create a Watchlist and its Items, we
            /// should call this endpoint with either rawContent or a valid SAR URI and
            /// contentType properties. The rawContent is mainly used for small watchlist
            /// (content size below 3.8 MB). The SAS URI enables the creation of large
            /// watchlist, where the content size can go up to 500 MB. The status of
            /// processing such large file can be polled through the URL returned in
            /// Azure-AsyncOperation header.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='watchlistAlias'>
            /// Watchlist Alias
            /// </param>
            /// <param name='watchlist'>
            /// The watchlist
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Watchlist> CreateOrUpdateAsync(this IWatchlistsOperations operations, string resourceGroupName, string workspaceName, string watchlistAlias, Watchlist watchlist, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, watchlistAlias, watchlist, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all watchlists, without watchlist items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Watchlist> ListNext(this IWatchlistsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all watchlists, without watchlist items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Watchlist>> ListNextAsync(this IWatchlistsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
