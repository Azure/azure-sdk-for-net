// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// API spec for Microsoft.SecurityInsights (Azure Security Insights)
    /// resource provider
    /// </summary>
    public partial class SecurityInsights : ServiceClient<SecurityInsights>, ISecurityInsights, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The ID of the target subscription.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The API version to use for this operation.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default value is
        /// 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When set to
        /// true a unique x-ms-client-request-id value is generated and included in
        /// each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the IAlertRulesOperations.
        /// </summary>
        public virtual IAlertRulesOperations AlertRules { get; private set; }

        /// <summary>
        /// Gets the IActionsOperations.
        /// </summary>
        public virtual IActionsOperations Actions { get; private set; }

        /// <summary>
        /// Gets the IAlertRuleTemplatesOperations.
        /// </summary>
        public virtual IAlertRuleTemplatesOperations AlertRuleTemplates { get; private set; }

        /// <summary>
        /// Gets the IAutomationRulesOperations.
        /// </summary>
        public virtual IAutomationRulesOperations AutomationRules { get; private set; }

        /// <summary>
        /// Gets the IIncidentsOperations.
        /// </summary>
        public virtual IIncidentsOperations Incidents { get; private set; }

        /// <summary>
        /// Gets the IBookmarksOperations.
        /// </summary>
        public virtual IBookmarksOperations Bookmarks { get; private set; }

        /// <summary>
        /// Gets the IBookmarkRelationsOperations.
        /// </summary>
        public virtual IBookmarkRelationsOperations BookmarkRelations { get; private set; }

        /// <summary>
        /// Gets the IBookmarkOperations.
        /// </summary>
        public virtual IBookmarkOperations Bookmark { get; private set; }

        /// <summary>
        /// Gets the IIPGeodataOperations.
        /// </summary>
        public virtual IIPGeodataOperations IPGeodata { get; private set; }

        /// <summary>
        /// Gets the IDomainWhoisOperations.
        /// </summary>
        public virtual IDomainWhoisOperations DomainWhois { get; private set; }

        /// <summary>
        /// Gets the IEntitiesOperations.
        /// </summary>
        public virtual IEntitiesOperations Entities { get; private set; }

        /// <summary>
        /// Gets the IEntitiesGetTimelineOperations.
        /// </summary>
        public virtual IEntitiesGetTimelineOperations EntitiesGetTimeline { get; private set; }

        /// <summary>
        /// Gets the IEntitiesRelationsOperations.
        /// </summary>
        public virtual IEntitiesRelationsOperations EntitiesRelations { get; private set; }

        /// <summary>
        /// Gets the IEntityRelationsOperations.
        /// </summary>
        public virtual IEntityRelationsOperations EntityRelations { get; private set; }

        /// <summary>
        /// Gets the IEntityQueriesOperations.
        /// </summary>
        public virtual IEntityQueriesOperations EntityQueries { get; private set; }

        /// <summary>
        /// Gets the IEntityQueryTemplatesOperations.
        /// </summary>
        public virtual IEntityQueryTemplatesOperations EntityQueryTemplates { get; private set; }

        /// <summary>
        /// Gets the IIncidentCommentsOperations.
        /// </summary>
        public virtual IIncidentCommentsOperations IncidentComments { get; private set; }

        /// <summary>
        /// Gets the IIncidentRelationsOperations.
        /// </summary>
        public virtual IIncidentRelationsOperations IncidentRelations { get; private set; }

        /// <summary>
        /// Gets the IMetadataOperations.
        /// </summary>
        public virtual IMetadataOperations Metadata { get; private set; }

        /// <summary>
        /// Gets the IOfficeConsentsOperations.
        /// </summary>
        public virtual IOfficeConsentsOperations OfficeConsents { get; private set; }

        /// <summary>
        /// Gets the ISentinelOnboardingStatesOperations.
        /// </summary>
        public virtual ISentinelOnboardingStatesOperations SentinelOnboardingStates { get; private set; }

        /// <summary>
        /// Gets the IProductSettingsOperations.
        /// </summary>
        public virtual IProductSettingsOperations ProductSettings { get; private set; }

        /// <summary>
        /// Gets the ISourceControlOperations.
        /// </summary>
        public virtual ISourceControlOperations SourceControl { get; private set; }

        /// <summary>
        /// Gets the ISourceControlsOperations.
        /// </summary>
        public virtual ISourceControlsOperations SourceControls { get; private set; }

        /// <summary>
        /// Gets the IThreatIntelligenceIndicatorOperations.
        /// </summary>
        public virtual IThreatIntelligenceIndicatorOperations ThreatIntelligenceIndicator { get; private set; }

        /// <summary>
        /// Gets the IThreatIntelligenceIndicatorsOperations.
        /// </summary>
        public virtual IThreatIntelligenceIndicatorsOperations ThreatIntelligenceIndicators { get; private set; }

        /// <summary>
        /// Gets the IThreatIntelligenceIndicatorMetricsOperations.
        /// </summary>
        public virtual IThreatIntelligenceIndicatorMetricsOperations ThreatIntelligenceIndicatorMetrics { get; private set; }

        /// <summary>
        /// Gets the IWatchlistsOperations.
        /// </summary>
        public virtual IWatchlistsOperations Watchlists { get; private set; }

        /// <summary>
        /// Gets the IWatchlistItemsOperations.
        /// </summary>
        public virtual IWatchlistItemsOperations WatchlistItems { get; private set; }

        /// <summary>
        /// Gets the IDataConnectorsOperations.
        /// </summary>
        public virtual IDataConnectorsOperations DataConnectors { get; private set; }

        /// <summary>
        /// Gets the IDataConnectorsCheckRequirementsOperations.
        /// </summary>
        public virtual IDataConnectorsCheckRequirementsOperations DataConnectorsCheckRequirements { get; private set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Initializes a new instance of the SecurityInsights class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SecurityInsights.Dispose(). False: will not dispose provided httpClient</param>
        protected SecurityInsights(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityInsights class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SecurityInsights(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityInsights class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SecurityInsights(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityInsights class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SecurityInsights(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SecurityInsights class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SecurityInsights(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SecurityInsights class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityInsights(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityInsights class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SecurityInsights.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityInsights(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityInsights class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityInsights(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityInsights class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityInsights(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SecurityInsights class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SecurityInsights(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            AlertRules = new AlertRulesOperations(this);
            Actions = new ActionsOperations(this);
            AlertRuleTemplates = new AlertRuleTemplatesOperations(this);
            AutomationRules = new AutomationRulesOperations(this);
            Incidents = new IncidentsOperations(this);
            Bookmarks = new BookmarksOperations(this);
            BookmarkRelations = new BookmarkRelationsOperations(this);
            Bookmark = new BookmarkOperations(this);
            IPGeodata = new IPGeodataOperations(this);
            DomainWhois = new DomainWhoisOperations(this);
            Entities = new EntitiesOperations(this);
            EntitiesGetTimeline = new EntitiesGetTimelineOperations(this);
            EntitiesRelations = new EntitiesRelationsOperations(this);
            EntityRelations = new EntityRelationsOperations(this);
            EntityQueries = new EntityQueriesOperations(this);
            EntityQueryTemplates = new EntityQueryTemplatesOperations(this);
            IncidentComments = new IncidentCommentsOperations(this);
            IncidentRelations = new IncidentRelationsOperations(this);
            Metadata = new MetadataOperations(this);
            OfficeConsents = new OfficeConsentsOperations(this);
            SentinelOnboardingStates = new SentinelOnboardingStatesOperations(this);
            ProductSettings = new ProductSettingsOperations(this);
            SourceControl = new SourceControlOperations(this);
            SourceControls = new SourceControlsOperations(this);
            ThreatIntelligenceIndicator = new ThreatIntelligenceIndicatorOperations(this);
            ThreatIntelligenceIndicators = new ThreatIntelligenceIndicatorsOperations(this);
            ThreatIntelligenceIndicatorMetrics = new ThreatIntelligenceIndicatorMetricsOperations(this);
            Watchlists = new WatchlistsOperations(this);
            WatchlistItems = new WatchlistItemsOperations(this);
            DataConnectors = new DataConnectorsOperations(this);
            DataConnectorsCheckRequirements = new DataConnectorsCheckRequirementsOperations(this);
            Operations = new Operations(this);
            BaseUri = new System.Uri("https://management.azure.com");
            ApiVersion = "2022-01-01-preview";
            AcceptLanguage = "en-US";
            LongRunningOperationRetryTimeout = 30;
            GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<AlertRule>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<AlertRule>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<AlertRuleTemplate>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<AlertRuleTemplate>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<AutomationRuleCondition>("conditionType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<AutomationRuleCondition>("conditionType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<AutomationRuleAction>("actionType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<AutomationRuleAction>("actionType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Entity>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<Entity>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<EntityTimelineItem>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<EntityTimelineItem>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<EntityQueryItem>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<EntityQueryItem>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<EntityQuery>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<EntityQuery>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<CustomEntityQuery>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<CustomEntityQuery>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<EntityQueryTemplate>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<EntityQueryTemplate>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Settings>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<Settings>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ThreatIntelligenceInformation>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ThreatIntelligenceInformation>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DataConnectorsCheckRequirements>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DataConnectorsCheckRequirements>("kind"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DataConnector>("kind"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DataConnector>("kind"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter());
        }
    }
}
