// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CaseCommentsOperations.
    /// </summary>
    public static partial class CaseCommentsOperationsExtensions
    {
            /// <summary>
            /// Creates the case comment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='operationalInsightsResourceProvider'>
            /// The namespace of workspaces resource provider-
            /// Microsoft.OperationalInsights.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='caseId'>
            /// Case ID
            /// </param>
            /// <param name='caseCommentId'>
            /// Case comment ID
            /// </param>
            /// <param name='message'>
            /// The comment message
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static CaseComment CreateComment(this ICaseCommentsOperations operations, string resourceGroupName, string operationalInsightsResourceProvider, string workspaceName, string caseId, string caseCommentId, string message)
            {
                return operations.CreateCommentAsync(resourceGroupName, operationalInsightsResourceProvider, workspaceName, caseId, caseCommentId, message).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the case comment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='operationalInsightsResourceProvider'>
            /// The namespace of workspaces resource provider-
            /// Microsoft.OperationalInsights.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='caseId'>
            /// Case ID
            /// </param>
            /// <param name='caseCommentId'>
            /// Case comment ID
            /// </param>
            /// <param name='message'>
            /// The comment message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<CaseComment> CreateCommentAsync(this ICaseCommentsOperations operations, string resourceGroupName, string operationalInsightsResourceProvider, string workspaceName, string caseId, string caseCommentId, string message, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCommentWithHttpMessagesAsync(resourceGroupName, operationalInsightsResourceProvider, workspaceName, caseId, caseCommentId, message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
