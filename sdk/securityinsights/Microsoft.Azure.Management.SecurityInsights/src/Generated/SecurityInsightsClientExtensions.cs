// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SecurityInsightsClient.
    /// </summary>
    public static partial class SecurityInsightsClientExtensions
    {
            /// <summary>
            /// Get requirements state for a data connector type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='operationalInsightsResourceProvider'>
            /// The namespace of workspaces resource provider-
            /// Microsoft.OperationalInsights.
            /// </param>
            /// <param name='kind'>
            /// The kind of the data connector. Possible values include:
            /// 'AzureActiveDirectory', 'AzureSecurityCenter', 'MicrosoftCloudAppSecurity',
            /// 'ThreatIntelligence', 'ThreatIntelligenceTaxii', 'Office365',
            /// 'AmazonWebServicesCloudTrail', 'AzureAdvancedThreatProtection',
            /// 'MicrosoftDefenderAdvancedThreatProtection'
            /// </param>
            public static DataConnectorRequirementsState ListDataConnectorRequirements(this ISecurityInsightsClient operations, string resourceGroupName, string workspaceName, string operationalInsightsResourceProvider, string kind)
            {
                return operations.ListDataConnectorRequirementsAsync(resourceGroupName, workspaceName, operationalInsightsResourceProvider, kind).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get requirements state for a data connector type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='operationalInsightsResourceProvider'>
            /// The namespace of workspaces resource provider-
            /// Microsoft.OperationalInsights.
            /// </param>
            /// <param name='kind'>
            /// The kind of the data connector. Possible values include:
            /// 'AzureActiveDirectory', 'AzureSecurityCenter', 'MicrosoftCloudAppSecurity',
            /// 'ThreatIntelligence', 'ThreatIntelligenceTaxii', 'Office365',
            /// 'AmazonWebServicesCloudTrail', 'AzureAdvancedThreatProtection',
            /// 'MicrosoftDefenderAdvancedThreatProtection'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataConnectorRequirementsState> ListDataConnectorRequirementsAsync(this ISecurityInsightsClient operations, string resourceGroupName, string workspaceName, string operationalInsightsResourceProvider, string kind, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDataConnectorRequirementsWithHttpMessagesAsync(resourceGroupName, workspaceName, operationalInsightsResourceProvider, kind, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
