// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EntityRelationsOperations.
    /// </summary>
    public static partial class EntityRelationsOperationsExtensions
    {
            /// <summary>
            /// Gets an entity relation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='entityId'>
            /// entity ID
            /// </param>
            /// <param name='relationName'>
            /// Relation Name
            /// </param>
            public static Relation GetRelation(this IEntityRelationsOperations operations, string resourceGroupName, string workspaceName, string entityId, string relationName)
            {
                return operations.GetRelationAsync(resourceGroupName, workspaceName, entityId, relationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an entity relation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='entityId'>
            /// entity ID
            /// </param>
            /// <param name='relationName'>
            /// Relation Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Relation> GetRelationAsync(this IEntityRelationsOperations operations, string resourceGroupName, string workspaceName, string entityId, string relationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelationWithHttpMessagesAsync(resourceGroupName, workspaceName, entityId, relationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
