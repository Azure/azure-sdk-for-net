{
  "Entries": [
    {
      "RequestUri": "/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/alertRuleTemplates?api-version=2020-01-01",
      "EncodedRequestUri": "L3N1YnNjcmlwdGlvbnMvMWM2MWNjYmYtNzBiMy00NWEzLWExZmItODQ4Y2U0NmQ3MGE2L3Jlc291cmNlR3JvdXBzL25kaWNvbGEtYXpzcG9zaC9wcm92aWRlcnMvTWljcm9zb2Z0Lk9wZXJhdGlvbmFsSW5zaWdodHMvd29ya3NwYWNlcy9henNwb3NoL3Byb3ZpZGVycy9NaWNyb3NvZnQuU2VjdXJpdHlJbnNpZ2h0cy9hbGVydFJ1bGVUZW1wbGF0ZXM/YXBpLXZlcnNpb249MjAyMC0wMS0wMQ==",
      "RequestMethod": "GET",
      "RequestBody": "",
      "RequestHeaders": {
        "x-ms-client-request-id": [
          "0967ce4d-fc3d-4252-952c-514f7902e37e"
        ],
        "Accept-Language": [
          "en-US"
        ],
        "User-Agent": [
          "FxVersion/4.6.29518.01",
          "OSName/Windows",
          "OSVersion/Microsoft.Windows.10.0.19042.",
          "Microsoft.Azure.Management.SecurityInsights.SecurityInsightsClient/1.0.0.0"
        ]
      },
      "ResponseHeaders": {
        "Cache-Control": [
          "no-cache"
        ],
        "Pragma": [
          "no-cache"
        ],
        "x-ms-ratelimit-remaining-subscription-reads": [
          "11998"
        ],
        "Server": [
          "Kestrel"
        ],
        "x-ms-request-id": [
          "b36592ca-12a1-472a-b400-6f3ac1836347"
        ],
        "x-ms-correlation-request-id": [
          "b36592ca-12a1-472a-b400-6f3ac1836347"
        ],
        "x-ms-routing-request-id": [
          "WESTUS2:20210114T041411Z:b36592ca-12a1-472a-b400-6f3ac1836347"
        ],
        "Strict-Transport-Security": [
          "max-age=31536000; includeSubDomains"
        ],
        "X-Content-Type-Options": [
          "nosniff"
        ],
        "Date": [
          "Thu, 14 Jan 2021 04:14:11 GMT"
        ],
        "Content-Length": [
          "547313"
        ],
        "Content-Type": [
          "application/json; charset=utf-8"
        ],
        "Expires": [
          "-1"
        ]
      },
      "ResponseBody": "{\r\n  \"value\": [\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/0558155e-4556-447e-9a22-828f2a7de06b\",\r\n      \"name\": \"0558155e-4556-447e-9a22-828f2a7de06b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nProofPointTAPMessagesDelivered_CL\\n| where TimeGenerated >= timeframe\\n| mv-expand todynamic(threatsInfoMap_s)\\n| mv-expand todynamic(messageParts_s)\\n| extend threatType = tostring(threatsInfoMap_s.threatType), classification = tostring(threatsInfoMap_s.classification)\\n| extend filename = tostring(messageParts_s.filename)\\n| where threatType =~ \\\"attachment\\\" and classification =~ \\\"malware\\\"\\n| summarize filenames = make_set(filename), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by TimeGenerated, Sender = sender_s, SenderIPAddress = senderIP_s, Recipient = recipient_s, threatType, classification,  Subject = subject_s\\n| extend timestamp = StartTime, AccountCustomEntity = Recipient, IPCustomEntity = SenderIPAddress\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Malware attachment delivered\",\r\n        \"description\": \"This query identifies a message containing a malware attachment that was delivered.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ProofpointTAP\",\r\n            \"dataTypes\": [\r\n              \"ProofPointTAPMessagesDelivered_CL\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/ec21493c-2684-4acd-9bc2-696dbad72426\",\r\n      \"name\": \"ec21493c-2684-4acd-9bc2-696dbad72426\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\n//Create a list of TLDs in our threat feed for later validation of extracted domains\\nlet list_tlds = ThreatIntelligenceIndicator\\n    | where TimeGenerated > ago(ioc_lookBack)\\n    | where isnotempty(DomainName)\\n    | extend DomainName = tolower(DomainName)\\n    | extend parts = split(DomainName, '.')\\n    | extend tld = parts[(array_length(parts)-1)]\\n    | summarize count() by tostring(tld)\\n    | summarize make_list(tld);\\n    ThreatIntelligenceIndicator\\n    | where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n    | where Active == true\\n    // Picking up only IOC's that contain the entities we want\\n    | where isnotempty(DomainName)\\n    | join (\\n        CommonSecurityLog\\n        | extend IngestionTime = ingestion_time()\\n        | where IngestionTime > ago(dt_lookBack)\\n        | where DeviceVendor =~ 'Palo Alto Networks'\\n        | where DeviceEventClassID =~ 'url'\\n        //Uncomment the line below to only alert on allowed connections\\n        //| where DeviceAction !~ \\\"block-url\\\"\\n        //Extract domain from RequestURL, if not present extarct it from AdditionalExtentions\\n        | extend PA_Url = columnifexists(\\\"RequestURL\\\", \\\"None\\\")\\n        | extend PA_Url = iif(isempty(PA_Url) and AdditionalExtensions !startswith \\\"PanOS\\\", extract(\\\"([^\\\\\\\"]+)\\\", 1, tolower(AdditionalExtensions)), trim('\\\"', PA_Url))\\n        | extend PA_Url = iif(PA_Url !startswith \\\"http://\\\" and ApplicationProtocol !~ \\\"ssl\\\", strcat('http://', PA_Url), iif(PA_Url !startswith \\\"https://\\\" and ApplicationProtocol =~ \\\"ssl\\\", strcat('https://', PA_Url), PA_Url))\\n        | extend Domain = trim(@\\\"\\\"\\\"\\\",tostring(parse_url(PA_Url).Host))\\n        | where isnotempty(Domain)\\n        | extend Domain = tolower(Domain)\\n        | extend parts = split(Domain, '.')\\n        //Split out the TLD for the purpose of checking if we have any TI indicators with this TLD to match on\\n        | extend tld = parts[(array_length(parts)-1)]\\n        //Validate parsed domain by checking TLD against TLDs from threat feed and drop domains where there is no chance of a match\\n        | where tld in~ (list_tlds)\\n        | extend CSL_TimeGenerated = TimeGenerated\\n    ) on $left.DomainName==$right.Domain\\n    | project LatestIndicatorTime, Description, ActivityGroupNames, PA_Url, Domain, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, CSL_TimeGenerated, DeviceAction, DestinationIP, DestinationPort, DeviceName, SourceIP, SourcePort, ApplicationProtocol, RequestMethod\\n    | extend timestamp = CSL_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, URLCustomEntity = PA_Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map Domain entity to PaloAlto\",\r\n        \"description\": \"Identifies a match in Palo Alto data in CommonSecurityLog table from any Domain IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2ca4e7fc-c61a-49e5-9736-5da8035c47e0\",\r\n      \"name\": \"2ca4e7fc-c61a-49e5-9736-5da8035c47e0\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet threshold = 8;\\nCarbonBlackNotifications_CL\\n| where TimeGenerated > timeframe\\n| where threatHunterInfo_score_d >= threshold\\n| extend eventTime = datetime(1970-01-01) + tolong(threatHunterInfo_time_d/1000) * 1sec\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by eventTime, Threat_Name = threatHunterInfo_reportName_s, Device_Name = deviceInfo_deviceName_s,  Internal_IP = deviceInfo_internalIpAddress_s, External_IP = deviceInfo_externalIpAddress_s, Threat_Score = threatHunterInfo_score_d\\n| project-away count_\\n| extend timestamp = StartTime, HostCustomEntity = Device_Name, IPCustomEntity = Internal_IP\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Critical Threat Detected\",\r\n        \"description\": \"This creates an incident in the event a critical threat was identified on a Carbon Black managed endpoint.\",\r\n        \"tactics\": [\r\n          \"LateralMovement\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"VMwareCarbonBlack\",\r\n            \"dataTypes\": [\r\n              \"CarbonBlackNotifications_CL\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/83ba3057-9ea3-4759-bf6a-933f2e5bc7ee\",\r\n      \"name\": \"83ba3057-9ea3-4759-bf6a-933f2e5bc7ee\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let current = 1d;\\nlet auditLookback = 7d;\\n// Setting threshold to 3 as a default, change as needed.  \\n// Any operation that has been initiated by a user or app more than 3 times in the past 7 days will be excluded\\nlet threshold = 3;\\n// Gather initial data from lookback period, excluding current, adjust current to more than a single day if no results\\nlet AuditTrail = AuditLogs | where TimeGenerated >= ago(auditLookback) and TimeGenerated < ago(current)\\n// 2 other operations that can be part of malicious activity in this situation are \\n// \\\"Add OAuth2PermissionGrant\\\" and \\\"Add service principal\\\", extend the filter below to capture these too\\n| where OperationName == \\\"Consent to application\\\"\\n| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \\ntostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\\n| summarize max(TimeGenerated), OperationCount = count() by OperationName, InitiatedBy, TargetResourceName\\n// only including operations by initiated by a user or app that is above the threshold so we produce only rare and has not occurred in last 7 days\\n| where OperationCount > threshold\\n;\\n// Gather current period of audit data\\nlet RecentConsent = AuditLogs | where TimeGenerated >= ago(current)\\n| where OperationName == \\\"Consent to application\\\"\\n| extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \\ntostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\\n| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \\ntostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\\n| parse TargetResources.[0].modifiedProperties with * \\\"ConsentType: \\\" ConsentType \\\"]\\\" *\\n| project TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType , CorrelationId, Type;\\n// Exclude previously seen audit activity for \\\"Consent to application\\\" that was seen in the lookback period\\n// First for rare InitiatedBy\\nlet RareConsentBy = RecentConsent | join kind= leftanti AuditTrail on OperationName, InitiatedBy \\n| extend Reason = \\\"Previously unseen user consenting\\\";\\n// Second for rare TargetResourceName\\nlet RareConsentApp = RecentConsent | join kind= leftanti AuditTrail on OperationName, TargetResourceName\\n| extend Reason = \\\"Previously unseen app granted consent\\\";\\nRareConsentBy | union RareConsentApp\\n| summarize Reason = makeset(Reason) by TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType, CorrelationId, Type\\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatedBy, HostCustomEntity = TargetResourceName, IPCustomEntity = IpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P7D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 3,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Rare application consent\",\r\n        \"description\": \"This will alert when the \\\"Consent to application\\\" operation occurs by a user that has not done this operation before or rarely does this.\\nThis could indicate that permissions to access the listed Azure App were provided to a malicious actor. \\nConsent to application, Add service principal and Add OAuth2PermissionGrant should typically be rare events. \\nThis may help detect the Oauth2 attack that can be initiated by this publicly available tool - https://github.com/fireeye/PwnAuth\\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"LateralMovement\",\r\n          \"Collection\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-04T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/4d94d4a9-dc96-410a-8dea-4d4d4584188b\",\r\n      \"name\": \"4d94d4a9-dc96-410a-8dea-4d4d4584188b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1h;\\nlet OperationList = dynamic([\\\"Add member to role\\\",\\\"Add member to role in PIM requested (permanent)\\\"]);\\nlet PrivilegedGroups = dynamic([\\\"UserAccountAdmins\\\",\\\"PrivilegedRoleAdmins\\\",\\\"TenantAdmins\\\"]);\\nAuditLogs\\n| where TimeGenerated >= ago(timeframe)\\n| where LoggedByService =~ \\\"Core Directory\\\"\\n| where Category =~ \\\"RoleManagement\\\"\\n| where OperationName in~ (OperationList)\\n| mv-expand TargetResources\\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\\n| mv-expand modifiedProperties\\n| extend DisplayName = tostring(parse_json(modifiedProperties).displayName), GroupName =  trim(@'\\\"',tostring(parse_json(modifiedProperties).newValue))\\n| extend AppId = tostring(parse_json(parse_json(InitiatedBy).app).appId), InitiatedByDisplayName = tostring(parse_json(parse_json(InitiatedBy).app).displayName), ServicePrincipalId = tostring(parse_json(parse_json(InitiatedBy).app).servicePrincipalId), ServicePrincipalName = tostring(parse_json(parse_json(InitiatedBy).app).servicePrincipalName)\\n| where DisplayName =~ \\\"Role.WellKnownObjectName\\\"\\n| where GroupName in~ (PrivilegedGroups)\\n// If you want to still alert for operations from PIM, remove below filtering for MS-PIM.\\n| where InitiatedByDisplayName != \\\"MS-PIM\\\"\\n| project TimeGenerated, AADOperationType, Category, OperationName, AADTenantId, AppId, InitiatedByDisplayName, ServicePrincipalId, ServicePrincipalName, DisplayName, GroupName\\n| extend timestamp = TimeGenerated, AccountCustomEntity = ServicePrincipalName\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"User added to Azure Active Directory Privileged Groups\",\r\n        \"description\": \"This will alert when a user is added to any of the Privileged Groups.\\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\\nFor Administrator role permissions in Azure Active Directory please see https://docs.microsoft.com/azure/active-directory/users-groups-roles/directory-assign-admin-roles\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"PrivilegeEscalation\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-07-15T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/5d33fc63-b83b-4913-b95e-94d13f0d379f\",\r\n      \"name\": \"5d33fc63-b83b-4913-b95e-94d13f0d379f\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nlet fileHashIndicators = ThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n| where isnotempty(FileHashValue);\\n// Handle matches against both lower case and uppercase versions of the hash:\\n( fileHashIndicators | extend  FileHashValue = tolower(FileHashValue)\\n  |union (fileHashIndicators | extend FileHashValue = toupper(FileHashValue)))\\n|  join (\\n   CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack)\\n   | where isnotempty(FileHash)\\n   | extend CommonSecurityLog_TimeGenerated = TimeGenerated\\n)\\non $left.FileHashValue == $right.FileHash\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\\nCommonSecurityLog_TimeGenerated, SourceIP, SourcePort, DestinationIP, DestinationPort, SourceUserID, SourceUserName, DeviceName, DeviceAction,\\nRequestURL, DestinationUserName, DestinationUserID, ApplicationProtocol, Activity\\n| extend timestamp = CommonSecurityLog_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, AccountCustomEntity = SourceUserName, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map File Hash to CommonSecurityLog Event\",\r\n        \"description\": \"Identifies a match in CommonSecurityLog Event data from any FileHash IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-30T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/48607a29-a26a-4abf-8078-a06dbdd174a4\",\r\n      \"name\": \"48607a29-a26a-4abf-8078-a06dbdd174a4\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeRange = 3d;\\nlet lookBack = 7d;\\nlet authenticationWindow = 20m;\\nlet authenticationThreshold = 5;\\nlet isGUID = \\\"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\\\";\\nlet failureCodes = dynamic([50053, 50126, 50055]); // invalid password, account is locked - too many sign ins, expired password\\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\\n// Lookup up resolved identities from last 7 days\\nlet identityLookup = SigninLogs\\n| where TimeGenerated >= ago(lookBack)\\n| where not(Identity matches regex isGUID)\\n| where isnotempty(UserId)\\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;\\n// collect window threshold breaches\\nSigninLogs\\n| where TimeGenerated > ago(timeRange)\\n| where ResultType in(failureCodes)\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), count() by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName, UserPrincipalName\\n| summarize FailedPrincipalCount = dcount(UserPrincipalName) by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName\\n| where FailedPrincipalCount >= authenticationThreshold\\n| summarize WindowThresholdBreaches = count() by IPAddress\\n| join kind= inner (\\n// where we breached a threshold, join the details back on all failure data\\n SigninLogs\\n| where TimeGenerated > ago(timeRange)\\n| where ResultType in(failureCodes)\\n| extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), make_set(FullLocation), FailureCount = count() by IPAddress, AppDisplayName, UserPrincipalName, UserDisplayName, Identity, UserId\\n// lookup any unresolved identities\\n| extend UnresolvedUserId = iff(Identity matches regex isGUID, UserId, \\\"\\\")\\n| join kind= leftouter (\\n identityLookup \\n) on $left.UnresolvedUserId==$right.UserId\\n| extend UserDisplayName=iff(isempty(lu_UserDisplayName), UserDisplayName, lu_UserDisplayName)\\n| extend UserPrincipalName=iff(isempty(lu_UserPrincipalName), UserPrincipalName, lu_UserPrincipalName)\\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), make_set(UserPrincipalName), make_set(UserDisplayName), make_set(set_ClientAppUsed), make_set(set_FullLocation), make_list(FailureCount) by IPAddress, AppDisplayName\\n| extend FailedPrincipalCount = arraylength(set_UserPrincipalName)\\n) on IPAddress\\n| project IPAddress, StartTime, EndTime, TargetedApplication=AppDisplayName, FailedPrincipalCount, UserPrincipalNames=set_UserPrincipalName, UserDisplayNames=set_UserDisplayName, ClientAppsUsed=set_set_ClientAppUsed, Locations=set_set_FullLocation, FailureCountByPrincipal=list_FailureCount, WindowThresholdBreaches\\n| join kind= inner (\\nSigninLogs // get data on success vs. failure history for each IP\\n| where TimeGenerated > ago(timeRange)\\n| where ResultType in(successCodes) or ResultType in(failureCodes) // success or failure types\\n| summarize GlobalSuccessPrincipalCount = dcountif(UserPrincipalName, (ResultType in(successCodes))), ResultTypeSuccesses = make_set_if(ResultType, (ResultType in(successCodes))), GlobalFailPrincipalCount = dcountif(UserPrincipalName, (ResultType in(failureCodes))), ResultTypeFailures = make_set_if(ResultType, (ResultType in(failureCodes))) by IPAddress\\n| where GlobalFailPrincipalCount > GlobalSuccessPrincipalCount // where the number of failed principals is greater than success - eliminates FPs from IPs who authenticate successfully alot and as a side effect have alot of failures\\n) on IPAddress\\n| project-away IPAddress1\\n| extend timestamp=StartTime, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Password spray attack against Azure AD application\",\r\n        \"description\": \"Identifies evidence of password spray activity against Azure AD applications by looking for failures from multiple accounts from the same\\nIP address within a time window. If the number of accounts breaches the threshold just once, all failures from the IP address within the time range\\nare bought into the result. Details on whether there were successful authentications by the IP address within the time window are also included.\\nThis can be an indicator that an attack was successful.\\nThe default failure acccount threshold is 5, Default time window for failures is 20m and default look back window is 3 days\\nNote: Due to the number of possible accounts involved in a password spray it is not possible to map identities to a custom entity.\\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-03-26T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/4b93c5af-d20b-4236-b696-a28b8c51407f\",\r\n      \"name\": \"4b93c5af-d20b-4236-b696-a28b8c51407f\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nlet spanoftime = 10m;\\nlet threshold = 0;\\nSecurityEvent \\n| where TimeGenerated > ago(2*timeframe) \\n// A user account was created\\n| where EventID == 4720\\n| where AccountType =~ \\\"User\\\"\\n| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \\nAccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid \\n| join kind= inner (\\n  SecurityEvent\\n  | where TimeGenerated > ago(timeframe) \\n  // A user account was deleted \\n  | where EventID == 4726\\n| where AccountType == \\\"User\\\"\\n| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \\nAccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid \\n) on Computer, TargetUserName\\n| where deletionTime - creationTime < spanoftime\\n| extend TimeDelta = deletionTime - creationTime\\n| where tolong(TimeDelta) >= threshold\\n| project TimeDelta, creationTime, CreateEventID, Computer, TargetUserName, UserPrincipalName, AccountUsedToCreate, \\ndeletionTime, DeleteEventID, AccountUsedToDelete\\n| extend timestamp = creationTime, AccountCustomEntity = AccountUsedToCreate, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"User account created and deleted within 10 mins\",\r\n        \"description\": \"Identifies when a user account is created and then deleted within 10 minutes. This can be an indication of compromise and\\nan adversary attempting to hide in the noise.\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"PrivilegeEscalation\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-14T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/c87fb346-ea3a-4c64-ba92-3dd383e0f0b5\",\r\n      \"name\": \"c87fb346-ea3a-4c64-ba92-3dd383e0f0b5\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let timeframe = 1d;\\nlet DomainNames = \\\"miniodaum.ml\\\";\\nlet SHA256Hash = dynamic ([\\\"53f5773bbfbfbee660989d135c042c9f6f69024b9a4b65bdc0dfd44771762257\\\", \\\"0897c80df8b80b4c49bf1ccf876f5f782849608b830c3b5cb3ad212dc3e19eff\\\"]);\\n(union isfuzzy=true\\n(CommonSecurityLog \\n| where TimeGenerated >= ago(timeframe) \\n| parse Message with * '(' DNSName ')' * \\n| where isnotempty(FileHash)\\n| where FileHash in (SHA256Hash) or DNSName =~ DomainNames\\n| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP\\n),\\n(DnsEvents \\n| where TimeGenerated >= ago(timeframe) \\n| extend DNSName = Name\\n| where isnotempty(DNSName)\\n| where DNSName =~ DomainNames\\n| extend IPAddress = ClientIP\\n),\\n(VMConnection \\n| where TimeGenerated >= ago(timeframe) \\n| parse RemoteDnsCanonicalNames with * '[\\\"' DNSName '\\\"]' *\\n| where isnotempty(DNSName)\\n| where DNSName =~ DomainNames\\n| extend IPAddress = RemoteIp\\n)\\n)\\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Known CERIUM domains and hashes\",\r\n        \"description\": \"CERIUM malicious webserver and hash values for maldocs and malware. \\n Matches domain name IOCs related to the CERIUM activity group with CommonSecurityLog, DnsEvents, and VMConnection dataTypes.\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\",\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-10-30T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(VMInsights)\",\r\n            \"dataTypes\": [\r\n              \"VMConnection\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/910124df-913c-47e3-a7cd-29e1643fa55e\",\r\n      \"name\": \"910124df-913c-47e3-a7cd-29e1643fa55e\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"//Adjust this threshold to fit environment\\nlet  signin_threshold = 5; \\n//Make a list of IPs with failed AWS console logins\\nlet aws_fails = AWSCloudTrail\\n| where TimeGenerated >= ago(1d)\\n| where EventName == \\\"ConsoleLogin\\\"\\n| extend LoginResult = tostring(parse_json(ResponseElements).ConsoleLogin) \\n| where LoginResult != \\\"Success\\\"\\n| where SourceIpAddress != \\\"127.0.0.1\\\"\\n| summarize count() by SourceIpAddress\\n| where count_ >  signin_threshold\\n| summarize make_list(SourceIpAddress);\\n//See if any of those IPs have sucessfully logged into Azure AD.\\nSigninLogs\\n| where TimeGenerated >= ago(1d)\\n| where ResultType !in (\\\"0\\\", \\\"50125\\\", \\\"50140\\\")\\n| where IPAddress in (aws_fails) \\n| extend Reason = \\\"Multiple failed AWS Console logins from IP address\\\"\\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Failed AWS Console logons but success logon to AzureAD\",\r\n        \"description\": \"Identifies a list of IP addresses with a minimum numbe(default of 5) of failed logon attempts to AWS Console.\\nUses that list to identify any successful Azure Active Directory logons from these IPs within the same timeframe.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/361dd1e3-1c11-491e-82a3-bb2e44ac36ba\",\r\n      \"name\": \"361dd1e3-1c11-491e-82a3-bb2e44ac36ba\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let szOperationNames = dynamic([\\\"Create or Update Virtual Machine\\\", \\\"Create Deployment\\\"]);\\nlet starttime = 7d;\\nlet endtime = 1d;\\nAzureActivity\\n| where TimeGenerated between (startofday(ago(starttime)) .. startofday(ago(endtime)))\\n| where OperationName in~ (szOperationNames)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \\nOperationIds = makelist(OperationId), CallerIpAddress = makelist(CallerIpAddress), CorrelationId = makelist(CorrelationId) \\nby ResourceId, Caller, OperationName, Resource, ResourceGroup\\n| mvexpand CallerIpAddress\\n| where isnotempty(CallerIpAddress)\\n| make-series dResourceCount=dcount(ResourceId)  default=0 on StartTimeUtc in range(startofday(ago(7d)), now(), 1d) \\nby Caller, tostring(ActivityTimeStamp), tostring(ActivityStatus), tostring(OperationIds), tostring(CallerIpAddress), tostring(CorrelationId), ResourceId, OperationName, Resource, ResourceGroup\\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)\\n| where Slope > 0.2\\n| join kind=leftsemi (\\n// Last day's activity is anomalous\\nAzureActivity\\n| where TimeGenerated >= startofday(ago(endtime))\\n| where OperationName in~ (szOperationNames)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \\nOperationIds = makelist(OperationId), CallerIpAddress = makelist(CallerIpAddress), CorrelationId = makelist(CorrelationId) \\nby ResourceId, Caller, OperationName, Resource, ResourceGroup\\n| mvexpand CallerIpAddress\\n| where isnotempty(CallerIpAddress)\\n| make-series dResourceCount=dcount(ResourceId)  default=0 on StartTimeUtc in range(startofday(ago(1d)), now(), 1d) \\nby Caller, tostring(ActivityTimeStamp), tostring(ActivityStatus), tostring(OperationIds), tostring(CallerIpAddress), tostring(CorrelationId), ResourceId, OperationName, Resource, ResourceGroup\\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)\\n| where Slope > 0.2    \\n) on Caller, CallerIpAddress        \\n| mvexpand todynamic(ActivityTimeStamp), todynamic(ActivityStatus), todynamic(OperationIds), todynamic(CorrelationId)\\n| extend timestamp = ActivityTimeStamp, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P7D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Suspicious number of resource creation or deployment activities\",\r\n        \"description\": \"Indicates when an anomalous number of VM creations or deployment activities occur in Azure via the AzureActivity log.\\nThe anomaly detection identifies activities that have occurred both since the start of the day 1 day ago and the start of the day 7 days ago.\\nThe start of the day is considered 12am UTC time.\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-18T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-05T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActivity\",\r\n            \"dataTypes\": [\r\n              \"AzureActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/ffcd575b-3d54-482a-a6d8-d0de13b6ac63\",\r\n      \"name\": \"ffcd575b-3d54-482a-a6d8-d0de13b6ac63\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$';\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n//Filtering the table for Email related IOCs\\n| where isnotempty(EmailRecipient)\\n| join (\\n    CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack) and isnotempty(DestinationUserID)\\n    // Filtering PAN Logs for specific event type to match relevant email entities\\n    | where DeviceVendor == \\\"Palo Alto Networks\\\" and  DeviceEventClassID == \\\"wildfire\\\" and ApplicationProtocol in (\\\"smtp\\\",\\\"pop3\\\")\\n    | extend DestinationUserID = tolower(DestinationUserID)\\n    | where DestinationUserID matches regex emailregex\\n    | extend CommonSecurityLog_TimeGenerated = TimeGenerated\\n)\\non $left.EmailRecipient == $right.DestinationUserID\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, CommonSecurityLog_TimeGenerated,\\nEmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, DestinationUserID, DeviceEventClassID, LogSeverity, DeviceAction,\\nSourceIP, SourcePort, DestinationIP, DestinationPort, Protocol, ApplicationProtocol\\n| extend timestamp = CommonSecurityLog_TimeGenerated, AccountCustomEntity = DestinationUserID, IPCustomEntity = SourceIP, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map Email entity to CommonSecurityLog\",\r\n        \"description\": \"Identifies a match in CommonSecurityLog table from any Email IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/826bb2f8-7894-4785-9a6b-a8a855d8366f\",\r\n      \"name\": \"826bb2f8-7894-4785-9a6b-a8a855d8366f\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let EventNameList = dynamic([\\\"AttachUserPolicy\\\",\\\"AttachRolePolicy\\\",\\\"AttachGroupPolicy\\\"]);\\nlet createPolicy = \\\"CreatePolicy\\\";\\nlet timeframe = 1d;\\nlet lookback = 14d;\\n// Creating Master table with all the events to use with materialize for better performance\\nlet EventInfo = AWSCloudTrail\\n| where TimeGenerated >= ago(lookback)\\n| where EventName in (EventNameList) or EventName == createPolicy;\\n//Checking for Policy creation event with Full Admin Privileges since lookback period.\\nlet FullAdminPolicyEvents =  materialize(  EventInfo\\n| where TimeGenerated >= ago(lookback)\\n| where EventName == createPolicy\\n| extend PolicyName = tostring(parse_json(RequestParameters).policyName)\\n| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement\\n| mvexpand Statement\\n| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource)\\n| mvexpand Action\\n| extend Action = tostring(Action)\\n| where Effect =~ \\\"Allow\\\" and Action == \\\"*\\\" and Resource == \\\"*\\\"\\n| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn, UserIdentityUserName\\n| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))\\n| project-rename StartTime = TimeGenerated  );\\nlet PolicyAttach = materialize(  EventInfo\\n| where TimeGenerated >= ago(timeframe)\\n| where EventName in (EventNameList)\\n| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),\\\"/\\\")[1])\\n| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   UserIdentityType , UserIdentityArn, SourceIpAddress, UserIdentityUserName = iff(isnotempty(UserIdentityUserName),   UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1])), PolicyName\\n| extend AttachEvent = pack(\\\"StartTime\\\", StartTime, \\\"EndTime\\\", EndTime, \\\"EventName\\\", EventName, \\\"UserIdentityType\\\",   UserIdentityType, \\\"UserIdentityArn\\\", UserIdentityArn, \\\"SourceIpAddress\\\", SourceIpAddress, \\\"UserIdentityUserName\\\", UserIdentityUserName)\\n| project EventSource, PolicyName, AttachEvent, AttachEventCount\\n);\\n// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.\\n// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.\\nFullAdminPolicyEvents\\n| join kind=leftouter\\n(\\n    PolicyAttach\\n)\\non PolicyName\\n| project-away PolicyName1\\n| extend timestamp = StartTime, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Full Admin policy created and then attached to Roles, Users or Groups\",\r\n        \"description\": \"Identity and Access Management (IAM) securely manages access to AWS services and resources. \\nIdentifies when a policy is created with Full Administrators Access (Allow-Action:*,Resource:*). \\nThis policy can be attached to role,user or group and may be used by an adversary to escalate a normal user privileges to an adminsitrative level.\\nAWS IAM Policy Grammar: https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html\\nand AWS IAM API at https://docs.aws.amazon.com/IAM/latest/APIReference/API_Operations.html\",\r\n        \"tactics\": [\r\n          \"PrivilegeEscalation\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-04-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/4915c713-ab38-432e-800b-8e2d46933de6\",\r\n      \"name\": \"4915c713-ab38-432e-800b-8e2d46933de6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let PrivateIPregex = @'^127\\\\.|^10\\\\.|^172\\\\.1[6-9]\\\\.|^172\\\\.2[0-9]\\\\.|^172\\\\.3[0-1]\\\\.|^192\\\\.168\\\\.'; \\nlet avgthreshold = 0;\\nlet probabilityLimit = 0.01;\\nlet startime = 7d;\\nlet ssh_logins = Syslog\\n| where TimeGenerated >= ago(startime)\\n| where Facility contains \\\"auth\\\" and ProcessName =~ \\\"sshd\\\"\\n| where SyslogMessage has \\\"Accepted\\\"\\n| extend SourceIP = extract(\\\"(([0-9]{1,3})\\\\\\\\.([0-9]{1,3})\\\\\\\\.([0-9]{1,3})\\\\\\\\.(([0-9]{1,3})))\\\",1,SyslogMessage) \\n| where isnotempty(SourceIP)\\n| extend ipType = iff(SourceIP matches regex PrivateIPregex,\\\"private\\\" ,\\\"public\\\");\\nssh_logins \\n| summarize privatecount=countif(ipType==\\\"private\\\"), publiccount=countif(ipType==\\\"public\\\") by HostName, HostIP, bin(EventTime, 1d)\\n| summarize \\npublicIPLoginHistory  = make_list(pack('IPCount', publiccount,  'logon_time', EventTime)),\\nprivateIPLoginHistory = make_list(pack('IPCount', privatecount, 'logon_time', EventTime)) by HostName, HostIP\\n| mv-apply publicIPLoginHistory = publicIPLoginHistory on\\n(\\n    order by todatetime(publicIPLoginHistory['logon_time']) asc\\n    | summarize publicIPLoginCountList=make_list(toint(publicIPLoginHistory['IPCount'])), publicAverage=avg(toint(publicIPLoginHistory['IPCount'])), publicStd=stdev(toint(publicIPLoginHistory['IPCount'])), maxPublicLoginCount=max(toint(publicIPLoginHistory['IPCount']))\\n)\\n| mv-apply privateIPLoginHistory = privateIPLoginHistory on\\n(\\n    order by todatetime(privateIPLoginHistory['logon_time']) asc\\n    | summarize privateIPLoginCountList=make_list(toint(privateIPLoginHistory['IPCount'])), privateAverage=avg(toint(privateIPLoginHistory['IPCount'])), privateStd=stdev(toint(privateIPLoginHistory['IPCount']))\\n)\\n// Some logins from private IPs\\n| where privateAverage > avgthreshold\\n// There is a non-zero number of logins from public IPs\\n| where publicAverage > avgthreshold\\n// Approximate probability of seeing login from a public IP is < 1%\\n| extend probabilityPublic = publicAverage / (privateAverage + publicAverage)\\n| where probabilityPublic < probabilityLimit\\n// Today has the highest number of logins from public IPs that we've seen in the last week\\n| extend publicLoginCountToday = publicIPLoginCountList[-1]\\n| where publicLoginCountToday >= maxPublicLoginCount\\n| extend HostCustomEntity = HostName\\n// Optionally retrieve the original raw data for those logins that we've identified as potentially suspect\\n// | join kind=rightsemi (\\n//   ssh_logins\\n//  | where ipType == \\\"public\\\"\\n//  ) on HostName\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P7D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"New internet-exposed SSH endpoints\",\r\n        \"description\": \"Looks for SSH endpoints with a history of sign-ins only from private IP addresses are accessed from a public IP address.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Syslog\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/aa1eff90-29d4-49dc-a3ea-b65199f516db\",\r\n      \"name\": \"aa1eff90-29d4-49dc-a3ea-b65199f516db\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nSecurityEvent\\n| where TimeGenerated > ago(timeframe) \\n| where EventID == 4720\\n| where AccountType == \\\"User\\\"\\n| project CreatedUserTime = TimeGenerated, CreatedUserEventID = EventID, CreatedUserActivity = Activity, Computer = toupper(Computer), \\nCreatedUser = tolower(TargetUserName), Domain = toupper(TargetDomainName), CreatedUserSid = TargetSid, AccountUsedToCreateUser = SubjectUserName\\n|join (\\nSecurityEvent \\n| where TimeGenerated > ago(timeframe) \\n| where AccountType == \\\"User\\\"\\n// 4732 - A member was added to a security-enabled local group\\n| where EventID == 4732\\n//TargetSid is the builin Admins group: S-1-5-32-544\\n| where TargetSid == \\\"S-1-5-32-544\\\"\\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, Computer = toupper(Computer), GroupName = TargetUserName, \\nDomain = toupper(TargetDomainName), GroupSid = TargetSid, UserAdded = SubjectUserName, UserAddedSid = SubjectUserSid, CreatedUser = tolower(SubjectUserName), \\nCreatedUserSid = MemberSid\\n)\\non CreatedUserSid\\n//Create User first, then the add to the group.\\n| project Computer, CreatedUserTime, CreatedUserEventID, CreatedUserActivity, CreatedUser, CreatedUserSid, Domain, GroupAddTime, GroupAddEventID, \\nGroupAddActivity, AccountUsedToCreateUser, GroupName, GroupSid, UserAdded, UserAddedSid \\n| extend timestamp = CreatedUserTime, AccountCustomEntity = CreatedUser, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"New user created and added to the built-in administrators group\",\r\n        \"description\": \"Identifies when a user account was created and then added to the builtin Administrators group in the same day.\\nThis should be monitored closely and all additions reviewed.\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"PrivilegeEscalation\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-22T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a357535e-f722-4afe-b375-cff362b2b376\",\r\n      \"name\": \"a357535e-f722-4afe-b375-cff362b2b376\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let endtime = 1d;\\n(union isfuzzy=true\\n(OfficeActivity | where TimeGenerated >= ago(endtime) | where UserAgent != \\\"\\\"),\\n(OfficeActivity\\n| where TimeGenerated >= ago(endtime)\\n| where RecordType in (\\\"AzureActiveDirectoryAccountLogon\\\", \\\"AzureActiveDirectoryStsLogon\\\")\\n| extend OperationName = Operation, UserAgent = extractjson(\\\"$[0].Value\\\", ExtendedProperties, typeof(string))),\\n(AzureDiagnostics\\n| where TimeGenerated >= ago(endtime)\\n| where ResourceType =~ \\\"APPLICATIONGATEWAYS\\\" \\n| where OperationName =~ \\\"ApplicationGatewayAccess\\\" \\n| extend ClientIP = columnifexists(\\\"clientIP_s\\\", \\\"None\\\"), UserAgent = columnifexists(\\\"userAgent_s\\\", \\\"None\\\")))\\n// Likely artefact of hardcoding\\n| where UserAgent startswith \\\"User\\\" or UserAgent startswith \\\"\\\\\\\"\\\"\\n// Incorrect casing\\nor (UserAgent startswith \\\"Mozilla\\\" and not(UserAgent containscs \\\"Mozilla\\\"))\\n// Incorrect casing\\nor UserAgent containscs  \\\"(Compatible;\\\"\\n// Missing MSIE version\\nor UserAgent matches regex @\\\"MSIE\\\\s?;\\\"\\n// Incorrect spacing around MSIE version\\nor UserAgent matches regex  @\\\"MSIE(?:\\\\d|.{1,5}?\\\\d\\\\s;)\\\"\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationNames = makeset(OperationName), UserAgentCount = dcount(UserAgent), \\nUserAgentList = makeset(UserAgent), RecordTypes = makeset(RecordType) by UserId, ClientIP\\n| extend timestamp = StartTimeUtc, IPCustomEntity = ClientIP, AccountCustomEntity = UserId\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Malformed user agent\",\r\n        \"description\": \"Malware authors will sometimes hardcode user agent string values when writing the network communication component of their malware.\\nMalformed user agents can be an indication of such malware.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"CommandAndControl\",\r\n          \"Execution\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-01-25T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"WAF\",\r\n            \"dataTypes\": [\r\n              \"AzureDiagnostics\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/f110287e-1358-490d-8147-ed804b328514\",\r\n      \"name\": \"f110287e-1358-490d-8147-ed804b328514\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\\n// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\\n// Taking the first non-empty value based on potential IOC match availability\\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\\n| join (\\n    AWSCloudTrail | where TimeGenerated >= ago(dt_lookBack)\\n    // renaming time column so it is clear the log this came from\\n    | extend AWSCloudTrail_TimeGenerated = TimeGenerated\\n)\\non $left.TI_ipEntity == $right.SourceIpAddress\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, AWSCloudTrail_TimeGenerated,\\nTI_ipEntity, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserIdentityUserName, SourceIpAddress,\\nNetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress\\n| extend timestamp = AWSCloudTrail_TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map IP entity to AWSCloudTrail\",\r\n        \"description\": \"Identifies a match in AWSCloudTrail from any IP IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/0914adab-90b5-47a3-a79f-7cdcac843aa7\",\r\n      \"name\": \"0914adab-90b5-47a3-a79f-7cdcac843aa7\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let starttime = 14d;\\nlet timeframe = 1d;\\nlet scorethreshold = 3;\\nlet baselinethreshold = 5;\\nlet OperationList = dynamic(\\n[\\\"SecretGet\\\", \\\"KeyGet\\\", \\\"VaultGet\\\"]);\\nlet TimeSeriesData = AzureDiagnostics\\n| where TimeGenerated between (startofday(ago(starttime))..startofday(now()))\\n| extend ResultType = columnifexists(\\\"ResultType\\\", \\\"None\\\"), CallerIPAddress = columnifexists(\\\"CallerIPAddress\\\", \\\"None\\\")\\n| where ResultType !~ \\\"None\\\" and isnotempty(ResultType)\\n| where CallerIPAddress !~ \\\"None\\\" and isnotempty(CallerIPAddress)\\n| where ResourceType =~ \\\"VAULTS\\\" and ResultType =~ \\\"Success\\\"\\n| where OperationName in (OperationList) \\n| project TimeGenerated, OperationName, Resource, CallerIPAddress \\n| make-series HourlyCount=count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step timeframe by Resource;\\n//Filter anomolies against TimeSeriesData\\nlet TimeSeriesAlerts = TimeSeriesData\\n| extend (anomalies, score, baseline) = series_decompose_anomalies(HourlyCount, scorethreshold, -1, 'linefit')\\n| mv-expand HourlyCount to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\\n| where anomalies > 0 | extend AnomalyHour = TimeGenerated\\n| where baseline > baselinethreshold // Filtering low count events per baselinethreshold\\n| project Resource, AnomalyHour, TimeGenerated, HourlyCount, baseline, anomalies, score;\\n// Filter the alerts since specified timeframe\\nTimeSeriesAlerts\\n| where TimeGenerated > ago(timeframe)\\n// Join against base logs since specified timeframe to retrive records associated with the hour of anomoly\\n| join (\\nAzureDiagnostics\\n| where TimeGenerated > ago(timeframe)\\n| extend ResultType = columnifexists(\\\"ResultType\\\", \\\"NoResultType\\\")\\n| extend requestUri_s = columnifexists(\\\"requestUri_s\\\", \\\"None\\\"), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(\\\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\\\", \\\"None\\\")\\n| extend id_s = columnifexists(\\\"id_s\\\", \\\"None\\\"), CallerIPAddress = columnifexists(\\\"CallerIPAddress\\\", \\\"None\\\"), clientInfo_s = columnifexists(\\\"clientInfo_s\\\", \\\"None\\\")\\n| where ResultType !~ \\\"None\\\" and isnotempty(ResultType)\\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ \\\"None\\\" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\\n| where id_s !~ \\\"None\\\" and isnotempty(id_s)\\n| where CallerIPAddress !~ \\\"None\\\" and isnotempty(CallerIPAddress)\\n| where clientInfo_s !~ \\\"None\\\" and isnotempty(clientInfo_s)\\n| where requestUri_s !~ \\\"None\\\" and isnotempty(requestUri_s)\\n| where ResourceType =~ \\\"VAULTS\\\" and ResultType =~ \\\"Success\\\"\\n| where OperationName in (OperationList)  \\n| summarize PerOperationCount=count(), LatestAnomalyTime = arg_max(TimeGenerated,*) by bin(TimeGenerated,1h), Resource, OperationName, id_s, CallerIPAddress, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, requestUri_s, clientInfo_s     \\n) on Resource, TimeGenerated \\n| summarize EventCount=count(), OperationNameList = make_set(OperationName), RequestURLList = make_set(requestUri_s), AccountList = make_set(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g), AccountMax = arg_max(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g,*) by Resource, id_s, clientInfo_s, LatestAnomalyTime\\n| extend timestamp = LatestAnomalyTime, IPCustomEntity = CallerIPAddress, AccountCustomEntity = AccountMax\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Azure Key Vault access TimeSeries anomaly\",\r\n        \"description\": \"Indentifies a sudden increase in count of Azure Key Vault secret or vault access operations by CallerIPAddress. The query leverages a built-in KQL anomaly detection algorithm \\nto find large deviations from baseline Azure Key Vault access patterns. Any sudden increase in the count of Azure Key Vault accesses can be an \\nindication of adversary dumping credentials via automated methods. If you are seeing any noise, try filtering known source(IP/Account) and user-agent combinations.\\nTimeSeries Reference Blog: https://techcommunity.microsoft.com/t5/azure-sentinel/looking-for-unknown-anomalies-what-is-normal-time-series/ba-p/555052\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-01T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"WAF\",\r\n            \"dataTypes\": [\r\n              \"AzureDiagnostics\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/8a602940-4153-4045-a741-3bf15591ae29\",\r\n      \"name\": \"8a602940-4153-4045-a741-3bf15591ae29\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Anomaly\",\r\n      \"properties\": {\r\n        \"severity\": \"Informational\",\r\n        \"anomalyDefinitionVersion\": \"1.0.0\",\r\n        \"techniques\": [\r\n          \"T1001\"\r\n        ],\r\n        \"customizableObservations\": {\r\n          \"multiSelectObservations\": null,\r\n          \"singleSelectObservations\": null,\r\n          \"prioritizeExcludeObservations\": null,\r\n          \"thresholdObservations\": [\r\n            {\r\n              \"minimum\": \"0\",\r\n              \"maximum\": \"1\",\r\n              \"value\": \"0.4\",\r\n              \"name\": \"Score\",\r\n              \"description\": \"Generate an anomaly when score is greater than the chosen value\",\r\n              \"sequenceNumber\": 1,\r\n              \"rerun\": \"NotRequired\"\r\n            }\r\n          ]\r\n        },\r\n        \"frequency\": \"P1D\",\r\n        \"displayName\": \"(Preview) Attempted Computer Bruteforce\",\r\n        \"description\": \"This algorithm detects an unusually high volume of failed login attempts to each computer. The model is trained on the previous 21 days of security event ID 4625 on a computer. It indicates anomalous high volume of failed login attempts in the last day.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-08T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-08T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvents\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/90d3f6ec-80fb-48e0-9937-2c70c9df9bad\",\r\n      \"name\": \"90d3f6ec-80fb-48e0-9937-2c70c9df9bad\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet DomainList = dynamic([\\\"tor2web.org\\\", \\\"tor2web.com\\\", \\\"torlink.co\\\", \\\"onion.to\\\", \\\"onion.ink\\\", \\\"onion.cab\\\", \\\"onion.nu\\\", \\\"onion.link\\\", \\n\\\"onion.it\\\", \\\"onion.city\\\", \\\"onion.direct\\\", \\\"onion.top\\\", \\\"onion.casa\\\", \\\"onion.plus\\\", \\\"onion.rip\\\", \\\"onion.dog\\\", \\\"tor2web.fi\\\", \\n\\\"tor2web.blutmagie.de\\\", \\\"onion.sh\\\", \\\"onion.lu\\\", \\\"onion.pet\\\", \\\"t2w.pw\\\", \\\"tor2web.ae.org\\\", \\\"tor2web.io\\\", \\\"tor2web.xyz\\\", \\\"onion.lt\\\", \\n\\\"s1.tor-gateways.de\\\", \\\"s2.tor-gateways.de\\\", \\\"s3.tor-gateways.de\\\", \\\"s4.tor-gateways.de\\\", \\\"s5.tor-gateways.de\\\", \\\"hiddenservice.net\\\"]);\\nSyslog\\n| where TimeGenerated >= ago(timeframe)\\n| where ProcessName contains \\\"squid\\\"\\n| extend URL = extract(\\\"(([A-Z]+ [a-z]{4,5}:\\\\\\\\/\\\\\\\\/)|[A-Z]+ )([^ :]*)\\\",3,SyslogMessage), \\n        SourceIP = extract(\\\"([0-9]+ )(([0-9]{1,3})\\\\\\\\.([0-9]{1,3})\\\\\\\\.([0-9]{1,3})\\\\\\\\.([0-9]{1,3}))\\\",2,SyslogMessage), \\n        Status = extract(\\\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\\\",1,SyslogMessage), \\n        HTTP_Status_Code = extract(\\\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\\\",8,SyslogMessage),\\n        User = extract(\\\"(CONNECT |GET )([^ ]* )([^ ]+)\\\",3,SyslogMessage),\\n        RemotePort = extract(\\\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\\\",4,SyslogMessage),\\n        Domain = extract(\\\"(([A-Z]+ [a-z]{4,5}:\\\\\\\\/\\\\\\\\/)|[A-Z]+ )([^ :\\\\\\\\/]*)\\\",3,SyslogMessage),\\n        Bytes = toint(extract(\\\"([A-Z]+\\\\\\\\/[0-9]{3} )([0-9]+)\\\",2,SyslogMessage)),\\n        contentType = extract(\\\"([a-z/]+$)\\\",1,SyslogMessage)\\n| extend TLD = extract(\\\"\\\\\\\\.[a-z]*$\\\",0,Domain)\\n| where HTTP_Status_Code == \\\"200\\\"\\n| where Domain contains \\\".\\\"\\n| where Domain has_any (DomainList)\\n| extend timestamp = TimeGenerated, URLCustomEntity = URL, IPCustomEntity = SourceIP, AccountCustomEntity = User\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Squid proxy events for ToR proxies\",\r\n        \"description\": \"Check for Squid proxy events associated with common ToR proxies. This query presumes the default squid log format is being used.\\nhttp://www.squid-cache.org/Doc/config/access_log/\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-12T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Syslog\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/50574fac-f8d1-4395-81c7-78a463ff0c52\",\r\n      \"name\": \"50574fac-f8d1-4395-81c7-78a463ff0c52\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let auditLookback = 1h;\\nSigninLogs\\n| where TimeGenerated > ago(auditLookback)\\n| where AppId =~ \\\"1b730954-1685-4b74-9bfd-dac224a7b894\\\" // AppDisplayName IS Azure Active Directory PowerShell\\n| where TokenIssuerType =~ \\\"AzureAD\\\"\\n| where ResourceIdentity !in (\\\"00000002-0000-0000-c000-000000000000\\\", \\\"00000003-0000-0000-c000-000000000000\\\") // ResourceDisplayName IS NOT Windows Azure Active Directory OR Microsoft Graph\\n| where Status.errorCode == 0 // Success\\n| project-reorder IPAddress, UserAgent, ResourceDisplayName, UserDisplayName, UserId, UserPrincipalName\\n| order by TimeGenerated desc\\n// New entity mapping\\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Azure Active Directory PowerShell accessing non-AAD resources\",\r\n        \"description\": \"This will alert when an user or application signs in using Azure Active Directory PowerShell to access non-Active Directory resources, such as the Azure Key Vault, which may be undesired or unauthorized behavior.\\nFor capabilities and expected behavior of the Azure Active Directory PowerShell module, see: https://docs.microsoft.com/powershell/module/azuread/?view=azureadps-2.0.\\nFor further information on Azure Active Directory Signin activity reports, see: https://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-15T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-11T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/cf3ede88-a429-493b-9108-3e46d3c741f7\",\r\n      \"name\": \"cf3ede88-a429-493b-9108-3e46d3c741f7\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeRange = 6h;\\nlet authenticationWindow = 1h;\\nlet authenticationThreshold = 5;\\nSecurityEvent\\n| where TimeGenerated > ago(timeRange)\\n| where EventID == 4624 or EventID == 4625\\n| where IpAddress != \\\"-\\\" and isnotempty(Account)\\n| extend Outcome = iff(EventID == 4624, \\\"Success\\\", \\\"Failure\\\")\\n// bin outcomes into 5 minute windows to reduce the volume of data\\n| summarize OutcomeCount=count() by Account, IpAddress, Computer, Outcome, bin(TimeGenerated, 5m)\\n| project TimeGenerated, Account, IpAddress, Computer, Outcome, OutcomeCount\\n// sort ready for sessionizing - by account and time of the authentication outcome\\n| sort by Account asc, TimeGenerated asc\\n| serialize \\n// sessionize into failure groupings until either the account changes or there is a success\\n| extend SessionStartedUtc = row_window_session(TimeGenerated, timeRange, authenticationWindow, Account != prev(Account) or prev(Outcome) == \\\"Success\\\")\\n// count the failures in each session\\n| summarize FailureCountBeforeSuccess=sumif(OutcomeCount, Outcome == \\\"Failure\\\"), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), makelist(Outcome), makeset(Computer), makeset(IpAddress) by SessionStartedUtc, Account\\n// the session must not start with a success, and must end with one\\n| where array_index_of(list_Outcome, \\\"Success\\\") != 0\\n| where array_index_of(list_Outcome, \\\"Success\\\") == array_length(list_Outcome) - 1\\n| project-away SessionStartedUtc, list_Outcome \\n// where the number of failures before the success is above the threshold \\n| where FailureCountBeforeSuccess >= authenticationThreshold\\n// expand out ip and computer for customer entity assignment\\n| mvexpand set_IpAddress, set_Computer\\n| extend IpAddress = tostring(set_IpAddress), Computer = tostring(set_Computer)\\n| extend timestamp=StartTime, AccountCustomEntity=Account, HostCustomEntity=Computer, IPCustomEntity=IpAddress\",\r\n        \"queryFrequency\": \"PT6H\",\r\n        \"queryPeriod\": \"PT6H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"SecurityEvent - Multiple authentication failures followed by a success\",\r\n        \"description\": \"Identifies accounts who have failed to logon to the domain multiple times in a row, followed by a successful authentication\\nwithin a short time frame. Multiple failed attempts followed by a success can be an indication of a brute force attempt or\\npossible mis-configuration of a service account within an environment.\\nThe lookback is set to 6h and the authentication window and threshold are set to 1h and 5, meaning we need to see a minimum\\nof 5 failures followed by a success for an account within 1 hour to surface an alert.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-04-03T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2441bce9-02e4-407b-8cc7-7d597f38b8b0\",\r\n      \"name\": \"2441bce9-02e4-407b-8cc7-7d597f38b8b0\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\\n// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\\n// Taking the first non-empty value based on potential IOC match availability\\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\\n| join (\\n    AzureActivity | where TimeGenerated >= ago(dt_lookBack)\\n    // renaming time column so it is clear the log this came from\\n    | extend AzureActivity_TimeGenerated = TimeGenerated\\n)\\non $left.TI_ipEntity == $right.CallerIpAddress\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, AzureActivity_TimeGenerated,\\nTI_ipEntity, CallerIpAddress, Caller, OperationName, ActivityStatus, Category, ResourceId, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress\\n| extend timestamp = AzureActivity_TimeGenerated, IPCustomEntity = CallerIpAddress, AccountCustomEntity = Caller, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map IP entity to AzureActivity\",\r\n        \"description\": \"Identifies a match in AzureActivity from any IP IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureActivity\",\r\n            \"dataTypes\": [\r\n              \"AzureActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/9f86885f-f31f-4e66-a39d-352771ee789e\",\r\n      \"name\": \"9f86885f-f31f-4e66-a39d-352771ee789e\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nCarbonBlackEvents_CL\\n| where TimeGenerated > timeframe\\n| extend eventTime = datetime(1970-01-01) + tolong(eventTime_d/1000) * 1sec\\n| where targetApp_effectiveReputation_s =~ \\\"KNOWN_MALWARE\\\"\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by eventTime, deviceDetails_deviceName_s, deviceDetails_deviceIpAddress_s, processDetails_fullUserName_s, processDetails_targetName_s\\n| extend timestamp = StartTime, AccountCustomEntity = processDetails_fullUserName_s, HostCustomEntity = deviceDetails_deviceName_s, IPCustomEntity = deviceDetails_deviceIpAddress_s\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Known Malware Detected\",\r\n        \"description\": \"This creates an incident when a known Malware is detected on a endpoint managed by a Carbon Black.\",\r\n        \"tactics\": [\r\n          \"Execution\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"VMwareCarbonBlack\",\r\n            \"dataTypes\": [\r\n              \"CarbonBlackEvents_CL\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/500c103a-0319-4d56-8e99-3cec8d860757\",\r\n      \"name\": \"500c103a-0319-4d56-8e99-3cec8d860757\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let lookBack = 1d;\\nSigninLogs \\n| where TimeGenerated >= ago(lookBack)\\n| where ResultType == \\\"50057\\\" \\n| where ResultDescription == \\\"User account is disabled. The account has been disabled by an administrator.\\\" \\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), disabledAccountLoginAttempts = count(), \\ndisabledAccountsTargeted = dcount(UserPrincipalName), applicationsTargeted = dcount(AppDisplayName), disabledAccountSet = makeset(UserPrincipalName), \\napplicationSet = makeset(AppDisplayName) by IPAddress\\n| order by disabledAccountLoginAttempts desc\\n| join kind= leftouter (\\n    // Consider these IPs suspicious - and alert any related  successful sign-ins\\n    SigninLogs\\n    | where TimeGenerated >= ago(lookBack)\\n    | where ResultType == 0\\n    | summarize successfulAccountSigninCount = dcount(UserPrincipalName), successfulAccountSigninSet = makeset(UserPrincipalName, 15) by IPAddress\\n    // Assume IPs associated with sign-ins from 100+ distinct user accounts are safe\\n    | where successfulAccountSigninCount < 100\\n) on IPAddress  \\n// IPs from which attempts to authenticate as disabled user accounts originated, and had a non-zero success rate for some other account\\n| where successfulAccountSigninCount != 0\\n| project StartTimeUtc, EndTimeUtc, IPAddress, disabledAccountLoginAttempts, disabledAccountsTargeted, disabledAccountSet, applicationSet, \\nsuccessfulAccountSigninCount, successfulAccountSigninSet\\n| order by disabledAccountLoginAttempts\\n| extend timestamp = StartTimeUtc, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Sign-ins from IPs that attempt sign-ins to disabled accounts\",\r\n        \"description\": \"Identifies IPs with failed attempts to sign in to one or more disabled accounts signed in successfully to another account.\\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\\n50057 - User account is disabled. The account has been disabled by an administrator.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-11T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/fbd72eb8-087e-466b-bd54-1ca6ea08c6d3\",\r\n      \"name\": \"fbd72eb8-087e-466b-bd54-1ca6ea08c6d3\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nOfficeActivity\\n| where TimeGenerated >= ago(timeframe)\\n| where RecordType =~ \\\"ExchangeAdmin\\\"\\n| where UserType in~ (\\\"Admin\\\",\\\"DcAdmin\\\") \\n// Only admin or global-admin can disable/remove policy\\n| where Operation startswith \\\"Remove-\\\" or Operation startswith \\\"Disable-\\\"\\n| where Operation has_any (\\\"AntiPhish\\\", \\\"SafeAttachment\\\", \\\"SafeLinks\\\", \\\"Dlp\\\", \\\"Audit\\\")\\n| extend ClientIPOnly = case( \\nClientIP has \\\".\\\", tostring(split(ClientIP,\\\":\\\")[0]), \\nClientIP has \\\"[\\\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\\\"]\\\")[0]))),\\nClientIP\\n)  \\n| extend Port = case(\\nClientIP has \\\".\\\", (split(ClientIP,\\\":\\\")[1]),\\nClientIP has \\\"[\\\", tostring(split(ClientIP,\\\"]:\\\")[1]),\\nClientIP\\n)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Operation, UserType, UserId, ClientIP = ClientIPOnly, Port, ResultStatus, Parameters\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Office policy tampering\",\r\n        \"description\": \"Identifies if any tampering is done to either auditlog, ATP Safelink, SafeAttachment, AntiPhish or Dlp policy. \\nAn adversary may use this technique to evade detection or avoid other policy based defenses.\\nReferences: https://docs.microsoft.com/powershell/module/exchange/advanced-threat-protection/remove-antiphishrule?view=exchange-ps.\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-04-15T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/32555639-b639-4c2b-afda-c0ae0abefa55\",\r\n      \"name\": \"32555639-b639-4c2b-afda-c0ae0abefa55\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nAWSCloudTrail\\n| where TimeGenerated > ago(timeframe)\\n| where EventName =~ \\\"GetCallerIdentity\\\" and UserIdentityType =~ \\\"AssumedRole\\\" \\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIpAddress, EventName, EventTypeName, UserIdentityType, UserIdentityAccountId, UserIdentityPrincipalid, \\nUserAgent, UserIdentityUserName, SessionMfaAuthenticated,AWSRegion, EventSource, AdditionalEventData, ResponseElements\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress\\n| sort by EndTimeUtc desc nulls last\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Monitor AWS Credential abuse or hijacking\",\r\n        \"description\": \"Looking for GetCallerIdentity Events where the UserID Type is AssumedRole \\nAn attacker who has assumed the role of a legitimate account can call the GetCallerIdentity function to determine what account they are using.\\nA legitimate user using legitimate credentials would not need to call GetCallerIdentity since they should already know what account they are using.\\nMore Information: https://duo.com/decipher/trailblazer-hunts-compromised-credentials-in-aws\\nAWS STS GetCallerIdentity API: https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html \",\r\n        \"tactics\": [\r\n          \"Discovery\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/9713e3c0-1410-468d-b79e-383448434b2d\",\r\n      \"name\": \"9713e3c0-1410-468d-b79e-383448434b2d\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\\n// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\\n// Taking the first non-empty value based on potential IOC match availability\\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\\n| join (\\n    VMConnection\\n    | where TimeGenerated >= ago(dt_lookBack)\\n    // renaming time column so it is clear the log this came from\\n    | extend VMConnection_TimeGenerated = TimeGenerated\\n)\\non $left.TI_ipEntity == $right.RemoteIp\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, VMConnection_TimeGenerated,\\nTI_ipEntity, Computer, Direction, ProcessName, SourceIp, DestinationIp, RemoteIp, Protocol, DestinationPort, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress\\n| extend timestamp = VMConnection_TimeGenerated, IPCustomEntity = RemoteIp, HostCustomEntity = Computer, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map IP entity to VMConnection\",\r\n        \"description\": \"Identifies a match in VMConnection from any IP IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(VMInsights)\",\r\n            \"dataTypes\": [\r\n              \"VMConnection\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/cecdbd4c-4902-403c-8d4b-32eb1efe460b\",\r\n      \"name\": \"cecdbd4c-4902-403c-8d4b-32eb1efe460b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let domains = dynamic([\\\"incomeupdate.com\\\",\\\"zupertech.com\\\",\\\"databasegalore.com\\\",\\\"panhardware.com\\\",\\\"avsvmcloud.com\\\",\\\"digitalcollege.org\\\",\\\"freescanonline.com\\\",\\\"deftsecurity.com\\\",\\\"thedoccloud.com\\\",\\\"virtualdataserver.com\\\",\\\"lcomputers.com\\\",\\\"webcodez.com\\\",\\\"globalnetworkissues.com\\\",\\\"kubecloud.com\\\",\\\"seobundlekit.com\\\",\\\"solartrackingsystem.net\\\",\\\"virtualwebdata.com\\\"]);\\nlet timeframe = 6h;\\n(union isfuzzy=true\\n(CommonSecurityLog \\n  | where TimeGenerated >= ago(timeframe) \\n  | parse Message with * '(' DNSName ')' * \\n  | where DNSName in~ (domains) or DestinationHostName has_any (domains) or RequestURL has_any(domains)\\n  | extend AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName, IPCustomEntity = SourceIP\\n  ),\\n(DnsEvents \\n  | where TimeGenerated >= ago(timeframe) \\n  | extend DNSName = Name\\n  | where isnotempty(DNSName)\\n  | where DNSName in~ (domains)\\n  | extend IPCustomEntity = ClientIP\\n  ),\\n(VMConnection \\n  | where TimeGenerated >= ago(timeframe) \\n  | parse RemoteDnsCanonicalNames with * '[\\\"' DNSName '\\\"]' *\\n  | where isnotempty(DNSName)\\n  | where DNSName in~ (domains)\\n  | extend IPCustomEntity = RemoteIp\\n  ),\\n(DeviceNetworkEvents \\n  | where TimeGenerated >= ago(timeframe) \\n  | where isnotempty(RemoteUrl) \\n  | where RemoteUrl  has_any (domains)  \\n  | extend DNSName = RemoteUrl\\n  | extend IPCustomEntity = RemoteIP \\n  | extend HostCustomEntity = DeviceName \\n  ) \\n  )\",\r\n        \"queryFrequency\": \"PT6H\",\r\n        \"queryPeriod\": \"PT6H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"DNS\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"DomainName\",\r\n                \"columnName\": \"DNSName\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Solorigate Network Beacon\",\r\n        \"description\": \"Identifies a match across various data feeds for domains IOCs related to the Solorigate incident.\\n References: https://blogs.microsoft.com/on-the-issues/2020/12/13/customers-protect-nation-state-cyberattacks/, \\n https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html?1\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-22T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-17T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(VMInsights)\",\r\n            \"dataTypes\": [\r\n              \"VMConnection\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"MicrosoftThreatProtection\",\r\n            \"dataTypes\": [\r\n              \"DeviceNetworkEvents\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/34663177-8abf-4db1-b0a4-5683ab273f44\",\r\n      \"name\": \"34663177-8abf-4db1-b0a4-5683ab273f44\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet threshold = 20;\\nPulseConnectSecure\\n| where TimeGenerated >= timeframe\\n| where Messages contains \\\"Login failed\\\"\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by User, Source_IP\\n| where count_ > threshold\\n| extend timestamp = StartTime, AccountCustomEntity = User, IPCustomEntity = Source_IP\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"PulseConnectSecure - Potential Brute Force Attempts\",\r\n        \"description\": \"This query identifies evidence of potential brute force attack by looking at multiple failed attempts to log into the VPN server\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-06T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"PulseConnectSecure\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2391ce61-8c8d-41ac-9723-d945b2e90720\",\r\n      \"name\": \"2391ce61-8c8d-41ac-9723-d945b2e90720\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let starttime = 8d;\\nlet endtime = 1d;\\nlet threshold = 0.333;\\nlet countlimit = 50;\\nSecurityEvent\\n| where TimeGenerated >= ago(endtime)\\n| where EventID == 4625 and AccountType =~ \\\"User\\\"\\n| where IpAddress !in (\\\"127.0.0.1\\\", \\\"::1\\\")\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), CountToday = count() by EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress\\n| join kind=leftouter (\\n    SecurityEvent \\n    | where TimeGenerated between (ago(starttime) .. ago(endtime))\\n    | where EventID == 4625 and AccountType =~ \\\"User\\\"\\n    | where IpAddress !in (\\\"127.0.0.1\\\", \\\"::1\\\")\\n    | summarize CountPrev7day = count() by EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress\\n) on EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress\\n| where CountToday >= coalesce(CountPrev7day,0)*threshold and CountToday >= countlimit\\n//SubStatus Codes are detailed here - https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4625\\n| extend Reason = case(\\nSubStatus =~ '0xC000005E', 'There are currently no logon servers available to service the logon request.',\\nSubStatus =~ '0xC0000064', 'User logon with misspelled or bad user account',\\nSubStatus =~ '0xC000006A', 'User logon with misspelled or bad password',    \\nSubStatus =~ '0xC000006D', 'Bad user name or password',\\nSubStatus =~ '0xC000006E', 'Unknown user name or bad password',\\nSubStatus =~ '0xC000006F', 'User logon outside authorized hours',\\nSubStatus =~ '0xC0000070', 'User logon from unauthorized workstation',\\nSubStatus =~ '0xC0000071', 'User logon with expired password',\\nSubStatus =~ '0xC0000072', 'User logon to account disabled by administrator',\\nSubStatus =~ '0xC00000DC', 'Indicates the Sam Server was in the wrong state to perform the desired operation',  \\nSubStatus =~ '0xC0000133', 'Clocks between DC and other computer too far out of sync',\\nSubStatus =~ '0xC000015B', 'The user has not been granted the requested logon type (aka logon right) at this machine',\\nSubStatus =~ '0xC000018C', 'The logon request failed because the trust relationship between the primary domain and the trusted domain failed',\\nSubStatus =~ '0xC0000192', 'An attempt was made to logon, but the Netlogon service was not started',\\nSubStatus =~ '0xC0000193', 'User logon with expired account',\\nSubStatus =~ '0xC0000224', 'User is required to change password at next logon',\\nSubStatus =~ '0xC0000225', 'Evidently a bug in Windows and not a risk',\\nSubStatus =~ '0xC0000234', 'User logon with account locked',\\nSubStatus =~ '0xC00002EE', 'Failure Reason: An Error occurred during Logon',\\nSubStatus =~ '0xC0000413', 'Logon Failure: The machine you are logging onto is protected by an authentication firewall. The specified account is not allowed to authenticate to the machine',\\nstrcat('Unknown reason substatus: ', SubStatus))\\n| extend WorkstationName = iff(WorkstationName == \\\"-\\\" or isempty(WorkstationName), Computer , WorkstationName) \\n| project StartTime, EndTime, EventID, Account, LogonTypeName, SubStatus, Reason, AccountType, Computer, WorkstationName, IpAddress, CountToday, CountPrev7day, Avg7Day = round(CountPrev7day*1.00/7,2)\\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), Computer = make_set(Computer,128), IpAddressList = make_set(IpAddress,128), sum(CountToday), sum(CountPrev7day), avg(Avg7Day) \\nby EventID, Account, LogonTypeName, SubStatus, Reason, AccountType, WorkstationName\\n| order by sum_CountToday desc nulls last \\n| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = WorkstationName\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P8D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Excessive Windows logon failures\",\r\n        \"description\": \"User has over 50 Windows logon failures today and at least 33% of the count of logon failures over the previous 7 days.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-22T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/532f62c1-fba6-4baa-bbb6-4a32a4ef32fa\",\r\n      \"name\": \"532f62c1-fba6-4baa-bbb6-4a32a4ef32fa\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\n//Create a list of TLDs in our threat feed for later validation\\nlet list_tlds = ThreatIntelligenceIndicator\\n| where TimeGenerated > ago(ioc_lookBack)\\n| where isnotempty(DomainName)\\n| extend parts = split(DomainName, '.')\\n| extend tld = parts[(array_length(parts)-1)]\\n| summarize count() by tostring(tld)\\n| summarize make_list(tld);\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(DomainName)\\n| join (\\n    Syslog\\n    | where TimeGenerated > ago(dt_lookBack)\\n    //Extract domain patterns from syslog message\\n    | extend domain = extract(\\\"(([a-z0-9]+(-[a-z0-9]+)*\\\\\\\\.)+[a-z]{2,})\\\",1, tolower(SyslogMessage))\\n    | where isnotempty(domain)\\n    | extend parts = split(domain, '.')\\n    //Split out the TLD\\n    | extend tld = parts[(array_length(parts)-1)]\\n    //Validate parsed domain by checking if the TLD is in the list of TLDs in our threat feed\\n    | where tld in~ (list_tlds)\\n    | extend Syslog_TimeGenerated = TimeGenerated\\n) on $left.DomainName==$right.domain\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Syslog_TimeGenerated, SyslogMessage, Computer, ProcessName, domain, HostIP, Url\\n| extend timestamp = Syslog_TimeGenerated, HostCustomEntity = Computer, IPCustomEntity = HostIP, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map Domain entity to Syslog\",\r\n        \"description\": \"Identifies a match in Syslog table from any Domain IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Syslog\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/36a9c9e5-3dc1-4ed9-afaa-1d13617bfc2b\",\r\n      \"name\": \"36a9c9e5-3dc1-4ed9-afaa-1d13617bfc2b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(Url)\\n| join (\\n OfficeActivity\\n  | where TimeGenerated >= ago(dt_lookBack)\\n  //Extract the Url from a number of potential fields\\n  | extend Url = iif(OfficeWorkload == \\\"AzureActiveDirectory\\\",extract(\\\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\\\\\(\\\\\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+);\\\", 1,ModifiedProperties),tostring(parse_json(ModifiedProperties)[12].NewValue))\\n  | where isnotempty(Url)\\n  // Ensure we get a clean URL\\n  | extend Url = tostring(split(Url, ';')[0])\\n  | extend Office_TimeGenerated = TimeGenerated\\n  // Project a single user identity that we can use for entity mapping\\n  | extend User = iif(isnotempty(UserId), UserId, iif(isnotempty(Actor), tostring(parse_json(Actor)[0].ID), tostring(parse_json(Parameters)[0].Vlaue))) \\n) on Url\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Operation, \\nUserType, OfficeWorkload, Parameters, Office_TimeGenerated, Url, User\\n| extend timestamp = Office_TimeGenerated, AccountCustomEntity = User, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map URL entity to OfficeActivity data\",\r\n        \"description\": \"Identifies a match in OfficeActivity data from any URL IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/f30a47c1-65fb-42b1-a7f4-00941c12550b\",\r\n      \"name\": \"f30a47c1-65fb-42b1-a7f4-00941c12550b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(Url)\\n| join (\\n  SecurityAlert\\n  | where TimeGenerated >= ago(dt_lookBack)\\n  // Extract URL from JSON data\\n  | extend Url = extract(\\\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\\\\\(\\\\\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\\\", 1,Entities)\\n  // We only want alerts that actually contain URL data\\n  | where isnotempty(Url)\\n  // Extract hostname from JSON data for entity mapping\\n  | extend Compromised_Host = tostring(parse_json(ExtendedProperties).[\\\"Compromised Host\\\"])\\n  | extend Alert_TimeGenerated = TimeGenerated\\n) on Url\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Alert_TimeGenerated,\\nAlertName, AlertSeverity, Description, Url, Compromised_Host\\n| extend timestamp = Alert_TimeGenerated, HostCustomEntity = Compromised_Host, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map URL entity to SecurityAlert data\",\r\n        \"description\": \"Identifies a match in SecurityAlert data from any URL IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"MicrosoftCloudAppSecurity\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureSecurityCenter\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/04384937-e927-4595-8f3c-89ff58ed231f\",\r\n      \"name\": \"04384937-e927-4595-8f3c-89ff58ed231f\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let detectionTime = 30d;\\nlet IPs = dynamic ([\\\"199.249.230.\\\",\\\"185.220.101.\\\",\\\"23.129.64.\\\",\\\"109.70.100.\\\",\\\"185.220.102.\\\"]);\\nOfficeActivity\\n| where TimeGenerated > ago(detectionTime)\\n| where RecordType in (\\\"AzureActiveDirectoryAccountLogon\\\", \\\"AzureActiveDirectoryStsLogon\\\") \\n| where Operation != 'UserLoggedIn'\\n| extend UserAgent = iff(parse_json(ExtendedProperties)[0].Name =~ \\\"UserAgent\\\", extractjson(\\\"$[0].Value\\\", ExtendedProperties, typeof(string)),\\\"\\\")\\n| mv-expand parse_json(ExtendedProperties)\\n| where ExtendedProperties.Name =~ \\\"RequestType\\\"\\n| extend RequestType = ExtendedProperties.Value\\n| where ClientIP has_any (IPs)\\n| summarize authAttempts=dcount(TimeGenerated), firstAttempt=min(TimeGenerated), lastAttempt=max(TimeGenerated), uniqueIPs=dcount(ClientIP), uniqueAccounts=dcount(UserId), attemptedAccounts=make_set(UserId) by UserAgent\\n| where authAttempts > 2500\\n| extend timestamp = firstAttempt\\n| sort by uniqueAccounts\",\r\n        \"queryFrequency\": \"P7D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"displayName\": \"Possible STRONTIUM attempted credential harvesting\",\r\n        \"description\": \"Surfaces potential STRONTIUM group Office365 credential harvesting attempts within OfficeActivity Logon events.\\nReferences: https://www.microsoft.com/security/blog/2020/09/10/strontium-detecting-new-patters-credential-harvesting/.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-05T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-09-10T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2cfc3c6e-f424-4b88-9cc9-c89f482d016a\",\r\n      \"name\": \"2cfc3c6e-f424-4b88-9cc9-c89f482d016a\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let auditLookback = 1h;\\nAuditLogs\\n| where TimeGenerated > ago(auditLookback)\\n| where OperationName has_any (\\\"Add service principal\\\", \\\"Certificates and secrets management\\\") // captures \\\"Add service principal\\\", \\\"Add service principal credentials\\\", and \\\"Update application â€“ Certificates and secrets management\\\" events\\n| where Result =~ \\\"success\\\"\\n| mv-expand target = TargetResources\\n| where tostring(InitiatedBy.user.userPrincipalName) has \\\"@\\\" or tostring(InitiatedBy.app.displayName) has \\\"@\\\"\\n| extend targetDisplayName = tostring(TargetResources[0].displayName)\\n| extend targetId = tostring(TargetResources[0].id)\\n| extend targetType = tostring(TargetResources[0].type)\\n| extend keyEvents = TargetResources[0].modifiedProperties\\n| mv-expand keyEvents\\n| where keyEvents.displayName =~ \\\"KeyDescription\\\"\\n| extend new_value_set = parse_json(tostring(keyEvents.newValue))\\n| extend old_value_set = parse_json(tostring(keyEvents.oldValue))\\n| where old_value_set == \\\"[]\\\"\\n| parse new_value_set with * \\\"KeyIdentifier=\\\" keyIdentifier:string \\\",KeyType=\\\" keyType:string \\\",KeyUsage=\\\" keyUsage:string \\\",DisplayName=\\\" keyDisplayName:string \\\"]\\\" *\\n| where keyUsage == \\\"Verify\\\"  or keyUsage == \\\"\\\"\\n| extend UserAgent = iff(AdditionalDetails[0].key == \\\"User-Agent\\\",tostring(AdditionalDetails[0].value),\\\"\\\")\\n| extend InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\\n| extend InitiatingIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\\n// The below line is currently commented out but Azure Sentinel users can modify this query to show only Application or only Service Principal events in their environment\\n//| where targetType =~ \\\"Application\\\" // or targetType =~ \\\"ServicePrincipal\\\"\\n| project-away new_value_set, old_value_set\\n| project-reorder TimeGenerated, OperationName, InitiatingUserOrApp, InitiatingIpAddress, UserAgent, targetDisplayName, targetId, targetType, keyDisplayName, keyType, keyUsage, keyIdentifier, CorrelationId, TenantId\\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatingUserOrApp, IPCustomEntity = InitiatingIpAddress\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"First access credential added to Application or Service Principal where no credential was present\",\r\n        \"description\": \"This will alert when an admin or app owner account adds a new credential to an Application or Service Principal where there was no previous verify KeyCredential associated.\\nIf a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.\\nAdditional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow\\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-20T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-11-30T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/d3980830-dd9d-40a5-911f-76b44dfdce16\",\r\n      \"name\": \"d3980830-dd9d-40a5-911f-76b44dfdce16\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let RunTime = 1h;\\nSigninLogs\\n| where TimeGenerated > ago(RunTime)\\n| where AppDisplayName == \\\"GitHub.com\\\"\\n| where ResultType == 0\\n| summarize CountOfLocations = dcount(Location), Locations = make_set(Location), BurstStartTime = min(TimeGenerated), BurstEndTime = max(TimeGenerated) by UserPrincipalName\\n| where CountOfLocations > 1\\n| extend timestamp = BurstStartTime, AccountCustomEntity = UserPrincipalName\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"GitHub Signin Burst from Multiple Locations\",\r\n        \"description\": \"This alerts when there Signin burst from multiple locations in GitHub (AAD SSO).\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-02T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/795edf2d-cf3e-45b5-8452-fe6c9e6a582e\",\r\n      \"name\": \"795edf2d-cf3e-45b5-8452-fe6c9e6a582e\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1h;\\nCommonSecurityLog \\n| where TimeGenerated >= ago(timeframe)\\n| where isempty(CommunicationDirection) \\n| where DeviceEventClassID in (\\\"733101\\\",\\\"733102\\\",\\\"733103\\\",\\\"733104\\\",\\\"733105\\\")\\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Cisco ASA - threat detection message fired\",\r\n        \"description\": \"Identifies when the Cisco ASA Threat Detection engine fired an alert based on malicious activity occurring on the network inicated by DeviceEventClassID 733101-733105\\nResources: https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog/syslogs9.html\\nDetails on how to further troubleshoot/investigate: https://www.cisco.com/c/en/us/support/docs/security/asa-5500-x-series-next-generation-firewalls/113685-asa-threat-detection.html\",\r\n        \"tactics\": [\r\n          \"Discovery\",\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/aac495a9-feb1-446d-b08e-a1164a539452\",\r\n      \"name\": \"aac495a9-feb1-446d-b08e-a1164a539452\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"ThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(24h)\\n| where Action == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\\n// Taking the first non-empty value based on potential IOC match availability\\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\\n| join (\\n  GitHubAudit\\n  | where TimeGenerated >= ago(24h)\\n  | extend GitHubAudit_TimeGenerated = TimeGenerated\\n)\\non $left.TI_ipEntity == $right.IPaddress\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, GitHubAudit_TimeGenerated, TI_ipEntity, IPaddress, Actor, Action, Country, OperationType, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress\\n| extend timestamp = GitHubAudit_TimeGenerated, IPCustomEntity = IPaddress, AccountCustomEntity = Actor\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"TI map IP entity to GitHub_CL\",\r\n        \"description\": \"Identifies a match in GitHub_CL table from any IP IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/4a3f5ed7-8da5-4ce2-af6f-c9ada45060f2\",\r\n      \"name\": \"4a3f5ed7-8da5-4ce2-af6f-c9ada45060f2\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$';\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n//Filtering the table for Email related IOCs\\n| where isnotempty(EmailRecipient)\\n| join (\\n    OfficeActivity | where TimeGenerated >= ago(dt_lookBack) and isnotempty(UserId)\\n    | where UserId matches regex emailregex\\n    | extend OfficeActivity_TimeGenerated = TimeGenerated\\n)\\non $left.EmailRecipient == $right.UserId\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, OfficeActivity_TimeGenerated,\\nEmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, UserId, ClientIP, Operation, UserType, RecordType, OfficeWorkload, Parameters\\n| extend timestamp = OfficeActivity_TimeGenerated, AccountCustomEntity = UserId, IPCustomEntity = ClientIP, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map Email entity to OfficeActivity\",\r\n        \"description\": \"Identifies a match in OfficeActivity table from any Email IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/957cb240-f45d-4491-9ba5-93430a3c08be\",\r\n      \"name\": \"957cb240-f45d-4491-9ba5-93430a3c08be\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nOfficeActivity\\n| where TimeGenerated >= ago(timeframe)\\n| where Operation in~ ( \\\"Add-MailboxPermission\\\", \\\"Add-MailboxFolderPermission\\\", \\\"Set-Mailbox\\\", \\\"New-ManagementRoleAssignment\\\")\\nand not(UserId has_any ('NT AUTHORITY\\\\\\\\SYSTEM (Microsoft.Exchange.ServiceHost)','devilfish-applicationaccount') and Operation in~ ( \\\"Add-MailboxPermission\\\", \\\"Set-Mailbox\\\"))\\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserId, IPCustomEntity = ClientIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Rare and potentially high-risk Office operations\",\r\n        \"description\": \"Identifies Office operations that are typically rare and can provide capabilities useful to attackers.\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"Collection\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-13T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/9fb57e58-3ed8-4b89-afcf-c8e786508b1c\",\r\n      \"name\": \"9fb57e58-3ed8-4b89-afcf-c8e786508b1c\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let szOperationNames = dynamic([\\\"Create or Update Virtual Machine\\\", \\\"Create Deployment\\\"]);\\nlet starttime = 14d;\\nlet endtime = 1d;\\nlet RareCaller = AzureActivity\\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\\n| where OperationName in~ (szOperationNames)\\n| project ResourceGroup, Caller, OperationName, CallerIpAddress\\n| join kind=rightantisemi (\\nAzureActivity\\n| where TimeGenerated > ago(endtime)\\n| where OperationName in~ (szOperationNames)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityStatus = makeset(ActivityStatus), OperationIds = makeset(OperationId), CallerIpAddress = makeset(CallerIpAddress) \\nby ResourceId, Caller, OperationName, Resource, ResourceGroup\\n) on Caller, ResourceGroup \\n| mvexpand CallerIpAddress\\n| where isnotempty(CallerIpAddress);\\nlet Counts = RareCaller | summarize ActivityCountByCaller = count() by Caller;\\nRareCaller | join kind= inner (Counts) on Caller | project-away Caller1\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = tostring(CallerIpAddress)\\n| sort by ActivityCountByCaller desc nulls last\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Suspicious Resource deployment\",\r\n        \"description\": \"Identifies when a rare Resource and ResourceGroup deployment occurs by a previously unseen Caller.\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-05T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActivity\",\r\n            \"dataTypes\": [\r\n              \"AzureActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/3533f74c-9207-4047-96e2-0eb9383be587\",\r\n      \"name\": \"3533f74c-9207-4047-96e2-0eb9383be587\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let detectionTime = 1d;\\nlet joinLookback = 14d;\\nAuditLogs\\n| where TimeGenerated > ago(detectionTime)\\n| where LoggedByService =~ \\\"Core Directory\\\"\\n| where Category =~ \\\"ApplicationManagement\\\"\\n| where OperationName =~ \\\"Consent to application\\\"\\n| where TargetResources has \\\"offline\\\"\\n| extend AppDisplayName = TargetResources.[0].displayName\\n| extend AppClientId = tolower(TargetResources.[0].id)\\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\\\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\\\"] with (format=\\\"csv\\\")))\\n| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue\\n| parse ConsentFull with * \\\"ConsentType: \\\" GrantConsentType \\\", Scope: \\\" GrantScope1 \\\"]\\\" *\\n| where ConsentFull contains \\\"offline_access\\\" and ConsentFull contains \\\"Files.Read\\\" or ConsentFull contains \\\"Mail.Read\\\" or ConsentFull contains \\\"Notes.Read\\\" or ConsentFull contains \\\"ChannelMessage.Read\\\" or ConsentFull contains \\\"Chat.Read\\\" or ConsentFull contains \\\"TeamsActivity.Read\\\" or ConsentFull contains \\\"Group.Read\\\" or ConsentFull contains \\\"EWS.AccessAsUser.All\\\" or ConsentFull contains \\\"EAS.AccessAsUser.All\\\"\\n| where GrantConsentType != \\\"AllPrincipals\\\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress)\\n| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)\\n| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ \\\"User-Agent\\\", AdditionalDetails[0].value, \\\"\\\")\\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\\n| join kind = leftouter (AuditLogs\\n| where TimeGenerated > ago(joinLookback)\\n| where LoggedByService =~ \\\"Core Directory\\\"\\n| where Category =~ \\\"ApplicationManagement\\\"\\n| where OperationName =~ \\\"Add service principal\\\"\\n| extend AppClientId = tolower(TargetResources[0].id)\\n| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has \\\"AddressType\\\", TargetResources[0].modifiedProperties[1].newValue, \\\"\\\")\\n| distinct AppClientId, tostring(AppReplyURLs)\\n)\\non AppClientId\\n| join kind = innerunique (AuditLogs\\n| where TimeGenerated > ago(joinLookback)\\n| where LoggedByService =~ \\\"Core Directory\\\"\\n| where Category =~ \\\"ApplicationManagement\\\"\\n| where OperationName =~ \\\"Add OAuth2PermissionGrant\\\" or OperationName =~ \\\"Add delegated permission grant\\\"\\n| extend GrantAuthentication = tostring(TargetResources[0].displayName)\\n| extend GrantOperation = OperationName\\n| project GrantAuthentication, GrantOperation, CorrelationId\\n) on CorrelationId\\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"displayName\": \"Suspicious application consent for offline access\",\r\n        \"description\": \"This will alert when a user consents to provide a previously-unknown Azure application with offline access via OAuth.\\nOffline access will provide the Azure App with access to the listed resources without requiring two-factor authentication.\\nConsent to applications with offline access and read capabilities should be rare, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-06-29T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-26T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/ee1d718b-9ed9-4a71-90cd-a483a4f008df\",\r\n      \"name\": \"ee1d718b-9ed9-4a71-90cd-a483a4f008df\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"MicrosoftSecurityIncidentCreation\",\r\n      \"properties\": {\r\n        \"productFilter\": \"Office 365 Advanced Threat Protection\",\r\n        \"displayName\": \"Create incidents based on Office 365 Advanced Threat Protection alerts\",\r\n        \"description\": \"Create incidents based on all alerts generated in Office 365 Advanced Threat Protection\",\r\n        \"lastUpdatedDateUTC\": \"2020-09-01T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-04-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"OfficeATP\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert (OATP)\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 1\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/f2eb15bd-8a88-4b24-9281-e133edfba315\",\r\n      \"name\": \"f2eb15bd-8a88-4b24-9281-e133edfba315\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\\n// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\\n// Taking the first non-empty value based on potential IOC match availability\\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\\n| join (\\n    SigninLogs | where TimeGenerated >= ago(dt_lookBack)\\n    | extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\\n    | extend Region = tostring(LocationDetails[\\\"countryOrRegion\\\"]), State = tostring(LocationDetails[\\\"state\\\"]), City = tostring(LocationDetails[\\\"city\\\"])\\n    // renaming time column so it is clear the log this came from\\n    | extend SigninLogs_TimeGenerated = TimeGenerated\\n)\\non $left.TI_ipEntity == $right.IPAddress\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, SigninLogs_TimeGenerated,\\nTI_ipEntity, IPAddress, UserPrincipalName, AppDisplayName, StatusCode, StatusDetails, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress\\n| extend timestamp = SigninLogs_TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map IP entity to SigninLogs\",\r\n        \"description\": \"Identifies a match in SigninLogs from any IP IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a83ef0f4-dace-4767-bce3-ebd32599d2a0\",\r\n      \"name\": \"a83ef0f4-dace-4767-bce3-ebd32599d2a0\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nDnsEvents\\n| where TimeGenerated > ago(timeframe)\\n| where Name contains \\\".\\\"\\n| where Name has_any (\\\"tor2web.org\\\", \\\"tor2web.com\\\", \\\"torlink.co\\\", \\\"onion.to\\\", \\\"onion.ink\\\", \\\"onion.cab\\\", \\\"onion.nu\\\", \\\"onion.link\\\", \\n\\\"onion.it\\\", \\\"onion.city\\\", \\\"onion.direct\\\", \\\"onion.top\\\", \\\"onion.casa\\\", \\\"onion.plus\\\", \\\"onion.rip\\\", \\\"onion.dog\\\", \\\"tor2web.fi\\\", \\n\\\"tor2web.blutmagie.de\\\", \\\"onion.sh\\\", \\\"onion.lu\\\", \\\"onion.pet\\\", \\\"t2w.pw\\\", \\\"tor2web.ae.org\\\", \\\"tor2web.io\\\", \\\"tor2web.xyz\\\", \\\"onion.lt\\\", \\n\\\"s1.tor-gateways.de\\\", \\\"s2.tor-gateways.de\\\", \\\"s3.tor-gateways.de\\\", \\\"s4.tor-gateways.de\\\", \\\"s5.tor-gateways.de\\\", \\\"hiddenservice.net\\\")\\n| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"DNS events related to ToR proxies\",\r\n        \"description\": \"Identifies IP addresses performing DNS lookups associated with common ToR proxies.\",\r\n        \"tactics\": [\r\n          \"Exfiltration\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-07T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/b2c15736-b9eb-4dae-8b02-3016b6a45a32\",\r\n      \"name\": \"b2c15736-b9eb-4dae-8b02-3016b6a45a32\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let starttime = 14d;\\nlet endtime = 1d;\\n// The number of operations below which an IP address is considered an unusual source of role assignment operations\\nlet alertOperationThreshold = 5;\\nlet createRoleAssignmentActivity = AzureActivity\\n| where OperationName == \\\"Create role assignment\\\";\\ncreateRoleAssignmentActivity \\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\\n| summarize count() by CallerIpAddress, Caller\\n| where count_ >= alertOperationThreshold\\n| join kind = rightanti ( \\ncreateRoleAssignmentActivity\\n| where TimeGenerated > ago(endtime)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \\nOperationIds = makelist(OperationId), CorrelationId = makelist(CorrelationId), ActivityCountByCallerIPAddress = count()  \\nby ResourceId, CallerIpAddress, Caller, OperationName, Resource, ResourceGroup\\n) on CallerIpAddress, Caller\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Suspicious granting of permissions to an account\",\r\n        \"description\": \"Identifies IPs from which users grant access to other users on azure resources and alerts when a previously unseen source IP address is used.\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"PrivilegeEscalation\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-05T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActivity\",\r\n            \"dataTypes\": [\r\n              \"AzureActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/5dd76a87-9f87-4576-bab3-268b0e2b338b\",\r\n      \"name\": \"5dd76a87-9f87-4576-bab3-268b0e2b338b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let threshold = 5;\\nlet szSharePointFileOperation = \\\"SharePointFileOperation\\\";\\nlet szOperations = dynamic([\\\"FileDownloaded\\\", \\\"FileUploaded\\\"]);\\nlet starttime = 14d;\\nlet endtime = 1d;\\nlet historicalActivity =\\nOfficeActivity\\n| where TimeGenerated between(ago(starttime)..ago(endtime))\\n| where RecordType =~ szSharePointFileOperation\\n| where Operation in~ (szOperations)\\n| where isnotempty(UserAgent)\\n| summarize historicalCount = count() by UserAgent, RecordType, Operation;\\nlet recentActivity = OfficeActivity\\n| where RecordType =~ szSharePointFileOperation\\n| where Operation in~ (szOperations)\\n| where TimeGenerated > ago(endtime)\\n| where isnotempty(UserAgent)\\n| summarize min(Start_Time), max(Start_Time), recentCount = count() by UserAgent, RecordType, Operation;\\nlet RareUserAgent = recentActivity | join kind = leftanti (historicalActivity) on UserAgent\\n| order by recentCount desc, UserAgent\\n// More than 3 downloads/uploads from a new user agent today\\n| where recentCount > threshold;\\nOfficeActivity \\n| where TimeGenerated > ago(endtime) \\n| where RecordType =~ szSharePointFileOperation \\n| where Operation in~ (szOperations)\\n| where isnotempty(UserAgent)\\n| join kind= inner (RareUserAgent)\\non UserAgent, RecordType, Operation    \\n| where Start_Time between(min_Start_Time .. max_Start_Time)\\n| summarize StartTimeUtc = min(min_Start_Time), EndTimeUtc = max(max_Start_Time) by RecordType, Operation, UserAgent, UserType, UserId, ClientIP, OfficeWorkload, Site_Url, OfficeObjectId, UserAgentSeenCount = recentCount\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP, URLCustomEntity = Site_Url\\n| order by UserAgentSeenCount desc, UserAgent asc, Operation asc, UserId asc\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"SharePointFileOperation via devices with previously unseen user agents\",\r\n        \"description\": \"Identifies if the number of documents uploaded or downloaded from device(s) associated\\nwith a previously unseen user agent exceeds a threshold (default is 5).\",\r\n        \"tactics\": [\r\n          \"Exfiltration\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-23T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/68271db2-cbe9-4009-b1d3-bb3b5fe5713c\",\r\n      \"name\": \"68271db2-cbe9-4009-b1d3-bb3b5fe5713c\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let detectionTime = 30d;\\nlet User_Agents = dynamic ([\\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70\\\", \\n\\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.1 Safari/605.1.15\\\", \\n\\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0\\\", \\n\\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\\\", \\n\\\"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\\\"]);\\nOfficeActivity\\n| where TimeGenerated > ago(detectionTime)\\n| where RecordType in (\\\"AzureActiveDirectoryAccountLogon\\\", \\\"AzureActiveDirectoryStsLogon\\\") \\n| where Operation != 'UserLoggedIn'\\n| extend UserAgent = iff(parse_json(ExtendedProperties)[0].Name =~ \\\"UserAgent\\\", extractjson(\\\"$[0].Value\\\", ExtendedProperties, typeof(string)),\\\"\\\")\\n| mv-expand parse_json(ExtendedProperties)\\n| where ExtendedProperties.Name =~ \\\"RequestType\\\"\\n| extend RequestType = todynamic(ExtendedProperties).Value\\n| where UserAgent =~ \\\"ms-office\\\" or UserAgent has_any (User_Agents)\\n| summarize authAttempts=dcount(TimeGenerated), firstAttempt=min(TimeGenerated), lastAttempt=max(TimeGenerated), uniqueIPs=dcount(ClientIP), uniqueAccounts=dcount(UserId), attemptedAccounts=make_set(UserId) by UserAgent\\n| where authAttempts > 500\\n| extend timestamp = firstAttempt\\n| sort by uniqueAccounts\",\r\n        \"queryFrequency\": \"P7D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"displayName\": \"Possible STRONTIUM attempted credential harvesting\",\r\n        \"description\": \"Surfaces potential STRONTIUM group Office365 credential harvesting attempts within OfficeActivity Logon events.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-05T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-09-10T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/84cf1d59-f620-4fee-b569-68daf7008b7b\",\r\n      \"name\": \"84cf1d59-f620-4fee-b569-68daf7008b7b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet threshold = 10;\\nQualysHostDetection_CL\\n| where TimeGenerated >= timeframe\\n| mv-expand todynamic(Detections_s)\\n| extend Status = tostring(Detections_s.Status), Vulnerability = tostring(Detections_s.Results), Severity = tostring(Detections_s.Severity)\\n| where Status =~ \\\"New\\\" and Severity == \\\"5\\\"\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), dcount(NetBios_s) by tostring(Detections_s.QID)\\n| where dcount_NetBios_s >= threshold\\n| extend timestamp = StartTime\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"displayName\": \"New High Severity Vulnerability Detected Across Multiple Hosts\",\r\n        \"description\": \"This creates an incident when a new high severity vulnerability is detected across multilple hosts\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-06-20T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"QualysVulnerabilityManagement\",\r\n            \"dataTypes\": [\r\n              \"QualysHostDetection_CL\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/fbfbf530-506b-49a4-81ad-4030885a195c\",\r\n      \"name\": \"fbfbf530-506b-49a4-81ad-4030885a195c\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let alertTimeWindow = 1h;\\nlet logTimeWindow = 7d;\\n// Define script extensions that suit your web application environment - a sample are provided below\\nlet scriptExtensions = dynamic([\\\".php\\\", \\\".jsp\\\", \\\".js\\\", \\\".aspx\\\", \\\".asmx\\\", \\\".asax\\\", \\\".cfm\\\", \\\".shtml\\\"]); \\nlet alertData = materialize(SecurityAlert \\n| where TimeGenerated > ago(alertTimeWindow) \\n| where ProviderName == \\\"MDATP\\\" \\n// Parse and expand the alert JSON \\n| extend alertData = parse_json(Entities) \\n| mvexpand alertData);\\nlet fileData = alertData\\n// Extract web script files from MDATP alerts - our malicious web scripts - candidate webshells\\n| where alertData.Type =~ \\\"file\\\" \\n| where alertData.Name has_any(scriptExtensions) \\n| extend FileName = tostring(alertData.Name), Directory = tostring(alertData.Directory);\\nlet hostData = alertData\\n// Extract server details from alerts and map to alert id\\n| where alertData.Type =~ \\\"host\\\"\\n| project HostName = tostring(alertData.HostName), DnsDomain = tostring(alertData.DnsDomain), SystemAlertId\\n| distinct HostName, DnsDomain, SystemAlertId;\\n// Join the files on their impacted servers\\nlet webshellData = fileData\\n| join kind=inner (hostData) on SystemAlertId \\n| project TimeGenerated, FileName, Directory, HostName, DnsDomain;\\nwebshellData\\n| join (  \\n// Find requests that were made to this file on the impacted server in the W3CIISLog table \\nW3CIISLog  \\n| where TimeGenerated > ago(logTimeWindow) \\n// Restrict to accesses to script extensions \\n| where csUriStem has_any(scriptExtensions)\\n| extend splitUriStem = split(csUriStem, \\\"/\\\")  \\n| extend FileName = splitUriStem[-1], HostName = sComputerName\\n// Summarize potential attacker activity\\n| summarize count(), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), RequestUserAgents=make_set(csUserAgent), ReqestMethods=make_set(csMethod), RequestStatusCodes=make_set(scStatus), RequestCookies=make_set(csCookie), RequestReferers=make_set(csReferer), RequestQueryStrings=make_set(csUriQuery) by AttackerIP=cIP, SiteName=sSiteName, ShellLocation=csUriStem, tostring(FileName), HostName  \\n) on FileName, HostName\\n| project StartTime, EndTime, AttackerIP, RequestUserAgents, HostName, SiteName, ShellLocation, ReqestMethods, RequestStatusCodes, RequestCookies, RequestReferers, RequestQueryStrings, RequestCount = count_\\n// Expose the attacker ip address as a custom entity\\n| extend timestamp=StartTime, IPCustomEntity = AttackerIP, HostCustomEntity = HostName\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P7D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Malicious web application requests linked with MDATP alerts\",\r\n        \"description\": \"Takes MDATP alerts where web scripts are present in the evidence and correlates with requests made to those scripts\\nin the WCSIISLog to surface new alerts for potentially malicious web request activity.\\nThe lookback for alerts is set to 1h and the lookback for W3CIISLogs is set to 7d. A sample set of popular web script extensions\\nhas been provided in scriptExtensions that should be tailored to your environment.\",\r\n        \"tactics\": [\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-05-21T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"MicrosoftDefenderAdvancedThreatProtection\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(IIS)\",\r\n            \"dataTypes\": [\r\n              \"W3CIISLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/01f64465-b1ef-41ea-a7f5-31553a11ad43\",\r\n      \"name\": \"01f64465-b1ef-41ea-a7f5-31553a11ad43\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nlet endpointData = \\n(SecurityEvent\\n  | where TimeGenerated >= ago(timeframe) \\n  | where EventID == 4688\\n  | extend shortFileName = tostring(split(NewProcessName, '\\\\\\\\')[-1])\\n  );\\n// Correlate suspect executables seen in TrendMicro rule updates with similar activity on endpoints\\nCommonSecurityLog\\n| where TimeGenerated >= ago(timeframe)\\n| where DeviceVendor =~ \\\"Trend Micro\\\"\\n| where Activity =~ \\\"Deny List updated\\\" \\n| where RequestURL endswith \\\".exe\\\"\\n| project TimeGenerated, Activity , RequestURL , SourceIP, DestinationIP\\n| extend suspectExeName = tolower(tostring(split(RequestURL, '/')[-1]))\\n| join (endpointData) on $left.suspectExeName == $right.shortFileName \\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer, URLCustomEntity = RequestURL\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Network endpoint to host executable correlation\",\r\n        \"description\": \"Correlates blocked URLs hosting [malicious] executables with host endpoint data\\nto identify potential instances of executables of the same name having been recently run.\",\r\n        \"tactics\": [\r\n          \"Execution\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-08T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"TrendMicro\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a2e36ce0-da4d-4b6e-88c6-4e40161c5bfc\",\r\n      \"name\": \"a2e36ce0-da4d-4b6e-88c6-4e40161c5bfc\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$';\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n//Filtering the table for Email related IOCs\\n| where isnotempty(EmailRecipient)\\n| join (\\n    SecurityAlert | where TimeGenerated >= ago(dt_lookBack)\\n    // Converting Entities into dynamic data type and use mv-expand to unpack the array\\n    | extend EntitiesDynamicArray = parse_json(Entities) | mv-expand EntitiesDynamicArray\\n    // Parsing relevant entity column to filter type account and creating new column by combining account and UPNSuffix\\n    | extend Entitytype = tostring(parse_json(EntitiesDynamicArray).Type), EntityName = tostring(parse_json(EntitiesDynamicArray).Name),\\n    EntityUPNSuffix = tostring(parse_json(EntitiesDynamicArray).UPNSuffix)\\n    | where Entitytype =~ \\\"account\\\"\\n    | extend EntityEmail = tolower(strcat(EntityName, \\\"@\\\", EntityUPNSuffix))\\n    | where EntityEmail matches regex emailregex\\n    | extend SecurityAlert_TimeGenerated = TimeGenerated\\n)\\non $left.EmailRecipient == $right.EntityEmail\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, SecurityAlert_TimeGenerated,\\nEmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, EntityEmail, AlertName, AlertType,\\nAlertSeverity, Entities, ProviderName, VendorName\\n| extend timestamp = SecurityAlert_TimeGenerated, AccountCustomEntity = EntityEmail, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map Email entity to SecurityAlert\",\r\n        \"description\": \"Identifies a match in SecurityAlert table from any Email IOC from TI which will extend coverage to datatypes such as MCAS, StorageThreatProtection and many others\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureSecurityCenter\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/f8dad4e9-3f19-4d70-ab7f-8f19ccd43a3e\",\r\n      \"name\": \"f8dad4e9-3f19-4d70-ab7f-8f19ccd43a3e\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet threshold = 1;\\nAzureDiagnostics\\n    | where TimeGenerated >= timeframe\\n    | where OperationName in (\\\"AzureFirewallApplicationRuleLog\\\",\\\"AzureFirewallNetworkRuleLog\\\")\\n    | extend msg_s_replaced0 = replace(@\\\"\\\\s\\\\s\\\",@\\\" \\\",msg_s)\\n    | extend msg_s_replaced1 = replace(@\\\"\\\\.\\\\s\\\",@\\\" \\\",msg_s_replaced0)\\n    | extend msg_a = split(msg_s_replaced1,\\\" \\\")\\n    | extend srcAddr_a = split(msg_a[3],\\\":\\\") , destAddr_a = split(msg_a[5],\\\":\\\")\\n    | extend protocol = tostring(msg_a[0]), srcIp = tostring(srcAddr_a[0]), srcPort = tostring(srcAddr_a[1]), destIp = tostring(destAddr_a[0]), destPort = tostring(destAddr_a[1]), action = tostring(msg_a[7])\\n    | where action == \\\"Deny\\\"\\n    | extend url = iff(destIp matches regex \\\"\\\\\\\\d+\\\\\\\\.\\\\\\\\d+\\\\\\\\.\\\\\\\\d+\\\\\\\\.\\\\\\\\d+\\\",\\\"\\\",destIp)\\n    | summarize StartTime = min(TimeGenerated), count() by srcIp, destIp, url, action, protocol\\n    | where count_ >= [\\\"threshold\\\"]\\n    | extend timestamp = StartTime, URLCustomEntity = url, IPCustomEntity = srcIp\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 1,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Several deny actions registered\",\r\n        \"description\": \"Identifies attack pattern when attacker tries to move, or scan, from resource to resource on the network and creates an incident when a source has more than 1 registered deny action in Azure Firewall.\",\r\n        \"tactics\": [\r\n          \"Discovery\",\r\n          \"LateralMovement\",\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-10-19T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureFirewall\",\r\n            \"dataTypes\": [\r\n              \"AzureDiagnostics\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/3d645a88-2724-41a7-adea-db74c439cf79\",\r\n      \"name\": \"3d645a88-2724-41a7-adea-db74c439cf79\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet threshold = 5000;\\nSophosXGFirewall\\n| where TimeGenerated >= timeframe\\n| where Log_Type =~ \\\"Firewall\\\" and Status =~ \\\"Deny\\\"\\n| summarize count() by Src_IP, bin(TimeGenerated,5m)\\n| where count_ > threshold\\n| extend timestamp = TimeGenerated, IPCustomEntity = Src_IP\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Excessive Amount of Denied Connections from a Single Source\",\r\n        \"description\": \"This creates an incident in the event that a single source IP address generates a excessive amount of denied connections.\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-07-08T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SophosXGFirewall\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/ef88eb96-861c-43a0-ab16-f3835a97c928\",\r\n      \"name\": \"ef88eb96-861c-43a0-ab16-f3835a97c928\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nlet regexEmpire = @\\\"SetDelay|GetDelay|Set-LostLimit|Get-LostLimit|Set-Killdate|Get-Killdate|Set-WorkingHours|Get-WorkingHours|Get-Sysinfo|Add-Servers|Invoke-ShellCommand|Start-AgentJob|Update-Profile|Get-FilePart|Encrypt-Bytes|Decrypt-Bytes|Encode-Packet|Decode-Packet|Send-Message|Process-Packet|Process-Tasking|Get-Task|Start-Negotiate|Invoke-DllInjection|Invoke-ReflectivePEInjection|Invoke-Shellcode|Invoke-ShellcodeMSIL|Get-ChromeDump|Get-ClipboardContents|Get-IndexedItem|Get-Keystrokes|Invoke-Inveigh|Invoke-NetRipper|local:Invoke-PatchDll|Invoke-NinjaCopy|Get-Win32Types|Get-Win32Constants|Get-Win32Functions|Sub-SignedIntAsUnsigned|Add-SignedIntAsUnsigned|Compare-Val1GreaterThanVal2AsUInt|Convert-UIntToInt|Test-MemoryRangeValid|Write-BytesToMemory|Get-DelegateType|Get-ProcAddress|Enable-SeDebugPrivilege|Invoke-CreateRemoteThread|Get-ImageNtHeaders|Get-PEBasicInfo|Get-PEDetailedInfo|Import-DllInRemoteProcess|Get-RemoteProcAddress|Copy-Sections|Update-MemoryAddresses|Import-DllImports|Get-VirtualProtectValue|Update-MemoryProtectionFlags|Update-ExeFunctions|Copy-ArrayOfMemAddresses|Get-MemoryProcAddress|Invoke-MemoryLoadLibrary|Invoke-MemoryFreeLibrary|Out-Minidump|Get-VaultCredential|Invoke-DCSync|Translate-Name|Get-NetDomain|Get-NetForest|Get-NetForestDomain|Get-DomainSearcher|Get-NetComputer|Get-NetGroupMember|Get-NetUser|Invoke-Mimikatz|Invoke-PowerDump|Invoke-TokenManipulation|Exploit-JMXConsole|Exploit-JBoss|Invoke-Thunderstruck|Invoke-VoiceTroll|Set-WallPaper|Invoke-PsExec|Invoke-SSHCommand|Invoke-PSInject|Invoke-RunAs|Invoke-SendMail|Invoke-Rule|Get-OSVersion|Select-EmailItem|View-Email|Get-OutlookFolder|Get-EmailItems|Invoke-MailSearch|Get-SubFolders|Get-GlobalAddressList|Invoke-SearchGAL|Get-SMTPAddress|Disable-SecuritySettings|Reset-SecuritySettings|Get-OutlookInstance|New-HoneyHash|Set-MacAttribute|Invoke-PatchDll|Get-SecurityPackages|Install-SSP|Invoke-BackdoorLNK|New-ElevatedPersistenceOption|New-UserPersistenceOption|Add-Persistence|Invoke-CallbackIEX|Add-PSFirewallRules|Invoke-EventLoop|Invoke-PortBind|Invoke-DNSLoop|Invoke-PacketKnock|Invoke-CallbackLoop|Invoke-BypassUAC|Get-DecryptedCpassword|Get-GPPInnerFields|Invoke-WScriptBypassUAC|Get-ModifiableFile|Get-ServiceUnquoted|Get-ServiceFilePermission|Get-ServicePermission|Invoke-ServiceUserAdd|Invoke-ServiceCMD|Write-UserAddServiceBinary|Write-CMDServiceBinary|Write-ServiceEXE|Write-ServiceEXECMD|Restore-ServiceEXE|Invoke-ServiceStart|Invoke-ServiceStop|Invoke-ServiceEnable|Invoke-ServiceDisable|Get-ServiceDetail|Find-DLLHijack|Find-PathHijack|Write-HijackDll|Get-RegAlwaysInstallElevated|Get-RegAutoLogon|Get-VulnAutoRun|Get-VulnSchTask|Get-UnattendedInstallFile|Get-Webconfig|Get-ApplicationHost|Write-UserAddMSI|Invoke-AllChecks|Invoke-ThreadedFunction|Test-Login|Get-UserAgent|Test-Password|Get-ComputerDetails|Find-4648Logons|Find-4624Logons|Find-AppLockerLogs|Find-PSScriptsInPSAppLog|Find-RDPClientConnections|Get-SystemDNSServer|Invoke-Paranoia|Invoke-WinEnum{|Get-SPN|Invoke-ARPScan|Invoke-Portscan|Invoke-ReverseDNSLookup|Invoke-SMBScanner|New-InMemoryModule|Add-Win32Type|Export-PowerViewCSV|Get-MacAttribute|Copy-ClonedFile|Get-IPAddress|Convert-NameToSid|Convert-SidToName|Convert-NT4toCanonical|Get-Proxy|Get-PathAcl|Get-NameField|Convert-LDAPProperty|Get-NetDomainController|Add-NetUser|Add-NetGroupUser|Get-UserProperty|Find-UserField|Get-UserEvent|Get-ObjectAcl|Add-ObjectAcl|Invoke-ACLScanner|Get-GUIDMap|Get-ADObject|Set-ADObject|Get-ComputerProperty|Find-ComputerField|Get-NetOU|Get-NetSite|Get-NetSubnet|Get-DomainSID|Get-NetGroup|Get-NetFileServer|SplitPath|Get-DFSshare|Get-DFSshareV1|Get-DFSshareV2|Get-GptTmpl|Get-GroupsXML|Get-NetGPO|Get-NetGPOGroup|Find-GPOLocation|Find-GPOComputerAdmin|Get-DomainPolicy|Get-NetLocalGroup|Get-NetShare|Get-NetLoggedon|Get-NetSession|Get-NetRDPSession|Invoke-CheckLocalAdminAccess|Get-LastLoggedOn|Get-NetProcess|Find-InterestingFile|Invoke-CheckWrite|Invoke-UserHunter|Invoke-StealthUserHunter|Invoke-ProcessHunter|Invoke-EventHunter|Invoke-ShareFinder|Invoke-FileFinder|Find-LocalAdminAccess|Get-ExploitableSystem|Invoke-EnumerateLocalAdmin|Get-NetDomainTrust|Get-NetForestTrust|Find-ForeignUser|Find-ForeignGroup|Invoke-MapDomainTrust|Get-Hex|Create-RemoteThread|Get-FoxDump|Decrypt-CipherText|Get-Screenshot|Start-HTTP-Server|Local:Invoke-CreateRemoteThread|Local:Get-Win32Functions|Local:Inject-NetRipper|GetCommandLine|ElevatePrivs|Get-RegKeyClass|Get-BootKey|Get-HBootKey|Get-UserName|Get-UserHashes|DecryptHashes|DecryptSingleHash|Get-UserKeys|DumpHashes|Enable-SeAssignPrimaryTokenPrivilege|Enable-Privilege|Set-DesktopACLs|Set-DesktopACLToAllowEveryone|Get-PrimaryToken|Get-ThreadToken|Get-TokenInformation|Get-UniqueTokens|Find-GPOLocation|Find-GPOComputerAdmin|Get-DomainPolicy|Get-NetLocalGroup|Get-NetShare|Get-NetLoggedon|Get-NetSession|Get-NetRDPSession|Invoke-CheckLocalAdminAccess|Get-LastLoggedOn|Get-NetProcess|Find-InterestingFile|Invoke-CheckWrite|Invoke-UserHunter|Invoke-StealthUserHunter|Invoke-ProcessHunter|Invoke-EventHunter|Invoke-ShareFinder|Invoke-FileFinder|Find-LocalAdminAccess|Get-ExploitableSystem|Invoke-EnumerateLocalAdmin|Get-NetDomainTrust|Get-NetForestTrust|Find-ForeignUser|Find-ForeignGroup|Invoke-MapDomainTrust|Get-Hex|Create-RemoteThread|Get-FoxDump|Decrypt-CipherText|Get-Screenshot|Start-HTTP-Server|Local:Invoke-CreateRemoteThread|Local:Get-Win32Functions|Local:Inject-NetRipper|GetCommandLine|ElevatePrivs|Get-RegKeyClass|Get-BootKey|Get-HBootKey|Get-UserName|Get-UserHashes|DecryptHashes|DecryptSingleHash|Get-UserKeys|DumpHashes|Enable-SeAssignPrimaryTokenPrivilege|Enable-Privilege|Set-DesktopACLs|Set-DesktopACLToAllowEveryone|Get-PrimaryToken|Get-ThreadToken|Get-TokenInformation|Get-UniqueTokens|Invoke-ImpersonateUser|Create-ProcessWithToken|Free-AllTokens|Enum-AllTokens|Invoke-RevertToSelf|Set-Speaker(\\\\$Volume){\\\\$wshShell|Local:Get-RandomString|Local:Invoke-PsExecCmd|Get-GPPPassword|Local:Inject-BypassStuff|Local:Invoke-CopyFile\\\\(\\\\$sSource,|ind-Fruit|New-IPv4Range|New-IPv4RangeFromCIDR|Parse-Hosts|Parse-ILHosts|Exclude-Hosts|Get-TopPort|Parse-Ports|Parse-IpPorts|Remove-Ports|Write-PortscanOut|Convert-SwitchtoBool|Get-ForeignUser|Get-ForeignGroup\\\";\\nlet ProcessCreationEvents=() {\\nlet processEvents=SecurityEvent\\n| where EventID==4688\\n| where isnotempty(CommandLine)\\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, FileName = Process, CommandLine, ParentProcessName;\\nprocessEvents};\\nlet decodedPS = ProcessCreationEvents\\n| where TimeGenerated >= ago(timeframe) \\n| where CommandLine contains \\\" -encodedCommand\\\"\\n| parse kind=regex flags=i CommandLine with * \\\"-EncodedCommand \\\" encodedCommand\\n| project StartTimeUtc = TimeGenerated, encodedCommand = tostring(split(encodedCommand, ' ')[0]), CommandLine\\n// Note: currently the base64_decodestring function is limited to supporting UTF8\\n| extend decodedCommand = translate('\\\\0','', base64_decodestring(substring(encodedCommand, 0, strlen(encodedCommand) -  (strlen(encodedCommand) %8)))), encodedCommand, CommandLine , strlen(encodedCommand);\\n(decodedPS\\n| union \\n(ProcessCreationEvents\\n| where TimeGenerated >= ago(timeframe)\\n| where FileName in~ (\\\"powershell.exe\\\",\\\"powershell_ise.exe\\\")\\n| where CommandLine !contains \\\"-encodedcommand\\\")\\n| extend StartTimeUtc = TimeGenerated\\n)\\n| where CommandLine matches regex regexEmpire\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Powershell Empire cmdlets seen in command line\",\r\n        \"description\": \"Identifies instances of PowerShell Empire cmdlets in powershell process command line data.\",\r\n        \"tactics\": [\r\n          \"Execution\",\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-01-25T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/d6491be0-ab2d-439d-95d6-ad8ea39277c5\",\r\n      \"name\": \"d6491be0-ab2d-439d-95d6-ad8ea39277c5\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet SensitiveOperationList = dynamic(\\n[\\\"VaultDelete\\\", \\\"KeyDelete\\\", \\\"SecretDelete\\\", \\\"SecretPurge\\\", \\\"KeyPurge\\\", \\\"SecretBackup\\\", \\\"KeyBackup\\\"]);\\nAzureDiagnostics\\n| where TimeGenerated > ago(timeframe)\\n| extend ResultType = columnifexists(\\\"ResultType\\\", \\\"NoResultType\\\")\\n| extend requestUri_s = columnifexists(\\\"requestUri_s\\\", \\\"None\\\"), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(\\\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\\\", \\\"None\\\")\\n| extend id_s = columnifexists(\\\"id_s\\\", \\\"None\\\"), CallerIPAddress = columnifexists(\\\"CallerIPAddress\\\", \\\"None\\\"), clientInfo_s = columnifexists(\\\"clientInfo_s\\\", \\\"None\\\")\\n| where ResultType !~ \\\"None\\\" and isnotempty(ResultType)\\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ \\\"None\\\" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\\n| where id_s !~ \\\"None\\\" and isnotempty(id_s)\\n| where CallerIPAddress !~ \\\"None\\\" and isnotempty(CallerIPAddress)\\n| where clientInfo_s !~ \\\"None\\\" and isnotempty(clientInfo_s)\\n| where requestUri_s !~ \\\"None\\\" and isnotempty(requestUri_s)\\n| where ResourceType =~ \\\"VAULTS\\\" and ResultType =~ \\\"Success\\\" \\n| where OperationName in~ (SensitiveOperationList)  \\n| summarize EventCount=count(), StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated), TimeTriggered=makelist(TimeGenerated),OperationNameList=make_set(OperationName), RequestURLList=make_set(requestUri_s), CallerIPList = make_set(CallerIPAddress),  CallerIPMax= arg_max(CallerIPAddress,*) by ResourceType, ResultType, Resource, id_s, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, clientInfo_s\\n| extend timestamp = StartTimeUtc, IPCustomEntity = CallerIPMax, AccountCustomEntity = identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Sensitive Azure Key Vault operations\",\r\n        \"description\": \"Identifies when sensitive Azure Key Vault operations are used. This includes: VaultDelete, KeyDelete, KeyDecrypt, SecretDelete, SecretPurge, KeyPurge, SecretBackup, KeyBackup. \\nAny Backup operations should match with expected scheduled backup activity.\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-01T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"WAF\",\r\n            \"dataTypes\": [\r\n              \"AzureDiagnostics\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/155f40c6-610d-497d-85fc-3cf06ec13256\",\r\n      \"name\": \"155f40c6-610d-497d-85fc-3cf06ec13256\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let timeframe = 1d;\\nlet DomainNames = dynamic([\\\"yahoo-verification.org\\\",\\\"support-servics.com\\\",\\\"verification-live.com\\\",\\\"com-mailbox.com\\\",\\\"com-myaccuants.com\\\",\\\"notification-accountservice.com\\\",\\n\\\"accounts-web-mail.com\\\",\\\"customer-certificate.com\\\",\\\"session-users-activities.com\\\",\\\"user-profile-credentials.com\\\",\\\"verify-linke.com\\\",\\\"support-servics.net\\\",\\\"verify-linkedin.net\\\", \\n\\\"yahoo-verification.net\\\",\\\"yahoo-verify.net\\\",\\\"outlook-verify.net\\\",\\\"com-users.net\\\",\\\"verifiy-account.net\\\",\\\"te1egram.net\\\",\\\"account-verifiy.net\\\",\\\"myaccount-services.net\\\",\\n\\\"com-identifier-servicelog.name\\\",\\\"microsoft-update.bid\\\",\\\"outlook-livecom.bid\\\",\\\"update-microsoft.bid\\\",\\\"documentsfilesharing.cloud\\\",\\\"com-microsoftonline.club\\\",\\n\\\"confirm-session-identifier.info\\\",\\\"session-management.info\\\",\\\"confirmation-service.info\\\",\\\"document-share.info\\\",\\\"broadcast-news.info\\\",\\\"customize-identity.info\\\",\\\"webemail.info\\\",\\n\\\"com-identifier-servicelog.info\\\",\\\"documentsharing.info\\\",\\\"notification-accountservice.info\\\",\\\"identifier-activities.info\\\",\\\"documentofficupdate.info\\\",\\\"recoveryusercustomer.info\\\",\\n\\\"serverbroadcast.info\\\",\\\"account-profile-users.info\\\",\\\"account-service-management.info\\\",\\\"accounts-manager.info\\\",\\\"activity-confirmation-service.info\\\",\\\"com-accountidentifier.info\\\",\\n\\\"com-privacy-help.info\\\",\\\"com-sessionidentifier.info\\\",\\\"com-useraccount.info\\\",\\\"confirmation-users-service.info\\\",\\\"confirm-identity.info\\\",\\\"confirm-session-identification.info\\\",\\n\\\"continue-session-identifier.info\\\",\\\"customer-recovery.info\\\",\\\"customers-activities.info\\\",\\\"elitemaildelivery.info\\\",\\\"email-delivery.info\\\",\\\"identify-user-session.info\\\",\\n\\\"message-serviceprovider.info\\\",\\\"notificationapp.info\\\",\\\"notification-manager.info\\\",\\\"recognized-activity.info\\\",\\\"recover-customers-service.info\\\",\\\"recovery-session-change.info\\\",\\n\\\"service-recovery-session.info\\\",\\\"service-session-continue.info\\\",\\\"session-mail-customers.info\\\",\\\"session-managment.info\\\",\\\"session-verify-user.info\\\",\\\"shop-sellwear.info\\\",\\n\\\"supportmailservice.info\\\",\\\"terms-service-notification.info\\\",\\\"user-activity-issues.info\\\",\\\"useridentity-confirm.info\\\",\\\"users-issue-services.info\\\",\\\"verify-user-session.info\\\",\\n\\\"login-gov.info\\\",\\\"notification-signal-agnecy.info\\\",\\\"notifications-center.info\\\",\\\"identifier-services-sessions.info\\\",\\\"customers-manager.info\\\",\\\"session-manager.info\\\",\\n\\\"customer-managers.info\\\",\\\"confirmation-recovery-options.info\\\",\\\"service-session-confirm.info\\\",\\\"session-recovery-options.info\\\",\\\"services-session-confirmation.info\\\",\\n\\\"notification-managers.info\\\",\\\"activities-services-notification.info\\\",\\\"activities-recovery-options.info\\\",\\\"activity-session-recovery.info\\\",\\\"customers-services.info\\\",\\n\\\"sessions-notification.info\\\",\\\"download-teamspeak.info\\\",\\\"services-issue-notification.info\\\",\\\"microsoft-upgrade.mobi\\\",\\\"broadcastnews.pro\\\",\\\"mobile-messengerplus.network\\\"]);\\nlet IPList = dynamic([\\\"51.91.200.147\\\"]);\\nlet IPRegex = '[0-9]{1,3}\\\\\\\\.[0-9]{1,3}\\\\\\\\.[0-9]{1,3}\\\\\\\\.[0-9]{1,3}';\\n(union isfuzzy=true\\n(CommonSecurityLog \\n| where TimeGenerated >= ago(timeframe)\\n| parse Message with * '(' DNSName ')' * \\n| extend MessageIP = extract(IPRegex, 0, Message)\\n| extend RequestURLIP = extract(IPRegex, 0, Message)\\n| where (isnotempty(SourceIP) and SourceIP in (IPList)) or (isnotempty(DestinationIP) and DestinationIP in (IPList)) \\nor (isnotempty(DNSName) and DNSName in~ (DomainNames)) or (isnotempty(DestinationHostName) and DestinationHostName in~ (DomainNames)) or (isnotempty(RequestURL) and (RequestURL has_any (DomainNames) or RequestURLIP in (IPList))) \\nor (isnotempty(Message) and MessageIP in (IPList))\\n| extend IPMatch = case(SourceIP in (IPList), \\\"SourceIP\\\", DestinationIP in (IPList), \\\"DestinationIP\\\", MessageIP in (IPList), \\\"Message\\\", RequestURLIP in (IPList), \\\"RequestUrl\\\", \\\"NoMatch\\\") \\n| extend timestamp = TimeGenerated , IPCustomEntity = case(IPMatch == \\\"SourceIP\\\", SourceIP, IPMatch == \\\"DestinationIP\\\", DestinationIP,IPMatch == \\\"Message\\\", MessageIP,\\nIPMatch == \\\"RequestUrl\\\", RequestURLIP,\\\"NoMatch\\\"), Account = SourceUserID, Host = DeviceName\\n),\\n(DnsEvents \\n| where TimeGenerated >= ago(timeframe) \\n| extend DestinationIPAddress = IPAddresses, DNSName = Name, Host = Computer\\n| where  DestinationIPAddress in (IPList) or DNSName in~ (DomainNames) \\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host),\\n(VMConnection \\n| where TimeGenerated >= ago(timeframe) \\n| parse RemoteDnsCanonicalNames with * '[\\\"' DNSName '\\\"]' *\\n| where isnotempty(SourceIP) or isnotempty(DestinationIP) or isnotempty(DNSName)\\n| where SourceIP in (IPList) or DestinationIP in (IPList) or DNSName in~ (DomainNames)\\n| extend IPMatch = case( SourceIP in (IPList), \\\"SourceIP\\\", DestinationIP in (IPList), \\\"DestinationIP\\\", \\\"None\\\") \\n| extend timestamp = TimeGenerated , IPCustomEntity = case(IPMatch == \\\"SourceIP\\\", SourceIP, IPMatch == \\\"DestinationIP\\\", DestinationIP, \\\"None\\\"), Host = Computer),\\n(OfficeActivity\\n| where TimeGenerated >= ago(timeframe)\\n| extend SourceIPAddress = ClientIP, Account = UserId\\n| where  SourceIPAddress in (IPList)\\n| extend timestamp = TimeGenerated , IPCustomEntity = SourceIPAddress , AccountCustomEntity = Account )\\n)\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Known Phosphorus group domains/IP\",\r\n        \"description\": \"Matches domain name IOCs related to Phosphorus group activity with CommonSecurityLog, DnsEvents, OfficeActivity and VMConnection dataTypes.\\nReferences: https://blogs.microsoft.com/on-the-issues/2019/03/27/new-steps-to-protect-customers-from-hacking/.\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-10-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(VMInsights)\",\r\n            \"dataTypes\": [\r\n              \"VMConnection\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 1\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/4d500e6d-c984-43a3-9f39-7edec8dcc04d\",\r\n      \"name\": \"4d500e6d-c984-43a3-9f39-7edec8dcc04d\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeRange = 1d;\\nlet scriptExtensions = dynamic([\\\".php\\\", \\\".aspx\\\", \\\".asp\\\", \\\".cfml\\\"]);\\n//The number of URI's seen to be suspicious, higher = less likely to be suspicious\\nlet uriThreshold = 1;\\nCommonSecurityLog\\n| where TimeGenerated >= ago(timeRange)\\n// Only look at connections that were allowed through the web proxy\\n| where DeviceVendor =~ \\\"Zscaler\\\" and DeviceAction =~ \\\"Allowed\\\"\\n// Only look where some data was exchanged.\\n| where SentBytes > 0 and ReceivedBytes > 0\\n// Extract the Domain\\n| extend Domain = iff(countof(DestinationHostName,'.') >= 2, strcat(split(DestinationHostName,'.')[-2], '.',split(DestinationHostName,'.')[-1]), DestinationHostName)\\n| extend GetData=iff(RequestURL == \\\"?\\\", 1, 0)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), makelist(RequestURL), makelist(DestinationIP), makelist(SourceIP), numOfConnections = count(), make_set(RequestMethod), max(GetData), max(RequestContext) by Domain\\n// Determine the number of URIs that have been visited for the domain\\n| extend destinationURI = arraylength(list_RequestURL)\\n| where destinationURI <= uriThreshold\\n| where tostring(list_RequestURL) has_any(scriptExtensions)\\n//Remove matches with referer\\n| where max_RequestContext == \\\"\\\"\\n//Keep requests where data was trasferred either in a GET with parameters or a POST\\n| where set_RequestMethod in~ (\\\"POST\\\") or max_GetData == 1\\n//Defeat email click tracking, may increase FN's while decreasing FP's\\n| where list_RequestURL !has \\\"click\\\" and set_RequestMethod !has \\\"GET\\\"\\n| mvexpand list_RequestURL, list_DestinationIP\\n| extend RequestURL = tostring(list_RequestURL), DestinationIP = tostring(list_DestinationIP), ClientIP = tostring(list_SourceIP)\\n//Extend custom entitites for incidents\\n| extend timestamp = StartTimeUtc, IPCustomEntity = DestinationIP\\n| project-away list_RequestURL, list_DestinationIP, list_SourceIP, destinationURI, Domain, StartTimeUtc, EndTimeUtc, max_GetData, max_RequestContext\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Request for single resource on domain\",\r\n        \"description\": \"This will look for connections to a domain where only a single file is requested, this is unusual as most modern web applications require additional recources. This type of activity is often assocaited with malware beaconing or tracking URL's delivered in emails. Developed for Zscaler but applicable to any outbound web logging.\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-03-17T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Zscaler\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/3255ec41-6bd6-4f35-84b1-c032b18bbfcb\",\r\n      \"name\": \"3255ec41-6bd6-4f35-84b1-c032b18bbfcb\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let starttime = 1d;\\nlet TimeDeltaThresholdInSeconds = 60; // we ignore beacons diffs that fall below this threshold \\nlet TotalBeaconsThreshold = 4; // minimum number of beacons required in a session to surface a row\\nlet JitterTolerance = 0.2; // tolerance to jitter, e.g. - 0.2 = 20% jitter is tolerated either side of the periodicity\\nlet PrivateIPregex = @\\\"^127\\\\.|^10\\\\.|^172\\\\.1[6-9]\\\\.|^172\\\\.2[0-9]\\\\.|^172\\\\.3[0-1]\\\\.|^192\\\\.168\\\\.\\\"; // exclude destinations that fall into this category\\nCommonSecurityLog\\n| where DeviceVendor == \\\"Fortinet\\\"\\n| where TimeGenerated > ago(starttime)\\n// eliminate bad data\\n| where isnotempty(SourceIP) and isnotempty(DestinationIP) and SourceIP != \\\"0.0.0.0\\\"\\n// filter out deny, close, rst and SNMP to reduce data volume\\n| where DeviceAction !in (\\\"close\\\", \\\"client-rst\\\", \\\"server-rst\\\", \\\"deny\\\") and DestinationPort != 161\\n// map input fields\\n| project TimeGenerated , SourceIP, DestinationIP, DestinationPort, ReceivedBytes, SentBytes, DeviceAction \\n// where destination IPs are public\\n| extend DestinationIPType = iff(DestinationIP matches regex PrivateIPregex,\\\"private\\\" ,\\\"public\\\" )\\n| where DestinationIPType == \\\"public\\\"\\n// sort into source->destination 'sessions'\\n| sort by SourceIP asc, DestinationIP asc, DestinationPort asc, TimeGenerated asc\\n| serialize\\n// time diff the contact times between source and destination to get a list of deltas\\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(SourceIP, 1), nextDestIP = next(DestinationIP, 1), nextDestPort = next(DestinationPort, 1)\\n| extend TimeDeltainSeconds = datetime_diff(\\\"second\\\",nextTimeGenerated,TimeGenerated)\\n| where SourceIP == nextSourceIP and DestinationIP == nextDestIP and DestinationPort == nextDestPort\\n// remove small time deltas below the set threshold\\n| where TimeDeltainSeconds > TimeDeltaThresholdInSeconds\\n| project TimeGenerated, TimeDeltainSeconds, SourceIP, DestinationIP, DestinationPort, ReceivedBytes, SentBytes, DeviceAction \\n// summarize the deltas by source->destination\\n| summarize count(), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), sum(ReceivedBytes), sum(SentBytes), makelist(TimeDeltainSeconds), makeset(DeviceAction) by SourceIP, DestinationIP, DestinationPort\\n// get some statistical properties of the delta distribution and smooth any outliers (e.g. laptop shut overnight, working hours)\\n| extend series_stats(list_TimeDeltainSeconds), outliers=series_outliers(list_TimeDeltainSeconds)\\n// expand the deltas and the outliers\\n| mvexpand list_TimeDeltainSeconds to typeof(double), outliers to typeof(double)\\n// replace outliers with the average of the distribution\\n| extend list_TimeDeltainSeconds_normalized=iff(outliers > 1.5 or outliers < -1.5, series_stats_list_TimeDeltainSeconds_avg , list_TimeDeltainSeconds)\\n// summarize with the smoothed distribution\\n| summarize BeaconCount=count(), makelist(list_TimeDeltainSeconds), list_TimeDeltainSeconds_normalized=makelist(list_TimeDeltainSeconds_normalized), makeset(set_DeviceAction) by StartTime, EndTime, SourceIP, DestinationIP, DestinationPort, sum_ReceivedBytes, sum_SentBytes\\n// get stats on the smoothed distribution\\n| extend series_stats(list_TimeDeltainSeconds_normalized)\\n// match jitter tolerance on smoothed distrib\\n| extend MaxJitter = (series_stats_list_TimeDeltainSeconds_normalized_avg*JitterTolerance)\\n| where series_stats_list_TimeDeltainSeconds_normalized_stdev < MaxJitter\\n// where the minimum beacon threshold is satisfied and there was some data transfer\\n| where BeaconCount > TotalBeaconsThreshold and (sum_SentBytes > 0 or sum_ReceivedBytes > 0)\\n// final projection\\n| project StartTime, EndTime, SourceIP, DestinationIP, DestinationPort, BeaconCount, TimeDeltasInSeconds=list_list_TimeDeltainSeconds, Periodicity=series_stats_list_TimeDeltainSeconds_normalized_avg, ReceivedBytes=sum_ReceivedBytes, SentBytes=sum_SentBytes, Actions=set_set_DeviceAction\\n// where periodicity is order of magnitude larger than time delta threshold (eliminates FPs whose periodicity is close to the values we ignored)\\n| where Periodicity >= (10*TimeDeltaThresholdInSeconds)\\n| extend timestamp = StartTime, IPCustomEntity = DestinationIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Fortinet - Beacon pattern detected\",\r\n        \"description\": \"Identifies patterns in the time deltas of contacts between internal and external IPs in Fortinet network data that are consistent with beaconing.\\n Accounts for randomness (jitter) and seasonality such as working hours that may have been introduced into the beacon pattern.\\n The lookback is set to 1d, the minimum granularity in time deltas is set to 60 seconds and the minimum number of beacons required to emit a\\n detection is set to 4.\\n Increase the lookback period to capture beacons with larger periodicities.\\n The jitter tolerance is set to 0.2 - This means we account for an overall 20% deviation from the infered beacon periodicity. Seasonality is dealt with\\n automatically using series_outliers.\\n Note: In large environments it may be necessary to reduce the lookback period to get fast query times.\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-03-31T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Fortinet\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/884be6e7-e568-418e-9c12-89229865ffde\",\r\n      \"name\": \"884be6e7-e568-418e-9c12-89229865ffde\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet FailureThreshold = 15;\\nlet FailedLogins = Okta_CL\\n| where TimeGenerated > timeframe\\n| where eventType_s =~ \\\"user.session.start\\\" and outcome_reason_s =~ \\\"VERIFICATION_ERROR\\\"\\n| summarize count() by actor_alternateId_s, client_ipAddress_s, bin(TimeGenerated, 5m)\\n| where count_ > FailureThreshold\\n| project client_ipAddress_s, actor_alternateId_s;\\nOkta_CL\\n| where TimeGenerated > timeframe\\n| join kind=inner (FailedLogins) on client_ipAddress_s, actor_alternateId_s\\n| where eventType_s =~ \\\"user.session.start\\\" and outcome_reason_s =~ \\\"VERIFICATION_ERROR\\\"\\n| summarize count() by actor_alternateId_s, ClientIP = client_ipAddress_s, City = client_geographicalContext_city_s, Country = client_geographicalContext_country_s, published_t\\n| sort by published_t desc\\n| extend timestamp = published_t, IPCustomEntity = ClientIP, AccountCustomEntity = actor_alternateId_s\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Failed Logins from Unknown or Invalid User\",\r\n        \"description\": \"This query searches for numerous login attempts to the management console with an unknown or invalid user name\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-07-08T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"OktaSSO\",\r\n            \"dataTypes\": [\r\n              \"Okta_CL\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/39198934-62a0-4781-8416-a81265c03fd6\",\r\n      \"name\": \"39198934-62a0-4781-8416-a81265c03fd6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let detectionTime = 1d;\\nlet joinLookback = 14d;\\nAuditLogs\\n| where TimeGenerated > ago(detectionTime)\\n| where LoggedByService =~ \\\"Core Directory\\\"\\n| where Category =~ \\\"ApplicationManagement\\\"\\n| where OperationName =~ \\\"Consent to application\\\"\\n| where TargetResources has \\\"offline\\\"\\n| extend AppDisplayName = TargetResources.[0].displayName\\n| extend AppClientId = tolower(TargetResources.[0].id)\\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\\\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\\\"] with (format=\\\"csv\\\")))\\n| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue\\n| parse ConsentFull with * \\\"ConsentType: \\\" GrantConsentType \\\", Scope: \\\" GrantScope1 \\\"]\\\" *\\n| where ConsentFull contains \\\"user.read\\\" and ConsentFull contains \\\"offline_access\\\" and ConsentFull contains \\\"mail.readwrite\\\" and ConsentFull contains \\\"mail.send\\\" and ConsentFull contains \\\"files.read.all\\\"\\n| where GrantConsentType != \\\"AllPrincipals\\\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress)\\n| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)\\n| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ \\\"User-Agent\\\", AdditionalDetails[0].value, \\\"\\\")\\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\\n| join kind = leftouter (AuditLogs\\n| where TimeGenerated > ago(joinLookback)\\n| where LoggedByService =~ \\\"Core Directory\\\"\\n| where Category =~ \\\"ApplicationManagement\\\"\\n| where OperationName =~ \\\"Add service principal\\\"\\n| extend AppClientId = tolower(TargetResources[0].id)\\n| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has \\\"AddressType\\\", TargetResources[0].modifiedProperties[1].newValue, \\\"\\\")\\n| distinct AppClientId, tostring(AppReplyURLs)\\n)\\non AppClientId\\n| join kind = innerunique (AuditLogs\\n| where TimeGenerated > ago(joinLookback)\\n| where LoggedByService =~ \\\"Core Directory\\\"\\n| where Category =~ \\\"ApplicationManagement\\\"\\n| where OperationName =~ \\\"Add OAuth2PermissionGrant\\\" or OperationName =~ \\\"Add delegated permission grant\\\"\\n| extend GrantAuthentication = tostring(TargetResources[0].displayName)\\n| extend GrantOperation = OperationName\\n| project GrantAuthentication, GrantOperation, CorrelationId\\n) on CorrelationId\\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"displayName\": \"Suspicious application consent similar to PwnAuth\",\r\n        \"description\": \"This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the FireEye PwnAuth toolkit (https://github.com/fireeye/PwnAuth).\\nThe default permissions/scope for the PwnAuth toolkit are user.read, offline_access, mail.readwrite, mail.send, and files.read.all.\\nConsent to applications with these permissions should be rare, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\",\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-06-29T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-26T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2d8a60aa-c15e-442e-9ce3-ee924889d2a6\",\r\n      \"name\": \"2d8a60aa-c15e-442e-9ce3-ee924889d2a6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"eset_CL\\n| where event_type_s == \\\"Threat_Event\\\"\\n| extend HostCustomEntity = hostname_s, AccountCustomEntity = username_s, IPCustomEntity = ipv4_s\",\r\n        \"queryFrequency\": \"PT5M\",\r\n        \"queryPeriod\": \"PT5M\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Threats detected by Eset\",\r\n        \"description\": \"Escalates threats detected by Eset.\",\r\n        \"tactics\": [\r\n          \"Execution\",\r\n          \"CredentialAccess\",\r\n          \"PrivilegeEscalation\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-07-09T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"EsetSMC\",\r\n            \"dataTypes\": [\r\n              \"eset_CL\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a0907abe-6925-4d90-af2b-c7e89dc201a6\",\r\n      \"name\": \"a0907abe-6925-4d90-af2b-c7e89dc201a6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let starttime = 10d;\\nlet endtime = 1d;\\nlet threshold = 100;\\nlet nxDomainDnsEvents = DnsEvents \\n| where ResultCode == 3 \\n| where QueryType in (\\\"A\\\", \\\"AAAA\\\")\\n| where ipv4_is_match(\\\"127.0.0.1\\\", ClientIP) == False\\n| where Name !contains \\\"/\\\"\\n| where Name contains \\\".\\\";\\nnxDomainDnsEvents\\n| where TimeGenerated > ago(endtime)\\n| extend sld = tostring(split(Name, \\\".\\\")[-2])\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), dcount(sld) by ClientIP\\n| where dcount_sld > threshold\\n// Filter out previously seen IPs\\n| join kind=leftanti (nxDomainDnsEvents\\n    | where TimeGenerated between(ago(starttime)..ago(endtime))\\n    | extend sld = tostring(split(Name, \\\".\\\")[-2])\\n    | summarize dcount(sld) by ClientIP\\n    | where dcount_sld > threshold ) on ClientIP\\n// Pull out sample NXDomain responses for those remaining potentially infected IPs\\n| join kind = inner (nxDomainDnsEvents | summarize by Name, ClientIP) on ClientIP\\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), sampleNXDomainList=make_list(Name, 100)  by ClientIP, dcount_sld\\n| extend timestamp = StartTimeUtc, IPCustomEntity = ClientIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P10D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Potential DGA detected\",\r\n        \"description\": \"Identifies clients with a high NXDomain count which could be indicative of a DGA (cycling through possible C2 domains\\nwhere most C2s are not live). Alert is generated when a new IP address is seen (based on not being seen associated with \\nNXDomain records in prior 10-day baseline period).\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-07T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/75bf9902-0789-47c1-a5d8-f57046aa72df\",\r\n      \"name\": \"75bf9902-0789-47c1-a5d8-f57046aa72df\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nlet procList = dynamic([\\\"cmd.exe\\\",\\\"ftp.exe\\\",\\\"schtasks.exe\\\",\\\"powershell.exe\\\",\\\"rundll32.exe\\\",\\\"regsvr32.exe\\\",\\\"msiexec.exe\\\"]);\\nlet ProcessCreationEvents=() {\\nlet processEvents=SecurityEvent\\n| where EventID==4688\\n| where isnotempty(CommandLine)\\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, NewProcessName,\\nFileName = Process, CommandLine,  ParentProcessName;\\nprocessEvents};\\nProcessCreationEvents \\n| where TimeGenerated >= ago(timeframe)\\n| where FileName in~ (procList)\\n| where CommandLine contains \\\":\\\\\\\\recycler\\\"\\n| project StartTimeUtc = TimeGenerated, Computer, Account, NewProcessName, FileName, CommandLine, ParentProcessName\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Malware in the recycle bin\",\r\n        \"description\": \"Identifies malware that has been hidden in the recycle bin.\\nReferences: https://azure.microsoft.com/blog/how-azure-security-center-helps-reveal-a-cyberattack/.\",\r\n        \"tactics\": [\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2018-09-14T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/3174a9ec-d0ad-4152-8307-94ed04fa450a\",\r\n      \"name\": \"3174a9ec-d0ad-4152-8307-94ed04fa450a\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let timeframe = 1d;\\nlet SHA256Hash = \\\"1174fd03271f80f5e2a6435c72bdd0272a6e3a37049f6190abf125b216a83471\\\" ;\\n(union isfuzzy=true\\n(CommonSecurityLog \\n| where TimeGenerated >= ago(timeframe) \\n| parse Message with * '(' DNSName ')' * \\n| where isnotempty(FileHash)\\n| where FileHash in (SHA256Hash) \\n| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP\\n),\\n(Event\\n//This query uses sysmon data depending on table name used this may need updataing\\n| where TimeGenerated >= ago(3d)\\n| where Source == \\\"Microsoft-Windows-Sysmon\\\"\\n| extend EvData = parse_xml(EventData)\\n| extend EventDetail = EvData.DataItem.EventData.Data\\n| extend Hashes = EventDetail.[16].[\\\"#text\\\"]\\n| parse Hashes with * 'SHA256=' SHA265 ',' * \\n| where isnotempty(Hashes)\\n| where Hashes in (SHA256Hash) \\n| extend Account = UserName\\n)\\n)\\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Known ZINC related maldoc hash\",\r\n        \"description\": \"Document hash used by ZINC in highly targeted spear phishing campaign.\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\",\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-10-30T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/40ba9493-4183-4eee-974f-87fe39c8f267\",\r\n      \"name\": \"40ba9493-4183-4eee-974f-87fe39c8f267\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"MicrosoftSecurityIncidentCreation\",\r\n      \"properties\": {\r\n        \"productFilter\": \"Azure Advanced Threat Protection\",\r\n        \"displayName\": \"Create incidents based on Azure Advanced Threat Protection alerts\",\r\n        \"description\": \"Create incidents based on all alerts generated in Azure Advanced Threat Protection\",\r\n        \"lastUpdatedDateUTC\": \"2019-07-16T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-16T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureAdvancedThreatProtection\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert (AATP)\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/78422ef2-62bf-48ca-9bab-72c69818a425\",\r\n      \"name\": \"78422ef2-62bf-48ca-9bab-72c69818a425\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let endtime = 1d;\\nlet starttime = 8d;\\nlet threshold = 2.0;\\nSecurityEvent\\n| where TimeGenerated >= ago(endtime) \\n| where EventID == 4624 and LogonType == 10\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ComputerCountToday = dcount(Computer), ComputerSet = makeset(Computer), ProcessSet = makeset(ProcessName)  \\nby Account, IpAddress, AccountType, Activity, LogonTypeName\\n| join kind=inner (\\nSecurityEvent\\n| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime) \\n| where EventID == 4624 and LogonType == 10\\n| summarize ComputerCountPrev7Days = dcount(Computer) by Account, IpAddress\\n) on Account, IpAddress\\n| extend Ratio = ComputerCountToday/(ComputerCountPrev7Days*1.0)\\n// Where the ratio of today to previous 7 days is more than double.\\n| where Ratio > threshold\\n| project StartTimeUtc, EndTimeUtc, Account, IpAddress, ComputerSet, ComputerCountToday, ComputerCountPrev7Days, Ratio, AccountType, Activity, LogonTypeName, ProcessSet\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, IPCustomEntity = IpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P8D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Multiple RDP connections from Single System\",\r\n        \"description\": \"Identifies when an RDP connection is made to multiple systems and above the normal for the previous 7 days.  \\nConnections from the same system with the same account within the same day.\\nRDP connections are indicated by the EventID 4624 with LogonType = 10\",\r\n        \"tactics\": [\r\n          \"LateralMovement\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-10-21T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/06a9b845-6a95-4432-a78b-83919b28c375\",\r\n      \"name\": \"06a9b845-6a95-4432-a78b-83919b28c375\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let starttime = 14d;\\nlet endtime = 1d;\\nlet timeframe = 1h;\\nlet scorethreshold = 5;\\nlet percentotalthreshold = 25;\\nlet TimeSeriesData = CommonSecurityLog \\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\\n| project TimeGenerated,SourceIP, DestinationIP, DeviceVendor\\n| make-series Total=count() on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor;\\n//Filtering specific records associated with spikes as outliers\\nlet TimeSeriesAlerts=TimeSeriesData\\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, scorethreshold, -1, 'linefit')\\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\\n| where anomalies > 0 | extend score = round(score,2), AnomalyHour = TimeGenerated\\n| project DeviceVendor,AnomalyHour, TimeGenerated, Total, baseline, anomalies, score;\\n//Join anomalies with Base Data to popalate associated records for investigation - Results sorted by score in descending order \\nTimeSeriesAlerts \\n| join (\\n    CommonSecurityLog \\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\\n| summarize HourlyCount = count(), TimeGeneratedMax = arg_max(TimeGenerated, *), DestinationIPlist = make_set(DestinationIP), DestinationPortlist = make_set(DestinationPort) by DeviceVendor, SourceIP, TimeGeneratedHour= bin(TimeGenerated, 1h)\\n| extend AnomalyHour = TimeGeneratedHour\\n) on AnomalyHour, DeviceVendor \\n| extend PercentTotal = round((HourlyCount / Total) * 100, 3)\\n| where PercentTotal > percentotalthreshold\\n| project DeviceVendor , AnomalyHour, TimeGeneratedMax, SourceIP, DestinationIPlist, DestinationPortlist, HourlyCount, PercentTotal, Total, baseline, score, anomalies\\n| summarize HourlyCount=sum(HourlyCount), StartTimeUtc=min(TimeGeneratedMax), EndTimeUtc=max(TimeGeneratedMax), SourceIPlist = make_set(SourceIP), SourceIPMax= arg_max(SourceIP, *), DestinationIPlist = make_set(DestinationIPlist), DestinationPortlist = make_set(DestinationPortlist) by DeviceVendor , AnomalyHour, Total, baseline, score, anomalies\\n| project DeviceVendor , AnomalyHour, EndTimeUtc, SourceIPMax ,SourceIPlist, DestinationIPlist, DestinationPortlist, HourlyCount, Total, baseline, score, anomalies\\n| extend timestamp= EndTimeUtc , IPCustomEntity = SourceIPMax\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 3,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Time series anomaly detection for total volume of traffic\",\r\n        \"description\": \"Identifies anamalous spikes in network traffic logs as compared to baseline or normal historical patterns. \\nThe query leverages a KQL built-in anomaly detection algorithm to find large deviations from baseline patterns. \\nSudden increases in network traffic volume may be an indication of data exfiltration attempts and should be investigated.\\nThe higher the score, the further it is from the baseline value.\\nThe output is aggregated to provide summary view of unique source IP to destination IP address and port traffic observed in the flagged anomaly hour. \\nThe source IP addresses which were sending less than percentotalthreshold of the total traffic have been exluded whose value can be adjusted as needed .\\nYou may have to run queries for individual source IP addresses from SourceIPlist to determine if anything looks suspicious\",\r\n        \"tactics\": [\r\n          \"Exfiltration\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-05-07T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Barracuda\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CEF\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CheckPoint\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"F5\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Fortinet\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/8ee967a2-a645-4832-85f4-72b635bcb3a6\",\r\n      \"name\": \"8ee967a2-a645-4832-85f4-72b635bcb3a6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\n//Adjust this threshold to fit the environment\\nlet signin_threshold = 5;\\n//Make a list of all IPs with failed signins to AAD above our threshold\\nlet suspicious_signins =\\nSigninLogs\\n| where TimeGenerated >= ago(timeframe)\\n| where ResultType !in (\\\"0\\\", \\\"50125\\\", \\\"50140\\\")\\n| where IPAddress != \\\"127.0.0.1\\\"\\n| summarize count() by IPAddress\\n| where count_ > signin_threshold\\n| summarize make_list(IPAddress);\\n//See if any of these IPs have sucessfully logged into *nix hosts\\nlet linux_logons =\\nSyslog\\n| where TimeGenerated >= ago(timeframe)\\n| where Facility contains \\\"auth\\\" and ProcessName != \\\"sudo\\\"\\n| where SyslogMessage has \\\"Accepted\\\"\\n| extend SourceIP = extract(\\\"(([0-9]{1,3})\\\\\\\\.([0-9]{1,3})\\\\\\\\.([0-9]{1,3})\\\\\\\\.(([0-9]{1,3})))\\\",1,SyslogMessage)\\n| where SourceIP in (suspicious_signins)\\n| extend Reason = \\\"Multiple failed AAD logins from IP address\\\"\\n| project TimeGenerated, Computer, HostIP, IpAddress = SourceIP, SyslogMessage, Facility, ProcessName, Reason;\\n//See if any of these IPs have sucessfully logged into Windows hosts\\nlet win_logons =\\nSecurityEvent\\n| where TimeGenerated >= ago(timeframe)\\n| where EventID == 4624\\n| where LogonType in (10, 7, 3)\\n| where IpAddress != \\\"-\\\"\\n| where IpAddress in (suspicious_signins)\\n| extend Reason = \\\"Multiple failed AAD logins from IP address\\\"\\n| project TimeGenerated, Account, AccountType, Computer, Activity, EventID, LogonProcessName, IpAddress, LogonTypeName, TargetUserSid, Reason;\\nunion isfuzzy=true linux_logons,win_logons\\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, IPCustomEntity = IpAddress, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Failed AzureAD logons but success logon to host\",\r\n        \"description\": \"Identifies a list of IP addresses with a minimum number (default of 5) of failed logon attempts to Azure Active Directory.\\nUses that list to identify any successful remote logons to hosts from these IPs within the same timeframe.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Syslog\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/15ae38a2-2e29-48f7-883f-863fb25a5a06\",\r\n      \"name\": \"15ae38a2-2e29-48f7-883f-863fb25a5a06\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let starttime = 8d;\\nlet endtime = 1d;\\nlet threshold = 10;\\nDnsEvents \\n| where TimeGenerated > ago(endtime)\\n| where Name contains \\\"in-addr.arpa\\\" \\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), dcount(Name) by ClientIP\\n| where dcount_Name > threshold\\n| project StartTimeUtc, EndTimeUtc, ClientIP , dcount_Name \\n| join kind=leftanti (DnsEvents \\n    | where TimeGenerated between(ago(starttime)..ago(endtime))\\n    | where Name contains \\\"in-addr.arpa\\\" \\n    | summarize dcount(Name) by ClientIP, bin(TimeGenerated, 1d)\\n    | where dcount_Name > threshold\\n    | project ClientIP , dcount_Name \\n) on ClientIP\\n| extend timestamp = StartTimeUtc, IPCustomEntity = ClientIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P8D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Rare client observed with high reverse DNS lookup count\",\r\n        \"description\": \"Identifies clients with a high reverse DNS counts which could be carrying out reconnaissance or discovery activity.\\nAlert is generated if the IP performing such reverse DNS lookups was not seen doing so in the preceding 7-day period.\",\r\n        \"tactics\": [\r\n          \"Discovery\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-07T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2954d424-f786-4677-9ffc-c24c44c6e7d5\",\r\n      \"name\": \"2954d424-f786-4677-9ffc-c24c44c6e7d5\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let timeframe = ago(3h);\\nlet threshold = 2;\\nOkta_CL\\n| where published_t >= timeframe\\n| where eventType_s =~ \\\"user.session.start\\\"\\n| where outcome_result_s =~ \\\"SUCCESS\\\"\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), NumOfCountries = dcount(client_geographicalContext_country_s) by actor_alternateId_s\\n| where NumOfCountries >= threshold\\n| extend timestamp = StartTime, AccountCustomEntity = actor_alternateId_s\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"User Login from Different Countries within 3 hours\",\r\n        \"description\": \"This query searches for successful user logins to the Okta Console from different countries within 3 hours\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-07-08T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"OktaSSO\",\r\n            \"dataTypes\": [\r\n              \"Okta_CL\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/8c2ef238-67a0-497d-b1dd-5c8a0f533e25\",\r\n      \"name\": \"8c2ef238-67a0-497d-b1dd-5c8a0f533e25\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet EventNameList = dynamic([\\\"AuthorizeDBSecurityGroupIngress\\\",\\\"CreateDBSecurityGroup\\\",\\\"DeleteDBSecurityGroup\\\",\\\"RevokeDBSecurityGroupIngress\\\"]);\\nAWSCloudTrail\\n| where TimeGenerated > ago(timeframe)\\n| where EventName in~ (EventNameList)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Changes to internet facing AWS RDS Database instances\",\r\n        \"description\": \"Amazon Relational Database Service (RDS) is scalable relational database in the cloud. \\nIf your organization have one or more AWS RDS Databases running, monitoring changes to especially internet facing AWS RDS (Relational Database Service) \\nOnce alerts triggered, validate if changes observed are authorized and adhere to change control policy. \\nMore information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255\\nand RDS API Reference Docs: https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html\",\r\n        \"tactics\": [\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/f71aba3d-28fb-450b-b192-4e76a83015c8\",\r\n      \"name\": \"f71aba3d-28fb-450b-b192-4e76a83015c8\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Fusion\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"displayName\": \"Advanced Multistage Attack Detection\",\r\n        \"description\": \"Using Fusion technology based on machine learning, Azure Sentinel automatically detects multistage attacks by identifying combinations of anomalous behaviors and suspicious activities observed at various stages of the kill chain. On the basis of these discoveries, Azure Sentinel generates incidents that would otherwise be very difficult to catch. By design, these incidents are low-volume, high-fidelity, and high-severity, which is why this detection is turned ON by default.\\n\\nThere are a total of 70 Fusion incident types detected by Azure Sentinel.\\n- 65 of these show the combination of suspicious Azure Active Directory sign-in events followed by anomalous Office 365 activity. Out of these 65, 30 are in public preview. \\n- The remaining five incident types show the combination of anomalous signals from Microsoft Defender Advanced Threat Protection and from Palo Alto Networks firewalls. These five types are all in public preview.\\n\\nTo detect these multistage attacks, the following data connectors must be configured:\\n- Azure Active Directory Identity Protection.\\n- Microsoft Cloud App Security.\\n- Microsoft Defender Advanced Threat Protection.\\n- Palo Alto Networks.\\n\\nFor a full list and description of each scenario that is supported for these multistage attacks, go to https://aka.ms/SentinelFusion.\",\r\n        \"tactics\": [\r\n          \"Collection\",\r\n          \"CommandAndControl\",\r\n          \"DefenseEvasion\",\r\n          \"Discovery\",\r\n          \"Execution\",\r\n          \"Exfiltration\",\r\n          \"Impact\",\r\n          \"InitialAccess\",\r\n          \"LateralMovement\",\r\n          \"Persistence\",\r\n          \"PrivilegeEscalation\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-09-09T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-25T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/80733eb7-35b2-45b6-b2b8-3c51df258206\",\r\n      \"name\": \"80733eb7-35b2-45b6-b2b8-3c51df258206\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet DomainList = dynamic([\\\"monerohash.com\\\", \\\"do-dear.com\\\", \\\"xmrminerpro.com\\\", \\\"secumine.net\\\", \\\"xmrpool.com\\\", \\\"minexmr.org\\\", \\\"hashanywhere.com\\\", \\\"xmrget.com\\\", \\n\\\"mininglottery.eu\\\", \\\"minergate.com\\\", \\\"moriaxmr.com\\\", \\\"multipooler.com\\\", \\\"moneropools.com\\\", \\\"xmrpool.eu\\\", \\\"coolmining.club\\\", \\\"supportxmr.com\\\",\\n\\\"minexmr.com\\\", \\\"hashvault.pro\\\", \\\"xmrpool.net\\\", \\\"crypto-pool.fr\\\", \\\"xmr.pt\\\", \\\"miner.rocks\\\", \\\"walpool.com\\\", \\\"herominers.com\\\", \\\"gntl.co.uk\\\", \\\"semipool.com\\\", \\n\\\"coinfoundry.org\\\", \\\"cryptoknight.cc\\\", \\\"fairhash.org\\\", \\\"baikalmine.com\\\", \\\"tubepool.xyz\\\", \\\"fairpool.xyz\\\", \\\"asiapool.io\\\", \\\"coinpoolit.webhop.me\\\", \\\"nanopool.org\\\", \\n\\\"moneropool.com\\\", \\\"miner.center\\\", \\\"prohash.net\\\", \\\"poolto.be\\\", \\\"cryptoescrow.eu\\\", \\\"monerominers.net\\\", \\\"cryptonotepool.org\\\", \\\"extrmepool.org\\\", \\\"webcoin.me\\\", \\n\\\"kippo.eu\\\", \\\"hashinvest.ws\\\", \\\"monero.farm\\\", \\\"supportxmr.com\\\", \\\"xmrpool.eu\\\", \\\"linux-repository-updates.com\\\", \\\"1gh.com\\\", \\\"dwarfpool.com\\\", \\\"hash-to-coins.com\\\", \\n\\\"hashvault.pro\\\", \\\"pool-proxy.com\\\", \\\"hashfor.cash\\\", \\\"fairpool.cloud\\\", \\\"litecoinpool.org\\\", \\\"mineshaft.ml\\\", \\\"abcxyz.stream\\\", \\\"moneropool.ru\\\", \\\"cryptonotepool.org.uk\\\",\\n\\\"extremepool.org\\\", \\\"extremehash.com\\\", \\\"hashinvest.net\\\", \\\"unipool.pro\\\", \\\"crypto-pools.org\\\", \\\"monero.net\\\", \\\"backup-pool.com\\\", \\\"mooo.com\\\", \\\"freeyy.me\\\", \\\"cryptonight.net\\\",\\n\\\"shscrypto.net\\\"]);\\nSyslog\\n| where TimeGenerated >= ago(timeframe)\\n| where ProcessName contains \\\"squid\\\"\\n| extend URL = extract(\\\"(([A-Z]+ [a-z]{4,5}:\\\\\\\\/\\\\\\\\/)|[A-Z]+ )([^ :]*)\\\",3,SyslogMessage), \\n        SourceIP = extract(\\\"([0-9]+ )(([0-9]{1,3})\\\\\\\\.([0-9]{1,3})\\\\\\\\.([0-9]{1,3})\\\\\\\\.([0-9]{1,3}))\\\",2,SyslogMessage), \\n        Status = extract(\\\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\\\",1,SyslogMessage), \\n        HTTP_Status_Code = extract(\\\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\\\",8,SyslogMessage),\\n        User = extract(\\\"(CONNECT |GET )([^ ]* )([^ ]+)\\\",3,SyslogMessage),\\n        RemotePort = extract(\\\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\\\",4,SyslogMessage),\\n        Domain = extract(\\\"(([A-Z]+ [a-z]{4,5}:\\\\\\\\/\\\\\\\\/)|[A-Z]+ )([^ :\\\\\\\\/]*)\\\",3,SyslogMessage),\\n        Bytes = toint(extract(\\\"([A-Z]+\\\\\\\\/[0-9]{3} )([0-9]+)\\\",2,SyslogMessage)),\\n        contentType = extract(\\\"([a-z/]+$)\\\",1,SyslogMessage)\\n| extend TLD = extract(\\\"\\\\\\\\.[a-z]*$\\\",0,Domain)\\n| where HTTP_Status_Code == '200'\\n| where Domain contains \\\".\\\"\\n| where Domain has_any (DomainList)\\n| extend timestamp = TimeGenerated, URLCustomEntity = URL, IPCustomEntity = SourceIP, AccountCustomEntity = User\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Squid proxy events related to mining pools\",\r\n        \"description\": \"Checks for Squid proxy events in Syslog associated with common mining pools .This query presumes the default Squid log format is being used. \\n http://www.squid-cache.org/Doc/config/access_log/\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-12T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Syslog\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2b701288-b428-4fb8-805e-e4372c574786\",\r\n      \"name\": \"2b701288-b428-4fb8-805e-e4372c574786\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"//The bigger the window the better the data sample size, as we use IP prevalence, more sample data is better.\\nlet timeRange = 30d;\\n//The minimum number of countries that the account has been accessed from [default: 2]\\nlet minimumCountries = 2;\\n//The delta (%) between the largest in-use IP and the smallest [default: 90]\\nlet deltaThreshold = 95;\\n//The maximum (%) threshold that the country appears in login data [default: 10]\\nlet countryPrevalenceThreshold = 10;\\n//The time to project forward after the last login activity [default: 60min]\\nlet projectedEndTime = 60min; \\n//Get Teams successful signins globally\\nlet signinData =\\n  SigninLogs\\n  | where TimeGenerated >= ago(timeRange)\\n  | where AppDisplayName has \\\"Teams\\\"\\n  | where ConditionalAccessStatus =~ \\\"success\\\"\\n  | extend country = tostring(LocationDetails['countryOrRegion'])\\n  | where isnotempty(country) and isnotempty(IPAddress);\\n// Collect successful signins to teams\\nlet loginEvents = \\n  signinData\\n  | summarize count(), country=any(country), make_list(TimeGenerated) by IPAddress, UserPrincipalName;\\n//Calcualte delta between logins\\nlet loginDelta =\\n  loginEvents\\n  | summarize max(count_), min(count_) by UserPrincipalName\\n  | extend delta = toreal(max_count_ - min_count_) / max_count_ * 100\\n  | where delta >= deltaThreshold;\\n//Count number of countries used to sign in\\nlet countryCount =\\n  loginEvents\\n  | summarize Countries = dcount(country) by UserPrincipalName;\\n//Join delta and sign in counts to successful logins\\nloginDelta\\n| join kind=rightouter  (\\n  loginEvents\\n) on UserPrincipalName\\n| join kind=rightouter (\\n  countryCount\\n) on UserPrincipalName\\n//Check where the record meets the minimum required countries\\n| where Countries >= minimumCountries\\n| join kind=leftouter (\\n      signinData\\n      | summarize count() by country\\n      | join (\\n          //Now get the total number of logins from any country and join it to the previous count in a single table\\n          signinData\\n          | summarize count() by country\\n          | summarize sum(count_), make_list(country)\\n          | mv-expand list_country\\n          | extend country = tostring(list_country)\\n      ) on country\\n      | summarize by country, count_, sum_count_\\n      //Now calculate each countries prevalence within login events\\n      | extend prevalence = toreal(count_) / toreal(sum_count_) * 100\\n      | project-away sum_count_\\n      | order by prevalence\\n) on country\\n//The % that suspicious country is prevalent in data, this can be configured, less than 10% is uncommon\\n| where prevalence < countryPrevalenceThreshold\\n| where min_count_ == count_\\n//Login start and end times from the JSON object, this is the activity window the suspicious IP was active within\\n| extend EventTimes = list_TimeGenerated\\n| extend SuspiciousIP = IPAddress\\n| project UserPrincipalName, SuspiciousIP, UserIPDelta = delta, SuspiciousLoginCountry = country, SuspiciousCountryPrevalence = prevalence, EventTimes\\n//Teams join to collect operations the user account has performed within the given time range\\n| join kind=inner( \\n  TeamsData \\n  | where TimeGenerated >= ago(timeRange)\\n  | where Operation in~ (\\\"TeamsAdminAction\\\", \\\"MemberAdded\\\", \\\"MemberRemoved\\\", \\\"MemberRoleChanged\\\", \\\"AppInstalled\\\", \\\"BotAddedToTeam\\\")\\n  | project Operation, UserId=tolower(UserId), OperationTime=TimeGenerated\\n) on $left.UserPrincipalName == $right.UserId\\n| mv-expand StartTime = EventTimes\\n| extend StartTime = make_datetime(StartTime)\\n//The end time is projected 60 minutes forward, in case actions took place within the last hour of the final login for the suspicious IP\\n| extend ProjectedEndTime = make_datetime(StartTime + projectedEndTime)\\n//Limit to operations carried out by the user account in the timeframe the IP was active\\n| where OperationTime between (StartTime .. ProjectedEndTime)\\n| project UserPrincipalName, SuspiciousIP, StartTime, ProjectedEndTime, OperationTime, Operation, SuspiciousLoginCountry, SuspiciousCountryPrevalence\\n//Filter on suspicious actions\\n| extend activitySummary = pack(tostring(StartTime), pack(\\\"Operation\\\",tostring(Operation), \\\"OperationTime\\\", OperationTime))\\n| summarize make_bag(activitySummary) by UserPrincipalName, SuspiciousIP, SuspiciousLoginCountry, SuspiciousCountryPrevalence\\n| extend IPCustomEntity = SuspiciousIP, AccountCustomEntity = UserPrincipalName\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Anomalous login followed by Teams action\",\r\n        \"description\": \"Detects anomalous IP address usage by user accounts and then checks to see if a suspicious Teams action is performed.\\nQuery calculates IP usage Delta for each user account and selects accounts where a delta >= 90% is observed between the most and least used IP.\\nTo further reduce results the query performs a prevalence check on the lowest used IP's country, only keeping IP's where the country is unusual for the tenant (dynamic ranges)\\nFinally the user accounts activity within Teams logs is checked for suspicious commands (modifying user privileges or admin actions) during the period the suspicious IP was active.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-30T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/4acd3a04-2fad-4efc-8a4b-51476594cec4\",\r\n      \"name\": \"4acd3a04-2fad-4efc-8a4b-51476594cec4\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let triThreshold = 500;\\nlet startTime = 6h;\\nlet dgaLengthThreshold = 8;\\n// fetch the alexa top 1M domains\\nlet top1M =  (externaldata (Position:int, Domain:string)   [@\\\"http://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip\\\"]  with (format=\\\"csv\\\", zipPattern=\\\"*.csv\\\"));\\n// extract tri grams that are above our threshold - i.e. are common\\nlet triBaseline =   top1M\\n| extend Domain = tolower(extract(\\\"([^.]*).{0,7}$\\\", 1, Domain))\\n| extend AllTriGrams = array_concat(extract_all(\\\"(...)\\\", Domain), extract_all(\\\"(...)\\\", substring(Domain, 1)), extract_all(\\\"(...)\\\", substring(Domain, 2)))\\n| mvexpand Trigram=AllTriGrams\\n| summarize triCount=count() by tostring(Trigram)\\n| sort by triCount desc\\n| where triCount > triThreshold\\n| distinct Trigram;\\n// collect domain information from common security log, filter and extract the DGA candidate and its trigrams\\nlet allDataSummarized =   CommonSecurityLog\\n| where TimeGenerated > ago(startTime)\\n| where isnotempty(DestinationHostName)\\n| extend Name = tolower(DestinationHostName)\\n| distinct Name\\n| where Name has \\\".\\\"\\n| where Name !endswith \\\".home\\\" and Name !endswith \\\".lan\\\"\\n// extract DGA candidate\\n| extend DGADomain = extract(\\\"([^.]*).{0,7}$\\\", 1, Name)\\n| where strlen(DGADomain) > dgaLengthThreshold\\n// throw out domains with number in them\\n| where DGADomain matches regex \\\"^[A-Za-z]{0,}$\\\"\\n// extract the tri grams from summarized data\\n| extend AllTriGrams = array_concat(extract_all(\\\"(...)\\\", DGADomain), extract_all(\\\"(...)\\\", substring(DGADomain, 1)), extract_all(\\\"(...)\\\", substring(DGADomain, 2)));\\n// throw out domains that have repeating tri's and/or >=3 repeating letters\\nlet nonRepeatingTris =  allDataSummarized\\n| join kind=leftanti\\n(\\n    allDataSummarized\\n    | mvexpand AllTriGrams\\n    | summarize count() by tostring(AllTriGrams), DGADomain\\n    | where count_ > 1\\n    | distinct DGADomain\\n)\\non DGADomain;\\n// find domains that do not have a common tri in the baseline\\nlet dataWithRareTris =  nonRepeatingTris\\n| join kind=leftanti\\n(\\n    nonRepeatingTris\\n    | mvexpand AllTriGrams\\n    | extend Trigram = tostring(AllTriGrams)\\n    | distinct Trigram, DGADomain\\n    | join kind=inner\\n    (\\n        triBaseline\\n    )\\n    on Trigram\\n    | distinct DGADomain\\n)\\non DGADomain;\\ndataWithRareTris\\n// join DGAs back on connection data\\n| join kind=inner\\n(\\n    CommonSecurityLog\\n    | where TimeGenerated > ago(startTime)\\n    | where isnotempty(DestinationHostName)\\n    | extend DestinationHostName = tolower(DestinationHostName)\\n    | project-rename Name=DestinationHostName, DataSource=DeviceVendor\\n    | summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) by Name, SourceIP, DestinationIP, DataSource\\n)\\non Name\\n| project StartTime, EndTime, Name, DGADomain, SourceIP, DestinationIP, DataSource\\n| extend timestamp=StartTime, IPCustomEntity=SourceIP\",\r\n        \"queryFrequency\": \"PT6H\",\r\n        \"queryPeriod\": \"PT6H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Possible contact with a domain generated by a DGA\",\r\n        \"description\": \"Identifies contacts with domains names in CommonSecurityLog that might have been generated by a Domain Generation Algorithm (DGA). DGAs can be used\\nby malware to generate rendezvous points that are difficult to predict in advance. This detection uses the Alexa Top 1 million domain names to build a model\\nof what normal domains look like. It uses this to identify domains that may have been randomly generated by an algorithm.\\nThe triThreshold is set to 500 - increase this to report on domains that are less likely to have been randomly generated, decrease it for more likely.\\nThe start time and end time look back over 6 hours of data and the dgaLengthThreshold is set to 8 - meaning domains whose length is 8 or more are reported.\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-03-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Zscaler\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Barracuda\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CEF\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CheckPoint\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"F5\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Fortinet\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/7b907bf7-77d4-41d0-a208-5643ff75bf9a\",\r\n      \"name\": \"7b907bf7-77d4-41d0-a208-5643ff75bf9a\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nlet Keywords = dynamic([\\\"helpdesk\\\", \\\" alert\\\", \\\" suspicious\\\", \\\"fake\\\", \\\"malicious\\\", \\\"phishing\\\", \\\"spam\\\", \\\"do not click\\\", \\\"do not open\\\", \\\"hijacked\\\", \\\"Fatal\\\"]);\\nOfficeActivity\\n| where TimeGenerated >= ago(timeframe)\\n| where Operation =~ \\\"New-InboxRule\\\"\\n| where Parameters has \\\"Deleted Items\\\" or Parameters has \\\"Junk Email\\\" \\n| extend Events=todynamic(Parameters)\\n| parse Events  with * \\\"SubjectContainsWords\\\" SubjectContainsWords '}'*\\n| parse Events  with * \\\"BodyContainsWords\\\" BodyContainsWords '}'*\\n| parse Events  with * \\\"SubjectOrBodyContainsWords\\\" SubjectOrBodyContainsWords '}'*\\n| where SubjectContainsWords has_any (Keywords)\\n or BodyContainsWords has_any (Keywords)\\n or SubjectOrBodyContainsWords has_any (Keywords)\\n| extend ClientIPAddress = case( ClientIP has \\\".\\\", tostring(split(ClientIP,\\\":\\\")[0]), ClientIP has \\\"[\\\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\\\"]\\\")[0]))), ClientIP )\\n| extend Keyword = iff(isnotempty(SubjectContainsWords), SubjectContainsWords, (iff(isnotempty(BodyContainsWords),BodyContainsWords,SubjectOrBodyContainsWords )))\\n| extend RuleDetail = case(OfficeObjectId contains '/' , tostring(split(OfficeObjectId, '/')[-1]) , tostring(split(OfficeObjectId, '\\\\\\\\')[-1]))\\n| summarize count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by  Operation, UserId, ClientIPAddress, ResultStatus, Keyword, OriginatingServer, OfficeObjectId, RuleDetail\\n| extend timestamp = StartTimeUtc,  IPCustomEntity = ClientIPAddress, AccountCustomEntity = UserId , HostCustomEntity =  OriginatingServer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Malicious Inbox Rule\",\r\n        \"description\": \"Often times after the initial compromise the attackers create inbox rules to delete emails that contain certain keywords. \\n This is done so as to limit ability to warn compromised users that they've been compromised. Below is a sample query that tries to detect this.\\nReference: https://www.reddit.com/r/sysadmin/comments/7kyp0a/recent_phishing_attempts_my_experience_and_what/\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-03-02T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/157c0cfc-d76d-463b-8755-c781608cdc1a\",\r\n      \"name\": \"157c0cfc-d76d-463b-8755-c781608cdc1a\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let PrivateIPregex = @'^127\\\\.|^10\\\\.|^172\\\\.1[6-9]\\\\.|^172\\\\.2[0-9]\\\\.|^172\\\\.3[0-1]\\\\.|^192\\\\.168\\\\.';\\nlet endtime = 1d;\\nCommonSecurityLog\\n| where TimeGenerated >= ago(endtime) \\n| where DeviceVendor =~ \\\"Cisco\\\"\\n| where DeviceAction =~ \\\"denied\\\"\\n| extend SourceIPType = iff(SourceIP matches regex PrivateIPregex,\\\"private\\\" ,\\\"public\\\" )\\n| where SourceIPType == \\\"public\\\"\\n| summarize count() by SourceIP\\n| join (\\n    // Successful signins from IPs blocked by the firewall solution are suspect\\n    // Include fully successful sign-ins, but also ones that failed only at MFA stage\\n    // as that supposes the password was sucessfully guessed.\\n  SigninLogs\\n  | where ResultType in (\\\"0\\\", \\\"50074\\\", \\\"50076\\\") \\n) on $left.SourceIP == $right.IPAddress\\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIP, AccountCustomEntity = UserPrincipalName\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Cisco - firewall block but success logon to Azure AD\",\r\n        \"description\": \"Correlate IPs blocked by a Cisco firewall appliance with successful Azure Active Directory signins. \\nBecause the IP was blocked by the firewall, that same IP logging on successfully to AAD is potentially suspect\\nand could indicate credential compromise for the user account.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-08T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/69a45b05-71f5-45ca-8944-2e038747fb39\",\r\n      \"name\": \"69a45b05-71f5-45ca-8944-2e038747fb39\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let endtime = 1d;\\nlet starttime = 8d;\\n// The threshold below excludes matching on RDP connection computer counts of 5 or more by a given account and IP in a given day.  Change the threshold as needed.\\nlet threshold = 5;\\nSecurityEvent\\n| where TimeGenerated >= ago(endtime) \\n| where EventID == 4624 and LogonType == 10\\n// Labeling the first RDP connection time, computer and ip\\n| extend FirstHop = TimeGenerated, FirstComputer = toupper(Computer), FirstIPAddress = IpAddress, Account = tolower(Account)  \\n| join kind=inner (\\nSecurityEvent\\n| where TimeGenerated >= ago(endtime) \\n| where EventID == 4624 and LogonType == 10\\n// Labeling the second RDP connection time, computer and ip\\n| extend SecondHop = TimeGenerated, SecondComputer = toupper(Computer), SecondIPAddress = IpAddress, Account = tolower(Account)\\n) on Account\\n// Make sure that the first connection is after the second connection --> SecondHop > FirstHop\\n// Then identify only RDP to another computer from within the first RDP connection by only choosing matches where the Computer names do not match --> FirstComputer != SecondComputer\\n// Then make sure the IPAddresses do not match by excluding connections from the same computers with first hop RDP connections to multiple computers --> FirstIPAddress != SecondIPAddress\\n| where FirstComputer != SecondComputer and FirstIPAddress != SecondIPAddress and SecondHop > FirstHop\\n// where the second hop occurs within 30 minutes of the first hop\\n| where SecondHop <= FirstHop+30m\\n| distinct Account, FirstHop, FirstComputer, FirstIPAddress, SecondHop, SecondComputer, SecondIPAddress, AccountType, Activity, LogonTypeName, ProcessName\\n// use left anti to exclude anything from the previous 7 days where the Account and IP has connected 5 or more computers.\\n| join kind=leftanti (\\nSecurityEvent\\n| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime) \\n| where EventID == 4624 and LogonType == 10\\n| summarize makeset(Computer), ComputerCount = dcount(Computer) by bin(TimeGenerated, 1d), Account = tolower(Account), IpAddress\\n// Connection count to computer by same account and IP to exclude counts of 5 or more on a given day\\n| where ComputerCount >= threshold\\n| mvexpand set_Computer\\n| extend Computer = toupper(set_Computer)\\n) on Account, $left.SecondComputer == $right.Computer, $left.SecondIPAddress == $right.IpAddress\\n| summarize FirstHopFirstSeen = min(FirstHop), FirstHopLastSeen = max(FirstHop) by Account, FirstComputer, FirstIPAddress, SecondHop, SecondComputer, \\nSecondIPAddress, AccountType, Activity, LogonTypeName, ProcessName\\n| extend timestamp = FirstHopFirstSeen, AccountCustomEntity = Account, HostCustomEntity = FirstComputer, IPCustomEntity = FirstIPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P8D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"RDP Nesting\",\r\n        \"description\": \"Identifies when an RDP connection is made to a first system and then an RDP connection is made from the first system \\nto another system with the same account within the 60 minutes. Additionally, if historically daily  \\nRDP connections are indicated by the logged EventID 4624 with LogonType = 10\",\r\n        \"tactics\": [\r\n          \"LateralMovement\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-10-21T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/327cd4ed-ca42-454b-887c-54e1c91363c6\",\r\n      \"name\": \"327cd4ed-ca42-454b-887c-54e1c91363c6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"MicrosoftSecurityIncidentCreation\",\r\n      \"properties\": {\r\n        \"productFilter\": \"Microsoft Defender Advanced Threat Protection\",\r\n        \"displayName\": \"Create incidents based on Microsoft Defender Advanced Threat Protection alerts\",\r\n        \"description\": \"Create incidents based on all alerts generated in Microsoft Defender Advanced Threat Protection\",\r\n        \"lastUpdatedDateUTC\": \"2019-10-24T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-10-24T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"MicrosoftDefenderAdvancedThreatProtection\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert (MDATP)\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 1\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/fb0f4a93-d8ad-4b54-9931-85bdb7550f90\",\r\n      \"name\": \"fb0f4a93-d8ad-4b54-9931-85bdb7550f90\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nSymantecProxySG\\n| where TimeGenerated >= timeframe\\n| mv-expand cs_categories\\n| where cs_categories has_any (\\\"Suspicious\\\",\\\"phishing\\\", \\\"hacking\\\")\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by sc_filter_result, cs_userdn, c_ip, cs_host, Computer,  tostring(cs_categories)\\n| extend timestamp = StartTime, AccountCustomEntity = cs_userdn, IPCustomEntity = c_ip, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"User Accessed Suspicious URL Categories\",\r\n        \"description\": \"Creates an incident in the event the requested URL accessed by the user has been identified as Suspicious, Phishing, or Hacking.\",\r\n        \"tactics\": [\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-06T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SymantecProxySG\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/1ce5e766-26ab-4616-b7c8-3b33ae321e80\",\r\n      \"name\": \"1ce5e766-26ab-4616-b7c8-3b33ae321e80\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\n//Adjust this threshold to fit environment\\nlet signin_threshold = 5; \\n//Make a list of IPs with failed Windows host logins above threshold\\nlet win_fails = \\nSecurityEvent\\n| where TimeGenerated >= ago(timeframe)\\n| where EventID == 4625\\n| where LogonType in (10, 7, 3)\\n| where IpAddress != \\\"-\\\"\\n| summarize count() by IpAddress\\n| where count_ > signin_threshold\\n| summarize make_list(IpAddress);\\n//Make a list of IPs with failed *nix host logins above threshold\\nlet nix_fails = \\nSyslog\\n| where TimeGenerated > ago(timeframe)\\n| where Facility contains 'auth' and ProcessName != 'sudo'\\n| extend SourceIP = extract(\\\"(([0-9]{1,3})\\\\\\\\.([0-9]{1,3})\\\\\\\\.([0-9]{1,3})\\\\\\\\.(([0-9]{1,3})))\\\",1,SyslogMessage)\\n| where SourceIP != \\\"\\\" and SourceIP != \\\"127.0.0.1\\\"\\n| summarize count() by SourceIP\\n| where count_ > signin_threshold\\n| summarize make_list(SourceIP);\\n//See if any of the IPs with failed host logins hve had a sucessful Azure AD login\\nSigninLogs\\n| where TimeGenerated > ago(timeframe)\\n| where ResultType !in (\\\"0\\\", \\\"50125\\\", \\\"50140\\\")\\n| where IPAddress in (win_fails) or IPAddress in (nix_fails)\\n| extend Reason=  \\\"Multiple failed host logins from IP address with successful Azure AD login\\\"\\n| extend timstamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Failed host logons but success logon to AzureAD\",\r\n        \"description\": \"Identifies a list of IP addresses with a minimum number(default of 5) of failed logon attempts to remote hosts.\\nUses that list to identify any successful logons to Azure Active Directory from these IPs within the same timeframe.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Syslog\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/532c1811-79ee-4d9f-8d4d-6304c840daa1\",\r\n      \"name\": \"532c1811-79ee-4d9f-8d4d-6304c840daa1\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"MicrosoftSecurityIncidentCreation\",\r\n      \"properties\": {\r\n        \"productFilter\": \"Azure Active Directory Identity Protection\",\r\n        \"displayName\": \"Create incidents based on Azure Active Directory Identity Protection alerts\",\r\n        \"description\": \"Create incidents based on all alerts generated in Azure Active Directory Identity Protection\",\r\n        \"lastUpdatedDateUTC\": \"2019-07-16T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-16T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectoryIdentityProtection\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert (IPC)\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/62085097-d113-459f-9ea7-30216f2ee6af\",\r\n      \"name\": \"62085097-d113-459f-9ea7-30216f2ee6af\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let starttime = 2d;\\nlet endtime = 1d;\\nSecurityEvent\\n// include yesterday and not today, so we can confirm a match occurs within the next day\\n| where TimeGenerated >= startofday(ago(starttime)) and TimeGenerated <= startofday(ago(endtime))  \\n// 4722: User Account Enabled\\n| where EventID == 4722 \\n// Removing Machine Accounts\\n| where TargetUserName !endswith \\\"$\\\" \\n| join kind= leftanti (\\n  SecurityEvent\\n  //verify over the last 2 days\\n  | where TimeGenerated >= startofday(ago(starttime))\\n  // Attempt made to change password\\n  | where EventID == 4723\\n  // Removing Machine Accounts\\n  | where TargetUserName !endswith \\\"$\\\"\\n) on TargetUserName, TargetDomainName\\n| project StartTimeUtc = TimeGenerated, EventID, Computer, TargetUserName, TargetDomainName, SubjectUserName\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P2D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"AD user created password not set within 24-48 hours\",\r\n        \"description\": \"Identifies whenever a new account is created with a default password and password is not changed within 24-48 hours.\\nSimple version, can be more precise with Windowing, but not necessary if run as an alert on a daily basis.\\nEffectively, there is an event 4722 indicating a user enabled and no event 4723 indicating a password was changed within in that day or the next day.\",\r\n        \"tactics\": [\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-01-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/dd0a6029-ecef-4507-89c4-fc355ac52111\",\r\n      \"name\": \"dd0a6029-ecef-4507-89c4-fc355ac52111\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\n//Create a list of TLDs in our threat feed for later validation of extracted domains\\nlet list_tlds = ThreatIntelligenceIndicator\\n    | where TimeGenerated > ago(ioc_lookBack)\\n    | where isnotempty(DomainName)\\n    | extend DomainName = tolower(DomainName)\\n    | extend parts = split(DomainName, '.')\\n    | extend tld = parts[(array_length(parts)-1)]\\n    | summarize count() by tostring(tld)\\n    | summarize make_list(tld);\\n    ThreatIntelligenceIndicator\\n    | where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n    | where Active == true\\n    // Picking up only IOC's that contain the entities we want\\n    | where isnotempty(DomainName)\\n    | join (\\n        CommonSecurityLog\\n        | extend IngestionTime = ingestion_time()\\n        | where IngestionTime > ago(dt_lookBack)\\n        | where DeviceEventClassID =~ 'url'\\n        //Uncomment the line below to only alert on allowed connections\\n        //| where DeviceAction !~ \\\"block-url\\\"\\n        //Extract domain from RequestURL, if not present extarct it from AdditionalExtentions\\n        | extend PA_Url = columnifexists(\\\"RequestURL\\\", \\\"None\\\")\\n        | extend PA_Url = iif(isempty(PA_Url) and AdditionalExtensions !startswith \\\"PanOS\\\", extract(\\\"([^\\\\\\\"]+)\\\", 1, tolower(AdditionalExtensions)), trim('\\\"', PA_Url))\\n        | extend PA_Url = iif(PA_Url !startswith \\\"http://\\\" and ApplicationProtocol !~ \\\"ssl\\\", strcat('http://', PA_Url), iif(PA_Url !startswith \\\"https://\\\" and ApplicationProtocol =~ \\\"ssl\\\", strcat('https://', PA_Url), PA_Url))\\n        | extend Domain = trim(@\\\"\\\"\\\"\\\",tostring(parse_url(PA_Url).Host))\\n        | where isnotempty(Domain)\\n        | extend Domain = tolower(Domain)\\n        | extend parts = split(Domain, '.')\\n        //Split out the TLD for the purpose of checking if we have any TI indicators with this TLD to match on\\n        | extend tld = parts[(array_length(parts)-1)]\\n        //Validate parsed domain by checking TLD against TLDs from threat feed and drop domains where there is no chance of a match\\n        | where tld in~ (list_tlds)\\n        | extend CSL_TimeGenerated = TimeGenerated\\n    ) on $left.DomainName==$right.Domain\\n    | project LatestIndicatorTime, Description, ActivityGroupNames, PA_Url, Domain, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, CSL_TimeGenerated, DeviceAction, DestinationIP, DestinationPort, DeviceName, SourceIP, SourcePort, ApplicationProtocol, RequestMethod\\n    | extend timestamp = CSL_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, URLCustomEntity = PA_Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map Domain entity to CommonSecurityLog\",\r\n        \"description\": \"Identifies a match in CommonSecurityLog table from any Domain IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/737a2ce1-70a3-4968-9e90-3e6aca836abf\",\r\n      \"name\": \"737a2ce1-70a3-4968-9e90-3e6aca836abf\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"MLBehaviorAnalytics\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"displayName\": \"(Preview) Anomalous RDP Login Detections\",\r\n        \"description\": \"This detection uses machine learning (ML) to identify anomalous Remote Desktop Protocol (RDP) login activity, based on Windows Security Event data. Scenarios include:\\n\\n*\\tUnusual IP - This IP address has not or has rarely been seen in last 30 days.\\n*\\tUnusual Geo - The IP address, city, country and ASN have not (or rarely) been seen in last 30 days.\\n*\\tNew user - A new user logs in from an IP address and geo location, both or either of which are not expected to be seen in the last 30 days.\\n\\nAllow 7 days after this alert is enabled for Azure Sentinel to build a profile of normal activity for your environment.\\t\\n\\nThis detection requires a specific configuration of the data source. [Learn more](https://docs.microsoft.com/en-us/azure/sentinel/connect-windows-security-events)\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-07-16T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-04-02T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/18e6a87e-9d06-4a4e-8b59-3469cd49552d\",\r\n      \"name\": \"18e6a87e-9d06-4a4e-8b59-3469cd49552d\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"(union isfuzzy=true (SecurityEvent \\n| where EventID == 4662 \\n| where ObjectServer == 'DS'\\n| where OperationType == 'Object Access'\\n//| where ObjectName contains '<GUID of ADFS DKM Container>' This is unique to the domain.\\n| where ObjectType contains '5cb41ed0-0e4c-11d0-a286-00aa003049e2' // Contact Class\\n| where Properties contains '8d3bca50-1d7e-11d0-a081-00aa006c33ed' // Picture Attribute - Ldap-Display-Name: thumbnailPhoto\\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = SubjectAccount),\\n(DeviceEvents\\n| where ActionType =~ \\\"LdapSearch\\\"\\n| where AdditionalFields.AttributeList contains \\\"thumbnailPhoto\\\"\\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName, AccountCustomEntity = InitiatingProcessAccountName)\\n)\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"ADFS DKM Master Key Export\",\r\n        \"description\": \"Identifies an export of the ADFS DKM Master Key from Active Directory.\\n References: https://blogs.microsoft.com/on-the-issues/2020/12/13/customers-protect-nation-state-cyberattacks/, \\n https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html?1\",\r\n        \"tactics\": [\r\n          \"Collection\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-22T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-17T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvents\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"MicrosoftThreatProtection\",\r\n            \"dataTypes\": [\r\n              \"DeviceEvents\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/610d3850-c26f-4f20-8d86-f10fdf2425f5\",\r\n      \"name\": \"610d3850-c26f-4f20-8d86-f10fdf2425f5\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet EventNameList = dynamic([\\\"UpdateTrail\\\",\\\"DeleteTrail\\\",\\\"StopLogging\\\",\\\"DeleteFlowLogs\\\",\\\"DeleteEventBus\\\"]);\\nAWSCloudTrail\\n| where TimeGenerated > ago(timeframe)\\n| where EventName in~ (EventNameList)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \\nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Changes made to AWS CloudTrail logs\",\r\n        \"description\": \"Attackers often try to hide their steps by deleting or stopping the collection of logs that could show their activity. \\nThis alert identifies any manipulation of AWS CloudTrail, Cloudwatch/EventBridge or VPC Flow logs.\\nMore Information: AWS CloudTrail API: https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_Operations.html\\nAWS Cloudwatch/Eventbridge API: https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_Operations.html\\nAWS DelteteFlowLogs API : https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteFlowLogs.html \",\r\n        \"tactics\": [\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/79f29feb-6a9d-4cdf-baaa-2daf480a5da1\",\r\n      \"name\": \"79f29feb-6a9d-4cdf-baaa-2daf480a5da1\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1h;\\nlet last1h = CommonSecurityLog \\n| where TimeGenerated >= ago(timeframe)\\n| where isempty(CommunicationDirection) \\n| where DeviceEventClassID == \\\"733100\\\"\\n| extend SourceOfDropRateCount = tostring(split(tostring(split(Message, \\\"]\\\")[0]),\\\"[ \\\")[1])\\n| extend splitMessage = split(Message, \\\".\\\")\\n| extend DropRate = tostring(split(tostring(splitMessage[0]),\\\"] \\\")[1])\\n| extend CurrentBurstRate = split(tostring(split(tostring(splitMessage[1]),\\\"  \\\")[0]),\\\"is \\\")\\n| extend CurrentBurstRatePerSec = toint(split(tostring(CurrentBurstRate[1]),\\\" \\\")[0])\\n| extend MaxConfiguredBurstRate = toint(CurrentBurstRate[2])\\n| extend CurrentAvgRate = split(tostring(split(tostring(splitMessage[1]),\\\"  \\\")[1]),\\\"is \\\")\\n| extend CurrentAvgRatePerSec = toint(split(tostring(CurrentAvgRate[1]),\\\" \\\")[0])\\n| extend MaxConfiguredAvgRate = toint(CurrentAvgRate[2])\\n| extend CumulativeTotal = toint(split(tostring(split(tostring(splitMessage[1]),\\\"  \\\")[2]),\\\"is \\\")[1])\\n| summarize last1hCumTotal = sum(CumulativeTotal), last1hAvgRatePerSec = avg(CurrentAvgRatePerSec), last1hAvgBurstRatePerSec = avg(CurrentBurstRatePerSec) by DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate;\\nlet prev6h = CommonSecurityLog \\n| where TimeGenerated between (ago(6h) .. ago(1h))\\n| where isempty(CommunicationDirection) \\n| where DeviceEventClassID == \\\"733100\\\"\\n| extend SourceOfDropRateCount = tostring(split(tostring(split(Message, \\\"]\\\")[0]),\\\"[ \\\")[1])\\n| extend splitMessage = split(Message, \\\".\\\")\\n| extend DropRate = tostring(split(tostring(splitMessage[0]),\\\"] \\\")[1])\\n| extend CurrentBurstRate = split(tostring(split(tostring(splitMessage[1]),\\\"  \\\")[0]),\\\"is \\\")\\n| extend prevCurrentBurstRatePerSec = toint(split(tostring(CurrentBurstRate[1]),\\\" \\\")[0])\\n| extend prevMaxConfiguredBurstRate = toint(CurrentBurstRate[2])\\n| extend CurrentAvgRate = split(tostring(split(tostring(splitMessage[1]),\\\"  \\\")[1]),\\\"is \\\")\\n| extend prevCurrentAvgRatePerSec = toint(split(tostring(CurrentAvgRate[1]),\\\" \\\")[0])\\n| extend prevMaxConfiguredAvgRate = toint(CurrentAvgRate[2])\\n| extend prevCumulativeTotal = toint(split(tostring(split(tostring(splitMessage[1]),\\\"  \\\")[2]),\\\"is \\\")[1])\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), prev6hCumTotal = sum(prevCumulativeTotal), prev6hAvgRatePerSec = avg(prevCurrentAvgRatePerSec), prev6hAvgBurstRatePerSec = avg(prevCurrentBurstRatePerSec) \\nby DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate;\\nlast1h | join (\\n  prev6h \\n) on DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate\\n| project StartTimeUtc, EndTimeUtc, DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate, last1hCumTotal, prev6hCumTotal, prev6hAvgCumTotal = prev6hCumTotal/6, last1hAvgRatePerSec, prev6hAvgRatePerSec, last1hAvgBurstRatePerSec, prev6hAvgBurstRatePerSec\\n// Select only events that indicate a doubling of the expected rate in the last hour over the previous 6 hours\\n| where last1hCumTotal > 2*prev6hAvgCumTotal or last1hAvgRatePerSec > 2*prev6hAvgRatePerSec or last1hAvgBurstRatePerSec > 2*prev6hAvgBurstRatePerSec\\n| extend timestamp = StartTimeUtc, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT6H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Cisco ASA - average attack detection rate increase\",\r\n        \"description\": \"This will help you determine if Cisco ASA devices are under heavier attack than normal over the last hour versus the previous 6 hours based on DeviceEventClassID 733100\\nReferences: https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog/syslogs9.html\\nDetails on how to further troubleshoot/investigate: https://www.cisco.com/c/en/us/support/docs/security/asa-5500-x-series-next-generation-firewalls/113685-asa-threat-detection.html\",\r\n        \"tactics\": [\r\n          \"Discovery\",\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/0d76e9cf-788d-4a69-ac7d-f234826b5bed\",\r\n      \"name\": \"0d76e9cf-788d-4a69-ac7d-f234826b5bed\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nDnsEvents\\n| where TimeGenerated > ago(timeframe)\\n| where Name contains \\\".\\\"\\n| where Name has_any (\\\"monerohash.com\\\", \\\"do-dear.com\\\", \\\"xmrminerpro.com\\\", \\\"secumine.net\\\", \\\"xmrpool.com\\\", \\\"minexmr.org\\\", \\\"hashanywhere.com\\\", \\n\\\"xmrget.com\\\", \\\"mininglottery.eu\\\", \\\"minergate.com\\\", \\\"moriaxmr.com\\\", \\\"multipooler.com\\\", \\\"moneropools.com\\\", \\\"xmrpool.eu\\\", \\\"coolmining.club\\\", \\n\\\"supportxmr.com\\\", \\\"minexmr.com\\\", \\\"hashvault.pro\\\", \\\"xmrpool.net\\\", \\\"crypto-pool.fr\\\", \\\"xmr.pt\\\", \\\"miner.rocks\\\", \\\"walpool.com\\\", \\\"herominers.com\\\", \\n\\\"gntl.co.uk\\\", \\\"semipool.com\\\", \\\"coinfoundry.org\\\", \\\"cryptoknight.cc\\\", \\\"fairhash.org\\\", \\\"baikalmine.com\\\", \\\"tubepool.xyz\\\", \\\"fairpool.xyz\\\", \\\"asiapool.io\\\", \\n\\\"coinpoolit.webhop.me\\\", \\\"nanopool.org\\\", \\\"moneropool.com\\\", \\\"miner.center\\\", \\\"prohash.net\\\", \\\"poolto.be\\\", \\\"cryptoescrow.eu\\\", \\\"monerominers.net\\\", \\\"cryptonotepool.org\\\", \\n\\\"extrmepool.org\\\", \\\"webcoin.me\\\", \\\"kippo.eu\\\", \\\"hashinvest.ws\\\", \\\"monero.farm\\\", \\\"supportxmr.com\\\", \\\"xmrpool.eu\\\", \\\"linux-repository-updates.com\\\", \\\"1gh.com\\\", \\n\\\"dwarfpool.com\\\", \\\"hash-to-coins.com\\\", \\\"hashvault.pro\\\", \\\"pool-proxy.com\\\", \\\"hashfor.cash\\\", \\\"fairpool.cloud\\\", \\\"litecoinpool.org\\\", \\\"mineshaft.ml\\\", \\\"abcxyz.stream\\\", \\n\\\"moneropool.ru\\\", \\\"cryptonotepool.org.uk\\\", \\\"extremepool.org\\\", \\\"extremehash.com\\\", \\\"hashinvest.net\\\", \\\"unipool.pro\\\", \\\"crypto-pools.org\\\", \\\"monero.net\\\", \\n\\\"backup-pool.com\\\", \\\"mooo.com\\\", \\\"freeyy.me\\\", \\\"cryptonight.net\\\", \\\"shscrypto.net\\\")\\n| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"DNS events related to mining pools\",\r\n        \"description\": \"Identifies IP addresses that may be performing DNS lookups associated with common currency mining pools.\",\r\n        \"tactics\": [\r\n          \"Execution\",\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-07T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/e27dd7e5-4367-4c40-a2b7-fcd7e7a8a508\",\r\n      \"name\": \"e27dd7e5-4367-4c40-a2b7-fcd7e7a8a508\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet FailureThreshold = 15;\\nlet FailedEvents = Okta_CL\\n| where TimeGenerated > timeframe\\n| where eventType_s =~ \\\"user.session.start\\\"and outcome_reason_s in (\\\"VERIFICATION_ERROR\\\",\\\"INVALID_CREDENTIALS\\\")\\n| summarize dcount(actor_alternateId_s) by client_ipAddress_s, bin(TimeGenerated, 5m)\\n| where dcount_actor_alternateId_s > FailureThreshold\\n| project client_ipAddress_s, TimeGenerated;\\nOkta_CL\\n| where TimeGenerated > timeframe\\n| where eventType_s =~ \\\"user.session.start\\\"and outcome_reason_s in (\\\"VERIFICATION_ERROR\\\",\\\"INVALID_CREDENTIALS\\\")\\n| summarize Users = make_set(actor_alternateId_s) by client_ipAddress_s, City = client_geographicalContext_city_s, Country = client_geographicalContext_country_s, bin(TimeGenerated, 5m)\\n| join kind=inner (FailedEvents) on client_ipAddress_s, TimeGenerated\\n| sort by TimeGenerated desc\\n| extend timestamp = TimeGenerated, IPCustomEntity = client_ipAddress_s\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Potential Password Spray Attack\",\r\n        \"description\": \"This query searches for failed attempts to log into the Okta console from more than 15 various users within a 5 minute timeframe from the same source. This is a potential indication of a password spray attack\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-07-08T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"OktaSSO\",\r\n            \"dataTypes\": [\r\n              \"Okta_CL\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/7249500f-3038-4b83-8549-9cd8dfa2d498\",\r\n      \"name\": \"7249500f-3038-4b83-8549-9cd8dfa2d498\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let timeframe = 1d;\\nlet DomainNames = dynamic([\\\"de-ma.online\\\", \\\"g20saudi.000webhostapp.com\\\", \\\"ksat20.000webhostapp.com\\\"]);\\nlet EmailAddresses = dynamic([\\\"munichconference1962@gmail.com\\\",\\\"munichconference@outlook.de\\\", \\\"munichconference@outlook.com\\\", \\\"t20saudiarabia@gmail.com\\\", \\\"t20saudiarabia@hotmail.com\\\", \\\"t20saudiarabia@outlook.sa\\\"]);\\n(union isfuzzy=true\\n(CommonSecurityLog \\n| where TimeGenerated >= ago(timeframe)\\n| parse Message with * '(' DNSName ')' * \\n| extend MessageIP = extract(IPRegex, 0, Message)\\n| extend RequestURLIP = extract(IPRegex, 0, Message)\\n| where (isnotempty(DNSName) and DNSName has_any (DomainNames)) \\n  or (isnotempty(DestinationHostName) and DestinationHostName has_any (DomainNames)) \\n  or (isnotempty(RequestURL) and (RequestURL has_any (DomainNames)))\\n| extend timestamp = TimeGenerated , AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName\\n),\\n(DnsEvents \\n| where TimeGenerated >= ago(timeframe) \\n| extend DestinationIPAddress = IPAddresses, DNSName = Name, Host = Computer\\n| where DNSName has_any (DomainNames) \\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host),\\n(VMConnection \\n| where TimeGenerated >= ago(timeframe) \\n| parse RemoteDnsCanonicalNames with * '[\\\"' DNSName '\\\"]' *\\n| where isnotempty(DNSName)\\n| where DNSName has_any (DomainNames)\\n| extend timestamp = TimeGenerated , HostCustomEntity = Computer),\\n(SecurityAlert\\n| where TimeGenerated >= ago(timeframe) \\n| where ProviderName =~ 'OATP'\\n| extend UPN = case(isnotempty(parse_json(Entities)[0].Upn), parse_json(Entities)[0].Upn, \\n                    isnotempty(parse_json(Entities)[1].Upn), parse_json(Entities)[1].Upn,\\n                    isnotempty(parse_json(Entities)[2].Upn), parse_json(Entities)[2].Upn,\\n                    isnotempty(parse_json(Entities)[3].Upn), parse_json(Entities)[3].Upn,\\n                    isnotempty(parse_json(Entities)[4].Upn), parse_json(Entities)[4].Upn,\\n                    isnotempty(parse_json(Entities)[5].Upn), parse_json(Entities)[5].Upn,\\n                    isnotempty(parse_json(Entities)[6].Upn), parse_json(Entities)[6].Upn,\\n                    isnotempty(parse_json(Entities)[7].Upn), parse_json(Entities)[7].Upn,\\n                    isnotempty(parse_json(Entities)[8].Upn), parse_json(Entities)[8].Upn,\\n                    parse_json(Entities)[9].Upn)\\n| where Entities has_any (EmailAddresses)\\n| extend timestamp = TimeGenerated, AccountCustomEntity = tostring(UPN)),\\n(AzureDiagnostics\\n| where TimeGenerated >= ago(timeframe) \\n| where ResourceType =~ \\\"AZUREFIREWALLS\\\"\\n| where msg_s has_any (DomainNames)\\n| extend timestamp = TimeGenerated))\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Known PHOSPHORUS group domains/IP - October 2020\",\r\n        \"description\": \"Matches IOCs related to PHOSPHORUS group activity published October 2020 with CommonSecurityLog, DnsEvents, OfficeActivity and VMConnection dataTypes.\\nReferences: \",\r\n        \"tactics\": [\r\n          \"CommandAndControl\",\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-19T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-10-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(VMInsights)\",\r\n            \"dataTypes\": [\r\n              \"VMConnection\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog (Cisco)\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog (PaloAlto)\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Zscaler\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog (Zscaler)\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Fortinet\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog (Fortinet)\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"OfficeATP\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert (OATP)\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureFirewall\",\r\n            \"dataTypes\": [\r\n              \"AzureDiagnostics (Azure Firewall)\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2d3e33c6-d8e6-4b51-92d6-dbe8bd9efb05\",\r\n      \"name\": \"2d3e33c6-d8e6-4b51-92d6-dbe8bd9efb05\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Anomaly\",\r\n      \"properties\": {\r\n        \"severity\": \"Informational\",\r\n        \"anomalyDefinitionVersion\": \"1.0.0\",\r\n        \"techniques\": [\r\n          \"Unknown\"\r\n        ],\r\n        \"customizableObservations\": {\r\n          \"multiSelectObservations\": [\r\n            {\r\n              \"supportedValues\": [\r\n                \"Fraction of failed signins\",\r\n                \"Number of failed signins\",\r\n                \"Failed signins to successful signins ratio\",\r\n                \"Number of signins with incorrect passwords\",\r\n                \"Incorrect passwords to correct passwords ratio\",\r\n                \"Fraction of incorrect password signins\",\r\n                \"Distinct number of app ids\",\r\n                \"Distinct number of client apps\",\r\n                \"Distinct number of ip addresses\",\r\n                \"Distinct number of opperating systems\",\r\n                \"Distinct number of browsers\",\r\n                \"Distinct number of cities\",\r\n                \"Distinct number of states\",\r\n                \"Distinct number of countries\"\r\n              ],\r\n              \"values\": [\r\n                \"Fraction of failed signins\",\r\n                \"Number of failed signins\",\r\n                \"Failed signins to successful signins ratio\",\r\n                \"Number of signins with incorrect passwords\",\r\n                \"Incorrect passwords to correct passwords ratio\",\r\n                \"Fraction of incorrect password signins\",\r\n                \"Distinct number of app ids\",\r\n                \"Distinct number of client apps\",\r\n                \"Distinct number of ip addresses\",\r\n                \"Distinct number of opperating systems\",\r\n                \"Distinct number of browsers\",\r\n                \"Distinct number of cities\",\r\n                \"Distinct number of states\",\r\n                \"Distinct number of countries\"\r\n              ],\r\n              \"supportedValuesKql\": null,\r\n              \"valuesKql\": null,\r\n              \"name\": \"Top reason for high anomaly score\",\r\n              \"description\": \"Include only anomalies where the top reason is one of these values.\",\r\n              \"sequenceNumber\": 0,\r\n              \"rerun\": \"RerunAlways\"\r\n            }\r\n          ],\r\n          \"singleSelectObservations\": null,\r\n          \"prioritizeExcludeObservations\": null,\r\n          \"thresholdObservations\": [\r\n            {\r\n              \"minimum\": \"0.0\",\r\n              \"maximum\": \"1.0\",\r\n              \"value\": \"0.5\",\r\n              \"name\": \"Score\",\r\n              \"description\": \"Generate an anomaly when the anomaly score is greater than or equal to the chosen value.\",\r\n              \"sequenceNumber\": 0,\r\n              \"rerun\": \"RerunAlways\"\r\n            }\r\n          ]\r\n        },\r\n        \"frequency\": \"P1D\",\r\n        \"displayName\": \"(Preview) Anomalous Azure AD sign-in sessions\",\r\n        \"description\": \"The machine learning model groups the Azure AD sign-in logs on a per-user basis.\\nThe model is trained on the previous 6 days of user sign-in behavior.\\nIt indicates anomalous user sign-in sessions in the last day.\\n\\nAn autoencoder model is used.\\nIts aim is to compress the user sign-in sessions into a bottleneck encoding.\\nIt then attempts to reconstruct the input sessions as best it can from the bottleneck encoding.\\nThe sessions with high reconstruction errors are assumed to be anomalous.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-02T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-11-02T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/f2dd4a3a-ebac-4994-9499-1a859938c947\",\r\n      \"name\": \"f2dd4a3a-ebac-4994-9499-1a859938c947\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let starttime = 14d;\\nlet endtime = 1d;\\nlet timeframe = 1h;\\nlet scorethreshold = 5;\\nlet bytessentperhourthreshold = 10;\\nlet PrivateIPregex = @'^127\\\\.|^10\\\\.|^172\\\\.1[6-9]\\\\.|^172\\\\.2[0-9]\\\\.|^172\\\\.3[0-1]\\\\.|^192\\\\.168\\\\.';\\nlet TimeSeriesData = (union isfuzzy=true\\n(\\nVMConnection\\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\\n| extend DestinationIpType = iff(DestinationIp matches regex PrivateIPregex,\\\"private\\\" ,\\\"public\\\" )\\n| where DestinationIpType == \\\"public\\\" | extend DeviceVendor = \\\"VMConnection\\\"\\n| project TimeGenerated, BytesSent, DeviceVendor\\n| make-series TotalBytesSent=sum(BytesSent) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor\\n),\\n(\\nCommonSecurityLog\\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\\n| extend DestinationIpType = iff(DestinationIP matches regex PrivateIPregex,\\\"private\\\" ,\\\"public\\\" )\\n| where DestinationIpType == \\\"public\\\"\\n| project TimeGenerated, SentBytes, DeviceVendor\\n| make-series TotalBytesSent=sum(SentBytes) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor\\n)\\n);\\n//Filter anomolies against TimeSeriesData\\nlet TimeSeriesAlerts = TimeSeriesData\\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalBytesSent, scorethreshold, -1, 'linefit')\\n| mv-expand TotalBytesSent to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\\n| where anomalies > 0 | extend AnomalyHour = TimeGenerated\\n| extend TotalBytesSentinMBperHour = round(((TotalBytesSent / 1024)/1024),2), baselinebytessentperHour = round(((baseline / 1024)/1024),2), score = round(score,2)\\n| project DeviceVendor, AnomalyHour, TimeGenerated, TotalBytesSentinMBperHour, baselinebytessentperHour, anomalies, score;\\nlet AnomalyHours = TimeSeriesAlerts  | where TimeGenerated > ago(2d) | project TimeGenerated;\\n//Union of all BaseLogs aggregated per hour\\nlet BaseLogs = (union isfuzzy=true\\n(\\nCommonSecurityLog\\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\\n| extend DestinationIpType = iff(DestinationIP matches regex PrivateIPregex,\\\"private\\\" ,\\\"public\\\" )\\n| where DestinationIpType == \\\"public\\\"\\n| extend SentBytesinMB = ((SentBytes / 1024)/1024), ReceivedBytesinMB = ((ReceivedBytes / 1024)/1024)\\n| summarize HourlyCount = count(), TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP, 100), DestinationPortList = make_set(DestinationPort,100), TotalSentBytesinMB = sum(SentBytesinMB), TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)\\n| where TotalSentBytesinMB > bytessentperhourthreshold\\n| sort by TimeGeneratedHour asc, TotalSentBytesinMB desc\\n| extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\\n| where Rank < 10  // Selecting Top 10 records with Highest BytesSent in each Hour\\n| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, Rank\\n),\\n(\\nVMConnection\\n| where isnotempty(DestinationIp) and isnotempty(SourceIp)\\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\\n| extend SourceIP = SourceIp, DestinationIP = DestinationIp\\n| extend DestinationIpType = iff(DestinationIp matches regex PrivateIPregex,\\\"private\\\" ,\\\"public\\\" )\\n| where DestinationIpType == \\\"public\\\" | extend DeviceVendor = \\\"VMConnection\\\"\\n| extend SentBytesinMB = ((BytesSent / 1024)/1024), ReceivedBytesinMB = ((BytesReceived / 1024)/1024)\\n| summarize HourlyCount = count(),TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP, 100), DestinationPortList = make_set(DestinationPort, 100), TotalSentBytesinMB = sum(SentBytesinMB),TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)\\n| where TotalSentBytesinMB > bytessentperhourthreshold\\n| sort by TimeGeneratedHour asc, TotalSentBytesinMB desc\\n| extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\\n| where Rank < 10  // Selecting Top 10 records with Highest BytesSent in each Hour\\n| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, Rank\\n)\\n);\\n// Join against base logs to retrive records associated with the hour of anomoly\\nTimeSeriesAlerts\\n| where TimeGenerated > ago(2d)\\n| join (\\n    BaseLogs | extend AnomalyHour = TimeGeneratedHour\\n) on DeviceVendor, AnomalyHour | sort by score desc\\n| project DeviceVendor, AnomalyHour,TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies\\n| summarize EventCount = count(), StartTimeUtc= min(TimeGeneratedMax), EndTimeUtc= max(TimeGeneratedMax), SourceIPMax= arg_max(SourceIP,*), TotalBytesSentinMB = sum(TotalSentBytesinMB), TotalBytesReceivedinMB = sum(TotalReceivedBytesinMB), SourceIPList = make_set(SourceIP, 100), DestinationIPList = make_set(DestinationIPList, 100) by AnomalyHour,TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies\\n| project DeviceVendor, AnomalyHour, StartTimeUtc, EndTimeUtc, SourceIPMax, SourceIPList, DestinationIPList, DestinationPortList, TotalBytesSentinMB, TotalBytesReceivedinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies, EventCount\\n| extend timestamp =EndTimeUtc, IPCustomEntity = SourceIPMax\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 1,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Time series anomaly for data size transferred to public internet\",\r\n        \"description\": \"Identifies anomalous data transfer to public networks. The query leverages built-in KQL anomaly detection algorithms that detects large deviations from a baseline pattern.\\nA sudden increase in data transferred to unknown public networks is an indication of data exfiltration attempts and should be investigated.\\nThe higher the score, the further it is from the baseline value.\\nThe output is aggregated to provide summary view of unique source IP to destination IP address and port bytes sent traffic observed in the flagged anomaly hour.\\nThe source IP addresses which were sending less than bytessentperhourthreshold have been exluded whose value can be adjusted as needed .\\nYou may have to run queries for individual source IP addresses from SourceIPlist to determine if anything looks suspicious\",\r\n        \"tactics\": [\r\n          \"Exfiltration\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-11T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-05-07T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(VMInsights)\",\r\n            \"dataTypes\": [\r\n              \"VMConnection\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/0b9ae89d-8cad-461c-808f-0494f70ad5c4\",\r\n      \"name\": \"0b9ae89d-8cad-461c-808f-0494f70ad5c4\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet PerUserThreshold = 5;\\nlet TotalThreshold = 100;\\nlet action = dynamic([\\\"change\\\", \\\"changed\\\", \\\"reset\\\"]);\\nlet pWord = dynamic([\\\"password\\\", \\\"credentials\\\"]);\\nlet PasswordResetMultiDataSource =\\n(union isfuzzy=true\\n(//Password reset events\\n//4723: An attempt was made to change an account's password\\n//4724: An attempt was made to reset an accounts password\\nSecurityEvent\\n| where TimeGenerated >= ago(timeframe)\\n| where EventID in (\\\"4723\\\",\\\"4724\\\")\\n| project TimeGenerated, Computer, AccountType, Account, Type),\\n(//Azure Active Directory Password reset events\\nAuditLogs\\n| where TimeGenerated >= ago(timeframe)\\n| where OperationName has_any (pWord) and OperationName has_any (action)\\n| extend AccountType = tostring(TargetResources[0].type), Account = tostring(TargetResources[0].userPrincipalName), \\nTargetResourceName = tolower(tostring(TargetResources[0].displayName))\\n| project TimeGenerated, AccountType, Account, Computer = TargetResourceName, Type),\\n(//OfficeActive ActiveDirectory Password reset events\\nOfficeActivity\\n| where TimeGenerated >= ago(timeframe)\\n| where OfficeWorkload == \\\"AzureActiveDirectory\\\" \\n| where (ExtendedProperties has_any (pWord) or ModifiedProperties has_any (pWord)) and (ExtendedProperties has_any (action) or ModifiedProperties has_any (action))\\n| extend AccountType = UserType, Account = OfficeObjectId \\n| project TimeGenerated, AccountType, Account, Type, Computer = \\\"\\\"),\\n(// Unix syslog password reset events\\nSyslog\\n| where TimeGenerated >= ago(timeframe)\\n| where Facility in (\\\"auth\\\",\\\"authpriv\\\")\\n| where SyslogMessage has_any (pWord) and SyslogMessage has_any (action)\\n| extend AccountType = iif(SyslogMessage contains \\\"root\\\", \\\"Root\\\", \\\"Non-Root\\\")\\n| parse SyslogMessage with * \\\"password changed for\\\" Account\\n| project TimeGenerated, AccountType, Account, Computer = HostName, Type),\\n(SigninLogs\\n| where TimeGenerated >= ago(timeframe)\\n| where OperationName =~ \\\"Sign-in activity\\\" and ResultType has_any (\\\"50125\\\", \\\"50133\\\")\\n| project TimeGenerated, AccountType = AppDisplayName, Computer = IPAddress, Account = UserPrincipalName, Type\\n)\\n);\\nlet pwrmd = PasswordResetMultiDataSource\\n| project TimeGenerated, Computer, AccountType, Account, Type;\\n(union isfuzzy=true  \\n(pwrmd\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computer = makeset(Computer), AccountType = makeset(AccountType), Total=count() by Account, Type\\n| where Total > PerUserThreshold\\n| extend ResetPivot = \\\"PerUserReset\\\"),  \\n(pwrmd\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computer = makeset(Computer), Account = tostring(makeset(Account)), AccountType = makeset(AccountType), Total=count() by Type\\n| where Total > TotalThreshold\\n| extend ResetPivot = \\\"TotalUserReset\\\")\\n)\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = tostring(Computer)\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Multiple Password Reset by user\",\r\n        \"description\": \"This query will determine multiple password resets by user across multiple data sources. \\nAccount manipulation including password reset may aid adversaries in maintaining access to credentials \\nand certain permission levels within an environment.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-09-03T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Syslog\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/0777f138-e5d8-4eab-bec1-e11ddfbc2be2\",\r\n      \"name\": \"0777f138-e5d8-4eab-bec1-e11ddfbc2be2\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 10m;\\nlet threshold = 20;\\nSecurityEvent \\n| where TimeGenerated >= ago(timeframe)\\n| where EventID == 4625\\n| where AccountType =~ \\\"User\\\"\\n| where SubStatus !='0xc0000064' and Account !in ('\\\\\\\\', '-\\\\\\\\-')\\n// SubStatus '0xc0000064' signifies 'Account name does not exist'\\n| extend ResourceId = column_ifexists(\\\"_ResourceId\\\", _ResourceId), SourceComputerId = column_ifexists(\\\"SourceComputerId\\\", SourceComputerId)\\n| extend Reason = case(\\nSubStatus =~ '0xC000005E', 'There are currently no logon servers available to service the logon request.',\\nSubStatus =~ '0xC0000064', 'User logon with misspelled or bad user account',\\nSubStatus =~ '0xC000006A', 'User logon with misspelled or bad password', \\nSubStatus =~ '0xC000006D', 'Bad user name or password',\\nSubStatus =~ '0xC000006E', 'Unknown user name or bad password',\\nSubStatus =~ '0xC000006F', 'User logon outside authorized hours',\\nSubStatus =~ '0xC0000070', 'User logon from unauthorized workstation',\\nSubStatus =~ '0xC0000071', 'User logon with expired password',\\nSubStatus =~ '0xC0000072', 'User logon to account disabled by administrator',\\nSubStatus =~ '0xC00000DC', 'Indicates the Sam Server was in the wrong state to perform the desired operation', \\nSubStatus =~ '0xC0000133', 'Clocks between DC and other computer too far out of sync',\\nSubStatus =~ '0xC000015B', 'The user has not been granted the requested logon type (aka logon right) at this machine',\\nSubStatus =~ '0xC000018C', 'The logon request failed because the trust relationship between the primary domain and the trusted domain failed',\\nSubStatus =~ '0xC0000192', 'An attempt was made to logon, but the Netlogon service was not started',\\nSubStatus =~ '0xC0000193', 'User logon with expired account',\\nSubStatus =~ '0xC0000224', 'User is required to change password at next logon',\\nSubStatus =~ '0xC0000225', 'Evidently a bug in Windows and not a risk',\\nSubStatus =~ '0xC0000234', 'User logon with account locked',\\nSubStatus =~ '0xC00002EE', 'Failure Reason: An Error occurred during Logon',\\nSubStatus =~ '0xC0000413', 'Logon Failure: The machine you are logging onto is protected by an authentication firewall. The specified account is not allowed to authenticate to the machine',\\nstrcat('Unknown reason substatus: ', SubStatus))\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), FailedLogonCount = count() by EventID, \\nActivity, Computer, Account, TargetAccount, TargetUserName, TargetDomainName, \\nLogonType, LogonTypeName, LogonProcessName, Status, SubStatus, Reason, ResourceId, SourceComputerId, WorkstationName, IpAddress\\n| where FailedLogonCount >= threshold\\n| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\",\r\n        \"queryFrequency\": \"PT10M\",\r\n        \"queryPeriod\": \"PT10M\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Failed logon attempts by valid accounts within 10 mins\",\r\n        \"description\": \"Identifies when failed logon attempts are 20 or higher during a 10 minute period (2 failed logons per minute minimum) from valid account.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-14T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/65c78944-930b-4cae-bd79-c3664ae30ba7\",\r\n      \"name\": \"65c78944-930b-4cae-bd79-c3664ae30ba7\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\n(union isfuzzy=true\\n(AuditLogs \\n| where TimeGenerated >= ago(timeframe) \\n| where OperationName =~ \\\"Disable Strong Authentication\\\"\\n| extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) \\n| extend InitiatedByUser = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \\n tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\\n| extend Targetprop = todynamic(TargetResources)\\n| extend TargetUser = tostring(Targetprop[0].userPrincipalName) \\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by User = TargetUser, InitiatedByUser , Operation = OperationName , CorrelationId, IPAddress, Category, Source = SourceSystem , AADTenantId, Type\\n),\\n(AWSCloudTrail\\n| where TimeGenerated >= ago(timeframe)\\n| where EventName in~ (\\\"DeactivateMFADevice\\\", \\\"DeleteVirtualMFADevice\\\") \\n| extend InstanceProfileName = tostring(parse_json(RequestParameters).InstanceProfileName)\\n| extend TargetUser = tostring(parse_json(RequestParameters).userName)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by User = TargetUser, Source = EventSource , Operation = EventName , TenantorInstance_Detail = InstanceProfileName, IPAddress = SourceIpAddress\\n)\\n)\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = User, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"MFA disabled for a user\",\r\n        \"description\": \"Multi-Factor Authentication (MFA) helps prevent credential compromise. This alert identifies when an attempt has been made to diable MFA for a user \",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-12-16T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/500415fb-bba7-4227-a08a-9857fb61b6a7\",\r\n      \"name\": \"500415fb-bba7-4227-a08a-9857fb61b6a7\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nOfficeActivity\\n| where TimeGenerated >= ago(timeframe)\\n| where OfficeWorkload == \\\"Exchange\\\"\\n| where Operation in~ (\\\"New-TransportRule\\\", \\\"Set-TransportRule\\\")\\n| extend p = parse_json(Parameters)\\n| extend RuleName = case(\\n  Operation =~ \\\"Set-TransportRule\\\", tostring(OfficeObjectId),\\n  Operation =~ \\\"New-TransportRule\\\", tostring(p[1].Value),\\n  \\\"Unknown\\\"\\n  ) \\n| mvexpand p\\n| where (p.Name =~ \\\"BlindCopyTo\\\" or p.Name =~ \\\"RedirectMessageTo\\\") and isnotempty(p.Value)\\n| extend RedirectTo = p.Value\\n| extend ClientIPOnly = case( \\n  ClientIP has \\\".\\\" and ClientIP has \\\":\\\", tostring(split(ClientIP,\\\":\\\")[0]), \\n  ClientIP has \\\".\\\" and ClientIP has \\\"-\\\", tostring(split(ClientIP,\\\"-\\\")[0]), \\n  ClientIP has \\\"[\\\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\\\"]\\\")[0]))),\\n  ClientIP\\n  )  \\n| extend Port = case(\\n  ClientIP has \\\".\\\" and ClientIP has \\\":\\\", (split(ClientIP,\\\":\\\")[1]),\\n  ClientIP has \\\".\\\" and ClientIP has \\\"-\\\", (split(ClientIP,\\\"-\\\")[1]),\\n  ClientIP has \\\"[\\\" and ClientIP has \\\":\\\", tostring(split(ClientIP,\\\"]:\\\")[1]),\\n  ClientIP has \\\"[\\\" and ClientIP has \\\"-\\\", tostring(split(ClientIP,\\\"]-\\\")[1]),\\n  ClientIP\\n  )\\n| extend ClientIP = ClientIPOnly\\n| project TimeGenerated, RedirectTo, ClientIP, Port, UserId, Operation, RuleName\\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserId, IPCustomEntity = ClientIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Mail redirect via ExO transport rule\",\r\n        \"description\": \"Identifies when Exchange Online transport rule configured to forward emails.\\nThis could be an adversary mailbox configured to collect mail from multiple user accounts.\",\r\n        \"tactics\": [\r\n          \"Collection\",\r\n          \"Exfiltration\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-05-05T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a9956d3a-07a9-44a6-a279-081a85020cae\",\r\n      \"name\": \"a9956d3a-07a9-44a6-a279-081a85020cae\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet threshold = 15;\\nlet rejectedAccess = SymantecVIP\\n| where TimeGenerated > timeframe\\n| where isnotempty(RADIUSAuth)\\n| where RADIUSAuth =~ \\\"Reject\\\"\\n| summarize Total = count() by ClientIP, bin(TimeGenerated, 15m)\\n| where Total > threshold\\n| project ClientIP;\\nSymantecVIP\\n| where TimeGenerated > timeframe\\n| where isnotempty(RADIUSAuth)\\n| where RADIUSAuth =~ \\\"Reject\\\"\\n| join kind=inner rejectedAccess() on ClientIP\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by ClientIP, User\\n| extend timestamp = StartTime, IPCustomEntity = ClientIP, AccountCustomEntity = User\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"ClientDeniedAccess\",\r\n        \"description\": \"Creates an incident in the event a Client has an excessive amounts of denied access requests.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-06T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SymantecVIP\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/80da0a8f-cfe1-4cd0-a895-8bc1771a720e\",\r\n      \"name\": \"80da0a8f-cfe1-4cd0-a895-8bc1771a720e\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nSecurityEvent\\n| where TimeGenerated >= ago(timeframe)\\n| where EventID == 1102 and EventSourceName == \\\"Microsoft-Windows-Eventlog\\\" \\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), EventCount = count() by Computer, Account, EventID, Activity\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Security Event log cleared\",\r\n        \"description\": \"Checks for event id 1102 which indicates the security event log was cleared. \\nIt uses Event Source Name \\\"Microsoft-Windows-Eventlog\\\" to avoid generating false positives from other sources, like AD FS servers for instance.\",\r\n        \"tactics\": [\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-22T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/b725d62c-eb77-42ff-96f6-bdc6745fc6e0\",\r\n      \"name\": \"b725d62c-eb77-42ff-96f6-bdc6745fc6e0\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let starttime = 14d;\\nlet endtime = 1d;\\nlet UserAgentAll = \\n(union isfuzzy=true\\n(OfficeActivity\\n| where TimeGenerated >= ago(starttime)\\n| where isnotempty(UserAgent)\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP, Account = UserId, Type, RecordType, Operation\\n),\\n(\\nW3CIISLog\\n| where TimeGenerated >= ago(starttime)\\n| where isnotempty(csUserAgent)\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = csUserAgent, SourceIP = cIP, Account = csUserName, Type, sSiteName, csMethod, csUriStem\\n),\\n(\\nAWSCloudTrail\\n| where TimeGenerated >= ago(starttime)\\n| where isnotempty(UserAgent)\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = SourceIpAddress, Account = UserIdentityUserName, Type, EventSource, EventName\\n))\\n// remove wordSize blocks of non-numeric hex characters prior to word extraction\\n| extend UserAgentNoHexAlphas = replace(\\\"([A-Fa-f]{4,})\\\", \\\"x\\\", UserAgent)\\n// once blocks of hex chars are removed, extract wordSize blocks of a-z\\n| extend Tokens = extract_all(\\\"([A-Za-z]{4,})\\\", UserAgentNoHexAlphas)\\n// concatenate extracted words to create a summarized user agent for baseline and comparison\\n| extend NormalizedUserAgent = strcat_array(Tokens, \\\"|\\\")\\n| project-away UserAgentNoHexAlphas, Tokens;\\nUserAgentAll\\n| where StartTime >= ago(endtime)\\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), count() by UserAgent, NormalizedUserAgent, SourceIP, Account, Type, RecordType, Operation, EventSource, EventName, sSiteName, csMethod, csUriStem\\n| join kind=leftanti\\n(\\nUserAgentAll\\n| where StartTime < ago(endtime)\\n| summarize by NormalizedUserAgent, SourceIP, Account, Type, RecordType, Operation, EventSource, EventName, sSiteName, csMethod, csUriStem\\n)\\non NormalizedUserAgent\\n| extend timestamp = StartTime, IPCustomEntity = SourceIP, AccountCustomEntity = Account\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"New UserAgent observed in last 24 hours\",\r\n        \"description\": \"Identifies new UserAgents observed in the last 24 hours versus the previous 14 days. This detection \\nextracts words from user agents to build the baseline and determine rareity rather than perform a \\ndirect comparison. This avoids FPs caused by version numbers and other high entropy user agent components.\\nThese new UserAgents could be benign. However, in normally stable environments,\\nthese new UserAgents could provide a starting point for investigating malicious activity.\\nNote: W3CIISLog can be noisy depending on the environment, however OfficeActivity and AWSCloudTrail are\\nusually stable with low numbers of detections.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"CommandAndControl\",\r\n          \"Execution\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-04-01T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(IIS)\",\r\n            \"dataTypes\": [\r\n              \"W3CIISLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/90586451-7ba8-4c1e-9904-7d1b7c3cc4d6\",\r\n      \"name\": \"90586451-7ba8-4c1e-9904-7d1b7c3cc4d6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"MicrosoftSecurityIncidentCreation\",\r\n      \"properties\": {\r\n        \"productFilter\": \"Azure Security Center\",\r\n        \"displayName\": \"Create incidents based on Azure Security Center alerts\",\r\n        \"description\": \"Create incidents based on all alerts generated in Azure Security Center\",\r\n        \"lastUpdatedDateUTC\": \"2019-07-16T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-16T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureSecurityCenter\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert (ASC)\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/223db5c1-1bf8-47d8-8806-bed401b356a4\",\r\n      \"name\": \"223db5c1-1bf8-47d8-8806-bed401b356a4\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeRange = 1d;\\nlet lookBack = 7d;\\nlet threshold_Failed = 5;\\nlet threshold_FailedwithSingleIP = 20;\\nlet threshold_IPAddressCount = 2;\\nlet isGUID = \\\"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\\\";\\nlet azPortalSignins = materialize(SigninLogs\\n| where TimeGenerated >= ago(lookBack)\\n// Azure Portal only\\n| where AppDisplayName =~ \\\"Azure Portal\\\")\\n;\\nlet successPortalSignins = azPortalSignins\\n| where TimeGenerated >= ago(timeRange)\\n// Azure Portal only and exclude non-failure Result Types\\n| where ResultType in (\\\"0\\\", \\\"50125\\\", \\\"50140\\\")\\n// Tagging identities not resolved to friendly names\\n//| extend Unresolved = iff(Identity matches regex isGUID, true, false)\\n| distinct TimeGenerated, UserPrincipalName, Id, ResultType\\n;\\nlet failPortalSignins = azPortalSignins\\n| where TimeGenerated >= ago(timeRange)\\n// Azure Portal only and exclude non-failure Result Types\\n| where ResultType !in (\\\"0\\\", \\\"50125\\\", \\\"50140\\\")\\n// Tagging identities not resolved to friendly names\\n| extend Unresolved = iff(Identity matches regex isGUID, true, false)\\n;\\n// Verify there is no success for the same connection attempt after the fail\\nlet failnoSuccess = failPortalSignins | join kind= leftouter (\\n   successPortalSignins \\n) on UserPrincipalName, Id\\n| where TimeGenerated > TimeGenerated1\\n| project-away TimeGenerated1, UserPrincipalName1, Id1, ResultType1\\n;\\n// Lookup up resolved identities from last 7 days\\nlet identityLookup = azPortalSignins\\n| where TimeGenerated >= ago(lookBack)\\n| where not(Identity matches regex isGUID)\\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;\\n// Join resolved names to unresolved list from portal signins\\nlet unresolvedNames = failnoSuccess | where Unresolved == true | join kind= inner (\\n   identityLookup \\n) on UserId\\n| extend UserDisplayName = lu_UserDisplayName, UserPrincipalName = lu_UserPrincipalName\\n| project-away lu_UserDisplayName, lu_UserPrincipalName;\\n// Join Signins that had resolved names with list of unresolved that now have a resolved name\\nlet u_azPortalSignins = failnoSuccess | where Unresolved == false | union unresolvedNames;\\nu_azPortalSignins\\n| extend Status = strcat(ResultType, \\\": \\\", ResultDescription), OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\\n| extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)\\n| summarize TimeGenerated = makelist(TimeGenerated), Status = makelist(Status), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress), FailedLogonCount = count()\\nby UserPrincipalName, UserId, UserDisplayName, AppDisplayName, Browser, OS, FullLocation\\n| mvexpand TimeGenerated, IPAddresses, Status\\n| extend TimeGenerated = todatetime(tostring(TimeGenerated)), IPAddress = tostring(IPAddresses), Status = tostring(Status)\\n| project-away IPAddresses\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, UserId, UserDisplayName, Status, FailedLogonCount, IPAddress, IPAddressCount, AppDisplayName, Browser, OS, FullLocation\\n| where (IPAddressCount >= threshold_IPAddressCount and FailedLogonCount >= threshold_Failed) or FailedLogonCount >= threshold_FailedwithSingleIP\\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P7D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Failed login attempts to Azure Portal\",\r\n        \"description\": \"Identifies failed login attempts in the Azure Active Directory SigninLogs to the Azure Portal.  Many failed logon \\nattempts or some failed logon attempts from multiple IPs could indicate a potential brute force attack.  \\nThe following are excluded due to success and non-failure results:\\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\\n0 - successful logon\\n50125 - Sign-in was interrupted due to a password reset or password registration entry.\\n50140 - This error occurred due to 'Keep me signed in' interrupt when the user was signing-in.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-11T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/87890d78-3e05-43ec-9ab9-ba32f4e01250\",\r\n      \"name\": \"87890d78-3e05-43ec-9ab9-ba32f4e01250\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\n//Create a list of TLDs in our threat feed for later validation\\nlet list_tlds = ThreatIntelligenceIndicator\\n| where TimeGenerated > ago(ioc_lookBack)\\n| where isnotempty(DomainName)\\n| extend parts = split(DomainName, '.')\\n| extend tld = parts[(array_length(parts)-1)]\\n| summarize count() by tostring(tld)\\n| summarize make_list(tld);\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(DomainName)\\n| join (\\n    SecurityAlert\\n    | where TimeGenerated > ago(dt_lookBack)\\n    //Extract domain patterns from message\\n    | extend domain = extract(\\\"(([a-z0-9]+(-[a-z0-9]+)*\\\\\\\\.)+[a-z]{2,})\\\", 1, tolower(Entities))\\n    | where isnotempty(domain)\\n    | extend parts = split(domain, '.')\\n    //Split out the TLD\\n    | extend tld = parts[(array_length(parts)-1)]\\n    //Validate parsed domain by checking if the TLD is in the list of TLDs in our threat feed\\n    | where tld in~ (list_tlds)\\n    // Converting Entities into dynamic data type and use mv-expand to unpack the array\\n    | extend EntitiesDynamicArray = parse_json(Entities) | mv-expand EntitiesDynamicArray\\n    // Parsing relevant entity column extract hostname and IP address\\n    | extend EntityType = tostring(parse_json(EntitiesDynamicArray).Type), EntityAddress = tostring(EntitiesDynamicArray.Address), EntityHostName = tostring(EntitiesDynamicArray.HostName)\\n    | extend HostName = iif(EntityType == 'host', EntityHostName, '')\\n    | extend IP_addr = iif(EntityType == 'ip', EntityAddress, '')\\n    | extend Alert_TimeGenerated = TimeGenerated\\n    | extend Alert_Description = Description\\n) on $left.DomainName==$right.domain\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Alert_TimeGenerated, AlertName, Alert_Description, ProviderName, AlertSeverity, ConfidenceLevel, HostName, IP_addr, Url\\n| extend timestamp = Alert_TimeGenerated, HostCustomEntity = HostName, IPCustomEntity = IP_addr, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map Domain entity to SecurityAlert\",\r\n        \"description\": \"Identifies a match in SecurityAlert table from any Domain IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"MicrosoftCloudAppSecurity\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureSecurityCenter\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/3d023f64-8225-41a2-9570-2bd7c2c4535e\",\r\n      \"name\": \"3d023f64-8225-41a2-9570-2bd7c2c4535e\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nlet spanoftime = 10m;\\nlet threshold = 0;\\nSecurityEvent \\n| where TimeGenerated > ago(2*timeframe) \\n// A user account was enabled\\n| where EventID == 4722\\n| where AccountType =~ \\\"User\\\"\\n| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \\nAccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid \\n| join kind= inner (\\n  SecurityEvent\\n  | where TimeGenerated > ago(timeframe) \\n  // A user account was disabled \\n  | where EventID == 4725\\n| where AccountType == \\\"User\\\"\\n| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \\nAccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid \\n) on Computer, TargetUserName\\n| where deletionTime - creationTime < spanoftime\\n| extend TimeDelta = deletionTime - creationTime\\n| where tolong(TimeDelta) >= threshold\\n| project TimeDelta, creationTime, CreateEventID, Computer, TargetUserName, UserPrincipalName, AccountUsedToCreate, \\ndeletionTime, DeleteEventID, AccountUsedToDelete\\n| extend timestamp = creationTime, AccountCustomEntity = AccountUsedToCreate, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"User account enabled and disabled within 10 mins\",\r\n        \"description\": \"Identifies when a user account is enabled and then disabled within 10 minutes. This can be an indication of compromise and\\nan adversary attempting to hide in the noise.\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"PrivilegeEscalation\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-14T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/712fab52-2a7d-401e-a08c-ff939cc7c25e\",\r\n      \"name\": \"712fab52-2a7d-401e-a08c-ff939cc7c25e\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(Url)\\n| join (\\n  AuditLogs\\n  | where TimeGenerated >= ago(dt_lookBack)\\n  // Extract the URL that is contained within the JSON data\\n  | extend Url = extract(\\\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\\\\\(\\\\\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+);\\\", 1,tostring(TargetResources))\\n  | where isnotempty(Url)\\n  | extend userPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\\n  | extend TargetResourceDisplayName = tostring(TargetResources[0].displayName)\\n  | extend Audit_TimeGenerated = TimeGenerated\\n) on Url\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore,\\nAudit_TimeGenerated, OperationName, Identity, userPrincipalName, TargetResourceDisplayName, Url\\n| extend timestamp = Audit_TimeGenerated, AccountCustomEntity = userPrincipalName, HostCustomEntity = TargetResourceDisplayName, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map URL entity to AuditLogs\",\r\n        \"description\": \"Identifies a match in AuditLogs from any URL IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/643c2025-9604-47c5-833f-7b4b9378a1f5\",\r\n      \"name\": \"643c2025-9604-47c5-833f-7b4b9378a1f5\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"//Adjust this threshold to fit your environment\\nlet signin_threshold = 5; \\n//Make a list of IPs with AAD signin failures above our threshold\\nlet Suspicious_signins = \\nSigninLogs\\n| where TimeGenerated >= ago(1d)\\n| where ResultType !in (\\\"0\\\", \\\"50125\\\", \\\"50140\\\")\\n| where IPAddress != \\\"127.0.0.1\\\"\\n| summarize count() by IPAddress\\n| where count_ >  signin_threshold\\n| summarize make_list(IPAddress);\\n//See if any of those IPs have sucessfully logged into the AWS console\\nAWSCloudTrail\\n| where TimeGenerated > ago(1d)\\n| where EventName =~ \\\"ConsoleLogin\\\"\\n| extend LoginResult = tostring(parse_json(ResponseElements).ConsoleLogin) \\n| where LoginResult =~ \\\"Success\\\"\\n| where SourceIpAddress in (Suspicious_signins)\\n| extend Reason = \\\"Multiple failed AAD logins from IP address\\\"\\n| extend MFAUsed = tostring(parse_json(AdditionalEventData).MFAUsed)\\n| extend User = iif(isempty(UserIdentityUserName), UserIdentityType, UserIdentityUserName) \\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by Reason, LoginResult, EventTypeName, UserIdentityType, User, AWSRegion, SourceIpAddress, UserAgent, MFAUsed\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = User, IPCustomEntity = SourceIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Failed AzureAD logons but success logon to AWS Console\",\r\n        \"description\": \"Identifies a list of IP addresses with a minimum number(defualt of 5) of failed logon attempts to Azure Active Directory.\\nUses that list to identify any successful AWS Console logons from these IPs within the same timeframe.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/65360bb0-8986-4ade-a89d-af3cf44d28aa\",\r\n      \"name\": \"65360bb0-8986-4ade-a89d-af3cf44d28aa\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet EventNameList = dynamic([\\\"CreateNetworkAclEntry\\\",\\\"CreateRoute\\\",\\\"CreateRouteTable\\\",\\\"CreateInternetGateway\\\",\\\"CreateNatGateway\\\"]);\\nAWSCloudTrail\\n| where TimeGenerated > ago(timeframe)\\n| where EventName in~ (EventNameList)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, \\nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Changes to Amazon VPC settings\",\r\n        \"description\": \"Amazon Virtual Private Cloud (Amazon VPC) lets you provision a logically isolated section of the AWS Cloud where you can launch AWS resources\\nin a virtual network that you define.\\nThis identifies changes to Amazon VPC (Virtual Private Cloud) settings such as new ACL entries,routes, routetable or Gateways.\\nMore information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255 \\nand AWS VPC API Docs: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/OperationList-query-vpc.html\",\r\n        \"tactics\": [\r\n          \"PrivilegeEscalation\",\r\n          \"LateralMovement\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/8675dd7a-795e-4d56-a79c-fc848c5ee61c\",\r\n      \"name\": \"8675dd7a-795e-4d56-a79c-fc848c5ee61c\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nProofPointTAPClicksPermitted_CL\\n| where TimeGenerated >= timeframe\\n| where classification_s =~ \\\"malware\\\"\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by TimeGenerated, Sender = sender_s, SenderIPAddress = senderIP_s, Recipient = recipient_s, TimeClicked = clickTime_t, URLClicked = url_s\\n| extend timestamp = StartTime, AccountCustomEntity = Recipient, IPCustomEntity = SenderIPAddress, URLCustomEntity = URLClicked\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Malware Link Clicked\",\r\n        \"description\": \"This query identifies a user clicking on an email link whose threat category is classified as a malware\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ProofpointTAP\",\r\n            \"dataTypes\": [\r\n              \"ProofPointTAPClicksPermitted_CL\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/28b42356-45af-40a6-a0b4-a554cdfd5d8a\",\r\n      \"name\": \"28b42356-45af-40a6-a0b4-a554cdfd5d8a\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let failureCountThreshold = 5;\\nlet successCountThreshold = 1;\\nlet timeRange = 1d;\\nlet authenticationWindow = 20m;\\nSigninLogs\\n| where TimeGenerated >= ago(timeRange)\\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)\\n| where AppDisplayName contains \\\"Azure Portal\\\"\\n// Split out failure versus non-failure types\\n| extend FailureOrSuccess = iff(ResultType in (\\\"0\\\", \\\"50125\\\", \\\"50140\\\", \\\"70043\\\", \\\"70044\\\"), \\\"Success\\\", \\\"Failure\\\")\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), IPAddress = makeset(IPAddress), makeset(OS), makeset(Browser), makeset(City), \\nmakeset(ResultType), FailureCount = countif(FailureOrSuccess==\\\"Failure\\\"), SuccessCount = countif(FailureOrSuccess==\\\"Success\\\") \\nby bin(TimeGenerated, authenticationWindow), UserDisplayName, UserPrincipalName, AppDisplayName\\n| where FailureCount >= failureCountThreshold and SuccessCount >= successCountThreshold\\n| mvexpand IPAddress\\n| extend IPAddress = tostring(IPAddress)\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Brute force attack against Azure Portal\",\r\n        \"description\": \"Identifies evidence of brute force activity against Azure Portal by highlighting multiple authentication failures \\nand by a successful authentication within a given time window. \\n(The query does not enforce any sequence - eg requiring the successful authentication to occur last.)\\nDefault Failure count is 5, Default Success count is 1 and default Time Window is 20 minutes.\\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-04-02T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/1572e66b-20a7-4012-9ec4-77ec4b101bc8\",\r\n      \"name\": \"1572e66b-20a7-4012-9ec4-77ec4b101bc8\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let starttime = 1d;\\nlet endtime = 1h;\\nlet prev23hThreshold = 4;\\nlet prev1hThreshold = 15;\\nlet Kerbevent =\\nSecurityEvent\\n| where TimeGenerated >= ago(starttime)\\n| where EventID == 4769\\n| parse EventData with * 'TicketEncryptionType\\\">' TicketEncryptionType \\\"<\\\" *\\n| where TicketEncryptionType == '0x17'\\n| parse EventData with * 'TicketOptions\\\">' TicketOptions \\\"<\\\" *\\n| where TicketOptions == '0x40810000'\\n| parse EventData with * 'Status\\\">' Status \\\"<\\\" *\\n| where Status == '0x0'\\n| parse EventData with * 'ServiceName\\\">' ServiceName \\\"<\\\" *\\n| where ServiceName !contains \\\"$\\\" and ServiceName !contains \\\"krbtgt\\\" \\n| parse EventData with * 'TargetUserName\\\">' TargetUserName \\\"<\\\" *\\n| where TargetUserName !contains \\\"$@\\\" and TargetUserName !contains ServiceName\\n| parse EventData with * 'IpAddress\\\">::ffff:' ClientIPAddress \\\"<\\\" *;\\nlet Kerbevent23h = Kerbevent\\n| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime)\\n| summarize ServiceNameCountPrev23h = dcount(ServiceName), ServiceNameSet23h = makeset(ServiceName) \\nby Computer, TargetUserName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status\\n| where ServiceNameCountPrev23h < prev23hThreshold;\\nlet Kerbevent1h = \\nKerbevent\\n| where TimeGenerated >= ago(endtime)\\n| summarize min(TimeGenerated), max(TimeGenerated), ServiceNameCountPrev1h = dcount(ServiceName), ServiceNameSet1h = makeset(ServiceName) \\nby Computer, TargetUserName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status;\\nKerbevent1h \\n| join kind=leftanti\\n(\\nKerbevent23h\\n) on TargetUserName\\n// Threshold value set above is based on testing, this value may need to be changed for your environment.\\n| where ServiceNameCountPrev1h > prev1hThreshold\\n| project StartTimeUtc = min_TimeGenerated, EndTimeUtc = max_TimeGenerated, TargetUserName, Computer, ClientIPAddress, TicketOptions, \\nTicketEncryptionType, Status, ServiceNameCountPrev1h, ServiceNameSet1h\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer, IPCustomEntity = ClientIPAddress\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Potential Kerberoasting\",\r\n        \"description\": \"A service principal name (SPN) is used to uniquely identify a service instance in a Windows environment. \\nEach SPN is usually associated with a service account. Organizations may have used service accounts with weak passwords in their environment. \\nAn attacker can try requesting Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC) which contains \\na hash of the Service account. This can then be used for offline cracking. This hunting query looks for accounts that are generating excessive \\nrequests to different resources within the last hour compared with the previous 24 hours.  Normal users would not make an unusually large number \\nof request within a small time window. This is based on 4769 events which can be very noisy so environment based tweaking might be needed.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-04-01T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/be52662c-3b23-435a-a6fa-f39bdfc849e6\",\r\n      \"name\": \"be52662c-3b23-435a-a6fa-f39bdfc849e6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet threshold = 10;\\nQualysHostDetection_CL\\n| where TimeGenerated >= timeframe\\n| mv-expand todynamic(Detections_s)\\n| where Detections_s.Severity == \\\"5\\\"\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by NetBios_s, IPAddress\\n| where count_ >= threshold\\n| extend timestamp = StartTime, HostCustomEntity = NetBios_s, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"High Number of Urgent Vulnerabilities Detected\",\r\n        \"description\": \"This Creates an incident when a host has a high number of Urgent, severity 5, vulnerabilities detected.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"QualysVulnerabilityManagement\",\r\n            \"dataTypes\": [\r\n              \"QualysHostDetection_CL\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/0dd422ee-e6af-4204-b219-f59ac172e4c6\",\r\n      \"name\": \"0dd422ee-e6af-4204-b219-f59ac172e4c6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"ThreatIntelligence\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"displayName\": \"(Preview) Microsoft Threat Intelligence Analytics\",\r\n        \"description\": \"This rule generates an alert when a Microsoft Threat Intelligence Indicator gets matched with your event logs. The alerts are very high fidelity and are turned ON by default. \\n\\nNote : It is advised to turn off any custom alert rules which match the threat intelligence indicators with the same event logs matched by this analytics to prevent duplicate alerts.\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"LateralMovement\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-09-15T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-02T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"CEF\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/24f8c234-d1ff-40ec-8b73-96b17a3a9c1c\",\r\n      \"name\": \"24f8c234-d1ff-40ec-8b73-96b17a3a9c1c\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe =1d;\\nlet EventCountThreshold = 25;\\nlet OperationList = dynamic(\\n[\\\"SecretGet\\\", \\\"KeyGet\\\", \\\"VaultGet\\\"]);\\nAzureDiagnostics\\n| where TimeGenerated > ago(timeframe)\\n| extend ResultType = columnifexists(\\\"ResultType\\\", \\\"None\\\"), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(\\\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\\\", \\\"None\\\")\\n| where ResultType !~ \\\"None\\\" and isnotempty(ResultType)\\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ \\\"None\\\" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\\n| where ResourceType =~ \\\"VAULTS\\\" and ResultType =~ \\\"Success\\\"\\n| where OperationName in (OperationList) \\n| summarize count() by identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, OperationName\\n| where count_ > EventCountThreshold  \\n| join (\\nAzureDiagnostics\\n| where TimeGenerated > ago(timeframe)\\n| extend ResultType = columnifexists(\\\"ResultType\\\", \\\"NoResultType\\\")\\n| extend requestUri_s = columnifexists(\\\"requestUri_s\\\", \\\"None\\\"), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(\\\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\\\", \\\"None\\\")\\n| extend id_s = columnifexists(\\\"id_s\\\", \\\"None\\\"), CallerIPAddress = columnifexists(\\\"CallerIPAddress\\\", \\\"None\\\"), clientInfo_s = columnifexists(\\\"clientInfo_s\\\", \\\"None\\\")\\n| where ResultType !~ \\\"None\\\" and isnotempty(ResultType)\\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ \\\"None\\\" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\\n| where id_s !~ \\\"None\\\" and isnotempty(id_s)\\n| where CallerIPAddress !~ \\\"None\\\" and isnotempty(CallerIPAddress)\\n| where clientInfo_s !~ \\\"None\\\" and isnotempty(clientInfo_s)\\n| where requestUri_s !~ \\\"None\\\" and isnotempty(requestUri_s)\\n| where OperationName in~ (OperationList)   \\n) on identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g \\n| summarize EventCount=sum(count_), StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated), TimeTriggered=makelist(TimeGenerated),OperationNameList=make_set(OperationName), RequestURLList=make_set(requestUri_s), CallerIPList = make_set(CallerIPAddress),  CallerIPMax= arg_max(CallerIPAddress,*) by ResourceType, ResultType, Resource, id_s, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, clientInfo_s\\n| extend timestamp = EndTimeUtc, IPCustomEntity = CallerIPMax, AccountCustomEntity = identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Mass secret retrieval from Azure Key Vault\",\r\n        \"description\": \"Identifies mass secret retrieval from Azure Key Vault observed by a single user. \\nMass secret retrival crossing a certain threshold is an indication of credential dump operations or mis-configured applications. \\nYou can tweak the EventCountThreshold based on average count seen in your environment \\nand also filter any known sources (IP/Account) and useragent combinations based on historical analysis to further reduce noise\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-01T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"WAF\",\r\n            \"dataTypes\": [\r\n              \"AzureDiagnostics\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/b31037ea-6f68-4fbd-bab2-d0d0f44c2fcf\",\r\n      \"name\": \"b31037ea-6f68-4fbd-bab2-d0d0f44c2fcf\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(Url)\\n| join (\\n  Syslog\\n  | where TimeGenerated >= ago(dt_lookBack)\\n  // Extract URL from the Syslog message but only take messages that include URLs\\n  | extend Url = extract(\\\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\\\\\(\\\\\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\\\", 1,SyslogMessage)\\n  | where isnotempty(Url)\\n  | extend Syslog_TimeGenerated = TimeGenerated\\n) on Url\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Syslog_TimeGenerated, SyslogMessage, Computer, ProcessName, Url, HostIP\\n| extend timestamp = Syslog_TimeGenerated, HostCustomEntity = Computer, IPCustomEntity = HostIP, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map URL entity to Syslog data\",\r\n        \"description\": \"Identifies a match in Syslog data from any URL IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Syslog\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/f948a32f-226c-4116-bddd-d95e91d97eb9\",\r\n      \"name\": \"f948a32f-226c-4116-bddd-d95e91d97eb9\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let detectionTime = 1d;\\nlet joinLookback = 14d;\\nAuditLogs\\n| where TimeGenerated > ago(detectionTime)\\n| where LoggedByService =~ \\\"Core Directory\\\"\\n| where Category =~ \\\"ApplicationManagement\\\"\\n| where OperationName =~ \\\"Consent to application\\\"\\n| where TargetResources has \\\"mailboxsettings\\\"\\n| extend AppDisplayName = TargetResources.[0].displayName\\n| extend AppClientId = tolower(TargetResources.[0].id)\\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\\\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\\\"] with (format=\\\"csv\\\")))\\n| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue\\n| parse ConsentFull with * \\\"ConsentType: \\\" GrantConsentType \\\", Scope: \\\" GrantScope1 \\\"]\\\" *\\n| where ConsentFull contains \\\"contacts.read\\\" and ConsentFull contains \\\"user.read\\\" and ConsentFull contains \\\"mail.read\\\" and ConsentFull contains \\\"notes.read.all\\\" and ConsentFull contains \\\"mailboxsettings.readwrite\\\" and ConsentFull contains \\\"Files.ReadWrite.All\\\"\\n| where GrantConsentType != \\\"AllPrincipals\\\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress)\\n| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)\\n| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ \\\"User-Agent\\\", AdditionalDetails[0].value, \\\"\\\")\\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\\n| join kind = leftouter (AuditLogs\\n| where TimeGenerated > ago(joinLookback)\\n| where LoggedByService =~ \\\"Core Directory\\\"\\n| where Category =~ \\\"ApplicationManagement\\\"\\n| where OperationName =~ \\\"Add service principal\\\"\\n| extend AppClientId = tolower(TargetResources[0].id)\\n| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has \\\"AddressType\\\", TargetResources[0].modifiedProperties[1].newValue, \\\"\\\")\\n| distinct AppClientId, tostring(AppReplyURLs)\\n)\\non AppClientId\\n| join kind = innerunique (AuditLogs\\n| where TimeGenerated > ago(joinLookback)\\n| where LoggedByService =~ \\\"Core Directory\\\"\\n| where Category =~ \\\"ApplicationManagement\\\"\\n| where OperationName =~ \\\"Add OAuth2PermissionGrant\\\" or OperationName =~ \\\"Add delegated permission grant\\\"\\n| extend GrantAuthentication = tostring(TargetResources[0].displayName)\\n| extend GrantOperation = OperationName\\n| project GrantAuthentication, GrantOperation, CorrelationId\\n) on CorrelationId\\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"displayName\": \"Suspicious application consent similar to O365 Attack Toolkit\",\r\n        \"description\": \"This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the MDSec O365 Attack Toolkit (https://github.com/mdsecactivebreach/o365-attack-toolkit).\\nThe default permissions/scope for the MDSec O365 Attack toolkit are contacts.read, user.read, mail.read, notes.read.all, mailboxsettings.readwrite, and files.readwrite.all.\\nConsent to applications with these permissions should be rare, especially as the knownApplications list is expanded, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\",\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-06-29T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-26T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/dcdf9bfc-c239-4764-a9f9-3612e6dff49c\",\r\n      \"name\": \"dcdf9bfc-c239-4764-a9f9-3612e6dff49c\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"// Adjust this to use a longer timeframe to identify ADFS servers\\nlet lookback = 6d;\\n// Adjust this to adjust the key export detection  timeframe\\nlet timeframe = 1d;\\n// Start be identifying ADFS servers to reduce FP chance\\nlet ADFS_Servers = (\\nEvent\\n| where TimeGenerated > ago(timeframe+lookback)\\n| where Source == \\\"Microsoft-Windows-Sysmon\\\"\\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\\n| mv-expand bagexpansion=array EventData\\n| evaluate bag_unpack(EventData)\\n| extend Key=tostring(['@Name']), Value=['#text']\\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\\n| extend process = split(Image, '\\\\\\\\', -1)[-1]\\n| where process =~ \\\"Microsoft.IdentityServer.ServiceHost.exe\\\"\\n| summarize by Computer);\\n// Look for ADFS servers where Named Pipes event are present\\nEvent\\n| where TimeGenerated > ago(timeframe)\\n| where Source == \\\"Microsoft-Windows-Sysmon\\\"\\n| where Computer in~ (ADFS_Servers)\\n| extend RenderedDescription = tostring(split(RenderedDescription, \\\":\\\")[0])\\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\\n| mv-expand bagexpansion=array EventData\\n| evaluate bag_unpack(EventData)\\n| extend Key=tostring(['@Name']), Value=['#text']\\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\\n| extend RuleName = column_ifexists(\\\"RuleName\\\", \\\"\\\"), TechniqueId = column_ifexists(\\\"TechniqueId\\\", \\\"\\\"),  TechniqueName = column_ifexists(\\\"TechniqueName\\\", \\\"\\\")\\n| parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName\\n| where EventID in (17,18)\\n// Look for Pipe related to querying the WID\\n| where PipeName == \\\"\\\\\\\\MICROSOFT##WID\\\\\\\\tsql\\\\\\\\query\\\"\\n| extend process = split(Image, '\\\\\\\\', -1)[-1]\\n// Exclude expected processes\\n| where process !in (\\\"Microsoft.IdentityServer.ServiceHost.exe\\\", \\\"Microsoft.Identity.Health.Adfs.PshSurrogate.exe\\\", \\\"AzureADConnect.exe\\\", \\\"Microsoft.Tri.Sensor.exe\\\", \\\"wsmprovhost.exe\\\",\\\"mmc.exe\\\", \\\"sqlservr.exe\\\")\\n| extend Operation = RenderedDescription\\n| project-reorder TimeGenerated, EventType, Operation, process, Image, Computer, UserName\\n| extend HostCustomEntity = Computer, AccountCustomEntity = UserName\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P7D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"ADFS Key Export (Sysmon)\",\r\n        \"description\": \"This detection uses Sysmon telemetry to detect potential ADFS certificate material export. \\nIn order to use this query you need to be collecting Sysmon EventIdD 17 and 18.\\nIf you do not have Sysmon data in your workspace this query will raise an error stating:\\nFailed to resolve scalar expression named \\\"[@Name]\",\r\n        \"tactics\": [\r\n          \"Collection\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-22T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-19T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/bfb1c90f-8006-4325-98be-c7fffbc254d6\",\r\n      \"name\": \"bfb1c90f-8006-4325-98be-c7fffbc254d6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeRange = 1d;\\nlet s_threshold = 30;\\nlet l_threshold = 3;\\nSigninLogs\\n| where TimeGenerated >= ago(timeRange)\\n| where OperationName =~ \\\"Sign-in activity\\\"\\n// Error codes that we want to look at as they are related to the use of incorrect password.\\n| where ResultType in (\\\"50126\\\", \\\"50053\\\" , \\\"50055\\\", \\\"50056\\\")\\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser \\n| extend LocationString= strcat(tostring(LocationDetails[\\\"countryOrRegion\\\"]), \\\"/\\\", tostring(LocationDetails[\\\"state\\\"]), \\\"/\\\", tostring(LocationDetails[\\\"city\\\"]))\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated),LocationCount=dcount(LocationString), Location = make_set(LocationString), \\nIPAddress = make_set(IPAddress), IPAddressCount = dcount(IPAddress), AppDisplayName = make_set(AppDisplayName), ResultDescription = make_set(ResultDescription), \\nBrowser = make_set(Browser), OS = make_set(OS), SigninCount = count() by UserPrincipalName                               \\n// Setting a generic threshold - Can be different for different environment\\n| where SigninCount > s_threshold and LocationCount >= l_threshold\\n| extend tostring(Location), tostring(IPAddress), tostring(AppDisplayName), tostring(ResultDescription), tostring(Browser), tostring(OS)\\n| distinct *\\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Distributed Password cracking attempts in AzureAD\",\r\n        \"description\": \"Identifies distributed password cracking attempts from the Azure Active Directory SigninLogs.\\nThe query looks for unusually high number of failed password attempts coming from multiple locations for a user account.\\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\\n50053   Account is locked because the user tried to sign in too many times with an incorrect user ID or password.\\n50055   Invalid password, entered expired password.\\n50056   Invalid or null password - Password does not exist in store for this user.\\n50126   Invalid username or password, or invalid on-premises username or password.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-11T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/85aca4d1-5d15-4001-abd9-acb86ca1786a\",\r\n      \"name\": \"85aca4d1-5d15-4001-abd9-acb86ca1786a\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\n//Create a list of TLDs in our threat feed for later validation\\nlet list_tlds = ThreatIntelligenceIndicator\\n| where TimeGenerated > ago(ioc_lookBack)\\n| where isnotempty(DomainName)\\n| extend parts = split(DomainName, '.')\\n| extend tld = parts[(array_length(parts)-1)]\\n| summarize count() by tostring(tld)\\n| summarize make_list(tld);\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(DomainName)\\n| join (\\n     DnsEvents\\n    | where TimeGenerated > ago(dt_lookBack)\\n    //Extract domain patterns from syslog message\\n    | where isnotempty(Name)\\n    | extend parts = split(Name, '.')\\n    //Split out the TLD\\n    | extend tld = parts[(array_length(parts)-1)]\\n    //Validate parsed domain by checking if the TLD is in the list of TLDs in our threat feed\\n    | where tld in~ (list_tlds)\\n    | extend DNS_TimeGenerated = TimeGenerated\\n) on $left.DomainName==$right.Name\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, DNS_TimeGenerated, Computer, ClientIP, Name, QueryType\\n| extend timestamp = DNS_TimeGenerated, HostCustomEntity = Computer, IPCustomEntity = ClientIP, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map Domain entity to DnsEvent\",\r\n        \"description\": \"Identifies a match in DnsEvent table from any Domain IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/9c712bb2-08dc-44d3-b66b-af154dfc1c4f\",\r\n      \"name\": \"9c712bb2-08dc-44d3-b66b-af154dfc1c4f\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Anomaly\",\r\n      \"properties\": {\r\n        \"severity\": \"Informational\",\r\n        \"anomalyDefinitionVersion\": \"1.0.0\",\r\n        \"techniques\": [\r\n          \"T1001\"\r\n        ],\r\n        \"customizableObservations\": {\r\n          \"multiSelectObservations\": null,\r\n          \"singleSelectObservations\": null,\r\n          \"prioritizeExcludeObservations\": null,\r\n          \"thresholdObservations\": [\r\n            {\r\n              \"minimum\": \"0\",\r\n              \"maximum\": \"1\",\r\n              \"value\": \"0.07\",\r\n              \"name\": \"Score\",\r\n              \"description\": \"Generate an anomaly when score is greater than the chosen value\",\r\n              \"sequenceNumber\": 1,\r\n              \"rerun\": \"NotRequired\"\r\n            }\r\n          ]\r\n        },\r\n        \"frequency\": \"P1D\",\r\n        \"displayName\": \"(Preview) Suspicious volume of logins to computer\",\r\n        \"description\": \"This algorithm is to detect unusually high volume of successful logins per computer. The model is trained on the previous 21 days of security event ID 4624 on a computer. It indicates anomalous high volume of successful logons in the last day\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-19T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-11-19T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvents\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/7a58b253-0ef2-4248-b4e5-c350f15a8346\",\r\n      \"name\": \"7a58b253-0ef2-4248-b4e5-c350f15a8346\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet threshold = 100;\\nSymantecProxySG \\n| where TimeGenerated >= timeframe\\n| where sc_filter_result =~ \\\"DENIED\\\"\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by c_ip, cs_host\\n| where count_ > threshold\\n| extend timestamp = StartTime, HostCustomEntity = cs_host, IPCustomEntity = c_ip\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Excessive Denied Proxy Traffic\",\r\n        \"description\": \"This alert creates an incident when a client generates an excessive amounts of denied proxy traffic.\",\r\n        \"tactics\": [\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-06T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SymantecProxySG\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a2e0eb51-1f11-461a-999b-cd0ebe5c7a72\",\r\n      \"name\": \"a2e0eb51-1f11-461a-999b-cd0ebe5c7a72\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"MicrosoftSecurityIncidentCreation\",\r\n      \"properties\": {\r\n        \"productFilter\": \"Azure Security Center for IoT\",\r\n        \"displayName\": \"Create incidents based on Azure Security Center for IoT alerts\",\r\n        \"description\": \"Create incidents based on all alerts generated in Azure Security Center for IoT\",\r\n        \"lastUpdatedDateUTC\": \"2019-12-24T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-12-24T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"IoT\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert (ASC for IoT)\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 2\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/7ee72a9e-2e54-459c-bc8a-8c08a6532a63\",\r\n      \"name\": \"7ee72a9e-2e54-459c-bc8a-8c08a6532a63\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let timeframe = 1d;\\nlet IPList = dynamic([\\\"154.223.45.38\\\",\\\"185.141.207.140\\\",\\\"185.234.73.19\\\",\\\"216.245.210.106\\\",\\\"51.91.48.210\\\",\\\"46.255.230.229\\\"]);\\n(union isfuzzy=true\\n(CommonSecurityLog\\n| where TimeGenerated >= ago(timeframe) \\n| where isnotempty(SourceIP) or isnotempty(DestinationIP)\\n| where SourceIP in (IPList) or DestinationIP in (IPList) or Message has_any (IPList)\\n| extend IPMatch = case(SourceIP in (IPList), \\\"SourceIP\\\", DestinationIP in (IPList), \\\"DestinationIP\\\", \\\"Message\\\") \\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP, DestinationIP, DeviceProduct, DeviceAction, Message, Protocol, SourcePort, DestinationPort, DeviceAddress, DeviceName, IPMatch\\n| extend timestamp = StartTimeUtc, IPCustomEntity = case(IPMatch == \\\"SourceIP\\\", SourceIP, IPMatch == \\\"DestinationIP\\\", DestinationIP, \\\"IP in Message Field\\\") \\n),\\n(OfficeActivity\\n| where TimeGenerated >= ago(timeframe) \\n|extend SourceIPAddress = ClientIP, Account = UserId\\n| where  SourceIPAddress in (IPList)\\n| extend timestamp = TimeGenerated , IPCustomEntity = SourceIPAddress , AccountCustomEntity = Account\\n),\\n(DnsEvents \\n| where TimeGenerated >= ago(timeframe) \\n| extend DestinationIPAddress = IPAddresses,  Host = Computer\\n| where  DestinationIPAddress has_any (IPList) \\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host\\n),\\n(VMConnection \\n| where TimeGenerated >= ago(timeframe) \\n| where isnotempty(SourceIp) or isnotempty(DestinationIp) \\n| where SourceIp in (IPList) or DestinationIp in (IPList) \\n| extend IPMatch = case( SourceIp in (IPList), \\\"SourceIP\\\", DestinationIp in (IPList), \\\"DestinationIP\\\", \\\"None\\\") \\n| extend timestamp = TimeGenerated , IPCustomEntity = case(IPMatch == \\\"SourceIP\\\", SourceIp, IPMatch == \\\"DestinationIP\\\", DestinationIp, \\\"None\\\"), Host = Computer\\n),\\n(Event\\n| where TimeGenerated >= ago(timeframe)\\n| where Source == \\\"Microsoft-Windows-Sysmon\\\"\\n| where EventID == 3\\n| extend EvData = parse_xml(EventData)\\n| extend EventDetail = EvData.DataItem.EventData.Data\\n| extend SourceIP = EventDetail.[9].[\\\"#text\\\"], DestinationIP = EventDetail.[14].[\\\"#text\\\"]\\n| where SourceIP in (IPList) or DestinationIP in (IPList) \\n| extend IPMatch = case( SourceIP in (IPList), \\\"SourceIP\\\", DestinationIP in (IPList), \\\"DestinationIP\\\", \\\"None\\\") \\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserName, HostCustomEntity = Computer , IPCustomEntity = case(IPMatch == \\\"SourceIP\\\", SourceIP, IPMatch == \\\"DestinationIP\\\", DestinationIP, \\\"None\\\")\\n), \\n(WireData \\n| where TimeGenerated >= ago(timeframe)\\n| where isnotempty(RemoteIP)\\n| where RemoteIP in (IPList)\\n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = Computer\\n),\\n(SigninLogs\\n| where TimeGenerated >= ago(timeframe)\\n| where isnotempty(IPAddress)\\n| where IPAddress in (IPList)\\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\\n),\\n(W3CIISLog \\n| where TimeGenerated >= ago(timeframe)\\n| where isnotempty(cIP)\\n| where cIP in (IPList)\\n| extend timestamp = TimeGenerated, IPCustomEntity = cIP, HostCustomEntity = Computer, AccountCustomEntity = csUserName\\n),\\n(AzureActivity \\n| where TimeGenerated >= ago(timeframe)\\n| where isnotempty(CallerIpAddress)\\n| where CallerIpAddress in (IPList)\\n| extend timestamp = TimeGenerated, IPCustomEntity = CallerIpAddress, AccountCustomEntity = Caller\\n),\\n(\\nAWSCloudTrail\\n| where TimeGenerated >= ago(timeframe)\\n| where isnotempty(SourceIpAddress)\\n| where SourceIpAddress in (IPList)\\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\\n)\\n)\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Known IRIDIUM IP\",\r\n        \"description\": \"IRIDIUM command and control IP. Identifies a match across various data feeds for IP IOCs related to the IRIDIUM activity group.\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-12-16T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(VMInsights)\",\r\n            \"dataTypes\": [\r\n              \"VMConnection\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(WireData)\",\r\n            \"dataTypes\": [\r\n              \"WireData\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(IIS)\",\r\n            \"dataTypes\": [\r\n              \"W3CIISLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureActivity\",\r\n            \"dataTypes\": [\r\n              \"AzureActivity\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/106813db-679e-4382-a51b-1bfc463befc3\",\r\n      \"name\": \"106813db-679e-4382-a51b-1bfc463befc3\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(Url)\\n| join (\\n  CommonSecurityLog\\n  | extend IngestionTime = ingestion_time()\\n  | where IngestionTime > ago(dt_lookBack)\\n  // Select on Palo Alto logs\\n  | where DeviceVendor =~ \\\"Palo Alto Networks\\\"\\n  | where DeviceEventClassID =~ 'url'\\n  //Uncomment the line below to only alert on allowed connections\\n  //| where DeviceAction !~ \\\"block-url\\\"\\n  //Select logs where URL data is populated\\n  | extend PA_Url = columnifexists(\\\"RequestURL\\\", \\\"None\\\")\\n  | extend PA_Url = iif(isempty(PA_Url), extract(\\\"([^\\\\\\\"]+)\\\", 1, tolower(AdditionalExtensions)), trim('\\\"', PA_Url))\\n  | extend PA_Url = iif(PA_Url !startswith \\\"http://\\\" and ApplicationProtocol !~ \\\"ssl\\\", strcat('http://', PA_Url), iif(PA_Url !startswith \\\"https://\\\" and ApplicationProtocol =~ \\\"ssl\\\", strcat('https://', PA_Url), PA_Url))\\n  | where isnotempty(PA_Url)\\n  | extend CSL_TimeGenerated = TimeGenerated\\n) on $left.Url == $right.PA_Url\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DeviceAction, SourceIP, CSL_TimeGenerated, PA_Url, DeviceName\\n| extend timestamp = CSL_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, URLCustomEntity = PA_Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map URL entity to PaloAlto data\",\r\n        \"description\": \"Identifies a match in PaloAlto data from any URL IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a22740ec-fc1e-4c91-8de6-c29c6450ad00\",\r\n      \"name\": \"a22740ec-fc1e-4c91-8de6-c29c6450ad00\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"SigninLogs\\n| where ResultType == 500121\\n| where Status has \\\"MFA Denied; user declined the authentication\\\"\\n| extend AccountCustomEntity = AlternateSignInName\\n| extend IPCustomEntity = IPAddress\\n| extend URLCustomEntity = ClientAppUsed\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Explicit MFA Deny\",\r\n        \"description\": \"User explicitly denies MFA push, indicating that login was not expected and the account's password may be compromised.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-10-14T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/69b7723c-2889-469f-8b55-a2d355ed9c87\",\r\n      \"name\": \"69b7723c-2889-469f-8b55-a2d355ed9c87\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\\n// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\\n// Taking the first non-empty value based on potential IOC match availability\\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\\n| join (\\n    DnsEvents | where TimeGenerated >= ago(dt_lookBack)\\n    | where SubType =~ \\\"LookupQuery\\\" and isnotempty(IPAddresses)\\n    | extend SingleIP = split(IPAddresses, \\\",\\\")\\n    | mvexpand SingleIP\\n    | extend SingleIP = tostring(SingleIP)\\n    // renaming time column so it is clear the log this came from\\n    | extend DNS_TimeGenerated = TimeGenerated\\n)\\non $left.TI_ipEntity == $right.SingleIP\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, DNS_TimeGenerated,\\nTI_ipEntity, Computer, EventId, SubType, ClientIP, Name, IPAddresses, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress\\n| extend timestamp = DNS_TimeGenerated, IPCustomEntity = ClientIP, HostCustomEntity = Computer, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map IP entity to DnsEvents\",\r\n        \"description\": \"Identifies a match in DnsEvents from any IP IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/427e4c9e-8cf4-4094-a684-a2d060dbca38\",\r\n      \"name\": \"427e4c9e-8cf4-4094-a684-a2d060dbca38\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet threshold = 50;\\nSophosXGFirewall\\n| where TimeGenerated >= timeframe\\n| where Log_Type =~ \\\"Firewall\\\"\\n| where not(ipv4_is_match(\\\"10.0.0.0\\\",Src_IP,8) or ipv4_is_match(\\\"172.16.0.0\\\",Src_IP,12) or ipv4_is_match(\\\"192.168.0.0\\\",Src_IP,16))\\n| summarize dcount(Dst_Port) by Src_IP, bin(TimeGenerated, 5m)\\n| where dcount_Dst_Port > threshold\\n| extend timestamp = TimeGenerated, IPCustomEntity = Src_IP\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Port Scan Detected\",\r\n        \"description\": \"This alert creates an incident when a source IP addresses attempt to communicate with a large amount of distinct ports within a short period.\",\r\n        \"tactics\": [\r\n          \"Discovery\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-07-08T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SophosXGFirewall\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a04cf847-a832-4c60-b687-b0b6147da219\",\r\n      \"name\": \"a04cf847-a832-4c60-b687-b0b6147da219\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let timeframe = 1d;\\nlet IPList = dynamic([\\\"45.63.52.41\\\",\\\"140.82.17.161\\\",\\\"207.148.101.95\\\",\\\"45.32.87.51\\\",\\\"66.42.98.156\\\",\\\"45.76.144.105\\\",\\\"217.163.28.35\\\",\\\"45.32.141.174\\\",\\\"149.28.165.249\\\",\\\"209.250.225.247\\\",\\\"45.63.100.115\\\",\\\"95.179.229.230\\\",\\\"209.250.233.247\\\",\\\"45.77.121.232\\\",\\\"45.76.175.65\\\",\\\"104.238.160.237\\\",\\\"45.77.181.97\\\",\\\"95.179.192.125\\\",\\\"149.28.93.184\\\",\\\"140.82.16.81\\\",\\\"45.76.173.103\\\",\\\"45.77.255.22\\\",\\\"45.32.11.71\\\",\\\"149.28.77.26\\\",\\\"45.32.54.50\\\",\\\"104.156.233.156\\\",\\\"45.32.21.118\\\",\\\"45.63.62.109\\\",\\\"45.77.244.202\\\",\\\"149.248.11.205\\\",\\\"104.238.190.244\\\"]);\\nlet IOCTerms = \\\"\\\\\\\\?lang=[/..]*/dev/cmdb/sslvpn_websession|/dana-na/jam/[/..]*home/webserver/htdocs/dana/html5acc/guacamole[/..]*etc/passwd\\\\\\\\?\\\";\\n(union isfuzzy=true\\n(CommonSecurityLog\\n| where TimeGenerated >= ago(1d) \\n| where isnotempty(SourceIP) or isnotempty(DestinationIP)\\n| where SourceIP in (IPList) or DestinationIP in (IPList) or Message has_any (IPList)\\n| extend IPMatch = case(\\nSourceIP in (IPList), \\\"SourceIP\\\", \\nDestinationIP in (IPList), \\\"DestinationIP\\\",\\n\\\"Message\\\") \\n| where Message matches regex IOCTerms\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP, DestinationIP, DeviceProduct, DeviceAction, Message, Protocol, SourcePort, DestinationPort, DeviceAddress, DeviceName, IPMatch\\n| extend timestamp = StartTimeUtc, IPCustomEntity = case(IPMatch == \\\"SourceIP\\\", SourceIP, IPMatch == \\\"DestinationIP\\\", DestinationIP, \\\"IP in Message Field\\\") \\n),\\n(OfficeActivity\\n| where TimeGenerated >= ago(1d) \\n| where isnotempty(UserAgent) and ClientIP in (IPList)\\n| where UserAgent contains \\\"ExchangeServicesClient/0.0.0.0\\\"\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP = ClientIP, Account = UserId, Type, RecordType, OfficeWorkload, UserAgent, OfficeObjectId, IPMatch = \\\"ClientIP\\\"\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, IPCustomEntity = SourceIP\\n)\\n)\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Known Manganese IP and UserAgent activity\",\r\n        \"description\": \"Matches IP plus UserAgent IOCs in OfficeActivity data, along with IP plus Connection string information in the CommonSecurityLog data related to Manganese group activity.\\nReferences: \\nhttps://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44101/\\nhttps://fortiguard.com/psirt/FG-IR-18-384\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"Collection\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-10-02T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/9736e5f1-7b6e-4bfb-a708-e53ff1d182c3\",\r\n      \"name\": \"9736e5f1-7b6e-4bfb-a708-e53ff1d182c3\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet tokens = dynamic([\\\"416\\\",\\\"208\\\",\\\"128\\\",\\\"120\\\",\\\"96\\\",\\\"80\\\",\\\"72\\\",\\\"64\\\",\\\"48\\\",\\\"44\\\",\\\"40\\\",\\\"g5\\\",\\\"gs5\\\",\\\"g4\\\",\\\"gs4\\\",\\\"nc12\\\",\\\"nc24\\\",\\\"nv12\\\"]);\\nlet operationList = dynamic([\\\"Create or Update Virtual Machine\\\", \\\"Create Deployment\\\"]);\\nAzureActivity\\n| where TimeGenerated >= ago(timeframe)\\n| where OperationName in (operationList)\\n| where ActivityStatus == \\\"Accepted\\\" \\n| where isnotempty(Properties)\\n| extend vmSize = tolower(tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).hardwareProfile)).vmSize))\\n| where isnotempty(vmSize)\\n| where vmSize has_any (tokens) \\n| extend ComputerName = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).osProfile)).computerName)\\n| extend clientIpAddress = tostring(parse_json(HTTPRequest).clientIpAddress)\\n| project TimeGenerated, OperationName, ActivityStatus, Caller, CallerIpAddress, ComputerName, vmSize\\n| extend timestamp = TimeGenerated, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 1,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Creation of expensive computes in Azure\",\r\n        \"description\": \"Identifies the creation of large size/expensive VMs (GPU or with large no of virtual CPUs) in Azure.\\nAdversary may create new or update existing virtual machines sizes to evade defenses \\nor use it for cryptomining purposes.\\nFor Windows/Linux Vm Sizes - https://docs.microsoft.com/azure/virtual-machines/windows/sizes \\nAzure VM Naming Conventions - https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions\",\r\n        \"tactics\": [\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActivity\",\r\n            \"dataTypes\": [\r\n              \"AzureActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/d25b1998-a592-4bc5-8a3a-92b39eedb1bc\",\r\n      \"name\": \"d25b1998-a592-4bc5-8a3a-92b39eedb1bc\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nAWSCloudTrail\\n| where TimeGenerated > ago(timeframe)\\n| where EventName =~ \\\"ConsoleLogin\\\" \\n| extend MFAUsed = tostring(parse_json(AdditionalEventData).MFAUsed), LoginResult = tostring(parse_json(ResponseElements).ConsoleLogin)\\n| where MFAUsed !~ \\\"Yes\\\" and LoginResult !~ \\\"Failure\\\"\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, LoginResult, MFAUsed, UserIdentityAccountId,  UserIdentityPrincipalid, UserAgent, \\nUserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Login to AWS Management Console without MFA\",\r\n        \"description\": \"Multi-Factor Authentication (MFA) helps you to prevent credential compromise. This alert identifies logins to the AWS Management Console without MFA.\\nYou can limit this detection to trigger for adminsitrative accounts if you do not have MFA enabled on all accounts.\\nThis is done by looking at the eventName ConsoleLogin and if the AdditionalEventData field indicates MFA was NOT used \\nand the ResponseElements field indicates NOT a Failure. Thereby indicating that a non-MFA login was successful.\",\r\n        \"tactics\": [\r\n          \"DefenseEvasion\",\r\n          \"PrivilegeEscalation\",\r\n          \"Persistence\",\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/b8266f81-2715-41a6-9062-42486cbc9c73\",\r\n      \"name\": \"b8266f81-2715-41a6-9062-42486cbc9c73\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1h;\\nlet threshold = 200;\\nInfobloxNIOS\\n| where TimeGenerated >= ago(timeframe)\\n| where ProcessName =~ \\\"named\\\" and Log_Type =~ \\\"client\\\"\\n| where isnotempty(ResponseCode)\\n| where ResponseCode =~ \\\"NXDOMAIN\\\"\\n| summarize count() by Client_IP, bin(TimeGenerated,15m)\\n| where count_ > threshold\\n| join kind=inner (InfobloxNIOS\\n    | where TimeGenerated >= ago(timeframe)\\n    | where ProcessName =~ \\\"named\\\" and Log_Type =~ \\\"client\\\"\\n    | where isnotempty(ResponseCode)\\n    | where ResponseCode =~ \\\"NXDOMAIN\\\"\\n    ) on Client_IP\\n| extend timestamp = TimeGenerated, IPCustomEntity = Client_IP\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Excessive NXDOMAIN DNS Queries\",\r\n        \"description\": \"This creates an incident in the event a client generates excessive amounts of DNS queries for non-existent domains.\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-06T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"InfobloxNIOS\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/b4ceb583-4c44-4555-8ecf-39f572e827ba\",\r\n      \"name\": \"b4ceb583-4c44-4555-8ecf-39f572e827ba\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let starttime = 14d;\\nlet endtime = 1d;\\nlet timeframe = 1h;\\nlet scorethreshold = 1.5;\\nlet percentthreshold = 50;\\n// Preparing the time series data aggregated hourly count of MailItemsAccessd Operation in the form of multi-value array to use with time series anomaly function.\\nlet TimeSeriesData = \\nOfficeActivity \\n| where TimeGenerated  between (startofday(ago(starttime))..startofday(ago(endtime)))\\n| where OfficeWorkload=~ \\\"Exchange\\\" and Operation =~ \\\"MailItemsAccessed\\\" and ResultStatus =~ \\\"Succeeded\\\"\\n| project TimeGenerated, Operation, MailboxOwnerUPN \\n| make-series Total=count() on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe;\\nlet TimeSeriesAlerts = TimeSeriesData\\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, scorethreshold, -1, 'linefit')\\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\\n| where anomalies > 0\\n| project TimeGenerated, Total, baseline, anomalies, score;\\n// Joining the flagged outlier from the previous step with the original dataset to present contextual information\\n// during the anomalyhour to analysts to conduct investigation or informed decisions.\\nTimeSeriesAlerts | where TimeGenerated > ago(2d)\\n// Join against base logs since specified timeframe to retrive records associated with the hour of anomoly\\n| join ( \\n    OfficeActivity \\n| where TimeGenerated > ago(2d)\\n| where OfficeWorkload=~ \\\"Exchange\\\" and Operation =~ \\\"MailItemsAccessed\\\" and ResultStatus =~ \\\"Succeeded\\\"\\n) on TimeGenerated\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Exchange workflow MailItemsAccessed operation anomaly\",\r\n        \"description\": \"Identifies anomalous increases in Exchange mail items accessed operations. \\nThe query leverages KQL built-in anomaly detection algorithms to find large deviations from baseline patterns. \\nSudden increases in execution frequency of sensitive actions should be further investigated for malicious activity.\\nManually change scorethreshold from 1.5 to 3 or higher to reduce the noise based on outliers flagged from the query criteria.\\nRead more about MailItemsAccessed- https://docs.microsoft.com/microsoft-365/compliance/advanced-audit?view=o365-worldwide#mailitemsaccessed\",\r\n        \"tactics\": [\r\n          \"Collection\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-10T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-10T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/173f8699-6af5-484a-8b06-8c47ba89b380\",\r\n      \"name\": \"173f8699-6af5-484a-8b06-8c47ba89b380\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"// Adjust this value to change how many Teams should be deleted before including\\nlet max_delete_count = 3;\\n// Adjust this value to change the timewindow the query runs over\\n  OfficeActivity\\n| where OfficeWorkload =~ \\\"MicrosoftTeams\\\" \\n| where Operation =~ \\\"TeamDeleted\\\"\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DeletedTeams = make_set(TeamName) by UserId\\n| where array_length(DeletedTeams) > max_delete_count\\n| extend timestamp = StartTime, AccountCustomEntity = UserId\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Multiple Teams deleted by a single user\",\r\n        \"description\": \"This detection flags the occurrences of deleting multiple teams within an hour.\\nThis data is a part of Office 365 Connector in Azure Sentinel.\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-09-13T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity (Teams)\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2560515c-07d1-434e-87fb-ebe3af267760\",\r\n      \"name\": \"2560515c-07d1-434e-87fb-ebe3af267760\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"AuditLogs\\n| where Category =~ \\\"ApplicationManagement\\\"\\n| where ActivityDisplayName =~ \\\"Add delegated permission grant\\\"\\n| where Result =~ \\\"success\\\"\\n| where tostring(InitiatedBy.user.userPrincipalName) has \\\"@\\\" or tostring(InitiatedBy.app.displayName) has \\\"@\\\"\\n| extend props = parse_json(tostring(TargetResources[0].modifiedProperties))\\n| mv-expand props\\n| extend UserAgent = tostring(AdditionalDetails[0].value)\\n| extend InitiatingUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\\n| extend UserIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\\n| extend DisplayName = tostring(props.displayName)\\n| extend Permissions = tostring(parse_json(tostring(props.newValue)))\\n| where Permissions has_any (\\\"Mail.Read\\\", \\\"Mail.ReadWrite\\\")\\n| extend PermissionsAddedTo = tostring(TargetResources[0].displayName)\\n| extend Type = tostring(TargetResources[0].type)\\n| project-away props\\n| join kind=leftouter(\\n  AuditLogs\\n  | where ActivityDisplayName has \\\"Consent to application\\\"\\n  | extend AppName = tostring(TargetResources[0].displayName)\\n  | extend AppId = tostring(TargetResources[0].id)\\n  | project AppName, AppId, CorrelationId) on CorrelationId\\n| project-reorder TimeGenerated, OperationName, InitiatingUser, UserIPAddress, UserAgent, PermissionsAddedTo, Permissions, AppName, AppId, CorrelationId\\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatingUser, IPCustomEntity = UserIPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Mail.Read Permissions Granted to Application\",\r\n        \"description\": \"This query look for applications that have been granted permissions to Read Mail (Permissions field has Mail.Read) and subsequently has been consented to. This can help identify applications that have been abused to gain access to mailboxes.\",\r\n        \"tactics\": [\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-19T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-19T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/19e01883-15d8-4eb6-a7a5-3276cd668388\",\r\n      \"name\": \"19e01883-15d8-4eb6-a7a5-3276cd668388\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeFrame = 1d;\\nlet timeBin = 1m;\\nlet failedThreshold = 20;\\nW3CIISLog\\n| where TimeGenerated >= ago(timeFrame)\\n| where scStatus in (\\\"401\\\",\\\"403\\\")\\n| where csUserName != \\\"-\\\"\\n| extend scStatusFull = strcat(scStatus, \\\".\\\",scSubStatus) \\n// Map common IIS codes\\n| extend scStatusFull_Friendly = case(\\nscStatusFull == \\\"401.0\\\", \\\"Access denied.\\\",\\nscStatusFull == \\\"401.1\\\", \\\"Logon failed.\\\",\\nscStatusFull == \\\"401.2\\\", \\\"Logon failed due to server configuration.\\\",\\nscStatusFull == \\\"401.3\\\", \\\"Unauthorized due to ACL on resource.\\\",\\nscStatusFull == \\\"401.4\\\", \\\"Authorization failed by filter.\\\",\\nscStatusFull == \\\"401.5\\\", \\\"Authorization failed by ISAPI/CGI application.\\\",\\nscStatusFull == \\\"403.0\\\", \\\"Forbidden.\\\",\\nscStatusFull == \\\"403.4\\\", \\\"SSL required.\\\",\\n\\\"See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\\\")\\n// Mapping to Hex so can be mapped using website in comments above\\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) \\n// Map common win32 codes\\n| extend scWin32Status_Friendly = case(\\nscWin32Status_Hex =~ \\\"775\\\", \\\"The referenced account is currently locked out and cannot be logged on to.\\\",\\nscWin32Status_Hex =~ \\\"52e\\\", \\\"Logon failure: Unknown user name or bad password.\\\",\\nscWin32Status_Hex =~ \\\"532\\\", \\\"Logon failure: The specified account password has expired.\\\",\\nscWin32Status_Hex =~ \\\"533\\\", \\\"Logon failure: Account currently disabled.\\\", \\nscWin32Status_Hex =~ \\\"2ee2\\\", \\\"The request has timed out.\\\", \\nscWin32Status_Hex =~ \\\"0\\\", \\\"The operation completed successfully.\\\", \\nscWin32Status_Hex =~ \\\"1\\\", \\\"Incorrect function.\\\", \\nscWin32Status_Hex =~ \\\"2\\\", \\\"The system cannot find the file specified.\\\", \\nscWin32Status_Hex =~ \\\"3\\\", \\\"The system cannot find the path specified.\\\", \\nscWin32Status_Hex =~ \\\"4\\\", \\\"The system cannot open the file.\\\", \\nscWin32Status_Hex =~ \\\"5\\\", \\\"Access is denied.\\\", \\nscWin32Status_Hex =~ \\\"8009030e\\\", \\\"SEC_E_NO_CREDENTIALS\\\", \\nscWin32Status_Hex =~ \\\"8009030C\\\", \\\"SEC_E_LOGON_DENIED\\\", \\n\\\"See - https://msdn.microsoft.com/library/cc231199.aspx\\\")\\n// decode URI when available\\n| extend decodedUriQuery = url_decode(csUriQuery)\\n// Count of failed attempts from same client IP\\n| summarize makeset(decodedUriQuery), makeset(csUserName), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), FailedConnectionsCount = count() by bin(TimeGenerated, timeBin), cIP, Computer, sIP\\n| where FailedConnectionsCount >= failedThreshold\\n| project TimeGenerated, cIP, set_csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_sPort, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, FailedConnectionsCount\\n| order by FailedConnectionsCount\\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, IPCustomEntity = cIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"High count of failed attempts from same client IP\",\r\n        \"description\": \"Identifies when 20 or more failed attempts from a given client IP in 1 minute occur on the IIS server.\\nThis could be indicative of an attempted brute force. This could also simply indicate a misconfigured service or device.\\nRecommendations: Validate that these are expected connections from the given Client IP.  If the client IP is not recognized, \\npotentially block these connections at the edge device.\\nIf these are expected connections, verify the credentials are properly configured on the system, service, application or device \\nthat is associated with the client IP.\\nReferences:\\nIIS status code mapping: https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\\nWin32 Status code mapping: https://msdn.microsoft.com/library/cc231199.aspx\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-03-19T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureMonitor(IIS)\",\r\n            \"dataTypes\": [\r\n              \"W3CIISLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/5e45930c-09b1-4430-b2d1-cc75ada0dc0f\",\r\n      \"name\": \"5e45930c-09b1-4430-b2d1-cc75ada0dc0f\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\\n// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\\n// Taking the first non-empty value based on potential IOC match availability\\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\\n| join (\\n    W3CIISLog\\n    | where TimeGenerated >= ago(dt_lookBack)\\n    | where isnotempty(cIP)\\n    // renaming time column so it is clear the log this came from\\n    | extend W3CIISLog_TimeGenerated = TimeGenerated\\n)\\non $left.TI_ipEntity == $right.cIP\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\\nW3CIISLog_TimeGenerated, TI_ipEntity, Computer, sSiteName, cIP, sIP, sPort, csMethod, csUserName, scStatus, scSubStatus, scWin32Status,\\nNetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress\\n| extend timestamp = W3CIISLog_TimeGenerated, IPCustomEntity = cIP, HostCustomEntity = Computer, AccountCustomEntity = csUserName, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map IP entity to W3CIISLog\",\r\n        \"description\": \"Identifies a match in W3CIISLog from any IP IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(IIS)\",\r\n            \"dataTypes\": [\r\n              \"W3CIISLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/ba144bf8-75b8-406f-9420-ed74397f9479\",\r\n      \"name\": \"ba144bf8-75b8-406f-9420-ed74397f9479\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\n//Set a threshold of failed AAD signins from an IP address within 1 day above which we want to deem those logins suspicious.\\nlet signin_threshold = 5; \\n//Make a list of IPs with AAD signin failures above our threshold.\\nlet suspicious_signins = \\n    SigninLogs\\n    | where TimeGenerated >= ago(timeframe)\\n    //Looking for logon failure results\\n    | where ResultType !in (\\\"0\\\", \\\"50125\\\", \\\"50140\\\")\\n    //Exclude localhost addresses to reduce the chance of FPs\\n    | where IPAddress != \\\"127.0.0.1\\\"\\n    | summarize count() by IPAddress\\n    | where count_ >  signin_threshold\\n    | summarize make_list(IPAddress);\\n//See if any of those IPs have sucessfully logged into PA VPNs during the same timeperiod\\nCommonSecurityLog\\n    | where TimeGenerated > ago(timeframe)\\n    //Select only PA VPN sucessful logons\\n    | where DeviceVendor == \\\"Palo Alto Networks\\\" and DeviceEventClassID == \\\"globalprotect\\\"\\n    | where Message has \\\"GlobalProtect gateway user authentication succeeded\\\"\\n    //Parse out the logon source IP from the Message field to match on\\n    | extend SourceIP = extract(\\\"Login from: ([^,]+)\\\", 1, Message) \\n    | where SourceIP in (suspicious_signins)\\n    | extend Reason = \\\"Multiple failed AAD logins from SourceIP\\\"\\n    //Parse out other useful information from Message field\\n    | extend User = extract(\\\"User name: ([^,]+)\\\", 1, Message) \\n    | extend ClientOS = extract(\\\"Client OS version: ([^,\\\\\\\"]+)\\\", 1, Message)\\n    | extend Location = extract(\\\"Source region: ([^,]{2})\\\",1, Message)\\n    | project TimeGenerated, Reason, SourceIP, User, ClientOS, Location, Message, DeviceName, ReceiptTime, DeviceVendor, DeviceEventClassID, Computer, FileName\\n    | extend AccountCustomEntity = User, IPCustomEntity = SourceIP, timestamp = TimeGenerated, HostCustomEntity = DeviceName\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"IP with multiple failed Azure AD logins successfully logs in to Palo Alto VPN\",\r\n        \"description\": \"This query creates a list of IP addresses with a number failed login attempts to AAD \\nabove a set threshold.  It then looks for any successful Palo Alto VPN logins from any\\nof these IPs within the same timeframe.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-09-04T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/f0be259a-34ac-4946-aa15-ca2b115d5feb\",\r\n      \"name\": \"f0be259a-34ac-4946-aa15-ca2b115d5feb\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let starttime = 2d;\\nlet endtime = 1d;\\nlet TimeDeltaThreshold = 10;\\nlet TotalEventsThreshold = 15;\\nlet PercentBeaconThreshold = 80;\\nlet PrivateIPregex = @'^127\\\\.|^10\\\\.|^172\\\\.1[6-9]\\\\.|^172\\\\.2[0-9]\\\\.|^172\\\\.3[0-1]\\\\.|^192\\\\.168\\\\.';\\nCommonSecurityLog\\n| where DeviceVendor == \\\"Palo Alto Networks\\\" and Activity == \\\"TRAFFIC\\\"\\n| where TimeGenerated between (ago(starttime)..ago(endtime))\\n| extend DestinationIPType = iff(DestinationIP matches regex PrivateIPregex,\\\"private\\\" ,\\\"public\\\" )\\n| where DestinationIPType == \\\"public\\\"\\n| project TimeGenerated, DeviceName, SourceUserID, SourceIP, SourcePort, DestinationIP, DestinationPort, ReceivedBytes, SentBytes\\n| sort by SourceIP asc,TimeGenerated asc, DestinationIP asc, DestinationPort asc\\n| serialize\\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(SourceIP, 1)\\n| extend TimeDeltainSeconds = datetime_diff('second',nextTimeGenerated,TimeGenerated)\\n| where SourceIP == nextSourceIP\\n//Whitelisting criteria/ threshold criteria\\n| where TimeDeltainSeconds > TimeDeltaThreshold \\n| project TimeGenerated, TimeDeltainSeconds, DeviceName, SourceUserID, SourceIP, SourcePort, DestinationIP, DestinationPort, ReceivedBytes, SentBytes\\n| summarize count(), sum(ReceivedBytes), sum(SentBytes), make_list(TimeDeltainSeconds) \\nby TimeDeltainSeconds, bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort\\n| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_), TotalSentBytes = sum(sum_SentBytes), TotalReceivedBytes = sum(sum_ReceivedBytes) \\nby bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort\\n| where TotalEvents > TotalEventsThreshold \\n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\\n| where BeaconPercent > PercentBeaconThreshold\\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP, AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Palo Alto - potential beaconing detected\",\r\n        \"description\": \"Identifies beaconing patterns from Palo Alto Network traffic logs based on recurrent timedelta patterns. \\nThe query leverages various KQL functions to calculate time deltas and then compares it with total events observed in a day to find percentage of beaconing. \\nThis outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts.\\nReference Blog:\\nhttp://www.austintaylor.io/detect/beaconing/intrusion/detection/system/command/control/flare/elastic/stack/2017/06/10/detect-beaconing-with-flare-elasticsearch-and-intrusion-detection-systems/\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-05-07T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/4b11568b-3f5f-4ba1-80c8-7f1dc8390eb7\",\r\n      \"name\": \"4b11568b-3f5f-4ba1-80c8-7f1dc8390eb7\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let threshold = 50;\\nlet szSharePointFileOperation = \\\"SharePointFileOperation\\\";\\nlet szOperations = dynamic([\\\"FileDownloaded\\\", \\\"FileUploaded\\\"]);\\nlet starttime = 14d;\\nlet endtime = 1d;\\nlet historicalActivity =\\nOfficeActivity\\n| where TimeGenerated between(ago(starttime)..ago(endtime))\\n| where RecordType =~ szSharePointFileOperation\\n| where Operation in~ (szOperations)\\n| summarize historicalCount = count() by ClientIP, RecordType, Operation;\\nlet recentActivity = OfficeActivity\\n| where TimeGenerated > ago(endtime)\\n| where RecordType =~ szSharePointFileOperation\\n| where Operation in~ (szOperations)\\n| summarize min(Start_Time), max(Start_Time), recentCount = count() by ClientIP, RecordType, Operation;\\nlet RareIP = recentActivity | join kind= leftanti ( historicalActivity ) on ClientIP, RecordType, Operation\\n// More than 50 downloads/uploads from a new IP\\n| where recentCount > threshold;\\nOfficeActivity \\n| where TimeGenerated >= ago(endtime) \\n| where RecordType =~ szSharePointFileOperation\\n| where Operation in~ (szOperations)\\n| join kind= inner (RareIP) on ClientIP, RecordType, Operation\\n| where Start_Time between(min_Start_Time .. max_Start_Time)\\n| summarize StartTimeUtc = min(min_Start_Time), EndTimeUtc = max(max_Start_Time) by RecordType, Operation, UserType, UserId, ClientIP, OfficeWorkload, Site_Url, OfficeObjectId, UserAgent, IPSeenCount = recentCount\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP, URLCustomEntity = Site_Url\\n| order by IPSeenCount desc, ClientIP asc, Operation asc, UserId asc\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"SharePointFileOperation via previously unseen IPs\",\r\n        \"description\": \"Identifies when the volume of documents uploaded to or downloaded from Sharepoint by new IP addresses\\nexceeds a threshold (default is 50).\",\r\n        \"tactics\": [\r\n          \"Exfiltration\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-23T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/fa118b98-de46-4e94-87f9-8e6d5060b60b\",\r\n      \"name\": \"fa118b98-de46-4e94-87f9-8e6d5060b60b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"MLBehaviorAnalytics\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"displayName\": \"(Preview) Anomalous SSH Login Detection\",\r\n        \"description\": \"This detection uses machine learning (ML) to identify anomalous Secure Shell (SSH) login activity, based on syslog data. Scenarios include:\\n\\n*\\tUnusual IP - This IP address has not or has rarely been seen in last 30 days.\\n*\\tUnusual Geo - The IP address, city, country and ASN have not (or rarely) been seen in last 30 days.\\n*\\tNew user - A new user logs in from an IP address and geo location, both or either of which are not expected to be seen in the last 30 days.\\n\\nAllow 7 days after this alert is enabled for Azure Sentinel to build a profile of normal activity for your environment.\\n\\nThis detection requires a specific configuration of the data source. [Learn more](https://docs.microsoft.com/en-us/azure/sentinel/connect-syslog#configure-the-syslog-connector-for-anomalous-ssh-login-detection)\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-07-16T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-05T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Syslog\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/194dd92e-d6e7-4249-85a5-273350a7f5ce\",\r\n      \"name\": \"194dd92e-d6e7-4249-85a5-273350a7f5ce\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nOfficeActivity\\n| where TimeGenerated >= ago(timeframe)\\n| where UserType in~ (\\\"Admin\\\",\\\"DcAdmin\\\") \\n// Only admin or global-admin can disable audit logging\\n| where Operation =~ \\\"Set-AdminAuditLogConfig\\\" \\n| extend AdminAuditLogEnabledValue = tostring(parse_json(tostring(parse_json(tostring(array_slice(parse_json(Parameters),3,3)))[0])).Value)\\n| where AdminAuditLogEnabledValue =~ \\\"False\\\" \\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Operation, UserType, UserId, ClientIP, ResultStatus, Parameters, AdminAuditLogEnabledValue\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Exchange AuditLog disabled\",\r\n        \"description\": \"Identifies when the exchange audit logging has been disabled which may be an adversary attempt\\nto evade detection or avoid other defenses.\",\r\n        \"tactics\": [\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-04-15T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a3df4a32-4805-4c6d-8699-f3c888af2f67\",\r\n      \"name\": \"a3df4a32-4805-4c6d-8699-f3c888af2f67\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let TimeFrame = ago(1d);\\nlet Alert1 = \\nSecurityAlert\\n| where TimeGenerated > TimeFrame\\n| where AlertName == \\\"Unfamiliar sign-in properties\\\"\\n| extend UserPrincipalName = tostring(parse_json(ExtendedProperties).[\\\"User Account\\\"])\\n| extend Alert1Time = TimeGenerated\\n| extend Alert1 = AlertName\\n| extend Alert1Severity = AlertSeverity\\n;\\nlet Alert2 = \\nSecurityAlert\\n| where TimeGenerated > TimeFrame\\n| where AlertName == \\\"Atypical travel\\\"\\n| extend UserPrincipalName = tostring(parse_json(ExtendedProperties).[\\\"User Account\\\"])\\n| extend Alert2Time = TimeGenerated\\n| extend Alert2 = AlertName\\n| extend Alert2Severity = AlertSeverity\\n| extend CurrentLocation = strcat(tostring(parse_json(tostring(parse_json(Entities)[1].Location)).CountryCode), \\\"|\\\", tostring(parse_json(tostring(parse_json(Entities)[1].Location)).State), \\\"|\\\", tostring(parse_json(tostring(parse_json(Entities)[1].Location)).City))\\n| extend PreviousLocation = strcat(tostring(parse_json(tostring(parse_json(Entities)[2].Location)).CountryCode), \\\"|\\\", tostring(parse_json(tostring(parse_json(Entities)[2].Location)).State), \\\"|\\\", tostring(parse_json(tostring(parse_json(Entities)[2].Location)).City))\\n| extend CurrentIPAddress = tostring(parse_json(Entities)[1].Address)\\n| extend PreviousIPAddress = tostring(parse_json(Entities)[2].Address)\\n;\\nAlert1\\n| join kind=inner Alert2 on UserPrincipalName\\n| where abs(datetime_diff('minute', Alert1Time, Alert2Time)) <=10\\n| extend TimeDelta = Alert1Time - Alert2Time\\n| project UserPrincipalName, Alert1, Alert1Time, Alert1Severity, Alert2, Alert2Time, Alert2Severity, TimeDelta, CurrentLocation, PreviousLocation, CurrentIPAddress, PreviousIPAddress\\n| extend AccountCustomEntity = UserPrincipalName\\n| extend IPCustomEntity = CurrentIPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Correlate Unfamiliar sign-in properties and atypical travel alerts\",\r\n        \"description\": \"When a user has both an Unfamiliar sign-in properties alert and an Atypical travel alert within 20 minutes, the alert should be handled with a higher severity\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-09-19T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectoryIdentityProtection\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert (IPC)\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/70b12a3b-4896-42cb-910c-5ffaf8d7987d\",\r\n      \"name\": \"70b12a3b-4896-42cb-910c-5ffaf8d7987d\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let timeframe = 1d;\\nlet DomainNames = dynamic([\\\"seoulhobi.biz\\\", \\\"reader.cash\\\", \\\"pieceview.club\\\", \\\"app-wallet.com\\\", \\\"bigwnet.com\\\", \\\"bitwoll.com\\\", \\\"cexrout.com\\\", \\\"change-pw.com\\\", \\\"checkprofie.com\\\", \\\"cloudwebappservice.com\\\", \\\"ctquast.com\\\", \\\"dataviewering.com\\\", \\\"day-post.com\\\", \\\"dialy-post.com\\\", \\\"documentviewingcom.com\\\", \\\"dovvn-mail.com\\\", \\\"down-error.com\\\", \\\"drivecheckingcom.com\\\", \\\"drog-service.com\\\", \\\"encodingmail.com\\\", \\\"filinvestment.com\\\", \\\"foldershareing.com\\\", \\\"golangapis.com\\\", \\\"hotrnall.com\\\", \\\"lh-logins.com\\\", \\\"login-use.com\\\", \\\"mail-down.com\\\", \\\"matmiho.com\\\", \\\"mihomat.com\\\", \\\"natwpersonal-online.com\\\", \\\"nidlogin.com\\\", \\\"nid-login.com\\\", \\\"nidlogon.com\\\", \\\"pw-change.com\\\", \\\"rnaii.com\\\", \\\"rnailm.com\\\", \\\"sec-live.com\\\", \\\"secrityprocessing.com\\\", \\\"securitedmode.com\\\", \\\"securytingmail.com\\\", \\\"set-login.com\\\", \\\"usrchecking.com\\\", \\\"com-serviceround.info\\\", \\\"mai1.info\\\", \\\"reviewer.mobi\\\", \\\"files-download.net\\\", \\\"fixcool.net\\\", \\\"hanrnaii.net\\\", \\\"office356-us.org\\\", \\\"smtper.org\\\"]);\\n(union isfuzzy=true\\n(CommonSecurityLog \\n| where TimeGenerated >= ago(timeframe) \\n| parse Message with * '(' DNSName ')' * \\n| where isnotempty(FileHash)\\n| where DNSName in~ (DomainNames)\\n| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP\\n),\\n(DnsEvents \\n| where TimeGenerated >= ago(timeframe) \\n| extend DNSName = Name\\n| where isnotempty(DNSName)\\n| where DNSName  in~ (DomainNames)\\n| extend IPAddress = ClientIP\\n),\\n(VMConnection \\n| where TimeGenerated >= ago(timeframe) \\n| parse RemoteDnsCanonicalNames with * '[\\\"' DNSName '\\\"]' *\\n| where isnotempty(DNSName)\\n| where DNSName  in~ (DomainNames)\\n| extend IPAddress = RemoteIp\\n)\\n)\\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"THALLIUM domains included in DCU takedown\",\r\n        \"description\": \"THALLIUM spearphishing and command and control domains included in December 2019 DCU/MSTIC takedown. \\n Matches domain name IOCs related to the THALLIUM activity group with CommonSecurityLog, DnsEvents, VMConnection and SecurityEvents dataTypes.\\n References: https://blogs.microsoft.com/on-the-issues/2019/12/30/microsoft-court-action-against-nation-state-cybercrime/ \",\r\n        \"tactics\": [\r\n          \"CommandAndControl\",\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-01-06T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(VMInsights)\",\r\n            \"dataTypes\": [\r\n              \"VMConnection\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/6c360107-f3ee-4b91-9f43-f4cfd90441cf\",\r\n      \"name\": \"6c360107-f3ee-4b91-9f43-f4cfd90441cf\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nSecurityEvent\\n| where TimeGenerated >= ago(timeframe) \\n| where EventID == 4738\\n// 2089 value indicates the Don't Expire Password value has been set\\n| where UserAccountControl has \\\"%%2089\\\" \\n| extend Value_2089 = iff(UserAccountControl has \\\"%%2089\\\",\\\"'Don't Expire Password' - Disabled\\\", \\\"Not Changed\\\")\\n// 2050 indicates that the Password Not Required value is NOT set, this often shows up at the same time as a 2089 and is the recommended value.  This value may not be in the event. \\n| extend Value_2050 = iff(UserAccountControl has \\\"%%2050\\\",\\\"'Password Not Required' - Disabled\\\", \\\"Not Changed\\\")\\n// If value %%2082 is present in the 4738 event, this indicates the account has been configured to logon WITHOUT a password. Generally you should only see this value when an account is created and only in Event 4720: Account Creation Event.  \\n| extend Value_2082 = iff(UserAccountControl has \\\"%%2082\\\",\\\"'Password Not Required' - Enabled\\\", \\\"Not Changed\\\")\\n| project StartTimeUtc = TimeGenerated, EventID, Computer, TargetUserName, TargetDomainName, AccountType, UserAccountControl, Value_2089, Value_2050, Value_2082\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"AD account with don't expire password - disabled\",\r\n        \"description\": \"Identifies whenever a user account has the setting \\\"Password Never Expires\\\" in the user account properties selected.\\nThis is indicated in Security event 4738 in the EventData item labeled UserAccountControl with an included value of %%2089 \\n%%2089 resolves to \\\"Don't Expire Password - Disabled\\\".\",\r\n        \"tactics\": [\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-01-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a50766a7-0674-4ccb-8845-15dc55a80ba1\",\r\n      \"name\": \"a50766a7-0674-4ccb-8845-15dc55a80ba1\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\\n// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\\n// Taking the first non-empty value based on potential IOC match availability\\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\\n| join (\\n    WireData | where TimeGenerated >= ago(dt_lookBack)\\n    | where isnotempty(RemoteIP)\\n    // renaming time column so it is clear the log this came from\\n    | extend WireData_TimeGenerated = TimeGenerated\\n)\\non $left.TI_ipEntity == $right.RemoteIP\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, WireData_TimeGenerated,\\nTI_ipEntity, Computer, LocalIP, RemoteIP, ProcessName, ApplicationProtocol, LocalPortNumber, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress\\n| extend timestamp = WireData_TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = Computer, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map IP entity to WireData\",\r\n        \"description\": \"Identifies a match in WireData from any IP IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(WireData)\",\r\n            \"dataTypes\": [\r\n              \"WireData\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/f15370f4-c6fa-42c5-9be4-1d308f40284e\",\r\n      \"name\": \"f15370f4-c6fa-42c5-9be4-1d308f40284e\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n// Picking up only IOC's that contain the entities we want\\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\\n// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\\n// Taking the first non-empty value based on potential IOC match availability\\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\\n| join (\\n    OfficeActivity | where TimeGenerated >= ago(dt_lookBack)\\n    // renaming time column so it is clear the log this came from\\n    | extend OfficeActivity_TimeGenerated = TimeGenerated\\n)\\non $left.TI_ipEntity == $right.ClientIP\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, OfficeActivity_TimeGenerated,\\nTI_ipEntity, ClientIP, UserId, Operation, ResultStatus, RecordType, OfficeObjectId, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress\\n| extend timestamp = OfficeActivity_TimeGenerated, IPCustomEntity = ClientIP, AccountCustomEntity = UserId, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map IP entity to OfficeActivity\",\r\n        \"description\": \"Identifies a match in OfficeActivity from any IP IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/884c4957-70ea-4f57-80b9-1bca3890315b\",\r\n      \"name\": \"884c4957-70ea-4f57-80b9-1bca3890315b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeFrame = 1d;\\nlet timeBin = 10m;\\nlet failedThreshold = 100;\\nW3CIISLog\\n| where TimeGenerated >= ago(timeFrame)\\n| where scStatus in (\\\"401\\\",\\\"403\\\")\\n| where csUserName != \\\"-\\\"\\n// Handling Exchange specific items in IIS logs to remove the unique log identifier in the URI\\n| extend csUriQuery = iff(csUriQuery startswith \\\"MailboxId=\\\", tostring(split(csUriQuery, \\\"&\\\")[0]) , csUriQuery )\\n| extend csUriQuery = iff(csUriQuery startswith \\\"X-ARR-CACHE-HIT=\\\", strcat(tostring(split(csUriQuery, \\\"&\\\")[0]),tostring(split(csUriQuery, \\\"&\\\")[1])) , csUriQuery )\\n| extend scStatusFull = strcat(scStatus, \\\".\\\",scSubStatus) \\n// Map common IIS codes\\n| extend scStatusFull_Friendly = case(\\nscStatusFull == \\\"401.0\\\", \\\"Access denied.\\\",\\nscStatusFull == \\\"401.1\\\", \\\"Logon failed.\\\",\\nscStatusFull == \\\"401.2\\\", \\\"Logon failed due to server configuration.\\\",\\nscStatusFull == \\\"401.3\\\", \\\"Unauthorized due to ACL on resource.\\\",\\nscStatusFull == \\\"401.4\\\", \\\"Authorization failed by filter.\\\",\\nscStatusFull == \\\"401.5\\\", \\\"Authorization failed by ISAPI/CGI application.\\\",\\nscStatusFull == \\\"403.0\\\", \\\"Forbidden.\\\",\\nscStatusFull == \\\"403.4\\\", \\\"SSL required.\\\",\\n\\\"See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\\\")\\n// Mapping to Hex so can be mapped using website in comments above\\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) \\n// Map common win32 codes\\n| extend scWin32Status_Friendly = case(\\nscWin32Status_Hex =~ \\\"775\\\", \\\"The referenced account is currently locked out and cannot be logged on to.\\\",\\nscWin32Status_Hex =~ \\\"52e\\\", \\\"Logon failure: Unknown user name or bad password.\\\",\\nscWin32Status_Hex =~ \\\"532\\\", \\\"Logon failure: The specified account password has expired.\\\",\\nscWin32Status_Hex =~ \\\"533\\\", \\\"Logon failure: Account currently disabled.\\\", \\nscWin32Status_Hex =~ \\\"2ee2\\\", \\\"The request has timed out.\\\", \\nscWin32Status_Hex =~ \\\"0\\\", \\\"The operation completed successfully.\\\", \\nscWin32Status_Hex =~ \\\"1\\\", \\\"Incorrect function.\\\", \\nscWin32Status_Hex =~ \\\"2\\\", \\\"The system cannot find the file specified.\\\", \\nscWin32Status_Hex =~ \\\"3\\\", \\\"The system cannot find the path specified.\\\", \\nscWin32Status_Hex =~ \\\"4\\\", \\\"The system cannot open the file.\\\", \\nscWin32Status_Hex =~ \\\"5\\\", \\\"Access is denied.\\\", \\nscWin32Status_Hex =~ \\\"8009030e\\\", \\\"SEC_E_NO_CREDENTIALS\\\", \\nscWin32Status_Hex =~ \\\"8009030C\\\", \\\"SEC_E_LOGON_DENIED\\\", \\n\\\"See - https://msdn.microsoft.com/library/cc231199.aspx\\\")\\n// decode URI when available\\n| extend decodedUriQuery = url_decode(csUriQuery)\\n// Count of failed logons by a user\\n| summarize makeset(decodedUriQuery), makeset(cIP), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), FailedConnectionsCount = count() by bin(TimeGenerated, timeBin), csUserName, Computer, sIP\\n| where FailedConnectionsCount >= failedThreshold\\n| project TimeGenerated, csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_cIP, set_sPort, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, FailedConnectionsCount\\n| order by FailedConnectionsCount\\n| extend timestamp = TimeGenerated, AccountCustomEntity = csUserName, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"High count of failed logons by a user\",\r\n        \"description\": \"Identifies when 100 or more failed attempts by a given user in 10 minutes occur on the IIS Server.\\nThis could be indicative of attempted brute force based on known account information.\\nThis could also simply indicate a misconfigured service or device. \\nReferences:\\nIIS status code mapping - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\\nWin32 Status code mapping - https://msdn.microsoft.com/library/cc231199.aspx\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-03-19T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureMonitor(IIS)\",\r\n            \"dataTypes\": [\r\n              \"W3CIISLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/57e56fc9-417a-4f41-a579-5475aea7b8ce\",\r\n      \"name\": \"57e56fc9-417a-4f41-a579-5475aea7b8ce\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1h;\\nlet threshold = 1000;\\nInfobloxNIOS\\n| where TimeGenerated >= ago(timeframe)\\n| where ProcessName =~ \\\"dhcpd\\\" and Log_Type =~ \\\"DHCPREQUEST\\\"\\n| summarize count() by ServerIP, bin(TimeGenerated,5m)\\n| where count_ > threshold\\n| join kind=inner (InfobloxNIOS\\n    | where ProcessName =~ \\\"dhcpd\\\" and Log_Type =~ \\\"DHCPREQUEST\\\"\\n    | where TimeGenerated >= ago(timeframe)\\n    ) on ServerIP\\n| extend timestamp = TimeGenerated, IPCustomEntity = ServerIP\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Potential DHCP Starvation Attack\",\r\n        \"description\": \"This creates an incident in the event that an excessive amount of DHCPREQUEST have been recieved by a DHCP Server and could potentially be an indication of a DHCP Starvation Attack.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-06T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"InfobloxNIOS\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/1fa1528e-f746-4794-8a41-14827f4cb798\",\r\n      \"name\": \"1fa1528e-f746-4794-8a41-14827f4cb798\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet threshold = 100;\\nPulseConnectSecure\\n| where TimeGenerated >= timeframe\\n| where Messages startswith \\\"Login failed\\\"\\n| summarize dcount(User) by Computer, bin(TimeGenerated, 15m)\\n| where dcount_User > threshold\\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"PulseConnectSecure - Large Number of Distinct Failed User Logins\",\r\n        \"description\": \"This query identifies evidence of failed login attempts from a large number of distinct users on a Pulse Connect Secure VPN server\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-06T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"PulseConnectSecure\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/e70fa6e0-796a-4e85-9420-98b17b0bb749\",\r\n      \"name\": \"e70fa6e0-796a-4e85-9420-98b17b0bb749\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"DeviceInfo\\n| extend DeviceName = tolower(DeviceName)\\n| join (SecurityAlert\\n| where ProviderName =~ \\\"MDATP\\\"\\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\\n| where ThreatName has \\\"Solorigate\\\"\\n| extend HostCustomEntity = tolower(CompromisedEntity)\\n) on $left.DeviceName == $right.HostCustomEntity\\n| project TimeGenerated, DisplayName, ThreatName, CompromisedEntity, PublicIP, MachineGroup, AlertSeverity, Description, LoggedOnUsers, DeviceId, TenantId\\n| extend timestamp = TimeGenerated, IPCustomEntity = PublicIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Solorigate Defender Detections\",\r\n        \"description\": \"Surfaces any Defender Alert for Solorigate Events. In Azure Sentinel the SecurityAlerts table includes only the Device Name of the affected device, this query joins the DeviceInfo table to clearly connect other information such as \\n Device group, ip, logged on users etc. This way, the Sentinel user can have all the pertinent device info in one view for all the the Solarigate Defender alerts.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-19T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-17T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"MicrosoftDefenderAdvancedThreatProtection\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert (MDATP)\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"MicrosoftThreatProtection\",\r\n            \"dataTypes\": [\r\n              \"DeviceInfo\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/ca67c83e-7fff-4127-a3e3-1af66d6d4cad\",\r\n      \"name\": \"ca67c83e-7fff-4127-a3e3-1af66d6d4cad\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nlet ProcessCreationEvents=() {\\nlet processEvents=SecurityEvent\\n| where EventID==4688\\n| where isnotempty(CommandLine)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName,\\nFileName = Process, CommandLine, ParentProcessName;\\nprocessEvents};\\nProcessCreationEvents\\n| where CommandLine contains \\\"TVqQAAMAAAAEAAA\\\"\\n| where StartTimeUtc >= ago(timeframe)\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Base64 encoded Windows process command-lines\",\r\n        \"description\": \"Identifies instances of a base64 encoded PE file header seen in the process command line parameter.\",\r\n        \"tactics\": [\r\n          \"Execution\",\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2018-09-14T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/4696e072-aca8-4a4f-bf05-89fddc5ac3c9\",\r\n      \"name\": \"4696e072-aca8-4a4f-bf05-89fddc5ac3c9\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let auditLookback = 1d;\\nAuditLogs\\n| where TimeGenerated > ago(auditLookback)\\n| where OperationName has 'StsRefreshTokenValidFrom'\\n| where TargetResources[0].modifiedProperties != '[]'\\n| where TargetResources[0].modifiedProperties !has 'DirectorySync'\\n| extend TargetResourcesModProps = TargetResources[0].modifiedProperties\\n| mv-expand TargetResourcesModProps\\n| where tostring(TargetResourcesModProps.displayName) =~ 'StsRefreshTokensValidFrom'\\n| extend InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\\n| where InitiatingUserOrApp !in ('Microsoft Cloud App Security')\\n| extend targetUserOrApp = TargetResources[0].userPrincipalName\\n| extend eventName = tostring(TargetResourcesModProps.displayName)\\n| extend oldStsRefreshValidFrom = todatetime(parse_json(tostring(TargetResourcesModProps.oldValue))[0])\\n| extend newStsRefreshValidFrom = todatetime(parse_json(tostring(TargetResourcesModProps.newValue))[0])\\n| extend tokenMinutesAdded = datetime_diff('minute',newStsRefreshValidFrom,oldStsRefreshValidFrom)\\n| extend tokenMinutesRemaining = datetime_diff('minute',TimeGenerated,newStsRefreshValidFrom)\\n| project-reorder Result, AADOperationType\\n| extend InitiatingIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatingUserOrApp, IPCustomEntity = InitiatingIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Interactive STS refresh token modifications\",\r\n        \"description\": \"This will show Active Directory Security Token Service (STS) refresh token modifications by Service Principals and Applications other than DirectorySync. Refresh tokens are used to validate identification and obtain access tokens.\\nThis event is most often generated when legitimate administrators troubleshoot frequent AAD user sign-ins but may also be generated as a result of malicious token extensions. Confirm that the activity is related to an administrator legitimately modifying STS refresh tokens and check the new token validation time period for high values.\\nFor in-depth documentation of AAD Security Tokens, see https://docs.microsoft.com/azure/active-directory/develop/security-tokens.\\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-04T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-04T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/e1ce0eab-10d1-4aae-863f-9a383345ba88\",\r\n      \"name\": \"e1ce0eab-10d1-4aae-863f-9a383345ba88\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet threshold = 15;\\nSyslog\\n| where TimeGenerated >= ago(timeframe)\\n| where SyslogMessage contains \\\"Failed password for invalid user\\\"\\n| where ProcessName =~ \\\"sshd\\\" \\n| parse kind=relaxed SyslogMessage with * \\\"invalid user\\\" user \\\" from \\\" ip \\\" port\\\" port \\\" ssh2\\\"\\n| project user, ip, port, SyslogMessage, EventTime\\n| summarize EventTimes = make_list(EventTime), PerHourCount = count() by ip, bin(EventTime, 4h), user\\n| where PerHourCount > threshold\\n| mvexpand EventTimes\\n| extend EventTimes = tostring(EventTimes) \\n| summarize StartTimeUtc = min(EventTimes), EndTimeUtc = max(EventTimes), UserList = makeset(user), sum(PerHourCount) by IPAddress = ip\\n| extend UserList = tostring(UserList) \\n| extend timestamp = StartTimeUtc, IPCustomEntity = IPAddress, AccountCustomEntity = UserList\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"SSH - Potential Brute Force\",\r\n        \"description\": \"Identifies an IP address that had 15 failed attempts to sign in via SSH in a 4 hour block during a 24 hour time period.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Syslog\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/31337365-4b1d-adf5-00da-0000000ff1ce\",\r\n      \"name\": \"31337365-4b1d-adf5-00da-0000000ff1ce\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let auditLookback = 1h;\\nAuditLogs\\n| where TimeGenerated > ago(auditLookback)\\n| where OperationName =~ \\\"Set federation settings on domain\\\"\\n//| where Result =~ \\\"success\\\"   // commenting out, as it may be interesting to capture failed attempts\\n| extend targetDisplayName = tostring(TargetResources[0].displayName)\\n| extend UserAgent = iff(AdditionalDetails[0].key == \\\"User-Agent\\\",tostring(AdditionalDetails[0].value),\\\"\\\")\\n| extend InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\\n| extend InitiatingIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\\n| project-reorder TimeGenerated, OperationName, InitiatingUserOrApp, AADOperationType, targetDisplayName, Result, InitiatingIpAddress, UserAgent, CorrelationId, TenantId, AADTenantId\\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatingUserOrApp, IPCustomEntity = InitiatingIpAddress\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Modified domain federation trust settings\",\r\n        \"description\": \"This will alert when an user or application modifies the federation settings on the domain. For example, this alert will trigger when a new Active Directory Federated Service (ADFS) TrustedRealm object, such as a signing certificate, is added to the domain.\\nModification to domain federation settings should be rare. Confirm the added or modified target domain/URL is legitimate administrator behavior.\\nTo understand why an authorized user may update settings for a federated domain in Office 365, Azure, or Intune, see: https://docs.microsoft.com/office365/troubleshoot/active-directory/update-federated-domain-office-365.\\nFor details on security realms that accept security tokens, see the ADFS Proxy Protocol (MS-ADFSPP) specification: https://docs.microsoft.com/openspecs/windows_protocols/ms-adfspp/e7b9ea73-1980-4318-96a6-da559486664b.\\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-12T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-11T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2fc5d810-c9cc-491a-b564-841427ae0e50\",\r\n      \"name\": \"2fc5d810-c9cc-491a-b564-841427ae0e50\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$';\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n//Filtering the table for Email related IOCs\\n| where isnotempty(EmailRecipient)\\n| join (\\n    SecurityEvent | where TimeGenerated >= ago(dt_lookBack) and isnotempty(TargetUserName)\\n    //Normalizing the column to lower case for exact match with EmailRecipient column\\n    | extend TargetUserName = tolower(TargetUserName)\\n    // renaming timestamp column so it is clear the log this came from SecurityEvent table\\n    | extend SecurityEvent_TimeGenerated = TimeGenerated\\n)\\non $left.EmailRecipient == $right.TargetUserName\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, SecurityEvent_TimeGenerated,\\nEmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, Computer, EventID, TargetUserName, Activity, IpAddress, AccountType,\\nLogonTypeName, LogonProcessName, Status, SubStatus\\n| extend timestamp = SecurityEvent_TimeGenerated, AccountCustomEntity = TargetUserName, IPCustomEntity = IpAddress, HostCustomEntity = Computer, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map Email entity to SecurityEvent\",\r\n        \"description\": \"Identifies a match in SecurityEvent table from any Email IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2be4ef67-a93f-4d8a-981a-88158cb73abd\",\r\n      \"name\": \"2be4ef67-a93f-4d8a-981a-88158cb73abd\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet covidIndicators = (externaldata(TimeGenerated:datetime, FileHashValue:string, FileHashType: string, TlpLevel: string, Product: string, ThreatType: string, Description: string )\\n[@\\\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.Covid19.Indicators.csv\\\"] with (format=\\\"csv\\\"));\\nlet fileHashIndicators = covidIndicators\\n| where isnotempty(FileHashValue);\\n// Handle matches against both lower case and uppercase versions of the hash:\\n( fileHashIndicators | extend FileHashValue = tolower(FileHashValue)\\n  | union (fileHashIndicators | extend FileHashValue = toupper(FileHashValue)))\\n|  join (\\n   CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack) \\n   | where isnotempty(FileHash)\\n   | extend CommonSecurityLog_TimeGenerated = TimeGenerated\\n)\\non $left.FileHashValue == $right.FileHash\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by FileHashValue\\n| project LatestIndicatorTime, FileHashValue, FileHashType, Description, ThreatType,  \\nCommonSecurityLog_TimeGenerated, SourceIP, SourcePort, DestinationIP, DestinationPort, SourceUserID, SourceUserName, DeviceName, DeviceAction, \\nRequestURL, DestinationUserName, DestinationUserID, ApplicationProtocol, Activity\\n| extend timestamp = CommonSecurityLog_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, AccountCustomEntity = SourceUserName\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Microsoft COVID-19 file hash indicator matches\",\r\n        \"description\": \"Identifies a match in CommonSecurityLog Event data from any FileHash published in the Microsoft COVID-19 Threat Intel Feed - as described at https://www.microsoft.com/security/blog/2020/05/14/open-sourcing-covid-threat-intelligence/\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-30T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/75ea5c39-93e5-489b-b1e1-68fa6c9d2d04\",\r\n      \"name\": \"75ea5c39-93e5-489b-b1e1-68fa6c9d2d04\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nlet threshold = 3;\\nSigninLogs\\n| where TimeGenerated >= ago(timeframe)\\n| where ResultType == \\\"50057\\\"\\n| where ResultDescription =~ \\\"User account is disabled. The account has been disabled by an administrator.\\\"\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count(), applicationCount = dcount(AppDisplayName), \\napplicationSet = makeset(AppDisplayName) by UserPrincipalName, IPAddress\\n| where applicationCount >= threshold\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Attempts to sign in to disabled accounts\",\r\n        \"description\": \"Identifies failed attempts to sign in to disabled accounts across multiple Azure Applications.\\nDefault threshold for Azure Applications attempted to sign in to is 3.\\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\\n50057 - User account is disabled. The account has been disabled by an administrator.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-11T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/3af9285d-bb98-4a35-ad29-5ea39ba0c628\",\r\n      \"name\": \"3af9285d-bb98-4a35-ad29-5ea39ba0c628\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeRange = ago(1d);\\nlet threshold = 1;\\nSigninLogs\\n| where TimeGenerated >= timeRange\\n| where ConditionalAccessStatus == 1 or ConditionalAccessStatus =~ \\\"failure\\\"\\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser \\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\\n| extend ConditionalAccessPol0Name = tostring(ConditionalAccessPolicies[0].displayName)\\n| extend ConditionalAccessPol1Name = tostring(ConditionalAccessPolicies[1].displayName)\\n| extend ConditionalAccessPol2Name = tostring(ConditionalAccessPolicies[2].displayName)\\n| extend Status = strcat(StatusCode, \\\": \\\", ResultDescription) \\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Status = makelist(Status), StatusDetails = makelist(StatusDetails), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress) , CorrelationIds = makelist(CorrelationId) by UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name\\n| where IPAddressCount > threshold and StatusDetails !has \\\"MFA successfully completed\\\"\\n| mvexpand IPAddresses, Status, StatusDetails, CorrelationIds\\n| extend Status = strcat(Status, \\\" \\\", StatusDetails)\\n| summarize IPAddresses = makeset(IPAddresses), Status = makeset(Status), CorrelationIds = makeset(CorrelationIds) by StartTimeUtc, EndTimeUtc, UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name, IPAddressCount\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = tostring(IPAddresses)\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Attempt to bypass conditional access rule in Azure AD\",\r\n        \"description\": \"Identifies an attempt to Bypass conditional access rule(s) in Azure Active Directory.\\nThe ConditionalAccessStatus column value details if there was an attempt to bypass Conditional Access\\nor if the Conditional access rule was not satisfied (ConditionalAccessStatus == 1).\\nReferences: \\nhttps://docs.microsoft.com/azure/active-directory/conditional-access/overview\\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins\\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\\nConditionalAccessStatus == 0 // Success\\nConditionalAccessStatus == 1 // Failure\\nConditionalAccessStatus == 2 // Not Applied\\nConditionalAccessStatus == 3 // unknown\",\r\n        \"tactics\": [\r\n          \"InitialAccess\",\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-11T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/7cb8f77d-c52f-4e46-b82f-3cf2e106224a\",\r\n      \"name\": \"7cb8f77d-c52f-4e46-b82f-3cf2e106224a\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let lookBack_long = 14d;\\nlet lookBack_med = 7d;\\nlet lookBack = 1d;\\nSigninLogs\\n| where TimeGenerated >= startofday(ago(lookBack_long))\\n| extend locationString = strcat(tostring(LocationDetails[\\\"countryOrRegion\\\"]), \\\"/\\\", tostring(LocationDetails[\\\"state\\\"]), \\\"/\\\", tostring(LocationDetails[\\\"city\\\"]), \\\";\\\") \\n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \\n// Create time series \\n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack_long)),now(), 1d) \\nby UserPrincipalName, AppDisplayName \\n// Compute best fit line for each entry \\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \\n// Chart the 3 most interesting lines  \\n// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application\\n| where Slope > 0.3\\n| top 50 by Slope desc\\n| join kind = leftsemi (\\nSigninLogs\\n| where TimeGenerated >= startofday(ago(lookBack_med))\\n| extend locationString = strcat(tostring(LocationDetails[\\\"countryOrRegion\\\"]), \\\"/\\\", tostring(LocationDetails[\\\"state\\\"]), \\\"/\\\", tostring(LocationDetails[\\\"city\\\"]), \\\";\\\") \\n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \\n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack_med)) ,now(), 1d) \\nby UserPrincipalName, AppDisplayName \\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \\n| top 50 by Slope desc\\n| where Slope > 0.3\\n) on UserPrincipalName, AppDisplayName\\n| join kind = leftsemi (\\nSigninLogs\\n| where TimeGenerated >= startofday(ago(lookBack))\\n| extend locationString = strcat(tostring(LocationDetails[\\\"countryOrRegion\\\"]), \\\"/\\\", tostring(LocationDetails[\\\"state\\\"]), \\\"/\\\", tostring(LocationDetails[\\\"city\\\"]), \\\";\\\") \\n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \\n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack)) ,now(), 1d) \\nby UserPrincipalName, AppDisplayName \\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \\n| top 50 by Slope desc\\n// Higher threshold requirement on last day anomaly\\n| where Slope > 5\\n) on UserPrincipalName, AppDisplayName\\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Anomalous sign-in location by user account and authenticating application\",\r\n        \"description\": \"This query over Azure Active Directory sign-in considers all user sign-ins for each Azure Active \\nDirectory application and picks out the most anomalous change in location profile for a user within an \\nindividual application. An alert is generated for recent sign-ins that have location counts that are anomalous\\nover last day but also over the last 7-day and 14-day periods.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-05T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/871ba14c-88ef-48aa-ad38-810f26760ca3\",\r\n      \"name\": \"871ba14c-88ef-48aa-ad38-810f26760ca3\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 7d;\\nOfficeActivity\\n| where TimeGenerated >= ago(timeframe)\\n| where Operation =~ \\\"Set-Mailbox\\\"\\n| where Parameters has \\\"ForwardingSmtpAddress\\\"\\n| extend parsed = parse_json(Parameters)\\n| mv-expand parsed\\n| where parsed.Name == \\\"ForwardingSmtpAddress\\\"\\n| extend parameterName = tostring(parsed.Name), fwdingDestination = tostring(parsed.Value)\\n| where isnotempty(fwdingDestination)\\n| extend ClientIPOnly = case( \\nClientIP has \\\".\\\" and ClientIP has ':', tostring(split(ClientIP,\\\":\\\")[0]), \\nClientIP has \\\".\\\" and ClientIP has '-', tostring(split(ClientIP,\\\"-\\\")[0]), \\nClientIP has ']-', tostring(trim_start(@'[[]',tostring(split(ClientIP,\\\"]\\\")[0]))),\\nClientIP has ']:', tostring(trim_start(@'[[]',tostring(split(ClientIP,\\\"]\\\")[0]))),\\nisempty(ClientIP) and ClientIP_ has \\\".\\\" and ClientIP_ has ':', tostring(split(ClientIP_,\\\":\\\")[0]), \\nisempty(ClientIP) and ClientIP_ has \\\".\\\" and ClientIP_ has '-', tostring(split(ClientIP_,\\\"-\\\")[0]), \\nisempty(ClientIP) and ClientIP_ has ']-', tostring(trim_start(@'[[]',tostring(split(ClientIP_,\\\"]\\\")[0]))),\\nisempty(ClientIP) and ClientIP_ has ']:', tostring(trim_start(@'[[]',tostring(split(ClientIP_,\\\"]\\\")[0]))),\\nisnotempty(ClientIP), ClientIP,\\nisnotempty(ClientIP_), ClientIP_,\\n\\\"IP Not Available\\\"\\n)  \\n| extend Port = case(\\nClientIP has \\\".\\\" and ClientIP has ':', tostring(split(ClientIP,\\\":\\\")[1]), \\nClientIP has \\\".\\\" and ClientIP has '-', tostring(split(ClientIP,\\\"-\\\")[1]), \\nClientIP has ']-', tostring(split(ClientIP,\\\"]-\\\")[1]), \\nClientIP has ']:', tostring(split(ClientIP,\\\"]:\\\")[1]), \\nisempty(ClientIP) and ClientIP_ has \\\".\\\" and ClientIP_ has ':', tostring(split(ClientIP_,\\\":\\\")[1]), \\nisempty(ClientIP) and ClientIP_ has \\\".\\\" and ClientIP_ has '-', tostring(split(ClientIP_,\\\"-\\\")[1]), \\nisempty(ClientIP) and ClientIP_ has ']-', tostring(split(ClientIP_,\\\"]-\\\")[1]),\\nisempty(ClientIP) and ClientIP_ has ']:', tostring(split(ClientIP_,\\\"]:\\\")[1]),\\nisnotempty(ClientIP), ClientIP,\\nisnotempty(ClientIP_), ClientIP_,\\n\\\"IP Not Available\\\"\\n)\\n| extend UserId = iff(isempty(UserId), UserId_, UserId)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId), \\nPorts = make_set(Port), EventCount = count() by fwdingDestination, ClientIP = ClientIPOnly \\n| where DistinctUserCount > 1\\n| mv-expand UserId\\n| extend UserId = tostring(UserId), Ports = tostring(Ports)\\n| distinct StartTimeUtc, EndTimeUtc, UserId, DistinctUserCount, ClientIP, Ports, fwdingDestination, EventCount\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P7D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Multiple users email forwarded to same destination\",\r\n        \"description\": \"Identifies when multiple (more than one) users mailboxes are configured to forward to the same destination. \\nThis could be an attacker-controlled destination mailbox configured to collect mail from multiple compromised user accounts.\",\r\n        \"tactics\": [\r\n          \"Collection\",\r\n          \"Exfiltration\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-23T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/23de46ea-c425-4a77-b456-511ae4855d69\",\r\n      \"name\": \"23de46ea-c425-4a77-b456-511ae4855d69\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let starttime = 14d;\\nlet endtime = 1d;\\n// The number of operations below which an IP address is considered an unusual source of role assignment operations\\nlet alertOperationThreshold = 5;\\nlet SensitiveOperationList = dynamic(\\n[\\\"List keys\\\", \\\"List Storage Account Keys\\\", \\\"Register Subscription\\\", \\\"Create or Update Snapshot\\\", \\\"Create or Update Network Security Group\\\"]);\\nlet SensitiveActivity = AzureActivity\\n| where OperationName in~ (SensitiveOperationList)\\n| where ActivityStatus =~ \\\"Succeeded\\\";\\nSensitiveActivity\\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\\n| summarize count() by CallerIpAddress, Caller\\n| where count_ >= alertOperationThreshold\\n| join kind = rightanti ( \\nSensitiveActivity\\n| where TimeGenerated >= ago(endtime)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \\nOperationIds = makelist(OperationId), CorrelationIds = makelist(CorrelationId), Resources = makelist(Resource), ResourceGroups = makelist(ResourceGroup), ResourceIds = makelist(ResourceId), ActivityCountByCallerIPAddress = count()  \\nby CallerIpAddress, Caller, OperationName\\n) on CallerIpAddress, Caller\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Rare subscription-level operations in Azure\",\r\n        \"description\": \"This query looks for a few sensitive subscription-level events based on Azure Activity Logs. \\n For example this monitors for the operation name 'Create or Update Snapshot' which is used for creating backups but could be misused by attackers \\n to dump hashes or extract sensitive information from the disk.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\",\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-24T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActivity\",\r\n            \"dataTypes\": [\r\n              \"AzureActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/79566f41-df67-4e10-a703-c38a6213afd8\",\r\n      \"name\": \"79566f41-df67-4e10-a703-c38a6213afd8\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let auditLookback = 1h;\\nAuditLogs\\n| where TimeGenerated > ago(auditLookback)\\n| where OperationName has_any (\\\"Add service principal\\\", \\\"Certificates and secrets management\\\") // captures \\\"Add service principal\\\", \\\"Add service principal credentials\\\", and \\\"Update application â€“ Certificates and secrets management\\\" events\\n| where Result =~ \\\"success\\\"\\n| mv-expand target = TargetResources\\n| where tostring(InitiatedBy.user.userPrincipalName) has \\\"@\\\" or tostring(InitiatedBy.app.displayName) has \\\"@\\\"\\n| extend targetDisplayName = tostring(TargetResources[0].displayName)\\n| extend targetId = tostring(TargetResources[0].id)\\n| extend targetType = tostring(TargetResources[0].type)\\n| extend keyEvents = TargetResources[0].modifiedProperties\\n| mv-expand keyEvents\\n| where keyEvents.displayName =~ \\\"KeyDescription\\\"\\n| extend new_value_set = parse_json(tostring(keyEvents.newValue))\\n| extend old_value_set = parse_json(tostring(keyEvents.oldValue))\\n| where old_value_set != \\\"[]\\\"\\n| extend diff = set_difference(new_value_set, old_value_set)\\n| where isnotempty(diff)\\n| parse diff with * \\\"KeyIdentifier=\\\" keyIdentifier:string \\\",KeyType=\\\" keyType:string \\\",KeyUsage=\\\" keyUsage:string \\\",DisplayName=\\\" keyDisplayName:string \\\"]\\\" *\\n| where keyUsage == \\\"Verify\\\"  or keyUsage == \\\"\\\"\\n| extend UserAgent = iff(AdditionalDetails[0].key == \\\"User-Agent\\\",tostring(AdditionalDetails[0].value),\\\"\\\")\\n| extend InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\\n| extend InitiatingIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\\n// The below line is currently commented out but Azure Sentinel users can modify this query to show only Application or only Service Principal events in their environment\\n//| where targetType =~ \\\"Application\\\" // or targetType =~ \\\"ServicePrincipal\\\"\\n| project-away diff, new_value_set, old_value_set\\n| project-reorder TimeGenerated, OperationName, InitiatingUserOrApp, InitiatingIpAddress, UserAgent, targetDisplayName, targetId, targetType, keyDisplayName, keyType, keyUsage, keyIdentifier, CorrelationId, TenantId\\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatingUserOrApp, IPCustomEntity = InitiatingIpAddress\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"New access credential added to Application or Service Principal\",\r\n        \"description\": \"This will alert when an admin or app owner account adds a new credential to an Application or Service Principal where a verify KeyCredential was already present for the app.\\nIf a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.\\nAdditional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow\\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-20T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-11-30T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"AuditLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/2c55fe7a-b06f-4029-a5b9-c54a2320d7b8\",\r\n      \"name\": \"2c55fe7a-b06f-4029-a5b9-c54a2320d7b8\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let starttime = 14d;\\nlet endtime = 1d;\\nlet timeframe = 1h;\\nlet TotalEventsThreshold = 5;\\nlet ExeList = dynamic([\\\"powershell.exe\\\",\\\"cmd.exe\\\",\\\"wmic.exe\\\",\\\"psexec.exe\\\",\\\"cacls.exe\\\",\\\"rundll.exe\\\"]);\\nlet TimeSeriesData = \\nSecurityEvent\\n| where EventID == 4688 | extend Process = tolower(Process)\\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\\n| where Process in (ExeList)\\n| project TimeGenerated, Computer, AccountType, Account, Process\\n| make-series Total=count() on TimeGenerated from ago(starttime) to ago(endtime) step timeframe by Process;\\nlet TimeSeriesAlerts = TimeSeriesData\\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 1.5, -1, 'linefit')\\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\\n| where anomalies > 0\\n| project Process, TimeGenerated, Total, baseline, anomalies, score\\n| where Total > TotalEventsThreshold;\\nTimeSeriesAlerts\\n| join (\\nSecurityEvent\\n| where EventID == 4688 | extend Process = tolower(Process)\\n| summarize CommandlineCount = count() by bin(TimeGenerated, 1h), Process, CommandLine, Computer, Account\\n) on Process, TimeGenerated \\n| project AnomalyHour = TimeGenerated, Computer, Account, Process, CommandLine, CommandlineCount, Total, baseline, anomalies, score \\n| extend timestamp = AnomalyHour, AccountCustomEntity = Account, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Process execution frequency anomaly\",\r\n        \"description\": \"Identifies anomalous spike in frequency of executions of sensitive processes which are often leveraged as attack vectors. \\nThe query leverages KQL built-in anomaly detection algorithms to find large deviations from baseline patterns. \\nSudden increases in execution frequency of sensitive processes should be further investigated for malicious activity.\\nTune the values from 1.5 to 3 in series_decompose_anomalies for further outliers or based on custom threshold values for score.\",\r\n        \"tactics\": [\r\n          \"Execution\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-05-07T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/5b72f527-e3f6-4a00-9908-8e4fee14da9f\",\r\n      \"name\": \"5b72f527-e3f6-4a00-9908-8e4fee14da9f\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1h;\\nCommonSecurityLog \\n| where TimeGenerated > ago(timeframe) \\n| where isnotempty(DestinationPort) and DeviceAction !in (\\\"reset-both\\\", \\\"deny\\\") \\n// filter out common usage ports. Add ports that are legitimate for your environment\\n| where DestinationPort !in (\\\"443\\\", \\\"53\\\", \\\"389\\\", \\\"80\\\", \\\"0\\\", \\\"880\\\", \\\"8888\\\", \\\"8080\\\")\\n| where ApplicationProtocol == \\\"incomplete\\\" \\n// filter out IANA ephemeral or negotiated ports as per https://en.wikipedia.org/wiki/Ephemeral_port\\n| where DestinationPort !between (toint(49512) .. toint(65535)) \\n| where Computer != \\\"\\\" \\n| where DestinationIP !startswith \\\"10.\\\"\\n// Filter out any graceful reset reasons of AGED OUT which occurs when a TCP session closes with a FIN due to aging out. \\n| where AdditionalExtensions !has \\\"reason=aged-out\\\" \\n// Filter out any TCP FIN which occurs when a TCP FIN is used to gracefully close half or both sides of a connection.\\n| where AdditionalExtensions !has \\\"reason=tcp-fin\\\" \\n// Uncomment one of the following where clauses to trigger on specific TCP reset reasons\\n// See Palo Alto article for details - https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClUvCAK\\n// TCP RST-server - Occurs when the server sends a TCP reset to the client\\n// | where AdditionalExtensions has \\\"reason=tcp-rst-from-server\\\"  \\n// TCP RST-client - Occurs when the client sends a TCP reset to the server\\n// | where AdditionalExtensions has \\\"reason=tcp-rst-from-client\\\"  \\n| extend reason = tostring(split(AdditionalExtensions, \\\";\\\")[3])\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by DeviceName, SourceUserID, SourceIP, ApplicationProtocol, reason, DestinationPort, Protocol, DeviceVendor, DeviceProduct, DeviceAction, DestinationIP\\n| where count_ >= 10\\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), makeset(DestinationIP), totalcount = sum(count_) by DeviceName, SourceUserID, SourceIP, ApplicationProtocol, reason, DestinationPort, Protocol, DeviceVendor, DeviceProduct, DeviceAction\\n| extend timestamp = StartTimeUtc, IPCustomEntity = SourceIP, AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Palo Alto - possible internal to external port scanning\",\r\n        \"description\": \"Identifies a list of internal Source IPs (10.x.x.x Hosts) that have triggered 10 or more non-graceful tcp server resets from one or more Destination IPs which \\nresults in an \\\"ApplicationProtocol = incomplete\\\" designation. The server resets coupled with an \\\"Incomplete\\\" ApplicationProtocol designation can be an indication \\nof internal to external port scanning or probing attack. \\nReferences: https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClUvCAK and\\nhttps://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClTaCAK\",\r\n        \"tactics\": [\r\n          \"Discovery\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a7427ed7-04b4-4e3b-b323-08b981b9b4bf\",\r\n      \"name\": \"a7427ed7-04b4-4e3b-b323-08b981b9b4bf\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n| where isnotempty(FileHashValue)\\n|  join (\\n  SecurityEvent | where TimeGenerated >= ago(dt_lookBack)\\n      | where EventID in (\\\"8003\\\",\\\"8002\\\",\\\"8005\\\")\\n      | where isnotempty(FileHash)\\n      | extend SecurityEvent_TimeGenerated = TimeGenerated, Event = EventID\\n)\\non $left.FileHashValue == $right.FileHash\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\\nSecurityEvent_TimeGenerated, Process, FileHash, Computer, Account, Event\\n| extend timestamp = SecurityEvent_TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map File Hash to Security Event\",\r\n        \"description\": \"Identifies a match in Security Event data from any File Hash IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/cca3b4d9-ac39-4109-8b93-65bb284003e6\",\r\n      \"name\": \"cca3b4d9-ac39-4109-8b93-65bb284003e6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$';\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n//Filtering the table for Email related IOCs\\n| where isnotempty(EmailRecipient)\\n| join (\\n    AzureActivity | where TimeGenerated >= ago(dt_lookBack) and isnotempty(Caller)\\n    | extend Caller = tolower(Caller)\\n    | where Caller matches regex emailregex\\n    | extend AzureActivity_TimeGenerated = TimeGenerated\\n)\\non $left.EmailRecipient == $right.Caller\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, AzureActivity_TimeGenerated,\\nEmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, Caller, Level, CallerIpAddress, Category, OperationName,\\nOperationNameValue, ActivityStatus, ResourceGroup, SubscriptionId\\n| extend timestamp = AzureActivity_TimeGenerated, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map Email entity to AzureActivity\",\r\n        \"description\": \"Identifies a match in AzureActivity table from any Email IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActivity\",\r\n            \"dataTypes\": [\r\n              \"AzureActivity\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a7564d76-ec6b-4519-a66b-fcc80c42332b\",\r\n      \"name\": \"a7564d76-ec6b-4519-a66b-fcc80c42332b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1h;\\nlet WellKnownLocalSID = \\\"S-1-5-32-5[0-9][0-9]$\\\";\\nlet WellKnownGroupSID = \\\"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\\\";\\nlet GroupAddition = SecurityEvent \\n| where TimeGenerated > ago(timeframe)\\n// 4728 - A member was added to a security-enabled global group\\n// 4732 - A member was added to a security-enabled local group\\n// 4756 - A member was added to a security-enabled universal group  \\n| where EventID in (\\\"4728\\\", \\\"4732\\\", \\\"4756\\\") \\n| where AccountType =~ \\\"User\\\" and MemberName == \\\"-\\\"\\n// Exclude Remote Desktop Users group: S-1-5-32-555\\n| where TargetSid !in (\\\"S-1-5-32-555\\\")\\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, GroupAddComputer = Computer, \\nGroupAddTargetUserName = TargetUserName, GroupAddTargetDomainName = TargetDomainName, GroupAddTargetSid = TargetSid,  \\nGroupAddSubjectUserName = SubjectUserName, GroupAddSubjectUserSid = SubjectUserSid, GroupSid = MemberSid;\\nlet GroupCreated = SecurityEvent\\n| where TimeGenerated > ago(timeframe)\\n// 4727 - A security-enabled global group was created\\n// 4731 - A security-enabled local group was created\\n// 4754 - A security-enabled universal group was created\\n| where EventID in (\\\"4727\\\", \\\"4731\\\", \\\"4754\\\")\\n| where AccountType =~ \\\"User\\\"\\n| project GroupCreateTime = TimeGenerated, GroupCreateEventID = EventID, GroupCreateActivity = Activity, GroupCreateComputer = Computer, \\nGroupCreateTargetUserName = TargetUserName, GroupCreateTargetDomainName = TargetDomainName, GroupCreateSubjectUserName = SubjectUserName, \\nGroupCreateSubjectDomainName = SubjectDomainName, GroupCreateSubjectUserSid = SubjectUserSid, GroupSid = TargetSid;\\nGroupCreated\\n| join (\\nGroupAddition\\n) on GroupSid \\n| extend timestamp = GroupCreateTime, AccountCustomEntity = GroupCreateSubjectUserName, HostCustomEntity = GroupCreateComputer\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Group added to built in domain local or global group\",\r\n        \"description\": \"Identifies when a recently created Group was added to a privileged built in domain local group or global group such as the \\nEnterprise Admins, Cert Publishers or DnsAdmins.  Be sure to verify this is an expected addition.\\nReferences: For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups.\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"PrivilegeEscalation\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/44a555d8-ecee-4a25-95ce-055879b4b14b\",\r\n      \"name\": \"44a555d8-ecee-4a25-95ce-055879b4b14b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeFrame = 1d;\\nlet timeBin = 10m;\\nlet portThreshold = 30;\\nW3CIISLog\\n| where TimeGenerated >= ago(timeFrame)\\n| extend scStatusFull = strcat(scStatus, \\\".\\\",scSubStatus) \\n// Map common IIS codes\\n| extend scStatusFull_Friendly = case(\\nscStatusFull == \\\"401.0\\\", \\\"Access denied.\\\",\\nscStatusFull == \\\"401.1\\\", \\\"Logon failed.\\\",\\nscStatusFull == \\\"401.2\\\", \\\"Logon failed due to server configuration.\\\",\\nscStatusFull == \\\"401.3\\\", \\\"Unauthorized due to ACL on resource.\\\",\\nscStatusFull == \\\"401.4\\\", \\\"Authorization failed by filter.\\\",\\nscStatusFull == \\\"401.5\\\", \\\"Authorization failed by ISAPI/CGI application.\\\",\\nscStatusFull == \\\"403.0\\\", \\\"Forbidden.\\\",\\nscStatusFull == \\\"403.4\\\", \\\"SSL required.\\\",\\n\\\"See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\\\")\\n// Mapping to Hex so can be mapped using website in comments above\\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) \\n// Map common win32 codes\\n| extend scWin32Status_Friendly = case(\\nscWin32Status_Hex =~ \\\"775\\\", \\\"The referenced account is currently locked out and cannot be logged on to.\\\",\\nscWin32Status_Hex =~ \\\"52e\\\", \\\"Logon failure: Unknown user name or bad password.\\\",\\nscWin32Status_Hex =~ \\\"532\\\", \\\"Logon failure: The specified account password has expired.\\\",\\nscWin32Status_Hex =~ \\\"533\\\", \\\"Logon failure: Account currently disabled.\\\", \\nscWin32Status_Hex =~ \\\"2ee2\\\", \\\"The request has timed out.\\\", \\nscWin32Status_Hex =~ \\\"0\\\", \\\"The operation completed successfully.\\\", \\nscWin32Status_Hex =~ \\\"1\\\", \\\"Incorrect function.\\\", \\nscWin32Status_Hex =~ \\\"2\\\", \\\"The system cannot find the file specified.\\\", \\nscWin32Status_Hex =~ \\\"3\\\", \\\"The system cannot find the path specified.\\\", \\nscWin32Status_Hex =~ \\\"4\\\", \\\"The system cannot open the file.\\\", \\nscWin32Status_Hex =~ \\\"5\\\", \\\"Access is denied.\\\", \\nscWin32Status_Hex =~ \\\"8009030e\\\", \\\"SEC_E_NO_CREDENTIALS\\\", \\nscWin32Status_Hex =~ \\\"8009030C\\\", \\\"SEC_E_LOGON_DENIED\\\", \\n\\\"See - https://msdn.microsoft.com/library/cc231199.aspx\\\")\\n// decode URI when available\\n| extend decodedUriQuery = url_decode(csUriQuery)\\n// Count of attempts by client IP on many ports\\n| summarize makeset(sPort), makeset(decodedUriQuery), makeset(csUserName), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), ConnectionsCount = count() by bin(TimeGenerated, timeBin), cIP, Computer, sIP\\n| extend portCount = arraylength(set_sPort)\\n| where portCount >= portThreshold\\n| project TimeGenerated, cIP, set_sPort, set_csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, ConnectionsCount, portCount\\n| order by portCount\\n| extend timestamp = TimeGenerated, IPCustomEntity = cIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"High count of connections by client IP on many ports\",\r\n        \"description\": \"Identifies when 30 or more ports are used for a given client IP in 10 minutes occurring on the IIS server.\\nThis could be indicative of attempted port scanning or exploit attempt at internet facing web applications.  \\nThis could also simply indicate a misconfigured service or device.\\nReferences:\\nIIS status code mapping - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\\nWin32 Status code mapping - https://msdn.microsoft.com/library/cc231199.aspx\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-03-19T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureMonitor(IIS)\",\r\n            \"dataTypes\": [\r\n              \"W3CIISLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/f845881e-2500-44dc-8ed7-b372af3e1e25\",\r\n      \"name\": \"f845881e-2500-44dc-8ed7-b372af3e1e25\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeFrame = 1d;\\nlet short_uaLength = 5;\\nlet long_uaLength = 1000;\\nlet c_threshold = 100;\\nW3CIISLog \\n| where TimeGenerated >= ago(timeFrame)\\n// Exclude local IPs as these create noise\\n| where cIP !startswith \\\"192.168.\\\" and cIP != \\\"::1\\\"\\n| where isnotempty(csUserAgent) and csUserAgent !in~ (\\\"-\\\", \\\"MSRPC\\\") and (string_size(csUserAgent) <= short_uaLength or string_size(csUserAgent) >= long_uaLength)\\n| extend csUserAgent_size = string_size(csUserAgent)\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ConnectionCount = count() by Computer, sSiteName, sPort, csUserAgent, csUserAgent_size, csUserName , csMethod, csUriStem, sIP, cIP, scStatus, scSubStatus, scWin32Status\\n| where ConnectionCount < c_threshold\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = csUserName, HostCustomEntity = Computer, IPCustomEntity = cIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Anomalous User Agent connection attempt\",\r\n        \"description\": \"Identifies connection attempts (success or fail) from clients with very short or very long User Agent strings and with less than 100 connection attempts.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-20T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureMonitor(IIS)\",\r\n            \"dataTypes\": [\r\n              \"W3CIISLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/d6190dde-8fd2-456a-ac5b-0a32400b0464\",\r\n      \"name\": \"d6190dde-8fd2-456a-ac5b-0a32400b0464\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = 1d;\\nlet ProcessCreationEvents=() {\\nlet processEvents=SecurityEvent\\n| where EventID==4688\\n| where isnotempty(CommandLine)\\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, FileName = Process, CommandLine, ParentProcessName;\\nprocessEvents;\\n};\\nProcessCreationEvents \\n| where TimeGenerated > ago(timeframe) \\n| where CommandLine contains \\\".decode('base64')\\\"\\n        or CommandLine contains \\\"base64 --decode\\\"\\n        or CommandLine contains \\\".decode64(\\\" \\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), CountToday = count() by Computer, Account, AccountDomain, FileName, CommandLine, ParentProcessName \\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Process executed from binary hidden in Base64 encoded file\",\r\n        \"description\": \"Encoding malicious software is a technique used to obfuscate files from detection. \\nThe first CommandLine component is looking for Python decoding base64. \\nThe second CommandLine component is looking for Bash/sh command line base64 decoding.\\nThe third one is looking for Ruby decoding base64.\",\r\n        \"tactics\": [\r\n          \"Execution\",\r\n          \"DefenseEvasion\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-01-24T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/7efc75ce-e2a4-400f-a8b1-283d3b0f2c60\",\r\n      \"name\": \"7efc75ce-e2a4-400f-a8b1-283d3b0f2c60\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet WellKnownLocalSID = \\\"S-1-5-32-5[0-9][0-9]$\\\";\\nlet WellKnownGroupSID = \\\"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\\\";\\nlet AC_Add = \\nSecurityEvent\\n| where TimeGenerated >= ago(timeframe)\\n// Event ID related to member addition.\\n| where EventID in (4728, 4732,4756) \\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID  \\n| parse EventData with * '\\\"MemberName\\\">' AccountAdded \\\",OU\\\" * \\n| where isnotempty(AccountAdded)\\n| extend GroupAddedTo = TargetUserName, AddingAccount = Account \\n| extend  AccountAdded_GroupAddedTo_AddingAccount = strcat(AccountAdded, \\\"||\\\", GroupAddedTo, \\\"||\\\", AddingAccount )\\n| project AccountAdded_GroupAddedTo_AddingAccount, AccountAddedTime = TimeGenerated;\\nlet AC_Remove = \\nSecurityEvent\\n| where TimeGenerated >= ago(timeframe)\\n// Event IDs related to member removal.\\n| where EventID in (4729,4733,4757)\\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID \\n| parse EventData with * '\\\"MemberName\\\">' AccountRemoved \\\",OU\\\" * \\n| where isnotempty(AccountRemoved)\\n| extend GroupRemovedFrom = TargetUserName, RemovingAccount = Account\\n| extend AccountRemoved_GroupRemovedFrom_RemovingAccount = strcat(AccountRemoved, \\\"||\\\", GroupRemovedFrom, \\\"||\\\", RemovingAccount)\\n| project AccountRemoved_GroupRemovedFrom_RemovingAccount, AccountRemovedTime = TimeGenerated, Computer, RemovedAccountId = tolower(AccountRemoved), \\nRemovedByUser = SubjectUserName, RemovedByUserLogonId = SubjectLogonId,  GroupRemovedFrom = TargetUserName, TargetDomainName; \\nAC_Add \\n| join kind= inner AC_Remove on $left.AccountAdded_GroupAddedTo_AddingAccount == $right.AccountRemoved_GroupRemovedFrom_RemovingAccount \\n| extend DurationinSecondAfter_Removed = datetime_diff ('second', AccountRemovedTime, AccountAddedTime)\\n| where DurationinSecondAfter_Removed > 0\\n| project-away AccountRemoved_GroupRemovedFrom_RemovingAccount\\n| extend timestamp = AccountAddedTime, AccountCustomEntity = RemovedAccountId, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Account added and removed from privileged groups\",\r\n        \"description\": \"Identifies accounts that are added to privileged group and then quickly removed, which could be a sign of compromise.' \",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"PrivilegeEscalation\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-04-03T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/97ad74c4-fdd9-4a3f-b6bf-5e28f4f71e06\",\r\n      \"name\": \"97ad74c4-fdd9-4a3f-b6bf-5e28f4f71e06\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let LearningPeriod = 7d; \\nlet BinTime = 1h; \\nlet RunTime = 1h; \\nlet StartTime = 1h; \\nlet NumberOfStds = 3; \\nlet MinThreshold = 10.0; \\nlet EndRunTime = StartTime - RunTime; \\nlet EndLearningTime = StartTime + LearningPeriod; \\nlet GitHubFailedSSOLogins = (SigninLogs \\n| where AppDisplayName == \\\"GitHub.com\\\" \\n| where ResultType == 50056); \\nGitHubFailedSSOLogins \\n| where TimeGenerated between (ago(EndLearningTime) .. ago(StartTime)) \\n| summarize FailedLoginsCountInBinTime = count() by  UserPrincipalName, bin(TimeGenerated, BinTime) \\n| summarize AvgOfFailedLoginsInLearning = avg(FailedLoginsCountInBinTime), StdOfFailedLoginsInLearning = stdev(FailedLoginsCountInBinTime) by UserPrincipalName, tostring(set_IPAddress)\\n| extend LearningThreshold = max_of(AvgOfFailedLoginsInLearning + StdOfFailedLoginsInLearning * NumberOfStds, MinThreshold)  \\n| join kind=innerunique ( \\n  GitHubFailedSSOLogins \\n  | where TimeGenerated between (ago(StartTime) .. ago(EndRunTime)) \\n  | summarize FailedLoginsCountInRunTime = count() by User = Identity \\n) on UserPrincipalName \\n| where FailedLoginsCountInRunTime > LearningThreshold\\n| extend AccountCustomEntity = UserPrincipalName , timestamp = TimeGenerated\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Brute Force Attack against GitHub Account\",\r\n        \"description\": \"Attackers who are trying to guess your users' passwords or use brute-force methods to get in. If your organization is using SSO with Azure Active Directory, authentication logs to GitHub.com will be generated. Using the following query can help you identify a sudden increase in failed logon attempt of users.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-02T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/26a3b261-b997-4374-94ea-6c37f67f4f39\",\r\n      \"name\": \"26a3b261-b997-4374-94ea-6c37f67f4f39\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let timeframe = 1d;\\nlet DomainNames = dynamic([\\\"asyspy256.ddns.net\\\",\\\"hotkillmail9sddcc.ddns.net\\\",\\\"rosaf112.ddns.net\\\",\\\"cvdfhjh1231.myftp.biz\\\",\\\"sz2016rose.ddns.net\\\",\\\"dffwescwer4325.myftp.biz\\\",\\\"cvdfhjh1231.ddns.net\\\"]);\\nlet SHA1Hash = dynamic ([\\\"53a44c2396d15c3a03723fa5e5db54cafd527635\\\", \\\"9c5e496921e3bc882dc40694f1dcc3746a75db19\\\", \\\"aeb573accfd95758550cf30bf04f389a92922844\\\", \\\"79ef78a797403a4ed1a616c68e07fff868a8650a\\\", \\\"4f6f38b4cec35e895d91c052b1f5a83d665c2196\\\", \\\"1e8c2cac2e4ce7cbd33c3858eb2e24531cb8a84d\\\", \\\"e841a63e47361a572db9a7334af459ddca11347a\\\", \\\"c28f606df28a9bc8df75a4d5e5837fc5522dd34d\\\", \\\"2e94b305d6812a9f96e6781c888e48c7fb157b6b\\\", \\\"dd44133716b8a241957b912fa6a02efde3ce3025\\\", \\\"8793bf166cb89eb55f0593404e4e933ab605e803\\\", \\\"a39b57032dbb2335499a51e13470a7cd5d86b138\\\", \\\"41cc2b15c662bc001c0eb92f6cc222934f0beeea\\\", \\\"d209430d6af54792371174e70e27dd11d3def7a7\\\", \\\"1c6452026c56efd2c94cea7e0f671eb55515edb0\\\", \\\"c6b41d3afdcdcaf9f442bbe772f5da871801fd5a\\\", \\\"4923d460e22fbbf165bbbaba168e5a46b8157d9f\\\", \\\"f201504bd96e81d0d350c3a8332593ee1c9e09de\\\", \\\"ddd2db1127632a2a52943a2fe516a2e7d05d70d2\\\"]);\\nlet SHA256Hash = dynamic ([\\\"9ae7c4a4e1cfe9b505c3a47e66551eb1357affee65bfefb0109d02f4e97c06dd\\\", \\\"7772d624e1aed327abcd24ce2068063da0e31bb1d5d3bf2841fc977e198c6c5b\\\", \\\"657fc7e6447e0065d488a7db2caab13071e44741875044f9024ca843fe4e86b5\\\", \\\"2ef157a97e28574356e1d871abf75deca7d7a1ea662f38b577a06dd039dbae29\\\", \\\"52fd7b90d7144ac448af4008be639d4d45c252e51823f4311011af3207a5fc77\\\", \\\"a370e47cb97b35f1ae6590d14ada7561d22b4a73be0cb6df7e851d85054b1ac3\\\", \\\"5bf80b871278a29f356bd42af1e35428aead20cd90b0c7642247afcaaa95b022\\\", \\\"6f690ccfd54c2b02f0c3cb89c938162c10cbeee693286e809579c540b07ed883\\\", \\\"3c884f776fbd16597c072afd81029e8764dd57ee79d798829ca111f5e170bd8e\\\", \\\"1922a419f57afb351b58330ed456143cc8de8b3ebcbd236d26a219b03b3464d7\\\", \\\"fe0e4ef832b62d49b43433e10c47dc51072959af93963c790892efc20ec422f1\\\", \\\"7ce9e1c5562c8a5c93878629a47fe6071a35d604ed57a8f918f3eadf82c11a9c\\\", \\\"178d5ee8c04401d332af331087a80fb4e5e2937edfba7266f9be34a5029b6945\\\", \\\"51f70956fa8c487784fd21ab795f6ba2199b5c2d346acdeef1de0318a4c729d9\\\", \\\"889bca95f1a69e94aaade1e959ed0d3620531dc0fc563be9a8decf41899b4d79\\\", \\\"332ddaa00e2eb862742cb8d7e24ce52a5d38ffb22f6c8bd51162bd35e84d7ddf\\\", \\\"44bcf82fa536318622798504e8369e9dcdb32686b95fcb44579f0b4efa79df08\\\", \\\"63552772fdd8c947712a2cff00dfe25c7a34133716784b6d486227384f8cf3ef\\\", \\\"056744a3c371b5938d63c396fe094afce8fb153796a65afa5103e1bffd7ca070\\\"]);\\nlet SigNames = dynamic([\\\"TrojanDropper:Win32/BlackMould.A!dha\\\", \\\"Trojan:Win32/BlackMould.B!dha\\\", \\\"Trojan:Win32/QuarkBandit.A!dha\\\", \\\"Trojan:Win32/Sidelod.A!dha\\\"]);\\n(union isfuzzy=true\\n(CommonSecurityLog \\n| where TimeGenerated >= ago(timeframe) \\n| parse Message with * '(' DNSName ')' * \\n| where isnotempty(FileHash)\\n| where FileHash in (SHA256Hash) or DNSName in~ (DomainNames)\\n| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP\\n),\\n(DnsEvents \\n| where TimeGenerated >= ago(timeframe) \\n| extend DNSName = Name\\n| where isnotempty(DNSName)\\n| where DNSName  in~ (DomainNames)\\n| extend IPAddress = ClientIP\\n),\\n(VMConnection \\n| where TimeGenerated >= ago(timeframe) \\n| parse RemoteDnsCanonicalNames with * '[\\\"' DNSName '\\\"]' *\\n| where isnotempty(DNSName)\\n| where DNSName  in~ (DomainNames)\\n| extend IPAddress = RemoteIp\\n),\\n(Event\\n//This query uses sysmon data depending on table name used this may need updataing\\n| where TimeGenerated >= ago(3d)\\n| where Source == \\\"Microsoft-Windows-Sysmon\\\"\\n| extend EvData = parse_xml(EventData)\\n| extend EventDetail = EvData.DataItem.EventData.Data\\n| extend Hashes = EventDetail.[16].[\\\"#text\\\"]\\n| parse Hashes with * 'SHA1=' SHA1 ',' * \\n| where isnotempty(Hashes)\\n| where Hashes in (SHA1Hash) \\n| extend Account = UserName\\n),\\n(SecurityAlert\\n| where TimeGenerated >= ago(timeframe)\\n| where Entities has_any (SigNames)\\n| extend Computer = tostring(parse_json(Entities)[0].HostName) \\n)\\n)\\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Known GALLIUM domains and hashes\",\r\n        \"description\": \"GALLIUM command and control domains and hash values for tools and malware used by GALLIUM. \\n Matches domain name IOCs related to the GALLIUM activity group with CommonSecurityLog, DnsEvents, VMConnection and SecurityEvents dataTypes.\\n References: https://www.microsoft.com/security/blog/2019/12/12/gallium-targeting-global-telecom/ \",\r\n        \"tactics\": [\r\n          \"CommandAndControl\",\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-12-06T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(VMInsights)\",\r\n            \"dataTypes\": [\r\n              \"VMConnection\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/30fa312c-31eb-43d8-b0cc-bcbdfb360822\",\r\n      \"name\": \"30fa312c-31eb-43d8-b0cc-bcbdfb360822\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let dt_lookBack = 1h;\\nlet ioc_lookBack = 14d;\\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$';\\nThreatIntelligenceIndicator\\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\\n| where Active == true\\n//Filtering the table for Email related IOCs\\n| where isnotempty(EmailRecipient)\\n| join (\\n    SigninLogs | where TimeGenerated >= ago(dt_lookBack) and isnotempty(UserPrincipalName)\\n    //Normalizing the column to lower case for exact match with EmailRecipient column\\n    | extend UserPrincipalName = tolower(UserPrincipalName)\\n    | where UserPrincipalName matches regex emailregex\\n    | extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\\n    | extend Region = tostring(LocationDetails[\\\"countryOrRegion\\\"]), State = tostring(LocationDetails[\\\"state\\\"]), City = tostring(LocationDetails[\\\"city\\\"])\\n    // renaming timestamp column so it is clear the log this came from SigninLogs table\\n    | extend SigninLogs_TimeGenerated = TimeGenerated\\n)\\non $left.EmailRecipient == $right.UserPrincipalName\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, SigninLogs_TimeGenerated,\\nEmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, IPAddress, UserPrincipalName, AppDisplayName,\\nStatusCode, StatusDetails, NetworkIP, NetworkDestinationIP, NetworkSourceIP\\n| extend timestamp = SigninLogs_TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress, URLCustomEntity = Url\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"(Preview) TI map Email entity to SigninLogs\",\r\n        \"description\": \"Identifies a match in SigninLogs table from any Email IOC from TI\",\r\n        \"tactics\": [\r\n          \"Impact\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-08-28T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"ThreatIntelligence\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"ThreatIntelligenceTaxii\",\r\n            \"dataTypes\": [\r\n              \"ThreatIntelligenceIndicator\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/e7ec9fa6-e7f7-41ed-a34b-b956837a3ee6\",\r\n      \"name\": \"e7ec9fa6-e7f7-41ed-a34b-b956837a3ee6\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let startdate = 1d;\\nlet threshold = 15;\\n// Below pulls messages from syslog-authpriv logs where there was an authentication failure with an unknown user.\\n// IP address of system attempting logon is also extracted from the SyslogMessage field. Some of these messages\\n// are aggregated.\\nlet authfail = Syslog\\n| where TimeGenerated >= ago(startdate)     \\n| where Facility =~ \\\"authpriv\\\"   // looks at authpriv messages\\n| where SyslogMessage contains \\\"authentication failure\\\" and SyslogMessage contains \\\" uid=0\\\"\\n| parse SyslogMessage with * \\\"rhost=\\\" ExternalIP\\n| project TimeGenerated, Computer, ProcessName, HostIP, ExternalIP, ProcessID;  \\n// Below pulls messages from syslog-authpriv logs that show each instance an unknown user tried to logon. \\nlet userfail = Syslog \\n| where TimeGenerated >= ago(startdate)\\n| where Facility =~ \\\"authpriv\\\" \\n| where SyslogMessage contains \\\"user unknown\\\"\\n| project TimeGenerated, Computer, HostIP, ProcessID;\\n// Join the two log messages above\\nlet userauthfail = authfail | join (userfail) on Computer, HostIP, ProcessID\\n| project TimeGenerated, Computer, HostIP, ExternalIP, ProcessID ;\\n// Extract the EventTime of the first logon attempt\\nlet firstfail = userauthfail\\n| summarize arg_min(TimeGenerated, *) by Computer, ExternalIP\\n| project Computer, ExternalIP, FirstLogonAttempt = TimeGenerated;\\n// Extract the EventTime of the last logon attempt\\nlet lastfail = userauthfail\\n| summarize arg_max(TimeGenerated, *) by Computer, ExternalIP\\n| project Computer, ExternalIP, LatestLogonAttempt = TimeGenerated;\\n// Join first and last logon attempt data and calculate the time between them (AttemptPeriodLength).\\nlet faildates = firstfail | join (lastfail) on Computer, ExternalIP\\n| project ExternalIP, Computer, FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts = LatestLogonAttempt - FirstLogonAttempt;\\n// Count the number of failed logon attempts by External IP and internal machine\\nlet totalfails = userauthfail\\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TotalLogonAttempts = count() by ExternalIP, Computer, HostIP\\n| project StartTimeUtc, EndTimeUtc, ExternalIP, Computer, HostIP, TotalLogonAttempts;\\n// Combine total attempts with timing data from above\\nlet finalfails = totalfails | join (faildates) on Computer, ExternalIP\\n| project StartTimeUtc, EndTimeUtc, SourceAddress = ExternalIP, DestinationHost = Computer, DestinationIP = HostIP, TotalLogonAttempts, FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts\\n| order by DestinationHost asc nulls last;\\nfinalfails \\n| where TotalLogonAttempts >= threshold\\n| extend timestamp = StartTimeUtc, HostCustomEntity = DestinationHost, IPCustomEntity = DestinationIP\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Failed logon attempts in authpriv\",\r\n        \"description\": \"Identifies failed logon attempts from unknown users in Syslog authpriv logs. The unknown user means the account that tried to log in \\nisn't provisioned on the machine. A few hits could indicate someone attempting to access a machine they aren't authorized to access. \\nIf there are many of hits, especially from outside your network, it could indicate a brute force attack. \\nDefault threshold for logon attempts is 15.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-14T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Syslog\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/84ad2f8a-b64c-49bc-b669-bdb4fd3071e9\",\r\n      \"name\": \"84ad2f8a-b64c-49bc-b669-bdb4fd3071e9\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"eset_CL\\n| where event_type_s == 'FilteredWebsites_Event'\\n| extend AccountCustomEntity = username_s, URLCustomEntity = object_uri_s, HostCustomEntity = hostname_s, IPCustomEntity = ipv4_s\",\r\n        \"queryFrequency\": \"PT5M\",\r\n        \"queryPeriod\": \"PT5M\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"URL\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Url\",\r\n                \"columnName\": \"URLCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Web sites blocked by Eset\",\r\n        \"description\": \"Create alert on web sites blocked by Eset.\",\r\n        \"tactics\": [\r\n          \"Exfiltration\",\r\n          \"CommandAndControl\",\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-07-09T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"EsetSMC\",\r\n            \"dataTypes\": [\r\n              \"eset_CL\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/200f05a2-db6e-4ff7-be83-bbc30b44755f\",\r\n      \"name\": \"200f05a2-db6e-4ff7-be83-bbc30b44755f\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Anomaly\",\r\n      \"properties\": {\r\n        \"severity\": \"Informational\",\r\n        \"anomalyDefinitionVersion\": \"1.0.0\",\r\n        \"techniques\": [\r\n          \"T1001\"\r\n        ],\r\n        \"customizableObservations\": {\r\n          \"multiSelectObservations\": null,\r\n          \"singleSelectObservations\": null,\r\n          \"prioritizeExcludeObservations\": null,\r\n          \"thresholdObservations\": [\r\n            {\r\n              \"minimum\": \"0\",\r\n              \"maximum\": \"1\",\r\n              \"value\": \"0.07\",\r\n              \"name\": \"Score\",\r\n              \"description\": \"Generate an anomaly when score is greater than the chosen value\",\r\n              \"sequenceNumber\": 1,\r\n              \"rerun\": \"NotRequired\"\r\n            }\r\n          ]\r\n        },\r\n        \"frequency\": \"P1D\",\r\n        \"displayName\": \"(Preview) Suspicious volume of logins to user account\",\r\n        \"description\": \"This algorithm is to detect unusually high volume of successful logins per user account. The model is trained on the previous 21 days of security event ID 4624 on a account. It indicates anomalous high volume of successful logins in the last day.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-05T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-05T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvents\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/d722831e-88f5-4e25-b106-4ef6e29f8c13\",\r\n      \"name\": \"d722831e-88f5-4e25-b106-4ef6e29f8c13\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"// a threshold can be enabled, see commented line below for PrevSeenCount\\nlet threshold = 2;\\nlet uploadOp = 'FileUploaded';\\n// Extensions that are interesting. Add/Remove to this list as you see fit\\nlet execExt = dynamic(['exe', 'inf', 'gzip', 'cmd', 'bat']);\\nlet starttime = 8d;\\nlet endtime = 1d;\\nOfficeActivity | where TimeGenerated >= ago(endtime)\\n// Limited to File Uploads due to potential noise, comment out the Operation statement below to include any operation type\\n// Additional, but potentially noisy operation types that include Uploads and Downloads can be included by adding the following - Operation contains \\\"upload\\\" or Operation contains \\\"download\\\"\\n| where Operation =~ uploadOp\\n| where SourceFileExtension has_any (execExt)\\n| project TimeGenerated, OfficeId, OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, UserAgent, Site_Url, SourceRelativeUrl, SourceFileName\\n| join kind= leftanti (\\nOfficeActivity | where TimeGenerated between (ago(starttime) .. ago(endtime))\\n| where Operation =~ uploadOp\\n| where SourceFileExtension has_any (execExt)\\n| summarize SourceRelativeUrl = make_set(SourceRelativeUrl), UserId = make_set(UserId) , PrevSeenCount = count() by SourceFileName\\n// To exclude previous matches when only above a specific count, change threshold above and uncomment the line below\\n//| where PrevSeenCount > threshold\\n| mvexpand SourceRelativeUrl, UserId\\n| extend SourceRelativeUrl = tostring(SourceRelativeUrl), UserId = tostring(UserId)\\n) on SourceFileName, SourceRelativeUrl, UserId \\n| extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\\n| extend UserIdUserFolderFormat = tolower(replace('@|\\\\\\\\.', '_',UserId))\\n// identify when UserId is not a match to the specific site url personal folder reference\\n| extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true , false ) \\n| summarize TimeGenerated = make_list(TimeGenerated), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), \\nUserAgents = make_list(UserAgent), OfficeIds = make_list(OfficeId), SourceRelativeUrls = make_list(SourceRelativeUrl), FileNames = make_list(SourceFileName)\\nby OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, Site_Url, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P8D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"displayName\": \"New executable via Office FileUploaded Operation\",\r\n        \"description\": \"Identifies when executable file types are uploaded to Office services such as SharePoint and OneDrive.\\nList currently includes 'exe', 'inf', 'gzip', 'cmd', 'bat' file extensions.\\nAdditionally, identifies when a given user is uploading these files to another users workspace.\\nThis may be indication of a staging location for malware or other malicious activity.\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-03-02T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-02-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"Office365\",\r\n            \"dataTypes\": [\r\n              \"OfficeActivity\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/02ef8d7e-fc3a-4d86-a457-650fa571d8d2\",\r\n      \"name\": \"02ef8d7e-fc3a-4d86-a457-650fa571d8d2\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeFrame = 1d;\\nlet logonDiff = 10m;\\nSigninLogs \\n| where TimeGenerated >= ago(timeFrame) \\n| where ResultType == \\\"0\\\" \\n| where AppDisplayName !in (\\\"Office 365 Exchange Online\\\", \\\"Skype for Business Online\\\")\\n| project SuccessLogonTime = TimeGenerated, UserPrincipalName, SuccessIPAddress = IPAddress, AppDisplayName, SuccessIPBlock = strcat(split(IPAddress, \\\".\\\")[0], \\\".\\\", split(IPAddress, \\\".\\\")[1])\\n| join kind= inner (\\n    SigninLogs \\n    | where TimeGenerated >= ago(timeFrame) \\n    | where ResultType !in (\\\"0\\\", \\\"50140\\\") \\n    | where ResultDescription !~ \\\"Other\\\"  \\n    | where AppDisplayName !in (\\\"Office 365 Exchange Online\\\", \\\"Skype for Business Online\\\")\\n    | project FailedLogonTime = TimeGenerated, UserPrincipalName, FailedIPAddress = IPAddress, AppDisplayName, ResultType, ResultDescription\\n) on UserPrincipalName, AppDisplayName \\n| where SuccessLogonTime < FailedLogonTime and FailedLogonTime - SuccessLogonTime <= logonDiff and FailedIPAddress !startswith SuccessIPBlock\\n| summarize FailedLogonTime = max(FailedLogonTime), SuccessLogonTime = max(SuccessLogonTime) by UserPrincipalName, SuccessIPAddress, AppDisplayName, FailedIPAddress, ResultType, ResultDescription \\n| extend timestamp = SuccessLogonTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = SuccessIPAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Successful logon from IP and failure from a different IP\",\r\n        \"description\": \"Identifies when a user account successfully logs onto an Azure App from one IP and within 10 mins failed to logon to the same App via a different IP.\\nThis may indicate a malicious attempt at password guessing based on knowledge of the users account.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\",\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-19T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AzureActiveDirectory\",\r\n            \"dataTypes\": [\r\n              \"SigninLogs\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/074ce265-f684-41cd-af07-613c5f3e6d0d\",\r\n      \"name\": \"074ce265-f684-41cd-af07-613c5f3e6d0d\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"High\",\r\n        \"query\": \"let timeframe = 1d;\\nlet DomainNames = dynamic([\\\"irf.services\\\",\\\"microsoft-onthehub.com\\\",\\\"msofficelab.com\\\",\\\"com-mailbox.com\\\",\\\"my-sharefile.com\\\",\\\"my-sharepoints.com\\\",\\n\\\"accounts-web-mail.com\\\",\\\"customer-certificate.com\\\",\\\"session-users-activities.com\\\",\\\"user-profile-credentials.com\\\",\\\"verify-linke.com\\\",\\\"support-servics.net\\\",\\n\\\"onedrive-sharedfile.com\\\",\\\"onedrv-live.com\\\",\\\"transparencyinternational-my-sharepoint.com\\\",\\\"transparencyinternational-my-sharepoints.com\\\",\\\"soros-my-sharepoint.com\\\"]);\\n(union isfuzzy=true\\n(CommonSecurityLog \\n| where TimeGenerated >= ago(timeframe) \\n| parse Message with * '(' DNSName ')' * \\n| extend Account = SourceUserID, Host = DeviceName, IPAddress = SourceIP),\\n(DnsEvents \\n| where TimeGenerated >= ago(timeframe) \\n| extend IPAddress = ClientIP, DNSName = Name, Host = Computer),\\n(VMConnection \\n| where TimeGenerated >= ago(timeframe) \\n| parse RemoteDnsCanonicalNames with * '[\\\"' DNSName '\\\"]' *\\n| extend IPAddress = RemoteIp, Host = Computer)\\n)\\n| where isnotempty(DNSName)\\n| where DNSName  in~ (DomainNames)\\n| extend timestamp = TimeGenerated, IPCustomEntity = IPAddress, AccountCustomEntity = Account, HostCustomEntity = Host\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Known STRONTIUM group domains - July 2019\",\r\n        \"description\": \"Matches domain name IOCs related to Strontium group activity published July 2019 with CommonSecurityLog, DnsEvents and VMConnection dataTypes.\\nReferences: https://blogs.microsoft.com/on-the-issues/2019/07/17/new-cyberthreats-require-new-ways-to-protect-democracy/.\",\r\n        \"tactics\": [\r\n          \"CommandAndControl\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-25T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"DNS\",\r\n            \"dataTypes\": [\r\n              \"DnsEvents\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"AzureMonitor(VMInsights)\",\r\n            \"dataTypes\": [\r\n              \"VMConnection\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"CiscoASA\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          },\r\n          {\r\n            \"connectorId\": \"PaloAltoNetworks\",\r\n            \"dataTypes\": [\r\n              \"CommonSecurityLog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/45b903c5-6f56-4969-af10-ae62ac709718\",\r\n      \"name\": \"45b903c5-6f56-4969-af10-ae62ac709718\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let starttime = 14d;\\nlet endtime = 1d;\\nSecurityEvent\\n| where TimeGenerated >= ago(endtime) \\n| where EventID == 4624 and LogonType == 10\\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ConnectionCount = count() \\nby Account = tolower(Account), Computer = toupper(Computer), IpAddress, AccountType, Activity, LogonTypeName, ProcessName\\n// use left anti to exclude anything from the previous 14 days that is not rare\\n| join kind=leftanti (\\nSecurityEvent\\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\\n| where EventID == 4624\\n| summarize by Computer = toupper(Computer), IpAddress, Account = tolower(Account)\\n) on Account, Computer\\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), ConnectionCount = sum(ConnectionCount)  \\nby Account, Computer, IpAddress, AccountType, Activity, LogonTypeName, ProcessName\\n| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P14D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Rare RDP Connections\",\r\n        \"description\": \"Identifies when an RDP connection is new or rare related to any logon type by a given account today based on comparison with the previous 14 days.\\nRDP connections are indicated by the EventID 4624 with LogonType = 10\",\r\n        \"tactics\": [\r\n          \"LateralMovement\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-01-14T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/c7bfadd4-34a6-4fa5-82f8-3691a32261e8\",\r\n      \"name\": \"c7bfadd4-34a6-4fa5-82f8-3691a32261e8\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet EventNameList = dynamic([\\\"ApplySecurityGroupsToLoadBalancer\\\", \\\"SetSecurityGroups\\\"]);\\nAWSCloudTrail\\n| where TimeGenerated >= ago(timeframe)\\n| where EventName in~ (EventNameList)\\n| extend User = iif(isnotempty(UserIdentityUserName), UserIdentityUserName, SessionIssuerUserName)\\n| summarize EventCount=count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) \\nby EventSource, EventName, UserIdentityType, User, SourceIpAddress, UserAgent, SessionMfaAuthenticated, AWSRegion,\\nAdditionalEventData, UserIdentityAccountId, UserIdentityPrincipalid, ResponseElements\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = User , IPCustomEntity = SourceIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Changes to AWS Elastic Load Balancer security groups\",\r\n        \"description\": \"Elastic Load Balancer distributes incoming traffic across multiple instances in multiple availability Zones. This increases the fault tolerance of your applications. \\n Unwanted changes to Elastic Load Balancer specific security groups could open your environment to attack and  hence needs monitoring.\\n More information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255 \\n and https://aws.amazon.com/elasticloadbalancing/.\",\r\n        \"tactics\": [\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/4f19d4e3-ec5f-4abc-9e61-819eb131758c\",\r\n      \"name\": \"4f19d4e3-ec5f-4abc-9e61-819eb131758c\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\nlet EventNameList = dynamic([ \\\"AuthorizeSecurityGroupEgress\\\", \\\"AuthorizeSecurityGroupIngress\\\", \\\"RevokeSecurityGroupEgress\\\", \\\"RevokeSecurityGroupIngress\\\"]);\\nAWSCloudTrail\\n| where TimeGenerated >= ago(timeframe)\\n| where EventName in~ (EventNameList)\\n| extend User = iif(isnotempty(UserIdentityUserName), UserIdentityUserName, SessionIssuerUserName)\\n| summarize EventCount=count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) \\nby EventSource, EventName, UserIdentityType, User, SourceIpAddress, UserAgent, SessionMfaAuthenticated, AWSRegion, \\nAdditionalEventData, UserIdentityAccountId, UserIdentityPrincipalid, ResponseElements\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = User , IPCustomEntity = SourceIpAddress\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Changes to AWS Security Group ingress and egress settings\",\r\n        \"description\": \"A Security Group acts as a virtual firewall of an instance to control inbound and outbound traffic. \\n Hence, ingress and egress settings changes to AWS Security Group should be monitored as these can expose the enviornment to new attack vectors.\\nMore information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255.\",\r\n        \"tactics\": [\r\n          \"Persistence\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-27T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"AWS\",\r\n            \"dataTypes\": [\r\n              \"AWSCloudTrail\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/c775a46b-21b1-46d7-afa6-37e3e577a27b\",\r\n      \"name\": \"c775a46b-21b1-46d7-afa6-37e3e577a27b\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Medium\",\r\n        \"query\": \"let timeframe = ago(1h);\\nlet threshold = 15;\\nSymantecVIP\\n| where TimeGenerated > timeframe\\n| where isnotempty(RADIUSAuth)\\n| where RADIUSAuth =~ \\\"Reject\\\"\\n| summarize Total = count() by bin(TimeGenerated, 15m), User, ClientIP\\n| where Total > threshold\\n| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP, AccountCustomEntity = User\",\r\n        \"queryFrequency\": \"PT1H\",\r\n        \"queryPeriod\": \"PT1H\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"IP\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"Address\",\r\n                \"columnName\": \"IPCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"Excessive Failed Authentication from Invalid Inputs\",\r\n        \"description\": \"Creates an incident in the event that a user generates an excessive amount of failed authentications due to invalid inputs, indications of a potential brute force.\",\r\n        \"tactics\": [\r\n          \"CredentialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-06-06T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SymantecVIP\",\r\n            \"dataTypes\": [\r\n              \"Syslog\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/ffe3625d-a933-4f63-b192-7e6ebf3be5fb\",\r\n      \"name\": \"ffe3625d-a933-4f63-b192-7e6ebf3be5fb\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Anomaly\",\r\n      \"properties\": {\r\n        \"severity\": \"Informational\",\r\n        \"anomalyDefinitionVersion\": \"1.0.0\",\r\n        \"techniques\": [\r\n          \"T1001\"\r\n        ],\r\n        \"customizableObservations\": {\r\n          \"multiSelectObservations\": null,\r\n          \"singleSelectObservations\": null,\r\n          \"prioritizeExcludeObservations\": null,\r\n          \"thresholdObservations\": [\r\n            {\r\n              \"minimum\": \"0\",\r\n              \"maximum\": \"1\",\r\n              \"value\": \"0.1\",\r\n              \"name\": \"Score\",\r\n              \"description\": \"Generate an anomaly when score is greater than the chosen value\",\r\n              \"sequenceNumber\": 1,\r\n              \"rerun\": \"NotRequired\"\r\n            }\r\n          ]\r\n        },\r\n        \"frequency\": \"P1D\",\r\n        \"displayName\": \"(Preview) Attempted User Account Bruteforce\",\r\n        \"description\": \"This algorithm detects an unusually high volume of failed login attempts per user account. The model is trained on the previous 21 days of security event ID 4625 on an account. It indicates anomalous high volume of failed login attempts in the last day.\",\r\n        \"tactics\": [\r\n          \"InitialAccess\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-12-08T00:00:00Z\",\r\n        \"createdDateUTC\": \"2020-12-08T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvents\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/a35f2c18-1b97-458f-ad26-e033af18eb99\",\r\n      \"name\": \"a35f2c18-1b97-458f-ad26-e033af18eb99\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"Scheduled\",\r\n      \"properties\": {\r\n        \"severity\": \"Low\",\r\n        \"query\": \"let timeframe = 1d;\\n// For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups\\nlet WellKnownLocalSID = \\\"S-1-5-32-5[0-9][0-9]$\\\";\\nlet WellKnownGroupSID = \\\"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\\\";\\nSecurityEvent \\n| where TimeGenerated > ago(timeframe)\\n// When MemberName contains '-' this indicates addition of a group to a group\\n| where AccountType == \\\"User\\\" and MemberName != \\\"-\\\"\\n// 4728 - A member was added to a security-enabled global group\\n// 4732 - A member was added to a security-enabled local group\\n// 4756 - A member was added to a security-enabled universal group\\n| where EventID in (4728, 4732, 4756)   \\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\\n// Exclude Remote Desktop Users group: S-1-5-32-555\\n| where TargetSid !in (\\\"S-1-5-32-555\\\")\\n| extend SimpleMemberName = tostring(split(tostring(split(MemberName, \\\",\\\")[0]),\\\"CN=\\\")[1])\\n| project StartTimeUtc = TimeGenerated, EventID, Activity, Computer, SimpleMemberName, MemberName, MemberSid, TargetUserName, TargetDomainName, TargetSid, UserPrincipalName, SubjectUserName, SubjectUserSid\\n| extend timestamp = StartTimeUtc, AccountCustomEntity = SimpleMemberName, HostCustomEntity = Computer\",\r\n        \"queryFrequency\": \"P1D\",\r\n        \"queryPeriod\": \"P1D\",\r\n        \"triggerOperator\": \"GreaterThan\",\r\n        \"triggerThreshold\": 0,\r\n        \"entityMappings\": [\r\n          {\r\n            \"entityType\": \"Account\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"AccountCustomEntity\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"entityType\": \"Host\",\r\n            \"fieldMappings\": [\r\n              {\r\n                \"identifier\": \"FullName\",\r\n                \"columnName\": \"HostCustomEntity\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"displayName\": \"User account added to built in domain local or global group\",\r\n        \"description\": \"Identifies when a user account has been added to a privileged built in domain local group or global group \\nsuch as the Enterprise Admins, Cert Publishers or DnsAdmins. Be sure to verify this is an expected addition.\",\r\n        \"tactics\": [\r\n          \"Persistence\",\r\n          \"PrivilegeEscalation\"\r\n        ],\r\n        \"lastUpdatedDateUTC\": \"2020-11-17T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-02-14T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"SecurityEvents\",\r\n            \"dataTypes\": [\r\n              \"SecurityEvent\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"/subscriptions/1c61ccbf-70b3-45a3-a1fb-848ce46d70a6/resourceGroups/ndicola-azsposh/providers/Microsoft.OperationalInsights/workspaces/azsposh/providers/Microsoft.SecurityInsights/AlertRuleTemplates/b3cfc7c0-092c-481c-a55b-34a3979758cb\",\r\n      \"name\": \"b3cfc7c0-092c-481c-a55b-34a3979758cb\",\r\n      \"type\": \"Microsoft.SecurityInsights/AlertRuleTemplates\",\r\n      \"kind\": \"MicrosoftSecurityIncidentCreation\",\r\n      \"properties\": {\r\n        \"productFilter\": \"Microsoft Cloud App Security\",\r\n        \"displayName\": \"Create incidents based on Microsoft Cloud App Security alerts\",\r\n        \"description\": \"Create incidents based on all alerts generated in Microsoft Cloud App Security\",\r\n        \"lastUpdatedDateUTC\": \"2019-07-16T00:00:00Z\",\r\n        \"createdDateUTC\": \"2019-07-16T00:00:00Z\",\r\n        \"status\": \"Available\",\r\n        \"requiredDataConnectors\": [\r\n          {\r\n            \"connectorId\": \"MicrosoftCloudAppSecurity\",\r\n            \"dataTypes\": [\r\n              \"SecurityAlert (MCAS)\"\r\n            ]\r\n          }\r\n        ],\r\n        \"alertRulesCreatedByTemplateCount\": 0\r\n      }\r\n    }\r\n  ]\r\n}",
      "StatusCode": 200
    }
  ],
  "Names": {},
  "Variables": {
    "SubscriptionId": "1c61ccbf-70b3-45a3-a1fb-848ce46d70a6"
  }
}