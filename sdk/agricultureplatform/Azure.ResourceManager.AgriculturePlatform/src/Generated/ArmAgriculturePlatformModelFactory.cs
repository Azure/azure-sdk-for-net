// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.AgriculturePlatform.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmAgriculturePlatformModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.AgricultureServiceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="sku"> The SKU (Stock Keeping Unit) assigned to this resource. </param>
        /// <returns> A new <see cref="AgriculturePlatform.AgricultureServiceData"/> instance for mocking. </returns>
        public static AgricultureServiceData AgricultureServiceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, AgricultureServiceProperties properties = null, ManagedServiceIdentity identity = null, AgriculturePlatformSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AgricultureServiceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                sku,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgricultureServiceProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="config"> Config of the AgriService instance. </param>
        /// <param name="managedOnBehalfOfMoboBrokerResources"> Managed On Behalf Of Configuration. </param>
        /// <param name="dataConnectorCredentials"> Data connector credentials of AgriService instance. </param>
        /// <param name="installedSolutions"> AgriService installed solutions. </param>
        /// <returns> A new <see cref="Models.AgricultureServiceProperties"/> instance for mocking. </returns>
        public static AgricultureServiceProperties AgricultureServiceProperties(AgriculturePlatformProvisioningState? provisioningState = null, AgricultureServiceConfig config = null, IEnumerable<SubResource> managedOnBehalfOfMoboBrokerResources = null, IEnumerable<DataConnectorCredentialMap> dataConnectorCredentials = null, IEnumerable<InstalledSolutionMap> installedSolutions = null)
        {
            managedOnBehalfOfMoboBrokerResources ??= new List<SubResource>();
            dataConnectorCredentials ??= new List<DataConnectorCredentialMap>();
            installedSolutions ??= new List<InstalledSolutionMap>();

            return new AgricultureServiceProperties(
                provisioningState,
                config,
                managedOnBehalfOfMoboBrokerResources != null ? new ManagedOnBehalfOfConfiguration(managedOnBehalfOfMoboBrokerResources?.ToList(), serializedAdditionalRawData: null) : null,
                dataConnectorCredentials?.ToList(),
                installedSolutions?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgricultureServiceConfig"/>. </summary>
        /// <param name="instanceUri"> Instance URI of the AgriService instance. </param>
        /// <param name="version"> Version of AgriService instance. </param>
        /// <param name="appServiceResourceId"> App service resource Id. </param>
        /// <param name="cosmosDBResourceId"> Cosmos Db resource Id. </param>
        /// <param name="storageAccountResourceId"> Storage account resource Id. </param>
        /// <param name="keyVaultResourceId"> Key vault resource Id. </param>
        /// <param name="redisCacheResourceId"> Redis cache resource Id. </param>
        /// <returns> A new <see cref="Models.AgricultureServiceConfig"/> instance for mocking. </returns>
        public static AgricultureServiceConfig AgricultureServiceConfig(string instanceUri = null, string version = null, ResourceIdentifier appServiceResourceId = null, ResourceIdentifier cosmosDBResourceId = null, ResourceIdentifier storageAccountResourceId = null, ResourceIdentifier keyVaultResourceId = null, ResourceIdentifier redisCacheResourceId = null)
        {
            return new AgricultureServiceConfig(
                instanceUri,
                version,
                appServiceResourceId,
                cosmosDBResourceId,
                storageAccountResourceId,
                keyVaultResourceId,
                redisCacheResourceId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvailableAgriSolutionListResult"/>. </summary>
        /// <param name="solutions"> Agri solutions list. </param>
        /// <returns> A new <see cref="Models.AvailableAgriSolutionListResult"/> instance for mocking. </returns>
        public static AvailableAgriSolutionListResult AvailableAgriSolutionListResult(IEnumerable<DataManagerForAgricultureSolution> solutions = null)
        {
            solutions ??= new List<DataManagerForAgricultureSolution>();

            return new AvailableAgriSolutionListResult(solutions?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DataManagerForAgricultureSolution"/>. </summary>
        /// <param name="partnerId"> Partner Id. </param>
        /// <param name="solutionId"> Solution Id. </param>
        /// <param name="partnerTenantId"> Partner tenant Id. </param>
        /// <param name="dataAccessScopes"> Data access scopes. </param>
        /// <param name="marketPlaceOfferDetails"> Marketplace offer details. </param>
        /// <param name="saasApplicationId"> Saas application Id. </param>
        /// <param name="accessAzureDataManagerForAgricultureApplicationId"> Entra application Id used to access azure data manager for agriculture instance. </param>
        /// <param name="accessAzureDataManagerForAgricultureApplicationName"> Entra application name used to access azure data manager for agriculture instance. </param>
        /// <param name="isValidateInput"> Whether solution inference will validate input. </param>
        /// <returns> A new <see cref="Models.DataManagerForAgricultureSolution"/> instance for mocking. </returns>
        public static DataManagerForAgricultureSolution DataManagerForAgricultureSolution(string partnerId = null, string solutionId = null, string partnerTenantId = null, IEnumerable<string> dataAccessScopes = null, MarketPlaceOfferDetails marketPlaceOfferDetails = null, string saasApplicationId = null, string accessAzureDataManagerForAgricultureApplicationId = null, string accessAzureDataManagerForAgricultureApplicationName = null, bool isValidateInput = default)
        {
            dataAccessScopes ??= new List<string>();

            return new DataManagerForAgricultureSolution(
                partnerId,
                solutionId,
                partnerTenantId,
                dataAccessScopes?.ToList(),
                marketPlaceOfferDetails,
                saasApplicationId,
                accessAzureDataManagerForAgricultureApplicationId,
                accessAzureDataManagerForAgricultureApplicationName,
                isValidateInput,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketPlaceOfferDetails"/>. </summary>
        /// <param name="saasOfferId"> Saas offer Id. </param>
        /// <param name="publisherId"> Publisher Id. </param>
        /// <returns> A new <see cref="Models.MarketPlaceOfferDetails"/> instance for mocking. </returns>
        public static MarketPlaceOfferDetails MarketPlaceOfferDetails(string saasOfferId = null, string publisherId = null)
        {
            return new MarketPlaceOfferDetails(saasOfferId, publisherId, serializedAdditionalRawData: null);
        }
    }
}
