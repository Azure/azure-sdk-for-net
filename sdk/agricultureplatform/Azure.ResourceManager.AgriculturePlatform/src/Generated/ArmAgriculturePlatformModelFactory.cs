// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.AgriculturePlatform;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.AgriculturePlatform.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class ArmAgriculturePlatformModelFactory
    {

        /// <summary> Schema of the AgriService resource from Microsoft.AgriculturePlatform resource provider. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="sku"> The SKU (Stock Keeping Unit) assigned to this resource. </param>
        /// <returns> A new <see cref="AgriculturePlatform.AgricultureServiceData"/> instance for mocking. </returns>
        public static AgricultureServiceData AgricultureServiceData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, AgricultureServiceProperties properties = default, ManagedServiceIdentity identity = default, AgriculturePlatformSku sku = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new AgricultureServiceData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                identity,
                sku);
        }

        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="config"> Config of the AgriService instance. </param>
        /// <param name="managedOnBehalfOfMoboBrokerResources"> Associated MoboBrokerResources. </param>
        /// <param name="dataConnectorCredentials"> Data connector credentials of AgriService instance. </param>
        /// <param name="installedSolutions"> AgriService installed solutions. </param>
        /// <returns> A new <see cref="Models.AgricultureServiceProperties"/> instance for mocking. </returns>
        public static AgricultureServiceProperties AgricultureServiceProperties(AgriculturePlatformProvisioningState? provisioningState = default, AgricultureServiceConfig config = default, IReadOnlyList<SubResource> managedOnBehalfOfMoboBrokerResources = default, IEnumerable<DataConnectorCredentialMap> dataConnectorCredentials = default, IEnumerable<InstalledSolutionMap> installedSolutions = default)
        {
            dataConnectorCredentials ??= new ChangeTrackingList<DataConnectorCredentialMap>();
            installedSolutions ??= new ChangeTrackingList<InstalledSolutionMap>();

            return new AgricultureServiceProperties(
                provisioningState,
                config,
                managedOnBehalfOfMoboBrokerResources is null ? default : new ManagedOnBehalfOfConfiguration(managedOnBehalfOfMoboBrokerResources, new Dictionary<string, BinaryData>()),
                dataConnectorCredentials.ToList(),
                installedSolutions.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Config of the AgriService resource instance. </summary>
        /// <param name="instanceUri"> Instance URI of the AgriService instance. </param>
        /// <param name="version"> Version of AgriService instance. </param>
        /// <param name="appServiceResourceId"> App service resource Id. </param>
        /// <param name="cosmosDBResourceId"> Cosmos Db resource Id. </param>
        /// <param name="storageAccountResourceId"> Storage account resource Id. </param>
        /// <param name="keyVaultResourceId"> Key vault resource Id. </param>
        /// <param name="redisCacheResourceId"> Redis cache resource Id. </param>
        /// <returns> A new <see cref="Models.AgricultureServiceConfig"/> instance for mocking. </returns>
        public static AgricultureServiceConfig AgricultureServiceConfig(string instanceUri = default, string version = default, ResourceIdentifier appServiceResourceId = default, ResourceIdentifier cosmosDBResourceId = default, ResourceIdentifier storageAccountResourceId = default, ResourceIdentifier keyVaultResourceId = default, ResourceIdentifier redisCacheResourceId = default)
        {
            return new AgricultureServiceConfig(
                instanceUri,
                version,
                appServiceResourceId,
                cosmosDBResourceId,
                storageAccountResourceId,
                keyVaultResourceId,
                redisCacheResourceId,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The type used for update operations of the AgriServiceResource. </summary>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="sku"> The SKU (Stock Keeping Unit) assigned to this resource. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Models.AgricultureServicePatch"/> instance for mocking. </returns>
        public static AgricultureServicePatch AgricultureServicePatch(ManagedServiceIdentity identity = default, AgriculturePlatformSku sku = default, IDictionary<string, string> tags = default, AgriServiceResourceUpdateProperties properties = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new AgricultureServicePatch(identity, sku, tags, properties, additionalBinaryDataProperties: null);
        }

        /// <summary> The updatable properties of the AgriServiceResource. </summary>
        /// <param name="config"> Config of the AgriService instance. </param>
        /// <param name="dataConnectorCredentials"> Data connector credentials of AgriService instance. </param>
        /// <param name="installedSolutions"> AgriService installed solutions. </param>
        /// <returns> A new <see cref="Models.AgriServiceResourceUpdateProperties"/> instance for mocking. </returns>
        public static AgriServiceResourceUpdateProperties AgriServiceResourceUpdateProperties(AgricultureServiceConfig config = default, IEnumerable<DataConnectorCredentialMap> dataConnectorCredentials = default, IEnumerable<InstalledSolutionMap> installedSolutions = default)
        {
            dataConnectorCredentials ??= new ChangeTrackingList<DataConnectorCredentialMap>();
            installedSolutions ??= new ChangeTrackingList<InstalledSolutionMap>();

            return new AgriServiceResourceUpdateProperties(config, dataConnectorCredentials.ToList(), installedSolutions.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> The list of available agri solutions. </summary>
        /// <param name="solutions"> Agri solutions list. </param>
        /// <returns> A new <see cref="Models.AvailableAgriSolutionListResult"/> instance for mocking. </returns>
        public static AvailableAgriSolutionListResult AvailableAgriSolutionListResult(IEnumerable<DataManagerForAgricultureSolution> solutions = default)
        {
            solutions ??= new ChangeTrackingList<DataManagerForAgricultureSolution>();

            return new AvailableAgriSolutionListResult(solutions.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Data Manager for Agriculture solution. </summary>
        /// <param name="partnerId"> Partner Id. </param>
        /// <param name="solutionId"> Solution Id. </param>
        /// <param name="partnerTenantId"> Partner tenant Id. </param>
        /// <param name="dataAccessScopes"> Data access scopes. </param>
        /// <param name="marketPlaceOfferDetails"> Marketplace offer details. </param>
        /// <param name="saasApplicationId"> Saas application Id. </param>
        /// <param name="accessAzureDataManagerForAgricultureApplicationId"> Entra application Id used to access azure data manager for agriculture instance. </param>
        /// <param name="accessAzureDataManagerForAgricultureApplicationName"> Entra application name used to access azure data manager for agriculture instance. </param>
        /// <param name="isValidateInput"> Whether solution inference will validate input. </param>
        /// <returns> A new <see cref="Models.DataManagerForAgricultureSolution"/> instance for mocking. </returns>
        public static DataManagerForAgricultureSolution DataManagerForAgricultureSolution(string partnerId = default, string solutionId = default, string partnerTenantId = default, IEnumerable<string> dataAccessScopes = default, MarketPlaceOfferDetails marketPlaceOfferDetails = default, string saasApplicationId = default, string accessAzureDataManagerForAgricultureApplicationId = default, string accessAzureDataManagerForAgricultureApplicationName = default, bool isValidateInput = default)
        {
            dataAccessScopes ??= new ChangeTrackingList<string>();

            return new DataManagerForAgricultureSolution(
                partnerId,
                solutionId,
                partnerTenantId,
                dataAccessScopes.ToList(),
                marketPlaceOfferDetails,
                saasApplicationId,
                accessAzureDataManagerForAgricultureApplicationId,
                accessAzureDataManagerForAgricultureApplicationName,
                isValidateInput,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Marketplace offer details of Agri solution. </summary>
        /// <param name="saasOfferId"> Saas offer Id. </param>
        /// <param name="publisherId"> Publisher Id. </param>
        /// <returns> A new <see cref="Models.MarketPlaceOfferDetails"/> instance for mocking. </returns>
        public static MarketPlaceOfferDetails MarketPlaceOfferDetails(string saasOfferId = default, string publisherId = default)
        {
            return new MarketPlaceOfferDetails(saasOfferId, publisherId, additionalBinaryDataProperties: null);
        }
    }
}
