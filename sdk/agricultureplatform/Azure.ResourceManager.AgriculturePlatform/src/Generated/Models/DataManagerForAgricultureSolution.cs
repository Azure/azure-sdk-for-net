// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.AgriculturePlatform.Models
{
    /// <summary> Data Manager for Agriculture solution. </summary>
    public partial class DataManagerForAgricultureSolution
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="DataManagerForAgricultureSolution"/>. </summary>
        /// <param name="partnerId"> Partner Id. </param>
        /// <param name="solutionId"> Solution Id. </param>
        /// <param name="partnerTenantId"> Partner tenant Id. </param>
        /// <param name="dataAccessScopes"> Data access scopes. </param>
        /// <param name="marketPlaceOfferDetails"> Marketplace offer details. </param>
        /// <param name="saasApplicationId"> Saas application Id. </param>
        /// <param name="accessAzureDataManagerForAgricultureApplicationId"> Entra application Id used to access azure data manager for agriculture instance. </param>
        /// <param name="accessAzureDataManagerForAgricultureApplicationName"> Entra application name used to access azure data manager for agriculture instance. </param>
        /// <param name="isValidateInput"> Whether solution inference will validate input. </param>
        internal DataManagerForAgricultureSolution(string partnerId, string solutionId, string partnerTenantId, IEnumerable<string> dataAccessScopes, MarketPlaceOfferDetails marketPlaceOfferDetails, string saasApplicationId, string accessAzureDataManagerForAgricultureApplicationId, string accessAzureDataManagerForAgricultureApplicationName, bool isValidateInput)
        {
            PartnerId = partnerId;
            SolutionId = solutionId;
            PartnerTenantId = partnerTenantId;
            DataAccessScopes = dataAccessScopes.ToList();
            MarketPlaceOfferDetails = marketPlaceOfferDetails;
            SaasApplicationId = saasApplicationId;
            AccessAzureDataManagerForAgricultureApplicationId = accessAzureDataManagerForAgricultureApplicationId;
            AccessAzureDataManagerForAgricultureApplicationName = accessAzureDataManagerForAgricultureApplicationName;
            IsValidateInput = isValidateInput;
        }

        /// <summary> Initializes a new instance of <see cref="DataManagerForAgricultureSolution"/>. </summary>
        /// <param name="partnerId"> Partner Id. </param>
        /// <param name="solutionId"> Solution Id. </param>
        /// <param name="partnerTenantId"> Partner tenant Id. </param>
        /// <param name="dataAccessScopes"> Data access scopes. </param>
        /// <param name="marketPlaceOfferDetails"> Marketplace offer details. </param>
        /// <param name="saasApplicationId"> Saas application Id. </param>
        /// <param name="accessAzureDataManagerForAgricultureApplicationId"> Entra application Id used to access azure data manager for agriculture instance. </param>
        /// <param name="accessAzureDataManagerForAgricultureApplicationName"> Entra application name used to access azure data manager for agriculture instance. </param>
        /// <param name="isValidateInput"> Whether solution inference will validate input. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal DataManagerForAgricultureSolution(string partnerId, string solutionId, string partnerTenantId, IList<string> dataAccessScopes, MarketPlaceOfferDetails marketPlaceOfferDetails, string saasApplicationId, string accessAzureDataManagerForAgricultureApplicationId, string accessAzureDataManagerForAgricultureApplicationName, bool isValidateInput, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            PartnerId = partnerId;
            SolutionId = solutionId;
            PartnerTenantId = partnerTenantId;
            DataAccessScopes = dataAccessScopes;
            MarketPlaceOfferDetails = marketPlaceOfferDetails;
            SaasApplicationId = saasApplicationId;
            AccessAzureDataManagerForAgricultureApplicationId = accessAzureDataManagerForAgricultureApplicationId;
            AccessAzureDataManagerForAgricultureApplicationName = accessAzureDataManagerForAgricultureApplicationName;
            IsValidateInput = isValidateInput;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Partner Id. </summary>
        public string PartnerId { get; }

        /// <summary> Solution Id. </summary>
        public string SolutionId { get; }

        /// <summary> Partner tenant Id. </summary>
        public string PartnerTenantId { get; }

        /// <summary> Data access scopes. </summary>
        public IList<string> DataAccessScopes { get; }

        /// <summary> Marketplace offer details. </summary>
        public MarketPlaceOfferDetails MarketPlaceOfferDetails { get; }

        /// <summary> Saas application Id. </summary>
        public string SaasApplicationId { get; }

        /// <summary> Entra application Id used to access azure data manager for agriculture instance. </summary>
        public string AccessAzureDataManagerForAgricultureApplicationId { get; }

        /// <summary> Entra application name used to access azure data manager for agriculture instance. </summary>
        public string AccessAzureDataManagerForAgricultureApplicationName { get; }

        /// <summary> Whether solution inference will validate input. </summary>
        public bool IsValidateInput { get; }
    }
}
