// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AgriculturePlatform.Models
{
    public partial class AgricultureServiceProperties : IUtf8JsonSerializable, IJsonModel<AgricultureServiceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AgricultureServiceProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AgricultureServiceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AgricultureServiceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AgricultureServiceProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(Config))
            {
                writer.WritePropertyName("config"u8);
                writer.WriteObjectValue(Config, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ManagedOnBehalfOfConfiguration))
            {
                writer.WritePropertyName("managedOnBehalfOfConfiguration"u8);
                writer.WriteObjectValue(ManagedOnBehalfOfConfiguration, options);
            }
            if (Optional.IsCollectionDefined(DataConnectorCredentials))
            {
                writer.WritePropertyName("dataConnectorCredentials"u8);
                writer.WriteStartArray();
                foreach (var item in DataConnectorCredentials)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(InstalledSolutions))
            {
                writer.WritePropertyName("installedSolutions"u8);
                writer.WriteStartArray();
                foreach (var item in InstalledSolutions)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        AgricultureServiceProperties IJsonModel<AgricultureServiceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AgricultureServiceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AgricultureServiceProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAgricultureServiceProperties(document.RootElement, options);
        }

        internal static AgricultureServiceProperties DeserializeAgricultureServiceProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            AgriculturePlatformProvisioningState? provisioningState = default;
            AgricultureServiceConfig config = default;
            ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration = default;
            IList<DataConnectorCredentialMap> dataConnectorCredentials = default;
            IList<InstalledSolutionMap> installedSolutions = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new AgriculturePlatformProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("config"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    config = AgricultureServiceConfig.DeserializeAgricultureServiceConfig(property.Value, options);
                    continue;
                }
                if (property.NameEquals("managedOnBehalfOfConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managedOnBehalfOfConfiguration = ManagedOnBehalfOfConfiguration.DeserializeManagedOnBehalfOfConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("dataConnectorCredentials"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataConnectorCredentialMap> array = new List<DataConnectorCredentialMap>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataConnectorCredentialMap.DeserializeDataConnectorCredentialMap(item, options));
                    }
                    dataConnectorCredentials = array;
                    continue;
                }
                if (property.NameEquals("installedSolutions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<InstalledSolutionMap> array = new List<InstalledSolutionMap>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(InstalledSolutionMap.DeserializeInstalledSolutionMap(item, options));
                    }
                    installedSolutions = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AgricultureServiceProperties(
                provisioningState,
                config,
                managedOnBehalfOfConfiguration,
                dataConnectorCredentials ?? new ChangeTrackingList<DataConnectorCredentialMap>(),
                installedSolutions ?? new ChangeTrackingList<InstalledSolutionMap>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AgricultureServiceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AgricultureServiceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerAgriculturePlatformContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AgricultureServiceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        AgricultureServiceProperties IPersistableModel<AgricultureServiceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AgricultureServiceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAgricultureServiceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AgricultureServiceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AgricultureServiceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
