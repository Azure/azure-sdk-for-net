// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AgriculturePlatform.Models
{
    /// <summary> The status of the current operation. </summary>
    public readonly partial struct AgriculturePlatformProvisioningState : IEquatable<AgriculturePlatformProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatformProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AgriculturePlatformProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string ProvisioningValue = "Provisioning";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";
        private const string AcceptedValue = "Accepted";

        /// <summary> Resource has been created. </summary>
        public static AgriculturePlatformProvisioningState Succeeded { get; } = new AgriculturePlatformProvisioningState(SucceededValue);
        /// <summary> Resource creation failed. </summary>
        public static AgriculturePlatformProvisioningState Failed { get; } = new AgriculturePlatformProvisioningState(FailedValue);
        /// <summary> Resource creation was canceled. </summary>
        public static AgriculturePlatformProvisioningState Canceled { get; } = new AgriculturePlatformProvisioningState(CanceledValue);
        /// <summary> The resource is being provisioned. </summary>
        public static AgriculturePlatformProvisioningState Provisioning { get; } = new AgriculturePlatformProvisioningState(ProvisioningValue);
        /// <summary> The resource is updating. </summary>
        public static AgriculturePlatformProvisioningState Updating { get; } = new AgriculturePlatformProvisioningState(UpdatingValue);
        /// <summary> The resource is being deleted. </summary>
        public static AgriculturePlatformProvisioningState Deleting { get; } = new AgriculturePlatformProvisioningState(DeletingValue);
        /// <summary> The resource create request has been accepted. </summary>
        public static AgriculturePlatformProvisioningState Accepted { get; } = new AgriculturePlatformProvisioningState(AcceptedValue);
        /// <summary> Determines if two <see cref="AgriculturePlatformProvisioningState"/> values are the same. </summary>
        public static bool operator ==(AgriculturePlatformProvisioningState left, AgriculturePlatformProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AgriculturePlatformProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(AgriculturePlatformProvisioningState left, AgriculturePlatformProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AgriculturePlatformProvisioningState"/>. </summary>
        public static implicit operator AgriculturePlatformProvisioningState(string value) => new AgriculturePlatformProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AgriculturePlatformProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AgriculturePlatformProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
