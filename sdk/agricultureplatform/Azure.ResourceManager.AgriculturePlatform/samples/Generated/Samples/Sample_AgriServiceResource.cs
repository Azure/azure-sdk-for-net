// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.AgriculturePlatform.Models;
using Azure.ResourceManager.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.AgriculturePlatform.Samples
{
    public partial class Sample_AgriServiceResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AgriServiceGet()
        {
            // Generated from example definition: 2024-06-01-preview/AgriService_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AgriServiceResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AgriServiceResource created on azure
            // for more information of creating AgriServiceResource, please refer to the document of AgriServiceResource
            string subscriptionId = "83D293F5-DEFD-4D48-B120-1DC713BE338A";
            string resourceGroupName = "rgopenapi";
            string agriServiceResourceName = "abc123";
            ResourceIdentifier agriServiceResourceId = AgriServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, agriServiceResourceName);
            AgriServiceResource agriServiceResource = client.GetAgriServiceResource(agriServiceResourceId);

            // invoke the operation
            AgriServiceResource result = await agriServiceResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AgriServiceResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_AgriServiceDelete()
        {
            // Generated from example definition: 2024-06-01-preview/AgriService_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "AgriServiceResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AgriServiceResource created on azure
            // for more information of creating AgriServiceResource, please refer to the document of AgriServiceResource
            string subscriptionId = "83D293F5-DEFD-4D48-B120-1DC713BE338A";
            string resourceGroupName = "rgopenapi";
            string agriServiceResourceName = "abc123";
            ResourceIdentifier agriServiceResourceId = AgriServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, agriServiceResourceName);
            AgriServiceResource agriServiceResource = client.GetAgriServiceResource(agriServiceResourceId);

            // invoke the operation
            await agriServiceResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_AgriServiceUpdate()
        {
            // Generated from example definition: 2024-06-01-preview/AgriService_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "AgriServiceResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AgriServiceResource created on azure
            // for more information of creating AgriServiceResource, please refer to the document of AgriServiceResource
            string subscriptionId = "83D293F5-DEFD-4D48-B120-1DC713BE338A";
            string resourceGroupName = "rgopenapi";
            string agriServiceResourceName = "abc123";
            ResourceIdentifier agriServiceResourceId = AgriServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, agriServiceResourceName);
            AgriServiceResource agriServiceResource = client.GetAgriServiceResource(agriServiceResourceId);

            // invoke the operation
            AgriServiceResourcePatch patch = new AgriServiceResourcePatch
            {
                Identity = new ManagedServiceIdentity("None")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("key4771")] = new UserAssignedIdentity()
},
                },
                Sku = new AgriculturePlatformSku("tbdtdfffkar")
                {
                    Tier = AgriculturePlatformSkuTier.Free,
                    Size = "iusaqqj",
                    Family = "hxojswlgs",
                    Capacity = 22,
                },
                Tags =
{
["key9006"] = "kuzlwpujbql"
},
                Properties = new AgriServiceResourceUpdateProperties
                {
                    Config = new AgriServiceConfig(),
                    DataConnectorCredentials = {new DataConnectorCredentialMap("BackendAADApplicationCredentials", new DataConnectorCredentials
{
ClientId = "dce298a8-1eec-481a-a8f9-a3cd5a8257b2",
})},
                    InstalledSolutions = {new InstalledSolutionMap("bayerAgPowered.cwum", new Solution
{
ApplicationName = "bayerAgPowered.cwum",
})},
                },
            };
            ArmOperation<AgriServiceResource> lro = await agriServiceResource.UpdateAsync(WaitUntil.Completed, patch);
            AgriServiceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AgriServiceResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAvailableSolutions_AgriServiceListAvailableSolutions()
        {
            // Generated from example definition: 2024-06-01-preview/AgriService_ListAvailableSolutions_MaximumSet_Gen.json
            // this example is just showing the usage of "AgriService_ListAvailableSolutions" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AgriServiceResource created on azure
            // for more information of creating AgriServiceResource, please refer to the document of AgriServiceResource
            string subscriptionId = "83D293F5-DEFD-4D48-B120-1DC713BE338A";
            string resourceGroupName = "rgopenapi";
            string agriServiceResourceName = "abc123";
            ResourceIdentifier agriServiceResourceId = AgriServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, agriServiceResourceName);
            AgriServiceResource agriServiceResource = client.GetAgriServiceResource(agriServiceResourceId);

            // invoke the operation
            AvailableAgriSolutionListResult result = await agriServiceResource.GetAvailableSolutionsAsync();

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
