// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EngagementFabric.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The EngagementFabric channel
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Channel : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the Channel class.
        /// </summary>
        public Channel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Channel class.
        /// </summary>
        /// <param name="channelType">The channel type</param>
        /// <param name="id">The ID of the resource</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The fully qualified type of the resource</param>
        /// <param name="channelFunctions">The functions to be enabled for the
        /// channel</param>
        /// <param name="credentials">The channel credentials</param>
        public Channel(string channelType, string id = default(string), string name = default(string), string type = default(string), IList<string> channelFunctions = default(IList<string>), IDictionary<string, string> credentials = default(IDictionary<string, string>))
            : base(id, name, type)
        {
            ChannelType = channelType;
            ChannelFunctions = channelFunctions;
            Credentials = credentials;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the channel type
        /// </summary>
        [JsonProperty(PropertyName = "properties.channelType")]
        public string ChannelType { get; set; }

        /// <summary>
        /// Gets or sets the functions to be enabled for the channel
        /// </summary>
        [JsonProperty(PropertyName = "properties.channelFunctions")]
        public IList<string> ChannelFunctions { get; set; }

        /// <summary>
        /// Gets or sets the channel credentials
        /// </summary>
        [JsonProperty(PropertyName = "properties.credentials")]
        public IDictionary<string, string> Credentials { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ChannelType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ChannelType");
            }
        }
    }
}
