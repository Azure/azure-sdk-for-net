// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.NewRelicObservability.Models
{
    /// <summary>
    /// The type used for update operations of the NewRelicMonitorResource.
    /// Serialized Name: NewRelicMonitorResourceUpdate
    /// </summary>
    public partial class NewRelicMonitorResourcePatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NewRelicMonitorResourcePatch"/>. </summary>
        public NewRelicMonitorResourcePatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="NewRelicMonitorResourcePatch"/>. </summary>
        /// <param name="identity">
        /// The managed service identities assigned to this resource.
        /// Serialized Name: NewRelicMonitorResourceUpdate.identity
        /// </param>
        /// <param name="tags">
        /// Resource tags.
        /// Serialized Name: NewRelicMonitorResourceUpdate.tags
        /// </param>
        /// <param name="newRelicAccountProperties">
        /// MarketplaceSubscriptionStatus of the resource
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.newRelicAccountProperties
        /// </param>
        /// <param name="userInfo">
        /// User Info
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.userInfo
        /// </param>
        /// <param name="planData">
        /// Plan details
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.planData
        /// </param>
        /// <param name="saaSData">
        /// SaaS details
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.saaSData
        /// </param>
        /// <param name="orgCreationSource">
        /// Source of org creation
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.orgCreationSource
        /// </param>
        /// <param name="accountCreationSource">
        /// Source of account creation
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.accountCreationSource
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NewRelicMonitorResourcePatch(ManagedServiceIdentity identity, IDictionary<string, string> tags, NewRelicAccountProperties newRelicAccountProperties, NewRelicObservabilityUserInfo userInfo, NewRelicPlanDetails planData, NewRelicObservabilitySaaSContent saaSData, NewRelicObservabilityOrgCreationSource? orgCreationSource, NewRelicObservabilityAccountCreationSource? accountCreationSource, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Identity = identity;
            Tags = tags;
            NewRelicAccountProperties = newRelicAccountProperties;
            UserInfo = userInfo;
            PlanData = planData;
            SaaSData = saaSData;
            OrgCreationSource = orgCreationSource;
            AccountCreationSource = accountCreationSource;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// The managed service identities assigned to this resource.
        /// Serialized Name: NewRelicMonitorResourceUpdate.identity
        /// </summary>
        [WirePath("identity")]
        public ManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// Resource tags.
        /// Serialized Name: NewRelicMonitorResourceUpdate.tags
        /// </summary>
        [WirePath("tags")]
        public IDictionary<string, string> Tags { get; }
        /// <summary>
        /// MarketplaceSubscriptionStatus of the resource
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.newRelicAccountProperties
        /// </summary>
        [WirePath("properties.newRelicAccountProperties")]
        public NewRelicAccountProperties NewRelicAccountProperties { get; set; }
        /// <summary>
        /// User Info
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.userInfo
        /// </summary>
        [WirePath("properties.userInfo")]
        public NewRelicObservabilityUserInfo UserInfo { get; set; }
        /// <summary>
        /// Plan details
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.planData
        /// </summary>
        [WirePath("properties.planData")]
        public NewRelicPlanDetails PlanData { get; set; }
        /// <summary>
        /// SaaS details
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.saaSData
        /// </summary>
        internal NewRelicObservabilitySaaSContent SaaSData { get; set; }
        /// <summary>
        /// SaaS resource id
        /// Serialized Name: SaaSData.saaSResourceId
        /// </summary>
        [WirePath("properties.saaSData.saaSResourceId")]
        public ResourceIdentifier SaaSResourceId
        {
            get => SaaSData is null ? default : SaaSData.SaaSResourceId;
            set
            {
                if (SaaSData is null)
                    SaaSData = new NewRelicObservabilitySaaSContent();
                SaaSData.SaaSResourceId = value;
            }
        }

        /// <summary>
        /// Source of org creation
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.orgCreationSource
        /// </summary>
        [WirePath("properties.orgCreationSource")]
        public NewRelicObservabilityOrgCreationSource? OrgCreationSource { get; set; }
        /// <summary>
        /// Source of account creation
        /// Serialized Name: NewRelicMonitorResourceUpdate.properties.accountCreationSource
        /// </summary>
        [WirePath("properties.accountCreationSource")]
        public NewRelicObservabilityAccountCreationSource? AccountCreationSource { get; set; }
    }
}
