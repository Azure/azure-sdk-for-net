// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ExtendedLocation.Models
{
    public partial class ResourceSyncRulePropertiesSelector : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(MatchExpressions))
            {
                writer.WritePropertyName("matchExpressions");
                writer.WriteStartArray();
                foreach (var item in MatchExpressions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MatchLabels))
            {
                writer.WritePropertyName("matchLabels");
                writer.WriteStartObject();
                foreach (var item in MatchLabels)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static ResourceSyncRulePropertiesSelector DeserializeResourceSyncRulePropertiesSelector(JsonElement element)
        {
            Optional<IList<MatchExpressionsProperties>> matchExpressions = default;
            Optional<IDictionary<string, string>> matchLabels = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("matchExpressions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MatchExpressionsProperties> array = new List<MatchExpressionsProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MatchExpressionsProperties.DeserializeMatchExpressionsProperties(item));
                    }
                    matchExpressions = array;
                    continue;
                }
                if (property.NameEquals("matchLabels"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    matchLabels = dictionary;
                    continue;
                }
            }
            return new ResourceSyncRulePropertiesSelector(Optional.ToList(matchExpressions), Optional.ToDictionary(matchLabels));
        }
    }
}
