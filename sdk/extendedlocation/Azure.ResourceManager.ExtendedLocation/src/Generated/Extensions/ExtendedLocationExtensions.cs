// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.ExtendedLocation.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ExtendedLocation
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.ExtendedLocation. </summary>
    public static partial class ExtendedLocationExtensions
    {
        private static TenantExtensionClient GetExtensionClient(Tenant tenant)
        {
            return tenant.GetCachedClient((client) =>
            {
                return new TenantExtensionClient(client, tenant.Id);
            }
            );
        }

        /// <summary>
        /// Lists all available Custom Locations operations.
        /// Request Path: /providers/Microsoft.ExtendedLocation/operations
        /// Operation Id: CustomLocations_ListOperations
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CustomLocationOperation" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CustomLocationOperation> GetOperationsCustomLocationsAsync(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsCustomLocationsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all available Custom Locations operations.
        /// Request Path: /providers/Microsoft.ExtendedLocation/operations
        /// Operation Id: CustomLocations_ListOperations
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CustomLocationOperation" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CustomLocationOperation> GetOperationsCustomLocations(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenant).GetOperationsCustomLocations(cancellationToken);
        }

        private static SubscriptionExtensionClient GetExtensionClient(Subscription subscription)
        {
            return subscription.GetCachedClient((client) =>
            {
                return new SubscriptionExtensionClient(client, subscription.Id);
            }
            );
        }

        /// <summary>
        /// Gets a list of Custom Locations in the specified subscription. The operation returns properties of each Custom Location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ExtendedLocation/customLocations
        /// Operation Id: CustomLocations_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CustomLocation" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CustomLocation> GetCustomLocationsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetCustomLocationsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of Custom Locations in the specified subscription. The operation returns properties of each Custom Location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ExtendedLocation/customLocations
        /// Operation Id: CustomLocations_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CustomLocation" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CustomLocation> GetCustomLocations(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetCustomLocations(cancellationToken);
        }

        private static ResourceGroupExtensionClient GetExtensionClient(ResourceGroup resourceGroup)
        {
            return resourceGroup.GetCachedClient((client) =>
            {
                return new ResourceGroupExtensionClient(client, resourceGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of CustomLocations in the CustomLocation. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of CustomLocations and their operations over a CustomLocation. </returns>
        public static CustomLocationCollection GetCustomLocations(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetCustomLocations();
        }

        /// <summary>
        /// Gets the details of the customLocation with a specified resource group and name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}
        /// Operation Id: CustomLocations_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="resourceName"> Custom Locations name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        public static async Task<Response<CustomLocation>> GetCustomLocationAsync(this ResourceGroup resourceGroup, string resourceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetCustomLocations().GetAsync(resourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the details of the customLocation with a specified resource group and name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}
        /// Operation Id: CustomLocations_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="resourceName"> Custom Locations name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        public static Response<CustomLocation> GetCustomLocation(this ResourceGroup resourceGroup, string resourceName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetCustomLocations().Get(resourceName, cancellationToken);
        }

        #region CustomLocation
        /// <summary>
        /// Gets an object representing a <see cref="CustomLocation" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CustomLocation.CreateResourceIdentifier" /> to create a <see cref="CustomLocation" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CustomLocation" /> object. </returns>
        public static CustomLocation GetCustomLocation(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CustomLocation.ValidateResourceId(id);
                return new CustomLocation(client, id);
            }
            );
        }
        #endregion
    }
}
