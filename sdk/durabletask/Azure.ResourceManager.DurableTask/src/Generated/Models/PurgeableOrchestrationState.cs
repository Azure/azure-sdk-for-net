// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DurableTask.Models
{
    /// <summary> Purgeable orchestration state to be used in retention policies. </summary>
    public readonly partial struct PurgeableOrchestrationState : IEquatable<PurgeableOrchestrationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PurgeableOrchestrationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PurgeableOrchestrationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CompletedValue = "Completed";
        private const string FailedValue = "Failed";
        private const string TerminatedValue = "Terminated";
        private const string CanceledValue = "Canceled";

        /// <summary> The orchestration is completed. </summary>
        public static PurgeableOrchestrationState Completed { get; } = new PurgeableOrchestrationState(CompletedValue);
        /// <summary> The orchestration is failed. </summary>
        public static PurgeableOrchestrationState Failed { get; } = new PurgeableOrchestrationState(FailedValue);
        /// <summary> The orchestration is terminated. </summary>
        public static PurgeableOrchestrationState Terminated { get; } = new PurgeableOrchestrationState(TerminatedValue);
        /// <summary> The orchestration is canceled. </summary>
        public static PurgeableOrchestrationState Canceled { get; } = new PurgeableOrchestrationState(CanceledValue);
        /// <summary> Determines if two <see cref="PurgeableOrchestrationState"/> values are the same. </summary>
        public static bool operator ==(PurgeableOrchestrationState left, PurgeableOrchestrationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PurgeableOrchestrationState"/> values are not the same. </summary>
        public static bool operator !=(PurgeableOrchestrationState left, PurgeableOrchestrationState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PurgeableOrchestrationState"/>. </summary>
        public static implicit operator PurgeableOrchestrationState(string value) => new PurgeableOrchestrationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PurgeableOrchestrationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PurgeableOrchestrationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
