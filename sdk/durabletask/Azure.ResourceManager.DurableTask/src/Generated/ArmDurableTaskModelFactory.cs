// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DurableTask.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDurableTaskModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="DurableTask.DurableTaskSchedulerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DurableTask.DurableTaskSchedulerData"/> instance for mocking. </returns>
        public static DurableTaskSchedulerData DurableTaskSchedulerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DurableTaskSchedulerProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DurableTaskSchedulerData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DurableTaskSchedulerProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="endpoint"> URL of the durable task scheduler. </param>
        /// <param name="ipAllowlist"> IP allow list for durable task scheduler. Values can be IPv4, IPv6 or CIDR. </param>
        /// <param name="sku"> SKU of the durable task scheduler. </param>
        /// <returns> A new <see cref="Models.DurableTaskSchedulerProperties"/> instance for mocking. </returns>
        public static DurableTaskSchedulerProperties DurableTaskSchedulerProperties(DurableTaskProvisioningState? provisioningState = null, string endpoint = null, IEnumerable<string> ipAllowlist = null, DurableTaskSchedulerSku sku = null)
        {
            ipAllowlist ??= new List<string>();

            return new DurableTaskSchedulerProperties(provisioningState, endpoint, ipAllowlist?.ToList(), sku, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DurableTaskSchedulerSku"/>. </summary>
        /// <param name="name"> The name of the SKU. </param>
        /// <param name="capacity"> The SKU capacity. This allows scale out/in for the resource and impacts zone redundancy. </param>
        /// <param name="redundancyState"> Indicates whether the current SKU configuration is zone redundant. </param>
        /// <returns> A new <see cref="Models.DurableTaskSchedulerSku"/> instance for mocking. </returns>
        public static DurableTaskSchedulerSku DurableTaskSchedulerSku(string name = null, int? capacity = null, DurableTaskResourceRedundancyState? redundancyState = null)
        {
            return new DurableTaskSchedulerSku(name, capacity, redundancyState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DurableTaskSchedulerPatchProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="endpoint"> URL of the durable task scheduler. </param>
        /// <param name="ipAllowlist"> IP allow list for durable task scheduler. Values can be IPv4, IPv6 or CIDR. </param>
        /// <param name="sku"> SKU of the durable task scheduler. </param>
        /// <returns> A new <see cref="Models.DurableTaskSchedulerPatchProperties"/> instance for mocking. </returns>
        public static DurableTaskSchedulerPatchProperties DurableTaskSchedulerPatchProperties(DurableTaskProvisioningState? provisioningState = null, string endpoint = null, IEnumerable<string> ipAllowlist = null, DurableTaskSchedulerSkuUpdate sku = null)
        {
            ipAllowlist ??= new List<string>();

            return new DurableTaskSchedulerPatchProperties(provisioningState, endpoint, ipAllowlist?.ToList(), sku, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DurableTaskSchedulerSkuUpdate"/>. </summary>
        /// <param name="name"> The name of the SKU. </param>
        /// <param name="capacity"> The SKU capacity. This allows scale out/in for the resource and impacts zone redundancy. </param>
        /// <param name="redundancyState"> Indicates whether the current SKU configuration is zone redundant. </param>
        /// <returns> A new <see cref="Models.DurableTaskSchedulerSkuUpdate"/> instance for mocking. </returns>
        public static DurableTaskSchedulerSkuUpdate DurableTaskSchedulerSkuUpdate(string name = null, int? capacity = null, DurableTaskResourceRedundancyState? redundancyState = null)
        {
            return new DurableTaskSchedulerSkuUpdate(name, capacity, redundancyState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DurableTask.DurableTaskHubData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DurableTask.DurableTaskHubData"/> instance for mocking. </returns>
        public static DurableTaskHubData DurableTaskHubData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DurableTaskHubProperties properties = null)
        {
            return new DurableTaskHubData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DurableTaskHubProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="dashboardUri"> URL of the durable task scheduler dashboard. </param>
        /// <returns> A new <see cref="Models.DurableTaskHubProperties"/> instance for mocking. </returns>
        public static DurableTaskHubProperties DurableTaskHubProperties(DurableTaskProvisioningState? provisioningState = null, Uri dashboardUri = null)
        {
            return new DurableTaskHubProperties(provisioningState, dashboardUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DurableTask.DurableTaskRetentionPolicyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DurableTask.DurableTaskRetentionPolicyData"/> instance for mocking. </returns>
        public static DurableTaskRetentionPolicyData DurableTaskRetentionPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DurableTaskRetentionPolicyProperties properties = null)
        {
            return new DurableTaskRetentionPolicyData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DurableTaskRetentionPolicyProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="retentionPolicies"> The orchestration retention policies. </param>
        /// <returns> A new <see cref="Models.DurableTaskRetentionPolicyProperties"/> instance for mocking. </returns>
        public static DurableTaskRetentionPolicyProperties DurableTaskRetentionPolicyProperties(DurableTaskProvisioningState? provisioningState = null, IEnumerable<DurableTaskRetentionPolicyDetails> retentionPolicies = null)
        {
            retentionPolicies ??= new List<DurableTaskRetentionPolicyDetails>();

            return new DurableTaskRetentionPolicyProperties(provisioningState, retentionPolicies?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
