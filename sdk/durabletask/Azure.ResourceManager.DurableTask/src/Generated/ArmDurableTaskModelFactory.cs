// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DurableTask.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDurableTaskModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="DurableTask.TaskHubData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DurableTask.TaskHubData"/> instance for mocking. </returns>
        public static TaskHubData TaskHubData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, TaskHubProperties properties = null)
        {
            return new TaskHubData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TaskHubProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="dashboardUri"> URL of the durable task scheduler dashboard. </param>
        /// <returns> A new <see cref="Models.TaskHubProperties"/> instance for mocking. </returns>
        public static TaskHubProperties TaskHubProperties(ProvisioningState? provisioningState = null, Uri dashboardUri = null)
        {
            return new TaskHubProperties(provisioningState, dashboardUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DurableTask.SchedulerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DurableTask.SchedulerData"/> instance for mocking. </returns>
        public static SchedulerData SchedulerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, SchedulerProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SchedulerData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SchedulerProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="endpoint"> URL of the durable task scheduler. </param>
        /// <param name="ipAllowlist"> IP allow list for durable task scheduler. Values can be IPv4, IPv6 or CIDR. </param>
        /// <param name="sku"> SKU of the durable task scheduler. </param>
        /// <returns> A new <see cref="Models.SchedulerProperties"/> instance for mocking. </returns>
        public static SchedulerProperties SchedulerProperties(ProvisioningState? provisioningState = null, string endpoint = null, IEnumerable<string> ipAllowlist = null, SchedulerSku sku = null)
        {
            ipAllowlist ??= new List<string>();

            return new SchedulerProperties(provisioningState, endpoint, ipAllowlist?.ToList(), sku, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SchedulerSku"/>. </summary>
        /// <param name="name"> The name of the SKU. </param>
        /// <param name="capacity"> The SKU capacity. This allows scale out/in for the resource and impacts zone redundancy. </param>
        /// <param name="redundancyState"> Indicates whether the current SKU configuration is zone redundant. </param>
        /// <returns> A new <see cref="Models.SchedulerSku"/> instance for mocking. </returns>
        public static SchedulerSku SchedulerSku(string name = null, int? capacity = null, RedundancyState? redundancyState = null)
        {
            return new SchedulerSku(name, capacity, redundancyState, serializedAdditionalRawData: null);
        }
    }
}
