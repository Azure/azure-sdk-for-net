// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.DurableTask.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DurableTask
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DurableTask. </summary>
    public static partial class DurableTaskExtensions
    {
        private static MockableDurableTaskArmClient GetMockableDurableTaskArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableDurableTaskArmClient(client0));
        }

        private static MockableDurableTaskResourceGroupResource GetMockableDurableTaskResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableDurableTaskResourceGroupResource(client, resource.Id));
        }

        private static MockableDurableTaskSubscriptionResource GetMockableDurableTaskSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableDurableTaskSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="DurableTaskSchedulerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DurableTaskSchedulerResource.CreateResourceIdentifier" /> to create a <see cref="DurableTaskSchedulerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDurableTaskArmClient.GetDurableTaskSchedulerResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DurableTaskSchedulerResource"/> object. </returns>
        public static DurableTaskSchedulerResource GetDurableTaskSchedulerResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDurableTaskArmClient(client).GetDurableTaskSchedulerResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DurableTaskHubResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DurableTaskHubResource.CreateResourceIdentifier" /> to create a <see cref="DurableTaskHubResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDurableTaskArmClient.GetDurableTaskHubResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DurableTaskHubResource"/> object. </returns>
        public static DurableTaskHubResource GetDurableTaskHubResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDurableTaskArmClient(client).GetDurableTaskHubResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DurableTaskRetentionPolicyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DurableTaskRetentionPolicyResource.CreateResourceIdentifier" /> to create a <see cref="DurableTaskRetentionPolicyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDurableTaskArmClient.GetDurableTaskRetentionPolicyResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DurableTaskRetentionPolicyResource"/> object. </returns>
        public static DurableTaskRetentionPolicyResource GetDurableTaskRetentionPolicyResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDurableTaskArmClient(client).GetDurableTaskRetentionPolicyResource(id);
        }

        /// <summary>
        /// Gets a collection of DurableTaskSchedulerResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDurableTaskResourceGroupResource.GetDurableTaskSchedulers()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of DurableTaskSchedulerResources and their operations over a DurableTaskSchedulerResource. </returns>
        public static DurableTaskSchedulerCollection GetDurableTaskSchedulers(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDurableTaskResourceGroupResource(resourceGroupResource).GetDurableTaskSchedulers();
        }

        /// <summary>
        /// Get a Scheduler
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DurableTask/schedulers/{schedulerName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Scheduler_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DurableTaskSchedulerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDurableTaskResourceGroupResource.GetDurableTaskSchedulerAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="schedulerName"> The name of the Scheduler. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="schedulerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schedulerName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<DurableTaskSchedulerResource>> GetDurableTaskSchedulerAsync(this ResourceGroupResource resourceGroupResource, string schedulerName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableDurableTaskResourceGroupResource(resourceGroupResource).GetDurableTaskSchedulerAsync(schedulerName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Scheduler
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DurableTask/schedulers/{schedulerName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Scheduler_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DurableTaskSchedulerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDurableTaskResourceGroupResource.GetDurableTaskScheduler(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="schedulerName"> The name of the Scheduler. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="schedulerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="schedulerName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<DurableTaskSchedulerResource> GetDurableTaskScheduler(this ResourceGroupResource resourceGroupResource, string schedulerName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDurableTaskResourceGroupResource(resourceGroupResource).GetDurableTaskScheduler(schedulerName, cancellationToken);
        }

        /// <summary>
        /// List Schedulers by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DurableTask/schedulers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Scheduler_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DurableTaskSchedulerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDurableTaskSubscriptionResource.GetDurableTaskSchedulers(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="DurableTaskSchedulerResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DurableTaskSchedulerResource> GetDurableTaskSchedulersAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDurableTaskSubscriptionResource(subscriptionResource).GetDurableTaskSchedulersAsync(cancellationToken);
        }

        /// <summary>
        /// List Schedulers by subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DurableTask/schedulers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Scheduler_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DurableTaskSchedulerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDurableTaskSubscriptionResource.GetDurableTaskSchedulers(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="DurableTaskSchedulerResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DurableTaskSchedulerResource> GetDurableTaskSchedulers(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDurableTaskSubscriptionResource(subscriptionResource).GetDurableTaskSchedulers(cancellationToken);
        }
    }
}
