// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DurableTask.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DurableTask.Samples
{
    public partial class Sample_RetentionPolicyResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_RetentionPoliciesGetMaximumSet()
        {
            // Generated from example definition: 2025-11-01/RetentionPolicies_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "RetentionPolicy_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RetentionPolicyResource created on azure
            // for more information of creating RetentionPolicyResource, please refer to the document of RetentionPolicyResource
            string subscriptionId = "194D3C1E-462F-4738-9025-092A628C06EB";
            string resourceGroupName = "rgdurabletask";
            string schedulerName = "testscheduler";
            ResourceIdentifier retentionPolicyResourceId = RetentionPolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schedulerName);
            RetentionPolicyResource retentionPolicy = client.GetRetentionPolicyResource(retentionPolicyResourceId);

            // invoke the operation
            RetentionPolicyResource result = await retentionPolicy.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RetentionPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_RetentionPoliciesDeleteMaximumSet()
        {
            // Generated from example definition: 2025-11-01/RetentionPolicies_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "RetentionPolicy_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RetentionPolicyResource created on azure
            // for more information of creating RetentionPolicyResource, please refer to the document of RetentionPolicyResource
            string subscriptionId = "194D3C1E-462F-4738-9025-092A628C06EB";
            string resourceGroupName = "rgdurabletask";
            string schedulerName = "testcheduler";
            ResourceIdentifier retentionPolicyResourceId = RetentionPolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schedulerName);
            RetentionPolicyResource retentionPolicy = client.GetRetentionPolicyResource(retentionPolicyResourceId);

            // invoke the operation
            await retentionPolicy.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_RetentionPoliciesUpdateMaximumSet()
        {
            // Generated from example definition: 2025-11-01/RetentionPolicies_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "RetentionPolicy_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RetentionPolicyResource created on azure
            // for more information of creating RetentionPolicyResource, please refer to the document of RetentionPolicyResource
            string subscriptionId = "194D3C1E-462F-4738-9025-092A628C06EB";
            string resourceGroupName = "rgdurabletask";
            string schedulerName = "testscheduler";
            ResourceIdentifier retentionPolicyResourceId = RetentionPolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schedulerName);
            RetentionPolicyResource retentionPolicy = client.GetRetentionPolicyResource(retentionPolicyResourceId);

            // invoke the operation
            RetentionPolicyData data = new RetentionPolicyData
            {
                Properties = new RetentionPolicyProperties
                {
                    RetentionPolicies = {new RetentionPolicyDetails(30), new RetentionPolicyDetails(10)
{
OrchestrationState = PurgeableOrchestrationState.Failed,
}, new RetentionPolicyDetails(24)
{
OrchestrationState = PurgeableOrchestrationState.Completed,
}},
                },
            };
            ArmOperation<RetentionPolicyResource> lro = await retentionPolicy.UpdateAsync(WaitUntil.Completed, data);
            RetentionPolicyResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RetentionPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_RetentionPoliciesCreateOrReplaceMaximumSet()
        {
            // Generated from example definition: 2025-11-01/RetentionPolicies_CreateOrReplace_MaximumSet_Gen.json
            // this example is just showing the usage of "RetentionPolicy_CreateOrReplace" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RetentionPolicyResource created on azure
            // for more information of creating RetentionPolicyResource, please refer to the document of RetentionPolicyResource
            string subscriptionId = "194D3C1E-462F-4738-9025-092A628C06EB";
            string resourceGroupName = "rgdurabletask";
            string schedulerName = "testscheduler";
            ResourceIdentifier retentionPolicyResourceId = RetentionPolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schedulerName);
            RetentionPolicyResource retentionPolicy = client.GetRetentionPolicyResource(retentionPolicyResourceId);

            // invoke the operation
            RetentionPolicyData data = new RetentionPolicyData
            {
                Properties = new RetentionPolicyProperties
                {
                    RetentionPolicies = {new RetentionPolicyDetails(30), new RetentionPolicyDetails(10)
{
OrchestrationState = PurgeableOrchestrationState.Failed,
}},
                },
            };
            ArmOperation<RetentionPolicyResource> lro = await retentionPolicy.CreateOrUpdateAsync(WaitUntil.Completed, data);
            RetentionPolicyResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RetentionPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
