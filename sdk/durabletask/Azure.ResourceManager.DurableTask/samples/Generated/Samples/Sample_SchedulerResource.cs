// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DurableTask.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DurableTask.Samples
{
    public partial class Sample_SchedulerResource
    {
        // Schedulers_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_SchedulersGet()
        {
            // Generated from example definition: 2024-10-01-preview/Schedulers_Get.json
            // this example is just showing the usage of "Scheduler_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SchedulerResource created on azure
            // for more information of creating SchedulerResource, please refer to the document of SchedulerResource
            string subscriptionId = "EE9BD735-67CE-4A90-89C4-439D3F6A4C93";
            string resourceGroupName = "rgopenapi";
            string schedulerName = "testscheduler";
            ResourceIdentifier schedulerResourceId = SchedulerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schedulerName);
            SchedulerResource scheduler = client.GetSchedulerResource(schedulerResourceId);

            // invoke the operation
            SchedulerResource result = await scheduler.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SchedulerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Schedulers_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_SchedulersUpdate()
        {
            // Generated from example definition: 2024-10-01-preview/Schedulers_Update.json
            // this example is just showing the usage of "Scheduler_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SchedulerResource created on azure
            // for more information of creating SchedulerResource, please refer to the document of SchedulerResource
            string subscriptionId = "EE9BD735-67CE-4A90-89C4-439D3F6A4C93";
            string resourceGroupName = "rgopenapi";
            string schedulerName = "testscheduler";
            ResourceIdentifier schedulerResourceId = SchedulerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schedulerName);
            SchedulerResource scheduler = client.GetSchedulerResource(schedulerResourceId);

            // invoke the operation
            SchedulerData data = new SchedulerData(new AzureLocation("placeholder"))
            {
                Properties = new SchedulerProperties(new string[]
            {
"10.0.0.0/8"
            }, new SchedulerSku("Dedicated")
            {
                Capacity = 10,
            }),
                Tags =
{
["key8653"] = "lr",
},
            };
            ArmOperation<SchedulerResource> lro = await scheduler.UpdateAsync(WaitUntil.Completed, data);
            SchedulerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SchedulerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Schedulers_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_SchedulersDelete()
        {
            // Generated from example definition: 2024-10-01-preview/Schedulers_Delete.json
            // this example is just showing the usage of "Scheduler_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SchedulerResource created on azure
            // for more information of creating SchedulerResource, please refer to the document of SchedulerResource
            string subscriptionId = "EE9BD735-67CE-4A90-89C4-439D3F6A4C93";
            string resourceGroupName = "rgopenapi";
            string schedulerName = "testscheduler";
            ResourceIdentifier schedulerResourceId = SchedulerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, schedulerName);
            SchedulerResource scheduler = client.GetSchedulerResource(schedulerResourceId);

            // invoke the operation
            await scheduler.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Schedulers_ListBySubscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSchedulers_SchedulersListBySubscription()
        {
            // Generated from example definition: 2024-10-01-preview/Schedulers_ListBySubscription.json
            // this example is just showing the usage of "Scheduler_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "EE9BD735-67CE-4A90-89C4-439D3F6A4C93";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (SchedulerResource item in subscriptionResource.GetSchedulersAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SchedulerData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
