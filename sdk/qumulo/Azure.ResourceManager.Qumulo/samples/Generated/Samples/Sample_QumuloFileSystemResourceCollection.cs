// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Qumulo.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.Qumulo.Samples
{
    public partial class Sample_QumuloFileSystemResourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_FileSystemsCreateOrUpdate()
        {
            // Generated from example definition: 2024-06-19/FileSystems_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "382E8C7A-AC80-4D70-8580-EFE99537B9B7";
            string resourceGroupName = "rgQumulo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this QumuloFileSystemResource
            QumuloFileSystemResourceCollection collection = resourceGroupResource.GetQumuloFileSystemResources();

            // invoke the operation
            string fileSystemName = "hfcmtgaes";
            QumuloFileSystemResourceData data = new QumuloFileSystemResourceData(new AzureLocation("pnb"))
            {
                Properties = new QumuloFileSystemResourceProperties(new MarketplaceDetails("fwtpz", "s")
                {
                    MarketplaceSubscriptionId = "xaqtkloiyovmexqhn",
                    PublisherId = "czxcfrwodazyaft",
                    TermUnit = "cfwwczmygsimcyvoclcw",
                }, "yhyzby", new QumuloUserDetails("aqsnzyroo"), "jykmxrf", "fakeTestSecretPlaceholder")
                {
                    ClusterLoginUri = "ykaynsjvhihdthkkvvodjrgc",
                    PrivateIPs = { "gzken" },
                    AvailabilityZone = "eqdvbdiuwmhhzqzmksmwllpddqquwt",
                },
                Identity = new ManagedServiceIdentity("None")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("key7679")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["key7090"] = "rurrdiaqp"
},
            };
            ArmOperation<QumuloFileSystemResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, fileSystemName, data);
            QumuloFileSystemResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            QumuloFileSystemResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_FileSystemsCreateOrUpdateMinimumSetGen()
        {
            // Generated from example definition: 2024-06-19/FileSystems_CreateOrUpdate_MinimumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaaaaaaaaaaaaaaaaaa";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this QumuloFileSystemResource
            QumuloFileSystemResourceCollection collection = resourceGroupResource.GetQumuloFileSystemResources();

            // invoke the operation
            string fileSystemName = "aaaaaaaa";
            QumuloFileSystemResourceData data = new QumuloFileSystemResourceData(new AzureLocation("aaaaaaaaaaaaaaaaaaaaaaaaa"))
            {
                Properties = new QumuloFileSystemResourceProperties(new MarketplaceDetails("aaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaa")
                {
                    MarketplaceSubscriptionId = "aaaaaaaaaaaaa",
                }, "Standard", new QumuloUserDetails("viptslwulnpaupfljvnjeq"), "aaaaaaaaaa", "fakeTestSecretPlaceholder"),
            };
            ArmOperation<QumuloFileSystemResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, fileSystemName, data);
            QumuloFileSystemResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            QumuloFileSystemResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_FileSystemsGet()
        {
            // Generated from example definition: 2024-06-19/FileSystems_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "382E8C7A-AC80-4D70-8580-EFE99537B9B7";
            string resourceGroupName = "rgQumulo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this QumuloFileSystemResource
            QumuloFileSystemResourceCollection collection = resourceGroupResource.GetQumuloFileSystemResources();

            // invoke the operation
            string fileSystemName = "sihbehcisdqtqqyfiewiiaphgh";
            QumuloFileSystemResource result = await collection.GetAsync(fileSystemName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            QumuloFileSystemResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_FileSystemsGetMinimumSetGen()
        {
            // Generated from example definition: 2024-06-19/FileSystems_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaa";
            string resourceGroupName = "rgQumulo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this QumuloFileSystemResource
            QumuloFileSystemResourceCollection collection = resourceGroupResource.GetQumuloFileSystemResources();

            // invoke the operation
            string fileSystemName = "aaaaaaaaaaaaaaaaa";
            QumuloFileSystemResource result = await collection.GetAsync(fileSystemName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            QumuloFileSystemResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_FileSystemsListByResourceGroup()
        {
            // Generated from example definition: 2024-06-19/FileSystems_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "382E8C7A-AC80-4D70-8580-EFE99537B9B7";
            string resourceGroupName = "rgQumulo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this QumuloFileSystemResource
            QumuloFileSystemResourceCollection collection = resourceGroupResource.GetQumuloFileSystemResources();

            // invoke the operation and iterate over the result
            await foreach (QumuloFileSystemResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                QumuloFileSystemResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_FileSystemsListByResourceGroupMinimumSetGen()
        {
            // Generated from example definition: 2024-06-19/FileSystems_ListByResourceGroup_MinimumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaa";
            string resourceGroupName = "rgQumulo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this QumuloFileSystemResource
            QumuloFileSystemResourceCollection collection = resourceGroupResource.GetQumuloFileSystemResources();

            // invoke the operation and iterate over the result
            await foreach (QumuloFileSystemResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                QumuloFileSystemResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_FileSystemsGet()
        {
            // Generated from example definition: 2024-06-19/FileSystems_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "382E8C7A-AC80-4D70-8580-EFE99537B9B7";
            string resourceGroupName = "rgQumulo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this QumuloFileSystemResource
            QumuloFileSystemResourceCollection collection = resourceGroupResource.GetQumuloFileSystemResources();

            // invoke the operation
            string fileSystemName = "sihbehcisdqtqqyfiewiiaphgh";
            bool result = await collection.ExistsAsync(fileSystemName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_FileSystemsGetMinimumSetGen()
        {
            // Generated from example definition: 2024-06-19/FileSystems_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaa";
            string resourceGroupName = "rgQumulo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this QumuloFileSystemResource
            QumuloFileSystemResourceCollection collection = resourceGroupResource.GetQumuloFileSystemResources();

            // invoke the operation
            string fileSystemName = "aaaaaaaaaaaaaaaaa";
            bool result = await collection.ExistsAsync(fileSystemName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_FileSystemsGet()
        {
            // Generated from example definition: 2024-06-19/FileSystems_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "382E8C7A-AC80-4D70-8580-EFE99537B9B7";
            string resourceGroupName = "rgQumulo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this QumuloFileSystemResource
            QumuloFileSystemResourceCollection collection = resourceGroupResource.GetQumuloFileSystemResources();

            // invoke the operation
            string fileSystemName = "sihbehcisdqtqqyfiewiiaphgh";
            NullableResponse<QumuloFileSystemResource> response = await collection.GetIfExistsAsync(fileSystemName);
            QumuloFileSystemResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                QumuloFileSystemResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_FileSystemsGetMinimumSetGen()
        {
            // Generated from example definition: 2024-06-19/FileSystems_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "FileSystemResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaa";
            string resourceGroupName = "rgQumulo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this QumuloFileSystemResource
            QumuloFileSystemResourceCollection collection = resourceGroupResource.GetQumuloFileSystemResources();

            // invoke the operation
            string fileSystemName = "aaaaaaaaaaaaaaaaa";
            NullableResponse<QumuloFileSystemResource> response = await collection.GetIfExistsAsync(fileSystemName);
            QumuloFileSystemResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                QumuloFileSystemResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
