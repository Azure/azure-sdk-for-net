// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Qumulo
{
    /// <summary>
    /// A class representing a collection of <see cref="FileSystemResource"/> and their operations.
    /// Each <see cref="FileSystemResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get a <see cref="FileSystemResourceCollection"/> instance call the GetFileSystemResources method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class FileSystemResourceCollection : ArmCollection, IEnumerable<FileSystemResource>, IAsyncEnumerable<FileSystemResource>
    {
        private readonly ClientDiagnostics _fileSystemResourceFileSystemsClientDiagnostics;
        private readonly FileSystemsRestOperations _fileSystemResourceFileSystemsRestClient;

        /// <summary> Initializes a new instance of the <see cref="FileSystemResourceCollection"/> class for mocking. </summary>
        protected FileSystemResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="FileSystemResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal FileSystemResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _fileSystemResourceFileSystemsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Qumulo", FileSystemResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(FileSystemResource.ResourceType, out string fileSystemResourceFileSystemsApiVersion);
            _fileSystemResourceFileSystemsRestClient = new FileSystemsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, fileSystemResourceFileSystemsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a FileSystemResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Qumulo.Storage/fileSystems/{fileSystemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileSystemResource_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-06-19</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FileSystemResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="fileSystemName"> Name of the File System resource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="fileSystemName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="fileSystemName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<FileSystemResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string fileSystemName, FileSystemResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(fileSystemName, nameof(fileSystemName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _fileSystemResourceFileSystemsClientDiagnostics.CreateScope("FileSystemResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _fileSystemResourceFileSystemsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, fileSystemName, data, cancellationToken).ConfigureAwait(false);
                var operation = new QumuloArmOperation<FileSystemResource>(new FileSystemResourceOperationSource(Client), _fileSystemResourceFileSystemsClientDiagnostics, Pipeline, _fileSystemResourceFileSystemsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, fileSystemName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a FileSystemResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Qumulo.Storage/fileSystems/{fileSystemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileSystemResource_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-06-19</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FileSystemResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="fileSystemName"> Name of the File System resource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="fileSystemName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="fileSystemName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<FileSystemResource> CreateOrUpdate(WaitUntil waitUntil, string fileSystemName, FileSystemResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(fileSystemName, nameof(fileSystemName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _fileSystemResourceFileSystemsClientDiagnostics.CreateScope("FileSystemResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _fileSystemResourceFileSystemsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, fileSystemName, data, cancellationToken);
                var operation = new QumuloArmOperation<FileSystemResource>(new FileSystemResourceOperationSource(Client), _fileSystemResourceFileSystemsClientDiagnostics, Pipeline, _fileSystemResourceFileSystemsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, fileSystemName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a FileSystemResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Qumulo.Storage/fileSystems/{fileSystemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileSystemResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-06-19</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FileSystemResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fileSystemName"> Name of the File System resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="fileSystemName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="fileSystemName"/> is null. </exception>
        public virtual async Task<Response<FileSystemResource>> GetAsync(string fileSystemName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(fileSystemName, nameof(fileSystemName));

            using var scope = _fileSystemResourceFileSystemsClientDiagnostics.CreateScope("FileSystemResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _fileSystemResourceFileSystemsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, fileSystemName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new FileSystemResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a FileSystemResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Qumulo.Storage/fileSystems/{fileSystemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileSystemResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-06-19</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FileSystemResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fileSystemName"> Name of the File System resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="fileSystemName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="fileSystemName"/> is null. </exception>
        public virtual Response<FileSystemResource> Get(string fileSystemName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(fileSystemName, nameof(fileSystemName));

            using var scope = _fileSystemResourceFileSystemsClientDiagnostics.CreateScope("FileSystemResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _fileSystemResourceFileSystemsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, fileSystemName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new FileSystemResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List FileSystemResource resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Qumulo.Storage/fileSystems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileSystemResource_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-06-19</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FileSystemResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="FileSystemResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<FileSystemResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _fileSystemResourceFileSystemsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _fileSystemResourceFileSystemsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new FileSystemResource(Client, FileSystemResourceData.DeserializeFileSystemResourceData(e)), _fileSystemResourceFileSystemsClientDiagnostics, Pipeline, "FileSystemResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List FileSystemResource resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Qumulo.Storage/fileSystems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileSystemResource_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-06-19</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FileSystemResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="FileSystemResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<FileSystemResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _fileSystemResourceFileSystemsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _fileSystemResourceFileSystemsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new FileSystemResource(Client, FileSystemResourceData.DeserializeFileSystemResourceData(e)), _fileSystemResourceFileSystemsClientDiagnostics, Pipeline, "FileSystemResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Qumulo.Storage/fileSystems/{fileSystemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileSystemResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-06-19</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FileSystemResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fileSystemName"> Name of the File System resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="fileSystemName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="fileSystemName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string fileSystemName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(fileSystemName, nameof(fileSystemName));

            using var scope = _fileSystemResourceFileSystemsClientDiagnostics.CreateScope("FileSystemResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _fileSystemResourceFileSystemsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, fileSystemName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Qumulo.Storage/fileSystems/{fileSystemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileSystemResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-06-19</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FileSystemResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fileSystemName"> Name of the File System resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="fileSystemName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="fileSystemName"/> is null. </exception>
        public virtual Response<bool> Exists(string fileSystemName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(fileSystemName, nameof(fileSystemName));

            using var scope = _fileSystemResourceFileSystemsClientDiagnostics.CreateScope("FileSystemResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _fileSystemResourceFileSystemsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, fileSystemName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Qumulo.Storage/fileSystems/{fileSystemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileSystemResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-06-19</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FileSystemResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fileSystemName"> Name of the File System resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="fileSystemName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="fileSystemName"/> is null. </exception>
        public virtual async Task<NullableResponse<FileSystemResource>> GetIfExistsAsync(string fileSystemName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(fileSystemName, nameof(fileSystemName));

            using var scope = _fileSystemResourceFileSystemsClientDiagnostics.CreateScope("FileSystemResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _fileSystemResourceFileSystemsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, fileSystemName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<FileSystemResource>(response.GetRawResponse());
                return Response.FromValue(new FileSystemResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Qumulo.Storage/fileSystems/{fileSystemName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FileSystemResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-06-19</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FileSystemResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fileSystemName"> Name of the File System resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="fileSystemName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="fileSystemName"/> is null. </exception>
        public virtual NullableResponse<FileSystemResource> GetIfExists(string fileSystemName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(fileSystemName, nameof(fileSystemName));

            using var scope = _fileSystemResourceFileSystemsClientDiagnostics.CreateScope("FileSystemResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _fileSystemResourceFileSystemsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, fileSystemName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<FileSystemResource>(response.GetRawResponse());
                return Response.FromValue(new FileSystemResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<FileSystemResource> IEnumerable<FileSystemResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<FileSystemResource> IAsyncEnumerable<FileSystemResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
