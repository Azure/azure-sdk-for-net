// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    public partial class MigrationSqlAssessmentV2Data : IUtf8JsonSerializable, IJsonModel<MigrationSqlAssessmentV2Data>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MigrationSqlAssessmentV2Data>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MigrationSqlAssessmentV2Data>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationSqlAssessmentV2Data>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationSqlAssessmentV2Data)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(OSLicense))
            {
                writer.WritePropertyName("osLicense"u8);
                writer.WriteStringValue(OSLicense.Value.ToString());
            }
            if (Optional.IsDefined(EnvironmentType))
            {
                writer.WritePropertyName("environmentType"u8);
                writer.WriteStringValue(EnvironmentType.Value.ToString());
            }
            if (Optional.IsDefined(EntityUptime))
            {
                writer.WritePropertyName("entityUptime"u8);
                writer.WriteObjectValue(EntityUptime, options);
            }
            if (Optional.IsDefined(OptimizationLogic))
            {
                writer.WritePropertyName("optimizationLogic"u8);
                writer.WriteStringValue(OptimizationLogic.Value.ToString());
            }
            if (Optional.IsDefined(ReservedInstanceForVm))
            {
                writer.WritePropertyName("reservedInstanceForVm"u8);
                writer.WriteStringValue(ReservedInstanceForVm.Value.ToString());
            }
            if (Optional.IsDefined(AzureOfferCodeForVm))
            {
                writer.WritePropertyName("azureOfferCodeForVm"u8);
                writer.WriteStringValue(AzureOfferCodeForVm.Value.ToString());
            }
            if (Optional.IsDefined(EASubscriptionId))
            {
                writer.WritePropertyName("eaSubscriptionId"u8);
                writer.WriteStringValue(EASubscriptionId);
            }
            if (Optional.IsDefined(AzureSqlManagedInstanceSettings))
            {
                writer.WritePropertyName("azureSqlManagedInstanceSettings"u8);
                writer.WriteObjectValue(AzureSqlManagedInstanceSettings, options);
            }
            if (Optional.IsDefined(AzureSqlDatabaseSettings))
            {
                writer.WritePropertyName("azureSqlDatabaseSettings"u8);
                writer.WriteObjectValue(AzureSqlDatabaseSettings, options);
            }
            if (Optional.IsDefined(AzureSqlVmSettings))
            {
                writer.WritePropertyName("azureSqlVmSettings"u8);
                writer.WriteObjectValue(AzureSqlVmSettings, options);
            }
            if (Optional.IsDefined(MultiSubnetIntent))
            {
                writer.WritePropertyName("multiSubnetIntent"u8);
                writer.WriteStringValue(MultiSubnetIntent.Value.ToString());
            }
            if (Optional.IsDefined(AsyncCommitModeIntent))
            {
                writer.WritePropertyName("asyncCommitModeIntent"u8);
                writer.WriteStringValue(AsyncCommitModeIntent.Value.ToString());
            }
            if (Optional.IsDefined(IsInternetAccessAvailable))
            {
                writer.WritePropertyName("isInternetAccessAvailable"u8);
                writer.WriteBooleanValue(IsInternetAccessAvailable.Value);
            }
            if (Optional.IsDefined(DisasterRecoveryLocation))
            {
                writer.WritePropertyName("disasterRecoveryLocation"u8);
                writer.WriteStringValue(DisasterRecoveryLocation.Value);
            }
            if (Optional.IsDefined(IsHadrAssessmentEnabled))
            {
                writer.WritePropertyName("enableHadrAssessment"u8);
                writer.WriteBooleanValue(IsHadrAssessmentEnabled.Value);
            }
            if (Optional.IsDefined(AzureSecurityOfferingType))
            {
                writer.WritePropertyName("azureSecurityOfferingType"u8);
                writer.WriteStringValue(AzureSecurityOfferingType.Value.ToString());
            }
            if (Optional.IsDefined(ReservedInstance))
            {
                writer.WritePropertyName("reservedInstance"u8);
                writer.WriteStringValue(ReservedInstance.Value.ToString());
            }
            if (Optional.IsDefined(SqlServerLicense))
            {
                writer.WritePropertyName("sqlServerLicense"u8);
                writer.WriteStringValue(SqlServerLicense.Value.ToString());
            }
            if (Optional.IsDefined(GroupType))
            {
                writer.WritePropertyName("groupType"u8);
                writer.WriteStringValue(GroupType.Value.ToString());
            }
            if (Optional.IsDefined(AssessmentType))
            {
                writer.WritePropertyName("assessmentType"u8);
                writer.WriteStringValue(AssessmentType.Value.ToString());
            }
            if (Optional.IsDefined(AzureLocation))
            {
                writer.WritePropertyName("azureLocation"u8);
                writer.WriteStringValue(AzureLocation.Value);
            }
            if (Optional.IsDefined(AzureOfferCode))
            {
                writer.WritePropertyName("azureOfferCode"u8);
                writer.WriteStringValue(AzureOfferCode.Value.ToString());
            }
            if (Optional.IsDefined(Currency))
            {
                writer.WritePropertyName("currency"u8);
                writer.WriteStringValue(Currency.Value.ToString());
            }
            if (Optional.IsDefined(ScalingFactor))
            {
                writer.WritePropertyName("scalingFactor"u8);
                writer.WriteNumberValue(ScalingFactor.Value);
            }
            if (Optional.IsDefined(Percentile))
            {
                writer.WritePropertyName("percentile"u8);
                writer.WriteStringValue(Percentile.Value.ToString());
            }
            if (Optional.IsDefined(TimeRange))
            {
                writer.WritePropertyName("timeRange"u8);
                writer.WriteStringValue(TimeRange.Value.ToString());
            }
            if (Optional.IsDefined(PerfDataStartOn))
            {
                writer.WritePropertyName("perfDataStartTime"u8);
                writer.WriteStringValue(PerfDataStartOn.Value, "O");
            }
            if (Optional.IsDefined(PerfDataEndOn))
            {
                writer.WritePropertyName("perfDataEndTime"u8);
                writer.WriteStringValue(PerfDataEndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(Stage))
            {
                writer.WritePropertyName("stage"u8);
                writer.WriteStringValue(Stage.Value.ToString());
            }
            if (Optional.IsDefined(DiscountPercentage))
            {
                writer.WritePropertyName("discountPercentage"u8);
                writer.WriteNumberValue(DiscountPercentage.Value);
            }
            if (Optional.IsDefined(SizingCriterion))
            {
                writer.WritePropertyName("sizingCriterion"u8);
                writer.WriteStringValue(SizingCriterion.Value.ToString());
            }
            if (Optional.IsDefined(ConfidenceRatingInPercentage))
            {
                writer.WritePropertyName("confidenceRatingInPercentage"u8);
                writer.WriteNumberValue(ConfidenceRatingInPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PricesQueriedOn))
            {
                writer.WritePropertyName("pricesTimestamp"u8);
                writer.WriteStringValue(PricesQueriedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("createdTimestamp"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(UpdatedOn))
            {
                writer.WritePropertyName("updatedTimestamp"u8);
                writer.WriteStringValue(UpdatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SchemaVersion))
            {
                writer.WritePropertyName("schemaVersion"u8);
                writer.WriteStringValue(SchemaVersion);
            }
            writer.WriteEndObject();
        }

        MigrationSqlAssessmentV2Data IJsonModel<MigrationSqlAssessmentV2Data>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationSqlAssessmentV2Data>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationSqlAssessmentV2Data)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMigrationSqlAssessmentV2Data(document.RootElement, options);
        }

        internal static MigrationSqlAssessmentV2Data DeserializeMigrationSqlAssessmentV2Data(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            MigrationAssessmentProvisioningState? provisioningState = default;
            MigrationAssessmentOSLicense? osLicense = default;
            AssessmentEnvironmentType? environmentType = default;
            AssessmentEntityUptime entityUptime = default;
            SqlOptimizationLogic? optimizationLogic = default;
            AssessmentReservedInstance? reservedInstanceForVm = default;
            AssessmentOfferCode? azureOfferCodeForVm = default;
            string eaSubscriptionId = default;
            AssessmentSqlMISettings azureSqlManagedInstanceSettings = default;
            AssessmentSqlDBSettings azureSqlDatabaseSettings = default;
            AssessmentSqlVmSettings azureSqlVmSettings = default;
            MultiSubnetIntent? multiSubnetIntent = default;
            AsyncCommitModeIntent? asyncCommitModeIntent = default;
            bool? isInternetAccessAvailable = default;
            AzureLocation? disasterRecoveryLocation = default;
            bool? enableHadrAssessment = default;
            AssessmentSecurityOfferingType? azureSecurityOfferingType = default;
            AssessmentReservedInstance? reservedInstance = default;
            AssessmentSqlServerLicense? sqlServerLicense = default;
            MigrationAssessmentGroupType? groupType = default;
            MigrationAssessmentType? assessmentType = default;
            AzureLocation? azureLocation = default;
            AssessmentOfferCode? azureOfferCode = default;
            AssessmentCurrency? currency = default;
            double? scalingFactor = default;
            PercentileOfUtilization? percentile = default;
            AssessmentTimeRange? timeRange = default;
            DateTimeOffset? perfDataStartTime = default;
            DateTimeOffset? perfDataEndTime = default;
            MigrationAssessmentStage? stage = default;
            double? discountPercentage = default;
            AssessmentSizingCriterion? sizingCriterion = default;
            double? confidenceRatingInPercentage = default;
            DateTimeOffset? pricesTimestamp = default;
            DateTimeOffset? createdTimestamp = default;
            DateTimeOffset? updatedTimestamp = default;
            MigrationAssessmentStatus? status = default;
            string schemaVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new MigrationAssessmentProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("osLicense"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            osLicense = new MigrationAssessmentOSLicense(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("environmentType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            environmentType = new AssessmentEnvironmentType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("entityUptime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            entityUptime = AssessmentEntityUptime.DeserializeAssessmentEntityUptime(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("optimizationLogic"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            optimizationLogic = new SqlOptimizationLogic(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("reservedInstanceForVm"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            reservedInstanceForVm = new AssessmentReservedInstance(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureOfferCodeForVm"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureOfferCodeForVm = new AssessmentOfferCode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("eaSubscriptionId"u8))
                        {
                            eaSubscriptionId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("azureSqlManagedInstanceSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlManagedInstanceSettings = AssessmentSqlMISettings.DeserializeAssessmentSqlMISettings(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("azureSqlDatabaseSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlDatabaseSettings = AssessmentSqlDBSettings.DeserializeAssessmentSqlDBSettings(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("azureSqlVmSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlVmSettings = AssessmentSqlVmSettings.DeserializeAssessmentSqlVmSettings(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("multiSubnetIntent"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            multiSubnetIntent = new MultiSubnetIntent(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("asyncCommitModeIntent"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            asyncCommitModeIntent = new AsyncCommitModeIntent(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("isInternetAccessAvailable"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isInternetAccessAvailable = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("disasterRecoveryLocation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            disasterRecoveryLocation = new AzureLocation(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("enableHadrAssessment"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableHadrAssessment = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("azureSecurityOfferingType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSecurityOfferingType = new AssessmentSecurityOfferingType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("reservedInstance"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            reservedInstance = new AssessmentReservedInstance(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sqlServerLicense"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sqlServerLicense = new AssessmentSqlServerLicense(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("groupType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            groupType = new MigrationAssessmentGroupType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("assessmentType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            assessmentType = new MigrationAssessmentType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureLocation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureLocation = new AzureLocation(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureOfferCode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureOfferCode = new AssessmentOfferCode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("currency"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            currency = new AssessmentCurrency(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("scalingFactor"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            scalingFactor = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("percentile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            percentile = new PercentileOfUtilization(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("timeRange"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeRange = new AssessmentTimeRange(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("perfDataStartTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            perfDataStartTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("perfDataEndTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            perfDataEndTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("stage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            stage = new MigrationAssessmentStage(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("discountPercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            discountPercentage = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("sizingCriterion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sizingCriterion = new AssessmentSizingCriterion(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("confidenceRatingInPercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            confidenceRatingInPercentage = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("pricesTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            pricesTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("createdTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("updatedTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            updatedTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            status = new MigrationAssessmentStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("schemaVersion"u8))
                        {
                            schemaVersion = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MigrationSqlAssessmentV2Data(
                id,
                name,
                type,
                systemData,
                provisioningState,
                osLicense,
                environmentType,
                entityUptime,
                optimizationLogic,
                reservedInstanceForVm,
                azureOfferCodeForVm,
                eaSubscriptionId,
                azureSqlManagedInstanceSettings,
                azureSqlDatabaseSettings,
                azureSqlVmSettings,
                multiSubnetIntent,
                asyncCommitModeIntent,
                isInternetAccessAvailable,
                disasterRecoveryLocation,
                enableHadrAssessment,
                azureSecurityOfferingType,
                reservedInstance,
                sqlServerLicense,
                groupType,
                assessmentType,
                azureLocation,
                azureOfferCode,
                currency,
                scalingFactor,
                percentile,
                timeRange,
                perfDataStartTime,
                perfDataEndTime,
                stage,
                discountPercentage,
                sizingCriterion,
                confidenceRatingInPercentage,
                pricesTimestamp,
                createdTimestamp,
                updatedTimestamp,
                status,
                schemaVersion,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MigrationSqlAssessmentV2Data>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationSqlAssessmentV2Data>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerMigrationAssessmentContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MigrationSqlAssessmentV2Data)} does not support writing '{options.Format}' format.");
            }
        }

        MigrationSqlAssessmentV2Data IPersistableModel<MigrationSqlAssessmentV2Data>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationSqlAssessmentV2Data>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMigrationSqlAssessmentV2Data(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MigrationSqlAssessmentV2Data)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MigrationSqlAssessmentV2Data>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
