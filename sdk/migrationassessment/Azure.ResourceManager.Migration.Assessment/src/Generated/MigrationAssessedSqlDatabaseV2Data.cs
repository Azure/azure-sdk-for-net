// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    /// <summary>
    /// A class representing the MigrationAssessedSqlDatabaseV2 data model.
    /// Assessed SQL database web model class.
    /// </summary>
    public partial class MigrationAssessedSqlDatabaseV2Data : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MigrationAssessedSqlDatabaseV2Data"/>. </summary>
        public MigrationAssessedSqlDatabaseV2Data()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MigrationAssessedSqlDatabaseV2Data"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="recommendedAzureSqlTargetType"> Gets or sets the recommended azure SQL target type. </param>
        /// <param name="recommendedSuitability"> Gets or sets the recommended azure SQL suitability. </param>
        /// <param name="bufferCacheSizeInMB">
        /// Gets or sets the aggregated cache size of this database. This is a performance
        /// data metric for this DB.
        /// </param>
        /// <param name="productSupportStatus"> Gets the product support status related details. </param>
        /// <param name="azureSqlMISuitabilityDetails"> Gets or sets the azure SQL MI suitability details. </param>
        /// <param name="azureSqlDBSuitabilityDetails"> Gets or sets the azure SQL DB suitability details. </param>
        /// <param name="isDatabaseHighlyAvailable">
        /// Gets a value indicating whether the assessed SQL database is highly available
        /// or not.
        /// </param>
        /// <param name="linkedAvailabilityGroupOverview">
        /// Gets the linked availability group overview if the database being assessed is
        /// highly available.
        /// </param>
        /// <param name="machineArmId"> Machine arm id. </param>
        /// <param name="assessedSqlInstanceArmId"> Assessed SQL instance arm id. </param>
        /// <param name="machineName"> Machine display name. </param>
        /// <param name="instanceName"> SQL instance name. </param>
        /// <param name="databaseName"> SQL database name. </param>
        /// <param name="databaseSizeInMB"> SQL database size in megabytes. </param>
        /// <param name="compatibilityLevel"> Database compatibility level. </param>
        /// <param name="sqlDatabaseSdsArmId"> SQL database SDS arm id. </param>
        /// <param name="percentageCoresUtilization"> The percentage of the total number of cores being utilized by the SQL database. </param>
        /// <param name="megabytesPerSecondOfRead"> The read throughput of the SQL database. </param>
        /// <param name="megabytesPerSecondOfWrite"> The write throughput of the SQL database. </param>
        /// <param name="numberOfReadOperationsPerSecond"> The read operations per second of the SQL database. </param>
        /// <param name="numberOfWriteOperationsPerSecond"> The write operations per second of the SQL database. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <param name="createdOn"> When was assessed SQL database first created. </param>
        /// <param name="updatedOn"> When was assessed SQL database last updated. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MigrationAssessedSqlDatabaseV2Data(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, MigrationAssessmentTargetType? recommendedAzureSqlTargetType, AssessedSqlRecommendedSuitability? recommendedSuitability, double? bufferCacheSizeInMB, AssessmentProductSupportStatus productSupportStatus, SqlAssessmentV2PaasSuitabilityDetails azureSqlMISuitabilityDetails, SqlAssessmentV2PaasSuitabilityDetails azureSqlDBSuitabilityDetails, bool? isDatabaseHighlyAvailable, SqlAvailabilityGroupDataOverview linkedAvailabilityGroupOverview, ResourceIdentifier machineArmId, ResourceIdentifier assessedSqlInstanceArmId, string machineName, string instanceName, string databaseName, double? databaseSizeInMB, AssessedDatabaseCompatibilityLevel? compatibilityLevel, ResourceIdentifier sqlDatabaseSdsArmId, double? percentageCoresUtilization, double? megabytesPerSecondOfRead, double? megabytesPerSecondOfWrite, double? numberOfReadOperationsPerSecond, double? numberOfWriteOperationsPerSecond, double? confidenceRatingInPercentage, AssessmentSizingCriterion? sizingCriterion, DateTimeOffset? createdOn, DateTimeOffset? updatedOn, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            RecommendedAzureSqlTargetType = recommendedAzureSqlTargetType;
            RecommendedSuitability = recommendedSuitability;
            BufferCacheSizeInMB = bufferCacheSizeInMB;
            ProductSupportStatus = productSupportStatus;
            AzureSqlMISuitabilityDetails = azureSqlMISuitabilityDetails;
            AzureSqlDBSuitabilityDetails = azureSqlDBSuitabilityDetails;
            IsDatabaseHighlyAvailable = isDatabaseHighlyAvailable;
            LinkedAvailabilityGroupOverview = linkedAvailabilityGroupOverview;
            MachineArmId = machineArmId;
            AssessedSqlInstanceArmId = assessedSqlInstanceArmId;
            MachineName = machineName;
            InstanceName = instanceName;
            DatabaseName = databaseName;
            DatabaseSizeInMB = databaseSizeInMB;
            CompatibilityLevel = compatibilityLevel;
            SqlDatabaseSdsArmId = sqlDatabaseSdsArmId;
            PercentageCoresUtilization = percentageCoresUtilization;
            MegabytesPerSecondOfRead = megabytesPerSecondOfRead;
            MegabytesPerSecondOfWrite = megabytesPerSecondOfWrite;
            NumberOfReadOperationsPerSecond = numberOfReadOperationsPerSecond;
            NumberOfWriteOperationsPerSecond = numberOfWriteOperationsPerSecond;
            ConfidenceRatingInPercentage = confidenceRatingInPercentage;
            SizingCriterion = sizingCriterion;
            CreatedOn = createdOn;
            UpdatedOn = updatedOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the recommended azure SQL target type. </summary>
        public MigrationAssessmentTargetType? RecommendedAzureSqlTargetType { get; }
        /// <summary> Gets or sets the recommended azure SQL suitability. </summary>
        public AssessedSqlRecommendedSuitability? RecommendedSuitability { get; }
        /// <summary>
        /// Gets or sets the aggregated cache size of this database. This is a performance
        /// data metric for this DB.
        /// </summary>
        public double? BufferCacheSizeInMB { get; }
        /// <summary> Gets the product support status related details. </summary>
        public AssessmentProductSupportStatus ProductSupportStatus { get; }
        /// <summary> Gets or sets the azure SQL MI suitability details. </summary>
        public SqlAssessmentV2PaasSuitabilityDetails AzureSqlMISuitabilityDetails { get; }
        /// <summary> Gets or sets the azure SQL DB suitability details. </summary>
        public SqlAssessmentV2PaasSuitabilityDetails AzureSqlDBSuitabilityDetails { get; }
        /// <summary>
        /// Gets a value indicating whether the assessed SQL database is highly available
        /// or not.
        /// </summary>
        public bool? IsDatabaseHighlyAvailable { get; }
        /// <summary>
        /// Gets the linked availability group overview if the database being assessed is
        /// highly available.
        /// </summary>
        public SqlAvailabilityGroupDataOverview LinkedAvailabilityGroupOverview { get; }
        /// <summary> Machine arm id. </summary>
        public ResourceIdentifier MachineArmId { get; }
        /// <summary> Assessed SQL instance arm id. </summary>
        public ResourceIdentifier AssessedSqlInstanceArmId { get; }
        /// <summary> Machine display name. </summary>
        public string MachineName { get; }
        /// <summary> SQL instance name. </summary>
        public string InstanceName { get; }
        /// <summary> SQL database name. </summary>
        public string DatabaseName { get; }
        /// <summary> SQL database size in megabytes. </summary>
        public double? DatabaseSizeInMB { get; }
        /// <summary> Database compatibility level. </summary>
        public AssessedDatabaseCompatibilityLevel? CompatibilityLevel { get; }
        /// <summary> SQL database SDS arm id. </summary>
        public ResourceIdentifier SqlDatabaseSdsArmId { get; }
        /// <summary> The percentage of the total number of cores being utilized by the SQL database. </summary>
        public double? PercentageCoresUtilization { get; }
        /// <summary> The read throughput of the SQL database. </summary>
        public double? MegabytesPerSecondOfRead { get; }
        /// <summary> The write throughput of the SQL database. </summary>
        public double? MegabytesPerSecondOfWrite { get; }
        /// <summary> The read operations per second of the SQL database. </summary>
        public double? NumberOfReadOperationsPerSecond { get; }
        /// <summary> The write operations per second of the SQL database. </summary>
        public double? NumberOfWriteOperationsPerSecond { get; }
        /// <summary> Confidence Rating in Percentage. </summary>
        public double? ConfidenceRatingInPercentage { get; }
        /// <summary> Assessment sizing criterion. </summary>
        public AssessmentSizingCriterion? SizingCriterion { get; }
        /// <summary> When was assessed SQL database first created. </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary> When was assessed SQL database last updated. </summary>
        public DateTimeOffset? UpdatedOn { get; }
    }
}
