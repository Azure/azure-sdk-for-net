// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    public partial class MigrationAssessedSqlRecommendedEntityData : IUtf8JsonSerializable, IJsonModel<MigrationAssessedSqlRecommendedEntityData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MigrationAssessedSqlRecommendedEntityData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MigrationAssessedSqlRecommendedEntityData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessedSqlRecommendedEntityData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationAssessedSqlRecommendedEntityData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(MachineName))
            {
                writer.WritePropertyName("machineName"u8);
                writer.WriteStringValue(MachineName);
            }
            if (options.Format != "W" && Optional.IsDefined(InstanceName))
            {
                writer.WritePropertyName("instanceName"u8);
                writer.WriteStringValue(InstanceName);
            }
            if (options.Format != "W" && Optional.IsDefined(ProductSupportStatus))
            {
                writer.WritePropertyName("productSupportStatus"u8);
                writer.WriteObjectValue(ProductSupportStatus, options);
            }
            if (options.Format != "W" && Optional.IsDefined(DBCount))
            {
                writer.WritePropertyName("dbCount"u8);
                writer.WriteNumberValue(DBCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DiscoveredDBCount))
            {
                writer.WritePropertyName("discoveredDBCount"u8);
                writer.WriteNumberValue(DiscoveredDBCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(HasScanOccurred))
            {
                writer.WritePropertyName("hasScanOccurred"u8);
                writer.WriteBooleanValue(HasScanOccurred.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(RecommendedAzureSqlTargetType))
            {
                writer.WritePropertyName("recommendedAzureSqlTargetType"u8);
                writer.WriteStringValue(RecommendedAzureSqlTargetType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(RecommendedSuitability))
            {
                writer.WritePropertyName("recommendedSuitability"u8);
                writer.WriteStringValue(RecommendedSuitability.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AzureSqlMISuitabilityDetails))
            {
                writer.WritePropertyName("azureSqlMISuitabilityDetails"u8);
                writer.WriteObjectValue(AzureSqlMISuitabilityDetails, options);
            }
            if (options.Format != "W" && Optional.IsDefined(AzureSqlDBSuitabilityDetails))
            {
                writer.WritePropertyName("azureSqlDBSuitabilityDetails"u8);
                writer.WriteObjectValue(AzureSqlDBSuitabilityDetails, options);
            }
            if (options.Format != "W" && Optional.IsDefined(AzureSqlVmSuitabilityDetails))
            {
                writer.WritePropertyName("azureSqlVMSuitabilityDetails"u8);
                writer.WriteObjectValue(AzureSqlVmSuitabilityDetails, options);
            }
            if (Optional.IsDefined(AssessedSqlEntityArmId))
            {
                writer.WritePropertyName("assessedSqlEntityArmId"u8);
                writer.WriteStringValue(AssessedSqlEntityArmId);
            }
            if (options.Format != "W" && Optional.IsDefined(IsClustered))
            {
                writer.WritePropertyName("isClustered"u8);
                writer.WriteBooleanValue(IsClustered.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IsHighAvailabilityEnabled))
            {
                writer.WritePropertyName("isHighAvailabilityEnabled"u8);
                writer.WriteBooleanValue(IsHighAvailabilityEnabled.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SqlEdition))
            {
                writer.WritePropertyName("sqlEdition"u8);
                writer.WriteStringValue(SqlEdition);
            }
            if (options.Format != "W" && Optional.IsDefined(SqlVersion))
            {
                writer.WritePropertyName("sqlVersion"u8);
                writer.WriteStringValue(SqlVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(SizingCriterion))
            {
                writer.WritePropertyName("sizingCriterion"u8);
                writer.WriteStringValue(SizingCriterion.Value.ToString());
            }
            writer.WriteEndObject();
        }

        MigrationAssessedSqlRecommendedEntityData IJsonModel<MigrationAssessedSqlRecommendedEntityData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessedSqlRecommendedEntityData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationAssessedSqlRecommendedEntityData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMigrationAssessedSqlRecommendedEntityData(document.RootElement, options);
        }

        internal static MigrationAssessedSqlRecommendedEntityData DeserializeMigrationAssessedSqlRecommendedEntityData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            string machineName = default;
            string instanceName = default;
            AssessmentProductSupportStatus productSupportStatus = default;
            int? dbCount = default;
            int? discoveredDBCount = default;
            bool? hasScanOccurred = default;
            MigrationAssessmentTargetType? recommendedAzureSqlTargetType = default;
            AssessedSqlRecommendedSuitability? recommendedSuitability = default;
            SqlAssessmentV2PaasSuitabilityDetails azureSqlMISuitabilityDetails = default;
            SqlAssessmentV2PaasSuitabilityDetails azureSqlDBSuitabilityDetails = default;
            SqlAssessmentV2IaasSuitabilityDetails azureSqlVmSuitabilityDetails = default;
            ResourceIdentifier assessedSqlEntityArmId = default;
            bool? isClustered = default;
            bool? isHighAvailabilityEnabled = default;
            string sqlEdition = default;
            string sqlVersion = default;
            AssessmentSizingCriterion? sizingCriterion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("machineName"u8))
                        {
                            machineName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("instanceName"u8))
                        {
                            instanceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("productSupportStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            productSupportStatus = AssessmentProductSupportStatus.DeserializeAssessmentProductSupportStatus(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("dbCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dbCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("discoveredDBCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            discoveredDBCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("hasScanOccurred"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            hasScanOccurred = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("recommendedAzureSqlTargetType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedAzureSqlTargetType = new MigrationAssessmentTargetType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("recommendedSuitability"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedSuitability = new AssessedSqlRecommendedSuitability(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureSqlMISuitabilityDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlMISuitabilityDetails = SqlAssessmentV2PaasSuitabilityDetails.DeserializeSqlAssessmentV2PaasSuitabilityDetails(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("azureSqlDBSuitabilityDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlDBSuitabilityDetails = SqlAssessmentV2PaasSuitabilityDetails.DeserializeSqlAssessmentV2PaasSuitabilityDetails(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("azureSqlVMSuitabilityDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlVmSuitabilityDetails = SqlAssessmentV2IaasSuitabilityDetails.DeserializeSqlAssessmentV2IaasSuitabilityDetails(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("assessedSqlEntityArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            assessedSqlEntityArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("isClustered"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isClustered = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isHighAvailabilityEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isHighAvailabilityEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("sqlEdition"u8))
                        {
                            sqlEdition = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sqlVersion"u8))
                        {
                            sqlVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sizingCriterion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sizingCriterion = new AssessmentSizingCriterion(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MigrationAssessedSqlRecommendedEntityData(
                id,
                name,
                type,
                systemData,
                machineName,
                instanceName,
                productSupportStatus,
                dbCount,
                discoveredDBCount,
                hasScanOccurred,
                recommendedAzureSqlTargetType,
                recommendedSuitability,
                azureSqlMISuitabilityDetails,
                azureSqlDBSuitabilityDetails,
                azureSqlVmSuitabilityDetails,
                assessedSqlEntityArmId,
                isClustered,
                isHighAvailabilityEnabled,
                sqlEdition,
                sqlVersion,
                sizingCriterion,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MigrationAssessedSqlRecommendedEntityData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessedSqlRecommendedEntityData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerMigrationAssessmentContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MigrationAssessedSqlRecommendedEntityData)} does not support writing '{options.Format}' format.");
            }
        }

        MigrationAssessedSqlRecommendedEntityData IPersistableModel<MigrationAssessedSqlRecommendedEntityData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessedSqlRecommendedEntityData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMigrationAssessedSqlRecommendedEntityData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MigrationAssessedSqlRecommendedEntityData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MigrationAssessedSqlRecommendedEntityData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
