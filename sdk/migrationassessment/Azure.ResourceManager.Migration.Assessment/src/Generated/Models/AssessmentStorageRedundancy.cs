// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The AssessmentStorageRedundancy. </summary>
    public readonly partial struct AssessmentStorageRedundancy : IEquatable<AssessmentStorageRedundancy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentStorageRedundancy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentStorageRedundancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string LocallyRedundantValue = "LocallyRedundant";
        private const string ZoneRedundantValue = "ZoneRedundant";
        private const string GeoRedundantValue = "GeoRedundant";
        private const string ReadAccessGeoRedundantValue = "ReadAccessGeoRedundant";

        /// <summary> Unknown. </summary>
        public static AssessmentStorageRedundancy Unknown { get; } = new AssessmentStorageRedundancy(UnknownValue);
        /// <summary> LocallyRedundant. </summary>
        public static AssessmentStorageRedundancy LocallyRedundant { get; } = new AssessmentStorageRedundancy(LocallyRedundantValue);
        /// <summary> ZoneRedundant. </summary>
        public static AssessmentStorageRedundancy ZoneRedundant { get; } = new AssessmentStorageRedundancy(ZoneRedundantValue);
        /// <summary> GeoRedundant. </summary>
        public static AssessmentStorageRedundancy GeoRedundant { get; } = new AssessmentStorageRedundancy(GeoRedundantValue);
        /// <summary> ReadAccessGeoRedundant. </summary>
        public static AssessmentStorageRedundancy ReadAccessGeoRedundant { get; } = new AssessmentStorageRedundancy(ReadAccessGeoRedundantValue);
        /// <summary> Determines if two <see cref="AssessmentStorageRedundancy"/> values are the same. </summary>
        public static bool operator ==(AssessmentStorageRedundancy left, AssessmentStorageRedundancy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentStorageRedundancy"/> values are not the same. </summary>
        public static bool operator !=(AssessmentStorageRedundancy left, AssessmentStorageRedundancy right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssessmentStorageRedundancy"/>. </summary>
        public static implicit operator AssessmentStorageRedundancy(string value) => new AssessmentStorageRedundancy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentStorageRedundancy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentStorageRedundancy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
