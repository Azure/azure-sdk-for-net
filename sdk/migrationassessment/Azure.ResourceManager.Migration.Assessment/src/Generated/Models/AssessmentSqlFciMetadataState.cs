// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The AssessmentSqlFciMetadataState. </summary>
    public readonly partial struct AssessmentSqlFciMetadataState : IEquatable<AssessmentSqlFciMetadataState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentSqlFciMetadataState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentSqlFciMetadataState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string InheritedValue = "Inherited";
        private const string InitializingValue = "Initializing";
        private const string OnlineValue = "Online";
        private const string OfflineValue = "Offline";
        private const string FailedValue = "Failed";
        private const string PendingValue = "Pending";
        private const string OnlinePendingValue = "OnlinePending";
        private const string OfflinePendingValue = "OfflinePending";

        /// <summary> Unknown. </summary>
        public static AssessmentSqlFciMetadataState Unknown { get; } = new AssessmentSqlFciMetadataState(UnknownValue);
        /// <summary> Inherited. </summary>
        public static AssessmentSqlFciMetadataState Inherited { get; } = new AssessmentSqlFciMetadataState(InheritedValue);
        /// <summary> Initializing. </summary>
        public static AssessmentSqlFciMetadataState Initializing { get; } = new AssessmentSqlFciMetadataState(InitializingValue);
        /// <summary> Online. </summary>
        public static AssessmentSqlFciMetadataState Online { get; } = new AssessmentSqlFciMetadataState(OnlineValue);
        /// <summary> Offline. </summary>
        public static AssessmentSqlFciMetadataState Offline { get; } = new AssessmentSqlFciMetadataState(OfflineValue);
        /// <summary> Failed. </summary>
        public static AssessmentSqlFciMetadataState Failed { get; } = new AssessmentSqlFciMetadataState(FailedValue);
        /// <summary> Pending. </summary>
        public static AssessmentSqlFciMetadataState Pending { get; } = new AssessmentSqlFciMetadataState(PendingValue);
        /// <summary> OnlinePending. </summary>
        public static AssessmentSqlFciMetadataState OnlinePending { get; } = new AssessmentSqlFciMetadataState(OnlinePendingValue);
        /// <summary> OfflinePending. </summary>
        public static AssessmentSqlFciMetadataState OfflinePending { get; } = new AssessmentSqlFciMetadataState(OfflinePendingValue);
        /// <summary> Determines if two <see cref="AssessmentSqlFciMetadataState"/> values are the same. </summary>
        public static bool operator ==(AssessmentSqlFciMetadataState left, AssessmentSqlFciMetadataState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentSqlFciMetadataState"/> values are not the same. </summary>
        public static bool operator !=(AssessmentSqlFciMetadataState left, AssessmentSqlFciMetadataState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssessmentSqlFciMetadataState"/>. </summary>
        public static implicit operator AssessmentSqlFciMetadataState(string value) => new AssessmentSqlFciMetadataState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentSqlFciMetadataState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentSqlFciMetadataState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
