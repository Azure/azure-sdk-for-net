// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    public partial class AssessedSqlInstanceSummary : IUtf8JsonSerializable, IJsonModel<AssessedSqlInstanceSummary>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AssessedSqlInstanceSummary>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AssessedSqlInstanceSummary>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlInstanceSummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedSqlInstanceSummary)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(InstanceId))
            {
                writer.WritePropertyName("instanceId"u8);
                writer.WriteStringValue(InstanceId);
            }
            if (Optional.IsDefined(InstanceName))
            {
                writer.WritePropertyName("instanceName"u8);
                writer.WriteStringValue(InstanceName);
            }
            if (Optional.IsDefined(SqlInstanceSdsArmId))
            {
                writer.WritePropertyName("sqlInstanceSdsArmId"u8);
                writer.WriteStringValue(SqlInstanceSdsArmId);
            }
            if (Optional.IsDefined(SqlInstanceEntityId))
            {
                writer.WritePropertyName("sqlInstanceEntityId"u8);
                writer.WriteStringValue(SqlInstanceEntityId);
            }
            if (Optional.IsDefined(SqlEdition))
            {
                writer.WritePropertyName("sqlEdition"u8);
                writer.WriteStringValue(SqlEdition);
            }
            if (Optional.IsDefined(SqlVersion))
            {
                writer.WritePropertyName("sqlVersion"u8);
                writer.WriteStringValue(SqlVersion);
            }
            if (Optional.IsDefined(IsClustered))
            {
                writer.WritePropertyName("isClustered"u8);
                writer.WriteBooleanValue(IsClustered.Value);
            }
            if (Optional.IsDefined(IsHighAvailabilityEnabled))
            {
                writer.WritePropertyName("isHighAvailabilityEnabled"u8);
                writer.WriteBooleanValue(IsHighAvailabilityEnabled.Value);
            }
            if (Optional.IsDefined(SqlFciState))
            {
                writer.WritePropertyName("sqlFciState"u8);
                writer.WriteStringValue(SqlFciState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        AssessedSqlInstanceSummary IJsonModel<AssessedSqlInstanceSummary>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlInstanceSummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedSqlInstanceSummary)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAssessedSqlInstanceSummary(document.RootElement, options);
        }

        internal static AssessedSqlInstanceSummary DeserializeAssessedSqlInstanceSummary(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string instanceId = default;
            string instanceName = default;
            ResourceIdentifier sqlInstanceSdsArmId = default;
            string sqlInstanceEntityId = default;
            string sqlEdition = default;
            string sqlVersion = default;
            bool? isClustered = default;
            bool? isHighAvailabilityEnabled = default;
            AssessmentSqlFciState? sqlFciState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("instanceId"u8))
                {
                    instanceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instanceName"u8))
                {
                    instanceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sqlInstanceSdsArmId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sqlInstanceSdsArmId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sqlInstanceEntityId"u8))
                {
                    sqlInstanceEntityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sqlEdition"u8))
                {
                    sqlEdition = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sqlVersion"u8))
                {
                    sqlVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isClustered"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isClustered = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isHighAvailabilityEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isHighAvailabilityEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sqlFciState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sqlFciState = new AssessmentSqlFciState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AssessedSqlInstanceSummary(
                instanceId,
                instanceName,
                sqlInstanceSdsArmId,
                sqlInstanceEntityId,
                sqlEdition,
                sqlVersion,
                isClustered,
                isHighAvailabilityEnabled,
                sqlFciState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AssessedSqlInstanceSummary>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlInstanceSummary>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerMigrationAssessmentContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AssessedSqlInstanceSummary)} does not support writing '{options.Format}' format.");
            }
        }

        AssessedSqlInstanceSummary IPersistableModel<AssessedSqlInstanceSummary>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlInstanceSummary>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAssessedSqlInstanceSummary(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AssessedSqlInstanceSummary)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AssessedSqlInstanceSummary>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
