// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The AssessmentSuitabilityExplanation. </summary>
    public readonly partial struct AssessmentSuitabilityExplanation : IEquatable<AssessmentSuitabilityExplanation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentSuitabilityExplanation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentSuitabilityExplanation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string NotApplicableValue = "NotApplicable";
        private const string DiskSizeGreaterThanSupportedValue = "DiskSizeGreaterThanSupported";
        private const string NoSuitableDiskSizeForIopsValue = "NoSuitableDiskSizeForIops";
        private const string NoSuitableDiskSizeForThroughputValue = "NoSuitableDiskSizeForThroughput";
        private const string NoDiskSizeFoundInSelectedLocationValue = "NoDiskSizeFoundInSelectedLocation";
        private const string NoDiskSizeFoundForSelectedRedundancyValue = "NoDiskSizeFoundForSelectedRedundancy";
        private const string InternalErrorOccurredForDiskEvaluationValue = "InternalErrorOccurredForDiskEvaluation";
        private const string NoEAPriceFoundForDiskSizeValue = "NoEaPriceFoundForDiskSize";

        /// <summary> Unknown. </summary>
        public static AssessmentSuitabilityExplanation Unknown { get; } = new AssessmentSuitabilityExplanation(UnknownValue);
        /// <summary> NotApplicable. </summary>
        public static AssessmentSuitabilityExplanation NotApplicable { get; } = new AssessmentSuitabilityExplanation(NotApplicableValue);
        /// <summary> DiskSizeGreaterThanSupported. </summary>
        public static AssessmentSuitabilityExplanation DiskSizeGreaterThanSupported { get; } = new AssessmentSuitabilityExplanation(DiskSizeGreaterThanSupportedValue);
        /// <summary> NoSuitableDiskSizeForIops. </summary>
        public static AssessmentSuitabilityExplanation NoSuitableDiskSizeForIops { get; } = new AssessmentSuitabilityExplanation(NoSuitableDiskSizeForIopsValue);
        /// <summary> NoSuitableDiskSizeForThroughput. </summary>
        public static AssessmentSuitabilityExplanation NoSuitableDiskSizeForThroughput { get; } = new AssessmentSuitabilityExplanation(NoSuitableDiskSizeForThroughputValue);
        /// <summary> NoDiskSizeFoundInSelectedLocation. </summary>
        public static AssessmentSuitabilityExplanation NoDiskSizeFoundInSelectedLocation { get; } = new AssessmentSuitabilityExplanation(NoDiskSizeFoundInSelectedLocationValue);
        /// <summary> NoDiskSizeFoundForSelectedRedundancy. </summary>
        public static AssessmentSuitabilityExplanation NoDiskSizeFoundForSelectedRedundancy { get; } = new AssessmentSuitabilityExplanation(NoDiskSizeFoundForSelectedRedundancyValue);
        /// <summary> InternalErrorOccurredForDiskEvaluation. </summary>
        public static AssessmentSuitabilityExplanation InternalErrorOccurredForDiskEvaluation { get; } = new AssessmentSuitabilityExplanation(InternalErrorOccurredForDiskEvaluationValue);
        /// <summary> NoEaPriceFoundForDiskSize. </summary>
        public static AssessmentSuitabilityExplanation NoEAPriceFoundForDiskSize { get; } = new AssessmentSuitabilityExplanation(NoEAPriceFoundForDiskSizeValue);
        /// <summary> Determines if two <see cref="AssessmentSuitabilityExplanation"/> values are the same. </summary>
        public static bool operator ==(AssessmentSuitabilityExplanation left, AssessmentSuitabilityExplanation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentSuitabilityExplanation"/> values are not the same. </summary>
        public static bool operator !=(AssessmentSuitabilityExplanation left, AssessmentSuitabilityExplanation right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssessmentSuitabilityExplanation"/>. </summary>
        public static implicit operator AssessmentSuitabilityExplanation(string value) => new AssessmentSuitabilityExplanation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentSuitabilityExplanation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentSuitabilityExplanation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
