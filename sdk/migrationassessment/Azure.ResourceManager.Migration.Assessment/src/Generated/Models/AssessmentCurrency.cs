// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> Currency for Azure. </summary>
    public readonly partial struct AssessmentCurrency : IEquatable<AssessmentCurrency>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentCurrency"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentCurrency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string USDValue = "USD";
        private const string DKKValue = "DKK";
        private const string CADValue = "CAD";
        private const string IdRValue = "IDR";
        private const string JPYValue = "JPY";
        private const string KRWValue = "KRW";
        private const string NZDValue = "NZD";
        private const string NOKValue = "NOK";
        private const string RUBValue = "RUB";
        private const string SARValue = "SAR";
        private const string ZARValue = "ZAR";
        private const string SEKValue = "SEK";
        private const string TRYValue = "TRY";
        private const string GBPValue = "GBP";
        private const string MXNValue = "MXN";
        private const string MYRValue = "MYR";
        private const string INRValue = "INR";
        private const string HKDValue = "HKD";
        private const string BRLValue = "BRL";
        private const string TWDValue = "TWD";
        private const string EURValue = "EUR";
        private const string CHFValue = "CHF";
        private const string ARSValue = "ARS";
        private const string AUDValue = "AUD";
        private const string CNYValue = "CNY";

        /// <summary> Unknown. </summary>
        public static AssessmentCurrency Unknown { get; } = new AssessmentCurrency(UnknownValue);
        /// <summary> USD. </summary>
        public static AssessmentCurrency USD { get; } = new AssessmentCurrency(USDValue);
        /// <summary> DKK. </summary>
        public static AssessmentCurrency DKK { get; } = new AssessmentCurrency(DKKValue);
        /// <summary> CAD. </summary>
        public static AssessmentCurrency CAD { get; } = new AssessmentCurrency(CADValue);
        /// <summary> IDR. </summary>
        public static AssessmentCurrency IdR { get; } = new AssessmentCurrency(IdRValue);
        /// <summary> JPY. </summary>
        public static AssessmentCurrency JPY { get; } = new AssessmentCurrency(JPYValue);
        /// <summary> KRW. </summary>
        public static AssessmentCurrency KRW { get; } = new AssessmentCurrency(KRWValue);
        /// <summary> NZD. </summary>
        public static AssessmentCurrency NZD { get; } = new AssessmentCurrency(NZDValue);
        /// <summary> NOK. </summary>
        public static AssessmentCurrency NOK { get; } = new AssessmentCurrency(NOKValue);
        /// <summary> RUB. </summary>
        public static AssessmentCurrency RUB { get; } = new AssessmentCurrency(RUBValue);
        /// <summary> SAR. </summary>
        public static AssessmentCurrency SAR { get; } = new AssessmentCurrency(SARValue);
        /// <summary> ZAR. </summary>
        public static AssessmentCurrency ZAR { get; } = new AssessmentCurrency(ZARValue);
        /// <summary> SEK. </summary>
        public static AssessmentCurrency SEK { get; } = new AssessmentCurrency(SEKValue);
        /// <summary> TRY. </summary>
        public static AssessmentCurrency TRY { get; } = new AssessmentCurrency(TRYValue);
        /// <summary> GBP. </summary>
        public static AssessmentCurrency GBP { get; } = new AssessmentCurrency(GBPValue);
        /// <summary> MXN. </summary>
        public static AssessmentCurrency MXN { get; } = new AssessmentCurrency(MXNValue);
        /// <summary> MYR. </summary>
        public static AssessmentCurrency MYR { get; } = new AssessmentCurrency(MYRValue);
        /// <summary> INR. </summary>
        public static AssessmentCurrency INR { get; } = new AssessmentCurrency(INRValue);
        /// <summary> HKD. </summary>
        public static AssessmentCurrency HKD { get; } = new AssessmentCurrency(HKDValue);
        /// <summary> BRL. </summary>
        public static AssessmentCurrency BRL { get; } = new AssessmentCurrency(BRLValue);
        /// <summary> TWD. </summary>
        public static AssessmentCurrency TWD { get; } = new AssessmentCurrency(TWDValue);
        /// <summary> EUR. </summary>
        public static AssessmentCurrency EUR { get; } = new AssessmentCurrency(EURValue);
        /// <summary> CHF. </summary>
        public static AssessmentCurrency CHF { get; } = new AssessmentCurrency(CHFValue);
        /// <summary> ARS. </summary>
        public static AssessmentCurrency ARS { get; } = new AssessmentCurrency(ARSValue);
        /// <summary> AUD. </summary>
        public static AssessmentCurrency AUD { get; } = new AssessmentCurrency(AUDValue);
        /// <summary> CNY. </summary>
        public static AssessmentCurrency CNY { get; } = new AssessmentCurrency(CNYValue);
        /// <summary> Determines if two <see cref="AssessmentCurrency"/> values are the same. </summary>
        public static bool operator ==(AssessmentCurrency left, AssessmentCurrency right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentCurrency"/> values are not the same. </summary>
        public static bool operator !=(AssessmentCurrency left, AssessmentCurrency right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssessmentCurrency"/>. </summary>
        public static implicit operator AssessmentCurrency(string value) => new AssessmentCurrency(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentCurrency other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentCurrency other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
