// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> Class to represent the Product Support Status. </summary>
    public partial class AssessmentProductSupportStatus
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AssessmentProductSupportStatus"/>. </summary>
        internal AssessmentProductSupportStatus()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AssessmentProductSupportStatus"/>. </summary>
        /// <param name="currentVersion"> Gets or sets current version of ServicePack. </param>
        /// <param name="servicePackStatus"> Gets or sets ServicePack of the product. </param>
        /// <param name="esuStatus"> Gets or sets the Extended Security Update ESU status. </param>
        /// <param name="supportStatus"> Gets or sets the support status of the product. </param>
        /// <param name="eta"> Gets or sets the ETA. </param>
        /// <param name="currentEsuYear"> Gets or sets the current ESU support year. </param>
        /// <param name="mainstreamEndOn"> Gets or sets the main stream end date of the product. </param>
        /// <param name="extendedSupportEndOn"> Gets or sets the extended support end date of the product. </param>
        /// <param name="extendedSecurityUpdateYear1EndOn"> Gets or sets the extended security update year 1 end date of the product. </param>
        /// <param name="extendedSecurityUpdateYear2EndOn"> Gets or sets the extended security update year 2 end date of the product. </param>
        /// <param name="extendedSecurityUpdateYear3EndOn"> Gets or sets the extended security update year 3 end date of the product. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AssessmentProductSupportStatus(string currentVersion, string servicePackStatus, string esuStatus, string supportStatus, int? eta, string currentEsuYear, DateTimeOffset? mainstreamEndOn, DateTimeOffset? extendedSupportEndOn, DateTimeOffset? extendedSecurityUpdateYear1EndOn, DateTimeOffset? extendedSecurityUpdateYear2EndOn, DateTimeOffset? extendedSecurityUpdateYear3EndOn, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CurrentVersion = currentVersion;
            ServicePackStatus = servicePackStatus;
            EsuStatus = esuStatus;
            SupportStatus = supportStatus;
            Eta = eta;
            CurrentEsuYear = currentEsuYear;
            MainstreamEndOn = mainstreamEndOn;
            ExtendedSupportEndOn = extendedSupportEndOn;
            ExtendedSecurityUpdateYear1EndOn = extendedSecurityUpdateYear1EndOn;
            ExtendedSecurityUpdateYear2EndOn = extendedSecurityUpdateYear2EndOn;
            ExtendedSecurityUpdateYear3EndOn = extendedSecurityUpdateYear3EndOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets current version of ServicePack. </summary>
        public string CurrentVersion { get; }
        /// <summary> Gets or sets ServicePack of the product. </summary>
        public string ServicePackStatus { get; }
        /// <summary> Gets or sets the Extended Security Update ESU status. </summary>
        public string EsuStatus { get; }
        /// <summary> Gets or sets the support status of the product. </summary>
        public string SupportStatus { get; }
        /// <summary> Gets or sets the ETA. </summary>
        public int? Eta { get; }
        /// <summary> Gets or sets the current ESU support year. </summary>
        public string CurrentEsuYear { get; }
        /// <summary> Gets or sets the main stream end date of the product. </summary>
        public DateTimeOffset? MainstreamEndOn { get; }
        /// <summary> Gets or sets the extended support end date of the product. </summary>
        public DateTimeOffset? ExtendedSupportEndOn { get; }
        /// <summary> Gets or sets the extended security update year 1 end date of the product. </summary>
        public DateTimeOffset? ExtendedSecurityUpdateYear1EndOn { get; }
        /// <summary> Gets or sets the extended security update year 2 end date of the product. </summary>
        public DateTimeOffset? ExtendedSecurityUpdateYear2EndOn { get; }
        /// <summary> Gets or sets the extended security update year 3 end date of the product. </summary>
        public DateTimeOffset? ExtendedSecurityUpdateYear3EndOn { get; }
    }
}
