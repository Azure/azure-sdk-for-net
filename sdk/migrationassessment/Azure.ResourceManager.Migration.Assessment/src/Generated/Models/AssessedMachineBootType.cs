// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The AssessedMachineBootType. </summary>
    public readonly partial struct AssessedMachineBootType : IEquatable<AssessedMachineBootType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessedMachineBootType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessedMachineBootType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string EfiValue = "EFI";
        private const string BiosValue = "BIOS";
        private const string NotSpecifiedValue = "NotSpecified";

        /// <summary> Unknown. </summary>
        public static AssessedMachineBootType Unknown { get; } = new AssessedMachineBootType(UnknownValue);
        /// <summary> EFI. </summary>
        public static AssessedMachineBootType Efi { get; } = new AssessedMachineBootType(EfiValue);
        /// <summary> BIOS. </summary>
        public static AssessedMachineBootType Bios { get; } = new AssessedMachineBootType(BiosValue);
        /// <summary> NotSpecified. </summary>
        public static AssessedMachineBootType NotSpecified { get; } = new AssessedMachineBootType(NotSpecifiedValue);
        /// <summary> Determines if two <see cref="AssessedMachineBootType"/> values are the same. </summary>
        public static bool operator ==(AssessedMachineBootType left, AssessedMachineBootType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessedMachineBootType"/> values are not the same. </summary>
        public static bool operator !=(AssessedMachineBootType left, AssessedMachineBootType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssessedMachineBootType"/>. </summary>
        public static implicit operator AssessedMachineBootType(string value) => new AssessedMachineBootType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessedMachineBootType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessedMachineBootType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
