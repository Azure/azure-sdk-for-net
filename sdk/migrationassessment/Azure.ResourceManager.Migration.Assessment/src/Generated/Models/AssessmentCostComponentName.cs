// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> Enum to represent component name. </summary>
    public readonly partial struct AssessmentCostComponentName : IEquatable<AssessmentCostComponentName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentCostComponentName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentCostComponentName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string MonthlyAzureHybridCostSavingsValue = "MonthlyAzureHybridCostSavings";
        private const string MonthlySecurityCostValue = "MonthlySecurityCost";
        private const string MonthlyPremiumV2StorageCostValue = "MonthlyPremiumV2StorageCost";

        /// <summary> Unknown. </summary>
        public static AssessmentCostComponentName Unknown { get; } = new AssessmentCostComponentName(UnknownValue);
        /// <summary> MonthlyAzureHybridCostSavings. </summary>
        public static AssessmentCostComponentName MonthlyAzureHybridCostSavings { get; } = new AssessmentCostComponentName(MonthlyAzureHybridCostSavingsValue);
        /// <summary> MonthlySecurityCost. </summary>
        public static AssessmentCostComponentName MonthlySecurityCost { get; } = new AssessmentCostComponentName(MonthlySecurityCostValue);
        /// <summary> MonthlyPremiumV2StorageCost. </summary>
        public static AssessmentCostComponentName MonthlyPremiumV2StorageCost { get; } = new AssessmentCostComponentName(MonthlyPremiumV2StorageCostValue);
        /// <summary> Determines if two <see cref="AssessmentCostComponentName"/> values are the same. </summary>
        public static bool operator ==(AssessmentCostComponentName left, AssessmentCostComponentName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentCostComponentName"/> values are not the same. </summary>
        public static bool operator !=(AssessmentCostComponentName left, AssessmentCostComponentName right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssessmentCostComponentName"/>. </summary>
        public static implicit operator AssessmentCostComponentName(string value) => new AssessmentCostComponentName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentCostComponentName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentCostComponentName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
