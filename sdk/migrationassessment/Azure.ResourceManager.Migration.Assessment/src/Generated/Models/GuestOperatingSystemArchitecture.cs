// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The GuestOperatingSystemArchitecture. </summary>
    public readonly partial struct GuestOperatingSystemArchitecture : IEquatable<GuestOperatingSystemArchitecture>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="GuestOperatingSystemArchitecture"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public GuestOperatingSystemArchitecture(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string X86Value = "X86";
        private const string X64Value = "X64";

        /// <summary> Unknown. </summary>
        public static GuestOperatingSystemArchitecture Unknown { get; } = new GuestOperatingSystemArchitecture(UnknownValue);
        /// <summary> X86. </summary>
        public static GuestOperatingSystemArchitecture X86 { get; } = new GuestOperatingSystemArchitecture(X86Value);
        /// <summary> X64. </summary>
        public static GuestOperatingSystemArchitecture X64 { get; } = new GuestOperatingSystemArchitecture(X64Value);
        /// <summary> Determines if two <see cref="GuestOperatingSystemArchitecture"/> values are the same. </summary>
        public static bool operator ==(GuestOperatingSystemArchitecture left, GuestOperatingSystemArchitecture right) => left.Equals(right);
        /// <summary> Determines if two <see cref="GuestOperatingSystemArchitecture"/> values are not the same. </summary>
        public static bool operator !=(GuestOperatingSystemArchitecture left, GuestOperatingSystemArchitecture right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="GuestOperatingSystemArchitecture"/>. </summary>
        public static implicit operator GuestOperatingSystemArchitecture(string value) => new GuestOperatingSystemArchitecture(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is GuestOperatingSystemArchitecture other && Equals(other);
        /// <inheritdoc />
        public bool Equals(GuestOperatingSystemArchitecture other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
