// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The AssessmentAvsNodeType. </summary>
    public readonly partial struct AssessmentAvsNodeType : IEquatable<AssessmentAvsNodeType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentAvsNodeType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentAvsNodeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string Av36Value = "AV36";

        /// <summary> Unknown. </summary>
        public static AssessmentAvsNodeType Unknown { get; } = new AssessmentAvsNodeType(UnknownValue);
        /// <summary> AV36. </summary>
        public static AssessmentAvsNodeType Av36 { get; } = new AssessmentAvsNodeType(Av36Value);
        /// <summary> Determines if two <see cref="AssessmentAvsNodeType"/> values are the same. </summary>
        public static bool operator ==(AssessmentAvsNodeType left, AssessmentAvsNodeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentAvsNodeType"/> values are not the same. </summary>
        public static bool operator !=(AssessmentAvsNodeType left, AssessmentAvsNodeType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssessmentAvsNodeType"/>. </summary>
        public static implicit operator AssessmentAvsNodeType(string value) => new AssessmentAvsNodeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentAvsNodeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentAvsNodeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
