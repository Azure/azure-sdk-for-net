// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The AvsSuitabilityExplanation. </summary>
    public readonly partial struct AvsSuitabilityExplanation : IEquatable<AvsSuitabilityExplanation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AvsSuitabilityExplanation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AvsSuitabilityExplanation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string NotApplicableValue = "NotApplicable";
        private const string UnsupportedLocationForSelectedNodeValue = "UnsupportedLocationForSelectedNode";

        /// <summary> Unknown. </summary>
        public static AvsSuitabilityExplanation Unknown { get; } = new AvsSuitabilityExplanation(UnknownValue);
        /// <summary> NotApplicable. </summary>
        public static AvsSuitabilityExplanation NotApplicable { get; } = new AvsSuitabilityExplanation(NotApplicableValue);
        /// <summary> UnsupportedLocationForSelectedNode. </summary>
        public static AvsSuitabilityExplanation UnsupportedLocationForSelectedNode { get; } = new AvsSuitabilityExplanation(UnsupportedLocationForSelectedNodeValue);
        /// <summary> Determines if two <see cref="AvsSuitabilityExplanation"/> values are the same. </summary>
        public static bool operator ==(AvsSuitabilityExplanation left, AvsSuitabilityExplanation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AvsSuitabilityExplanation"/> values are not the same. </summary>
        public static bool operator !=(AvsSuitabilityExplanation left, AvsSuitabilityExplanation right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AvsSuitabilityExplanation"/>. </summary>
        public static implicit operator AvsSuitabilityExplanation(string value) => new AvsSuitabilityExplanation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AvsSuitabilityExplanation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AvsSuitabilityExplanation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
