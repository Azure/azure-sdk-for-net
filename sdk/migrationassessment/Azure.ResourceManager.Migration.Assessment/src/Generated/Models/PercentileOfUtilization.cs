// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The PercentileOfUtilization. </summary>
    public readonly partial struct PercentileOfUtilization : IEquatable<PercentileOfUtilization>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PercentileOfUtilization"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PercentileOfUtilization(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Percentile50Value = "Percentile50";
        private const string Percentile90Value = "Percentile90";
        private const string Percentile95Value = "Percentile95";
        private const string Percentile99Value = "Percentile99";

        /// <summary> Percentile50. </summary>
        public static PercentileOfUtilization Percentile50 { get; } = new PercentileOfUtilization(Percentile50Value);
        /// <summary> Percentile90. </summary>
        public static PercentileOfUtilization Percentile90 { get; } = new PercentileOfUtilization(Percentile90Value);
        /// <summary> Percentile95. </summary>
        public static PercentileOfUtilization Percentile95 { get; } = new PercentileOfUtilization(Percentile95Value);
        /// <summary> Percentile99. </summary>
        public static PercentileOfUtilization Percentile99 { get; } = new PercentileOfUtilization(Percentile99Value);
        /// <summary> Determines if two <see cref="PercentileOfUtilization"/> values are the same. </summary>
        public static bool operator ==(PercentileOfUtilization left, PercentileOfUtilization right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PercentileOfUtilization"/> values are not the same. </summary>
        public static bool operator !=(PercentileOfUtilization left, PercentileOfUtilization right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PercentileOfUtilization"/>. </summary>
        public static implicit operator PercentileOfUtilization(string value) => new PercentileOfUtilization(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PercentileOfUtilization other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PercentileOfUtilization other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
