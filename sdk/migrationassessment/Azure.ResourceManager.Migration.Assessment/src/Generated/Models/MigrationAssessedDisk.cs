// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The MigrationAssessedDisk. </summary>
    public partial class MigrationAssessedDisk
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MigrationAssessedDisk"/>. </summary>
        internal MigrationAssessedDisk()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MigrationAssessedDisk"/>. </summary>
        /// <param name="suitability"> Gets the suitability. </param>
        /// <param name="suitabilityExplanation"> Gets the suitability explanation. </param>
        /// <param name="suitabilityDetail"> Gets the suitability detail. </param>
        /// <param name="recommendedDiskSize"> Gets the recommended disk size. </param>
        /// <param name="recommendedDiskType"> Gets the recommended disk type. </param>
        /// <param name="gigabytesForRecommendedDiskSize"> Gets the recommended disk size. </param>
        /// <param name="recommendDiskThroughputInMbps"> Gets the recommended disk throughput. </param>
        /// <param name="recommendedDiskIops"> Gets the recommended disk iops. </param>
        /// <param name="monthlyStorageCost"> Gets the monthly storage cost. </param>
        /// <param name="name"> Gets the name. </param>
        /// <param name="displayName"> Gets the machine display name. </param>
        /// <param name="gigabytesProvisioned"> Gets the gigabytes provisioned. </param>
        /// <param name="megabytesPerSecondOfRead"> Gets the megabytes per second of read. </param>
        /// <param name="megabytesPerSecondOfWrite"> Gets the megabytes per second of write. </param>
        /// <param name="numberOfReadOperationsPerSecond"> Gets the number of read operations per second. </param>
        /// <param name="numberOfWriteOperationsPerSecond"> Gets the number of write operations per second. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MigrationAssessedDisk(MigrationAssessmentCloudSuitability? suitability, AssessmentSuitabilityExplanation? suitabilityExplanation, AssessmentDiskSuitabilityDetail? suitabilityDetail, AssessmentDiskSize? recommendedDiskSize, AssessmentDiskType? recommendedDiskType, int? gigabytesForRecommendedDiskSize, double? recommendDiskThroughputInMbps, double? recommendedDiskIops, double? monthlyStorageCost, string name, string displayName, double? gigabytesProvisioned, double? megabytesPerSecondOfRead, double? megabytesPerSecondOfWrite, double? numberOfReadOperationsPerSecond, double? numberOfWriteOperationsPerSecond, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Suitability = suitability;
            SuitabilityExplanation = suitabilityExplanation;
            SuitabilityDetail = suitabilityDetail;
            RecommendedDiskSize = recommendedDiskSize;
            RecommendedDiskType = recommendedDiskType;
            GigabytesForRecommendedDiskSize = gigabytesForRecommendedDiskSize;
            RecommendDiskThroughputInMbps = recommendDiskThroughputInMbps;
            RecommendedDiskIops = recommendedDiskIops;
            MonthlyStorageCost = monthlyStorageCost;
            Name = name;
            DisplayName = displayName;
            GigabytesProvisioned = gigabytesProvisioned;
            MegabytesPerSecondOfRead = megabytesPerSecondOfRead;
            MegabytesPerSecondOfWrite = megabytesPerSecondOfWrite;
            NumberOfReadOperationsPerSecond = numberOfReadOperationsPerSecond;
            NumberOfWriteOperationsPerSecond = numberOfWriteOperationsPerSecond;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the suitability. </summary>
        public MigrationAssessmentCloudSuitability? Suitability { get; }
        /// <summary> Gets the suitability explanation. </summary>
        public AssessmentSuitabilityExplanation? SuitabilityExplanation { get; }
        /// <summary> Gets the suitability detail. </summary>
        public AssessmentDiskSuitabilityDetail? SuitabilityDetail { get; }
        /// <summary> Gets the recommended disk size. </summary>
        public AssessmentDiskSize? RecommendedDiskSize { get; }
        /// <summary> Gets the recommended disk type. </summary>
        public AssessmentDiskType? RecommendedDiskType { get; }
        /// <summary> Gets the recommended disk size. </summary>
        public int? GigabytesForRecommendedDiskSize { get; }
        /// <summary> Gets the recommended disk throughput. </summary>
        public double? RecommendDiskThroughputInMbps { get; }
        /// <summary> Gets the recommended disk iops. </summary>
        public double? RecommendedDiskIops { get; }
        /// <summary> Gets the monthly storage cost. </summary>
        public double? MonthlyStorageCost { get; }
        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the machine display name. </summary>
        public string DisplayName { get; }
        /// <summary> Gets the gigabytes provisioned. </summary>
        public double? GigabytesProvisioned { get; }
        /// <summary> Gets the megabytes per second of read. </summary>
        public double? MegabytesPerSecondOfRead { get; }
        /// <summary> Gets the megabytes per second of write. </summary>
        public double? MegabytesPerSecondOfWrite { get; }
        /// <summary> Gets the number of read operations per second. </summary>
        public double? NumberOfReadOperationsPerSecond { get; }
        /// <summary> Gets the number of write operations per second. </summary>
        public double? NumberOfWriteOperationsPerSecond { get; }
    }
}
