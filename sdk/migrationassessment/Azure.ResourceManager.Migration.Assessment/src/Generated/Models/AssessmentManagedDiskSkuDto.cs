// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> Class representing an Azure Managed Disk SKU. </summary>
    public partial class AssessmentManagedDiskSkuDto
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AssessmentManagedDiskSkuDto"/>. </summary>
        internal AssessmentManagedDiskSkuDto()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AssessmentManagedDiskSkuDto"/>. </summary>
        /// <param name="diskType"> Gets the Type ("tier") of disk - e.g. standard, premium, ultra. </param>
        /// <param name="diskSize"> Gets the Size of the managed disk - e.g. P30, P40. </param>
        /// <param name="diskRedundancy"> Gets disk redundancy - e.g. LRS, ZRS. </param>
        /// <param name="storageCost"> Gets the managed disk storage cost. </param>
        /// <param name="recommendedSizeInGib"> Gets the recommended in GB of the managed disk. </param>
        /// <param name="recommendedThroughputInMbps"> Gets the recommended throughput in MBPS of the managed disk. </param>
        /// <param name="recommendedIops"> Gets the recommended IOPS of the managed disk. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AssessmentManagedDiskSkuDto(ManagedDiskSkuDtoDiskType? diskType, AssessmentDiskSize? diskSize, ManagedDiskSkuDtoDiskRedundancy? diskRedundancy, double? storageCost, double? recommendedSizeInGib, double? recommendedThroughputInMbps, double? recommendedIops, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DiskType = diskType;
            DiskSize = diskSize;
            DiskRedundancy = diskRedundancy;
            StorageCost = storageCost;
            RecommendedSizeInGib = recommendedSizeInGib;
            RecommendedThroughputInMbps = recommendedThroughputInMbps;
            RecommendedIops = recommendedIops;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the Type ("tier") of disk - e.g. standard, premium, ultra. </summary>
        public ManagedDiskSkuDtoDiskType? DiskType { get; }
        /// <summary> Gets the Size of the managed disk - e.g. P30, P40. </summary>
        public AssessmentDiskSize? DiskSize { get; }
        /// <summary> Gets disk redundancy - e.g. LRS, ZRS. </summary>
        public ManagedDiskSkuDtoDiskRedundancy? DiskRedundancy { get; }
        /// <summary> Gets the managed disk storage cost. </summary>
        public double? StorageCost { get; }
        /// <summary> Gets the recommended in GB of the managed disk. </summary>
        public double? RecommendedSizeInGib { get; }
        /// <summary> Gets the recommended throughput in MBPS of the managed disk. </summary>
        public double? RecommendedThroughputInMbps { get; }
        /// <summary> Gets the recommended IOPS of the managed disk. </summary>
        public double? RecommendedIops { get; }
    }
}
