// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The FttAndRaidLevel. </summary>
    public readonly partial struct FttAndRaidLevel : IEquatable<FttAndRaidLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FttAndRaidLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FttAndRaidLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string Ftt1Raid1Value = "Ftt1Raid1";
        private const string Ftt1Raid5Value = "Ftt1Raid5";
        private const string Ftt2Raid1Value = "Ftt2Raid1";
        private const string Ftt2Raid6Value = "Ftt2Raid6";
        private const string Ftt3Raid1Value = "Ftt3Raid1";

        /// <summary> Unknown. </summary>
        public static FttAndRaidLevel Unknown { get; } = new FttAndRaidLevel(UnknownValue);
        /// <summary> Ftt1Raid1. </summary>
        public static FttAndRaidLevel Ftt1Raid1 { get; } = new FttAndRaidLevel(Ftt1Raid1Value);
        /// <summary> Ftt1Raid5. </summary>
        public static FttAndRaidLevel Ftt1Raid5 { get; } = new FttAndRaidLevel(Ftt1Raid5Value);
        /// <summary> Ftt2Raid1. </summary>
        public static FttAndRaidLevel Ftt2Raid1 { get; } = new FttAndRaidLevel(Ftt2Raid1Value);
        /// <summary> Ftt2Raid6. </summary>
        public static FttAndRaidLevel Ftt2Raid6 { get; } = new FttAndRaidLevel(Ftt2Raid6Value);
        /// <summary> Ftt3Raid1. </summary>
        public static FttAndRaidLevel Ftt3Raid1 { get; } = new FttAndRaidLevel(Ftt3Raid1Value);
        /// <summary> Determines if two <see cref="FttAndRaidLevel"/> values are the same. </summary>
        public static bool operator ==(FttAndRaidLevel left, FttAndRaidLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FttAndRaidLevel"/> values are not the same. </summary>
        public static bool operator !=(FttAndRaidLevel left, FttAndRaidLevel right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="FttAndRaidLevel"/>. </summary>
        public static implicit operator FttAndRaidLevel(string value) => new FttAndRaidLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FttAndRaidLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FttAndRaidLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
