// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The AssessmentDiskType. </summary>
    public readonly partial struct AssessmentDiskType : IEquatable<AssessmentDiskType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentDiskType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string StandardValue = "Standard";
        private const string StandardSsdValue = "StandardSSD";
        private const string PremiumValue = "Premium";
        private const string StandardOrPremiumValue = "StandardOrPremium";
        private const string UltraValue = "Ultra";
        private const string PremiumV2Value = "PremiumV2";

        /// <summary> Unknown. </summary>
        public static AssessmentDiskType Unknown { get; } = new AssessmentDiskType(UnknownValue);
        /// <summary> Standard. </summary>
        public static AssessmentDiskType Standard { get; } = new AssessmentDiskType(StandardValue);
        /// <summary> StandardSSD. </summary>
        public static AssessmentDiskType StandardSsd { get; } = new AssessmentDiskType(StandardSsdValue);
        /// <summary> Premium. </summary>
        public static AssessmentDiskType Premium { get; } = new AssessmentDiskType(PremiumValue);
        /// <summary> StandardOrPremium. </summary>
        public static AssessmentDiskType StandardOrPremium { get; } = new AssessmentDiskType(StandardOrPremiumValue);
        /// <summary> Ultra. </summary>
        public static AssessmentDiskType Ultra { get; } = new AssessmentDiskType(UltraValue);
        /// <summary> PremiumV2. </summary>
        public static AssessmentDiskType PremiumV2 { get; } = new AssessmentDiskType(PremiumV2Value);
        /// <summary> Determines if two <see cref="AssessmentDiskType"/> values are the same. </summary>
        public static bool operator ==(AssessmentDiskType left, AssessmentDiskType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentDiskType"/> values are not the same. </summary>
        public static bool operator !=(AssessmentDiskType left, AssessmentDiskType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssessmentDiskType"/>. </summary>
        public static implicit operator AssessmentDiskType(string value) => new AssessmentDiskType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentDiskType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentDiskType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
