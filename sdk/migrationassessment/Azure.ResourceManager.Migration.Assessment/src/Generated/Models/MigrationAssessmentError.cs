// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> Error web model class. </summary>
    public partial class MigrationAssessmentError
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MigrationAssessmentError"/>. </summary>
        internal MigrationAssessmentError()
        {
            MessageParameters = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="MigrationAssessmentError"/>. </summary>
        /// <param name="id"> Gets the error ID. </param>
        /// <param name="code"> Gets the error code. </param>
        /// <param name="runAsAccountId"> Gets the Run as account ID. </param>
        /// <param name="applianceName"> Gets the Appliance name. </param>
        /// <param name="message"> Gets the error message. </param>
        /// <param name="summaryMessage"> Gets the error summary message. </param>
        /// <param name="agentScenario"> Gets the agent scenario where this error occurred. </param>
        /// <param name="possibleCauses"> Gets the error possible causes. </param>
        /// <param name="recommendedAction"> Gets the recommended action for the error. </param>
        /// <param name="severity"> Gets the error severity. </param>
        /// <param name="messageParameters"> Gets the error message parameters. </param>
        /// <param name="updatedOn"> Gets the time stamp when the error was updated. </param>
        /// <param name="impactedAssessmentType"> Gets the type of assessment impacted by this error. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MigrationAssessmentError(int? id, string code, string runAsAccountId, string applianceName, string message, string summaryMessage, string agentScenario, string possibleCauses, string recommendedAction, string severity, IReadOnlyDictionary<string, string> messageParameters, DateTimeOffset? updatedOn, string impactedAssessmentType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Code = code;
            RunAsAccountId = runAsAccountId;
            ApplianceName = applianceName;
            Message = message;
            SummaryMessage = summaryMessage;
            AgentScenario = agentScenario;
            PossibleCauses = possibleCauses;
            RecommendedAction = recommendedAction;
            Severity = severity;
            MessageParameters = messageParameters;
            UpdatedOn = updatedOn;
            ImpactedAssessmentType = impactedAssessmentType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the error ID. </summary>
        public int? Id { get; }
        /// <summary> Gets the error code. </summary>
        public string Code { get; }
        /// <summary> Gets the Run as account ID. </summary>
        public string RunAsAccountId { get; }
        /// <summary> Gets the Appliance name. </summary>
        public string ApplianceName { get; }
        /// <summary> Gets the error message. </summary>
        public string Message { get; }
        /// <summary> Gets the error summary message. </summary>
        public string SummaryMessage { get; }
        /// <summary> Gets the agent scenario where this error occurred. </summary>
        public string AgentScenario { get; }
        /// <summary> Gets the error possible causes. </summary>
        public string PossibleCauses { get; }
        /// <summary> Gets the recommended action for the error. </summary>
        public string RecommendedAction { get; }
        /// <summary> Gets the error severity. </summary>
        public string Severity { get; }
        /// <summary> Gets the error message parameters. </summary>
        public IReadOnlyDictionary<string, string> MessageParameters { get; }
        /// <summary> Gets the time stamp when the error was updated. </summary>
        public DateTimeOffset? UpdatedOn { get; }
        /// <summary> Gets the type of assessment impacted by this error. </summary>
        public string ImpactedAssessmentType { get; }
    }
}
