// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The AssessmentDiskSuitabilityDetail. </summary>
    public readonly partial struct AssessmentDiskSuitabilityDetail : IEquatable<AssessmentDiskSuitabilityDetail>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentDiskSuitabilityDetail"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentDiskSuitabilityDetail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string NumberOfReadOperationsPerSecondMissingValue = "NumberOfReadOperationsPerSecondMissing";
        private const string NumberOfWriteOperationsPerSecondMissingValue = "NumberOfWriteOperationsPerSecondMissing";
        private const string MegabytesPerSecondOfReadMissingValue = "MegabytesPerSecondOfReadMissing";
        private const string MegabytesPerSecondOfWriteMissingValue = "MegabytesPerSecondOfWriteMissing";
        private const string DiskGigabytesConsumedMissingValue = "DiskGigabytesConsumedMissing";
        private const string DiskGigabytesProvisionedMissingValue = "DiskGigabytesProvisionedMissing";
        private const string NumberOfReadOperationsPerSecondOutOfRangeValue = "NumberOfReadOperationsPerSecondOutOfRange";
        private const string NumberOfWriteOperationsPerSecondOutOfRangeValue = "NumberOfWriteOperationsPerSecondOutOfRange";
        private const string MegabytesPerSecondOfReadOutOfRangeValue = "MegabytesPerSecondOfReadOutOfRange";
        private const string MegabytesPerSecondOfWriteOutOfRangeValue = "MegabytesPerSecondOfWriteOutOfRange";
        private const string DiskGigabytesConsumedOutOfRangeValue = "DiskGigabytesConsumedOutOfRange";
        private const string DiskGigabytesProvisionedOutOfRangeValue = "DiskGigabytesProvisionedOutOfRange";

        /// <summary> None. </summary>
        public static AssessmentDiskSuitabilityDetail None { get; } = new AssessmentDiskSuitabilityDetail(NoneValue);
        /// <summary> NumberOfReadOperationsPerSecondMissing. </summary>
        public static AssessmentDiskSuitabilityDetail NumberOfReadOperationsPerSecondMissing { get; } = new AssessmentDiskSuitabilityDetail(NumberOfReadOperationsPerSecondMissingValue);
        /// <summary> NumberOfWriteOperationsPerSecondMissing. </summary>
        public static AssessmentDiskSuitabilityDetail NumberOfWriteOperationsPerSecondMissing { get; } = new AssessmentDiskSuitabilityDetail(NumberOfWriteOperationsPerSecondMissingValue);
        /// <summary> MegabytesPerSecondOfReadMissing. </summary>
        public static AssessmentDiskSuitabilityDetail MegabytesPerSecondOfReadMissing { get; } = new AssessmentDiskSuitabilityDetail(MegabytesPerSecondOfReadMissingValue);
        /// <summary> MegabytesPerSecondOfWriteMissing. </summary>
        public static AssessmentDiskSuitabilityDetail MegabytesPerSecondOfWriteMissing { get; } = new AssessmentDiskSuitabilityDetail(MegabytesPerSecondOfWriteMissingValue);
        /// <summary> DiskGigabytesConsumedMissing. </summary>
        public static AssessmentDiskSuitabilityDetail DiskGigabytesConsumedMissing { get; } = new AssessmentDiskSuitabilityDetail(DiskGigabytesConsumedMissingValue);
        /// <summary> DiskGigabytesProvisionedMissing. </summary>
        public static AssessmentDiskSuitabilityDetail DiskGigabytesProvisionedMissing { get; } = new AssessmentDiskSuitabilityDetail(DiskGigabytesProvisionedMissingValue);
        /// <summary> NumberOfReadOperationsPerSecondOutOfRange. </summary>
        public static AssessmentDiskSuitabilityDetail NumberOfReadOperationsPerSecondOutOfRange { get; } = new AssessmentDiskSuitabilityDetail(NumberOfReadOperationsPerSecondOutOfRangeValue);
        /// <summary> NumberOfWriteOperationsPerSecondOutOfRange. </summary>
        public static AssessmentDiskSuitabilityDetail NumberOfWriteOperationsPerSecondOutOfRange { get; } = new AssessmentDiskSuitabilityDetail(NumberOfWriteOperationsPerSecondOutOfRangeValue);
        /// <summary> MegabytesPerSecondOfReadOutOfRange. </summary>
        public static AssessmentDiskSuitabilityDetail MegabytesPerSecondOfReadOutOfRange { get; } = new AssessmentDiskSuitabilityDetail(MegabytesPerSecondOfReadOutOfRangeValue);
        /// <summary> MegabytesPerSecondOfWriteOutOfRange. </summary>
        public static AssessmentDiskSuitabilityDetail MegabytesPerSecondOfWriteOutOfRange { get; } = new AssessmentDiskSuitabilityDetail(MegabytesPerSecondOfWriteOutOfRangeValue);
        /// <summary> DiskGigabytesConsumedOutOfRange. </summary>
        public static AssessmentDiskSuitabilityDetail DiskGigabytesConsumedOutOfRange { get; } = new AssessmentDiskSuitabilityDetail(DiskGigabytesConsumedOutOfRangeValue);
        /// <summary> DiskGigabytesProvisionedOutOfRange. </summary>
        public static AssessmentDiskSuitabilityDetail DiskGigabytesProvisionedOutOfRange { get; } = new AssessmentDiskSuitabilityDetail(DiskGigabytesProvisionedOutOfRangeValue);
        /// <summary> Determines if two <see cref="AssessmentDiskSuitabilityDetail"/> values are the same. </summary>
        public static bool operator ==(AssessmentDiskSuitabilityDetail left, AssessmentDiskSuitabilityDetail right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentDiskSuitabilityDetail"/> values are not the same. </summary>
        public static bool operator !=(AssessmentDiskSuitabilityDetail left, AssessmentDiskSuitabilityDetail right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssessmentDiskSuitabilityDetail"/>. </summary>
        public static implicit operator AssessmentDiskSuitabilityDetail(string value) => new AssessmentDiskSuitabilityDetail(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentDiskSuitabilityDetail other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentDiskSuitabilityDetail other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
