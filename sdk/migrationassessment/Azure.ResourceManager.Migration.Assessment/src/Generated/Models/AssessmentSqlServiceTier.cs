// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The AssessmentSqlServiceTier. </summary>
    public readonly partial struct AssessmentSqlServiceTier : IEquatable<AssessmentSqlServiceTier>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentSqlServiceTier"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentSqlServiceTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string AutomaticValue = "Automatic";
        private const string GeneralPurposeValue = "GeneralPurpose";
        private const string BusinessCriticalValue = "BusinessCritical";
        private const string HyperScaleValue = "HyperScale";

        /// <summary> Unknown. </summary>
        public static AssessmentSqlServiceTier Unknown { get; } = new AssessmentSqlServiceTier(UnknownValue);
        /// <summary> Automatic. </summary>
        public static AssessmentSqlServiceTier Automatic { get; } = new AssessmentSqlServiceTier(AutomaticValue);
        /// <summary> GeneralPurpose. </summary>
        public static AssessmentSqlServiceTier GeneralPurpose { get; } = new AssessmentSqlServiceTier(GeneralPurposeValue);
        /// <summary> BusinessCritical. </summary>
        public static AssessmentSqlServiceTier BusinessCritical { get; } = new AssessmentSqlServiceTier(BusinessCriticalValue);
        /// <summary> HyperScale. </summary>
        public static AssessmentSqlServiceTier HyperScale { get; } = new AssessmentSqlServiceTier(HyperScaleValue);
        /// <summary> Determines if two <see cref="AssessmentSqlServiceTier"/> values are the same. </summary>
        public static bool operator ==(AssessmentSqlServiceTier left, AssessmentSqlServiceTier right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentSqlServiceTier"/> values are not the same. </summary>
        public static bool operator !=(AssessmentSqlServiceTier left, AssessmentSqlServiceTier right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssessmentSqlServiceTier"/>. </summary>
        public static implicit operator AssessmentSqlServiceTier(string value) => new AssessmentSqlServiceTier(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentSqlServiceTier other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentSqlServiceTier other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
