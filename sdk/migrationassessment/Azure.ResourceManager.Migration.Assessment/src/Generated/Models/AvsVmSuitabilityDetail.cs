// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> The AvsVmSuitabilityDetail. </summary>
    public readonly partial struct AvsVmSuitabilityDetail : IEquatable<AvsVmSuitabilityDetail>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AvsVmSuitabilityDetail"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AvsVmSuitabilityDetail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string PercentageOfCoresUtilizedMissingValue = "PercentageOfCoresUtilizedMissing";
        private const string PercentageOfMemoryUtilizedMissingValue = "PercentageOfMemoryUtilizedMissing";
        private const string PercentageOfCoresUtilizedOutOfRangeValue = "PercentageOfCoresUtilizedOutOfRange";
        private const string PercentageOfMemoryUtilizedOutOfRangeValue = "PercentageOfMemoryUtilizedOutOfRange";
        private const string PercentageOfStorageUtilizedOutOfRangeValue = "PercentageOfStorageUtilizedOutOfRange";

        /// <summary> None. </summary>
        public static AvsVmSuitabilityDetail None { get; } = new AvsVmSuitabilityDetail(NoneValue);
        /// <summary> PercentageOfCoresUtilizedMissing. </summary>
        public static AvsVmSuitabilityDetail PercentageOfCoresUtilizedMissing { get; } = new AvsVmSuitabilityDetail(PercentageOfCoresUtilizedMissingValue);
        /// <summary> PercentageOfMemoryUtilizedMissing. </summary>
        public static AvsVmSuitabilityDetail PercentageOfMemoryUtilizedMissing { get; } = new AvsVmSuitabilityDetail(PercentageOfMemoryUtilizedMissingValue);
        /// <summary> PercentageOfCoresUtilizedOutOfRange. </summary>
        public static AvsVmSuitabilityDetail PercentageOfCoresUtilizedOutOfRange { get; } = new AvsVmSuitabilityDetail(PercentageOfCoresUtilizedOutOfRangeValue);
        /// <summary> PercentageOfMemoryUtilizedOutOfRange. </summary>
        public static AvsVmSuitabilityDetail PercentageOfMemoryUtilizedOutOfRange { get; } = new AvsVmSuitabilityDetail(PercentageOfMemoryUtilizedOutOfRangeValue);
        /// <summary> PercentageOfStorageUtilizedOutOfRange. </summary>
        public static AvsVmSuitabilityDetail PercentageOfStorageUtilizedOutOfRange { get; } = new AvsVmSuitabilityDetail(PercentageOfStorageUtilizedOutOfRangeValue);
        /// <summary> Determines if two <see cref="AvsVmSuitabilityDetail"/> values are the same. </summary>
        public static bool operator ==(AvsVmSuitabilityDetail left, AvsVmSuitabilityDetail right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AvsVmSuitabilityDetail"/> values are not the same. </summary>
        public static bool operator !=(AvsVmSuitabilityDetail left, AvsVmSuitabilityDetail right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AvsVmSuitabilityDetail"/>. </summary>
        public static implicit operator AvsVmSuitabilityDetail(string value) => new AvsVmSuitabilityDetail(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AvsVmSuitabilityDetail other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AvsVmSuitabilityDetail other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
