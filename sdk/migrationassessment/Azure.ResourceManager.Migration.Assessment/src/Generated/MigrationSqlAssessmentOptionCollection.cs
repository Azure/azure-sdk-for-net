// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.Migration.Assessment
{
    /// <summary>
    /// A class representing a collection of <see cref="MigrationSqlAssessmentOptionResource"/> and their operations.
    /// Each <see cref="MigrationSqlAssessmentOptionResource"/> in the collection will belong to the same instance of <see cref="MigrationAssessmentProjectResource"/>.
    /// To get a <see cref="MigrationSqlAssessmentOptionCollection"/> instance call the GetMigrationSqlAssessmentOptions method from an instance of <see cref="MigrationAssessmentProjectResource"/>.
    /// </summary>
    public partial class MigrationSqlAssessmentOptionCollection : ArmCollection, IEnumerable<MigrationSqlAssessmentOptionResource>, IAsyncEnumerable<MigrationSqlAssessmentOptionResource>
    {
        private readonly ClientDiagnostics _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsClientDiagnostics;
        private readonly SqlAssessmentOptionsRestOperations _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MigrationSqlAssessmentOptionCollection"/> class for mocking. </summary>
        protected MigrationSqlAssessmentOptionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MigrationSqlAssessmentOptionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal MigrationSqlAssessmentOptionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migration.Assessment", MigrationSqlAssessmentOptionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(MigrationSqlAssessmentOptionResource.ResourceType, out string migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsApiVersion);
            _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient = new SqlAssessmentOptionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != MigrationAssessmentProjectResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, MigrationAssessmentProjectResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a SqlAssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> Sql assessment options ARM name. Accepted values is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        public virtual async Task<Response<MigrationSqlAssessmentOptionResource>> GetAsync(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentOptionsName, nameof(assessmentOptionsName));

            using var scope = _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentOptionCollection.Get");
            scope.Start();
            try
            {
                var response = await _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, assessmentOptionsName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrationSqlAssessmentOptionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a SqlAssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> Sql assessment options ARM name. Accepted values is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        public virtual Response<MigrationSqlAssessmentOptionResource> Get(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentOptionsName, nameof(assessmentOptionsName));

            using var scope = _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentOptionCollection.Get");
            scope.Start();
            try
            {
                var response = _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, assessmentOptionsName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrationSqlAssessmentOptionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List SqlAssessmentOptions resources by AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_ListByAssessmentProject</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MigrationSqlAssessmentOptionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<MigrationSqlAssessmentOptionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient.CreateListByAssessmentProjectRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient.CreateListByAssessmentProjectNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new MigrationSqlAssessmentOptionResource(Client, MigrationSqlAssessmentOptionData.DeserializeMigrationSqlAssessmentOptionData(e)), _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsClientDiagnostics, Pipeline, "MigrationSqlAssessmentOptionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List SqlAssessmentOptions resources by AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_ListByAssessmentProject</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MigrationSqlAssessmentOptionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<MigrationSqlAssessmentOptionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient.CreateListByAssessmentProjectRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient.CreateListByAssessmentProjectNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new MigrationSqlAssessmentOptionResource(Client, MigrationSqlAssessmentOptionData.DeserializeMigrationSqlAssessmentOptionData(e)), _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsClientDiagnostics, Pipeline, "MigrationSqlAssessmentOptionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> Sql assessment options ARM name. Accepted values is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentOptionsName, nameof(assessmentOptionsName));

            using var scope = _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentOptionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, assessmentOptionsName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> Sql assessment options ARM name. Accepted values is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        public virtual Response<bool> Exists(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentOptionsName, nameof(assessmentOptionsName));

            using var scope = _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentOptionCollection.Exists");
            scope.Start();
            try
            {
                var response = _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, assessmentOptionsName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> Sql assessment options ARM name. Accepted values is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        public virtual async Task<NullableResponse<MigrationSqlAssessmentOptionResource>> GetIfExistsAsync(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentOptionsName, nameof(assessmentOptionsName));

            using var scope = _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentOptionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, assessmentOptionsName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<MigrationSqlAssessmentOptionResource>(response.GetRawResponse());
                return Response.FromValue(new MigrationSqlAssessmentOptionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> Sql assessment options ARM name. Accepted values is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        public virtual NullableResponse<MigrationSqlAssessmentOptionResource> GetIfExists(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentOptionsName, nameof(assessmentOptionsName));

            using var scope = _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentOptionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _migrationSqlAssessmentOptionSqlAssessmentOptionsOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, assessmentOptionsName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<MigrationSqlAssessmentOptionResource>(response.GetRawResponse());
                return Response.FromValue(new MigrationSqlAssessmentOptionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<MigrationSqlAssessmentOptionResource> IEnumerable<MigrationSqlAssessmentOptionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<MigrationSqlAssessmentOptionResource> IAsyncEnumerable<MigrationSqlAssessmentOptionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
