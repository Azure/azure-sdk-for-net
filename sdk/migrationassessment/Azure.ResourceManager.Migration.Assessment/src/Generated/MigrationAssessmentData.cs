// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    /// <summary>
    /// A class representing the MigrationAssessment data model.
    /// Machine assessment resource.
    /// </summary>
    public partial class MigrationAssessmentData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MigrationAssessmentData"/>. </summary>
        public MigrationAssessmentData()
        {
            AssessmentErrorSummary = new ChangeTrackingDictionary<string, int>();
            CostComponents = new ChangeTrackingList<AssessmentCostComponent>();
            AzureDiskTypes = new ChangeTrackingList<AssessmentDiskType>();
            AzureVmFamilies = new ChangeTrackingList<AssessmentVmFamily>();
            DistributionBySupportStatus = new ChangeTrackingDictionary<string, int>();
            DistributionByServicePackInsight = new ChangeTrackingDictionary<string, int>();
            DistributionByOSName = new ChangeTrackingDictionary<string, int>();
            SuitabilitySummary = new ChangeTrackingDictionary<string, int>();
        }

        /// <summary> Initializes a new instance of <see cref="MigrationAssessmentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="assessmentErrorSummary">
        /// Gets or sets the assessment error summary.
        ///             This is the number of
        /// machines affected by each type of error in this assessment.
        /// </param>
        /// <param name="monthlyUltraStorageCost">
        /// Gets or sets the aggregate ultra storage cost for all machines in the
        /// assessment.
        /// </param>
        /// <param name="costComponents"> Gets the collection of cost components. </param>
        /// <param name="eaSubscriptionId"> Gets or sets enterprise agreement subscription id. </param>
        /// <param name="azurePricingTier"> Gets or sets Azure Pricing Tier - Free, Basic, etc. </param>
        /// <param name="azureStorageRedundancy"> Gets or sets the Azure Storage Redundancy. Example: Locally Redundant Storage. </param>
        /// <param name="reservedInstance"> Gets or sets the Azure Reserved Instance - 1-Year, 3-Year. </param>
        /// <param name="azureHybridUseBenefit">
        /// Gets or sets the user configurable setting to display the azure hybrid use
        /// benefit.
        /// </param>
        /// <param name="azureDiskTypes"> Gets or sets the azure storage type. Premium, Standard etc. </param>
        /// <param name="azureVmFamilies"> Gets or sets the Azure VM families. </param>
        /// <param name="distributionBySupportStatus"> Gets the distribution of sqlInstances by support status. </param>
        /// <param name="distributionByServicePackInsight"> Gets the distribution distribution of sqlInstances by service pack insight. </param>
        /// <param name="distributionByOSName"> Gets the distribution by os name. </param>
        /// <param name="monthlyComputeCost"> Gets or sets the aggregate Compute Cost for all machines in the assessment. </param>
        /// <param name="monthlyBandwidthCost"> Gets or sets the aggregate Bandwidth Cost for all machines in the assessment. </param>
        /// <param name="monthlyStorageCost"> Gets or sets the aggregate Storage Cost for all machines in the assessment. </param>
        /// <param name="monthlyPremiumStorageCost">
        /// Gets or sets the aggregate premium storage cost for all machines in the
        /// assessment.
        /// </param>
        /// <param name="monthlyStandardSsdStorageCost">
        /// Gets or sets the aggregate standard SSD storage cost for all the machines in
        /// the assessment.
        /// </param>
        /// <param name="suitabilitySummary">
        /// Gets or sets the Cloud suitability summary for all the machines in the
        /// assessment.
        /// </param>
        /// <param name="numberOfMachines"> Gets or sets the Number of machines part of the assessment. </param>
        /// <param name="vmUptime">
        /// Gets or sets the duration for which the VMs are up in the on-premises
        /// environment.
        /// </param>
        /// <param name="groupType"> Gets the group type for the assessment. </param>
        /// <param name="assessmentType"> Assessment type of the assessment. </param>
        /// <param name="azureLocation"> Azure Location or Azure region where to which the machines will be migrated. </param>
        /// <param name="azureOfferCode"> Azure Offer Code. </param>
        /// <param name="currency"> Currency in which prices should be reported. </param>
        /// <param name="scalingFactor">
        /// Percentage of buffer that user wants on performance metrics when recommending
        /// Azure sizes.
        /// </param>
        /// <param name="percentile">
        /// Percentile of the utilization data values to be considered while assessing
        /// machines.
        /// </param>
        /// <param name="timeRange">
        /// Time Range for which the historic utilization data should be considered for
        /// assessment.
        /// </param>
        /// <param name="perfDataStartOn"> Gets or sets the start time to consider performance data for assessment. </param>
        /// <param name="perfDataEndOn"> Gets or sets the end time to consider performance data for assessment. </param>
        /// <param name="stage"> User configurable setting to display the Stage of Assessment. </param>
        /// <param name="discountPercentage"> Custom discount percentage. </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="pricesQueriedOn"> Last time when rates were queried. </param>
        /// <param name="createdOn"> Date and Time when assessment was created. </param>
        /// <param name="updatedOn"> Date and Time when assessment was last updated. </param>
        /// <param name="status"> Whether assessment is in valid state and all machines have been assessed. </param>
        /// <param name="schemaVersion"> Schema version. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MigrationAssessmentData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, MigrationAssessmentProvisioningState? provisioningState, IReadOnlyDictionary<string, int> assessmentErrorSummary, double? monthlyUltraStorageCost, IReadOnlyList<AssessmentCostComponent> costComponents, string eaSubscriptionId, AssessmentPricingTier? azurePricingTier, AssessmentStorageRedundancy? azureStorageRedundancy, AssessmentReservedInstance? reservedInstance, AssessmentHybridUseBenefit? azureHybridUseBenefit, IList<AssessmentDiskType> azureDiskTypes, IList<AssessmentVmFamily> azureVmFamilies, IReadOnlyDictionary<string, int> distributionBySupportStatus, IReadOnlyDictionary<string, int> distributionByServicePackInsight, IReadOnlyDictionary<string, int> distributionByOSName, double? monthlyComputeCost, double? monthlyBandwidthCost, double? monthlyStorageCost, double? monthlyPremiumStorageCost, double? monthlyStandardSsdStorageCost, IReadOnlyDictionary<string, int> suitabilitySummary, int? numberOfMachines, AssessmentVmUptime vmUptime, MigrationAssessmentGroupType? groupType, MigrationAssessmentType? assessmentType, AzureLocation? azureLocation, AssessmentOfferCode? azureOfferCode, AssessmentCurrency? currency, double? scalingFactor, PercentileOfUtilization? percentile, AssessmentTimeRange? timeRange, DateTimeOffset? perfDataStartOn, DateTimeOffset? perfDataEndOn, MigrationAssessmentStage? stage, double? discountPercentage, AssessmentSizingCriterion? sizingCriterion, double? confidenceRatingInPercentage, DateTimeOffset? pricesQueriedOn, DateTimeOffset? createdOn, DateTimeOffset? updatedOn, MigrationAssessmentStatus? status, string schemaVersion, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            ProvisioningState = provisioningState;
            AssessmentErrorSummary = assessmentErrorSummary;
            MonthlyUltraStorageCost = monthlyUltraStorageCost;
            CostComponents = costComponents;
            EASubscriptionId = eaSubscriptionId;
            AzurePricingTier = azurePricingTier;
            AzureStorageRedundancy = azureStorageRedundancy;
            ReservedInstance = reservedInstance;
            AzureHybridUseBenefit = azureHybridUseBenefit;
            AzureDiskTypes = azureDiskTypes;
            AzureVmFamilies = azureVmFamilies;
            DistributionBySupportStatus = distributionBySupportStatus;
            DistributionByServicePackInsight = distributionByServicePackInsight;
            DistributionByOSName = distributionByOSName;
            MonthlyComputeCost = monthlyComputeCost;
            MonthlyBandwidthCost = monthlyBandwidthCost;
            MonthlyStorageCost = monthlyStorageCost;
            MonthlyPremiumStorageCost = monthlyPremiumStorageCost;
            MonthlyStandardSsdStorageCost = monthlyStandardSsdStorageCost;
            SuitabilitySummary = suitabilitySummary;
            NumberOfMachines = numberOfMachines;
            VmUptime = vmUptime;
            GroupType = groupType;
            AssessmentType = assessmentType;
            AzureLocation = azureLocation;
            AzureOfferCode = azureOfferCode;
            Currency = currency;
            ScalingFactor = scalingFactor;
            Percentile = percentile;
            TimeRange = timeRange;
            PerfDataStartOn = perfDataStartOn;
            PerfDataEndOn = perfDataEndOn;
            Stage = stage;
            DiscountPercentage = discountPercentage;
            SizingCriterion = sizingCriterion;
            ConfidenceRatingInPercentage = confidenceRatingInPercentage;
            PricesQueriedOn = pricesQueriedOn;
            CreatedOn = createdOn;
            UpdatedOn = updatedOn;
            Status = status;
            SchemaVersion = schemaVersion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The status of the last operation. </summary>
        public MigrationAssessmentProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// Gets or sets the assessment error summary.
        ///             This is the number of
        /// machines affected by each type of error in this assessment.
        /// </summary>
        public IReadOnlyDictionary<string, int> AssessmentErrorSummary { get; }
        /// <summary>
        /// Gets or sets the aggregate ultra storage cost for all machines in the
        /// assessment.
        /// </summary>
        public double? MonthlyUltraStorageCost { get; }
        /// <summary> Gets the collection of cost components. </summary>
        public IReadOnlyList<AssessmentCostComponent> CostComponents { get; }
        /// <summary> Gets or sets enterprise agreement subscription id. </summary>
        public string EASubscriptionId { get; set; }
        /// <summary> Gets or sets Azure Pricing Tier - Free, Basic, etc. </summary>
        public AssessmentPricingTier? AzurePricingTier { get; set; }
        /// <summary> Gets or sets the Azure Storage Redundancy. Example: Locally Redundant Storage. </summary>
        public AssessmentStorageRedundancy? AzureStorageRedundancy { get; set; }
        /// <summary> Gets or sets the Azure Reserved Instance - 1-Year, 3-Year. </summary>
        public AssessmentReservedInstance? ReservedInstance { get; set; }
        /// <summary>
        /// Gets or sets the user configurable setting to display the azure hybrid use
        /// benefit.
        /// </summary>
        public AssessmentHybridUseBenefit? AzureHybridUseBenefit { get; set; }
        /// <summary> Gets or sets the azure storage type. Premium, Standard etc. </summary>
        public IList<AssessmentDiskType> AzureDiskTypes { get; }
        /// <summary> Gets or sets the Azure VM families. </summary>
        public IList<AssessmentVmFamily> AzureVmFamilies { get; }
        /// <summary> Gets the distribution of sqlInstances by support status. </summary>
        public IReadOnlyDictionary<string, int> DistributionBySupportStatus { get; }
        /// <summary> Gets the distribution distribution of sqlInstances by service pack insight. </summary>
        public IReadOnlyDictionary<string, int> DistributionByServicePackInsight { get; }
        /// <summary> Gets the distribution by os name. </summary>
        public IReadOnlyDictionary<string, int> DistributionByOSName { get; }
        /// <summary> Gets or sets the aggregate Compute Cost for all machines in the assessment. </summary>
        public double? MonthlyComputeCost { get; }
        /// <summary> Gets or sets the aggregate Bandwidth Cost for all machines in the assessment. </summary>
        public double? MonthlyBandwidthCost { get; }
        /// <summary> Gets or sets the aggregate Storage Cost for all machines in the assessment. </summary>
        public double? MonthlyStorageCost { get; }
        /// <summary>
        /// Gets or sets the aggregate premium storage cost for all machines in the
        /// assessment.
        /// </summary>
        public double? MonthlyPremiumStorageCost { get; }
        /// <summary>
        /// Gets or sets the aggregate standard SSD storage cost for all the machines in
        /// the assessment.
        /// </summary>
        public double? MonthlyStandardSsdStorageCost { get; }
        /// <summary>
        /// Gets or sets the Cloud suitability summary for all the machines in the
        /// assessment.
        /// </summary>
        public IReadOnlyDictionary<string, int> SuitabilitySummary { get; }
        /// <summary> Gets or sets the Number of machines part of the assessment. </summary>
        public int? NumberOfMachines { get; }
        /// <summary>
        /// Gets or sets the duration for which the VMs are up in the on-premises
        /// environment.
        /// </summary>
        public AssessmentVmUptime VmUptime { get; set; }
        /// <summary> Gets the group type for the assessment. </summary>
        public MigrationAssessmentGroupType? GroupType { get; }
        /// <summary> Assessment type of the assessment. </summary>
        public MigrationAssessmentType? AssessmentType { get; }
        /// <summary> Azure Location or Azure region where to which the machines will be migrated. </summary>
        public AzureLocation? AzureLocation { get; set; }
        /// <summary> Azure Offer Code. </summary>
        public AssessmentOfferCode? AzureOfferCode { get; set; }
        /// <summary> Currency in which prices should be reported. </summary>
        public AssessmentCurrency? Currency { get; set; }
        /// <summary>
        /// Percentage of buffer that user wants on performance metrics when recommending
        /// Azure sizes.
        /// </summary>
        public double? ScalingFactor { get; set; }
        /// <summary>
        /// Percentile of the utilization data values to be considered while assessing
        /// machines.
        /// </summary>
        public PercentileOfUtilization? Percentile { get; set; }
        /// <summary>
        /// Time Range for which the historic utilization data should be considered for
        /// assessment.
        /// </summary>
        public AssessmentTimeRange? TimeRange { get; set; }
        /// <summary> Gets or sets the start time to consider performance data for assessment. </summary>
        public DateTimeOffset? PerfDataStartOn { get; set; }
        /// <summary> Gets or sets the end time to consider performance data for assessment. </summary>
        public DateTimeOffset? PerfDataEndOn { get; set; }
        /// <summary> User configurable setting to display the Stage of Assessment. </summary>
        public MigrationAssessmentStage? Stage { get; }
        /// <summary> Custom discount percentage. </summary>
        public double? DiscountPercentage { get; set; }
        /// <summary> Assessment sizing criterion. </summary>
        public AssessmentSizingCriterion? SizingCriterion { get; set; }
        /// <summary> Confidence Rating in Percentage. </summary>
        public double? ConfidenceRatingInPercentage { get; }
        /// <summary> Last time when rates were queried. </summary>
        public DateTimeOffset? PricesQueriedOn { get; }
        /// <summary> Date and Time when assessment was created. </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary> Date and Time when assessment was last updated. </summary>
        public DateTimeOffset? UpdatedOn { get; }
        /// <summary> Whether assessment is in valid state and all machines have been assessed. </summary>
        public MigrationAssessmentStatus? Status { get; }
        /// <summary> Schema version. </summary>
        public string SchemaVersion { get; }
    }
}
