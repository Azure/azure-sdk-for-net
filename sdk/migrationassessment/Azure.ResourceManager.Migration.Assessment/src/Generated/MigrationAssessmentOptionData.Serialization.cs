// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    public partial class MigrationAssessmentOptionData : IUtf8JsonSerializable, IJsonModel<MigrationAssessmentOptionData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MigrationAssessmentOptionData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MigrationAssessmentOptionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessmentOptionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationAssessmentOptionData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsCollectionDefined(VmFamilies))
            {
                writer.WritePropertyName("vmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in VmFamilies)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ReservedInstanceVmFamilies))
            {
                writer.WritePropertyName("reservedInstanceVmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in ReservedInstanceVmFamilies)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ReservedInstanceSupportedLocations))
            {
                writer.WritePropertyName("reservedInstanceSupportedLocations"u8);
                writer.WriteStartArray();
                foreach (var item in ReservedInstanceSupportedLocations)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ReservedInstanceSupportedCurrencies))
            {
                writer.WritePropertyName("reservedInstanceSupportedCurrencies"u8);
                writer.WriteStartArray();
                foreach (var item in ReservedInstanceSupportedCurrencies)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ReservedInstanceSupportedOffers))
            {
                writer.WritePropertyName("reservedInstanceSupportedOffers"u8);
                writer.WriteStartArray();
                foreach (var item in ReservedInstanceSupportedOffers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(UltraDiskVmFamilies))
            {
                writer.WritePropertyName("ultraDiskVmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in UltraDiskVmFamilies)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(PremiumDiskVmFamilies))
            {
                writer.WritePropertyName("premiumDiskVmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in PremiumDiskVmFamilies)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(SavingsPlanVmFamilies))
            {
                writer.WritePropertyName("savingsPlanVmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in SavingsPlanVmFamilies)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(SavingsPlanSupportedLocations))
            {
                writer.WritePropertyName("savingsPlanSupportedLocations"u8);
                writer.WriteStartArray();
                foreach (var item in SavingsPlanSupportedLocations)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        MigrationAssessmentOptionData IJsonModel<MigrationAssessmentOptionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessmentOptionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationAssessmentOptionData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMigrationAssessmentOptionData(document.RootElement, options);
        }

        internal static MigrationAssessmentOptionData DeserializeMigrationAssessmentOptionData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IReadOnlyList<AssessmentVmFamilyConfig> vmFamilies = default;
            IReadOnlyList<string> reservedInstanceVmFamilies = default;
            IReadOnlyList<string> reservedInstanceSupportedLocations = default;
            IReadOnlyList<string> reservedInstanceSupportedCurrencies = default;
            IReadOnlyList<string> reservedInstanceSupportedOffers = default;
            IReadOnlyList<UltraDiskAssessmentConfig> ultraDiskVmFamilies = default;
            IReadOnlyList<string> premiumDiskVmFamilies = default;
            IReadOnlyList<string> savingsPlanVmFamilies = default;
            IReadOnlyList<string> savingsPlanSupportedLocations = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("vmFamilies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AssessmentVmFamilyConfig> array = new List<AssessmentVmFamilyConfig>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AssessmentVmFamilyConfig.DeserializeAssessmentVmFamilyConfig(item, options));
                            }
                            vmFamilies = array;
                            continue;
                        }
                        if (property0.NameEquals("reservedInstanceVmFamilies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            reservedInstanceVmFamilies = array;
                            continue;
                        }
                        if (property0.NameEquals("reservedInstanceSupportedLocations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            reservedInstanceSupportedLocations = array;
                            continue;
                        }
                        if (property0.NameEquals("reservedInstanceSupportedCurrencies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            reservedInstanceSupportedCurrencies = array;
                            continue;
                        }
                        if (property0.NameEquals("reservedInstanceSupportedOffers"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            reservedInstanceSupportedOffers = array;
                            continue;
                        }
                        if (property0.NameEquals("ultraDiskVmFamilies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<UltraDiskAssessmentConfig> array = new List<UltraDiskAssessmentConfig>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(UltraDiskAssessmentConfig.DeserializeUltraDiskAssessmentConfig(item, options));
                            }
                            ultraDiskVmFamilies = array;
                            continue;
                        }
                        if (property0.NameEquals("premiumDiskVmFamilies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            premiumDiskVmFamilies = array;
                            continue;
                        }
                        if (property0.NameEquals("savingsPlanVmFamilies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            savingsPlanVmFamilies = array;
                            continue;
                        }
                        if (property0.NameEquals("savingsPlanSupportedLocations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            savingsPlanSupportedLocations = array;
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MigrationAssessmentOptionData(
                id,
                name,
                type,
                systemData,
                vmFamilies ?? new ChangeTrackingList<AssessmentVmFamilyConfig>(),
                reservedInstanceVmFamilies ?? new ChangeTrackingList<string>(),
                reservedInstanceSupportedLocations ?? new ChangeTrackingList<string>(),
                reservedInstanceSupportedCurrencies ?? new ChangeTrackingList<string>(),
                reservedInstanceSupportedOffers ?? new ChangeTrackingList<string>(),
                ultraDiskVmFamilies ?? new ChangeTrackingList<UltraDiskAssessmentConfig>(),
                premiumDiskVmFamilies ?? new ChangeTrackingList<string>(),
                savingsPlanVmFamilies ?? new ChangeTrackingList<string>(),
                savingsPlanSupportedLocations ?? new ChangeTrackingList<string>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MigrationAssessmentOptionData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessmentOptionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerMigrationAssessmentContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MigrationAssessmentOptionData)} does not support writing '{options.Format}' format.");
            }
        }

        MigrationAssessmentOptionData IPersistableModel<MigrationAssessmentOptionData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessmentOptionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMigrationAssessmentOptionData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MigrationAssessmentOptionData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MigrationAssessmentOptionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
