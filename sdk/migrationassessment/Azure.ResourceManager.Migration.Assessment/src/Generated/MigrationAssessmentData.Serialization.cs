// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    public partial class MigrationAssessmentData : IUtf8JsonSerializable, IJsonModel<MigrationAssessmentData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MigrationAssessmentData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MigrationAssessmentData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessmentData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationAssessmentData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(AssessmentErrorSummary))
            {
                writer.WritePropertyName("assessmentErrorSummary"u8);
                writer.WriteStartObject();
                foreach (var item in AssessmentErrorSummary)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsDefined(MonthlyUltraStorageCost))
            {
                writer.WritePropertyName("monthlyUltraStorageCost"u8);
                writer.WriteNumberValue(MonthlyUltraStorageCost.Value);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(CostComponents))
            {
                writer.WritePropertyName("costComponents"u8);
                writer.WriteStartArray();
                foreach (var item in CostComponents)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(EASubscriptionId))
            {
                writer.WritePropertyName("eaSubscriptionId"u8);
                writer.WriteStringValue(EASubscriptionId);
            }
            if (Optional.IsDefined(AzurePricingTier))
            {
                writer.WritePropertyName("azurePricingTier"u8);
                writer.WriteStringValue(AzurePricingTier.Value.ToString());
            }
            if (Optional.IsDefined(AzureStorageRedundancy))
            {
                writer.WritePropertyName("azureStorageRedundancy"u8);
                writer.WriteStringValue(AzureStorageRedundancy.Value.ToString());
            }
            if (Optional.IsDefined(ReservedInstance))
            {
                writer.WritePropertyName("reservedInstance"u8);
                writer.WriteStringValue(ReservedInstance.Value.ToString());
            }
            if (Optional.IsDefined(AzureHybridUseBenefit))
            {
                writer.WritePropertyName("azureHybridUseBenefit"u8);
                writer.WriteStringValue(AzureHybridUseBenefit.Value.ToString());
            }
            if (Optional.IsCollectionDefined(AzureDiskTypes))
            {
                writer.WritePropertyName("azureDiskTypes"u8);
                writer.WriteStartArray();
                foreach (var item in AzureDiskTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AzureVmFamilies))
            {
                writer.WritePropertyName("azureVmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in AzureVmFamilies)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DistributionBySupportStatus))
            {
                writer.WritePropertyName("distributionBySupportStatus"u8);
                writer.WriteStartObject();
                foreach (var item in DistributionBySupportStatus)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DistributionByServicePackInsight))
            {
                writer.WritePropertyName("distributionByServicePackInsight"u8);
                writer.WriteStartObject();
                foreach (var item in DistributionByServicePackInsight)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DistributionByOSName))
            {
                writer.WritePropertyName("distributionByOsName"u8);
                writer.WriteStartObject();
                foreach (var item in DistributionByOSName)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsDefined(MonthlyComputeCost))
            {
                writer.WritePropertyName("monthlyComputeCost"u8);
                writer.WriteNumberValue(MonthlyComputeCost.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MonthlyBandwidthCost))
            {
                writer.WritePropertyName("monthlyBandwidthCost"u8);
                writer.WriteNumberValue(MonthlyBandwidthCost.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MonthlyStorageCost))
            {
                writer.WritePropertyName("monthlyStorageCost"u8);
                writer.WriteNumberValue(MonthlyStorageCost.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MonthlyPremiumStorageCost))
            {
                writer.WritePropertyName("monthlyPremiumStorageCost"u8);
                writer.WriteNumberValue(MonthlyPremiumStorageCost.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MonthlyStandardSsdStorageCost))
            {
                writer.WritePropertyName("monthlyStandardSsdStorageCost"u8);
                writer.WriteNumberValue(MonthlyStandardSsdStorageCost.Value);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(SuitabilitySummary))
            {
                writer.WritePropertyName("suitabilitySummary"u8);
                writer.WriteStartObject();
                foreach (var item in SuitabilitySummary)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfMachines))
            {
                writer.WritePropertyName("numberOfMachines"u8);
                writer.WriteNumberValue(NumberOfMachines.Value);
            }
            if (Optional.IsDefined(VmUptime))
            {
                writer.WritePropertyName("vmUptime"u8);
                writer.WriteObjectValue(VmUptime, options);
            }
            if (options.Format != "W" && Optional.IsDefined(GroupType))
            {
                writer.WritePropertyName("groupType"u8);
                writer.WriteStringValue(GroupType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AssessmentType))
            {
                writer.WritePropertyName("assessmentType"u8);
                writer.WriteStringValue(AssessmentType.Value.ToString());
            }
            if (Optional.IsDefined(AzureLocation))
            {
                writer.WritePropertyName("azureLocation"u8);
                writer.WriteStringValue(AzureLocation.Value);
            }
            if (Optional.IsDefined(AzureOfferCode))
            {
                writer.WritePropertyName("azureOfferCode"u8);
                writer.WriteStringValue(AzureOfferCode.Value.ToString());
            }
            if (Optional.IsDefined(Currency))
            {
                writer.WritePropertyName("currency"u8);
                writer.WriteStringValue(Currency.Value.ToString());
            }
            if (Optional.IsDefined(ScalingFactor))
            {
                writer.WritePropertyName("scalingFactor"u8);
                writer.WriteNumberValue(ScalingFactor.Value);
            }
            if (Optional.IsDefined(Percentile))
            {
                writer.WritePropertyName("percentile"u8);
                writer.WriteStringValue(Percentile.Value.ToString());
            }
            if (Optional.IsDefined(TimeRange))
            {
                writer.WritePropertyName("timeRange"u8);
                writer.WriteStringValue(TimeRange.Value.ToString());
            }
            if (Optional.IsDefined(PerfDataStartOn))
            {
                writer.WritePropertyName("perfDataStartTime"u8);
                writer.WriteStringValue(PerfDataStartOn.Value, "O");
            }
            if (Optional.IsDefined(PerfDataEndOn))
            {
                writer.WritePropertyName("perfDataEndTime"u8);
                writer.WriteStringValue(PerfDataEndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(Stage))
            {
                writer.WritePropertyName("stage"u8);
                writer.WriteStringValue(Stage.Value.ToString());
            }
            if (Optional.IsDefined(DiscountPercentage))
            {
                writer.WritePropertyName("discountPercentage"u8);
                writer.WriteNumberValue(DiscountPercentage.Value);
            }
            if (Optional.IsDefined(SizingCriterion))
            {
                writer.WritePropertyName("sizingCriterion"u8);
                writer.WriteStringValue(SizingCriterion.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ConfidenceRatingInPercentage))
            {
                writer.WritePropertyName("confidenceRatingInPercentage"u8);
                writer.WriteNumberValue(ConfidenceRatingInPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PricesQueriedOn))
            {
                writer.WritePropertyName("pricesTimestamp"u8);
                writer.WriteStringValue(PricesQueriedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("createdTimestamp"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(UpdatedOn))
            {
                writer.WritePropertyName("updatedTimestamp"u8);
                writer.WriteStringValue(UpdatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SchemaVersion))
            {
                writer.WritePropertyName("schemaVersion"u8);
                writer.WriteStringValue(SchemaVersion);
            }
            writer.WriteEndObject();
        }

        MigrationAssessmentData IJsonModel<MigrationAssessmentData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessmentData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationAssessmentData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMigrationAssessmentData(document.RootElement, options);
        }

        internal static MigrationAssessmentData DeserializeMigrationAssessmentData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            MigrationAssessmentProvisioningState? provisioningState = default;
            IReadOnlyDictionary<string, int> assessmentErrorSummary = default;
            double? monthlyUltraStorageCost = default;
            IReadOnlyList<AssessmentCostComponent> costComponents = default;
            string eaSubscriptionId = default;
            AssessmentPricingTier? azurePricingTier = default;
            AssessmentStorageRedundancy? azureStorageRedundancy = default;
            AssessmentReservedInstance? reservedInstance = default;
            AssessmentHybridUseBenefit? azureHybridUseBenefit = default;
            IList<AssessmentDiskType> azureDiskTypes = default;
            IList<AssessmentVmFamily> azureVmFamilies = default;
            IReadOnlyDictionary<string, int> distributionBySupportStatus = default;
            IReadOnlyDictionary<string, int> distributionByServicePackInsight = default;
            IReadOnlyDictionary<string, int> distributionByOSName = default;
            double? monthlyComputeCost = default;
            double? monthlyBandwidthCost = default;
            double? monthlyStorageCost = default;
            double? monthlyPremiumStorageCost = default;
            double? monthlyStandardSsdStorageCost = default;
            IReadOnlyDictionary<string, int> suitabilitySummary = default;
            int? numberOfMachines = default;
            AssessmentVmUptime vmUptime = default;
            MigrationAssessmentGroupType? groupType = default;
            MigrationAssessmentType? assessmentType = default;
            AzureLocation? azureLocation = default;
            AssessmentOfferCode? azureOfferCode = default;
            AssessmentCurrency? currency = default;
            double? scalingFactor = default;
            PercentileOfUtilization? percentile = default;
            AssessmentTimeRange? timeRange = default;
            DateTimeOffset? perfDataStartTime = default;
            DateTimeOffset? perfDataEndTime = default;
            MigrationAssessmentStage? stage = default;
            double? discountPercentage = default;
            AssessmentSizingCriterion? sizingCriterion = default;
            double? confidenceRatingInPercentage = default;
            DateTimeOffset? pricesTimestamp = default;
            DateTimeOffset? createdTimestamp = default;
            DateTimeOffset? updatedTimestamp = default;
            MigrationAssessmentStatus? status = default;
            string schemaVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new MigrationAssessmentProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("assessmentErrorSummary"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            assessmentErrorSummary = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("monthlyUltraStorageCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyUltraStorageCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("costComponents"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AssessmentCostComponent> array = new List<AssessmentCostComponent>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AssessmentCostComponent.DeserializeAssessmentCostComponent(item, options));
                            }
                            costComponents = array;
                            continue;
                        }
                        if (property0.NameEquals("eaSubscriptionId"u8))
                        {
                            eaSubscriptionId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("azurePricingTier"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azurePricingTier = new AssessmentPricingTier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureStorageRedundancy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureStorageRedundancy = new AssessmentStorageRedundancy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("reservedInstance"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            reservedInstance = new AssessmentReservedInstance(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureHybridUseBenefit"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureHybridUseBenefit = new AssessmentHybridUseBenefit(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureDiskTypes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AssessmentDiskType> array = new List<AssessmentDiskType>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AssessmentDiskType(item.GetString()));
                            }
                            azureDiskTypes = array;
                            continue;
                        }
                        if (property0.NameEquals("azureVmFamilies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AssessmentVmFamily> array = new List<AssessmentVmFamily>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AssessmentVmFamily(item.GetString()));
                            }
                            azureVmFamilies = array;
                            continue;
                        }
                        if (property0.NameEquals("distributionBySupportStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            distributionBySupportStatus = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("distributionByServicePackInsight"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            distributionByServicePackInsight = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("distributionByOsName"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            distributionByOSName = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("monthlyComputeCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyComputeCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("monthlyBandwidthCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyBandwidthCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("monthlyStorageCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyStorageCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("monthlyPremiumStorageCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyPremiumStorageCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("monthlyStandardSsdStorageCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyStandardSsdStorageCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("suitabilitySummary"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            suitabilitySummary = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("numberOfMachines"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfMachines = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("vmUptime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vmUptime = AssessmentVmUptime.DeserializeAssessmentVmUptime(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("groupType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            groupType = new MigrationAssessmentGroupType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("assessmentType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            assessmentType = new MigrationAssessmentType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureLocation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureLocation = new AzureLocation(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureOfferCode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureOfferCode = new AssessmentOfferCode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("currency"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            currency = new AssessmentCurrency(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("scalingFactor"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            scalingFactor = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("percentile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            percentile = new PercentileOfUtilization(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("timeRange"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeRange = new AssessmentTimeRange(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("perfDataStartTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            perfDataStartTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("perfDataEndTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            perfDataEndTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("stage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            stage = new MigrationAssessmentStage(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("discountPercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            discountPercentage = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("sizingCriterion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sizingCriterion = new AssessmentSizingCriterion(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("confidenceRatingInPercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            confidenceRatingInPercentage = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("pricesTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            pricesTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("createdTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("updatedTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            updatedTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            status = new MigrationAssessmentStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("schemaVersion"u8))
                        {
                            schemaVersion = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MigrationAssessmentData(
                id,
                name,
                type,
                systemData,
                provisioningState,
                assessmentErrorSummary ?? new ChangeTrackingDictionary<string, int>(),
                monthlyUltraStorageCost,
                costComponents ?? new ChangeTrackingList<AssessmentCostComponent>(),
                eaSubscriptionId,
                azurePricingTier,
                azureStorageRedundancy,
                reservedInstance,
                azureHybridUseBenefit,
                azureDiskTypes ?? new ChangeTrackingList<AssessmentDiskType>(),
                azureVmFamilies ?? new ChangeTrackingList<AssessmentVmFamily>(),
                distributionBySupportStatus ?? new ChangeTrackingDictionary<string, int>(),
                distributionByServicePackInsight ?? new ChangeTrackingDictionary<string, int>(),
                distributionByOSName ?? new ChangeTrackingDictionary<string, int>(),
                monthlyComputeCost,
                monthlyBandwidthCost,
                monthlyStorageCost,
                monthlyPremiumStorageCost,
                monthlyStandardSsdStorageCost,
                suitabilitySummary ?? new ChangeTrackingDictionary<string, int>(),
                numberOfMachines,
                vmUptime,
                groupType,
                assessmentType,
                azureLocation,
                azureOfferCode,
                currency,
                scalingFactor,
                percentile,
                timeRange,
                perfDataStartTime,
                perfDataEndTime,
                stage,
                discountPercentage,
                sizingCriterion,
                confidenceRatingInPercentage,
                pricesTimestamp,
                createdTimestamp,
                updatedTimestamp,
                status,
                schemaVersion,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MigrationAssessmentData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessmentData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MigrationAssessmentData)} does not support writing '{options.Format}' format.");
            }
        }

        MigrationAssessmentData IPersistableModel<MigrationAssessmentData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessmentData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMigrationAssessmentData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MigrationAssessmentData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MigrationAssessmentData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
