// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    public partial class MigrationAssessedSqlDatabaseV2Data : IUtf8JsonSerializable, IJsonModel<MigrationAssessedSqlDatabaseV2Data>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MigrationAssessedSqlDatabaseV2Data>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MigrationAssessedSqlDatabaseV2Data>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessedSqlDatabaseV2Data>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationAssessedSqlDatabaseV2Data)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(RecommendedAzureSqlTargetType))
            {
                writer.WritePropertyName("recommendedAzureSqlTargetType"u8);
                writer.WriteStringValue(RecommendedAzureSqlTargetType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(RecommendedSuitability))
            {
                writer.WritePropertyName("recommendedSuitability"u8);
                writer.WriteStringValue(RecommendedSuitability.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(BufferCacheSizeInMB))
            {
                writer.WritePropertyName("bufferCacheSizeInMB"u8);
                writer.WriteNumberValue(BufferCacheSizeInMB.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProductSupportStatus))
            {
                writer.WritePropertyName("productSupportStatus"u8);
                writer.WriteObjectValue(ProductSupportStatus, options);
            }
            if (options.Format != "W" && Optional.IsDefined(AzureSqlMISuitabilityDetails))
            {
                writer.WritePropertyName("azureSqlMISuitabilityDetails"u8);
                writer.WriteObjectValue(AzureSqlMISuitabilityDetails, options);
            }
            if (options.Format != "W" && Optional.IsDefined(AzureSqlDBSuitabilityDetails))
            {
                writer.WritePropertyName("azureSqlDBSuitabilityDetails"u8);
                writer.WriteObjectValue(AzureSqlDBSuitabilityDetails, options);
            }
            if (options.Format != "W" && Optional.IsDefined(IsDatabaseHighlyAvailable))
            {
                writer.WritePropertyName("isDatabaseHighlyAvailable"u8);
                writer.WriteBooleanValue(IsDatabaseHighlyAvailable.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LinkedAvailabilityGroupOverview))
            {
                writer.WritePropertyName("linkedAvailabilityGroupOverview"u8);
                writer.WriteObjectValue(LinkedAvailabilityGroupOverview, options);
            }
            if (options.Format != "W" && Optional.IsDefined(MachineArmId))
            {
                writer.WritePropertyName("machineArmId"u8);
                writer.WriteStringValue(MachineArmId);
            }
            if (options.Format != "W" && Optional.IsDefined(AssessedSqlInstanceArmId))
            {
                writer.WritePropertyName("assessedSqlInstanceArmId"u8);
                writer.WriteStringValue(AssessedSqlInstanceArmId);
            }
            if (options.Format != "W" && Optional.IsDefined(MachineName))
            {
                writer.WritePropertyName("machineName"u8);
                writer.WriteStringValue(MachineName);
            }
            if (options.Format != "W" && Optional.IsDefined(InstanceName))
            {
                writer.WritePropertyName("instanceName"u8);
                writer.WriteStringValue(InstanceName);
            }
            if (options.Format != "W" && Optional.IsDefined(DatabaseName))
            {
                writer.WritePropertyName("databaseName"u8);
                writer.WriteStringValue(DatabaseName);
            }
            if (options.Format != "W" && Optional.IsDefined(DatabaseSizeInMB))
            {
                writer.WritePropertyName("databaseSizeInMB"u8);
                writer.WriteNumberValue(DatabaseSizeInMB.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CompatibilityLevel))
            {
                writer.WritePropertyName("compatibilityLevel"u8);
                writer.WriteStringValue(CompatibilityLevel.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SqlDatabaseSdsArmId))
            {
                writer.WritePropertyName("sqlDatabaseSdsArmId"u8);
                writer.WriteStringValue(SqlDatabaseSdsArmId);
            }
            if (options.Format != "W" && Optional.IsDefined(PercentageCoresUtilization))
            {
                writer.WritePropertyName("percentageCoresUtilization"u8);
                writer.WriteNumberValue(PercentageCoresUtilization.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MegabytesPerSecondOfRead))
            {
                writer.WritePropertyName("megabytesPerSecondOfRead"u8);
                writer.WriteNumberValue(MegabytesPerSecondOfRead.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MegabytesPerSecondOfWrite))
            {
                writer.WritePropertyName("megabytesPerSecondOfWrite"u8);
                writer.WriteNumberValue(MegabytesPerSecondOfWrite.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfReadOperationsPerSecond))
            {
                writer.WritePropertyName("numberOfReadOperationsPerSecond"u8);
                writer.WriteNumberValue(NumberOfReadOperationsPerSecond.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfWriteOperationsPerSecond))
            {
                writer.WritePropertyName("numberOfWriteOperationsPerSecond"u8);
                writer.WriteNumberValue(NumberOfWriteOperationsPerSecond.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ConfidenceRatingInPercentage))
            {
                writer.WritePropertyName("confidenceRatingInPercentage"u8);
                writer.WriteNumberValue(ConfidenceRatingInPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SizingCriterion))
            {
                writer.WritePropertyName("sizingCriterion"u8);
                writer.WriteStringValue(SizingCriterion.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("createdTimestamp"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(UpdatedOn))
            {
                writer.WritePropertyName("updatedTimestamp"u8);
                writer.WriteStringValue(UpdatedOn.Value, "O");
            }
            writer.WriteEndObject();
        }

        MigrationAssessedSqlDatabaseV2Data IJsonModel<MigrationAssessedSqlDatabaseV2Data>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessedSqlDatabaseV2Data>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationAssessedSqlDatabaseV2Data)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMigrationAssessedSqlDatabaseV2Data(document.RootElement, options);
        }

        internal static MigrationAssessedSqlDatabaseV2Data DeserializeMigrationAssessedSqlDatabaseV2Data(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            MigrationAssessmentTargetType? recommendedAzureSqlTargetType = default;
            AssessedSqlRecommendedSuitability? recommendedSuitability = default;
            double? bufferCacheSizeInMB = default;
            AssessmentProductSupportStatus productSupportStatus = default;
            SqlAssessmentV2PaasSuitabilityDetails azureSqlMISuitabilityDetails = default;
            SqlAssessmentV2PaasSuitabilityDetails azureSqlDBSuitabilityDetails = default;
            bool? isDatabaseHighlyAvailable = default;
            SqlAvailabilityGroupDataOverview linkedAvailabilityGroupOverview = default;
            ResourceIdentifier machineArmId = default;
            ResourceIdentifier assessedSqlInstanceArmId = default;
            string machineName = default;
            string instanceName = default;
            string databaseName = default;
            double? databaseSizeInMB = default;
            AssessedDatabaseCompatibilityLevel? compatibilityLevel = default;
            ResourceIdentifier sqlDatabaseSdsArmId = default;
            double? percentageCoresUtilization = default;
            double? megabytesPerSecondOfRead = default;
            double? megabytesPerSecondOfWrite = default;
            double? numberOfReadOperationsPerSecond = default;
            double? numberOfWriteOperationsPerSecond = default;
            double? confidenceRatingInPercentage = default;
            AssessmentSizingCriterion? sizingCriterion = default;
            DateTimeOffset? createdTimestamp = default;
            DateTimeOffset? updatedTimestamp = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("recommendedAzureSqlTargetType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedAzureSqlTargetType = new MigrationAssessmentTargetType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("recommendedSuitability"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedSuitability = new AssessedSqlRecommendedSuitability(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("bufferCacheSizeInMB"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bufferCacheSizeInMB = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("productSupportStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            productSupportStatus = AssessmentProductSupportStatus.DeserializeAssessmentProductSupportStatus(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("azureSqlMISuitabilityDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlMISuitabilityDetails = SqlAssessmentV2PaasSuitabilityDetails.DeserializeSqlAssessmentV2PaasSuitabilityDetails(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("azureSqlDBSuitabilityDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlDBSuitabilityDetails = SqlAssessmentV2PaasSuitabilityDetails.DeserializeSqlAssessmentV2PaasSuitabilityDetails(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("isDatabaseHighlyAvailable"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isDatabaseHighlyAvailable = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("linkedAvailabilityGroupOverview"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            linkedAvailabilityGroupOverview = SqlAvailabilityGroupDataOverview.DeserializeSqlAvailabilityGroupDataOverview(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("machineArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            machineArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("assessedSqlInstanceArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            assessedSqlInstanceArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("machineName"u8))
                        {
                            machineName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("instanceName"u8))
                        {
                            instanceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("databaseName"u8))
                        {
                            databaseName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("databaseSizeInMB"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            databaseSizeInMB = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("compatibilityLevel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            compatibilityLevel = new AssessedDatabaseCompatibilityLevel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sqlDatabaseSdsArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sqlDatabaseSdsArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("percentageCoresUtilization"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            percentageCoresUtilization = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("megabytesPerSecondOfRead"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            megabytesPerSecondOfRead = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("megabytesPerSecondOfWrite"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            megabytesPerSecondOfWrite = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("numberOfReadOperationsPerSecond"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfReadOperationsPerSecond = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("numberOfWriteOperationsPerSecond"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfWriteOperationsPerSecond = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("confidenceRatingInPercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            confidenceRatingInPercentage = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("sizingCriterion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sizingCriterion = new AssessmentSizingCriterion(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("createdTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("updatedTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            updatedTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MigrationAssessedSqlDatabaseV2Data(
                id,
                name,
                type,
                systemData,
                recommendedAzureSqlTargetType,
                recommendedSuitability,
                bufferCacheSizeInMB,
                productSupportStatus,
                azureSqlMISuitabilityDetails,
                azureSqlDBSuitabilityDetails,
                isDatabaseHighlyAvailable,
                linkedAvailabilityGroupOverview,
                machineArmId,
                assessedSqlInstanceArmId,
                machineName,
                instanceName,
                databaseName,
                databaseSizeInMB,
                compatibilityLevel,
                sqlDatabaseSdsArmId,
                percentageCoresUtilization,
                megabytesPerSecondOfRead,
                megabytesPerSecondOfWrite,
                numberOfReadOperationsPerSecond,
                numberOfWriteOperationsPerSecond,
                confidenceRatingInPercentage,
                sizingCriterion,
                createdTimestamp,
                updatedTimestamp,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MigrationAssessedSqlDatabaseV2Data>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessedSqlDatabaseV2Data>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MigrationAssessedSqlDatabaseV2Data)} does not support writing '{options.Format}' format.");
            }
        }

        MigrationAssessedSqlDatabaseV2Data IPersistableModel<MigrationAssessedSqlDatabaseV2Data>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAssessedSqlDatabaseV2Data>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMigrationAssessedSqlDatabaseV2Data(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MigrationAssessedSqlDatabaseV2Data)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MigrationAssessedSqlDatabaseV2Data>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
