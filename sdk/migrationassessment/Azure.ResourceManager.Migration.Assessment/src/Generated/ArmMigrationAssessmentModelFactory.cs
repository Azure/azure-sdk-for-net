// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmMigrationAssessmentModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentProjectData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="createOn"> Time when this project was created. Date-Time represented in ISO-8601 format. </param>
        /// <param name="updatedOn">
        /// Time when this project was last updated. Date-Time represented in ISO-8601
        /// format.
        /// </param>
        /// <param name="serviceEndpoint"> Endpoint at which the collector agent can call agent REST API. </param>
        /// <param name="assessmentSolutionId"> Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects. </param>
        /// <param name="projectStatus"> Assessment project status. </param>
        /// <param name="customerWorkspaceId"> The ARM id of service map workspace created by customer. </param>
        /// <param name="customerWorkspaceLocation"> Location of service map workspace created by customer. </param>
        /// <param name="publicNetworkAccess">
        /// This value can be set to 'enabled' to avoid breaking changes on existing
        /// customer resources and templates. If set to 'disabled', traffic over public
        /// interface is not allowed, and private endpoint connections would be the
        /// exclusive access method.
        /// </param>
        /// <param name="privateEndpointConnections"> The list of private endpoint connections to the project. </param>
        /// <param name="customerStorageAccountArmId">
        /// The ARM id of the storage account used for interactions when public access is
        /// disabled.
        /// </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentProjectData"/> instance for mocking. </returns>
        public static MigrationAssessmentProjectData MigrationAssessmentProjectData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, MigrationAssessmentProvisioningState? provisioningState = null, DateTimeOffset? createOn = null, DateTimeOffset? updatedOn = null, string serviceEndpoint = null, ResourceIdentifier assessmentSolutionId = null, AssessmentProjectStatus? projectStatus = null, ResourceIdentifier customerWorkspaceId = null, string customerWorkspaceLocation = null, string publicNetworkAccess = null, IEnumerable<MigrationAssessmentPrivateEndpointConnectionData> privateEndpointConnections = null, ResourceIdentifier customerStorageAccountArmId = null)
        {
            tags ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<MigrationAssessmentPrivateEndpointConnectionData>();

            return new MigrationAssessmentProjectData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                provisioningState,
                createOn,
                updatedOn,
                serviceEndpoint,
                assessmentSolutionId,
                projectStatus,
                customerWorkspaceId,
                customerWorkspaceLocation,
                publicNetworkAccess,
                privateEndpointConnections?.ToList(),
                customerStorageAccountArmId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentPrivateEndpointConnectionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupIds"> The group ids for the private endpoint resource. </param>
        /// <param name="privateEndpointId"> The private endpoint resource. </param>
        /// <param name="connectionState"> A collection of information about the state of the connection between service consumer and provider. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection resource. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static MigrationAssessmentPrivateEndpointConnectionData MigrationAssessmentPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<string> groupIds = null, ResourceIdentifier privateEndpointId = null, MigrationAssessmentPrivateLinkServiceConnectionState connectionState = null, MigrationAssessmentPrivateEndpointConnectionProvisioningState? provisioningState = null)
        {
            groupIds ??= new List<string>();

            return new MigrationAssessmentPrivateEndpointConnectionData(
                id,
                name,
                resourceType,
                systemData,
                groupIds?.ToList(),
                privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null,
                connectionState,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentOptionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="vmFamilies">
        /// Dictionary of VM families grouped by vm family name describing the targeted
        /// azure locations of VM family and the category of the family.
        /// </param>
        /// <param name="reservedInstanceVmFamilies"> List of supported VM Families. </param>
        /// <param name="reservedInstanceSupportedLocations"> List of supported Azure regions for reserved instances. </param>
        /// <param name="reservedInstanceSupportedCurrencies"> List of supported currencies for reserved instances. </param>
        /// <param name="reservedInstanceSupportedOffers"> List of supported Azure offer codes for reserved instances. </param>
        /// <param name="ultraDiskVmFamilies"> Ultra disk related assessment options. </param>
        /// <param name="premiumDiskVmFamilies"> List of VM Families that support premium disks for assessments. </param>
        /// <param name="savingsPlanVmFamilies"> List of VM Families that support Savings plan offer for assessments. </param>
        /// <param name="savingsPlanSupportedLocations"> List of Azure locations that support Savings plan offer for assessments. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentOptionData"/> instance for mocking. </returns>
        public static MigrationAssessmentOptionData MigrationAssessmentOptionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<AssessmentVmFamilyConfig> vmFamilies = null, IEnumerable<string> reservedInstanceVmFamilies = null, IEnumerable<string> reservedInstanceSupportedLocations = null, IEnumerable<string> reservedInstanceSupportedCurrencies = null, IEnumerable<string> reservedInstanceSupportedOffers = null, IEnumerable<UltraDiskAssessmentConfig> ultraDiskVmFamilies = null, IEnumerable<string> premiumDiskVmFamilies = null, IEnumerable<string> savingsPlanVmFamilies = null, IEnumerable<string> savingsPlanSupportedLocations = null)
        {
            vmFamilies ??= new List<AssessmentVmFamilyConfig>();
            reservedInstanceVmFamilies ??= new List<string>();
            reservedInstanceSupportedLocations ??= new List<string>();
            reservedInstanceSupportedCurrencies ??= new List<string>();
            reservedInstanceSupportedOffers ??= new List<string>();
            ultraDiskVmFamilies ??= new List<UltraDiskAssessmentConfig>();
            premiumDiskVmFamilies ??= new List<string>();
            savingsPlanVmFamilies ??= new List<string>();
            savingsPlanSupportedLocations ??= new List<string>();

            return new MigrationAssessmentOptionData(
                id,
                name,
                resourceType,
                systemData,
                vmFamilies?.ToList(),
                reservedInstanceVmFamilies?.ToList(),
                reservedInstanceSupportedLocations?.ToList(),
                reservedInstanceSupportedCurrencies?.ToList(),
                reservedInstanceSupportedOffers?.ToList(),
                ultraDiskVmFamilies?.ToList(),
                premiumDiskVmFamilies?.ToList(),
                savingsPlanVmFamilies?.ToList(),
                savingsPlanSupportedLocations?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentVmFamilyConfig"/>. </summary>
        /// <param name="familyName"> Name of the VM family. </param>
        /// <param name="targetLocations"> List of Azure regions. </param>
        /// <param name="category"> Category of the VM family. </param>
        /// <returns> A new <see cref="Models.AssessmentVmFamilyConfig"/> instance for mocking. </returns>
        public static AssessmentVmFamilyConfig AssessmentVmFamilyConfig(string familyName = null, IEnumerable<string> targetLocations = null, IEnumerable<string> category = null)
        {
            targetLocations ??= new List<string>();
            category ??= new List<string>();

            return new AssessmentVmFamilyConfig(familyName, targetLocations?.ToList(), category?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UltraDiskAssessmentConfig"/>. </summary>
        /// <param name="familyName"> Family name. </param>
        /// <param name="targetLocations"> List of locations where ultra disk is supported for this VMfamily. </param>
        /// <returns> A new <see cref="Models.UltraDiskAssessmentConfig"/> instance for mocking. </returns>
        public static UltraDiskAssessmentConfig UltraDiskAssessmentConfig(string familyName = null, IEnumerable<string> targetLocations = null)
        {
            targetLocations ??= new List<string>();

            return new UltraDiskAssessmentConfig(familyName, targetLocations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAvsAssessmentOptionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="avsNodes"> AVS SKU Nodes. </param>
        /// <param name="failuresToTolerateAndRaidLevelValues"> FTT and Raid level values. </param>
        /// <param name="reservedInstanceAvsNodes"> List of AVS nodes for RI. </param>
        /// <param name="reservedInstanceSupportedLocations"> List of supported Azure regions for reserved instances. </param>
        /// <param name="reservedInstanceSupportedCurrencies"> List of supported currencies for reserved instances. </param>
        /// <param name="reservedInstanceSupportedOffers"> List of supported Azure offer codes for reserved instances. </param>
        /// <returns> A new <see cref="Assessment.MigrationAvsAssessmentOptionData"/> instance for mocking. </returns>
        public static MigrationAvsAssessmentOptionData MigrationAvsAssessmentOptionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<AssessmentAvsSkuConfig> avsNodes = null, IEnumerable<FttAndRaidLevel> failuresToTolerateAndRaidLevelValues = null, IEnumerable<AssessmentAvsNodeType> reservedInstanceAvsNodes = null, IEnumerable<AzureLocation> reservedInstanceSupportedLocations = null, IEnumerable<AssessmentCurrency> reservedInstanceSupportedCurrencies = null, IEnumerable<AssessmentOfferCode> reservedInstanceSupportedOffers = null)
        {
            avsNodes ??= new List<AssessmentAvsSkuConfig>();
            failuresToTolerateAndRaidLevelValues ??= new List<FttAndRaidLevel>();
            reservedInstanceAvsNodes ??= new List<AssessmentAvsNodeType>();
            reservedInstanceSupportedLocations ??= new List<AzureLocation>();
            reservedInstanceSupportedCurrencies ??= new List<AssessmentCurrency>();
            reservedInstanceSupportedOffers ??= new List<AssessmentOfferCode>();

            return new MigrationAvsAssessmentOptionData(
                id,
                name,
                resourceType,
                systemData,
                avsNodes?.ToList(),
                failuresToTolerateAndRaidLevelValues?.ToList(),
                reservedInstanceAvsNodes?.ToList(),
                reservedInstanceSupportedLocations?.ToList(),
                reservedInstanceSupportedCurrencies?.ToList(),
                reservedInstanceSupportedOffers?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentGroupData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="groupStatus"> Whether the group has been created and is valid. </param>
        /// <param name="machineCount"> Number of machines part of this group. </param>
        /// <param name="assessments"> List of References to Assessments created on this group. </param>
        /// <param name="supportedAssessmentTypes"> List of assessment types supported on this group. </param>
        /// <param name="areAssessmentsRunning"> If the assessments are in running state. </param>
        /// <param name="createdOn"> Time when this group was created. Date-Time represented in ISO-8601 format. </param>
        /// <param name="updatedOn"> Time when this group was last updated. Date-Time represented in ISO-8601 format. </param>
        /// <param name="groupType"> The type of group. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentGroupData"/> instance for mocking. </returns>
        public static MigrationAssessmentGroupData MigrationAssessmentGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationAssessmentProvisioningState? provisioningState = null, MigrationAssessmentGroupStatus? groupStatus = null, int? machineCount = null, IEnumerable<string> assessments = null, IEnumerable<MigrationAssessmentType> supportedAssessmentTypes = null, bool? areAssessmentsRunning = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, MigrationAssessmentGroupType? groupType = null)
        {
            assessments ??= new List<string>();
            supportedAssessmentTypes ??= new List<MigrationAssessmentType>();

            return new MigrationAssessmentGroupData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                groupStatus,
                machineCount,
                assessments?.ToList(),
                supportedAssessmentTypes?.ToList(),
                areAssessmentsRunning,
                createdOn,
                updatedOn,
                groupType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="assessmentErrorSummary">
        /// Gets or sets the assessment error summary.
        ///             This is the number of
        /// machines affected by each type of error in this assessment.
        /// </param>
        /// <param name="monthlyUltraStorageCost">
        /// Gets or sets the aggregate ultra storage cost for all machines in the
        /// assessment.
        /// </param>
        /// <param name="costComponents"> Gets the collection of cost components. </param>
        /// <param name="eaSubscriptionId"> Gets or sets enterprise agreement subscription id. </param>
        /// <param name="azurePricingTier"> Gets or sets Azure Pricing Tier - Free, Basic, etc. </param>
        /// <param name="azureStorageRedundancy"> Gets or sets the Azure Storage Redundancy. Example: Locally Redundant Storage. </param>
        /// <param name="reservedInstance"> Gets or sets the Azure Reserved Instance - 1-Year, 3-Year. </param>
        /// <param name="azureHybridUseBenefit">
        /// Gets or sets the user configurable setting to display the azure hybrid use
        /// benefit.
        /// </param>
        /// <param name="azureDiskTypes"> Gets or sets the azure storage type. Premium, Standard etc. </param>
        /// <param name="azureVmFamilies"> Gets or sets the Azure VM families. </param>
        /// <param name="distributionBySupportStatus"> Gets the distribution of sqlInstances by support status. </param>
        /// <param name="distributionByServicePackInsight"> Gets the distribution distribution of sqlInstances by service pack insight. </param>
        /// <param name="distributionByOSName"> Gets the distribution by os name. </param>
        /// <param name="monthlyComputeCost"> Gets or sets the aggregate Compute Cost for all machines in the assessment. </param>
        /// <param name="monthlyBandwidthCost"> Gets or sets the aggregate Bandwidth Cost for all machines in the assessment. </param>
        /// <param name="monthlyStorageCost"> Gets or sets the aggregate Storage Cost for all machines in the assessment. </param>
        /// <param name="monthlyPremiumStorageCost">
        /// Gets or sets the aggregate premium storage cost for all machines in the
        /// assessment.
        /// </param>
        /// <param name="monthlyStandardSsdStorageCost">
        /// Gets or sets the aggregate standard SSD storage cost for all the machines in
        /// the assessment.
        /// </param>
        /// <param name="suitabilitySummary">
        /// Gets or sets the Cloud suitability summary for all the machines in the
        /// assessment.
        /// </param>
        /// <param name="numberOfMachines"> Gets or sets the Number of machines part of the assessment. </param>
        /// <param name="vmUptime">
        /// Gets or sets the duration for which the VMs are up in the on-premises
        /// environment.
        /// </param>
        /// <param name="groupType"> Gets the group type for the assessment. </param>
        /// <param name="assessmentType"> Assessment type of the assessment. </param>
        /// <param name="azureLocation"> Azure Location or Azure region where to which the machines will be migrated. </param>
        /// <param name="azureOfferCode"> Azure Offer Code. </param>
        /// <param name="currency"> Currency in which prices should be reported. </param>
        /// <param name="scalingFactor">
        /// Percentage of buffer that user wants on performance metrics when recommending
        /// Azure sizes.
        /// </param>
        /// <param name="percentile">
        /// Percentile of the utilization data values to be considered while assessing
        /// machines.
        /// </param>
        /// <param name="timeRange">
        /// Time Range for which the historic utilization data should be considered for
        /// assessment.
        /// </param>
        /// <param name="perfDataStartOn"> Gets or sets the start time to consider performance data for assessment. </param>
        /// <param name="perfDataEndOn"> Gets or sets the end time to consider performance data for assessment. </param>
        /// <param name="stage"> User configurable setting to display the Stage of Assessment. </param>
        /// <param name="discountPercentage"> Custom discount percentage. </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="pricesQueriedOn"> Last time when rates were queried. </param>
        /// <param name="createdOn"> Date and Time when assessment was created. </param>
        /// <param name="updatedOn"> Date and Time when assessment was last updated. </param>
        /// <param name="status"> Whether assessment is in valid state and all machines have been assessed. </param>
        /// <param name="schemaVersion"> Schema version. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentData"/> instance for mocking. </returns>
        public static MigrationAssessmentData MigrationAssessmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationAssessmentProvisioningState? provisioningState = null, IReadOnlyDictionary<string, int> assessmentErrorSummary = null, double? monthlyUltraStorageCost = null, IEnumerable<AssessmentCostComponent> costComponents = null, string eaSubscriptionId = null, AssessmentPricingTier? azurePricingTier = null, AssessmentStorageRedundancy? azureStorageRedundancy = null, AssessmentReservedInstance? reservedInstance = null, AssessmentHybridUseBenefit? azureHybridUseBenefit = null, IEnumerable<AssessmentDiskType> azureDiskTypes = null, IEnumerable<AssessmentVmFamily> azureVmFamilies = null, IReadOnlyDictionary<string, int> distributionBySupportStatus = null, IReadOnlyDictionary<string, int> distributionByServicePackInsight = null, IReadOnlyDictionary<string, int> distributionByOSName = null, double? monthlyComputeCost = null, double? monthlyBandwidthCost = null, double? monthlyStorageCost = null, double? monthlyPremiumStorageCost = null, double? monthlyStandardSsdStorageCost = null, IReadOnlyDictionary<string, int> suitabilitySummary = null, int? numberOfMachines = null, AssessmentVmUptime vmUptime = null, MigrationAssessmentGroupType? groupType = null, MigrationAssessmentType? assessmentType = null, AzureLocation? azureLocation = null, AssessmentOfferCode? azureOfferCode = null, AssessmentCurrency? currency = null, double? scalingFactor = null, PercentileOfUtilization? percentile = null, AssessmentTimeRange? timeRange = null, DateTimeOffset? perfDataStartOn = null, DateTimeOffset? perfDataEndOn = null, MigrationAssessmentStage? stage = null, double? discountPercentage = null, AssessmentSizingCriterion? sizingCriterion = null, double? confidenceRatingInPercentage = null, DateTimeOffset? pricesQueriedOn = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, MigrationAssessmentStatus? status = null, string schemaVersion = null)
        {
            assessmentErrorSummary ??= new Dictionary<string, int>();
            costComponents ??= new List<AssessmentCostComponent>();
            azureDiskTypes ??= new List<AssessmentDiskType>();
            azureVmFamilies ??= new List<AssessmentVmFamily>();
            distributionBySupportStatus ??= new Dictionary<string, int>();
            distributionByServicePackInsight ??= new Dictionary<string, int>();
            distributionByOSName ??= new Dictionary<string, int>();
            suitabilitySummary ??= new Dictionary<string, int>();

            return new MigrationAssessmentData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                assessmentErrorSummary,
                monthlyUltraStorageCost,
                costComponents?.ToList(),
                eaSubscriptionId,
                azurePricingTier,
                azureStorageRedundancy,
                reservedInstance,
                azureHybridUseBenefit,
                azureDiskTypes?.ToList(),
                azureVmFamilies?.ToList(),
                distributionBySupportStatus,
                distributionByServicePackInsight,
                distributionByOSName,
                monthlyComputeCost,
                monthlyBandwidthCost,
                monthlyStorageCost,
                monthlyPremiumStorageCost,
                monthlyStandardSsdStorageCost,
                suitabilitySummary,
                numberOfMachines,
                vmUptime,
                groupType,
                assessmentType,
                azureLocation,
                azureOfferCode,
                currency,
                scalingFactor,
                percentile,
                timeRange,
                perfDataStartOn,
                perfDataEndOn,
                stage,
                discountPercentage,
                sizingCriterion,
                confidenceRatingInPercentage,
                pricesQueriedOn,
                createdOn,
                updatedOn,
                status,
                schemaVersion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentCostComponent"/>. </summary>
        /// <param name="name"> Gets the name of the component. </param>
        /// <param name="value"> The value of the component. </param>
        /// <param name="description"> The textual description of the component. </param>
        /// <returns> A new <see cref="Models.AssessmentCostComponent"/> instance for mocking. </returns>
        public static AssessmentCostComponent AssessmentCostComponent(AssessmentCostComponentName? name = null, double? value = null, string description = null)
        {
            return new AssessmentCostComponent(name, value, description, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessedMachineData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="errors"> List of errors for this machine. </param>
        /// <param name="disks"> Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object. </param>
        /// <param name="monthlyUltraStorageCost"> Monthly ultra storage cost. </param>
        /// <param name="hostProcessor"> Gets or sets the processor details of the host. </param>
        /// <param name="costComponents"> Gets or sets the collection of cost components. </param>
        /// <param name="productSupportStatus"> Gets the product support status related details. </param>
        /// <param name="monthlyBandwidthCost"> Monthly networking cost. </param>
        /// <param name="monthlyStorageCost"> Monthly storage cost. </param>
        /// <param name="monthlyPremiumStorageCost"> Monthly premium storage cost. </param>
        /// <param name="monthlyStandardSsdStorageCost"> Monthly standard SSD storage cost. </param>
        /// <param name="networkAdapters">
        /// List of Network Adapters that were assessed as part of this machine's
        /// assessment.
        /// </param>
        /// <param name="recommendedSize"> Recommended Azure Size for the machine. </param>
        /// <param name="numberOfCoresForRecommendedSize"> Number of cores for recommended size. Read Only. </param>
        /// <param name="megabytesOfMemoryForRecommendedSize"> Megabytes of memory for recommended size. Read Only. </param>
        /// <param name="monthlyComputeCostForRecommendedSize"> Monthly Compute cost calculated for Recommended size, for a 31-day month. </param>
        /// <param name="suitabilityExplanation"> Gets the explanation if machine is not suitable for cloud. </param>
        /// <param name="suitabilityDetail"> Gets the details if machine is not suitable for cloud. </param>
        /// <param name="typePropertiesType"> Assessed machine type. </param>
        /// <param name="bootType"> Boot type of machine discovered in private data center. </param>
        /// <param name="operatingSystemType"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemName"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemVersion"> Operating system version as reported by datacenter management solution. </param>
        /// <param name="operatingSystemArchitecture"> Operating system architecture as reported by datacenter management solution. </param>
        /// <param name="createdOn"> When was machine first created. </param>
        /// <param name="updatedOn"> When was machine last updated. </param>
        /// <param name="displayName"> Display Name of the Machine. </param>
        /// <param name="description"> Description for the machine. </param>
        /// <param name="datacenterMachineArmId"> Data center machine ARM id. </param>
        /// <param name="datacenterManagementServerArmId"> Data center management server ARM id. </param>
        /// <param name="datacenterManagementServerName"> Data center management server name. </param>
        /// <param name="megabytesOfMemory"> Megabytes of memory found allocated for the machine in private data center. </param>
        /// <param name="numberOfCores"> Number of CPU cores found on the machine. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="percentageCoresUtilization">
        /// Percentile of Percentage of Cores Utilized noted during time period T.
        ///
        ///    Here N and T are settings on Assessment.
        /// </param>
        /// <param name="percentageMemoryUtilization">
        /// Percentile of Percentage of Memory Utilized noted during time period T.
        ///
        ///     Here N and T are settings on Assessment.
        /// </param>
        /// <param name="suitability">
        /// Gets a value indicating whether machine is suitable for the cloud platform
        /// selected.
        /// </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessedMachineData"/> instance for mocking. </returns>
        public static MigrationAssessedMachineData MigrationAssessedMachineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<MigrationAssessmentError> errors = null, IReadOnlyDictionary<string, MigrationAssessedDisk> disks = null, double? monthlyUltraStorageCost = null, AssessedMachineProcessorInfo hostProcessor = null, IEnumerable<AssessmentCostComponent> costComponents = null, AssessmentProductSupportStatus productSupportStatus = null, double? monthlyBandwidthCost = null, double? monthlyStorageCost = null, double? monthlyPremiumStorageCost = null, double? monthlyStandardSsdStorageCost = null, IReadOnlyDictionary<string, AssessedNetworkAdapter> networkAdapters = null, AssessmentVmSize? recommendedSize = null, int? numberOfCoresForRecommendedSize = null, double? megabytesOfMemoryForRecommendedSize = null, double? monthlyComputeCostForRecommendedSize = null, AssessmentVmSuitabilityExplanation? suitabilityExplanation = null, AssessmentVmSuitabilityDetail? suitabilityDetail = null, MigrationAssessedMachineType? typePropertiesType = null, AssessedMachineBootType? bootType = null, string operatingSystemType = null, string operatingSystemName = null, string operatingSystemVersion = null, GuestOperatingSystemArchitecture? operatingSystemArchitecture = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, string displayName = null, string description = null, ResourceIdentifier datacenterMachineArmId = null, ResourceIdentifier datacenterManagementServerArmId = null, string datacenterManagementServerName = null, double? megabytesOfMemory = null, int? numberOfCores = null, double? confidenceRatingInPercentage = null, double? percentageCoresUtilization = null, double? percentageMemoryUtilization = null, MigrationAssessmentCloudSuitability? suitability = null)
        {
            errors ??= new List<MigrationAssessmentError>();
            disks ??= new Dictionary<string, MigrationAssessedDisk>();
            costComponents ??= new List<AssessmentCostComponent>();
            networkAdapters ??= new Dictionary<string, AssessedNetworkAdapter>();

            return new MigrationAssessedMachineData(
                id,
                name,
                resourceType,
                systemData,
                errors?.ToList(),
                disks,
                monthlyUltraStorageCost,
                hostProcessor,
                costComponents?.ToList(),
                productSupportStatus,
                monthlyBandwidthCost,
                monthlyStorageCost,
                monthlyPremiumStorageCost,
                monthlyStandardSsdStorageCost,
                networkAdapters,
                recommendedSize,
                numberOfCoresForRecommendedSize,
                megabytesOfMemoryForRecommendedSize,
                monthlyComputeCostForRecommendedSize,
                suitabilityExplanation,
                suitabilityDetail,
                typePropertiesType,
                bootType,
                operatingSystemType,
                operatingSystemName,
                operatingSystemVersion,
                operatingSystemArchitecture,
                createdOn,
                updatedOn,
                displayName,
                description,
                datacenterMachineArmId,
                datacenterManagementServerArmId,
                datacenterManagementServerName,
                megabytesOfMemory,
                numberOfCores,
                confidenceRatingInPercentage,
                percentageCoresUtilization,
                percentageMemoryUtilization,
                suitability,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MigrationAssessmentError"/>. </summary>
        /// <param name="id"> Gets the error ID. </param>
        /// <param name="code"> Gets the error code. </param>
        /// <param name="runAsAccountId"> Gets the Run as account ID. </param>
        /// <param name="applianceName"> Gets the Appliance name. </param>
        /// <param name="message"> Gets the error message. </param>
        /// <param name="summaryMessage"> Gets the error summary message. </param>
        /// <param name="agentScenario"> Gets the agent scenario where this error occurred. </param>
        /// <param name="possibleCauses"> Gets the error possible causes. </param>
        /// <param name="recommendedAction"> Gets the recommended action for the error. </param>
        /// <param name="severity"> Gets the error severity. </param>
        /// <param name="messageParameters"> Gets the error message parameters. </param>
        /// <param name="updatedOn"> Gets the time stamp when the error was updated. </param>
        /// <param name="impactedAssessmentType"> Gets the type of assessment impacted by this error. </param>
        /// <returns> A new <see cref="Models.MigrationAssessmentError"/> instance for mocking. </returns>
        public static MigrationAssessmentError MigrationAssessmentError(int? id = null, string code = null, string runAsAccountId = null, string applianceName = null, string message = null, string summaryMessage = null, string agentScenario = null, string possibleCauses = null, string recommendedAction = null, string severity = null, IReadOnlyDictionary<string, string> messageParameters = null, DateTimeOffset? updatedOn = null, string impactedAssessmentType = null)
        {
            messageParameters ??= new Dictionary<string, string>();

            return new MigrationAssessmentError(
                id,
                code,
                runAsAccountId,
                applianceName,
                message,
                summaryMessage,
                agentScenario,
                possibleCauses,
                recommendedAction,
                severity,
                messageParameters,
                updatedOn,
                impactedAssessmentType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MigrationAssessedDisk"/>. </summary>
        /// <param name="suitability"> Gets the suitability. </param>
        /// <param name="suitabilityExplanation"> Gets the suitability explanation. </param>
        /// <param name="suitabilityDetail"> Gets the suitability detail. </param>
        /// <param name="recommendedDiskSize"> Gets the recommended disk size. </param>
        /// <param name="recommendedDiskType"> Gets the recommended disk type. </param>
        /// <param name="gigabytesForRecommendedDiskSize"> Gets the recommended disk size. </param>
        /// <param name="recommendDiskThroughputInMbps"> Gets the recommended disk throughput. </param>
        /// <param name="recommendedDiskIops"> Gets the recommended disk iops. </param>
        /// <param name="monthlyStorageCost"> Gets the monthly storage cost. </param>
        /// <param name="name"> Gets the name. </param>
        /// <param name="displayName"> Gets the machine display name. </param>
        /// <param name="gigabytesProvisioned"> Gets the gigabytes provisioned. </param>
        /// <param name="megabytesPerSecondOfRead"> Gets the megabytes per second of read. </param>
        /// <param name="megabytesPerSecondOfWrite"> Gets the megabytes per second of write. </param>
        /// <param name="numberOfReadOperationsPerSecond"> Gets the number of read operations per second. </param>
        /// <param name="numberOfWriteOperationsPerSecond"> Gets the number of write operations per second. </param>
        /// <returns> A new <see cref="Models.MigrationAssessedDisk"/> instance for mocking. </returns>
        public static MigrationAssessedDisk MigrationAssessedDisk(MigrationAssessmentCloudSuitability? suitability = null, AssessmentSuitabilityExplanation? suitabilityExplanation = null, AssessmentDiskSuitabilityDetail? suitabilityDetail = null, AssessmentDiskSize? recommendedDiskSize = null, AssessmentDiskType? recommendedDiskType = null, int? gigabytesForRecommendedDiskSize = null, double? recommendDiskThroughputInMbps = null, double? recommendedDiskIops = null, double? monthlyStorageCost = null, string name = null, string displayName = null, double? gigabytesProvisioned = null, double? megabytesPerSecondOfRead = null, double? megabytesPerSecondOfWrite = null, double? numberOfReadOperationsPerSecond = null, double? numberOfWriteOperationsPerSecond = null)
        {
            return new MigrationAssessedDisk(
                suitability,
                suitabilityExplanation,
                suitabilityDetail,
                recommendedDiskSize,
                recommendedDiskType,
                gigabytesForRecommendedDiskSize,
                recommendDiskThroughputInMbps,
                recommendedDiskIops,
                monthlyStorageCost,
                name,
                displayName,
                gigabytesProvisioned,
                megabytesPerSecondOfRead,
                megabytesPerSecondOfWrite,
                numberOfReadOperationsPerSecond,
                numberOfWriteOperationsPerSecond,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentProductSupportStatus"/>. </summary>
        /// <param name="currentVersion"> Gets or sets current version of ServicePack. </param>
        /// <param name="servicePackStatus"> Gets or sets ServicePack of the product. </param>
        /// <param name="esuStatus"> Gets or sets the Extended Security Update ESU status. </param>
        /// <param name="supportStatus"> Gets or sets the support status of the product. </param>
        /// <param name="eta"> Gets or sets the ETA. </param>
        /// <param name="currentEsuYear"> Gets or sets the current ESU support year. </param>
        /// <param name="mainstreamEndOn"> Gets or sets the main stream end date of the product. </param>
        /// <param name="extendedSupportEndOn"> Gets or sets the extended support end date of the product. </param>
        /// <param name="extendedSecurityUpdateYear1EndOn"> Gets or sets the extended security update year 1 end date of the product. </param>
        /// <param name="extendedSecurityUpdateYear2EndOn"> Gets or sets the extended security update year 2 end date of the product. </param>
        /// <param name="extendedSecurityUpdateYear3EndOn"> Gets or sets the extended security update year 3 end date of the product. </param>
        /// <returns> A new <see cref="Models.AssessmentProductSupportStatus"/> instance for mocking. </returns>
        public static AssessmentProductSupportStatus AssessmentProductSupportStatus(string currentVersion = null, string servicePackStatus = null, string esuStatus = null, string supportStatus = null, int? eta = null, string currentEsuYear = null, DateTimeOffset? mainstreamEndOn = null, DateTimeOffset? extendedSupportEndOn = null, DateTimeOffset? extendedSecurityUpdateYear1EndOn = null, DateTimeOffset? extendedSecurityUpdateYear2EndOn = null, DateTimeOffset? extendedSecurityUpdateYear3EndOn = null)
        {
            return new AssessmentProductSupportStatus(
                currentVersion,
                servicePackStatus,
                esuStatus,
                supportStatus,
                eta,
                currentEsuYear,
                mainstreamEndOn,
                extendedSupportEndOn,
                extendedSecurityUpdateYear1EndOn,
                extendedSecurityUpdateYear2EndOn,
                extendedSecurityUpdateYear3EndOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessedNetworkAdapter"/>. </summary>
        /// <param name="suitability"> Gets the suitability. </param>
        /// <param name="suitabilityDetail"> Gets the suitability detail. </param>
        /// <param name="suitabilityExplanation"> Gets the suitability explanation. </param>
        /// <param name="monthlyBandwidthCosts"> Gets the monthly bandwidth costs. </param>
        /// <param name="netGigabytesTransmittedPerMonth"> Gets the net gigabytes transmitted per month. </param>
        /// <param name="displayName"> Gets the display name. </param>
        /// <param name="macAddress"> Gets the mac address. </param>
        /// <param name="ipAddresses"> Gets the ip addresses. </param>
        /// <param name="megabytesPerSecondReceived"> Gets the megabytes per second received. </param>
        /// <param name="megabytesPerSecondTransmitted"> Gets the megabytes per second transmitted. </param>
        /// <returns> A new <see cref="Models.AssessedNetworkAdapter"/> instance for mocking. </returns>
        public static AssessedNetworkAdapter AssessedNetworkAdapter(MigrationAssessmentCloudSuitability? suitability = null, NetworkAdapterSuitabilityDetail? suitabilityDetail = null, NetworkAdapterSuitabilityExplanation? suitabilityExplanation = null, double? monthlyBandwidthCosts = null, double? netGigabytesTransmittedPerMonth = null, string displayName = null, string macAddress = null, IEnumerable<string> ipAddresses = null, double? megabytesPerSecondReceived = null, double? megabytesPerSecondTransmitted = null)
        {
            ipAddresses ??= new List<string>();

            return new AssessedNetworkAdapter(
                suitability,
                suitabilityDetail,
                suitabilityExplanation,
                monthlyBandwidthCosts,
                netGigabytesTransmittedPerMonth,
                displayName,
                macAddress,
                ipAddresses?.ToList(),
                megabytesPerSecondReceived,
                megabytesPerSecondTransmitted,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentReportDownloadUri"/>. </summary>
        /// <param name="assessmentReportUri"> Hyperlink to download report. </param>
        /// <param name="expireOn"> Expiry date of download url. </param>
        /// <returns> A new <see cref="Models.AssessmentReportDownloadUri"/> instance for mocking. </returns>
        public static AssessmentReportDownloadUri AssessmentReportDownloadUri(Uri assessmentReportUri = null, DateTimeOffset expireOn = default)
        {
            return new AssessmentReportDownloadUri(assessmentReportUri, expireOn, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAvsAssessmentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="assessmentErrorSummary">
        /// Gets the assessment error summary.
        ///             This is the number of machines
        /// affected by each type of error in this assessment.
        /// </param>
        /// <param name="failuresToTolerateAndRaidLevel"> Failures to tolerate and RAID level in a common property. </param>
        /// <param name="vcpuOversubscription"> VCPU over subscription. </param>
        /// <param name="nodeType"> AVS node type. </param>
        /// <param name="reservedInstance"> Reserved instance. </param>
        /// <param name="totalMonthlyCost"> Total monthly cost. </param>
        /// <param name="suitability"> Gets or sets the Assessment cloud suitability. </param>
        /// <param name="suitabilityExplanation"> Gets or sets the Assessment suitability explanation. </param>
        /// <param name="numberOfNodes"> Recommended number of nodes. </param>
        /// <param name="cpuUtilization"> Predicted CPU utilization. </param>
        /// <param name="ramUtilization"> Predicted RAM utilization. </param>
        /// <param name="storageUtilization"> Predicted storage utilization. </param>
        /// <param name="totalCpuCores"> Predicted total CPU cores used. </param>
        /// <param name="totalRamInGB"> Predicted total RAM used in GB. </param>
        /// <param name="totalStorageInGB"> Predicted total Storage used in GB. </param>
        /// <param name="numberOfMachines"> Number of machines part of the assessment. </param>
        /// <param name="suitabilitySummary"> Cloud suitability summary for all the machines in the assessment. </param>
        /// <param name="memOvercommit"> Memory overcommit. </param>
        /// <param name="dedupeCompression"> De-duplication compression. </param>
        /// <param name="limitingFactor"> Limiting factor. </param>
        /// <param name="isStretchClusterEnabled"> Is Stretch Cluster Enabled. </param>
        /// <param name="groupType"> Gets the group type for the assessment. </param>
        /// <param name="assessmentType"> Assessment type of the assessment. </param>
        /// <param name="azureLocation"> Azure Location or Azure region where to which the machines will be migrated. </param>
        /// <param name="azureOfferCode"> Azure Offer code according to which cost estimation is done. </param>
        /// <param name="currency"> Currency in which prices should be reported. </param>
        /// <param name="scalingFactor">
        /// Percentage of buffer that user wants on performance metrics when recommending
        /// Azure sizes.
        /// </param>
        /// <param name="percentile">
        /// Percentile of the utilization data values to be considered while assessing
        /// machines.
        /// </param>
        /// <param name="timeRange">
        /// Time Range for which the historic utilization data should be considered for
        /// assessment.
        /// </param>
        /// <param name="perfDataStartOn"> Gets or sets the start time to consider performance data for assessment. </param>
        /// <param name="perfDataEndOn"> Gets or sets the end time to consider performance data for assessment. </param>
        /// <param name="stage"> User configurable setting to display the Stage of Assessment. </param>
        /// <param name="discountPercentage"> Custom discount percentage. </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="pricesQueriedOn">
        /// Time when the Azure Prices were queried. Date-Time represented in ISO-8601
        /// format.
        /// </param>
        /// <param name="createdOn"> Date and Time when assessment was created. </param>
        /// <param name="updatedOn"> Date and Time when assessment was last updated. </param>
        /// <param name="status"> Whether assessment is in valid state and all machines have been assessed. </param>
        /// <param name="schemaVersion"> Schema version. </param>
        /// <returns> A new <see cref="Assessment.MigrationAvsAssessmentData"/> instance for mocking. </returns>
        public static MigrationAvsAssessmentData MigrationAvsAssessmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationAssessmentProvisioningState? provisioningState = null, IReadOnlyDictionary<string, int> assessmentErrorSummary = null, FttAndRaidLevel? failuresToTolerateAndRaidLevel = null, double? vcpuOversubscription = null, AssessmentAvsNodeType? nodeType = null, AssessmentReservedInstance? reservedInstance = null, double? totalMonthlyCost = null, MigrationAssessmentCloudSuitability? suitability = null, AvsSuitabilityExplanation? suitabilityExplanation = null, int? numberOfNodes = null, double? cpuUtilization = null, double? ramUtilization = null, double? storageUtilization = null, double? totalCpuCores = null, double? totalRamInGB = null, double? totalStorageInGB = null, int? numberOfMachines = null, IReadOnlyDictionary<string, int> suitabilitySummary = null, double? memOvercommit = null, double? dedupeCompression = null, string limitingFactor = null, bool? isStretchClusterEnabled = null, MigrationAssessmentGroupType? groupType = null, MigrationAssessmentType? assessmentType = null, AzureLocation? azureLocation = null, AssessmentOfferCode? azureOfferCode = null, AssessmentCurrency? currency = null, double? scalingFactor = null, PercentileOfUtilization? percentile = null, AssessmentTimeRange? timeRange = null, DateTimeOffset? perfDataStartOn = null, DateTimeOffset? perfDataEndOn = null, MigrationAssessmentStage? stage = null, double? discountPercentage = null, AssessmentSizingCriterion? sizingCriterion = null, double? confidenceRatingInPercentage = null, DateTimeOffset? pricesQueriedOn = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, MigrationAssessmentStatus? status = null, string schemaVersion = null)
        {
            assessmentErrorSummary ??= new Dictionary<string, int>();
            suitabilitySummary ??= new Dictionary<string, int>();

            return new MigrationAvsAssessmentData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                assessmentErrorSummary,
                failuresToTolerateAndRaidLevel,
                vcpuOversubscription,
                nodeType,
                reservedInstance,
                totalMonthlyCost,
                suitability,
                suitabilityExplanation,
                numberOfNodes,
                cpuUtilization,
                ramUtilization,
                storageUtilization,
                totalCpuCores,
                totalRamInGB,
                totalStorageInGB,
                numberOfMachines,
                suitabilitySummary,
                memOvercommit,
                dedupeCompression,
                limitingFactor,
                isStretchClusterEnabled,
                groupType,
                assessmentType,
                azureLocation,
                azureOfferCode,
                currency,
                scalingFactor,
                percentile,
                timeRange,
                perfDataStartOn,
                perfDataEndOn,
                stage,
                discountPercentage,
                sizingCriterion,
                confidenceRatingInPercentage,
                pricesQueriedOn,
                createdOn,
                updatedOn,
                status,
                schemaVersion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAvsAssessedMachineData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="errors"> List of errors for this machine. </param>
        /// <param name="disks"> List of Disks that were assessed as part of this machine's assessment. </param>
        /// <param name="networkAdapters">
        /// List of Network Adapters that were assessed as part of this machine's
        /// assessment.
        /// </param>
        /// <param name="storageInUseGB"> Gets the storage in use. </param>
        /// <param name="suitabilityExplanation"> Gets the explanation if machine is not suitable for cloud. </param>
        /// <param name="suitabilityDetail"> Gets the details if machine is not suitable for cloud. </param>
        /// <param name="typePropertiesType"> Assessed machine type. </param>
        /// <param name="bootType"> Boot type of machine discovered in private data center. </param>
        /// <param name="operatingSystemType"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemName"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemVersion"> Operating system version as reported by datacenter management solution. </param>
        /// <param name="operatingSystemArchitecture"> Operating system architecture as reported by datacenter management solution. </param>
        /// <param name="createdOn"> When was machine first created. </param>
        /// <param name="updatedOn"> When was machine last updated. </param>
        /// <param name="displayName"> Display Name of the Machine. </param>
        /// <param name="description"> Description for the machine. </param>
        /// <param name="datacenterMachineArmId"> Data center machine ARM id. </param>
        /// <param name="datacenterManagementServerArmId"> Data center management server ARM id. </param>
        /// <param name="datacenterManagementServerName"> Data center management server name. </param>
        /// <param name="megabytesOfMemory"> Megabytes of memory found allocated for the machine in private data center. </param>
        /// <param name="numberOfCores"> Number of CPU cores found on the machine. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="percentageCoresUtilization">
        /// Percentile of Percentage of Cores Utilized noted during time period T.
        ///
        ///    Here N and T are settings on Assessment.
        /// </param>
        /// <param name="percentageMemoryUtilization">
        /// Percentile of Percentage of Memory Utilized noted during time period T.
        ///
        ///     Here N and T are settings on Assessment.
        /// </param>
        /// <param name="suitability">
        /// Gets a value indicating whether machine is suitable for the cloud platform
        /// selected.
        /// </param>
        /// <returns> A new <see cref="Assessment.MigrationAvsAssessedMachineData"/> instance for mocking. </returns>
        public static MigrationAvsAssessedMachineData MigrationAvsAssessedMachineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<MigrationAssessmentError> errors = null, IReadOnlyDictionary<string, AvsAssessedDisk> disks = null, IReadOnlyDictionary<string, AvsAssessedNetworkAdapter> networkAdapters = null, double? storageInUseGB = null, AvsVmSuitabilityExplanation? suitabilityExplanation = null, AvsVmSuitabilityDetail? suitabilityDetail = null, MigrationAssessedMachineType? typePropertiesType = null, AssessedMachineBootType? bootType = null, string operatingSystemType = null, string operatingSystemName = null, string operatingSystemVersion = null, GuestOperatingSystemArchitecture? operatingSystemArchitecture = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, string displayName = null, string description = null, ResourceIdentifier datacenterMachineArmId = null, ResourceIdentifier datacenterManagementServerArmId = null, string datacenterManagementServerName = null, double? megabytesOfMemory = null, int? numberOfCores = null, double? confidenceRatingInPercentage = null, double? percentageCoresUtilization = null, double? percentageMemoryUtilization = null, MigrationAssessmentCloudSuitability? suitability = null)
        {
            errors ??= new List<MigrationAssessmentError>();
            disks ??= new Dictionary<string, AvsAssessedDisk>();
            networkAdapters ??= new Dictionary<string, AvsAssessedNetworkAdapter>();

            return new MigrationAvsAssessedMachineData(
                id,
                name,
                resourceType,
                systemData,
                errors?.ToList(),
                disks,
                networkAdapters,
                storageInUseGB,
                suitabilityExplanation,
                suitabilityDetail,
                typePropertiesType,
                bootType,
                operatingSystemType,
                operatingSystemName,
                operatingSystemVersion,
                operatingSystemArchitecture,
                createdOn,
                updatedOn,
                displayName,
                description,
                datacenterMachineArmId,
                datacenterManagementServerArmId,
                datacenterManagementServerName,
                megabytesOfMemory,
                numberOfCores,
                confidenceRatingInPercentage,
                percentageCoresUtilization,
                percentageMemoryUtilization,
                suitability,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvsAssessedDisk"/>. </summary>
        /// <param name="name"> Gets the ID of the disk. </param>
        /// <param name="displayName"> Gets the display name of the disk. </param>
        /// <param name="gigabytesProvisioned"> Gigabytes Provisioned for a disk in private data center. </param>
        /// <param name="megabytesPerSecondOfRead"> Disk Read Throughput in MB/s. </param>
        /// <param name="megabytesPerSecondOfWrite"> Disk Write Throughput in MB/s. </param>
        /// <param name="numberOfReadOperationsPerSecond"> Read Operations per second. </param>
        /// <param name="numberOfWriteOperationsPerSecond"> Write Operations per second. </param>
        /// <returns> A new <see cref="Models.AvsAssessedDisk"/> instance for mocking. </returns>
        public static AvsAssessedDisk AvsAssessedDisk(string name = null, string displayName = null, double? gigabytesProvisioned = null, double? megabytesPerSecondOfRead = null, double? megabytesPerSecondOfWrite = null, double? numberOfReadOperationsPerSecond = null, double? numberOfWriteOperationsPerSecond = null)
        {
            return new AvsAssessedDisk(
                name,
                displayName,
                gigabytesProvisioned,
                megabytesPerSecondOfRead,
                megabytesPerSecondOfWrite,
                numberOfReadOperationsPerSecond,
                numberOfWriteOperationsPerSecond,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvsAssessedNetworkAdapter"/>. </summary>
        /// <param name="macAddress"> Mac address of the NIC. </param>
        /// <param name="ipAddresses"> IP V4 addresses for the machine. </param>
        /// <param name="displayName"> Gets the display name of the network adapter. </param>
        /// <param name="megabytesPerSecondReceived">
        /// Gets the Received data for Network Adapter in MB/s.
        ///             This value is
        /// the percentile of historical data based on options selected in Assessment.
        /// </param>
        /// <param name="megabytesPerSecondTransmitted">
        /// Gets the Transmitted data for Network Adapter in MB/s.
        ///             This value
        /// is the percentile of historical data based on options selected in Assessment.
        /// </param>
        /// <returns> A new <see cref="Models.AvsAssessedNetworkAdapter"/> instance for mocking. </returns>
        public static AvsAssessedNetworkAdapter AvsAssessedNetworkAdapter(string macAddress = null, IEnumerable<string> ipAddresses = null, string displayName = null, double? megabytesPerSecondReceived = null, double? megabytesPerSecondTransmitted = null)
        {
            ipAddresses ??= new List<string>();

            return new AvsAssessedNetworkAdapter(
                macAddress,
                ipAddresses?.ToList(),
                displayName,
                megabytesPerSecondReceived,
                megabytesPerSecondTransmitted,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationSqlAssessmentV2Data"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="osLicense"> Gets or sets user configurable setting to display the azure hybrid use benefit. </param>
        /// <param name="environmentType"> Gets or sets user configurable setting to display the environment type. </param>
        /// <param name="entityUptime">
        /// Gets or sets the duration for which the entity (SQL, VMs) are up in the
        /// on-premises environment.
        /// </param>
        /// <param name="optimizationLogic"> Gets or sets SQL optimization logic. </param>
        /// <param name="reservedInstanceForVm"> Gets or sets azure reserved instance for VM. </param>
        /// <param name="azureOfferCodeForVm"> Gets or sets Azure Offer Code for VM. </param>
        /// <param name="eaSubscriptionId"> Gets or sets the Enterprise agreement subscription id. </param>
        /// <param name="azureSqlManagedInstanceSettings"> Gets or sets user configurable SQL managed instance settings. </param>
        /// <param name="azureSqlDatabaseSettings"> Gets or sets user configurable SQL database settings. </param>
        /// <param name="azureSqlVmInstanceSeries"> Gets or sets user configurable SQL VM settings. </param>
        /// <param name="multiSubnetIntent"> Gets or sets user preference indicating intent of multi-subnet configuration. </param>
        /// <param name="asyncCommitModeIntent"> Gets or sets user preference indicating intent of async commit mode. </param>
        /// <param name="isInternetAccessAvailable"> Gets or sets a value indicating whether internet access is available. </param>
        /// <param name="disasterRecoveryLocation">
        /// Gets or sets the Azure Location or Azure region where to which the machines
        /// will be migrated.
        /// </param>
        /// <param name="isHadrAssessmentEnabled"> Gets or sets a value indicating whether HADR assessments needs to be created. </param>
        /// <param name="azureSecurityOfferingType"> Gets or sets a value indicating azure security offering type. </param>
        /// <param name="reservedInstance"> Reserved instance. </param>
        /// <param name="sqlServerLicense"> SQL server license. </param>
        /// <param name="groupType"> Gets the group type for the assessment. </param>
        /// <param name="assessmentType"> Assessment type of the assessment. </param>
        /// <param name="azureLocation"> Azure Location or Azure region where to which the machines will be migrated. </param>
        /// <param name="azureOfferCode"> Azure Offer Code. </param>
        /// <param name="currency"> Currency in which prices should be reported. </param>
        /// <param name="scalingFactor">
        /// Percentage of buffer that user wants on performance metrics when recommending
        /// Azure sizes.
        /// </param>
        /// <param name="percentile">
        /// Percentile of the utilization data values to be considered while assessing
        /// machines.
        /// </param>
        /// <param name="timeRange">
        /// Time Range for which the historic utilization data should be considered for
        /// assessment.
        /// </param>
        /// <param name="perfDataStartOn"> Gets or sets the start time to consider performance data for assessment. </param>
        /// <param name="perfDataEndOn"> Gets or sets the end time to consider performance data for assessment. </param>
        /// <param name="stage"> User configurable setting to display the Stage of Assessment. </param>
        /// <param name="discountPercentage"> Custom discount percentage. </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="pricesQueriedOn"> Last time when rates were queried. </param>
        /// <param name="createdOn"> Date and Time when assessment was created. </param>
        /// <param name="updatedOn"> Date and Time when assessment was last updated. </param>
        /// <param name="status"> Whether assessment is in valid state and all machines have been assessed. </param>
        /// <param name="schemaVersion"> Schema version. </param>
        /// <returns> A new <see cref="Assessment.MigrationSqlAssessmentV2Data"/> instance for mocking. </returns>
        public static MigrationSqlAssessmentV2Data MigrationSqlAssessmentV2Data(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationAssessmentProvisioningState? provisioningState = null, MigrationAssessmentOSLicense? osLicense = null, AssessmentEnvironmentType? environmentType = null, AssessmentEntityUptime entityUptime = null, SqlOptimizationLogic? optimizationLogic = null, AssessmentReservedInstance? reservedInstanceForVm = null, AssessmentOfferCode? azureOfferCodeForVm = null, string eaSubscriptionId = null, AssessmentSqlMISettings azureSqlManagedInstanceSettings = null, AssessmentSqlDBSettings azureSqlDatabaseSettings = null, IEnumerable<AssessmentVmFamily> azureSqlVmInstanceSeries = null, MultiSubnetIntent? multiSubnetIntent = null, AsyncCommitModeIntent? asyncCommitModeIntent = null, bool? isInternetAccessAvailable = null, AzureLocation? disasterRecoveryLocation = null, bool? isHadrAssessmentEnabled = null, AssessmentSecurityOfferingType? azureSecurityOfferingType = null, AssessmentReservedInstance? reservedInstance = null, AssessmentSqlServerLicense? sqlServerLicense = null, MigrationAssessmentGroupType? groupType = null, MigrationAssessmentType? assessmentType = null, AzureLocation? azureLocation = null, AssessmentOfferCode? azureOfferCode = null, AssessmentCurrency? currency = null, double? scalingFactor = null, PercentileOfUtilization? percentile = null, AssessmentTimeRange? timeRange = null, DateTimeOffset? perfDataStartOn = null, DateTimeOffset? perfDataEndOn = null, MigrationAssessmentStage? stage = null, double? discountPercentage = null, AssessmentSizingCriterion? sizingCriterion = null, double? confidenceRatingInPercentage = null, DateTimeOffset? pricesQueriedOn = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, MigrationAssessmentStatus? status = null, string schemaVersion = null)
        {
            azureSqlVmInstanceSeries ??= new List<AssessmentVmFamily>();

            return new MigrationSqlAssessmentV2Data(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                osLicense,
                environmentType,
                entityUptime,
                optimizationLogic,
                reservedInstanceForVm,
                azureOfferCodeForVm,
                eaSubscriptionId,
                azureSqlManagedInstanceSettings,
                azureSqlDatabaseSettings,
                azureSqlVmInstanceSeries != null ? new AssessmentSqlVmSettings(azureSqlVmInstanceSeries?.ToList(), serializedAdditionalRawData: null) : null,
                multiSubnetIntent,
                asyncCommitModeIntent,
                isInternetAccessAvailable,
                disasterRecoveryLocation,
                isHadrAssessmentEnabled,
                azureSecurityOfferingType,
                reservedInstance,
                sqlServerLicense,
                groupType,
                assessmentType,
                azureLocation,
                azureOfferCode,
                currency,
                scalingFactor,
                percentile,
                timeRange,
                perfDataStartOn,
                perfDataEndOn,
                stage,
                discountPercentage,
                sizingCriterion,
                confidenceRatingInPercentage,
                pricesQueriedOn,
                createdOn,
                updatedOn,
                status,
                schemaVersion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessedSqlDatabaseV2Data"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="recommendedAzureSqlTargetType"> Gets or sets the recommended azure SQL target type. </param>
        /// <param name="recommendedSuitability"> Gets or sets the recommended azure SQL suitability. </param>
        /// <param name="bufferCacheSizeInMB">
        /// Gets or sets the aggregated cache size of this database. This is a performance
        /// data metric for this DB.
        /// </param>
        /// <param name="productSupportStatus"> Gets the product support status related details. </param>
        /// <param name="azureSqlMISuitabilityDetails"> Gets or sets the azure SQL MI suitability details. </param>
        /// <param name="azureSqlDBSuitabilityDetails"> Gets or sets the azure SQL DB suitability details. </param>
        /// <param name="isDatabaseHighlyAvailable">
        /// Gets a value indicating whether the assessed SQL database is highly available
        /// or not.
        /// </param>
        /// <param name="linkedAvailabilityGroupOverview">
        /// Gets the linked availability group overview if the database being assessed is
        /// highly available.
        /// </param>
        /// <param name="machineArmId"> Machine arm id. </param>
        /// <param name="assessedSqlInstanceArmId"> Assessed SQL instance arm id. </param>
        /// <param name="machineName"> Machine display name. </param>
        /// <param name="instanceName"> SQL instance name. </param>
        /// <param name="databaseName"> SQL database name. </param>
        /// <param name="databaseSizeInMB"> SQL database size in megabytes. </param>
        /// <param name="compatibilityLevel"> Database compatibility level. </param>
        /// <param name="sqlDatabaseSdsArmId"> SQL database SDS arm id. </param>
        /// <param name="percentageCoresUtilization"> The percentage of the total number of cores being utilized by the SQL database. </param>
        /// <param name="megabytesPerSecondOfRead"> The read throughput of the SQL database. </param>
        /// <param name="megabytesPerSecondOfWrite"> The write throughput of the SQL database. </param>
        /// <param name="numberOfReadOperationsPerSecond"> The read operations per second of the SQL database. </param>
        /// <param name="numberOfWriteOperationsPerSecond"> The write operations per second of the SQL database. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <param name="createdOn"> When was assessed SQL database first created. </param>
        /// <param name="updatedOn"> When was assessed SQL database last updated. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessedSqlDatabaseV2Data"/> instance for mocking. </returns>
        public static MigrationAssessedSqlDatabaseV2Data MigrationAssessedSqlDatabaseV2Data(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationAssessmentTargetType? recommendedAzureSqlTargetType = null, AssessedSqlRecommendedSuitability? recommendedSuitability = null, double? bufferCacheSizeInMB = null, AssessmentProductSupportStatus productSupportStatus = null, SqlAssessmentV2PaasSuitabilityDetails azureSqlMISuitabilityDetails = null, SqlAssessmentV2PaasSuitabilityDetails azureSqlDBSuitabilityDetails = null, bool? isDatabaseHighlyAvailable = null, SqlAvailabilityGroupDataOverview linkedAvailabilityGroupOverview = null, ResourceIdentifier machineArmId = null, ResourceIdentifier assessedSqlInstanceArmId = null, string machineName = null, string instanceName = null, string databaseName = null, double? databaseSizeInMB = null, AssessedDatabaseCompatibilityLevel? compatibilityLevel = null, ResourceIdentifier sqlDatabaseSdsArmId = null, double? percentageCoresUtilization = null, double? megabytesPerSecondOfRead = null, double? megabytesPerSecondOfWrite = null, double? numberOfReadOperationsPerSecond = null, double? numberOfWriteOperationsPerSecond = null, double? confidenceRatingInPercentage = null, AssessmentSizingCriterion? sizingCriterion = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null)
        {
            return new MigrationAssessedSqlDatabaseV2Data(
                id,
                name,
                resourceType,
                systemData,
                recommendedAzureSqlTargetType,
                recommendedSuitability,
                bufferCacheSizeInMB,
                productSupportStatus,
                azureSqlMISuitabilityDetails,
                azureSqlDBSuitabilityDetails,
                isDatabaseHighlyAvailable,
                linkedAvailabilityGroupOverview,
                machineArmId,
                assessedSqlInstanceArmId,
                machineName,
                instanceName,
                databaseName,
                databaseSizeInMB,
                compatibilityLevel,
                sqlDatabaseSdsArmId,
                percentageCoresUtilization,
                megabytesPerSecondOfRead,
                megabytesPerSecondOfWrite,
                numberOfReadOperationsPerSecond,
                numberOfWriteOperationsPerSecond,
                confidenceRatingInPercentage,
                sizingCriterion,
                createdOn,
                updatedOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SqlAssessmentV2PaasSuitabilityDetails"/>. </summary>
        /// <param name="azureSqlSku"> Gets the azure SQL PAAS SKU. </param>
        /// <param name="replicaAzureSqlSku"> Gets the replica azure SQL PAAS SKU. </param>
        /// <param name="sharedResources"> Gets the shared resources. </param>
        /// <param name="monthlyComputeCost"> Gets the monthly compute cost. </param>
        /// <param name="monthlyStorageCost"> Gets the monthly storage cost. </param>
        /// <param name="costComponents"> Gets the collection of cost components. </param>
        /// <param name="securitySuitability"> Gets the suitability for Microsoft cloud defender. </param>
        /// <param name="shouldProvisionReplicas"> Gets a value indicating whether replicas should be provisioned. </param>
        /// <param name="skuReplicationMode"> Gets the replication mode. </param>
        /// <param name="migrationGuidelines"> Gets the list of migration guidelines applicable to this target. </param>
        /// <param name="recommendationReasonings"> Gets the list of SQL recommendation Reasoning. </param>
        /// <param name="migrationTargetPlatform"> Gets the migration target platform. </param>
        /// <param name="suitability"> Gets the azure suitability. </param>
        /// <param name="migrationIssues"> Gets the list of migrations issues. </param>
        /// <returns> A new <see cref="Models.SqlAssessmentV2PaasSuitabilityDetails"/> instance for mocking. </returns>
        public static SqlAssessmentV2PaasSuitabilityDetails SqlAssessmentV2PaasSuitabilityDetails(AssessmentSqlPaasSkuDto azureSqlSku = null, IEnumerable<AssessmentSqlPaasSkuDto> replicaAzureSqlSku = null, SharedResourcesDto sharedResources = null, double? monthlyComputeCost = null, double? monthlyStorageCost = null, IEnumerable<AssessmentCostComponent> costComponents = null, MigrationAssessmentCloudSuitability? securitySuitability = null, bool? shouldProvisionReplicas = null, SkuReplicationMode? skuReplicationMode = null, IEnumerable<SqlMigrationGuideline> migrationGuidelines = null, IEnumerable<SqlRecommendationReasoning> recommendationReasonings = null, MigrationAssessmentTargetType? migrationTargetPlatform = null, MigrationAssessmentCloudSuitability? suitability = null, IEnumerable<SqlAssessmentMigrationIssue> migrationIssues = null)
        {
            replicaAzureSqlSku ??= new List<AssessmentSqlPaasSkuDto>();
            costComponents ??= new List<AssessmentCostComponent>();
            migrationGuidelines ??= new List<SqlMigrationGuideline>();
            recommendationReasonings ??= new List<SqlRecommendationReasoning>();
            migrationIssues ??= new List<SqlAssessmentMigrationIssue>();

            return new SqlAssessmentV2PaasSuitabilityDetails(
                azureSqlSku,
                replicaAzureSqlSku?.ToList(),
                sharedResources,
                monthlyComputeCost,
                monthlyStorageCost,
                costComponents?.ToList(),
                securitySuitability,
                shouldProvisionReplicas,
                skuReplicationMode,
                migrationGuidelines?.ToList(),
                recommendationReasonings?.ToList(),
                migrationTargetPlatform,
                suitability,
                migrationIssues?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentSqlPaasSkuDto"/>. </summary>
        /// <param name="azureSqlServiceTier"> Gets the service tier. </param>
        /// <param name="azureSqlComputeTier"> Gets the compute tier. </param>
        /// <param name="azureSqlHardwareGeneration"> Gets the hardware generation. </param>
        /// <param name="storageMaxSizeInMB"> Gets the storage maximum size in megabytes. </param>
        /// <param name="predictedDataSizeInMB">
        /// Gets the predicted data size in megabytes in the Azure SQL, will impact the
        /// billing cost.
        /// </param>
        /// <param name="predictedLogSizeInMB">
        /// Gets the predicted log size in megabytes in the Azure SQL, will impact the
        /// billing cost.
        /// </param>
        /// <param name="cores"> Gets the number of cores. </param>
        /// <param name="azureSqlTargetType"> Gets the target type. </param>
        /// <returns> A new <see cref="Models.AssessmentSqlPaasSkuDto"/> instance for mocking. </returns>
        public static AssessmentSqlPaasSkuDto AssessmentSqlPaasSkuDto(AssessmentSqlServiceTier? azureSqlServiceTier = null, MigrationAssessmentComputeTier? azureSqlComputeTier = null, MigrationAssessmentHardwareGeneration? azureSqlHardwareGeneration = null, double? storageMaxSizeInMB = null, double? predictedDataSizeInMB = null, double? predictedLogSizeInMB = null, int? cores = null, MigrationAssessmentTargetType? azureSqlTargetType = null)
        {
            return new AssessmentSqlPaasSkuDto(
                azureSqlServiceTier,
                azureSqlComputeTier,
                azureSqlHardwareGeneration,
                storageMaxSizeInMB,
                predictedDataSizeInMB,
                predictedLogSizeInMB,
                cores,
                azureSqlTargetType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SharedResourcesDto"/>. </summary>
        /// <param name="sharedDataDisks"> Gets the list of shared data disks. </param>
        /// <param name="sharedLogDisks"> Gets the list of shared log disks. </param>
        /// <param name="sharedTempDBDisks"> Gets the list of shared Temporary database disks. </param>
        /// <param name="numberOfMounts"> Gets number of mounts of shared disks. </param>
        /// <param name="quorumWitnessType"> Gets quorum witness. </param>
        /// <returns> A new <see cref="Models.SharedResourcesDto"/> instance for mocking. </returns>
        public static SharedResourcesDto SharedResourcesDto(IEnumerable<AssessmentManagedDiskSkuDto> sharedDataDisks = null, IEnumerable<AssessmentManagedDiskSkuDto> sharedLogDisks = null, IEnumerable<AssessmentManagedDiskSkuDto> sharedTempDBDisks = null, int? numberOfMounts = null, QuorumWitnessDtoQuorumWitnessType? quorumWitnessType = null)
        {
            sharedDataDisks ??= new List<AssessmentManagedDiskSkuDto>();
            sharedLogDisks ??= new List<AssessmentManagedDiskSkuDto>();
            sharedTempDBDisks ??= new List<AssessmentManagedDiskSkuDto>();

            return new SharedResourcesDto(
                sharedDataDisks?.ToList(),
                sharedLogDisks?.ToList(),
                sharedTempDBDisks?.ToList(),
                numberOfMounts,
                quorumWitnessType != null ? new QuorumWitnessDto(quorumWitnessType, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentManagedDiskSkuDto"/>. </summary>
        /// <param name="diskType"> Gets the Type ("tier") of disk - e.g. standard, premium, ultra. </param>
        /// <param name="diskSize"> Gets the Size of the managed disk - e.g. P30, P40. </param>
        /// <param name="diskRedundancy"> Gets disk redundancy - e.g. LRS, ZRS. </param>
        /// <param name="storageCost"> Gets the managed disk storage cost. </param>
        /// <param name="recommendedSizeInGib"> Gets the recommended in GB of the managed disk. </param>
        /// <param name="recommendedThroughputInMbps"> Gets the recommended throughput in MBPS of the managed disk. </param>
        /// <param name="recommendedIops"> Gets the recommended IOPS of the managed disk. </param>
        /// <returns> A new <see cref="Models.AssessmentManagedDiskSkuDto"/> instance for mocking. </returns>
        public static AssessmentManagedDiskSkuDto AssessmentManagedDiskSkuDto(ManagedDiskSkuDtoDiskType? diskType = null, AssessmentDiskSize? diskSize = null, ManagedDiskSkuDtoDiskRedundancy? diskRedundancy = null, double? storageCost = null, double? recommendedSizeInGib = null, double? recommendedThroughputInMbps = null, double? recommendedIops = null)
        {
            return new AssessmentManagedDiskSkuDto(
                diskType,
                diskSize,
                diskRedundancy,
                storageCost,
                recommendedSizeInGib,
                recommendedThroughputInMbps,
                recommendedIops,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SqlMigrationGuideline"/>. </summary>
        /// <param name="guidelineId"> Gets the guideline id. </param>
        /// <param name="migrationGuidelineCategory"> Gets the migration guideline category. </param>
        /// <param name="migrationGuidelineContext"> Gets the migration guideline context. </param>
        /// <returns> A new <see cref="Models.SqlMigrationGuideline"/> instance for mocking. </returns>
        public static SqlMigrationGuideline SqlMigrationGuideline(string guidelineId = null, SqlMigrationGuidelineCategory? migrationGuidelineCategory = null, IEnumerable<MigrationGuidelineContext> migrationGuidelineContext = null)
        {
            migrationGuidelineContext ??= new List<MigrationGuidelineContext>();

            return new SqlMigrationGuideline(guidelineId, migrationGuidelineCategory, migrationGuidelineContext?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MigrationGuidelineContext"/>. </summary>
        /// <param name="contextKey"> Gets the reasoning context key. </param>
        /// <param name="contextValue"> Gets the reasoning context value. </param>
        /// <returns> A new <see cref="Models.MigrationGuidelineContext"/> instance for mocking. </returns>
        public static MigrationGuidelineContext MigrationGuidelineContext(string contextKey = null, string contextValue = null)
        {
            return new MigrationGuidelineContext(contextKey, contextValue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SqlRecommendationReasoning"/>. </summary>
        /// <param name="reasoningId"> Gets the reasoning id. </param>
        /// <param name="reasoningString"> Gets the reasoning status. </param>
        /// <param name="reasoningCategory"> Gets the reasoning category. </param>
        /// <param name="contextParameters"> Gets the Sql recommended reasoning parameters. </param>
        /// <returns> A new <see cref="Models.SqlRecommendationReasoning"/> instance for mocking. </returns>
        public static SqlRecommendationReasoning SqlRecommendationReasoning(string reasoningId = null, string reasoningString = null, string reasoningCategory = null, IEnumerable<SqlRecommendationReasoningContext> contextParameters = null)
        {
            contextParameters ??= new List<SqlRecommendationReasoningContext>();

            return new SqlRecommendationReasoning(reasoningId, reasoningString, reasoningCategory, contextParameters?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SqlRecommendationReasoningContext"/>. </summary>
        /// <param name="contextKey"> Gets the reasoning context key. </param>
        /// <param name="contextValue"> Gets the reasoning context value. </param>
        /// <returns> A new <see cref="Models.SqlRecommendationReasoningContext"/> instance for mocking. </returns>
        public static SqlRecommendationReasoningContext SqlRecommendationReasoningContext(string contextKey = null, string contextValue = null)
        {
            return new SqlRecommendationReasoningContext(contextKey, contextValue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SqlAssessmentMigrationIssue"/>. </summary>
        /// <param name="issueId"> Gets the issue id. </param>
        /// <param name="issueCategory"> Gets the issue category. </param>
        /// <param name="impactedObjects"> Gets the list of impacted objects. </param>
        /// <returns> A new <see cref="Models.SqlAssessmentMigrationIssue"/> instance for mocking. </returns>
        public static SqlAssessmentMigrationIssue SqlAssessmentMigrationIssue(string issueId = null, SqlAssessmentMigrationIssueCategory? issueCategory = null, IEnumerable<ImpactedAssessmentObject> impactedObjects = null)
        {
            impactedObjects ??= new List<ImpactedAssessmentObject>();

            return new SqlAssessmentMigrationIssue(issueId, issueCategory, impactedObjects?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ImpactedAssessmentObject"/>. </summary>
        /// <param name="objectName"> Gets the object name. </param>
        /// <param name="objectType"> Gets the object type. </param>
        /// <returns> A new <see cref="Models.ImpactedAssessmentObject"/> instance for mocking. </returns>
        public static ImpactedAssessmentObject ImpactedAssessmentObject(string objectName = null, string objectType = null)
        {
            return new ImpactedAssessmentObject(objectName, objectType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SqlAvailabilityGroupDataOverview"/>. </summary>
        /// <param name="availabilityGroupId"> Gets the availability group id. </param>
        /// <param name="availabilityGroupName"> Gets the availability group name. </param>
        /// <param name="sqlAvailabilityGroupSdsArmId"> Gets the availability group arm id. </param>
        /// <param name="sqlAvailabilityGroupEntityId"> Gets the availability group entity id. </param>
        /// <param name="sqlAvailabilityReplicaId"> Gets the availability replica id. </param>
        /// <returns> A new <see cref="Models.SqlAvailabilityGroupDataOverview"/> instance for mocking. </returns>
        public static SqlAvailabilityGroupDataOverview SqlAvailabilityGroupDataOverview(string availabilityGroupId = null, string availabilityGroupName = null, ResourceIdentifier sqlAvailabilityGroupSdsArmId = null, string sqlAvailabilityGroupEntityId = null, string sqlAvailabilityReplicaId = null)
        {
            return new SqlAvailabilityGroupDataOverview(
                availabilityGroupId,
                availabilityGroupName,
                sqlAvailabilityGroupSdsArmId,
                sqlAvailabilityGroupEntityId,
                sqlAvailabilityReplicaId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessedSqlInstanceV2Data"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="memoryInUseInMB"> Gets or sets the memory used by SQL instance in megabytes. </param>
        /// <param name="hasScanOccurred"> Gets or sets a value indicating whether SQL instance has been deep discovered. </param>
        /// <param name="recommendedAzureSqlTargetType"> Gets or sets the recommended azure SQL target type. </param>
        /// <param name="recommendedSuitability"> Gets or sets the recommended azure SQL suitability. </param>
        /// <param name="azureSqlMISuitabilityDetails"> SQL instance azure SQL MI suitability details. </param>
        /// <param name="azureSqlDBSuitabilityDetails"> SQL instance azure SQL DB suitability details. </param>
        /// <param name="azureSqlVmSuitabilityDetails"> SQL instance azure SQL VM suitability details. </param>
        /// <param name="storageTypeBasedDetails"> Gets the storage details. </param>
        /// <param name="productSupportStatus"> Gets the product support status related details. </param>
        /// <param name="fciMetadata"> Gets the FCI metadata if this instance represents an FCI instance. </param>
        /// <param name="availabilityReplicaSummary">
        /// Gets the overview counts of availability replicas in the assessed instance, by
        /// commit mode and read type.
        /// </param>
        /// <param name="isClustered"> Gets a value indicating whether the SQL instance is clustered or not. </param>
        /// <param name="isHighAvailabilityEnabled"> Gets a value indicating whether the high availability is enabled or not. </param>
        /// <param name="recommendedTargetReasonings"> Gets the list of recommended target reasoning. </param>
        /// <param name="machineArmId"> Machine arm id. </param>
        /// <param name="machineName"> Machine display name. </param>
        /// <param name="instanceName"> SQL instance name. </param>
        /// <param name="sqlInstanceSdsArmId"> SQL instance SDS arm id. </param>
        /// <param name="sqlEdition"> SQL instance edition. </param>
        /// <param name="sqlVersion"> SQL instance version. </param>
        /// <param name="numberOfCoresAllocated"> Number of CPU cores assigned to the SQL instance. </param>
        /// <param name="percentageCoresUtilization"> The percentage of the total number of cores being utilized by the SQL instance. </param>
        /// <param name="logicalDisks"> The logical disk details. </param>
        /// <param name="databaseSummary"> The databases summary. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <param name="createdOn"> When was assessed SQL instance first created. </param>
        /// <param name="updatedOn"> When was assessed SQL instance last updated. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessedSqlInstanceV2Data"/> instance for mocking. </returns>
        public static MigrationAssessedSqlInstanceV2Data MigrationAssessedSqlInstanceV2Data(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, double? memoryInUseInMB = null, bool? hasScanOccurred = null, MigrationAssessmentTargetType? recommendedAzureSqlTargetType = null, AssessedSqlRecommendedSuitability? recommendedSuitability = null, SqlAssessmentV2PaasSuitabilityDetails azureSqlMISuitabilityDetails = null, SqlAssessmentV2PaasSuitabilityDetails azureSqlDBSuitabilityDetails = null, SqlAssessmentV2IaasSuitabilityDetails azureSqlVmSuitabilityDetails = null, IEnumerable<AssessedSqlInstanceStorageDetails> storageTypeBasedDetails = null, AssessmentProductSupportStatus productSupportStatus = null, AssessmentSqlFciMetadata fciMetadata = null, SqlAvailabilityReplicaSummary availabilityReplicaSummary = null, bool? isClustered = null, bool? isHighAvailabilityEnabled = null, IEnumerable<SqlRecommendationReasoning> recommendedTargetReasonings = null, ResourceIdentifier machineArmId = null, string machineName = null, string instanceName = null, ResourceIdentifier sqlInstanceSdsArmId = null, string sqlEdition = null, string sqlVersion = null, int? numberOfCoresAllocated = null, double? percentageCoresUtilization = null, IEnumerable<AssessedSqlInstanceDiskDetails> logicalDisks = null, AssessedSqlInstanceDatabaseSummary databaseSummary = null, double? confidenceRatingInPercentage = null, AssessmentSizingCriterion? sizingCriterion = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null)
        {
            storageTypeBasedDetails ??= new List<AssessedSqlInstanceStorageDetails>();
            recommendedTargetReasonings ??= new List<SqlRecommendationReasoning>();
            logicalDisks ??= new List<AssessedSqlInstanceDiskDetails>();

            return new MigrationAssessedSqlInstanceV2Data(
                id,
                name,
                resourceType,
                systemData,
                memoryInUseInMB,
                hasScanOccurred,
                recommendedAzureSqlTargetType,
                recommendedSuitability,
                azureSqlMISuitabilityDetails,
                azureSqlDBSuitabilityDetails,
                azureSqlVmSuitabilityDetails,
                storageTypeBasedDetails?.ToList(),
                productSupportStatus,
                fciMetadata,
                availabilityReplicaSummary,
                isClustered,
                isHighAvailabilityEnabled,
                recommendedTargetReasonings?.ToList(),
                machineArmId,
                machineName,
                instanceName,
                sqlInstanceSdsArmId,
                sqlEdition,
                sqlVersion,
                numberOfCoresAllocated,
                percentageCoresUtilization,
                logicalDisks?.ToList(),
                databaseSummary,
                confidenceRatingInPercentage,
                sizingCriterion,
                createdOn,
                updatedOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SqlAssessmentV2IaasSuitabilityDetails"/>. </summary>
        /// <param name="azureSqlSku"> Gets the azure SQL IAAS SKU. </param>
        /// <param name="replicaAzureSqlSku"> Gets the replica azure SQL IAAS SKU. </param>
        /// <param name="sharedResources"> Gets the shared resources. </param>
        /// <param name="monthlyComputeCost"> Gets the monthly compute cost. </param>
        /// <param name="monthlyStorageCost"> Gets the monthly storage cost. </param>
        /// <param name="costComponents"> Gets the collection of cost components. </param>
        /// <param name="securitySuitability"> Gets the suitability for Microsoft cloud defender. </param>
        /// <param name="shouldProvisionReplicas"> Gets a value indicating whether replicas should be provisioned. </param>
        /// <param name="skuReplicationMode"> Gets the replication mode. </param>
        /// <param name="migrationGuidelines"> Gets the list of migration guidelines applicable to this target. </param>
        /// <param name="recommendationReasonings"> Gets the list of SQL recommendation Reasoning. </param>
        /// <param name="migrationTargetPlatform"> Gets the migration target platform. </param>
        /// <param name="suitability"> Gets the azure suitability. </param>
        /// <param name="migrationIssues"> Gets the list of migrations issues. </param>
        /// <returns> A new <see cref="Models.SqlAssessmentV2IaasSuitabilityDetails"/> instance for mocking. </returns>
        public static SqlAssessmentV2IaasSuitabilityDetails SqlAssessmentV2IaasSuitabilityDetails(AssessmentAzureSqlIaasSkuDto azureSqlSku = null, IEnumerable<AssessmentAzureSqlIaasSkuDto> replicaAzureSqlSku = null, SharedResourcesDto sharedResources = null, double? monthlyComputeCost = null, double? monthlyStorageCost = null, IEnumerable<AssessmentCostComponent> costComponents = null, MigrationAssessmentCloudSuitability? securitySuitability = null, bool? shouldProvisionReplicas = null, SkuReplicationMode? skuReplicationMode = null, IEnumerable<SqlMigrationGuideline> migrationGuidelines = null, IEnumerable<SqlRecommendationReasoning> recommendationReasonings = null, MigrationAssessmentTargetType? migrationTargetPlatform = null, MigrationAssessmentCloudSuitability? suitability = null, IEnumerable<SqlAssessmentMigrationIssue> migrationIssues = null)
        {
            replicaAzureSqlSku ??= new List<AssessmentAzureSqlIaasSkuDto>();
            costComponents ??= new List<AssessmentCostComponent>();
            migrationGuidelines ??= new List<SqlMigrationGuideline>();
            recommendationReasonings ??= new List<SqlRecommendationReasoning>();
            migrationIssues ??= new List<SqlAssessmentMigrationIssue>();

            return new SqlAssessmentV2IaasSuitabilityDetails(
                azureSqlSku,
                replicaAzureSqlSku?.ToList(),
                sharedResources,
                monthlyComputeCost,
                monthlyStorageCost,
                costComponents?.ToList(),
                securitySuitability,
                shouldProvisionReplicas,
                skuReplicationMode,
                migrationGuidelines?.ToList(),
                recommendationReasonings?.ToList(),
                migrationTargetPlatform,
                suitability,
                migrationIssues?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentAzureSqlIaasSkuDto"/>. </summary>
        /// <param name="virtualMachineSize"> Gets the The Azure Compute Virtual Machine. </param>
        /// <param name="dataDiskSizes"> Gets the The list of data disk sizes. </param>
        /// <param name="logDiskSizes"> Gets the The list of log disk sizes. </param>
        /// <param name="azureSqlTargetType"> Gets the target type. </param>
        /// <returns> A new <see cref="Models.AssessmentAzureSqlIaasSkuDto"/> instance for mocking. </returns>
        public static AssessmentAzureSqlIaasSkuDto AssessmentAzureSqlIaasSkuDto(AssessmentVmSkuDto virtualMachineSize = null, IEnumerable<AssessmentManagedDiskSkuDto> dataDiskSizes = null, IEnumerable<AssessmentManagedDiskSkuDto> logDiskSizes = null, MigrationAssessmentTargetType? azureSqlTargetType = null)
        {
            dataDiskSizes ??= new List<AssessmentManagedDiskSkuDto>();
            logDiskSizes ??= new List<AssessmentManagedDiskSkuDto>();

            return new AssessmentAzureSqlIaasSkuDto(virtualMachineSize, dataDiskSizes?.ToList(), logDiskSizes?.ToList(), azureSqlTargetType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentVmSkuDto"/>. </summary>
        /// <param name="azureVmFamily"> Gets the Virtual Machine Family, for example : standardMSFamily. </param>
        /// <param name="cores"> Gets the Compute Size in vCores. </param>
        /// <param name="azureSkuName"> Gets the Virtual Machine SKU name,: E.g. : Standard_F16s. </param>
        /// <param name="availableCores">
        /// Gets the Available vCores. This can be less than the vCores in the Constrained
        /// vCPU VM Sizes.
        /// </param>
        /// <param name="maxNetworkInterfaces"> Gets the Max network interfaces. </param>
        /// <returns> A new <see cref="Models.AssessmentVmSkuDto"/> instance for mocking. </returns>
        public static AssessmentVmSkuDto AssessmentVmSkuDto(AssessmentVmFamily? azureVmFamily = null, int? cores = null, AssessmentVmSize? azureSkuName = null, int? availableCores = null, int? maxNetworkInterfaces = null)
        {
            return new AssessmentVmSkuDto(
                azureVmFamily,
                cores,
                azureSkuName,
                availableCores,
                maxNetworkInterfaces,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessedSqlInstanceStorageDetails"/>. </summary>
        /// <param name="storageType"> Gets the storage type. </param>
        /// <param name="diskSizeInMB"> Gets the disk size in mb. </param>
        /// <param name="megabytesPerSecondOfRead"> Gets the megabytes per second of read. </param>
        /// <param name="megabytesPerSecondOfWrite"> Gets the megabytes per second of read. </param>
        /// <param name="numberOfReadOperationsPerSecond"> Gets the number of read operations per second. </param>
        /// <param name="numberOfWriteOperationsPerSecond"> Gets the number of write operations per second. </param>
        /// <returns> A new <see cref="Models.AssessedSqlInstanceStorageDetails"/> instance for mocking. </returns>
        public static AssessedSqlInstanceStorageDetails AssessedSqlInstanceStorageDetails(string storageType = null, double? diskSizeInMB = null, double? megabytesPerSecondOfRead = null, double? megabytesPerSecondOfWrite = null, double? numberOfReadOperationsPerSecond = null, double? numberOfWriteOperationsPerSecond = null)
        {
            return new AssessedSqlInstanceStorageDetails(
                storageType,
                diskSizeInMB,
                megabytesPerSecondOfRead,
                megabytesPerSecondOfWrite,
                numberOfReadOperationsPerSecond,
                numberOfWriteOperationsPerSecond,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentSqlFciMetadata"/>. </summary>
        /// <param name="state"> Gets the Sql fci meta data state. </param>
        /// <param name="isMultiSubnet"> Gets whether fci is multi subnet. </param>
        /// <param name="fciSharedDiskCount"> Gets the fci shared disk count. </param>
        /// <returns> A new <see cref="Models.AssessmentSqlFciMetadata"/> instance for mocking. </returns>
        public static AssessmentSqlFciMetadata AssessmentSqlFciMetadata(AssessmentSqlFciMetadataState? state = null, bool? isMultiSubnet = null, int? fciSharedDiskCount = null)
        {
            return new AssessmentSqlFciMetadata(state, isMultiSubnet, fciSharedDiskCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SqlAvailabilityReplicaSummary"/>. </summary>
        /// <param name="numberOfSynchronousReadReplicas"> Gets the number Of synchronous read replicas. </param>
        /// <param name="numberOfSynchronousNonReadReplicas"> Gets the number Of synchronous non read replicas. </param>
        /// <param name="numberOfAsynchronousReadReplicas"> Gets the number Of asynchronous read replicas. </param>
        /// <param name="numberOfAsynchronousNonReadReplicas"> Gets the number Of asynchronous non read replicas. </param>
        /// <param name="numberOfPrimaryReplicas"> Gets the number Of primary replicas. </param>
        /// <returns> A new <see cref="Models.SqlAvailabilityReplicaSummary"/> instance for mocking. </returns>
        public static SqlAvailabilityReplicaSummary SqlAvailabilityReplicaSummary(int? numberOfSynchronousReadReplicas = null, int? numberOfSynchronousNonReadReplicas = null, int? numberOfAsynchronousReadReplicas = null, int? numberOfAsynchronousNonReadReplicas = null, int? numberOfPrimaryReplicas = null)
        {
            return new SqlAvailabilityReplicaSummary(
                numberOfSynchronousReadReplicas,
                numberOfSynchronousNonReadReplicas,
                numberOfAsynchronousReadReplicas,
                numberOfAsynchronousNonReadReplicas,
                numberOfPrimaryReplicas,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessedSqlInstanceDiskDetails"/>. </summary>
        /// <param name="diskId"> Gets the disk id. </param>
        /// <param name="diskSizeInMB"> Gets the disk size in mb. </param>
        /// <param name="megabytesPerSecondOfRead"> Gets the megabytes per second of read. </param>
        /// <param name="megabytesPerSecondOfWrite"> Gets the megabytes per second of write. </param>
        /// <param name="numberOfReadOperationsPerSecond"> Gets the number of read operations per second. </param>
        /// <param name="numberOfWriteOperationsPerSecond"> Gets the number of write operations per second. </param>
        /// <returns> A new <see cref="Models.AssessedSqlInstanceDiskDetails"/> instance for mocking. </returns>
        public static AssessedSqlInstanceDiskDetails AssessedSqlInstanceDiskDetails(string diskId = null, double? diskSizeInMB = null, double? megabytesPerSecondOfRead = null, double? megabytesPerSecondOfWrite = null, double? numberOfReadOperationsPerSecond = null, double? numberOfWriteOperationsPerSecond = null)
        {
            return new AssessedSqlInstanceDiskDetails(
                diskId,
                diskSizeInMB,
                megabytesPerSecondOfRead,
                megabytesPerSecondOfWrite,
                numberOfReadOperationsPerSecond,
                numberOfWriteOperationsPerSecond,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessedSqlInstanceDatabaseSummary"/>. </summary>
        /// <param name="numberOfUserDatabases"> Gets the number of user databases. </param>
        /// <param name="totalDatabaseSizeInMB"> Gets the total database size in MB. </param>
        /// <param name="largestDatabaseSizeInMB"> Gets the largest database size in MB. </param>
        /// <param name="totalDiscoveredUserDatabases"> Gets the total discovered user databases. </param>
        /// <returns> A new <see cref="Models.AssessedSqlInstanceDatabaseSummary"/> instance for mocking. </returns>
        public static AssessedSqlInstanceDatabaseSummary AssessedSqlInstanceDatabaseSummary(int? numberOfUserDatabases = null, double? totalDatabaseSizeInMB = null, double? largestDatabaseSizeInMB = null, int? totalDiscoveredUserDatabases = null)
        {
            return new AssessedSqlInstanceDatabaseSummary(numberOfUserDatabases, totalDatabaseSizeInMB, largestDatabaseSizeInMB, totalDiscoveredUserDatabases, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessedSqlMachineData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="biosGuid"> Gets or sets the BIOS GUID for the machine. </param>
        /// <param name="fqdn"> Gets or sets the FQDN for the machine. </param>
        /// <param name="sqlInstances"> Gets the list of SQL instances discovered on the machine. </param>
        /// <param name="suitabilityDetail">
        /// Gets or sets the detailed messages that were set on the machine during
        /// evaluation.
        /// </param>
        /// <param name="suitabilityExplanation"> Gets or sets the explanation if machine is not suitable for cloud. </param>
        /// <param name="recommendedVmSize"> Gets or sets the Recommended Azure Size for the machine. </param>
        /// <param name="recommendedVmFamily"> Gets or sets the Recommended Azure VM Family for the machine. </param>
        /// <param name="productSupportStatus"> Gets the product support status related details. </param>
        /// <param name="recommendedVmSizeNumberOfCores"> Gets or sets the Number of cores for recommended size. </param>
        /// <param name="recommendedVmSizeMegabytesOfMemory"> Gets or sets the Megabytes of memory for recommended size. </param>
        /// <param name="monthlyComputeCost"> Gets or sets the monthly compute cost calculated for recommended size. </param>
        /// <param name="disks"> Gets the list of data disks that were assessed as part of this assessment. </param>
        /// <param name="networkAdapters"> Gets the list of network adapters that were assessed as part of this assessment. </param>
        /// <param name="monthlyBandwidthCost"> Gets or sets the monthly networking cost. </param>
        /// <param name="monthlyStorageCost"> Gets or sets the monthly total storage cost. </param>
        /// <param name="costComponents"> Gets the collection of cost components. </param>
        /// <param name="securitySuitability"> Gets the suitability for Microsoft cloud defender. </param>
        /// <param name="migrationGuidelines"> Gets the list of migration guidelines applicable. </param>
        /// <param name="bootType"> Boot type of machine discovered in private data center. </param>
        /// <param name="operatingSystemType"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemName"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemVersion"> Operating system version as reported by datacenter management solution. </param>
        /// <param name="operatingSystemArchitecture"> Operating system architecture as reported by datacenter management solution. </param>
        /// <param name="createdOn"> When was machine first created. </param>
        /// <param name="updatedOn"> When was machine last updated. </param>
        /// <param name="displayName"> Display Name of the Machine. </param>
        /// <param name="typePropertiesType"> Assessed machine type. </param>
        /// <param name="description"> Description for the machine. </param>
        /// <param name="datacenterMachineArmId"> Data center machine ARM id. </param>
        /// <param name="datacenterManagementServerArmId"> Data center management server ARM id. </param>
        /// <param name="datacenterManagementServerName"> Data center management server name. </param>
        /// <param name="megabytesOfMemory"> Megabytes of memory found allocated for the machine in private data center. </param>
        /// <param name="numberOfCores"> Number of CPU cores found on the machine. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="percentageCoresUtilization">
        /// Percentile of Percentage of Cores Utilized noted during time period T.
        ///
        ///    Here N and T are settings on Assessment.
        /// </param>
        /// <param name="percentageMemoryUtilization">
        /// Percentile of Percentage of Memory Utilized noted during time period T.
        ///
        ///     Here N and T are settings on Assessment.
        /// </param>
        /// <param name="suitability">
        /// Gets a value indicating whether machine is suitable for the cloud platform
        /// selected.
        /// </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessedSqlMachineData"/> instance for mocking. </returns>
        public static MigrationAssessedSqlMachineData MigrationAssessedSqlMachineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string biosGuid = null, string fqdn = null, IEnumerable<AssessedSqlInstanceSummary> sqlInstances = null, AssessmentVmSuitabilityDetail? suitabilityDetail = null, AssessmentVmSuitabilityExplanation? suitabilityExplanation = null, AssessmentVmSize? recommendedVmSize = null, AssessmentVmFamily? recommendedVmFamily = null, AssessmentProductSupportStatus productSupportStatus = null, int? recommendedVmSizeNumberOfCores = null, double? recommendedVmSizeMegabytesOfMemory = null, double? monthlyComputeCost = null, IReadOnlyDictionary<string, MigrationAssessedDataDisk> disks = null, IReadOnlyDictionary<string, SqlAssessedNetworkAdapter> networkAdapters = null, double? monthlyBandwidthCost = null, double? monthlyStorageCost = null, IEnumerable<AssessmentCostComponent> costComponents = null, MigrationAssessmentCloudSuitability? securitySuitability = null, IEnumerable<SqlMigrationGuideline> migrationGuidelines = null, AssessedMachineBootType? bootType = null, string operatingSystemType = null, string operatingSystemName = null, string operatingSystemVersion = null, GuestOperatingSystemArchitecture? operatingSystemArchitecture = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, string displayName = null, MigrationAssessedMachineType? typePropertiesType = null, string description = null, ResourceIdentifier datacenterMachineArmId = null, ResourceIdentifier datacenterManagementServerArmId = null, string datacenterManagementServerName = null, double? megabytesOfMemory = null, int? numberOfCores = null, double? confidenceRatingInPercentage = null, double? percentageCoresUtilization = null, double? percentageMemoryUtilization = null, MigrationAssessmentCloudSuitability? suitability = null, AssessmentSizingCriterion? sizingCriterion = null)
        {
            sqlInstances ??= new List<AssessedSqlInstanceSummary>();
            disks ??= new Dictionary<string, MigrationAssessedDataDisk>();
            networkAdapters ??= new Dictionary<string, SqlAssessedNetworkAdapter>();
            costComponents ??= new List<AssessmentCostComponent>();
            migrationGuidelines ??= new List<SqlMigrationGuideline>();

            return new MigrationAssessedSqlMachineData(
                id,
                name,
                resourceType,
                systemData,
                biosGuid,
                fqdn,
                sqlInstances?.ToList(),
                suitabilityDetail,
                suitabilityExplanation,
                recommendedVmSize,
                recommendedVmFamily,
                productSupportStatus,
                recommendedVmSizeNumberOfCores,
                recommendedVmSizeMegabytesOfMemory,
                monthlyComputeCost,
                disks,
                networkAdapters,
                monthlyBandwidthCost,
                monthlyStorageCost,
                costComponents?.ToList(),
                securitySuitability,
                migrationGuidelines?.ToList(),
                bootType,
                operatingSystemType,
                operatingSystemName,
                operatingSystemVersion,
                operatingSystemArchitecture,
                createdOn,
                updatedOn,
                displayName,
                typePropertiesType,
                description,
                datacenterMachineArmId,
                datacenterManagementServerArmId,
                datacenterManagementServerName,
                megabytesOfMemory,
                numberOfCores,
                confidenceRatingInPercentage,
                percentageCoresUtilization,
                percentageMemoryUtilization,
                suitability,
                sizingCriterion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessedSqlInstanceSummary"/>. </summary>
        /// <param name="instanceId"> Gets the instance id. </param>
        /// <param name="instanceName"> Gets the instance name. </param>
        /// <param name="sqlInstanceSdsArmId"> Gets the instance arm id. </param>
        /// <param name="sqlInstanceEntityId"> Gets the instance entity id. </param>
        /// <param name="sqlEdition"> Gets the Sql edition. </param>
        /// <param name="sqlVersion"> Gets the Sql version. </param>
        /// <param name="isClustered"> Gets whether Sql is clustered. </param>
        /// <param name="isHighAvailabilityEnabled"> Gets whether Sql is highly available. </param>
        /// <param name="sqlFciState"> Gets the Sql Fci state. </param>
        /// <returns> A new <see cref="Models.AssessedSqlInstanceSummary"/> instance for mocking. </returns>
        public static AssessedSqlInstanceSummary AssessedSqlInstanceSummary(string instanceId = null, string instanceName = null, ResourceIdentifier sqlInstanceSdsArmId = null, string sqlInstanceEntityId = null, string sqlEdition = null, string sqlVersion = null, bool? isClustered = null, bool? isHighAvailabilityEnabled = null, AssessmentSqlFciState? sqlFciState = null)
        {
            return new AssessedSqlInstanceSummary(
                instanceId,
                instanceName,
                sqlInstanceSdsArmId,
                sqlInstanceEntityId,
                sqlEdition,
                sqlVersion,
                isClustered,
                isHighAvailabilityEnabled,
                sqlFciState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MigrationAssessedDataDisk"/>. </summary>
        /// <param name="suitability"> Gets the suitability. </param>
        /// <param name="suitabilityExplanation"> Gets the suitability explanation. </param>
        /// <param name="suitabilityDetail"> Gets the suitability detail. </param>
        /// <param name="recommendedDiskSize"> Gets the recommended disk size. </param>
        /// <param name="recommendedDiskType"> Gets the recommended disk type. </param>
        /// <param name="recommendedDiskSizeGigabytes"> Gets the recommended disk size. </param>
        /// <param name="recommendDiskThroughputInMbps"> Gets the recommended disk throughput. </param>
        /// <param name="recommendedDiskIops"> Gets the recommended disk iops. </param>
        /// <param name="monthlyStorageCost"> Gets the monthly storage cost. </param>
        /// <param name="name"> Gets the name. </param>
        /// <param name="displayName"> Gets the machine display name. </param>
        /// <param name="gigabytesProvisioned"> Gets the gigabytes provisioned. </param>
        /// <param name="megabytesPerSecondOfRead"> Gets the megabytes per second of read. </param>
        /// <param name="megabytesPerSecondOfWrite"> Gets the megabytes per second of write. </param>
        /// <param name="numberOfReadOperationsPerSecond"> Gets the number of read operations per second. </param>
        /// <param name="numberOfWriteOperationsPerSecond"> Gets the number of write operations per second. </param>
        /// <returns> A new <see cref="Models.MigrationAssessedDataDisk"/> instance for mocking. </returns>
        public static MigrationAssessedDataDisk MigrationAssessedDataDisk(MigrationAssessmentCloudSuitability? suitability = null, AssessmentSuitabilityExplanation? suitabilityExplanation = null, AssessmentDiskSuitabilityDetail? suitabilityDetail = null, AssessmentDiskSize? recommendedDiskSize = null, AssessmentDiskType? recommendedDiskType = null, int? recommendedDiskSizeGigabytes = null, double? recommendDiskThroughputInMbps = null, double? recommendedDiskIops = null, double? monthlyStorageCost = null, string name = null, string displayName = null, double? gigabytesProvisioned = null, double? megabytesPerSecondOfRead = null, double? megabytesPerSecondOfWrite = null, double? numberOfReadOperationsPerSecond = null, double? numberOfWriteOperationsPerSecond = null)
        {
            return new MigrationAssessedDataDisk(
                suitability,
                suitabilityExplanation,
                suitabilityDetail,
                recommendedDiskSize,
                recommendedDiskType,
                recommendedDiskSizeGigabytes,
                recommendDiskThroughputInMbps,
                recommendedDiskIops,
                monthlyStorageCost,
                name,
                displayName,
                gigabytesProvisioned,
                megabytesPerSecondOfRead,
                megabytesPerSecondOfWrite,
                numberOfReadOperationsPerSecond,
                numberOfWriteOperationsPerSecond,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SqlAssessedNetworkAdapter"/>. </summary>
        /// <param name="suitability"> Gets the suitability. </param>
        /// <param name="suitabilityDetail"> Gets the suitability detail. </param>
        /// <param name="suitabilityExplanation"> Gets the suitability explanation. </param>
        /// <param name="monthlyBandwidthCosts"> Gets the monthly bandwidth costs. </param>
        /// <param name="netGigabytesTransmittedPerMonth"> Gets the net gigabytes transmitted per month. </param>
        /// <param name="name"> Gets the name. </param>
        /// <param name="displayName"> Gets the display name. </param>
        /// <param name="macAddress"> Gets the mac address. </param>
        /// <param name="ipAddresses"> Gets the ip addresses. </param>
        /// <param name="megabytesPerSecondReceived"> Gets the megabytes per second received. </param>
        /// <param name="megabytesPerSecondTransmitted"> Gets the megabytes per second transmitted. </param>
        /// <returns> A new <see cref="Models.SqlAssessedNetworkAdapter"/> instance for mocking. </returns>
        public static SqlAssessedNetworkAdapter SqlAssessedNetworkAdapter(MigrationAssessmentCloudSuitability? suitability = null, NetworkAdapterSuitabilityDetail? suitabilityDetail = null, NetworkAdapterSuitabilityExplanation? suitabilityExplanation = null, double? monthlyBandwidthCosts = null, double? netGigabytesTransmittedPerMonth = null, string name = null, string displayName = null, string macAddress = null, IEnumerable<string> ipAddresses = null, double? megabytesPerSecondReceived = null, double? megabytesPerSecondTransmitted = null)
        {
            ipAddresses ??= new List<string>();

            return new SqlAssessedNetworkAdapter(
                suitability,
                suitabilityDetail,
                suitabilityExplanation,
                monthlyBandwidthCosts,
                netGigabytesTransmittedPerMonth,
                name,
                displayName,
                macAddress,
                ipAddresses?.ToList(),
                megabytesPerSecondReceived,
                megabytesPerSecondTransmitted,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessedSqlRecommendedEntityData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="machineName"> Gets or sets machine name. </param>
        /// <param name="instanceName"> Gets or sets SQL instance name. </param>
        /// <param name="productSupportStatus"> Gets the product support status related details. </param>
        /// <param name="dbCount"> Gets or sets assessed database count. </param>
        /// <param name="discoveredDBCount"> Gets or sets the total discovered database count. </param>
        /// <param name="hasScanOccurred">
        /// Gets or sets a value indicating whether instance deep discovery has occurred or
        /// not.
        /// </param>
        /// <param name="recommendedAzureSqlTargetType"> Gets or sets the recommended azure SQL target type. </param>
        /// <param name="recommendedSuitability"> Gets or sets the recommended azure SQL suitability. </param>
        /// <param name="azureSqlMISuitabilityDetails"> SQL instance azure SQL MI suitability details. </param>
        /// <param name="azureSqlDBSuitabilityDetails"> SQL instance azure SQL DB suitability details. </param>
        /// <param name="azureSqlVmSuitabilityDetails"> SQL instance azure SQL VM suitability details. </param>
        /// <param name="assessedSqlEntityArmId"> Gets or sets Arm id of assessed entity. </param>
        /// <param name="isClustered"> Gets or sets a value indicating whether the SQL instance is clustered or not. </param>
        /// <param name="isHighAvailabilityEnabled"> Gets or sets a value indicating whether the high availability is enabled or not. </param>
        /// <param name="sqlEdition"> Gets the SQL edition from the recommended entity if applicable. </param>
        /// <param name="sqlVersion"> Gets the SQL version from the recommended entity if applicable. </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessedSqlRecommendedEntityData"/> instance for mocking. </returns>
        public static MigrationAssessedSqlRecommendedEntityData MigrationAssessedSqlRecommendedEntityData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string machineName = null, string instanceName = null, AssessmentProductSupportStatus productSupportStatus = null, int? dbCount = null, int? discoveredDBCount = null, bool? hasScanOccurred = null, MigrationAssessmentTargetType? recommendedAzureSqlTargetType = null, AssessedSqlRecommendedSuitability? recommendedSuitability = null, SqlAssessmentV2PaasSuitabilityDetails azureSqlMISuitabilityDetails = null, SqlAssessmentV2PaasSuitabilityDetails azureSqlDBSuitabilityDetails = null, SqlAssessmentV2IaasSuitabilityDetails azureSqlVmSuitabilityDetails = null, ResourceIdentifier assessedSqlEntityArmId = null, bool? isClustered = null, bool? isHighAvailabilityEnabled = null, string sqlEdition = null, string sqlVersion = null, AssessmentSizingCriterion? sizingCriterion = null)
        {
            return new MigrationAssessedSqlRecommendedEntityData(
                id,
                name,
                resourceType,
                systemData,
                machineName,
                instanceName,
                productSupportStatus,
                dbCount,
                discoveredDBCount,
                hasScanOccurred,
                recommendedAzureSqlTargetType,
                recommendedSuitability,
                azureSqlMISuitabilityDetails,
                azureSqlDBSuitabilityDetails,
                azureSqlVmSuitabilityDetails,
                assessedSqlEntityArmId,
                isClustered,
                isHighAvailabilityEnabled,
                sqlEdition,
                sqlVersion,
                sizingCriterion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationSqlAssessmentV2SummaryData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="assessmentSummary"> Gets or sets the Assessment summary. </param>
        /// <param name="distributionBySupportStatus"> Gets the distribution of sqlInstances by support status. </param>
        /// <param name="distributionByServicePackInsight"> Gets the distribution distribution of sqlInstances by service pack insight. </param>
        /// <param name="distributionBySqlVersion"> Gets the distribution of sqlInstances by sql version. </param>
        /// <param name="distributionBySqlEdition"> Gets the distribution of sqlInstances by sql edition. </param>
        /// <param name="instanceDistributionBySizingCriterion"> Gets the instance distribution by sizing criterion. </param>
        /// <param name="databaseDistributionBySizingCriterion"> Gets the database distribution by sizing criterion. </param>
        /// <param name="numberOfMachines"> Number of machines part of the assessment. </param>
        /// <param name="numberOfSqlInstances"> Number of sql instances part of the assessment. </param>
        /// <param name="numberOfSuccessfullyDiscoveredSqlInstances"> Number of successfully discovered sql instances part of the assessment. </param>
        /// <param name="numberOfSqlDatabases"> Number of sql databases part of the assessment. </param>
        /// <param name="numberOfFciInstances"> Number of sql failover cluster instances part of the assessment. </param>
        /// <param name="numberOfSqlAvailabilityGroups"> Number of sql availability groups part of the assessment. </param>
        /// <returns> A new <see cref="Assessment.MigrationSqlAssessmentV2SummaryData"/> instance for mocking. </returns>
        public static MigrationSqlAssessmentV2SummaryData MigrationSqlAssessmentV2SummaryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IReadOnlyDictionary<string, SqlAssessmentV2SummaryDetails> assessmentSummary = null, IReadOnlyDictionary<string, int> distributionBySupportStatus = null, IReadOnlyDictionary<string, int> distributionByServicePackInsight = null, IReadOnlyDictionary<string, int> distributionBySqlVersion = null, IReadOnlyDictionary<string, int> distributionBySqlEdition = null, IReadOnlyDictionary<string, int> instanceDistributionBySizingCriterion = null, IReadOnlyDictionary<string, int> databaseDistributionBySizingCriterion = null, int? numberOfMachines = null, int? numberOfSqlInstances = null, int? numberOfSuccessfullyDiscoveredSqlInstances = null, int? numberOfSqlDatabases = null, int? numberOfFciInstances = null, int? numberOfSqlAvailabilityGroups = null)
        {
            assessmentSummary ??= new Dictionary<string, SqlAssessmentV2SummaryDetails>();
            distributionBySupportStatus ??= new Dictionary<string, int>();
            distributionByServicePackInsight ??= new Dictionary<string, int>();
            distributionBySqlVersion ??= new Dictionary<string, int>();
            distributionBySqlEdition ??= new Dictionary<string, int>();
            instanceDistributionBySizingCriterion ??= new Dictionary<string, int>();
            databaseDistributionBySizingCriterion ??= new Dictionary<string, int>();

            return new MigrationSqlAssessmentV2SummaryData(
                id,
                name,
                resourceType,
                systemData,
                assessmentSummary,
                distributionBySupportStatus,
                distributionByServicePackInsight,
                distributionBySqlVersion,
                distributionBySqlEdition,
                instanceDistributionBySizingCriterion,
                databaseDistributionBySizingCriterion,
                numberOfMachines,
                numberOfSqlInstances,
                numberOfSuccessfullyDiscoveredSqlInstances,
                numberOfSqlDatabases,
                numberOfFciInstances,
                numberOfSqlAvailabilityGroups,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SqlAssessmentV2SummaryDetails"/>. </summary>
        /// <param name="suitabilitySummary"> Sql assessment summary data. </param>
        /// <param name="monthlyComputeCost"> Monthly compute cost. </param>
        /// <param name="monthlyStorageCost"> Monthly storage cost. </param>
        /// <param name="monthlyLicenseCost"> Monthly license cost. </param>
        /// <param name="confidenceScore"> Confidence Rating. </param>
        /// <param name="monthlySecurityCost"> Monthly security cost. </param>
        /// <returns> A new <see cref="Models.SqlAssessmentV2SummaryDetails"/> instance for mocking. </returns>
        public static SqlAssessmentV2SummaryDetails SqlAssessmentV2SummaryDetails(IReadOnlyDictionary<string, int> suitabilitySummary = null, double? monthlyComputeCost = null, double? monthlyStorageCost = null, double? monthlyLicenseCost = null, double? confidenceScore = null, double? monthlySecurityCost = null)
        {
            suitabilitySummary ??= new Dictionary<string, int>();

            return new SqlAssessmentV2SummaryDetails(
                suitabilitySummary,
                monthlyComputeCost,
                monthlyStorageCost,
                monthlyLicenseCost,
                confidenceScore,
                monthlySecurityCost,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentHyperVCollectorData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="agentProperties"> Gets or sets the collector agent properties. </param>
        /// <param name="discoverySiteId"> Gets the discovery site id. </param>
        /// <param name="createdOn"> Gets the Timestamp when collector was created. </param>
        /// <param name="updatedOn"> Timestamp when collector was last updated. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentHyperVCollectorData"/> instance for mocking. </returns>
        public static MigrationAssessmentHyperVCollectorData MigrationAssessmentHyperVCollectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationAssessmentProvisioningState? provisioningState = null, CollectorAgentPropertiesBase agentProperties = null, string discoverySiteId = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null)
        {
            return new MigrationAssessmentHyperVCollectorData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                agentProperties,
                discoverySiteId,
                createdOn,
                updatedOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentImportCollectorData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="discoverySiteId"> Gets the discovery site id. </param>
        /// <param name="createdOn"> Gets the Timestamp when collector was created. </param>
        /// <param name="updatedOn"> Timestamp when collector was last updated. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentImportCollectorData"/> instance for mocking. </returns>
        public static MigrationAssessmentImportCollectorData MigrationAssessmentImportCollectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationAssessmentProvisioningState? provisioningState = null, string discoverySiteId = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null)
        {
            return new MigrationAssessmentImportCollectorData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                discoverySiteId,
                createdOn,
                updatedOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentMachineData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="workloadSummary"> Gets or sets workload summary. </param>
        /// <param name="errors"> List of errors for this machine. </param>
        /// <param name="hostProcessor"> Gets Processor details of the host. </param>
        /// <param name="productSupportStatus"> Gets the product support status related details. </param>
        /// <param name="discoveryMachineArmId"> Site id of machine discovered in private data center. </param>
        /// <param name="datacenterManagementServerArmId"> The data center management server ARM Id for the machine. </param>
        /// <param name="datacenterManagementServerName"> The data center management server name for the machine. </param>
        /// <param name="bootType"> Boot type of machine discovered in private data center. </param>
        /// <param name="displayName"> Display Name of the Machine. </param>
        /// <param name="megabytesOfMemory"> Megabytes of memory found allocated for the machine in private data center. </param>
        /// <param name="numberOfCores"> Number of CPU cores found on the machine. </param>
        /// <param name="operatingSystemType"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemName"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemVersion"> Operating system version as reported by datacenter management solution. </param>
        /// <param name="description"> Description for the machine. </param>
        /// <param name="createdOn"> When was machine first created. </param>
        /// <param name="disks"> Disks attached to the machine discovered in private data center. </param>
        /// <param name="groups"> Gets the References to the groups that this machine is member of. </param>
        /// <param name="networkAdapters"> Network adapters attached to the machine discovered in private data center. </param>
        /// <param name="sqlInstances"> SQL instances discovered on the machine. </param>
        /// <param name="webApplications"> Web applications discovered on the machine. </param>
        /// <param name="updatedOn"> When was machine last updated. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentMachineData"/> instance for mocking. </returns>
        public static MigrationAssessmentMachineData MigrationAssessmentMachineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AssessmentWorkloadSummary workloadSummary = null, IEnumerable<MigrationAssessmentError> errors = null, AssessedMachineProcessorInfo hostProcessor = null, AssessmentProductSupportStatus productSupportStatus = null, ResourceIdentifier discoveryMachineArmId = null, ResourceIdentifier datacenterManagementServerArmId = null, string datacenterManagementServerName = null, AssessedMachineBootType? bootType = null, string displayName = null, double? megabytesOfMemory = null, int? numberOfCores = null, string operatingSystemType = null, string operatingSystemName = null, string operatingSystemVersion = null, string description = null, DateTimeOffset? createdOn = null, IReadOnlyDictionary<string, MigrationAssessmentDisk> disks = null, IEnumerable<string> groups = null, IReadOnlyDictionary<string, MigrationAssessmentNetworkAdapter> networkAdapters = null, IEnumerable<string> sqlInstances = null, IEnumerable<string> webApplications = null, DateTimeOffset? updatedOn = null)
        {
            errors ??= new List<MigrationAssessmentError>();
            disks ??= new Dictionary<string, MigrationAssessmentDisk>();
            groups ??= new List<string>();
            networkAdapters ??= new Dictionary<string, MigrationAssessmentNetworkAdapter>();
            sqlInstances ??= new List<string>();
            webApplications ??= new List<string>();

            return new MigrationAssessmentMachineData(
                id,
                name,
                resourceType,
                systemData,
                workloadSummary,
                errors?.ToList(),
                hostProcessor,
                productSupportStatus,
                discoveryMachineArmId,
                datacenterManagementServerArmId,
                datacenterManagementServerName,
                bootType,
                displayName,
                megabytesOfMemory,
                numberOfCores,
                operatingSystemType,
                operatingSystemName,
                operatingSystemVersion,
                description,
                createdOn,
                disks,
                groups?.ToList(),
                networkAdapters,
                sqlInstances?.ToList(),
                webApplications?.ToList(),
                updatedOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentWorkloadSummary"/>. </summary>
        /// <param name="oracleInstances"> Gets or sets oracle databases. </param>
        /// <param name="springApps"> Gets or sets oracle databases. </param>
        /// <returns> A new <see cref="Models.AssessmentWorkloadSummary"/> instance for mocking. </returns>
        public static AssessmentWorkloadSummary AssessmentWorkloadSummary(int? oracleInstances = null, int? springApps = null)
        {
            return new AssessmentWorkloadSummary(oracleInstances, springApps, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MigrationAssessmentDisk"/>. </summary>
        /// <param name="gigabytesAllocated"> Gigabytes of storage provisioned for this disk. </param>
        /// <param name="displayName"> User friendly name of the disk. </param>
        /// <returns> A new <see cref="Models.MigrationAssessmentDisk"/> instance for mocking. </returns>
        public static MigrationAssessmentDisk MigrationAssessmentDisk(double? gigabytesAllocated = null, string displayName = null)
        {
            return new MigrationAssessmentDisk(gigabytesAllocated, displayName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MigrationAssessmentNetworkAdapter"/>. </summary>
        /// <param name="macAddress"> MAC Address of the network adapter. </param>
        /// <param name="ipAddresses"> List of IP Addresses on the network adapter. </param>
        /// <param name="displayName"> User friendly name of the network adapter. </param>
        /// <returns> A new <see cref="Models.MigrationAssessmentNetworkAdapter"/> instance for mocking. </returns>
        public static MigrationAssessmentNetworkAdapter MigrationAssessmentNetworkAdapter(string macAddress = null, IEnumerable<string> ipAddresses = null, string displayName = null)
        {
            ipAddresses ??= new List<string>();

            return new MigrationAssessmentNetworkAdapter(macAddress, ipAddresses?.ToList(), displayName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentPrivateLinkResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> The private link resource private link DNS zone name. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentPrivateLinkResourceData"/> instance for mocking. </returns>
        public static MigrationAssessmentPrivateLinkResourceData MigrationAssessmentPrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new MigrationAssessmentPrivateLinkResourceData(
                id,
                name,
                resourceType,
                systemData,
                groupId,
                requiredMembers?.ToList(),
                requiredZoneNames?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentProjectSummaryData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="errorSummaryAffectedEntities">
        /// Gets the Error summary by feature. Contains number of affected Entities per
        /// feature.
        /// </param>
        /// <param name="numberOfPrivateEndpointConnections"> Gets the number of private endpoint connections. </param>
        /// <param name="numberOfGroups"> Gets the number of groups created in this project. </param>
        /// <param name="numberOfMachines"> Gets the number of machines part of this project. </param>
        /// <param name="numberOfImportMachines"> Gets the number of import machines part of this project. </param>
        /// <param name="numberOfAssessments"> Gets the number of assessments created in this project. </param>
        /// <param name="lastAssessedOn"> Gets the last assessment timestamp. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentProjectSummaryData"/> instance for mocking. </returns>
        public static MigrationAssessmentProjectSummaryData MigrationAssessmentProjectSummaryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<AssessmentErrorSummary> errorSummaryAffectedEntities = null, int? numberOfPrivateEndpointConnections = null, int? numberOfGroups = null, int? numberOfMachines = null, int? numberOfImportMachines = null, int? numberOfAssessments = null, DateTimeOffset? lastAssessedOn = null)
        {
            errorSummaryAffectedEntities ??= new List<AssessmentErrorSummary>();

            return new MigrationAssessmentProjectSummaryData(
                id,
                name,
                resourceType,
                systemData,
                errorSummaryAffectedEntities?.ToList(),
                numberOfPrivateEndpointConnections,
                numberOfGroups,
                numberOfMachines,
                numberOfImportMachines,
                numberOfAssessments,
                lastAssessedOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentErrorSummary"/>. </summary>
        /// <param name="assessmentType"> Gets the assessment type. </param>
        /// <param name="count"> Gets the affected entity count. </param>
        /// <returns> A new <see cref="Models.AssessmentErrorSummary"/> instance for mocking. </returns>
        public static AssessmentErrorSummary AssessmentErrorSummary(MigrationAssessmentType? assessmentType = null, int? count = null)
        {
            return new AssessmentErrorSummary(assessmentType, count, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentServerCollectorData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="agentProperties"> Gets or sets the collector agent properties. </param>
        /// <param name="discoverySiteId"> Gets the discovery site id. </param>
        /// <param name="createdOn"> Gets the Timestamp when collector was created. </param>
        /// <param name="updatedOn"> Timestamp when collector was last updated. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentServerCollectorData"/> instance for mocking. </returns>
        public static MigrationAssessmentServerCollectorData MigrationAssessmentServerCollectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationAssessmentProvisioningState? provisioningState = null, CollectorAgentPropertiesBase agentProperties = null, string discoverySiteId = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null)
        {
            return new MigrationAssessmentServerCollectorData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                agentProperties,
                discoverySiteId,
                createdOn,
                updatedOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationSqlAssessmentOptionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="vmFamilies"> Gets the list of VM families. </param>
        /// <param name="reservedInstanceVmFamilies"> Gets the Reserved Instance VM Families list. </param>
        /// <param name="premiumDiskVmFamilies"> Gets the Premium disk VM Families list. </param>
        /// <param name="savingsPlanVmFamilies"> Gets or sets the Premium disk VM Families list. </param>
        /// <param name="savingsPlanSupportedLocations"> Gets or sets the list of Azure locations supporting Saving Plans for IAAS. </param>
        /// <param name="savingsPlanSupportedLocationsForPaas"> Gets or sets the list of Azure locations supporting Saving Plans for PAAS. </param>
        /// <param name="reservedInstanceSupportedLocationsForIaas"> Gets or sets the list of Azure locations supporting Reserved Instances for IAAS. </param>
        /// <param name="savingsPlanSupportedOffers"> Gets or sets the list of Azure Offers supporting Saving Plans. </param>
        /// <param name="sqlSkus"> Gets or sets the list of SQL target SKU properties for dropdowns. </param>
        /// <param name="reservedInstanceSqlTargets"> Gets or sets the Reserved Instance SQL target types. </param>
        /// <param name="reservedInstanceSupportedLocations"> Gets or sets the list of Azure locations supporting Reserved Instances. </param>
        /// <param name="reservedInstanceSupportedCurrencies"> Gets or sets the list of currencies supported for Reserved Instances. </param>
        /// <param name="reservedInstanceSupportedOffers"> Gets or sets the list of offers supported for Reserved Instances. </param>
        /// <param name="supportedOffers"> Gets or sets the list of offers supported for SQL assessments. </param>
        /// <returns> A new <see cref="Assessment.MigrationSqlAssessmentOptionData"/> instance for mocking. </returns>
        public static MigrationSqlAssessmentOptionData MigrationSqlAssessmentOptionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<AssessmentVmFamilyConfig> vmFamilies = null, IEnumerable<AssessmentVmFamily> reservedInstanceVmFamilies = null, IEnumerable<AssessmentVmFamily> premiumDiskVmFamilies = null, IEnumerable<AssessmentVmFamily> savingsPlanVmFamilies = null, IEnumerable<AzureLocation> savingsPlanSupportedLocations = null, IEnumerable<AzureLocation> savingsPlanSupportedLocationsForPaas = null, IEnumerable<AzureLocation> reservedInstanceSupportedLocationsForIaas = null, IEnumerable<AssessmentOfferCode> savingsPlanSupportedOffers = null, IEnumerable<SqlPaasTargetConfig> sqlSkus = null, IEnumerable<MigrationAssessmentTargetType> reservedInstanceSqlTargets = null, IEnumerable<AzureLocation> reservedInstanceSupportedLocations = null, IEnumerable<AssessmentCurrency> reservedInstanceSupportedCurrencies = null, IEnumerable<AssessmentOfferCode> reservedInstanceSupportedOffers = null, IEnumerable<AssessmentOfferCode> supportedOffers = null)
        {
            vmFamilies ??= new List<AssessmentVmFamilyConfig>();
            reservedInstanceVmFamilies ??= new List<AssessmentVmFamily>();
            premiumDiskVmFamilies ??= new List<AssessmentVmFamily>();
            savingsPlanVmFamilies ??= new List<AssessmentVmFamily>();
            savingsPlanSupportedLocations ??= new List<AzureLocation>();
            savingsPlanSupportedLocationsForPaas ??= new List<AzureLocation>();
            reservedInstanceSupportedLocationsForIaas ??= new List<AzureLocation>();
            savingsPlanSupportedOffers ??= new List<AssessmentOfferCode>();
            sqlSkus ??= new List<SqlPaasTargetConfig>();
            reservedInstanceSqlTargets ??= new List<MigrationAssessmentTargetType>();
            reservedInstanceSupportedLocations ??= new List<AzureLocation>();
            reservedInstanceSupportedCurrencies ??= new List<AssessmentCurrency>();
            reservedInstanceSupportedOffers ??= new List<AssessmentOfferCode>();
            supportedOffers ??= new List<AssessmentOfferCode>();

            return new MigrationSqlAssessmentOptionData(
                id,
                name,
                resourceType,
                systemData,
                vmFamilies?.ToList(),
                reservedInstanceVmFamilies?.ToList(),
                premiumDiskVmFamilies?.ToList(),
                savingsPlanVmFamilies?.ToList(),
                savingsPlanSupportedLocations?.ToList(),
                savingsPlanSupportedLocationsForPaas?.ToList(),
                reservedInstanceSupportedLocationsForIaas?.ToList(),
                savingsPlanSupportedOffers?.ToList(),
                sqlSkus?.ToList(),
                reservedInstanceSqlTargets?.ToList(),
                reservedInstanceSupportedLocations?.ToList(),
                reservedInstanceSupportedCurrencies?.ToList(),
                reservedInstanceSupportedOffers?.ToList(),
                supportedOffers?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentSqlCollectorData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="agentProperties"> Gets or sets the collector agent properties. </param>
        /// <param name="discoverySiteId"> Gets the discovery site id. </param>
        /// <param name="createdOn"> Gets the Timestamp when collector was created. </param>
        /// <param name="updatedOn"> Timestamp when collector was last updated. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentSqlCollectorData"/> instance for mocking. </returns>
        public static MigrationAssessmentSqlCollectorData MigrationAssessmentSqlCollectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationAssessmentProvisioningState? provisioningState = null, CollectorAgentPropertiesBase agentProperties = null, string discoverySiteId = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null)
        {
            return new MigrationAssessmentSqlCollectorData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                agentProperties,
                discoverySiteId,
                createdOn,
                updatedOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Assessment.MigrationAssessmentVMwareCollectorData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="agentProperties"> Gets or sets the collector agent properties. </param>
        /// <param name="discoverySiteId"> Gets the discovery site id. </param>
        /// <param name="createdOn"> Gets the Timestamp when collector was created. </param>
        /// <param name="updatedOn"> Timestamp when collector was last updated. </param>
        /// <returns> A new <see cref="Assessment.MigrationAssessmentVMwareCollectorData"/> instance for mocking. </returns>
        public static MigrationAssessmentVMwareCollectorData MigrationAssessmentVMwareCollectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationAssessmentProvisioningState? provisioningState = null, CollectorAgentPropertiesBase agentProperties = null, string discoverySiteId = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null)
        {
            return new MigrationAssessmentVMwareCollectorData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                agentProperties,
                discoverySiteId,
                createdOn,
                updatedOn,
                serializedAdditionalRawData: null);
        }
    }
}
