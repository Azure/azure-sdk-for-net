// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    /// <summary>
    /// A class representing the MigrationAssessmentProjectSummary data model.
    /// Assessment project summary resource.
    /// </summary>
    public partial class MigrationAssessmentProjectSummaryData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MigrationAssessmentProjectSummaryData"/>. </summary>
        public MigrationAssessmentProjectSummaryData()
        {
            ErrorSummaryAffectedEntities = new ChangeTrackingList<AssessmentErrorSummary>();
        }

        /// <summary> Initializes a new instance of <see cref="MigrationAssessmentProjectSummaryData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="errorSummaryAffectedEntities">
        /// Gets the Error summary by feature. Contains number of affected Entities per
        /// feature.
        /// </param>
        /// <param name="numberOfPrivateEndpointConnections"> Gets the number of private endpoint connections. </param>
        /// <param name="numberOfGroups"> Gets the number of groups created in this project. </param>
        /// <param name="numberOfMachines"> Gets the number of machines part of this project. </param>
        /// <param name="numberOfImportMachines"> Gets the number of import machines part of this project. </param>
        /// <param name="numberOfAssessments"> Gets the number of assessments created in this project. </param>
        /// <param name="lastAssessedOn"> Gets the last assessment timestamp. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MigrationAssessmentProjectSummaryData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IReadOnlyList<AssessmentErrorSummary> errorSummaryAffectedEntities, int? numberOfPrivateEndpointConnections, int? numberOfGroups, int? numberOfMachines, int? numberOfImportMachines, int? numberOfAssessments, DateTimeOffset? lastAssessedOn, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            ErrorSummaryAffectedEntities = errorSummaryAffectedEntities;
            NumberOfPrivateEndpointConnections = numberOfPrivateEndpointConnections;
            NumberOfGroups = numberOfGroups;
            NumberOfMachines = numberOfMachines;
            NumberOfImportMachines = numberOfImportMachines;
            NumberOfAssessments = numberOfAssessments;
            LastAssessedOn = lastAssessedOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Gets the Error summary by feature. Contains number of affected Entities per
        /// feature.
        /// </summary>
        public IReadOnlyList<AssessmentErrorSummary> ErrorSummaryAffectedEntities { get; }
        /// <summary> Gets the number of private endpoint connections. </summary>
        public int? NumberOfPrivateEndpointConnections { get; }
        /// <summary> Gets the number of groups created in this project. </summary>
        public int? NumberOfGroups { get; }
        /// <summary> Gets the number of machines part of this project. </summary>
        public int? NumberOfMachines { get; }
        /// <summary> Gets the number of import machines part of this project. </summary>
        public int? NumberOfImportMachines { get; }
        /// <summary> Gets the number of assessments created in this project. </summary>
        public int? NumberOfAssessments { get; }
        /// <summary> Gets the last assessment timestamp. </summary>
        public DateTimeOffset? LastAssessedOn { get; }
    }
}
