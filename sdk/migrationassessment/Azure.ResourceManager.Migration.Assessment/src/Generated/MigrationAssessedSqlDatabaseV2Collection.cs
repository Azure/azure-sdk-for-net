// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.Migration.Assessment
{
    /// <summary>
    /// A class representing a collection of <see cref="MigrationAssessedSqlDatabaseV2Resource"/> and their operations.
    /// Each <see cref="MigrationAssessedSqlDatabaseV2Resource"/> in the collection will belong to the same instance of <see cref="MigrationSqlAssessmentV2Resource"/>.
    /// To get a <see cref="MigrationAssessedSqlDatabaseV2Collection"/> instance call the GetMigrationAssessedSqlDatabaseV2s method from an instance of <see cref="MigrationSqlAssessmentV2Resource"/>.
    /// </summary>
    public partial class MigrationAssessedSqlDatabaseV2Collection : ArmCollection, IEnumerable<MigrationAssessedSqlDatabaseV2Resource>, IAsyncEnumerable<MigrationAssessedSqlDatabaseV2Resource>
    {
        private readonly ClientDiagnostics _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsClientDiagnostics;
        private readonly AssessedSqlDatabaseV2RestOperations _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MigrationAssessedSqlDatabaseV2Collection"/> class for mocking. </summary>
        protected MigrationAssessedSqlDatabaseV2Collection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MigrationAssessedSqlDatabaseV2Collection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal MigrationAssessedSqlDatabaseV2Collection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migration.Assessment", MigrationAssessedSqlDatabaseV2Resource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(MigrationAssessedSqlDatabaseV2Resource.ResourceType, out string migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsApiVersion);
            _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient = new AssessedSqlDatabaseV2RestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != MigrationSqlAssessmentV2Resource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, MigrationSqlAssessmentV2Resource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a AssessedSqlDatabaseV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases/{assessedSqlDatabaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlDatabaseName"> Sql assessment Assessed Databases ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlDatabaseName"/> is null. </exception>
        public virtual async Task<Response<MigrationAssessedSqlDatabaseV2Resource>> GetAsync(string assessedSqlDatabaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessedSqlDatabaseName, nameof(assessedSqlDatabaseName));

            using var scope = _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsClientDiagnostics.CreateScope("MigrationAssessedSqlDatabaseV2Collection.Get");
            scope.Start();
            try
            {
                var response = await _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedSqlDatabaseName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrationAssessedSqlDatabaseV2Resource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a AssessedSqlDatabaseV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases/{assessedSqlDatabaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlDatabaseName"> Sql assessment Assessed Databases ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlDatabaseName"/> is null. </exception>
        public virtual Response<MigrationAssessedSqlDatabaseV2Resource> Get(string assessedSqlDatabaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessedSqlDatabaseName, nameof(assessedSqlDatabaseName));

            using var scope = _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsClientDiagnostics.CreateScope("MigrationAssessedSqlDatabaseV2Collection.Get");
            scope.Start();
            try
            {
                var response = _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedSqlDatabaseName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrationAssessedSqlDatabaseV2Resource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List AssessedSqlDatabaseV2 resources by SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_ListBySqlAssessmentV2</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> Filter query. </param>
        /// <param name="pageSize"> Optional parameter for page size. </param>
        /// <param name="continuationToken"> Optional parameter for continuation token. </param>
        /// <param name="totalRecordCount"> Total record count. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MigrationAssessedSqlDatabaseV2Resource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<MigrationAssessedSqlDatabaseV2Resource> GetAllAsync(string filter = null, int? pageSize = null, string continuationToken = null, int? totalRecordCount = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient.CreateListBySqlAssessmentV2Request(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, filter, pageSizeHint, continuationToken, totalRecordCount);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient.CreateListBySqlAssessmentV2NextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, filter, pageSizeHint, continuationToken, totalRecordCount);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new MigrationAssessedSqlDatabaseV2Resource(Client, MigrationAssessedSqlDatabaseV2Data.DeserializeMigrationAssessedSqlDatabaseV2Data(e)), _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsClientDiagnostics, Pipeline, "MigrationAssessedSqlDatabaseV2Collection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List AssessedSqlDatabaseV2 resources by SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_ListBySqlAssessmentV2</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> Filter query. </param>
        /// <param name="pageSize"> Optional parameter for page size. </param>
        /// <param name="continuationToken"> Optional parameter for continuation token. </param>
        /// <param name="totalRecordCount"> Total record count. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MigrationAssessedSqlDatabaseV2Resource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<MigrationAssessedSqlDatabaseV2Resource> GetAll(string filter = null, int? pageSize = null, string continuationToken = null, int? totalRecordCount = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient.CreateListBySqlAssessmentV2Request(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, filter, pageSizeHint, continuationToken, totalRecordCount);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient.CreateListBySqlAssessmentV2NextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, filter, pageSizeHint, continuationToken, totalRecordCount);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new MigrationAssessedSqlDatabaseV2Resource(Client, MigrationAssessedSqlDatabaseV2Data.DeserializeMigrationAssessedSqlDatabaseV2Data(e)), _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsClientDiagnostics, Pipeline, "MigrationAssessedSqlDatabaseV2Collection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases/{assessedSqlDatabaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlDatabaseName"> Sql assessment Assessed Databases ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlDatabaseName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string assessedSqlDatabaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessedSqlDatabaseName, nameof(assessedSqlDatabaseName));

            using var scope = _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsClientDiagnostics.CreateScope("MigrationAssessedSqlDatabaseV2Collection.Exists");
            scope.Start();
            try
            {
                var response = await _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedSqlDatabaseName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases/{assessedSqlDatabaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlDatabaseName"> Sql assessment Assessed Databases ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlDatabaseName"/> is null. </exception>
        public virtual Response<bool> Exists(string assessedSqlDatabaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessedSqlDatabaseName, nameof(assessedSqlDatabaseName));

            using var scope = _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsClientDiagnostics.CreateScope("MigrationAssessedSqlDatabaseV2Collection.Exists");
            scope.Start();
            try
            {
                var response = _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedSqlDatabaseName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases/{assessedSqlDatabaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlDatabaseName"> Sql assessment Assessed Databases ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlDatabaseName"/> is null. </exception>
        public virtual async Task<NullableResponse<MigrationAssessedSqlDatabaseV2Resource>> GetIfExistsAsync(string assessedSqlDatabaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessedSqlDatabaseName, nameof(assessedSqlDatabaseName));

            using var scope = _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsClientDiagnostics.CreateScope("MigrationAssessedSqlDatabaseV2Collection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedSqlDatabaseName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<MigrationAssessedSqlDatabaseV2Resource>(response.GetRawResponse());
                return Response.FromValue(new MigrationAssessedSqlDatabaseV2Resource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases/{assessedSqlDatabaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlDatabaseName"> Sql assessment Assessed Databases ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlDatabaseName"/> is null. </exception>
        public virtual NullableResponse<MigrationAssessedSqlDatabaseV2Resource> GetIfExists(string assessedSqlDatabaseName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessedSqlDatabaseName, nameof(assessedSqlDatabaseName));

            using var scope = _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsClientDiagnostics.CreateScope("MigrationAssessedSqlDatabaseV2Collection.GetIfExists");
            scope.Start();
            try
            {
                var response = _migrationAssessedSqlDatabaseV2AssessedSqlDatabaseV2OperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedSqlDatabaseName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<MigrationAssessedSqlDatabaseV2Resource>(response.GetRawResponse());
                return Response.FromValue(new MigrationAssessedSqlDatabaseV2Resource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<MigrationAssessedSqlDatabaseV2Resource> IEnumerable<MigrationAssessedSqlDatabaseV2Resource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<MigrationAssessedSqlDatabaseV2Resource> IAsyncEnumerable<MigrationAssessedSqlDatabaseV2Resource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
