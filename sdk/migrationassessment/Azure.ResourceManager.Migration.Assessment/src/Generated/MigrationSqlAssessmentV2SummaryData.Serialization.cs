// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    public partial class MigrationSqlAssessmentV2SummaryData : IUtf8JsonSerializable, IJsonModel<MigrationSqlAssessmentV2SummaryData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MigrationSqlAssessmentV2SummaryData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MigrationSqlAssessmentV2SummaryData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationSqlAssessmentV2SummaryData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationSqlAssessmentV2SummaryData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsCollectionDefined(AssessmentSummary))
            {
                writer.WritePropertyName("assessmentSummary"u8);
                writer.WriteStartObject();
                foreach (var item in AssessmentSummary)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value, options);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DistributionBySupportStatus))
            {
                writer.WritePropertyName("distributionBySupportStatus"u8);
                writer.WriteStartObject();
                foreach (var item in DistributionBySupportStatus)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DistributionByServicePackInsight))
            {
                writer.WritePropertyName("distributionByServicePackInsight"u8);
                writer.WriteStartObject();
                foreach (var item in DistributionByServicePackInsight)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DistributionBySqlVersion))
            {
                writer.WritePropertyName("distributionBySqlVersion"u8);
                writer.WriteStartObject();
                foreach (var item in DistributionBySqlVersion)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DistributionBySqlEdition))
            {
                writer.WritePropertyName("distributionBySqlEdition"u8);
                writer.WriteStartObject();
                foreach (var item in DistributionBySqlEdition)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(InstanceDistributionBySizingCriterion))
            {
                writer.WritePropertyName("instanceDistributionBySizingCriterion"u8);
                writer.WriteStartObject();
                foreach (var item in InstanceDistributionBySizingCriterion)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DatabaseDistributionBySizingCriterion))
            {
                writer.WritePropertyName("databaseDistributionBySizingCriterion"u8);
                writer.WriteStartObject();
                foreach (var item in DatabaseDistributionBySizingCriterion)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfMachines))
            {
                writer.WritePropertyName("numberOfMachines"u8);
                writer.WriteNumberValue(NumberOfMachines.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfSqlInstances))
            {
                writer.WritePropertyName("numberOfSqlInstances"u8);
                writer.WriteNumberValue(NumberOfSqlInstances.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfSuccessfullyDiscoveredSqlInstances))
            {
                writer.WritePropertyName("numberOfSuccessfullyDiscoveredSqlInstances"u8);
                writer.WriteNumberValue(NumberOfSuccessfullyDiscoveredSqlInstances.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfSqlDatabases))
            {
                writer.WritePropertyName("numberOfSqlDatabases"u8);
                writer.WriteNumberValue(NumberOfSqlDatabases.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfFciInstances))
            {
                writer.WritePropertyName("numberOfFciInstances"u8);
                writer.WriteNumberValue(NumberOfFciInstances.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfSqlAvailabilityGroups))
            {
                writer.WritePropertyName("numberOfSqlAvailabilityGroups"u8);
                writer.WriteNumberValue(NumberOfSqlAvailabilityGroups.Value);
            }
            writer.WriteEndObject();
        }

        MigrationSqlAssessmentV2SummaryData IJsonModel<MigrationSqlAssessmentV2SummaryData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationSqlAssessmentV2SummaryData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationSqlAssessmentV2SummaryData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMigrationSqlAssessmentV2SummaryData(document.RootElement, options);
        }

        internal static MigrationSqlAssessmentV2SummaryData DeserializeMigrationSqlAssessmentV2SummaryData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IReadOnlyDictionary<string, SqlAssessmentV2SummaryDetails> assessmentSummary = default;
            IReadOnlyDictionary<string, int> distributionBySupportStatus = default;
            IReadOnlyDictionary<string, int> distributionByServicePackInsight = default;
            IReadOnlyDictionary<string, int> distributionBySqlVersion = default;
            IReadOnlyDictionary<string, int> distributionBySqlEdition = default;
            IReadOnlyDictionary<string, int> instanceDistributionBySizingCriterion = default;
            IReadOnlyDictionary<string, int> databaseDistributionBySizingCriterion = default;
            int? numberOfMachines = default;
            int? numberOfSqlInstances = default;
            int? numberOfSuccessfullyDiscoveredSqlInstances = default;
            int? numberOfSqlDatabases = default;
            int? numberOfFciInstances = default;
            int? numberOfSqlAvailabilityGroups = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("assessmentSummary"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, SqlAssessmentV2SummaryDetails> dictionary = new Dictionary<string, SqlAssessmentV2SummaryDetails>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, SqlAssessmentV2SummaryDetails.DeserializeSqlAssessmentV2SummaryDetails(property1.Value, options));
                            }
                            assessmentSummary = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("distributionBySupportStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            distributionBySupportStatus = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("distributionByServicePackInsight"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            distributionByServicePackInsight = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("distributionBySqlVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            distributionBySqlVersion = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("distributionBySqlEdition"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            distributionBySqlEdition = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("instanceDistributionBySizingCriterion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            instanceDistributionBySizingCriterion = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("databaseDistributionBySizingCriterion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            databaseDistributionBySizingCriterion = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("numberOfMachines"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfMachines = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfSqlInstances"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfSqlInstances = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfSuccessfullyDiscoveredSqlInstances"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfSuccessfullyDiscoveredSqlInstances = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfSqlDatabases"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfSqlDatabases = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfFciInstances"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfFciInstances = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfSqlAvailabilityGroups"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfSqlAvailabilityGroups = property0.Value.GetInt32();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MigrationSqlAssessmentV2SummaryData(
                id,
                name,
                type,
                systemData,
                assessmentSummary ?? new ChangeTrackingDictionary<string, SqlAssessmentV2SummaryDetails>(),
                distributionBySupportStatus ?? new ChangeTrackingDictionary<string, int>(),
                distributionByServicePackInsight ?? new ChangeTrackingDictionary<string, int>(),
                distributionBySqlVersion ?? new ChangeTrackingDictionary<string, int>(),
                distributionBySqlEdition ?? new ChangeTrackingDictionary<string, int>(),
                instanceDistributionBySizingCriterion ?? new ChangeTrackingDictionary<string, int>(),
                databaseDistributionBySizingCriterion ?? new ChangeTrackingDictionary<string, int>(),
                numberOfMachines,
                numberOfSqlInstances,
                numberOfSuccessfullyDiscoveredSqlInstances,
                numberOfSqlDatabases,
                numberOfFciInstances,
                numberOfSqlAvailabilityGroups,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MigrationSqlAssessmentV2SummaryData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationSqlAssessmentV2SummaryData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerMigrationAssessmentContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MigrationSqlAssessmentV2SummaryData)} does not support writing '{options.Format}' format.");
            }
        }

        MigrationSqlAssessmentV2SummaryData IPersistableModel<MigrationSqlAssessmentV2SummaryData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationSqlAssessmentV2SummaryData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMigrationSqlAssessmentV2SummaryData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MigrationSqlAssessmentV2SummaryData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MigrationSqlAssessmentV2SummaryData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
