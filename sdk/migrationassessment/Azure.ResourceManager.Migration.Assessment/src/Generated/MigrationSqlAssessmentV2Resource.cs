// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Migration.Assessment.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    /// <summary>
    /// A Class representing a MigrationSqlAssessmentV2 along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="MigrationSqlAssessmentV2Resource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetMigrationSqlAssessmentV2Resource method.
    /// Otherwise you can get one from its parent resource <see cref="MigrationAssessmentGroupResource"/> using the GetMigrationSqlAssessmentV2 method.
    /// </summary>
    public partial class MigrationSqlAssessmentV2Resource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="MigrationSqlAssessmentV2Resource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="projectName"> The projectName. </param>
        /// <param name="groupName"> The groupName. </param>
        /// <param name="assessmentName"> The assessmentName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics;
        private readonly SqlAssessmentV2RestOperations _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient;
        private readonly MigrationSqlAssessmentV2Data _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Migrate/assessmentProjects/groups/sqlAssessments";

        /// <summary> Initializes a new instance of the <see cref="MigrationSqlAssessmentV2Resource"/> class for mocking. </summary>
        protected MigrationSqlAssessmentV2Resource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MigrationSqlAssessmentV2Resource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal MigrationSqlAssessmentV2Resource(ArmClient client, MigrationSqlAssessmentV2Data data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="MigrationSqlAssessmentV2Resource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MigrationSqlAssessmentV2Resource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migration.Assessment", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string migrationSqlAssessmentV2SqlAssessmentV2OperationsApiVersion);
            _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient = new SqlAssessmentV2RestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, migrationSqlAssessmentV2SqlAssessmentV2OperationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual MigrationSqlAssessmentV2Data Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of MigrationAssessedSqlDatabaseV2Resources in the MigrationSqlAssessmentV2. </summary>
        /// <returns> An object representing collection of MigrationAssessedSqlDatabaseV2Resources and their operations over a MigrationAssessedSqlDatabaseV2Resource. </returns>
        public virtual MigrationAssessedSqlDatabaseV2Collection GetMigrationAssessedSqlDatabaseV2s()
        {
            return GetCachedClient(client => new MigrationAssessedSqlDatabaseV2Collection(client, Id));
        }

        /// <summary>
        /// Get a AssessedSqlDatabaseV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases/{assessedSqlDatabaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlDatabaseName"> Sql assessment Assessed Databases ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlDatabaseName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessedSqlDatabaseV2Resource>> GetMigrationAssessedSqlDatabaseV2Async(string assessedSqlDatabaseName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessedSqlDatabaseV2s().GetAsync(assessedSqlDatabaseName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessedSqlDatabaseV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases/{assessedSqlDatabaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlDatabaseName"> Sql assessment Assessed Databases ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlDatabaseName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessedSqlDatabaseV2Resource> GetMigrationAssessedSqlDatabaseV2(string assessedSqlDatabaseName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessedSqlDatabaseV2s().Get(assessedSqlDatabaseName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessedSqlInstanceV2Resources in the MigrationSqlAssessmentV2. </summary>
        /// <returns> An object representing collection of MigrationAssessedSqlInstanceV2Resources and their operations over a MigrationAssessedSqlInstanceV2Resource. </returns>
        public virtual MigrationAssessedSqlInstanceV2Collection GetMigrationAssessedSqlInstanceV2s()
        {
            return GetCachedClient(client => new MigrationAssessedSqlInstanceV2Collection(client, Id));
        }

        /// <summary>
        /// Get a AssessedSqlInstanceV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlInstances/{assessedSqlInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlInstanceV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlInstanceV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlInstanceName"> Sql assessment Assessed Instance ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlInstanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessedSqlInstanceV2Resource>> GetMigrationAssessedSqlInstanceV2Async(string assessedSqlInstanceName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessedSqlInstanceV2s().GetAsync(assessedSqlInstanceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessedSqlInstanceV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlInstances/{assessedSqlInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlInstanceV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlInstanceV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlInstanceName"> Sql assessment Assessed Instance ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlInstanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessedSqlInstanceV2Resource> GetMigrationAssessedSqlInstanceV2(string assessedSqlInstanceName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessedSqlInstanceV2s().Get(assessedSqlInstanceName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessedSqlMachineResources in the MigrationSqlAssessmentV2. </summary>
        /// <returns> An object representing collection of MigrationAssessedSqlMachineResources and their operations over a MigrationAssessedSqlMachineResource. </returns>
        public virtual MigrationAssessedSqlMachineCollection GetMigrationAssessedSqlMachines()
        {
            return GetCachedClient(client => new MigrationAssessedSqlMachineCollection(client, Id));
        }

        /// <summary>
        /// Get a AssessedSqlMachine
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlMachines/{assessedSqlMachineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlMachinesOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlMachineResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlMachineName"> Sql assessment Assessed Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlMachineName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessedSqlMachineResource>> GetMigrationAssessedSqlMachineAsync(string assessedSqlMachineName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessedSqlMachines().GetAsync(assessedSqlMachineName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessedSqlMachine
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlMachines/{assessedSqlMachineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlMachinesOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlMachineResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlMachineName"> Sql assessment Assessed Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlMachineName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessedSqlMachineResource> GetMigrationAssessedSqlMachine(string assessedSqlMachineName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessedSqlMachines().Get(assessedSqlMachineName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessedSqlRecommendedEntityResources in the MigrationSqlAssessmentV2. </summary>
        /// <returns> An object representing collection of MigrationAssessedSqlRecommendedEntityResources and their operations over a MigrationAssessedSqlRecommendedEntityResource. </returns>
        public virtual MigrationAssessedSqlRecommendedEntityCollection GetMigrationAssessedSqlRecommendedEntities()
        {
            return GetCachedClient(client => new MigrationAssessedSqlRecommendedEntityCollection(client, Id));
        }

        /// <summary>
        /// Get a AssessedSqlRecommendedEntity
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/recommendedAssessedEntities/{recommendedAssessedEntityName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlRecommendedEntityOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlRecommendedEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendedAssessedEntityName"> Sql assessment Assessed Recommended Entity ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendedAssessedEntityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recommendedAssessedEntityName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessedSqlRecommendedEntityResource>> GetMigrationAssessedSqlRecommendedEntityAsync(string recommendedAssessedEntityName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessedSqlRecommendedEntities().GetAsync(recommendedAssessedEntityName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessedSqlRecommendedEntity
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/recommendedAssessedEntities/{recommendedAssessedEntityName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlRecommendedEntityOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessedSqlRecommendedEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendedAssessedEntityName"> Sql assessment Assessed Recommended Entity ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendedAssessedEntityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recommendedAssessedEntityName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessedSqlRecommendedEntityResource> GetMigrationAssessedSqlRecommendedEntity(string recommendedAssessedEntityName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessedSqlRecommendedEntities().Get(recommendedAssessedEntityName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationSqlAssessmentV2SummaryResources in the MigrationSqlAssessmentV2. </summary>
        /// <returns> An object representing collection of MigrationSqlAssessmentV2SummaryResources and their operations over a MigrationSqlAssessmentV2SummaryResource. </returns>
        public virtual MigrationSqlAssessmentV2SummaryCollection GetMigrationSqlAssessmentV2Summaries()
        {
            return GetCachedClient(client => new MigrationSqlAssessmentV2SummaryCollection(client, Id));
        }

        /// <summary>
        /// Get a SqlAssessmentV2Summary
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/summaries/{summaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2SummaryOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="summaryName"> Gets the Name of the SQL Summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="summaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="summaryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationSqlAssessmentV2SummaryResource>> GetMigrationSqlAssessmentV2SummaryAsync(string summaryName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationSqlAssessmentV2Summaries().GetAsync(summaryName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a SqlAssessmentV2Summary
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/summaries/{summaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2SummaryOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="summaryName"> Gets the Name of the SQL Summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="summaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="summaryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationSqlAssessmentV2SummaryResource> GetMigrationSqlAssessmentV2Summary(string summaryName, CancellationToken cancellationToken = default)
        {
            return GetMigrationSqlAssessmentV2Summaries().Get(summaryName, cancellationToken);
        }

        /// <summary>
        /// Get a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MigrationSqlAssessmentV2Resource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentV2Resource.Get");
            scope.Start();
            try
            {
                var response = await _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrationSqlAssessmentV2Resource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MigrationSqlAssessmentV2Resource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentV2Resource.Get");
            scope.Start();
            try
            {
                var response = _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrationSqlAssessmentV2Resource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentV2Resource.Delete");
            scope.Start();
            try
            {
                var response = await _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var uri = _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateDeleteRequestUri(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Delete, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new AssessmentArmOperation(response, rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentV2Resource.Delete");
            scope.Start();
            try
            {
                var response = _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                var uri = _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateDeleteRequestUri(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Delete, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new AssessmentArmOperation(response, rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<MigrationSqlAssessmentV2Resource>> UpdateAsync(WaitUntil waitUntil, MigrationSqlAssessmentV2Data data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentV2Resource.Update");
            scope.Start();
            try
            {
                var response = await _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new AssessmentArmOperation<MigrationSqlAssessmentV2Resource>(new MigrationSqlAssessmentV2OperationSource(Client), _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics, Pipeline, _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<MigrationSqlAssessmentV2Resource> Update(WaitUntil waitUntil, MigrationSqlAssessmentV2Data data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentV2Resource.Update");
            scope.Start();
            try
            {
                var response = _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new AssessmentArmOperation<MigrationSqlAssessmentV2Resource>(new MigrationSqlAssessmentV2OperationSource(Client), _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics, Pipeline, _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the URL for downloading the assessment in a report format.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/downloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_DownloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="body"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual async Task<ArmOperation<AssessmentReportDownloadUri>> DownloadUrlAsync(WaitUntil waitUntil, BinaryData body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using var scope = _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentV2Resource.DownloadUrl");
            scope.Start();
            try
            {
                var response = await _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.DownloadUrlAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, body, cancellationToken).ConfigureAwait(false);
                var operation = new AssessmentArmOperation<AssessmentReportDownloadUri>(new AssessmentReportDownloadUriOperationSource(), _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics, Pipeline, _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateDownloadUrlRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, body).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the URL for downloading the assessment in a report format.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/downloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_DownloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="body"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual ArmOperation<AssessmentReportDownloadUri> DownloadUrl(WaitUntil waitUntil, BinaryData body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using var scope = _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrationSqlAssessmentV2Resource.DownloadUrl");
            scope.Start();
            try
            {
                var response = _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.DownloadUrl(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, body, cancellationToken);
                var operation = new AssessmentArmOperation<AssessmentReportDownloadUri>(new AssessmentReportDownloadUriOperationSource(), _migrationSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics, Pipeline, _migrationSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateDownloadUrlRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, body).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
