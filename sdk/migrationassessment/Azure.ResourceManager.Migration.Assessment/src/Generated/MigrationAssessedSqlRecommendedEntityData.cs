// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    /// <summary>
    /// A class representing the MigrationAssessedSqlRecommendedEntity data model.
    /// SQL Assessment REST resource.
    /// </summary>
    public partial class MigrationAssessedSqlRecommendedEntityData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MigrationAssessedSqlRecommendedEntityData"/>. </summary>
        public MigrationAssessedSqlRecommendedEntityData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MigrationAssessedSqlRecommendedEntityData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="machineName"> Gets or sets machine name. </param>
        /// <param name="instanceName"> Gets or sets SQL instance name. </param>
        /// <param name="productSupportStatus"> Gets the product support status related details. </param>
        /// <param name="dbCount"> Gets or sets assessed database count. </param>
        /// <param name="discoveredDBCount"> Gets or sets the total discovered database count. </param>
        /// <param name="hasScanOccurred">
        /// Gets or sets a value indicating whether instance deep discovery has occurred or
        /// not.
        /// </param>
        /// <param name="recommendedAzureSqlTargetType"> Gets or sets the recommended azure SQL target type. </param>
        /// <param name="recommendedSuitability"> Gets or sets the recommended azure SQL suitability. </param>
        /// <param name="azureSqlMISuitabilityDetails"> SQL instance azure SQL MI suitability details. </param>
        /// <param name="azureSqlDBSuitabilityDetails"> SQL instance azure SQL DB suitability details. </param>
        /// <param name="azureSqlVmSuitabilityDetails"> SQL instance azure SQL VM suitability details. </param>
        /// <param name="assessedSqlEntityArmId"> Gets or sets Arm id of assessed entity. </param>
        /// <param name="isClustered"> Gets or sets a value indicating whether the SQL instance is clustered or not. </param>
        /// <param name="isHighAvailabilityEnabled"> Gets or sets a value indicating whether the high availability is enabled or not. </param>
        /// <param name="sqlEdition"> Gets the SQL edition from the recommended entity if applicable. </param>
        /// <param name="sqlVersion"> Gets the SQL version from the recommended entity if applicable. </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MigrationAssessedSqlRecommendedEntityData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string machineName, string instanceName, AssessmentProductSupportStatus productSupportStatus, int? dbCount, int? discoveredDBCount, bool? hasScanOccurred, MigrationAssessmentTargetType? recommendedAzureSqlTargetType, AssessedSqlRecommendedSuitability? recommendedSuitability, SqlAssessmentV2PaasSuitabilityDetails azureSqlMISuitabilityDetails, SqlAssessmentV2PaasSuitabilityDetails azureSqlDBSuitabilityDetails, SqlAssessmentV2IaasSuitabilityDetails azureSqlVmSuitabilityDetails, ResourceIdentifier assessedSqlEntityArmId, bool? isClustered, bool? isHighAvailabilityEnabled, string sqlEdition, string sqlVersion, AssessmentSizingCriterion? sizingCriterion, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            MachineName = machineName;
            InstanceName = instanceName;
            ProductSupportStatus = productSupportStatus;
            DBCount = dbCount;
            DiscoveredDBCount = discoveredDBCount;
            HasScanOccurred = hasScanOccurred;
            RecommendedAzureSqlTargetType = recommendedAzureSqlTargetType;
            RecommendedSuitability = recommendedSuitability;
            AzureSqlMISuitabilityDetails = azureSqlMISuitabilityDetails;
            AzureSqlDBSuitabilityDetails = azureSqlDBSuitabilityDetails;
            AzureSqlVmSuitabilityDetails = azureSqlVmSuitabilityDetails;
            AssessedSqlEntityArmId = assessedSqlEntityArmId;
            IsClustered = isClustered;
            IsHighAvailabilityEnabled = isHighAvailabilityEnabled;
            SqlEdition = sqlEdition;
            SqlVersion = sqlVersion;
            SizingCriterion = sizingCriterion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets machine name. </summary>
        public string MachineName { get; }
        /// <summary> Gets or sets SQL instance name. </summary>
        public string InstanceName { get; }
        /// <summary> Gets the product support status related details. </summary>
        public AssessmentProductSupportStatus ProductSupportStatus { get; }
        /// <summary> Gets or sets assessed database count. </summary>
        public int? DBCount { get; }
        /// <summary> Gets or sets the total discovered database count. </summary>
        public int? DiscoveredDBCount { get; }
        /// <summary>
        /// Gets or sets a value indicating whether instance deep discovery has occurred or
        /// not.
        /// </summary>
        public bool? HasScanOccurred { get; }
        /// <summary> Gets or sets the recommended azure SQL target type. </summary>
        public MigrationAssessmentTargetType? RecommendedAzureSqlTargetType { get; }
        /// <summary> Gets or sets the recommended azure SQL suitability. </summary>
        public AssessedSqlRecommendedSuitability? RecommendedSuitability { get; }
        /// <summary> SQL instance azure SQL MI suitability details. </summary>
        public SqlAssessmentV2PaasSuitabilityDetails AzureSqlMISuitabilityDetails { get; }
        /// <summary> SQL instance azure SQL DB suitability details. </summary>
        public SqlAssessmentV2PaasSuitabilityDetails AzureSqlDBSuitabilityDetails { get; }
        /// <summary> SQL instance azure SQL VM suitability details. </summary>
        public SqlAssessmentV2IaasSuitabilityDetails AzureSqlVmSuitabilityDetails { get; }
        /// <summary> Gets or sets Arm id of assessed entity. </summary>
        public ResourceIdentifier AssessedSqlEntityArmId { get; set; }
        /// <summary> Gets or sets a value indicating whether the SQL instance is clustered or not. </summary>
        public bool? IsClustered { get; }
        /// <summary> Gets or sets a value indicating whether the high availability is enabled or not. </summary>
        public bool? IsHighAvailabilityEnabled { get; }
        /// <summary> Gets the SQL edition from the recommended entity if applicable. </summary>
        public string SqlEdition { get; }
        /// <summary> Gets the SQL version from the recommended entity if applicable. </summary>
        public string SqlVersion { get; }
        /// <summary> Assessment sizing criterion. </summary>
        public AssessmentSizingCriterion? SizingCriterion { get; }
    }
}
