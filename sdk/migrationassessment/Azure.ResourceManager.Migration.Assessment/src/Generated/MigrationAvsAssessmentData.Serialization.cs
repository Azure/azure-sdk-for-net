// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migration.Assessment
{
    public partial class MigrationAvsAssessmentData : IUtf8JsonSerializable, IJsonModel<MigrationAvsAssessmentData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MigrationAvsAssessmentData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MigrationAvsAssessmentData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAvsAssessmentData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationAvsAssessmentData)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(AssessmentErrorSummary))
            {
                writer.WritePropertyName("assessmentErrorSummary"u8);
                writer.WriteStartObject();
                foreach (var item in AssessmentErrorSummary)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(FailuresToTolerateAndRaidLevel))
            {
                writer.WritePropertyName("failuresToTolerateAndRaidLevel"u8);
                writer.WriteStringValue(FailuresToTolerateAndRaidLevel.Value.ToString());
            }
            if (Optional.IsDefined(VcpuOversubscription))
            {
                writer.WritePropertyName("vcpuOversubscription"u8);
                writer.WriteNumberValue(VcpuOversubscription.Value);
            }
            if (Optional.IsDefined(NodeType))
            {
                writer.WritePropertyName("nodeType"u8);
                writer.WriteStringValue(NodeType.Value.ToString());
            }
            if (Optional.IsDefined(ReservedInstance))
            {
                writer.WritePropertyName("reservedInstance"u8);
                writer.WriteStringValue(ReservedInstance.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(TotalMonthlyCost))
            {
                writer.WritePropertyName("totalMonthlyCost"u8);
                writer.WriteNumberValue(TotalMonthlyCost.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Suitability))
            {
                writer.WritePropertyName("suitability"u8);
                writer.WriteStringValue(Suitability.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SuitabilityExplanation))
            {
                writer.WritePropertyName("suitabilityExplanation"u8);
                writer.WriteStringValue(SuitabilityExplanation.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfNodes))
            {
                writer.WritePropertyName("numberOfNodes"u8);
                writer.WriteNumberValue(NumberOfNodes.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CpuUtilization))
            {
                writer.WritePropertyName("cpuUtilization"u8);
                writer.WriteNumberValue(CpuUtilization.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(RamUtilization))
            {
                writer.WritePropertyName("ramUtilization"u8);
                writer.WriteNumberValue(RamUtilization.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(StorageUtilization))
            {
                writer.WritePropertyName("storageUtilization"u8);
                writer.WriteNumberValue(StorageUtilization.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalCpuCores))
            {
                writer.WritePropertyName("totalCpuCores"u8);
                writer.WriteNumberValue(TotalCpuCores.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalRamInGB))
            {
                writer.WritePropertyName("totalRamInGB"u8);
                writer.WriteNumberValue(TotalRamInGB.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalStorageInGB))
            {
                writer.WritePropertyName("totalStorageInGB"u8);
                writer.WriteNumberValue(TotalStorageInGB.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfMachines))
            {
                writer.WritePropertyName("numberOfMachines"u8);
                writer.WriteNumberValue(NumberOfMachines.Value);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(SuitabilitySummary))
            {
                writer.WritePropertyName("suitabilitySummary"u8);
                writer.WriteStartObject();
                foreach (var item in SuitabilitySummary)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(MemOvercommit))
            {
                writer.WritePropertyName("memOvercommit"u8);
                writer.WriteNumberValue(MemOvercommit.Value);
            }
            if (Optional.IsDefined(DedupeCompression))
            {
                writer.WritePropertyName("dedupeCompression"u8);
                writer.WriteNumberValue(DedupeCompression.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LimitingFactor))
            {
                writer.WritePropertyName("limitingFactor"u8);
                writer.WriteStringValue(LimitingFactor);
            }
            if (Optional.IsDefined(IsStretchClusterEnabled))
            {
                writer.WritePropertyName("isStretchClusterEnabled"u8);
                writer.WriteBooleanValue(IsStretchClusterEnabled.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(GroupType))
            {
                writer.WritePropertyName("groupType"u8);
                writer.WriteStringValue(GroupType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AssessmentType))
            {
                writer.WritePropertyName("assessmentType"u8);
                writer.WriteStringValue(AssessmentType.Value.ToString());
            }
            if (Optional.IsDefined(AzureLocation))
            {
                writer.WritePropertyName("azureLocation"u8);
                writer.WriteStringValue(AzureLocation.Value);
            }
            if (Optional.IsDefined(AzureOfferCode))
            {
                writer.WritePropertyName("azureOfferCode"u8);
                writer.WriteStringValue(AzureOfferCode.Value.ToString());
            }
            if (Optional.IsDefined(Currency))
            {
                writer.WritePropertyName("currency"u8);
                writer.WriteStringValue(Currency.Value.ToString());
            }
            if (Optional.IsDefined(ScalingFactor))
            {
                writer.WritePropertyName("scalingFactor"u8);
                writer.WriteNumberValue(ScalingFactor.Value);
            }
            if (Optional.IsDefined(Percentile))
            {
                writer.WritePropertyName("percentile"u8);
                writer.WriteStringValue(Percentile.Value.ToString());
            }
            if (Optional.IsDefined(TimeRange))
            {
                writer.WritePropertyName("timeRange"u8);
                writer.WriteStringValue(TimeRange.Value.ToString());
            }
            if (Optional.IsDefined(PerfDataStartOn))
            {
                writer.WritePropertyName("perfDataStartTime"u8);
                writer.WriteStringValue(PerfDataStartOn.Value, "O");
            }
            if (Optional.IsDefined(PerfDataEndOn))
            {
                writer.WritePropertyName("perfDataEndTime"u8);
                writer.WriteStringValue(PerfDataEndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(Stage))
            {
                writer.WritePropertyName("stage"u8);
                writer.WriteStringValue(Stage.Value.ToString());
            }
            if (Optional.IsDefined(DiscountPercentage))
            {
                writer.WritePropertyName("discountPercentage"u8);
                writer.WriteNumberValue(DiscountPercentage.Value);
            }
            if (Optional.IsDefined(SizingCriterion))
            {
                writer.WritePropertyName("sizingCriterion"u8);
                writer.WriteStringValue(SizingCriterion.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ConfidenceRatingInPercentage))
            {
                writer.WritePropertyName("confidenceRatingInPercentage"u8);
                writer.WriteNumberValue(ConfidenceRatingInPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PricesQueriedOn))
            {
                writer.WritePropertyName("pricesTimestamp"u8);
                writer.WriteStringValue(PricesQueriedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("createdTimestamp"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(UpdatedOn))
            {
                writer.WritePropertyName("updatedTimestamp"u8);
                writer.WriteStringValue(UpdatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SchemaVersion))
            {
                writer.WritePropertyName("schemaVersion"u8);
                writer.WriteStringValue(SchemaVersion);
            }
            writer.WriteEndObject();
        }

        MigrationAvsAssessmentData IJsonModel<MigrationAvsAssessmentData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAvsAssessmentData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationAvsAssessmentData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMigrationAvsAssessmentData(document.RootElement, options);
        }

        internal static MigrationAvsAssessmentData DeserializeMigrationAvsAssessmentData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            MigrationAssessmentProvisioningState? provisioningState = default;
            IReadOnlyDictionary<string, int> assessmentErrorSummary = default;
            FttAndRaidLevel? failuresToTolerateAndRaidLevel = default;
            double? vcpuOversubscription = default;
            AssessmentAvsNodeType? nodeType = default;
            AssessmentReservedInstance? reservedInstance = default;
            double? totalMonthlyCost = default;
            MigrationAssessmentCloudSuitability? suitability = default;
            AvsSuitabilityExplanation? suitabilityExplanation = default;
            int? numberOfNodes = default;
            double? cpuUtilization = default;
            double? ramUtilization = default;
            double? storageUtilization = default;
            double? totalCpuCores = default;
            double? totalRamInGB = default;
            double? totalStorageInGB = default;
            int? numberOfMachines = default;
            IReadOnlyDictionary<string, int> suitabilitySummary = default;
            double? memOvercommit = default;
            double? dedupeCompression = default;
            string limitingFactor = default;
            bool? isStretchClusterEnabled = default;
            MigrationAssessmentGroupType? groupType = default;
            MigrationAssessmentType? assessmentType = default;
            AzureLocation? azureLocation = default;
            AssessmentOfferCode? azureOfferCode = default;
            AssessmentCurrency? currency = default;
            double? scalingFactor = default;
            PercentileOfUtilization? percentile = default;
            AssessmentTimeRange? timeRange = default;
            DateTimeOffset? perfDataStartTime = default;
            DateTimeOffset? perfDataEndTime = default;
            MigrationAssessmentStage? stage = default;
            double? discountPercentage = default;
            AssessmentSizingCriterion? sizingCriterion = default;
            double? confidenceRatingInPercentage = default;
            DateTimeOffset? pricesTimestamp = default;
            DateTimeOffset? createdTimestamp = default;
            DateTimeOffset? updatedTimestamp = default;
            MigrationAssessmentStatus? status = default;
            string schemaVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new MigrationAssessmentProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("assessmentErrorSummary"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            assessmentErrorSummary = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("failuresToTolerateAndRaidLevel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            failuresToTolerateAndRaidLevel = new FttAndRaidLevel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("vcpuOversubscription"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vcpuOversubscription = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("nodeType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            nodeType = new AssessmentAvsNodeType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("reservedInstance"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            reservedInstance = new AssessmentReservedInstance(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("totalMonthlyCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalMonthlyCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("suitability"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            suitability = new MigrationAssessmentCloudSuitability(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("suitabilityExplanation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            suitabilityExplanation = new AvsSuitabilityExplanation(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("numberOfNodes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfNodes = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("cpuUtilization"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            cpuUtilization = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("ramUtilization"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ramUtilization = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("storageUtilization"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            storageUtilization = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("totalCpuCores"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalCpuCores = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("totalRamInGB"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalRamInGB = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("totalStorageInGB"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalStorageInGB = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("numberOfMachines"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfMachines = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("suitabilitySummary"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            suitabilitySummary = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("memOvercommit"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            memOvercommit = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("dedupeCompression"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dedupeCompression = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("limitingFactor"u8))
                        {
                            limitingFactor = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isStretchClusterEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isStretchClusterEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("groupType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            groupType = new MigrationAssessmentGroupType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("assessmentType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            assessmentType = new MigrationAssessmentType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureLocation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureLocation = new AzureLocation(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureOfferCode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureOfferCode = new AssessmentOfferCode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("currency"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            currency = new AssessmentCurrency(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("scalingFactor"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            scalingFactor = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("percentile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            percentile = new PercentileOfUtilization(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("timeRange"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeRange = new AssessmentTimeRange(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("perfDataStartTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            perfDataStartTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("perfDataEndTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            perfDataEndTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("stage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            stage = new MigrationAssessmentStage(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("discountPercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            discountPercentage = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("sizingCriterion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sizingCriterion = new AssessmentSizingCriterion(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("confidenceRatingInPercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            confidenceRatingInPercentage = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("pricesTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            pricesTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("createdTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("updatedTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            updatedTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            status = new MigrationAssessmentStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("schemaVersion"u8))
                        {
                            schemaVersion = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MigrationAvsAssessmentData(
                id,
                name,
                type,
                systemData,
                provisioningState,
                assessmentErrorSummary ?? new ChangeTrackingDictionary<string, int>(),
                failuresToTolerateAndRaidLevel,
                vcpuOversubscription,
                nodeType,
                reservedInstance,
                totalMonthlyCost,
                suitability,
                suitabilityExplanation,
                numberOfNodes,
                cpuUtilization,
                ramUtilization,
                storageUtilization,
                totalCpuCores,
                totalRamInGB,
                totalStorageInGB,
                numberOfMachines,
                suitabilitySummary ?? new ChangeTrackingDictionary<string, int>(),
                memOvercommit,
                dedupeCompression,
                limitingFactor,
                isStretchClusterEnabled,
                groupType,
                assessmentType,
                azureLocation,
                azureOfferCode,
                currency,
                scalingFactor,
                percentile,
                timeRange,
                perfDataStartTime,
                perfDataEndTime,
                stage,
                discountPercentage,
                sizingCriterion,
                confidenceRatingInPercentage,
                pricesTimestamp,
                createdTimestamp,
                updatedTimestamp,
                status,
                schemaVersion,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MigrationAvsAssessmentData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAvsAssessmentData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MigrationAvsAssessmentData)} does not support writing '{options.Format}' format.");
            }
        }

        MigrationAvsAssessmentData IPersistableModel<MigrationAvsAssessmentData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationAvsAssessmentData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMigrationAvsAssessmentData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MigrationAvsAssessmentData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MigrationAvsAssessmentData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
