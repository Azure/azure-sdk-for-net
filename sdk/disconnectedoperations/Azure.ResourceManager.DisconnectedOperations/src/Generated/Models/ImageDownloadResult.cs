// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DisconnectedOperations.Models
{
    /// <summary> The image download properties. </summary>
    public partial class ImageDownloadResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ImageDownloadResult"/>. </summary>
        /// <param name="releaseVersion"> The version of the package in the format 1.1.1. </param>
        /// <param name="releaseDisplayName"> The release name. </param>
        /// <param name="releaseNotes"> The release notes. </param>
        /// <param name="releaseOn"> The release date. </param>
        /// <param name="releaseType"> The release type. </param>
        /// <param name="transactionId"> The unique identifier of the download. </param>
        /// <param name="downloadLink"> The download URI. </param>
        /// <param name="linkExpiry"> The download link expiry time. </param>
        internal ImageDownloadResult(string releaseVersion, string releaseDisplayName, string releaseNotes, DateTimeOffset releaseOn, ReleaseType releaseType, string transactionId, Uri downloadLink, DateTimeOffset linkExpiry)
        {
            ReleaseVersion = releaseVersion;
            ReleaseDisplayName = releaseDisplayName;
            ReleaseNotes = releaseNotes;
            ReleaseOn = releaseOn;
            ReleaseType = releaseType;
            CompatibleVersions = new ChangeTrackingList<string>();
            TransactionId = transactionId;
            DownloadLink = downloadLink;
            LinkExpiry = linkExpiry;
        }

        /// <summary> Initializes a new instance of <see cref="ImageDownloadResult"/>. </summary>
        /// <param name="provisioningState"> The resource provisioning state. </param>
        /// <param name="releaseVersion"> The version of the package in the format 1.1.1. </param>
        /// <param name="releaseDisplayName"> The release name. </param>
        /// <param name="releaseNotes"> The release notes. </param>
        /// <param name="releaseOn"> The release date. </param>
        /// <param name="releaseType"> The release type. </param>
        /// <param name="compatibleVersions"> The versions that are compatible for this update package. </param>
        /// <param name="transactionId"> The unique identifier of the download. </param>
        /// <param name="downloadLink"> The download URI. </param>
        /// <param name="linkExpiry"> The download link expiry time. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ImageDownloadResult(ResourceProvisioningState? provisioningState, string releaseVersion, string releaseDisplayName, string releaseNotes, DateTimeOffset releaseOn, ReleaseType releaseType, IReadOnlyList<string> compatibleVersions, string transactionId, Uri downloadLink, DateTimeOffset linkExpiry, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            ReleaseVersion = releaseVersion;
            ReleaseDisplayName = releaseDisplayName;
            ReleaseNotes = releaseNotes;
            ReleaseOn = releaseOn;
            ReleaseType = releaseType;
            CompatibleVersions = compatibleVersions;
            TransactionId = transactionId;
            DownloadLink = downloadLink;
            LinkExpiry = linkExpiry;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ImageDownloadResult"/> for deserialization. </summary>
        internal ImageDownloadResult()
        {
        }

        /// <summary> The resource provisioning state. </summary>
        public ResourceProvisioningState? ProvisioningState { get; }
        /// <summary> The version of the package in the format 1.1.1. </summary>
        public string ReleaseVersion { get; }
        /// <summary> The release name. </summary>
        public string ReleaseDisplayName { get; }
        /// <summary> The release notes. </summary>
        public string ReleaseNotes { get; }
        /// <summary> The release date. </summary>
        public DateTimeOffset ReleaseOn { get; }
        /// <summary> The release type. </summary>
        public ReleaseType ReleaseType { get; }
        /// <summary> The versions that are compatible for this update package. </summary>
        public IReadOnlyList<string> CompatibleVersions { get; }
        /// <summary> The unique identifier of the download. </summary>
        public string TransactionId { get; }
        /// <summary> The download URI. </summary>
        public Uri DownloadLink { get; }
        /// <summary> The download link expiry time. </summary>
        public DateTimeOffset LinkExpiry { get; }
    }
}
