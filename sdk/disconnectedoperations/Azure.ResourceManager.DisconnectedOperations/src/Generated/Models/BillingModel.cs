// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DisconnectedOperations.Models
{
    /// <summary> Billing model. </summary>
    public readonly partial struct BillingModel : IEquatable<BillingModel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BillingModel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BillingModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CapacityValue = "Capacity";

        /// <summary> Billed on capacity. </summary>
        public static BillingModel Capacity { get; } = new BillingModel(CapacityValue);
        /// <summary> Determines if two <see cref="BillingModel"/> values are the same. </summary>
        public static bool operator ==(BillingModel left, BillingModel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BillingModel"/> values are not the same. </summary>
        public static bool operator !=(BillingModel left, BillingModel right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BillingModel"/>. </summary>
        public static implicit operator BillingModel(string value) => new BillingModel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BillingModel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BillingModel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
