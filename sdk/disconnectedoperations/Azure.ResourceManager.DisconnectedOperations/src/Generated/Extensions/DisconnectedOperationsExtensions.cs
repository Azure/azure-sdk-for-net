// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.DisconnectedOperations.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DisconnectedOperations
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DisconnectedOperations. </summary>
    public static partial class DisconnectedOperationsExtensions
    {
        private static MockableDisconnectedOperationsArmClient GetMockableDisconnectedOperationsArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableDisconnectedOperationsArmClient(client0));
        }

        private static MockableDisconnectedOperationsResourceGroupResource GetMockableDisconnectedOperationsResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableDisconnectedOperationsResourceGroupResource(client, resource.Id));
        }

        private static MockableDisconnectedOperationsSubscriptionResource GetMockableDisconnectedOperationsSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableDisconnectedOperationsSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="DisconnectedOperationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DisconnectedOperationResource.CreateResourceIdentifier" /> to create a <see cref="DisconnectedOperationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDisconnectedOperationsArmClient.GetDisconnectedOperationResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DisconnectedOperationResource"/> object. </returns>
        public static DisconnectedOperationResource GetDisconnectedOperationResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDisconnectedOperationsArmClient(client).GetDisconnectedOperationResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="ImageResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ImageResource.CreateResourceIdentifier" /> to create an <see cref="ImageResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDisconnectedOperationsArmClient.GetImageResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="ImageResource"/> object. </returns>
        public static ImageResource GetImageResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDisconnectedOperationsArmClient(client).GetImageResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="ArtifactResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ArtifactResource.CreateResourceIdentifier" /> to create an <see cref="ArtifactResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDisconnectedOperationsArmClient.GetArtifactResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="ArtifactResource"/> object. </returns>
        public static ArtifactResource GetArtifactResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDisconnectedOperationsArmClient(client).GetArtifactResource(id);
        }

        /// <summary>
        /// Gets a collection of DisconnectedOperationResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDisconnectedOperationsResourceGroupResource.GetDisconnectedOperations()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of DisconnectedOperationResources and their operations over a DisconnectedOperationResource. </returns>
        public static DisconnectedOperationCollection GetDisconnectedOperations(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDisconnectedOperationsResourceGroupResource(resourceGroupResource).GetDisconnectedOperations();
        }

        /// <summary>
        /// Get a DisconnectedOperation
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/disconnectedOperations/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DisconnectedOperation_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DisconnectedOperationResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDisconnectedOperationsResourceGroupResource.GetDisconnectedOperationAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<DisconnectedOperationResource>> GetDisconnectedOperationAsync(this ResourceGroupResource resourceGroupResource, string name, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableDisconnectedOperationsResourceGroupResource(resourceGroupResource).GetDisconnectedOperationAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a DisconnectedOperation
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/disconnectedOperations/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DisconnectedOperation_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DisconnectedOperationResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDisconnectedOperationsResourceGroupResource.GetDisconnectedOperation(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<DisconnectedOperationResource> GetDisconnectedOperation(this ResourceGroupResource resourceGroupResource, string name, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDisconnectedOperationsResourceGroupResource(resourceGroupResource).GetDisconnectedOperation(name, cancellationToken);
        }

        /// <summary>
        /// List DisconnectedOperation resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/disconnectedOperations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DisconnectedOperation_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DisconnectedOperationResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDisconnectedOperationsSubscriptionResource.GetDisconnectedOperations(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="DisconnectedOperationResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DisconnectedOperationResource> GetDisconnectedOperationsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDisconnectedOperationsSubscriptionResource(subscriptionResource).GetDisconnectedOperationsAsync(cancellationToken);
        }

        /// <summary>
        /// List DisconnectedOperation resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Edge/disconnectedOperations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DisconnectedOperation_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DisconnectedOperationResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDisconnectedOperationsSubscriptionResource.GetDisconnectedOperations(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="DisconnectedOperationResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DisconnectedOperationResource> GetDisconnectedOperations(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDisconnectedOperationsSubscriptionResource(subscriptionResource).GetDisconnectedOperations(cancellationToken);
        }
    }
}
