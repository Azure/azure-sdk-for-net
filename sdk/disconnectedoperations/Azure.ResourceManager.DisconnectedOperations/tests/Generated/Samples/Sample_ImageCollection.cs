// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.DisconnectedOperations.Samples
{
    public partial class Sample_ImageCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ImagesGet()
        {
            // Generated from example definition: 2025-06-01-preview/Images_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Image_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DisconnectedOperationResource created on azure
            // for more information of creating DisconnectedOperationResource, please refer to the document of DisconnectedOperationResource
            string subscriptionId = "301DCB09-82EC-4777-A56C-6FFF26BCC814";
            string resourceGroupName = "rgdisconnectedoperations";
            string name = "bT62l-KS7g1-uh";
            ResourceIdentifier disconnectedOperationResourceId = DisconnectedOperationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            DisconnectedOperationResource disconnectedOperation = client.GetDisconnectedOperationResource(disconnectedOperationResourceId);

            // get the collection of this ImageResource
            ImageCollection collection = disconnectedOperation.GetImages();

            // invoke the operation
            string imageName = "2P6";
            ImageResource result = await collection.GetAsync(imageName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ImageData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ImagesListByDisconnectedOperation()
        {
            // Generated from example definition: 2025-06-01-preview/Images_ListByDisconnectedOperation_MaximumSet_Gen.json
            // this example is just showing the usage of "Image_ListByDisconnectedOperation" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DisconnectedOperationResource created on azure
            // for more information of creating DisconnectedOperationResource, please refer to the document of DisconnectedOperationResource
            string subscriptionId = "1F6CACA0-5FFA-47AD-94FD-42368F71E49E";
            string resourceGroupName = "rgdisconnectedoperations";
            string name = "w_-EG-3-euL7K3-E";
            ResourceIdentifier disconnectedOperationResourceId = DisconnectedOperationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            DisconnectedOperationResource disconnectedOperation = client.GetDisconnectedOperationResource(disconnectedOperationResourceId);

            // get the collection of this ImageResource
            ImageCollection collection = disconnectedOperation.GetImages();

            // invoke the operation and iterate over the result
            string filter = "toynendoobwkrcwmfdfup";
            int? top = 20;
            int? skip = 3;
            await foreach (ImageResource item in collection.GetAllAsync(filter: filter, top: top, skip: skip))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ImageData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_ImagesGet()
        {
            // Generated from example definition: 2025-06-01-preview/Images_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Image_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DisconnectedOperationResource created on azure
            // for more information of creating DisconnectedOperationResource, please refer to the document of DisconnectedOperationResource
            string subscriptionId = "301DCB09-82EC-4777-A56C-6FFF26BCC814";
            string resourceGroupName = "rgdisconnectedoperations";
            string name = "bT62l-KS7g1-uh";
            ResourceIdentifier disconnectedOperationResourceId = DisconnectedOperationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            DisconnectedOperationResource disconnectedOperation = client.GetDisconnectedOperationResource(disconnectedOperationResourceId);

            // get the collection of this ImageResource
            ImageCollection collection = disconnectedOperation.GetImages();

            // invoke the operation
            string imageName = "2P6";
            bool result = await collection.ExistsAsync(imageName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_ImagesGet()
        {
            // Generated from example definition: 2025-06-01-preview/Images_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Image_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DisconnectedOperationResource created on azure
            // for more information of creating DisconnectedOperationResource, please refer to the document of DisconnectedOperationResource
            string subscriptionId = "301DCB09-82EC-4777-A56C-6FFF26BCC814";
            string resourceGroupName = "rgdisconnectedoperations";
            string name = "bT62l-KS7g1-uh";
            ResourceIdentifier disconnectedOperationResourceId = DisconnectedOperationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            DisconnectedOperationResource disconnectedOperation = client.GetDisconnectedOperationResource(disconnectedOperationResourceId);

            // get the collection of this ImageResource
            ImageCollection collection = disconnectedOperation.GetImages();

            // invoke the operation
            string imageName = "2P6";
            NullableResponse<ImageResource> response = await collection.GetIfExistsAsync(imageName);
            ImageResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ImageData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
