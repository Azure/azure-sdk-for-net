// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PlaywrightTesting.Models
{
    /// <summary> This property sets the connection region for Playwright client workers to cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially created. </summary>
    public readonly partial struct PlaywrightTestingEnablementStatus : IEquatable<PlaywrightTestingEnablementStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PlaywrightTestingEnablementStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PlaywrightTestingEnablementStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnabledValue = "Enabled";
        private const string DisabledValue = "Disabled";

        /// <summary> The feature is Enabled. </summary>
        public static PlaywrightTestingEnablementStatus Enabled { get; } = new PlaywrightTestingEnablementStatus(EnabledValue);
        /// <summary> The feature is Disabled. </summary>
        public static PlaywrightTestingEnablementStatus Disabled { get; } = new PlaywrightTestingEnablementStatus(DisabledValue);
        /// <summary> Determines if two <see cref="PlaywrightTestingEnablementStatus"/> values are the same. </summary>
        public static bool operator ==(PlaywrightTestingEnablementStatus left, PlaywrightTestingEnablementStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PlaywrightTestingEnablementStatus"/> values are not the same. </summary>
        public static bool operator !=(PlaywrightTestingEnablementStatus left, PlaywrightTestingEnablementStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PlaywrightTestingEnablementStatus"/>. </summary>
        public static implicit operator PlaywrightTestingEnablementStatus(string value) => new PlaywrightTestingEnablementStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PlaywrightTestingEnablementStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PlaywrightTestingEnablementStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
