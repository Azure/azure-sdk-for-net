// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PlaywrightTesting.Models
{
    /// <summary> Offering type state. </summary>
    public readonly partial struct PlaywrightTestingOfferingType : IEquatable<PlaywrightTestingOfferingType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PlaywrightTestingOfferingType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PlaywrightTestingOfferingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotApplicableValue = "NotApplicable";
        private const string PrivatePreviewValue = "PrivatePreview";
        private const string PublicPreviewValue = "PublicPreview";
        private const string GeneralAvailabilityValue = "GeneralAvailability";

        /// <summary> The offeringType is NotApplicable. </summary>
        public static PlaywrightTestingOfferingType NotApplicable { get; } = new PlaywrightTestingOfferingType(NotApplicableValue);
        /// <summary> The offeringType is PrivatePreview. </summary>
        public static PlaywrightTestingOfferingType PrivatePreview { get; } = new PlaywrightTestingOfferingType(PrivatePreviewValue);
        /// <summary> The offeringType is PublicPreview. </summary>
        public static PlaywrightTestingOfferingType PublicPreview { get; } = new PlaywrightTestingOfferingType(PublicPreviewValue);
        /// <summary> The offeringType is GeneralAvailability. </summary>
        public static PlaywrightTestingOfferingType GeneralAvailability { get; } = new PlaywrightTestingOfferingType(GeneralAvailabilityValue);
        /// <summary> Determines if two <see cref="PlaywrightTestingOfferingType"/> values are the same. </summary>
        public static bool operator ==(PlaywrightTestingOfferingType left, PlaywrightTestingOfferingType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PlaywrightTestingOfferingType"/> values are not the same. </summary>
        public static bool operator !=(PlaywrightTestingOfferingType left, PlaywrightTestingOfferingType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PlaywrightTestingOfferingType"/>. </summary>
        public static implicit operator PlaywrightTestingOfferingType(string value) => new PlaywrightTestingOfferingType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PlaywrightTestingOfferingType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PlaywrightTestingOfferingType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
