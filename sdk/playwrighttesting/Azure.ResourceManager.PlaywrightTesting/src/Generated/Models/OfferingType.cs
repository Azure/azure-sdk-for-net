// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PlaywrightTesting.Models
{
    /// <summary> Offering type state. </summary>
    public readonly partial struct OfferingType : IEquatable<OfferingType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OfferingType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OfferingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotApplicableValue = "NotApplicable";
        private const string PrivatePreviewValue = "PrivatePreview";
        private const string PublicPreviewValue = "PublicPreview";
        private const string GeneralAvailabilityValue = "GeneralAvailability";

        /// <summary> The offeringType is NotApplicable. </summary>
        public static OfferingType NotApplicable { get; } = new OfferingType(NotApplicableValue);
        /// <summary> The offeringType is PrivatePreview. </summary>
        public static OfferingType PrivatePreview { get; } = new OfferingType(PrivatePreviewValue);
        /// <summary> The offeringType is PublicPreview. </summary>
        public static OfferingType PublicPreview { get; } = new OfferingType(PublicPreviewValue);
        /// <summary> The offeringType is GeneralAvailability. </summary>
        public static OfferingType GeneralAvailability { get; } = new OfferingType(GeneralAvailabilityValue);
        /// <summary> Determines if two <see cref="OfferingType"/> values are the same. </summary>
        public static bool operator ==(OfferingType left, OfferingType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OfferingType"/> values are not the same. </summary>
        public static bool operator !=(OfferingType left, OfferingType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OfferingType"/>. </summary>
        public static implicit operator OfferingType(string value) => new OfferingType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OfferingType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OfferingType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
