// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MongoCluster.Models
{
    /// <summary> Replication role of the mongo cluster. </summary>
    public readonly partial struct ReplicationRole : IEquatable<ReplicationRole>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ReplicationRole"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ReplicationRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PrimaryValue = "Primary";
        private const string AsyncReplicaValue = "AsyncReplica";
        private const string GeoAsyncReplicaValue = "GeoAsyncReplica";

        /// <summary> The cluster is a primary replica. </summary>
        public static ReplicationRole Primary { get; } = new ReplicationRole(PrimaryValue);
        /// <summary> The cluster is a local asynchronous replica. </summary>
        public static ReplicationRole AsyncReplica { get; } = new ReplicationRole(AsyncReplicaValue);
        /// <summary> The cluster is a geo-asynchronous replica. </summary>
        public static ReplicationRole GeoAsyncReplica { get; } = new ReplicationRole(GeoAsyncReplicaValue);
        /// <summary> Determines if two <see cref="ReplicationRole"/> values are the same. </summary>
        public static bool operator ==(ReplicationRole left, ReplicationRole right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ReplicationRole"/> values are not the same. </summary>
        public static bool operator !=(ReplicationRole left, ReplicationRole right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ReplicationRole"/>. </summary>
        public static implicit operator ReplicationRole(string value) => new ReplicationRole(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ReplicationRole other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ReplicationRole other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
