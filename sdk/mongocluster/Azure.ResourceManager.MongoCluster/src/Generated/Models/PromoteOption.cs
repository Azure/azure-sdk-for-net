// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MongoCluster.Models
{
    /// <summary> The option to apply to a promote operation. </summary>
    public readonly partial struct PromoteOption : IEquatable<PromoteOption>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PromoteOption"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PromoteOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ForcedValue = "Forced";

        /// <summary> Promote option forces the promotion without waiting for the replica to be caught up to the primary. This can result in data-loss so should only be used during disaster recovery scenarios. </summary>
        public static PromoteOption Forced { get; } = new PromoteOption(ForcedValue);
        /// <summary> Determines if two <see cref="PromoteOption"/> values are the same. </summary>
        public static bool operator ==(PromoteOption left, PromoteOption right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PromoteOption"/> values are not the same. </summary>
        public static bool operator !=(PromoteOption left, PromoteOption right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PromoteOption"/>. </summary>
        public static implicit operator PromoteOption(string value) => new PromoteOption(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PromoteOption other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PromoteOption other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
