// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.MongoCluster.Models
{
    /// <summary> Specification for a node group. </summary>
    public partial class NodeGroupSpec
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NodeGroupSpec"/>. </summary>
        public NodeGroupSpec()
        {
        }

        /// <summary> Initializes a new instance of <see cref="NodeGroupSpec"/>. </summary>
        /// <param name="sku"> The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node. Example values: 'M30', 'M40'. </param>
        /// <param name="diskSizeGB"> The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024. </param>
        /// <param name="enableHa"> Whether high availability is enabled on the node group. </param>
        /// <param name="kind"> The node type deployed in the node group. </param>
        /// <param name="nodeCount"> The number of nodes in the node group. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NodeGroupSpec(string sku, long? diskSizeGB, bool? enableHa, NodeKind? kind, int? nodeCount, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Sku = sku;
            DiskSizeGB = diskSizeGB;
            EnableHa = enableHa;
            Kind = kind;
            NodeCount = nodeCount;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node. Example values: 'M30', 'M40'. </summary>
        public string Sku { get; set; }
        /// <summary> The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024. </summary>
        public long? DiskSizeGB { get; set; }
        /// <summary> Whether high availability is enabled on the node group. </summary>
        public bool? EnableHa { get; set; }
        /// <summary> The node type deployed in the node group. </summary>
        public NodeKind? Kind { get; set; }
        /// <summary> The number of nodes in the node group. </summary>
        public int? NodeCount { get; set; }
    }
}
