// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MongoCluster.Models
{
    /// <summary> The authentication modes supporting on the Mongo cluster. </summary>
    public readonly partial struct AuthenticationMode : IEquatable<AuthenticationMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AuthenticationMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AuthenticationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NativeAuthValue = "NativeAuth";
        private const string MicrosoftEntraIdValue = "MicrosoftEntraID";

        /// <summary> Native mongo authentication mode using username and password with auth mechanism 'SCRAM-SHA-256'. </summary>
        public static AuthenticationMode NativeAuth { get; } = new AuthenticationMode(NativeAuthValue);
        /// <summary> Microsoft Entra ID authentication mode using Entra users assigned to the cluster and auth mechanism 'MONGODB-OIDC'. </summary>
        public static AuthenticationMode MicrosoftEntraId { get; } = new AuthenticationMode(MicrosoftEntraIdValue);
        /// <summary> Determines if two <see cref="AuthenticationMode"/> values are the same. </summary>
        public static bool operator ==(AuthenticationMode left, AuthenticationMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AuthenticationMode"/> values are not the same. </summary>
        public static bool operator !=(AuthenticationMode left, AuthenticationMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AuthenticationMode"/>. </summary>
        public static implicit operator AuthenticationMode(string value) => new AuthenticationMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AuthenticationMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AuthenticationMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
