// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MongoCluster.Models
{
    /// <summary> The type of storage that a mongo cluster can be provisioned with. </summary>
    public readonly partial struct MongoClusterStorageType : IEquatable<MongoClusterStorageType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MongoClusterStorageType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MongoClusterStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PremiumSSDValue = "PremiumSSD";
        private const string PremiumSSDv2Value = "PremiumSSDv2";

        /// <summary> Premium SSD for high performance workloads. </summary>
        public static MongoClusterStorageType PremiumSSD { get; } = new MongoClusterStorageType(PremiumSSDValue);
        /// <summary> Premium SSD v2 for very IO-intensive workloads. This is a preview option and has additional limitations. </summary>
        public static MongoClusterStorageType PremiumSSDv2 { get; } = new MongoClusterStorageType(PremiumSSDv2Value);
        /// <summary> Determines if two <see cref="MongoClusterStorageType"/> values are the same. </summary>
        public static bool operator ==(MongoClusterStorageType left, MongoClusterStorageType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MongoClusterStorageType"/> values are not the same. </summary>
        public static bool operator !=(MongoClusterStorageType left, MongoClusterStorageType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MongoClusterStorageType"/>. </summary>
        public static implicit operator MongoClusterStorageType(string value) => new MongoClusterStorageType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MongoClusterStorageType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MongoClusterStorageType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
