// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.MongoCluster.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmMongoClusterModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="MongoCluster.MongoClusterData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="MongoCluster.MongoClusterData"/> instance for mocking. </returns>
        public static MongoClusterData MongoClusterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, MongoClusterProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MongoClusterData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MongoClusterProperties"/>. </summary>
        /// <param name="createMode"> The mode to create a mongo cluster. </param>
        /// <param name="restoreParameters"> The parameters to create a point-in-time restore mongo cluster. </param>
        /// <param name="administratorLogin"> The administrator's login for the mongo cluster. </param>
        /// <param name="administratorLoginPassword"> The password of the administrator login. </param>
        /// <param name="serverVersion"> The Mongo DB server version. Defaults to the latest available version if not specified. </param>
        /// <param name="connectionString"> The default mongo connection string for the cluster. </param>
        /// <param name="earliestRestoreTime"> Earliest restore timestamp in UTC ISO8601 format. </param>
        /// <param name="provisioningState"> The provisioning state of the mongo cluster. </param>
        /// <param name="clusterStatus"> The status of the mongo cluster. </param>
        /// <param name="publicNetworkAccess"> Whether or not public endpoint access is allowed for this mongo cluster. </param>
        /// <param name="nodeGroupSpecs"> The list of node group specs in the cluster. </param>
        /// <param name="privateEndpointConnections"> List of private endpoint connections. </param>
        /// <returns> A new <see cref="Models.MongoClusterProperties"/> instance for mocking. </returns>
        public static MongoClusterProperties MongoClusterProperties(CreateMode? createMode = null, MongoClusterRestoreContent restoreParameters = null, string administratorLogin = null, string administratorLoginPassword = null, string serverVersion = null, string connectionString = null, string earliestRestoreTime = null, ProvisioningState? provisioningState = null, MongoClusterStatus? clusterStatus = null, PublicNetworkAccess? publicNetworkAccess = null, IEnumerable<NodeGroupSpec> nodeGroupSpecs = null, IEnumerable<MongoClusterPrivateEndpointConnection> privateEndpointConnections = null)
        {
            nodeGroupSpecs ??= new List<NodeGroupSpec>();
            privateEndpointConnections ??= new List<MongoClusterPrivateEndpointConnection>();

            return new MongoClusterProperties(
                createMode,
                restoreParameters,
                administratorLogin,
                administratorLoginPassword,
                serverVersion,
                connectionString,
                earliestRestoreTime,
                provisioningState,
                clusterStatus,
                publicNetworkAccess,
                nodeGroupSpecs?.ToList(),
                privateEndpointConnections?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MongoClusterPrivateEndpointConnection"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The private endpoint connection properties. </param>
        /// <returns> A new <see cref="Models.MongoClusterPrivateEndpointConnection"/> instance for mocking. </returns>
        public static MongoClusterPrivateEndpointConnection MongoClusterPrivateEndpointConnection(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateEndpointConnectionProperties properties = null)
        {
            return new MongoClusterPrivateEndpointConnection(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PrivateEndpointConnectionProperties"/>. </summary>
        /// <param name="groupIds"> The group ids for the private endpoint resource. </param>
        /// <param name="privateEndpointId"> The private endpoint resource. </param>
        /// <param name="privateLinkServiceConnectionState"> A collection of information about the state of the connection between service consumer and provider. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection resource. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionProperties"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionProperties PrivateEndpointConnectionProperties(IEnumerable<string> groupIds = null, ResourceIdentifier privateEndpointId = null, MongoClusterPrivateLinkServiceConnectionState privateLinkServiceConnectionState = null, MongoClusterPrivateEndpointConnectionProvisioningState? provisioningState = null)
        {
            groupIds ??= new List<string>();

            return new PrivateEndpointConnectionProperties(groupIds?.ToList(), privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, privateLinkServiceConnectionState, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ListConnectionStringsResult"/>. </summary>
        /// <param name="connectionStrings"> An array that contains the connection strings for a mongo cluster. </param>
        /// <returns> A new <see cref="Models.ListConnectionStringsResult"/> instance for mocking. </returns>
        public static ListConnectionStringsResult ListConnectionStringsResult(IEnumerable<ConnectionString> connectionStrings = null)
        {
            connectionStrings ??= new List<ConnectionString>();

            return new ListConnectionStringsResult(connectionStrings?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConnectionString"/>. </summary>
        /// <param name="uri"> Value of the connection string. </param>
        /// <param name="description"> Description of the connection string. </param>
        /// <returns> A new <see cref="Models.ConnectionString"/> instance for mocking. </returns>
        public static ConnectionString ConnectionString(string uri = null, string description = null)
        {
            return new ConnectionString(uri, description, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CheckNameAvailabilityResult"/>. </summary>
        /// <param name="nameAvailable"> Indicates if the resource name is available. </param>
        /// <param name="reason"> The reason why the given name is not available. </param>
        /// <param name="message"> Detailed reason why the given name is not available. </param>
        /// <returns> A new <see cref="Models.CheckNameAvailabilityResult"/> instance for mocking. </returns>
        public static CheckNameAvailabilityResult CheckNameAvailabilityResult(bool? nameAvailable = null, CheckNameAvailabilityReason? reason = null, string message = null)
        {
            return new CheckNameAvailabilityResult(nameAvailable, reason, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="MongoCluster.FirewallRuleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="MongoCluster.FirewallRuleData"/> instance for mocking. </returns>
        public static FirewallRuleData FirewallRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FirewallRuleProperties properties = null)
        {
            return new FirewallRuleData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FirewallRuleProperties"/>. </summary>
        /// <param name="provisioningState"> The provisioning state of the firewall rule. </param>
        /// <param name="startIPAddress"> The start IP address of the mongo cluster firewall rule. Must be IPv4 format. </param>
        /// <param name="endIPAddress"> The end IP address of the mongo cluster firewall rule. Must be IPv4 format. </param>
        /// <returns> A new <see cref="Models.FirewallRuleProperties"/> instance for mocking. </returns>
        public static FirewallRuleProperties FirewallRuleProperties(ProvisioningState? provisioningState = null, string startIPAddress = null, string endIPAddress = null)
        {
            return new FirewallRuleProperties(provisioningState, startIPAddress, endIPAddress, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="MongoCluster.PrivateEndpointConnectionResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="MongoCluster.PrivateEndpointConnectionResourceData"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionResourceData PrivateEndpointConnectionResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateEndpointConnectionProperties properties = null)
        {
            return new PrivateEndpointConnectionResourceData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MongoClusterPrviateLinkResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Models.MongoClusterPrviateLinkResourceData"/> instance for mocking. </returns>
        public static MongoClusterPrviateLinkResourceData MongoClusterPrviateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MongoClusterPrivateLinkResourceProperties properties = null)
        {
            return new MongoClusterPrviateLinkResourceData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MongoClusterPrivateLinkResourceProperties"/>. </summary>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> The private link resource private link DNS zone name. </param>
        /// <returns> A new <see cref="Models.MongoClusterPrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static MongoClusterPrivateLinkResourceProperties MongoClusterPrivateLinkResourceProperties(string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new MongoClusterPrivateLinkResourceProperties(groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
