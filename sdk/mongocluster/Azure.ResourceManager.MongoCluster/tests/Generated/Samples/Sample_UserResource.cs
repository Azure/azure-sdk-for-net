// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.MongoCluster.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.MongoCluster.Samples
{
    public partial class Sample_UserResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetsAUserOnAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_UserGet.json
            // this example is just showing the usage of "User_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this UserResource created on azure
            // for more information of creating UserResource, please refer to the document of UserResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string mongoClusterName = "myMongoCluster";
            string userName = "uuuuuuuu-uuuu-uuuu-uuuu-uuuuuuuuuuuu";
            ResourceIdentifier userResourceId = UserResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName, userName);
            UserResource user = client.GetUserResource(userResourceId);

            // invoke the operation
            UserResource result = await user.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            UserData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeletesAUserOnAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_UserDelete.json
            // this example is just showing the usage of "User_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this UserResource created on azure
            // for more information of creating UserResource, please refer to the document of UserResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string mongoClusterName = "myMongoCluster";
            string userName = "uuuuuuuu-uuuu-uuuu-uuuu-uuuuuuuuuuuu";
            ResourceIdentifier userResourceId = UserResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName, userName);
            UserResource user = client.GetUserResource(userResourceId);

            // invoke the operation
            await user.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_CreatesAUserOnAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_UserCreateOrUpdate.json
            // this example is just showing the usage of "User_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this UserResource created on azure
            // for more information of creating UserResource, please refer to the document of UserResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string mongoClusterName = "myMongoCluster";
            string userName = "uuuuuuuu-uuuu-uuuu-uuuu-uuuuuuuuuuuu";
            ResourceIdentifier userResourceId = UserResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName, userName);
            UserResource user = client.GetUserResource(userResourceId);

            // invoke the operation
            UserData data = new UserData
            {
                Properties = new UserProperties
                {
                    IdentityProvider = new EntraIdentityProvider(new EntraIdentityProviderProperties(EntraPrincipalType.User)),
                    Roles = { new DatabaseRole("admin", UserRole.Root) },
                },
            };
            ArmOperation<UserResource> lro = await user.UpdateAsync(WaitUntil.Completed, data);
            UserResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            UserData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
