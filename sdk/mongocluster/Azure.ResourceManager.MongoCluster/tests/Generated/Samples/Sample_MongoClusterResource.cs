// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.MongoCluster.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.MongoCluster.Samples
{
    public partial class Sample_MongoClusterResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetsAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_Get.json
            // this example is just showing the usage of "MongoCluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestResourceGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            MongoClusterResource result = await mongoCluster.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MongoClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeletesAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_Delete.json
            // this example is just showing the usage of "MongoCluster_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestResourceGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            await mongoCluster.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdatesTheCustomerManagedEncryptionKeyOnAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_PatchCMK.json
            // this example is just showing the usage of "MongoCluster_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestResourceGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            MongoClusterPatch patch = new MongoClusterPatch
            {
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myidentity2")] = new UserAssignedIdentity()
},
                },
                Properties = new MongoClusterUpdateProperties
                {
                    CustomerManagedKeyEncryption = new CustomerManagedKeyEncryptionProperties
                    {
                        KeyEncryptionKeyIdentity = new KeyEncryptionKeyIdentity
                        {
                            IdentityType = KeyEncryptionKeyIdentityType.UserAssignedIdentity,
                            UserAssignedIdentityResourceId = "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myidentity2",
                        },
                        KeyEncryptionKeyUri = "https://myVault.vault.azure.net/keys/myKey2",
                    },
                },
            };
            ArmOperation<MongoClusterResource> lro = await mongoCluster.UpdateAsync(WaitUntil.Completed, patch);
            MongoClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MongoClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_EnablesDataAPIOnAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_PatchDataApi.json
            // this example is just showing the usage of "MongoCluster_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestResourceGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            MongoClusterPatch patch = new MongoClusterPatch
            {
                Properties = new MongoClusterUpdateProperties
                {
                    DataApiMode = DataApiMode.Enabled,
                },
            };
            ArmOperation<MongoClusterResource> lro = await mongoCluster.UpdateAsync(WaitUntil.Completed, patch);
            MongoClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MongoClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdatesTheAllowedAuthenticationModesToRemoveNativeAuthentication()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_PatchDisableNativeAuth.json
            // this example is just showing the usage of "MongoCluster_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestResourceGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            MongoClusterPatch patch = new MongoClusterPatch
            {
                Properties = new MongoClusterUpdateProperties
                {
                    AuthConfigAllowedModes = { AuthenticationMode.MicrosoftEntraId },
                },
            };
            ArmOperation<MongoClusterResource> lro = await mongoCluster.UpdateAsync(WaitUntil.Completed, patch);
            MongoClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MongoClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdatesTheDiskSizeOnAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_PatchDiskSize.json
            // this example is just showing the usage of "MongoCluster_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestResourceGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            MongoClusterPatch patch = new MongoClusterPatch
            {
                Properties = new MongoClusterUpdateProperties
                {
                    Storage = new StorageProperties
                    {
                        SizeGb = 256L,
                    },
                },
            };
            ArmOperation<MongoClusterResource> lro = await mongoCluster.UpdateAsync(WaitUntil.Completed, patch);
            MongoClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MongoClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdatesTheAllowedAuthenticationModesToIncludeMicrosoftEntraIDAuthentication()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_PatchEnableEntraIDAuth.json
            // this example is just showing the usage of "MongoCluster_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestResourceGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            MongoClusterPatch patch = new MongoClusterPatch
            {
                Properties = new MongoClusterUpdateProperties
                {
                    AuthConfigAllowedModes = { AuthenticationMode.NativeAuth, AuthenticationMode.MicrosoftEntraId },
                },
            };
            ArmOperation<MongoClusterResource> lro = await mongoCluster.UpdateAsync(WaitUntil.Completed, patch);
            MongoClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MongoClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_DisablesPublicNetworkAccessOnAMongoClusterResourceWithAPrivateEndpointConnection()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_PatchPrivateNetworkAccess.json
            // this example is just showing the usage of "MongoCluster_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestResourceGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            MongoClusterPatch patch = new MongoClusterPatch
            {
                Properties = new MongoClusterUpdateProperties
                {
                    PublicNetworkAccess = MongoClusterPublicNetworkAccess.Disabled,
                },
            };
            ArmOperation<MongoClusterResource> lro = await mongoCluster.UpdateAsync(WaitUntil.Completed, patch);
            MongoClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MongoClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdatesThePremiumSSDv2SizeOnAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_PatchSSDv2.json
            // this example is just showing the usage of "MongoCluster_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestResourceGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            MongoClusterPatch patch = new MongoClusterPatch
            {
                Properties = new MongoClusterUpdateProperties
                {
                    Storage = new StorageProperties
                    {
                        SizeGb = 128L,
                        Type = StorageType.PremiumSSDv2,
                    },
                },
            };
            ArmOperation<MongoClusterResource> lro = await mongoCluster.UpdateAsync(WaitUntil.Completed, patch);
            MongoClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MongoClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ResetsTheAdministratorLoginPassword()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_ResetPassword.json
            // this example is just showing the usage of "MongoCluster_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestResourceGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            MongoClusterPatch patch = new MongoClusterPatch
            {
                Properties = new MongoClusterUpdateProperties
                {
                    Administrator = new MongoClusterAdministratorProperties
                    {
                        UserName = "mongoAdmin",
                        Password = "password",
                    },
                },
            };
            ArmOperation<MongoClusterResource> lro = await mongoCluster.UpdateAsync(WaitUntil.Completed, patch);
            MongoClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MongoClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdatesAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_Update.json
            // this example is just showing the usage of "MongoCluster_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestResourceGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            MongoClusterPatch patch = new MongoClusterPatch
            {
                Properties = new MongoClusterUpdateProperties
                {
                    Administrator = new MongoClusterAdministratorProperties
                    {
                        UserName = "mongoAdmin",
                    },
                    ServerVersion = "5.0",
                    PublicNetworkAccess = MongoClusterPublicNetworkAccess.Enabled,
                    HighAvailabilityTargetMode = HighAvailabilityMode.SameZone,
                    Storage = new StorageProperties
                    {
                        SizeGb = 256L,
                        Type = StorageType.PremiumSSD,
                    },
                    ShardingShardCount = 4,
                    ComputeTier = "M50",
                    DataApiMode = DataApiMode.Disabled,
                    PreviewFeatures = { },
                    AuthConfigAllowedModes = { AuthenticationMode.NativeAuth },
                },
            };
            ArmOperation<MongoClusterResource> lro = await mongoCluster.UpdateAsync(WaitUntil.Completed, patch);
            MongoClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MongoClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetConnectionStrings_ListTheAvailableConnectionStringsForTheMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_ListConnectionStrings.json
            // this example is just showing the usage of "MongoClusters_ListConnectionStrings" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            MongoClusterConnectionStringsResult result = await mongoCluster.GetConnectionStringsAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Promote_PromotesAReplicaMongoClusterResourceToAPrimaryRole()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_ForcePromoteReplica.json
            // this example is just showing the usage of "MongoClusters_Promote" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation
            PromoteReplicaContent content = new PromoteReplicaContent(MongoClusterPromoteOption.Forced)
            {
                Mode = MongoClusterPromoteMode.Switchover,
            };
            await mongoCluster.PromoteAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetPrivateLinks_ListsThePrivateLinkResourcesAvailableOnAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_PrivateLinkResourceList.json
            // this example is just showing the usage of "PrivateLinkResource_ListByMongoCluster" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation and iterate over the result
            await foreach (MongoClusterPrivateLinkResourceData item in mongoCluster.GetPrivateLinksAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetReplicasByParent_ListTheReplicasLinkedToAMongoClusterResource()
        {
            // Generated from example definition: 2025-09-01/MongoClusters_ReplicaList.json
            // this example is just showing the usage of "Replica_ListByParent" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MongoClusterResource created on azure
            // for more information of creating MongoClusterResource, please refer to the document of MongoClusterResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "TestGroup";
            string mongoClusterName = "myMongoCluster";
            ResourceIdentifier mongoClusterResourceId = MongoClusterResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mongoClusterName);
            MongoClusterResource mongoCluster = client.GetMongoClusterResource(mongoClusterResourceId);

            // invoke the operation and iterate over the result
            await foreach (MongoClusterReplica item in mongoCluster.GetReplicasByParentAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }
    }
}
