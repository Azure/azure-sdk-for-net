// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCatalog.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Azure Data Catalog.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ADCCatalog : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ADCCatalog class.
        /// </summary>
        public ADCCatalog()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ADCCatalog class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Resource location</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="etag">Resource etag</param>
        /// <param name="sku">Azure data catalog SKU. Possible values include:
        /// 'Free', 'Standard'</param>
        /// <param name="units">Azure data catalog units.</param>
        /// <param name="admins">Azure data catalog admin list.</param>
        /// <param name="users">Azure data catalog user list.</param>
        /// <param name="successfullyProvisioned">Azure data catalog provision
        /// status.</param>
        /// <param name="enableAutomaticUnitAdjustment">Automatic unit
        /// adjustment enabled or not.</param>
        public ADCCatalog(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string etag = default(string), string sku = default(string), int? units = default(int?), IList<Principals> admins = default(IList<Principals>), IList<Principals> users = default(IList<Principals>), bool? successfullyProvisioned = default(bool?), bool? enableAutomaticUnitAdjustment = default(bool?))
            : base(id, name, type, location, tags, etag)
        {
            Sku = sku;
            Units = units;
            Admins = admins;
            Users = users;
            SuccessfullyProvisioned = successfullyProvisioned;
            EnableAutomaticUnitAdjustment = enableAutomaticUnitAdjustment;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets azure data catalog SKU. Possible values include:
        /// 'Free', 'Standard'
        /// </summary>
        [JsonProperty(PropertyName = "properties.sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or sets azure data catalog units.
        /// </summary>
        [JsonProperty(PropertyName = "properties.units")]
        public int? Units { get; set; }

        /// <summary>
        /// Gets or sets azure data catalog admin list.
        /// </summary>
        [JsonProperty(PropertyName = "properties.admins")]
        public IList<Principals> Admins { get; set; }

        /// <summary>
        /// Gets or sets azure data catalog user list.
        /// </summary>
        [JsonProperty(PropertyName = "properties.users")]
        public IList<Principals> Users { get; set; }

        /// <summary>
        /// Gets or sets azure data catalog provision status.
        /// </summary>
        [JsonProperty(PropertyName = "properties.successfullyProvisioned")]
        public bool? SuccessfullyProvisioned { get; set; }

        /// <summary>
        /// Gets or sets automatic unit adjustment enabled or not.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableAutomaticUnitAdjustment")]
        public bool? EnableAutomaticUnitAdjustment { get; set; }

    }
}
