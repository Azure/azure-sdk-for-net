// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.BillingBenefits.Models;

namespace Azure.ResourceManager.BillingBenefits
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _savingsPlanModelSavingsPlanClientDiagnostics;
        private SavingsPlanRestOperations _savingsPlanModelSavingsPlanRestClient;
        private ClientDiagnostics _defaultClientDiagnostics;
        private BillingBenefitsRPRestOperations _defaultRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics SavingsPlanModelSavingsPlanClientDiagnostics => _savingsPlanModelSavingsPlanClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.BillingBenefits", SavingsPlanModelResource.ResourceType.Namespace, Diagnostics);
        private SavingsPlanRestOperations SavingsPlanModelSavingsPlanRestClient => _savingsPlanModelSavingsPlanRestClient ??= new SavingsPlanRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SavingsPlanModelResource.ResourceType));
        private ClientDiagnostics DefaultClientDiagnostics => _defaultClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.BillingBenefits", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private BillingBenefitsRPRestOperations DefaultRestClient => _defaultRestClient ??= new BillingBenefitsRPRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets an object representing a SavingsPlanOrderAliasModelResource along with the instance operations that can be performed on it in the TenantResource. </summary>
        /// <returns> Returns a <see cref="SavingsPlanOrderAliasModelResource" /> object. </returns>
        public virtual SavingsPlanOrderAliasModelResource GetSavingsPlanOrderAliasModel()
        {
            return new SavingsPlanOrderAliasModelResource(Client, new ResourceIdentifier(Id.ToString() + "/savingsPlanOrderAliases"));
        }

        /// <summary> Gets a collection of SavingsPlanOrderModelResources in the TenantResource. </summary>
        /// <returns> An object representing collection of SavingsPlanOrderModelResources and their operations over a SavingsPlanOrderModelResource. </returns>
        public virtual SavingsPlanOrderModelCollection GetSavingsPlanOrderModels()
        {
            return GetCachedClient(Client => new SavingsPlanOrderModelCollection(Client, Id));
        }

        /// <summary> Gets an object representing a ReservationOrderAliasModelResource along with the instance operations that can be performed on it in the TenantResource. </summary>
        /// <returns> Returns a <see cref="ReservationOrderAliasModelResource" /> object. </returns>
        public virtual ReservationOrderAliasModelResource GetReservationOrderAliasModel()
        {
            return new ReservationOrderAliasModelResource(Client, new ResourceIdentifier(Id.ToString() + "/reservationOrderAliases"));
        }

        /// <summary>
        /// List savings plans.
        /// Request Path: /providers/Microsoft.BillingBenefits/savingsPlans
        /// Operation Id: SavingsPlan_ListAll
        /// </summary>
        /// <param name="filter"> May be used to filter by reservation properties. The filter supports &apos;eq&apos;, &apos;or&apos;, and &apos;and&apos;. It does not currently support &apos;ne&apos;, &apos;gt&apos;, &apos;le&apos;, &apos;ge&apos;, or &apos;not&apos;. Reservation properties include sku/name, properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate, provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType, userFriendlyRenewState}. </param>
        /// <param name="orderby"> May be used to sort order by reservation properties. </param>
        /// <param name="refreshSummary"> To indicate whether to refresh the roll up counts of the savings plans group by provisioning states. </param>
        /// <param name="skiptoken"> The number of savings plans to skip from the list before returning results. </param>
        /// <param name="selectedState"> The selected provisioning state. </param>
        /// <param name="take"> To number of savings plans to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SavingsPlanModelResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SavingsPlanModelResource> GetSavingsPlanModelsAsync(string filter = null, string orderby = null, string refreshSummary = null, float? skiptoken = null, string selectedState = null, float? take = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SavingsPlanModelResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SavingsPlanModelSavingsPlanClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSavingsPlanModels");
                scope.Start();
                try
                {
                    var response = await SavingsPlanModelSavingsPlanRestClient.ListAllAsync(filter, orderby, refreshSummary, skiptoken, selectedState, take, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SavingsPlanModelResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SavingsPlanModelResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SavingsPlanModelSavingsPlanClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSavingsPlanModels");
                scope.Start();
                try
                {
                    var response = await SavingsPlanModelSavingsPlanRestClient.ListAllNextPageAsync(nextLink, filter, orderby, refreshSummary, skiptoken, selectedState, take, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SavingsPlanModelResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List savings plans.
        /// Request Path: /providers/Microsoft.BillingBenefits/savingsPlans
        /// Operation Id: SavingsPlan_ListAll
        /// </summary>
        /// <param name="filter"> May be used to filter by reservation properties. The filter supports &apos;eq&apos;, &apos;or&apos;, and &apos;and&apos;. It does not currently support &apos;ne&apos;, &apos;gt&apos;, &apos;le&apos;, &apos;ge&apos;, or &apos;not&apos;. Reservation properties include sku/name, properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate, provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType, userFriendlyRenewState}. </param>
        /// <param name="orderby"> May be used to sort order by reservation properties. </param>
        /// <param name="refreshSummary"> To indicate whether to refresh the roll up counts of the savings plans group by provisioning states. </param>
        /// <param name="skiptoken"> The number of savings plans to skip from the list before returning results. </param>
        /// <param name="selectedState"> The selected provisioning state. </param>
        /// <param name="take"> To number of savings plans to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SavingsPlanModelResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SavingsPlanModelResource> GetSavingsPlanModels(string filter = null, string orderby = null, string refreshSummary = null, float? skiptoken = null, string selectedState = null, float? take = null, CancellationToken cancellationToken = default)
        {
            Page<SavingsPlanModelResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SavingsPlanModelSavingsPlanClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSavingsPlanModels");
                scope.Start();
                try
                {
                    var response = SavingsPlanModelSavingsPlanRestClient.ListAll(filter, orderby, refreshSummary, skiptoken, selectedState, take, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SavingsPlanModelResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SavingsPlanModelResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SavingsPlanModelSavingsPlanClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSavingsPlanModels");
                scope.Start();
                try
                {
                    var response = SavingsPlanModelSavingsPlanRestClient.ListAllNextPage(nextLink, filter, orderby, refreshSummary, skiptoken, selectedState, take, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SavingsPlanModelResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Validate savings plan purchase.
        /// Request Path: /providers/Microsoft.BillingBenefits/validate
        /// Operation Id: ValidatePurchase
        /// </summary>
        /// <param name="content"> Request body for validating the purchase of a savings plan. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SavingsPlanValidateResponse>> ValidatePurchaseAsync(SavingsPlanPurchaseValidateContent content, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("TenantResourceExtensionClient.ValidatePurchase");
            scope.Start();
            try
            {
                var response = await DefaultRestClient.ValidatePurchaseAsync(content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Validate savings plan purchase.
        /// Request Path: /providers/Microsoft.BillingBenefits/validate
        /// Operation Id: ValidatePurchase
        /// </summary>
        /// <param name="content"> Request body for validating the purchase of a savings plan. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SavingsPlanValidateResponse> ValidatePurchase(SavingsPlanPurchaseValidateContent content, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("TenantResourceExtensionClient.ValidatePurchase");
            scope.Start();
            try
            {
                var response = DefaultRestClient.ValidatePurchase(content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
