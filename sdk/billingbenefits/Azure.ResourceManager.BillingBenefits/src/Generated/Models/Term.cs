// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.BillingBenefits.Models
{
    /// <summary> Represent benefit term in ISO 8601 format. </summary>
    public readonly partial struct Term : IEquatable<Term>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Term"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Term(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string P1YValue = "P1Y";
        private const string P3YValue = "P3Y";
        private const string P5YValue = "P5Y";

        /// <summary> P1Y. </summary>
        public static Term P1Y { get; } = new Term(P1YValue);
        /// <summary> P3Y. </summary>
        public static Term P3Y { get; } = new Term(P3YValue);
        /// <summary> P5Y. </summary>
        public static Term P5Y { get; } = new Term(P5YValue);
        /// <summary> Determines if two <see cref="Term"/> values are the same. </summary>
        public static bool operator ==(Term left, Term right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Term"/> values are not the same. </summary>
        public static bool operator !=(Term left, Term right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Term"/>. </summary>
        public static implicit operator Term(string value) => new Term(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Term other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Term other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
