// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.BillingBenefits.Models
{
    public partial class BillingPlanInformation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PricingCurrencyTotal))
            {
                writer.WritePropertyName("pricingCurrencyTotal");
                writer.WriteObjectValue(PricingCurrencyTotal);
            }
            if (Optional.IsDefined(StartOn))
            {
                writer.WritePropertyName("startDate");
                writer.WriteStringValue(StartOn.Value, "D");
            }
            if (Optional.IsDefined(NextPaymentDueOn))
            {
                writer.WritePropertyName("nextPaymentDueDate");
                writer.WriteStringValue(NextPaymentDueOn.Value, "D");
            }
            if (Optional.IsCollectionDefined(Transactions))
            {
                writer.WritePropertyName("transactions");
                writer.WriteStartArray();
                foreach (var item in Transactions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static BillingPlanInformation DeserializeBillingPlanInformation(JsonElement element)
        {
            Optional<Price> pricingCurrencyTotal = default;
            Optional<DateTimeOffset> startDate = default;
            Optional<DateTimeOffset> nextPaymentDueDate = default;
            Optional<IList<PaymentDetail>> transactions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("pricingCurrencyTotal"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    pricingCurrencyTotal = Price.DeserializePrice(property.Value);
                    continue;
                }
                if (property.NameEquals("startDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startDate = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("nextPaymentDueDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nextPaymentDueDate = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("transactions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PaymentDetail> array = new List<PaymentDetail>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PaymentDetail.DeserializePaymentDetail(item));
                    }
                    transactions = array;
                    continue;
                }
            }
            return new BillingPlanInformation(pricingCurrencyTotal.Value, Optional.ToNullable(startDate), Optional.ToNullable(nextPaymentDueDate), Optional.ToList(transactions));
        }
    }
}
