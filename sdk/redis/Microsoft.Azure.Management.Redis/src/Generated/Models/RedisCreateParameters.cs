// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Redis.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Parameters supplied to the Create Redis operation.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RedisCreateParameters
    {
        /// <summary>
        /// Initializes a new instance of the RedisCreateParameters class.
        /// </summary>
        public RedisCreateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedisCreateParameters class.
        /// </summary>
        /// <param name="sku">The SKU of the Redis cache to deploy.</param>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="redisConfiguration">All Redis Settings. Few possible
        /// keys:
        /// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
        /// etc.</param>
        /// <param name="redisVersion">Redis version. This should be in the
        /// form 'major[.minor]' (only 'major' is required) or the value
        /// 'latest' which refers to the latest stable Redis version that is
        /// available. Supported versions: 4.0, 6.0 (latest). Default value is
        /// 'latest'.</param>
        /// <param name="enableNonSslPort">Specifies whether the non-ssl Redis
        /// server port (6379) is enabled.</param>
        /// <param name="replicasPerMaster">The number of replicas to be
        /// created per primary.</param>
        /// <param name="replicasPerPrimary">The number of replicas to be
        /// created per primary.</param>
        /// <param name="tenantSettings">A dictionary of tenant
        /// settings</param>
        /// <param name="shardCount">The number of shards to be created on a
        /// Premium Cluster Cache.</param>
        /// <param name="minimumTlsVersion">Optional: requires clients to use a
        /// specified TLS version (or higher) to connect (e,g, '1.0', '1.1',
        /// '1.2'). Possible values include: '1.0', '1.1', '1.2'</param>
        /// <param name="publicNetworkAccess">Whether or not public endpoint
        /// access is allowed for this cache.  Value is optional but if passed
        /// in, must be 'Enabled' or 'Disabled'. If 'Disabled', private
        /// endpoints are the exclusive access method. Default value is
        /// 'Enabled'. Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="subnetId">The full resource ID of a subnet in a
        /// virtual network to deploy the Redis cache in. Example format:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1</param>
        /// <param name="staticIP">Static IP address. Optionally, may be
        /// specified when deploying a Redis cache inside an existing Azure
        /// Virtual Network; auto assigned by default.</param>
        /// <param name="zones">A list of availability zones denoting where the
        /// resource needs to come from.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="identity">The identity of the resource.</param>
        public RedisCreateParameters(Sku sku, string location, RedisCommonPropertiesRedisConfiguration redisConfiguration = default(RedisCommonPropertiesRedisConfiguration), string redisVersion = default(string), bool? enableNonSslPort = default(bool?), int? replicasPerMaster = default(int?), int? replicasPerPrimary = default(int?), IDictionary<string, string> tenantSettings = default(IDictionary<string, string>), int? shardCount = default(int?), string minimumTlsVersion = default(string), string publicNetworkAccess = default(string), string subnetId = default(string), string staticIP = default(string), IList<string> zones = default(IList<string>), IDictionary<string, string> tags = default(IDictionary<string, string>), ManagedServiceIdentity identity = default(ManagedServiceIdentity))
        {
            RedisConfiguration = redisConfiguration;
            RedisVersion = redisVersion;
            EnableNonSslPort = enableNonSslPort;
            ReplicasPerMaster = replicasPerMaster;
            ReplicasPerPrimary = replicasPerPrimary;
            TenantSettings = tenantSettings;
            ShardCount = shardCount;
            MinimumTlsVersion = minimumTlsVersion;
            PublicNetworkAccess = publicNetworkAccess;
            Sku = sku;
            SubnetId = subnetId;
            StaticIP = staticIP;
            Zones = zones;
            Location = location;
            Tags = tags;
            Identity = identity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets all Redis Settings. Few possible keys:
        /// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
        /// etc.
        /// </summary>
        [JsonProperty(PropertyName = "properties.redisConfiguration")]
        public RedisCommonPropertiesRedisConfiguration RedisConfiguration { get; set; }

        /// <summary>
        /// Gets or sets redis version. This should be in the form
        /// 'major[.minor]' (only 'major' is required) or the value 'latest'
        /// which refers to the latest stable Redis version that is available.
        /// Supported versions: 4.0, 6.0 (latest). Default value is 'latest'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.redisVersion")]
        public string RedisVersion { get; set; }

        /// <summary>
        /// Gets or sets specifies whether the non-ssl Redis server port (6379)
        /// is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableNonSslPort")]
        public bool? EnableNonSslPort { get; set; }

        /// <summary>
        /// Gets or sets the number of replicas to be created per primary.
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicasPerMaster")]
        public int? ReplicasPerMaster { get; set; }

        /// <summary>
        /// Gets or sets the number of replicas to be created per primary.
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicasPerPrimary")]
        public int? ReplicasPerPrimary { get; set; }

        /// <summary>
        /// Gets or sets a dictionary of tenant settings
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantSettings")]
        public IDictionary<string, string> TenantSettings { get; set; }

        /// <summary>
        /// Gets or sets the number of shards to be created on a Premium
        /// Cluster Cache.
        /// </summary>
        [JsonProperty(PropertyName = "properties.shardCount")]
        public int? ShardCount { get; set; }

        /// <summary>
        /// Gets or sets optional: requires clients to use a specified TLS
        /// version (or higher) to connect (e,g, '1.0', '1.1', '1.2'). Possible
        /// values include: '1.0', '1.1', '1.2'
        /// </summary>
        [JsonProperty(PropertyName = "properties.minimumTlsVersion")]
        public string MinimumTlsVersion { get; set; }

        /// <summary>
        /// Gets or sets whether or not public endpoint access is allowed for
        /// this cache.  Value is optional but if passed in, must be 'Enabled'
        /// or 'Disabled'. If 'Disabled', private endpoints are the exclusive
        /// access method. Default value is 'Enabled'. Possible values include:
        /// 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess { get; set; }

        /// <summary>
        /// Gets or sets the SKU of the Redis cache to deploy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets the full resource ID of a subnet in a virtual network
        /// to deploy the Redis cache in. Example format:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
        /// </summary>
        [JsonProperty(PropertyName = "properties.subnetId")]
        public string SubnetId { get; set; }

        /// <summary>
        /// Gets or sets static IP address. Optionally, may be specified when
        /// deploying a Redis cache inside an existing Azure Virtual Network;
        /// auto assigned by default.
        /// </summary>
        [JsonProperty(PropertyName = "properties.staticIP")]
        public string StaticIP { get; set; }

        /// <summary>
        /// Gets or sets a list of availability zones denoting where the
        /// resource needs to come from.
        /// </summary>
        [JsonProperty(PropertyName = "zones")]
        public IList<string> Zones { get; set; }

        /// <summary>
        /// Gets or sets the geo-location where the resource lives
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the identity of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public ManagedServiceIdentity Identity { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sku");
            }
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (Sku != null)
            {
                Sku.Validate();
            }
            if (SubnetId != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(SubnetId, "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "SubnetId", "^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$");
                }
            }
            if (StaticIP != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(StaticIP, "^\\d+\\.\\d+\\.\\d+\\.\\d+$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "StaticIP", "^\\d+\\.\\d+\\.\\d+\\.\\d+$");
                }
            }
            if (Identity != null)
            {
                Identity.Validate();
            }
        }
    }
}
