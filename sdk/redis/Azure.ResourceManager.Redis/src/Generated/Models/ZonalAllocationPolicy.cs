// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Redis.Models
{
    /// <summary> Optional: Specifies how availability zones are allocated to the Redis cache. 'Automatic' enables zone redundancy and Azure will automatically select zones based on regional availability and capacity. 'UserDefined' will select availability zones passed in by you using the 'zones' parameter. 'NoZones' will produce a non-zonal cache. If 'zonalAllocationPolicy' is not passed, it will be set to 'UserDefined' when zones are passed in, otherwise, it will be set to 'Automatic' in regions where zones are supported and 'NoZones' in regions where zones are not supported. </summary>
    public readonly partial struct ZonalAllocationPolicy : IEquatable<ZonalAllocationPolicy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ZonalAllocationPolicy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ZonalAllocationPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AutomaticValue = "Automatic";
        private const string UserDefinedValue = "UserDefined";
        private const string NoZonesValue = "NoZones";

        /// <summary> Automatic. </summary>
        public static ZonalAllocationPolicy Automatic { get; } = new ZonalAllocationPolicy(AutomaticValue);
        /// <summary> UserDefined. </summary>
        public static ZonalAllocationPolicy UserDefined { get; } = new ZonalAllocationPolicy(UserDefinedValue);
        /// <summary> NoZones. </summary>
        public static ZonalAllocationPolicy NoZones { get; } = new ZonalAllocationPolicy(NoZonesValue);
        /// <summary> Determines if two <see cref="ZonalAllocationPolicy"/> values are the same. </summary>
        public static bool operator ==(ZonalAllocationPolicy left, ZonalAllocationPolicy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ZonalAllocationPolicy"/> values are not the same. </summary>
        public static bool operator !=(ZonalAllocationPolicy left, ZonalAllocationPolicy right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ZonalAllocationPolicy"/>. </summary>
        public static implicit operator ZonalAllocationPolicy(string value) => new ZonalAllocationPolicy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ZonalAllocationPolicy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ZonalAllocationPolicy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
