// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Redis.Models
{
    public partial class RedisCommonConfiguration : IUtf8JsonSerializable, IJsonModel<RedisCommonConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RedisCommonConfiguration>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<RedisCommonConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RedisCommonConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RedisCommonConfiguration)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(IsRdbBackupEnabled))
            {
                writer.WritePropertyName("rdb-backup-enabled"u8);
                writer.WriteBooleanValue(IsRdbBackupEnabled.Value);
            }
            if (Optional.IsDefined(RdbBackupFrequency))
            {
                writer.WritePropertyName("rdb-backup-frequency"u8);
                writer.WriteStringValue(RdbBackupFrequency);
            }
            if (Optional.IsDefined(RdbBackupMaxSnapshotCount))
            {
                writer.WritePropertyName("rdb-backup-max-snapshot-count"u8);
                WriteRdbBackupMaxSnapshotCount(writer, options);
            }
            if (Optional.IsDefined(RdbStorageConnectionString))
            {
                writer.WritePropertyName("rdb-storage-connection-string"u8);
                writer.WriteStringValue(RdbStorageConnectionString);
            }
            if (Optional.IsDefined(IsAofBackupEnabled))
            {
                writer.WritePropertyName("aof-backup-enabled"u8);
                writer.WriteBooleanValue(IsAofBackupEnabled.Value);
            }
            if (Optional.IsDefined(AofStorageConnectionString0))
            {
                writer.WritePropertyName("aof-storage-connection-string-0"u8);
                writer.WriteStringValue(AofStorageConnectionString0);
            }
            if (Optional.IsDefined(AofStorageConnectionString1))
            {
                writer.WritePropertyName("aof-storage-connection-string-1"u8);
                writer.WriteStringValue(AofStorageConnectionString1);
            }
            if (Optional.IsDefined(MaxfragmentationmemoryReserved))
            {
                writer.WritePropertyName("maxfragmentationmemory-reserved"u8);
                writer.WriteStringValue(MaxfragmentationmemoryReserved);
            }
            if (Optional.IsDefined(MaxmemoryPolicy))
            {
                writer.WritePropertyName("maxmemory-policy"u8);
                writer.WriteStringValue(MaxmemoryPolicy);
            }
            if (Optional.IsDefined(MaxmemoryReserved))
            {
                writer.WritePropertyName("maxmemory-reserved"u8);
                writer.WriteStringValue(MaxmemoryReserved);
            }
            if (Optional.IsDefined(MaxmemoryDelta))
            {
                writer.WritePropertyName("maxmemory-delta"u8);
                writer.WriteStringValue(MaxmemoryDelta);
            }
            if (options.Format != "W" && Optional.IsDefined(Maxclients))
            {
                writer.WritePropertyName("maxclients"u8);
                writer.WriteStringValue(Maxclients);
            }
            if (Optional.IsDefined(NotifyKeyspaceEvents))
            {
                writer.WritePropertyName("notify-keyspace-events"u8);
                writer.WriteStringValue(NotifyKeyspaceEvents);
            }
            if (options.Format != "W" && Optional.IsDefined(PreferredDataArchiveAuthMethod))
            {
                writer.WritePropertyName("preferred-data-archive-auth-method"u8);
                writer.WriteStringValue(PreferredDataArchiveAuthMethod);
            }
            if (Optional.IsDefined(PreferredDataPersistenceAuthMethod))
            {
                writer.WritePropertyName("preferred-data-persistence-auth-method"u8);
                writer.WriteStringValue(PreferredDataPersistenceAuthMethod);
            }
            if (options.Format != "W" && Optional.IsDefined(ZonalConfiguration))
            {
                writer.WritePropertyName("zonal-configuration"u8);
                writer.WriteStringValue(ZonalConfiguration);
            }
            if (Optional.IsDefined(Authnotrequired))
            {
                writer.WritePropertyName("authnotrequired"u8);
                writer.WriteStringValue(Authnotrequired);
            }
            if (Optional.IsDefined(StorageSubscriptionId))
            {
                writer.WritePropertyName("storage-subscription-id"u8);
                writer.WriteStringValue(StorageSubscriptionId);
            }
            if (Optional.IsDefined(IsAadEnabled))
            {
                writer.WritePropertyName("aad-enabled"u8);
                writer.WriteStringValue(IsAadEnabled);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
        }

        RedisCommonConfiguration IJsonModel<RedisCommonConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RedisCommonConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RedisCommonConfiguration)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRedisCommonConfiguration(document.RootElement, options);
        }

        internal static RedisCommonConfiguration DeserializeRedisCommonConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool? rdbBackupEnabled = default;
            string rdbBackupFrequency = default;
            int? rdbBackupMaxSnapshotCount = default;
            string rdbStorageConnectionString = default;
            bool? aofBackupEnabled = default;
            string aofStorageConnectionString0 = default;
            string aofStorageConnectionString1 = default;
            string maxfragmentationmemoryReserved = default;
            string maxmemoryPolicy = default;
            string maxmemoryReserved = default;
            string maxmemoryDelta = default;
            string maxclients = default;
            string notifyKeyspaceEvents = default;
            string preferredDataArchiveAuthMethod = default;
            string preferredDataPersistenceAuthMethod = default;
            string zonalConfiguration = default;
            string authnotrequired = default;
            string storageSubscriptionId = default;
            string aadEnabled = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rdb-backup-enabled"u8))
                {
                    ReadIsRdbBackupEnabled(property, ref rdbBackupEnabled);
                    continue;
                }
                if (property.NameEquals("rdb-backup-frequency"u8))
                {
                    rdbBackupFrequency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rdb-backup-max-snapshot-count"u8))
                {
                    ReadRdbBackupMaxSnapshotCount(property, ref rdbBackupMaxSnapshotCount);
                    continue;
                }
                if (property.NameEquals("rdb-storage-connection-string"u8))
                {
                    rdbStorageConnectionString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aof-backup-enabled"u8))
                {
                    ReadIsAofBackupEnabled(property, ref aofBackupEnabled);
                    continue;
                }
                if (property.NameEquals("aof-storage-connection-string-0"u8))
                {
                    aofStorageConnectionString0 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aof-storage-connection-string-1"u8))
                {
                    aofStorageConnectionString1 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxfragmentationmemory-reserved"u8))
                {
                    maxfragmentationmemoryReserved = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxmemory-policy"u8))
                {
                    maxmemoryPolicy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxmemory-reserved"u8))
                {
                    maxmemoryReserved = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxmemory-delta"u8))
                {
                    maxmemoryDelta = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxclients"u8))
                {
                    maxclients = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("notify-keyspace-events"u8))
                {
                    notifyKeyspaceEvents = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("preferred-data-archive-auth-method"u8))
                {
                    preferredDataArchiveAuthMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("preferred-data-persistence-auth-method"u8))
                {
                    preferredDataPersistenceAuthMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("zonal-configuration"u8))
                {
                    zonalConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authnotrequired"u8))
                {
                    authnotrequired = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storage-subscription-id"u8))
                {
                    storageSubscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aad-enabled"u8))
                {
                    aadEnabled = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new RedisCommonConfiguration(
                rdbBackupEnabled,
                rdbBackupFrequency,
                rdbBackupMaxSnapshotCount,
                rdbStorageConnectionString,
                aofBackupEnabled,
                aofStorageConnectionString0,
                aofStorageConnectionString1,
                maxfragmentationmemoryReserved,
                maxmemoryPolicy,
                maxmemoryReserved,
                maxmemoryDelta,
                maxclients,
                notifyKeyspaceEvents,
                preferredDataArchiveAuthMethod,
                preferredDataPersistenceAuthMethod,
                zonalConfiguration,
                authnotrequired,
                storageSubscriptionId,
                aadEnabled,
                additionalProperties);
        }

        BinaryData IPersistableModel<RedisCommonConfiguration>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RedisCommonConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerRedisContext.Default);
                default:
                    throw new FormatException($"The model {nameof(RedisCommonConfiguration)} does not support writing '{options.Format}' format.");
            }
        }

        RedisCommonConfiguration IPersistableModel<RedisCommonConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RedisCommonConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeRedisCommonConfiguration(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RedisCommonConfiguration)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<RedisCommonConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
