// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Redis.Models
{
    public partial class RedisCommonConfiguration : IUtf8JsonSerializable, IJsonModel<RedisCommonConfiguration>, IPersistableModel<RedisCommonConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RedisCommonConfiguration>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<RedisCommonConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RedisCommonConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RedisCommonConfiguration)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(IsRdbBackupEnabled))
            {
                writer.WritePropertyName("rdb-backup-enabled"u8);
                writer.WriteBooleanValue(IsRdbBackupEnabled.Value);
            }
            if (Optional.IsDefined(RdbBackupFrequency))
            {
                writer.WritePropertyName("rdb-backup-frequency"u8);
                writer.WriteStringValue(RdbBackupFrequency);
            }
            if (Optional.IsDefined(RdbBackupMaxSnapshotCount))
            {
                writer.WritePropertyName("rdb-backup-max-snapshot-count"u8);
                WriteRdbBackupMaxSnapshotCount(writer);
            }
            if (Optional.IsDefined(RdbStorageConnectionString))
            {
                writer.WritePropertyName("rdb-storage-connection-string"u8);
                writer.WriteStringValue(RdbStorageConnectionString);
            }
            if (Optional.IsDefined(IsAofBackupEnabled))
            {
                writer.WritePropertyName("aof-backup-enabled"u8);
                writer.WriteBooleanValue(IsAofBackupEnabled.Value);
            }
            if (Optional.IsDefined(AofStorageConnectionString0))
            {
                writer.WritePropertyName("aof-storage-connection-string-0"u8);
                writer.WriteStringValue(AofStorageConnectionString0);
            }
            if (Optional.IsDefined(AofStorageConnectionString1))
            {
                writer.WritePropertyName("aof-storage-connection-string-1"u8);
                writer.WriteStringValue(AofStorageConnectionString1);
            }
            if (Optional.IsDefined(MaxFragmentationMemoryReserved))
            {
                writer.WritePropertyName("maxfragmentationmemory-reserved"u8);
                writer.WriteStringValue(MaxFragmentationMemoryReserved);
            }
            if (Optional.IsDefined(MaxMemoryPolicy))
            {
                writer.WritePropertyName("maxmemory-policy"u8);
                writer.WriteStringValue(MaxMemoryPolicy);
            }
            if (Optional.IsDefined(MaxMemoryReserved))
            {
                writer.WritePropertyName("maxmemory-reserved"u8);
                writer.WriteStringValue(MaxMemoryReserved);
            }
            if (Optional.IsDefined(MaxMemoryDelta))
            {
                writer.WritePropertyName("maxmemory-delta"u8);
                writer.WriteStringValue(MaxMemoryDelta);
            }
            if (options.Format != "W" && Optional.IsDefined(MaxClients))
            {
                writer.WritePropertyName("maxclients"u8);
                writer.WriteStringValue(MaxClients);
            }
            if (options.Format != "W" && Optional.IsDefined(PreferredDataArchiveAuthMethod))
            {
                writer.WritePropertyName("preferred-data-archive-auth-method"u8);
                writer.WriteStringValue(PreferredDataArchiveAuthMethod);
            }
            if (Optional.IsDefined(PreferredDataPersistenceAuthMethod))
            {
                writer.WritePropertyName("preferred-data-persistence-auth-method"u8);
                writer.WriteStringValue(PreferredDataPersistenceAuthMethod);
            }
            if (options.Format != "W" && Optional.IsDefined(ZonalConfiguration))
            {
                writer.WritePropertyName("zonal-configuration"u8);
                writer.WriteStringValue(ZonalConfiguration);
            }
            if (Optional.IsDefined(AuthNotRequired))
            {
                writer.WritePropertyName("authnotrequired"u8);
                writer.WriteStringValue(AuthNotRequired);
            }
            if (Optional.IsDefined(StorageSubscriptionId))
            {
                writer.WritePropertyName("storage-subscription-id"u8);
                writer.WriteStringValue(StorageSubscriptionId);
            }
            if (Optional.IsDefined(IsAadEnabled))
            {
                writer.WritePropertyName("aad-enabled"u8);
                writer.WriteStringValue(IsAadEnabled);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
        }

        RedisCommonConfiguration IJsonModel<RedisCommonConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RedisCommonConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RedisCommonConfiguration)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRedisCommonConfiguration(document.RootElement, options);
        }

        internal static RedisCommonConfiguration DeserializeRedisCommonConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> rdbBackupEnabled = default;
            Optional<string> rdbBackupFrequency = default;
            Optional<int> rdbBackupMaxSnapshotCount = default;
            Optional<string> rdbStorageConnectionString = default;
            Optional<bool> aofBackupEnabled = default;
            Optional<string> aofStorageConnectionString0 = default;
            Optional<string> aofStorageConnectionString1 = default;
            Optional<string> maxfragmentationmemoryReserved = default;
            Optional<string> maxmemoryPolicy = default;
            Optional<string> maxmemoryReserved = default;
            Optional<string> maxmemoryDelta = default;
            Optional<string> maxclients = default;
            Optional<string> preferredDataArchiveAuthMethod = default;
            Optional<string> preferredDataPersistenceAuthMethod = default;
            Optional<string> zonalConfiguration = default;
            Optional<string> authnotrequired = default;
            Optional<string> storageSubscriptionId = default;
            Optional<string> aadEnabled = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rdb-backup-enabled"u8))
                {
                    ReadIsRdbBackupEnabled(property, ref rdbBackupEnabled);
                    continue;
                }
                if (property.NameEquals("rdb-backup-frequency"u8))
                {
                    rdbBackupFrequency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rdb-backup-max-snapshot-count"u8))
                {
                    ReadRdbBackupMaxSnapshotCount(property, ref rdbBackupMaxSnapshotCount);
                    continue;
                }
                if (property.NameEquals("rdb-storage-connection-string"u8))
                {
                    rdbStorageConnectionString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aof-backup-enabled"u8))
                {
                    ReadIsAofBackupEnabled(property, ref aofBackupEnabled);
                    continue;
                }
                if (property.NameEquals("aof-storage-connection-string-0"u8))
                {
                    aofStorageConnectionString0 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aof-storage-connection-string-1"u8))
                {
                    aofStorageConnectionString1 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxfragmentationmemory-reserved"u8))
                {
                    maxfragmentationmemoryReserved = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxmemory-policy"u8))
                {
                    maxmemoryPolicy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxmemory-reserved"u8))
                {
                    maxmemoryReserved = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxmemory-delta"u8))
                {
                    maxmemoryDelta = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxclients"u8))
                {
                    maxclients = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("preferred-data-archive-auth-method"u8))
                {
                    preferredDataArchiveAuthMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("preferred-data-persistence-auth-method"u8))
                {
                    preferredDataPersistenceAuthMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("zonal-configuration"u8))
                {
                    zonalConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authnotrequired"u8))
                {
                    authnotrequired = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storage-subscription-id"u8))
                {
                    storageSubscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aad-enabled"u8))
                {
                    aadEnabled = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new RedisCommonConfiguration(Optional.ToNullable(rdbBackupEnabled), rdbBackupFrequency.Value, Optional.ToNullable(rdbBackupMaxSnapshotCount), rdbStorageConnectionString.Value, Optional.ToNullable(aofBackupEnabled), aofStorageConnectionString0.Value, aofStorageConnectionString1.Value, maxfragmentationmemoryReserved.Value, maxmemoryPolicy.Value, maxmemoryReserved.Value, maxmemoryDelta.Value, maxclients.Value, preferredDataArchiveAuthMethod.Value, preferredDataPersistenceAuthMethod.Value, zonalConfiguration.Value, authnotrequired.Value, storageSubscriptionId.Value, aadEnabled.Value, additionalProperties);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(IsRdbBackupEnabled))
            {
                builder.Append("  rdb-backup-enabled:");
                var boolValue = IsRdbBackupEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(RdbBackupFrequency))
            {
                builder.Append("  rdb-backup-frequency:");
                builder.AppendLine($" '{RdbBackupFrequency}'");
            }

            if (Optional.IsDefined(RdbBackupMaxSnapshotCount))
            {
                builder.Append("  rdb-backup-max-snapshot-count:");
                builder.AppendLine($" '{RdbBackupMaxSnapshotCount.Value.ToString()}'");
            }

            if (Optional.IsDefined(RdbStorageConnectionString))
            {
                builder.Append("  rdb-storage-connection-string:");
                builder.AppendLine($" '{RdbStorageConnectionString}'");
            }

            if (Optional.IsDefined(IsAofBackupEnabled))
            {
                builder.Append("  aof-backup-enabled:");
                var boolValue = IsAofBackupEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(AofStorageConnectionString0))
            {
                builder.Append("  aof-storage-connection-string-0:");
                builder.AppendLine($" '{AofStorageConnectionString0}'");
            }

            if (Optional.IsDefined(AofStorageConnectionString1))
            {
                builder.Append("  aof-storage-connection-string-1:");
                builder.AppendLine($" '{AofStorageConnectionString1}'");
            }

            if (Optional.IsDefined(MaxFragmentationMemoryReserved))
            {
                builder.Append("  maxfragmentationmemory-reserved:");
                builder.AppendLine($" '{MaxFragmentationMemoryReserved}'");
            }

            if (Optional.IsDefined(MaxMemoryPolicy))
            {
                builder.Append("  maxmemory-policy:");
                builder.AppendLine($" '{MaxMemoryPolicy}'");
            }

            if (Optional.IsDefined(MaxMemoryReserved))
            {
                builder.Append("  maxmemory-reserved:");
                builder.AppendLine($" '{MaxMemoryReserved}'");
            }

            if (Optional.IsDefined(MaxMemoryDelta))
            {
                builder.Append("  maxmemory-delta:");
                builder.AppendLine($" '{MaxMemoryDelta}'");
            }

            if (Optional.IsDefined(MaxClients))
            {
                builder.Append("  maxclients:");
                builder.AppendLine($" '{MaxClients}'");
            }

            if (Optional.IsDefined(PreferredDataArchiveAuthMethod))
            {
                builder.Append("  preferred-data-archive-auth-method:");
                builder.AppendLine($" '{PreferredDataArchiveAuthMethod}'");
            }

            if (Optional.IsDefined(PreferredDataPersistenceAuthMethod))
            {
                builder.Append("  preferred-data-persistence-auth-method:");
                builder.AppendLine($" '{PreferredDataPersistenceAuthMethod}'");
            }

            if (Optional.IsDefined(ZonalConfiguration))
            {
                builder.Append("  zonal-configuration:");
                builder.AppendLine($" '{ZonalConfiguration}'");
            }

            if (Optional.IsDefined(AuthNotRequired))
            {
                builder.Append("  authnotrequired:");
                builder.AppendLine($" '{AuthNotRequired}'");
            }

            if (Optional.IsDefined(StorageSubscriptionId))
            {
                builder.Append("  storage-subscription-id:");
                builder.AppendLine($" '{StorageSubscriptionId}'");
            }

            if (Optional.IsDefined(IsAadEnabled))
            {
                builder.Append("  aad-enabled:");
                builder.AppendLine($" '{IsAadEnabled}'");
            }

            if (Optional.IsCollectionDefined(AdditionalProperties))
            {
                builder.Append("  AdditionalProperties:");
                builder.AppendLine(" {");
                foreach (var item in AdditionalProperties)
                {
                    builder.Append($"    {item.Key}: ");
                    if (item.Value == null)
                    {
                        builder.Append("null");
                        continue;
                    }
                    builder.AppendLine($" '{item.Value.ToString()}'");
                }
                builder.AppendLine("  }");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                stringBuilder.AppendLine($"{indent}{line}");
            }
        }

        BinaryData IPersistableModel<RedisCommonConfiguration>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RedisCommonConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(RedisCommonConfiguration)} does not support '{options.Format}' format.");
            }
        }

        RedisCommonConfiguration IPersistableModel<RedisCommonConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RedisCommonConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeRedisCommonConfiguration(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(RedisCommonConfiguration)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<RedisCommonConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
