// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Redis.Models
{
    /// <summary> Patch schedule entry for a Premium Redis Cache. </summary>
    public partial class RedisPatchScheduleSetting
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="RedisPatchScheduleSetting"/>. </summary>
        /// <param name="dayOfWeek"> Day of the week when a cache can be patched. </param>
        /// <param name="startHourUtc"> Start hour after which cache patching can start. </param>
        public RedisPatchScheduleSetting(RedisDayOfWeek dayOfWeek, int startHourUtc)
        {
            DayOfWeek = dayOfWeek;
            StartHourUtc = startHourUtc;
        }

        /// <summary> Initializes a new instance of <see cref="RedisPatchScheduleSetting"/>. </summary>
        /// <param name="dayOfWeek"> Day of the week when a cache can be patched. </param>
        /// <param name="startHourUtc"> Start hour after which cache patching can start. </param>
        /// <param name="maintenanceWindow"> ISO8601 timespan specifying how much time cache patching can take. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal RedisPatchScheduleSetting(RedisDayOfWeek dayOfWeek, int startHourUtc, TimeSpan? maintenanceWindow, Dictionary<string, BinaryData> rawData)
        {
            DayOfWeek = dayOfWeek;
            StartHourUtc = startHourUtc;
            MaintenanceWindow = maintenanceWindow;
            _rawData = rawData;
        }

        /// <summary> Initializes a new instance of <see cref="RedisPatchScheduleSetting"/> for deserialization. </summary>
        internal RedisPatchScheduleSetting()
        {
        }

        /// <summary> Day of the week when a cache can be patched. </summary>
        public RedisDayOfWeek DayOfWeek { get; set; }
        /// <summary> Start hour after which cache patching can start. </summary>
        public int StartHourUtc { get; set; }
        /// <summary> ISO8601 timespan specifying how much time cache patching can take. </summary>
        public TimeSpan? MaintenanceWindow { get; set; }
    }
}
