// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Redis.Models
{
    /// <summary> Which Redis node(s) to reboot. Depending on this value data loss is possible. </summary>
    public readonly partial struct RebootType : IEquatable<RebootType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RebootType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RebootType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PrimaryNodeValue = "PrimaryNode";
        private const string SecondaryNodeValue = "SecondaryNode";
        private const string AllNodesValue = "AllNodes";

        /// <summary> Reboot the primary nodes used for redis write operations. (This may trigger role changes.) *. </summary>
        public static RebootType PrimaryNode { get; } = new RebootType(PrimaryNodeValue);
        /// <summary> Reboot only the secondary or replica nodes *. </summary>
        public static RebootType SecondaryNode { get; } = new RebootType(SecondaryNodeValue);
        /// <summary> Reboot all nodes, not guaranteed to happen simultaneously. *. </summary>
        public static RebootType AllNodes { get; } = new RebootType(AllNodesValue);
        /// <summary> Determines if two <see cref="RebootType"/> values are the same. </summary>
        public static bool operator ==(RebootType left, RebootType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RebootType"/> values are not the same. </summary>
        public static bool operator !=(RebootType left, RebootType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RebootType"/>. </summary>
        public static implicit operator RebootType(string value) => new RebootType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RebootType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RebootType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
