// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Redis.Models
{
    /// <summary> Redis instance provisioning status. </summary>
    public readonly partial struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatingValue = "Creating";
        private const string DeletingValue = "Deleting";
        private const string DisabledValue = "Disabled";
        private const string FailedValue = "Failed";
        private const string LinkingValue = "Linking";
        private const string ProvisioningValue = "Provisioning";
        private const string RecoveringScaleFailureValue = "RecoveringScaleFailure";
        private const string ScalingValue = "Scaling";
        private const string SucceededValue = "Succeeded";
        private const string UnlinkingValue = "Unlinking";
        private const string UnprovisioningValue = "Unprovisioning";
        private const string UpdatingValue = "Updating";
        private const string ConfiguringAADValue = "ConfiguringAAD";

        /// <summary> A create operation is in progress. *. </summary>
        public static ProvisioningState Creating { get; } = new ProvisioningState(CreatingValue);
        /// <summary> A delete operation is in progress. *. </summary>
        public static ProvisioningState Deleting { get; } = new ProvisioningState(DeletingValue);
        /// <summary> The cache is disabled and cannot be used. *. </summary>
        public static ProvisioningState Disabled { get; } = new ProvisioningState(DisabledValue);
        /// <summary> An operation such as create or update failed. If you failed to create the cache it will not be in a usable state, so you should delete and recreate it. *. </summary>
        public static ProvisioningState Failed { get; } = new ProvisioningState(FailedValue);
        /// <summary> Georeplication link is in progress *. </summary>
        public static ProvisioningState Linking { get; } = new ProvisioningState(LinkingValue);
        /// <summary> An operation is in progress *. </summary>
        public static ProvisioningState Provisioning { get; } = new ProvisioningState(ProvisioningValue);
        /// <summary> A scaling operation encountered an error and recovery is in progress. *. </summary>
        public static ProvisioningState RecoveringScaleFailure { get; } = new ProvisioningState(RecoveringScaleFailureValue);
        /// <summary> A scaling operation is in progress *. </summary>
        public static ProvisioningState Scaling { get; } = new ProvisioningState(ScalingValue);
        /// <summary> The most recent operation successfully completed *. </summary>
        public static ProvisioningState Succeeded { get; } = new ProvisioningState(SucceededValue);
        /// <summary> Georeplication unlink is in progress *. </summary>
        public static ProvisioningState Unlinking { get; } = new ProvisioningState(UnlinkingValue);
        /// <summary> The cache may be being disabled *. </summary>
        public static ProvisioningState Unprovisioning { get; } = new ProvisioningState(UnprovisioningValue);
        /// <summary> An update operation is in progress. *. </summary>
        public static ProvisioningState Updating { get; } = new ProvisioningState(UpdatingValue);
        /// <summary> An AAD configuration update operation is in progress. *. </summary>
        public static ProvisioningState ConfiguringAAD { get; } = new ProvisioningState(ConfiguringAADValue);
        /// <summary> Determines if two <see cref="ProvisioningState"/> values are the same. </summary>
        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ProvisioningState"/>. </summary>
        public static implicit operator ProvisioningState(string value) => new ProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
