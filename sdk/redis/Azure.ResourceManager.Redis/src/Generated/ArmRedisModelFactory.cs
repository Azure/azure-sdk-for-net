// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Redis.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmRedisModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.Operation"/>. </summary>
        /// <param name="name"> Operation name: {provider}/{resource}/{operation}. </param>
        /// <param name="display"> The object that describes the operation. </param>
        /// <returns> A new <see cref="Models.Operation"/> instance for mocking. </returns>
        public static Operation Operation(string name = null, OperationDisplay display = null)
        {
            return new Operation(name, display, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperationDisplay"/>. </summary>
        /// <param name="provider"> Friendly name of the resource provider. </param>
        /// <param name="operation"> Operation type: read, write, delete, listKeys/action, etc. </param>
        /// <param name="resource"> Resource type on which the operation is performed. </param>
        /// <param name="description"> Friendly name of the operation. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string operation = null, string resource = null, string description = null)
        {
            return new OperationDisplay(provider, operation, resource, description, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RedisAccessKeys"/>. </summary>
        /// <param name="primaryKey"> The current primary key that clients can use to authenticate with Redis cache. </param>
        /// <param name="secondaryKey"> The current secondary key that clients can use to authenticate with Redis cache. </param>
        /// <returns> A new <see cref="Models.RedisAccessKeys"/> instance for mocking. </returns>
        public static RedisAccessKeys RedisAccessKeys(string primaryKey = null, string secondaryKey = null)
        {
            return new RedisAccessKeys(primaryKey, secondaryKey, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RedisInstanceDetails"/>. </summary>
        /// <param name="sslPort"> Redis instance SSL port. </param>
        /// <param name="nonSslPort"> If enableNonSslPort is true, provides Redis instance Non-SSL port. </param>
        /// <param name="zone"> If the Cache uses availability zones, specifies availability zone where this instance is located. </param>
        /// <param name="shardId"> If clustering is enabled, the Shard ID of Redis Instance. </param>
        /// <param name="isMaster"> Specifies whether the instance is a primary node. </param>
        /// <param name="isPrimary"> Specifies whether the instance is a primary node. </param>
        /// <returns> A new <see cref="Models.RedisInstanceDetails"/> instance for mocking. </returns>
        public static RedisInstanceDetails RedisInstanceDetails(int? sslPort = null, int? nonSslPort = null, string zone = null, int? shardId = null, bool? isMaster = null, bool? isPrimary = null)
        {
            return new RedisInstanceDetails(
                sslPort,
                nonSslPort,
                zone,
                shardId,
                isMaster,
                isPrimary,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Redis.RedisPrivateEndpointConnectionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="privateEndpointId"> The private endpoint resource. </param>
        /// <param name="privateLinkServiceConnectionState"> A collection of information about the state of the connection between service consumer and provider. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection resource. </param>
        /// <returns> A new <see cref="Redis.RedisPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static RedisPrivateEndpointConnectionData RedisPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier privateEndpointId = null, RedisPrivateLinkServiceConnectionState privateLinkServiceConnectionState = null, RedisPrivateEndpointConnectionProvisioningState? provisioningState = null)
        {
            return new RedisPrivateEndpointConnectionData(
                id,
                name,
                resourceType,
                systemData,
                privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null,
                privateLinkServiceConnectionState,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RedisResourceCreateOrUpdateContent"/>. </summary>
        /// <param name="sku"> The SKU of the Redis cache to deploy. </param>
        /// <param name="subnetId"> The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1. </param>
        /// <param name="staticIP"> Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default. </param>
        /// <param name="zones"> A list of availability zones denoting where the resource needs to come from. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <returns> A new <see cref="Models.RedisResourceCreateOrUpdateContent"/> instance for mocking. </returns>
        public static RedisResourceCreateOrUpdateContent RedisResourceCreateOrUpdateContent(RedisSku sku = null, string subnetId = null, string staticIP = null, IEnumerable<string> zones = null, string location = null, IDictionary<string, string> tags = null, ManagedServiceIdentity identity = null)
        {
            zones ??= new List<string>();
            tags ??= new Dictionary<string, string>();

            return new RedisResourceCreateOrUpdateContent(
                sku,
                subnetId,
                staticIP,
                zones?.ToList(),
                location,
                tags,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UpgradeNotification"/>. </summary>
        /// <param name="name"> Name of upgrade notification. </param>
        /// <param name="timestamp"> Timestamp when upgrade notification occurred. </param>
        /// <param name="upsellNotification"> Details about this upgrade notification. </param>
        /// <returns> A new <see cref="Models.UpgradeNotification"/> instance for mocking. </returns>
        public static UpgradeNotification UpgradeNotification(string name = null, DateTimeOffset? timestamp = null, IReadOnlyDictionary<string, string> upsellNotification = null)
        {
            upsellNotification ??= new Dictionary<string, string>();

            return new UpgradeNotification(name, timestamp, upsellNotification, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RedisForceRebootResponse"/>. </summary>
        /// <param name="message"> Status message. </param>
        /// <returns> A new <see cref="Models.RedisForceRebootResponse"/> instance for mocking. </returns>
        public static RedisForceRebootResponse RedisForceRebootResponse(string message = null)
        {
            return new RedisForceRebootResponse(message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExportRDBContent"/>. </summary>
        /// <param name="format"> File format. </param>
        /// <param name="prefix"> Prefix to use for exported files. </param>
        /// <param name="container"> Container name to export to. </param>
        /// <param name="preferredDataArchiveAuthMethod"> Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS. </param>
        /// <param name="storageSubscriptionId"> Subscription id of the storage container for data to be exported using ManagedIdentity. </param>
        /// <returns> A new <see cref="Models.ExportRDBContent"/> instance for mocking. </returns>
        public static ExportRDBContent ExportRDBContent(string format = null, string prefix = null, string container = null, string preferredDataArchiveAuthMethod = null, string storageSubscriptionId = null)
        {
            return new ExportRDBContent(
                format,
                prefix,
                container,
                preferredDataArchiveAuthMethod,
                storageSubscriptionId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperationStatusResult"/>. </summary>
        /// <param name="id"> Fully qualified ID for the async operation. </param>
        /// <param name="name"> Name of the async operation. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="percentComplete"> Percent of the operation that is complete. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="endOn"> The end time of the operation. </param>
        /// <param name="operations"> The operations list. </param>
        /// <param name="error"> If present, details of the operation error. </param>
        /// <returns> A new <see cref="Models.OperationStatusResult"/> instance for mocking. </returns>
        public static OperationStatusResult OperationStatusResult(string id = null, string name = null, string status = null, double? percentComplete = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, IEnumerable<OperationStatusResult> operations = null, ResponseError error = null)
        {
            operations ??= new List<OperationStatusResult>();

            return new OperationStatusResult(
                id,
                name,
                status,
                percentComplete,
                startOn,
                endOn,
                operations?.ToList(),
                error,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RedisPrivateLinkResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Resource properties. </param>
        /// <returns> A new <see cref="Models.RedisPrivateLinkResourceData"/> instance for mocking. </returns>
        public static RedisPrivateLinkResourceData RedisPrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RedisPrivateLinkResourceProperties properties = null)
        {
            return new RedisPrivateLinkResourceData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RedisPrivateLinkResourceProperties"/>. </summary>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> The private link resource private link DNS zone name. </param>
        /// <returns> A new <see cref="Models.RedisPrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static RedisPrivateLinkResourceProperties RedisPrivateLinkResourceProperties(string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new RedisPrivateLinkResourceProperties(groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Redis.RedisFirewallRuleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="startIP"> lowest IP address included in the range. </param>
        /// <param name="endIP"> highest IP address included in the range. </param>
        /// <returns> A new <see cref="Redis.RedisFirewallRuleData"/> instance for mocking. </returns>
        public static RedisFirewallRuleData RedisFirewallRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string startIP = null, string endIP = null)
        {
            return new RedisFirewallRuleData(
                id,
                name,
                resourceType,
                systemData,
                startIP,
                endIP,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Redis.RedisPatchScheduleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="scheduleEntries"> List of patch schedules for a Redis cache. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <returns> A new <see cref="Redis.RedisPatchScheduleData"/> instance for mocking. </returns>
        public static RedisPatchScheduleData RedisPatchScheduleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<ScheduleEntry> scheduleEntries = null, string location = null)
        {
            scheduleEntries ??= new List<ScheduleEntry>();

            return new RedisPatchScheduleData(
                id,
                name,
                resourceType,
                systemData,
                scheduleEntries?.ToList(),
                location,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Redis.RedisLinkedServerWithPropertyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Terminal state of the link between primary and secondary redis cache. </param>
        /// <returns> A new <see cref="Redis.RedisLinkedServerWithPropertyData"/> instance for mocking. </returns>
        public static RedisLinkedServerWithPropertyData RedisLinkedServerWithPropertyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provisioningState = null)
        {
            return new RedisLinkedServerWithPropertyData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RedisLinkedServerWithPropertyCreateOrUpdateContent"/>. </summary>
        /// <param name="linkedRedisCacheId"> Fully qualified resourceId of the linked redis cache. </param>
        /// <param name="linkedRedisCacheLocation"> Location of the linked redis cache. </param>
        /// <param name="serverRole"> Role of the linked server. </param>
        /// <param name="geoReplicatedPrimaryHostName"> The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for seamless Geo Failover experience. </param>
        /// <param name="primaryHostName"> The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or after the Geo Failover. </param>
        /// <returns> A new <see cref="Models.RedisLinkedServerWithPropertyCreateOrUpdateContent"/> instance for mocking. </returns>
        public static RedisLinkedServerWithPropertyCreateOrUpdateContent RedisLinkedServerWithPropertyCreateOrUpdateContent(string linkedRedisCacheId = null, string linkedRedisCacheLocation = null, ReplicationRole serverRole = default, string geoReplicatedPrimaryHostName = null, string primaryHostName = null)
        {
            return new RedisLinkedServerWithPropertyCreateOrUpdateContent(
                linkedRedisCacheId,
                linkedRedisCacheLocation,
                serverRole,
                geoReplicatedPrimaryHostName,
                primaryHostName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Redis.RedisCacheAccessPolicyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning state of access policy. </param>
        /// <param name="type"> Built-In or Custom access policy. </param>
        /// <param name="permissions"> Permissions for the access policy. Learn how to configure permissions at https://aka.ms/redis/AADPreRequisites. </param>
        /// <returns> A new <see cref="Redis.RedisCacheAccessPolicyData"/> instance for mocking. </returns>
        public static RedisCacheAccessPolicyData RedisCacheAccessPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AccessPolicyProvisioningState? provisioningState = null, AccessPolicyType? type = null, string permissions = null)
        {
            return new RedisCacheAccessPolicyData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                type,
                permissions,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Redis.RedisCacheAccessPolicyAssignmentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning state of an access policy assignment set. </param>
        /// <param name="objectId"> Object Id to assign access policy to. </param>
        /// <param name="objectIdAlias"> User friendly name for object id. Also represents username for token based authentication. </param>
        /// <param name="accessPolicyName"> The name of the access policy that is being assigned. </param>
        /// <returns> A new <see cref="Redis.RedisCacheAccessPolicyAssignmentData"/> instance for mocking. </returns>
        public static RedisCacheAccessPolicyAssignmentData RedisCacheAccessPolicyAssignmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AccessPolicyAssignmentProvisioningState? provisioningState = null, string objectId = null, string objectIdAlias = null, string accessPolicyName = null)
        {
            return new RedisCacheAccessPolicyAssignmentData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                objectId,
                objectIdAlias,
                accessPolicyName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperationStatus"/>. </summary>
        /// <param name="id"> Fully qualified ID for the async operation. </param>
        /// <param name="name"> Name of the async operation. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="percentComplete"> Percent of the operation that is complete. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="endOn"> The end time of the operation. </param>
        /// <param name="operations"> The operations list. </param>
        /// <param name="error"> If present, details of the operation error. </param>
        /// <param name="properties"> Additional properties from RP, only when operation is successful. </param>
        /// <returns> A new <see cref="Models.OperationStatus"/> instance for mocking. </returns>
        public static OperationStatus OperationStatus(string id = null, string name = null, string status = null, double? percentComplete = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, IEnumerable<OperationStatusResult> operations = null, ResponseError error = null, IReadOnlyDictionary<string, BinaryData> properties = null)
        {
            operations ??= new List<OperationStatusResult>();
            properties ??= new Dictionary<string, BinaryData>();

            return new OperationStatus(
                id,
                name,
                status,
                percentComplete,
                startOn,
                endOn,
                operations?.ToList(),
                error,
                serializedAdditionalRawData: null,
                properties);
        }
    }
}
