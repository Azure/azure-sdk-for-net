// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Kubernetes.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a connected cluster.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ConnectedCluster : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the ConnectedCluster class.
        /// </summary>
        public ConnectedCluster()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectedCluster class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="identity">The identity of the connected
        /// cluster.</param>
        /// <param name="agentPublicKeyCertificate">Base64 encoded public
        /// certificate used by the agent to do the initial handshake to the
        /// backend services in Azure.</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="kubernetesVersion">The Kubernetes version of the
        /// connected cluster resource</param>
        /// <param name="totalNodeCount">Number of nodes present in the
        /// connected cluster resource</param>
        /// <param name="totalCoreCount">Number of CPU cores present in the
        /// connected cluster resource</param>
        /// <param name="agentVersion">Version of the agent running on the
        /// connected cluster resource</param>
        /// <param name="provisioningState">Provisioning state of the connected
        /// cluster resource. Possible values include: 'Succeeded', 'Failed',
        /// 'Canceled', 'Provisioning', 'Updating', 'Deleting',
        /// 'Accepted'</param>
        /// <param name="distribution">The Kubernetes distribution running on
        /// this connected cluster.</param>
        /// <param name="infrastructure">The infrastructure on which the
        /// Kubernetes cluster represented by this connected cluster is running
        /// on.</param>
        /// <param name="offering">Connected cluster offering</param>
        /// <param name="managedIdentityCertificateExpirationTime">Expiration
        /// time of the managed identity certificate</param>
        /// <param name="lastConnectivityTime">Time representing the last
        /// instance when heart beat was received from the cluster</param>
        /// <param name="connectivityStatus">Represents the connectivity status
        /// of the connected cluster. Possible values include: 'Connecting',
        /// 'Connected', 'Offline', 'Expired'</param>
        /// <param name="systemData">Metadata pertaining to creation and last
        /// modification of the resource</param>
        public ConnectedCluster(string location, ConnectedClusterIdentity identity, string agentPublicKeyCertificate, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string kubernetesVersion = default(string), int? totalNodeCount = default(int?), int? totalCoreCount = default(int?), string agentVersion = default(string), string provisioningState = default(string), string distribution = default(string), string infrastructure = default(string), string offering = default(string), System.DateTime? managedIdentityCertificateExpirationTime = default(System.DateTime?), System.DateTime? lastConnectivityTime = default(System.DateTime?), string connectivityStatus = default(string), SystemData systemData = default(SystemData))
            : base(location, id, name, type, tags)
        {
            Identity = identity;
            AgentPublicKeyCertificate = agentPublicKeyCertificate;
            KubernetesVersion = kubernetesVersion;
            TotalNodeCount = totalNodeCount;
            TotalCoreCount = totalCoreCount;
            AgentVersion = agentVersion;
            ProvisioningState = provisioningState;
            Distribution = distribution;
            Infrastructure = infrastructure;
            Offering = offering;
            ManagedIdentityCertificateExpirationTime = managedIdentityCertificateExpirationTime;
            LastConnectivityTime = lastConnectivityTime;
            ConnectivityStatus = connectivityStatus;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identity of the connected cluster.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public ConnectedClusterIdentity Identity { get; set; }

        /// <summary>
        /// Gets or sets base64 encoded public certificate used by the agent to
        /// do the initial handshake to the backend services in Azure.
        /// </summary>
        [JsonProperty(PropertyName = "properties.agentPublicKeyCertificate")]
        public string AgentPublicKeyCertificate { get; set; }

        /// <summary>
        /// Gets the Kubernetes version of the connected cluster resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.kubernetesVersion")]
        public string KubernetesVersion { get; private set; }

        /// <summary>
        /// Gets number of nodes present in the connected cluster resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalNodeCount")]
        public int? TotalNodeCount { get; private set; }

        /// <summary>
        /// Gets number of CPU cores present in the connected cluster resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalCoreCount")]
        public int? TotalCoreCount { get; private set; }

        /// <summary>
        /// Gets version of the agent running on the connected cluster resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.agentVersion")]
        public string AgentVersion { get; private set; }

        /// <summary>
        /// Gets or sets provisioning state of the connected cluster resource.
        /// Possible values include: 'Succeeded', 'Failed', 'Canceled',
        /// 'Provisioning', 'Updating', 'Deleting', 'Accepted'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets the Kubernetes distribution running on this connected
        /// cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.distribution")]
        public string Distribution { get; set; }

        /// <summary>
        /// Gets or sets the infrastructure on which the Kubernetes cluster
        /// represented by this connected cluster is running on.
        /// </summary>
        [JsonProperty(PropertyName = "properties.infrastructure")]
        public string Infrastructure { get; set; }

        /// <summary>
        /// Gets connected cluster offering
        /// </summary>
        [JsonProperty(PropertyName = "properties.offering")]
        public string Offering { get; private set; }

        /// <summary>
        /// Gets expiration time of the managed identity certificate
        /// </summary>
        [JsonProperty(PropertyName = "properties.managedIdentityCertificateExpirationTime")]
        public System.DateTime? ManagedIdentityCertificateExpirationTime { get; private set; }

        /// <summary>
        /// Gets time representing the last instance when heart beat was
        /// received from the cluster
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastConnectivityTime")]
        public System.DateTime? LastConnectivityTime { get; private set; }

        /// <summary>
        /// Gets represents the connectivity status of the connected cluster.
        /// Possible values include: 'Connecting', 'Connected', 'Offline',
        /// 'Expired'
        /// </summary>
        [JsonProperty(PropertyName = "properties.connectivityStatus")]
        public string ConnectivityStatus { get; private set; }

        /// <summary>
        /// Gets metadata pertaining to creation and last modification of the
        /// resource
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

    }
}
