// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Kubernetes
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConnectedClusterOperations.
    /// </summary>
    public static partial class ConnectedClusterOperationsExtensions
    {
            /// <summary>
            /// Register a new Kubernetes cluster with Azure Resource Manager.
            /// </summary>
            /// <remarks>
            /// API to register a new Kubernetes cluster and create a tracked resource in
            /// Azure Resource Manager (ARM).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            /// <param name='connectedCluster'>
            /// Parameters supplied to Create a Connected Cluster.
            /// </param>
            public static ConnectedCluster Create(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName, ConnectedCluster connectedCluster)
            {
                return operations.CreateAsync(resourceGroupName, clusterName, connectedCluster).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register a new Kubernetes cluster with Azure Resource Manager.
            /// </summary>
            /// <remarks>
            /// API to register a new Kubernetes cluster and create a tracked resource in
            /// Azure Resource Manager (ARM).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            /// <param name='connectedCluster'>
            /// Parameters supplied to Create a Connected Cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectedCluster> CreateAsync(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName, ConnectedCluster connectedCluster, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, clusterName, connectedCluster, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a connected cluster.
            /// </summary>
            /// <remarks>
            /// API to update certain properties of the connected cluster resource
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            /// <param name='connectedClusterPatch'>
            /// Parameters supplied to update Connected Cluster.
            /// </param>
            public static ConnectedCluster Update(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName, ConnectedClusterPatch connectedClusterPatch)
            {
                return operations.UpdateAsync(resourceGroupName, clusterName, connectedClusterPatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a connected cluster.
            /// </summary>
            /// <remarks>
            /// API to update certain properties of the connected cluster resource
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            /// <param name='connectedClusterPatch'>
            /// Parameters supplied to update Connected Cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectedCluster> UpdateAsync(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName, ConnectedClusterPatch connectedClusterPatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, clusterName, connectedClusterPatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the properties of the specified connected cluster.
            /// </summary>
            /// <remarks>
            /// Returns the properties of the specified connected cluster, including name,
            /// identity, properties, and additional cluster details.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            public static ConnectedCluster Get(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName)
            {
                return operations.GetAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the properties of the specified connected cluster.
            /// </summary>
            /// <remarks>
            /// Returns the properties of the specified connected cluster, including name,
            /// identity, properties, and additional cluster details.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectedCluster> GetAsync(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a connected cluster.
            /// </summary>
            /// <remarks>
            /// Delete a connected cluster, removing the tracked resource in Azure Resource
            /// Manager (ARM).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            public static void Delete(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName)
            {
                operations.DeleteAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a connected cluster.
            /// </summary>
            /// <remarks>
            /// Delete a connected cluster, removing the tracked resource in Azure Resource
            /// Manager (ARM).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all connected clusters
            /// </summary>
            /// <remarks>
            /// API to enumerate registered connected K8s clusters under a Resource Group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IPage<ConnectedCluster> ListByResourceGroup(this IConnectedClusterOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all connected clusters
            /// </summary>
            /// <remarks>
            /// API to enumerate registered connected K8s clusters under a Resource Group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectedCluster>> ListByResourceGroupAsync(this IConnectedClusterOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all connected clusters
            /// </summary>
            /// <remarks>
            /// API to enumerate registered connected K8s clusters under a Subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ConnectedCluster> ListBySubscription(this IConnectedClusterOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all connected clusters
            /// </summary>
            /// <remarks>
            /// API to enumerate registered connected K8s clusters under a Subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectedCluster>> ListBySubscriptionAsync(this IConnectedClusterOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Register a new Kubernetes cluster with Azure Resource Manager.
            /// </summary>
            /// <remarks>
            /// API to register a new Kubernetes cluster and create a tracked resource in
            /// Azure Resource Manager (ARM).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            /// <param name='connectedCluster'>
            /// Parameters supplied to Create a Connected Cluster.
            /// </param>
            public static ConnectedCluster BeginCreate(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName, ConnectedCluster connectedCluster)
            {
                return operations.BeginCreateAsync(resourceGroupName, clusterName, connectedCluster).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register a new Kubernetes cluster with Azure Resource Manager.
            /// </summary>
            /// <remarks>
            /// API to register a new Kubernetes cluster and create a tracked resource in
            /// Azure Resource Manager (ARM).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            /// <param name='connectedCluster'>
            /// Parameters supplied to Create a Connected Cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectedCluster> BeginCreateAsync(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName, ConnectedCluster connectedCluster, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, clusterName, connectedCluster, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a connected cluster.
            /// </summary>
            /// <remarks>
            /// Delete a connected cluster, removing the tracked resource in Azure Resource
            /// Manager (ARM).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            public static void BeginDelete(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName)
            {
                operations.BeginDeleteAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a connected cluster.
            /// </summary>
            /// <remarks>
            /// Delete a connected cluster, removing the tracked resource in Azure Resource
            /// Manager (ARM).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kubernetes cluster on which get is called.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IConnectedClusterOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all connected clusters
            /// </summary>
            /// <remarks>
            /// API to enumerate registered connected K8s clusters under a Resource Group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ConnectedCluster> ListByResourceGroupNext(this IConnectedClusterOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all connected clusters
            /// </summary>
            /// <remarks>
            /// API to enumerate registered connected K8s clusters under a Resource Group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectedCluster>> ListByResourceGroupNextAsync(this IConnectedClusterOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all connected clusters
            /// </summary>
            /// <remarks>
            /// API to enumerate registered connected K8s clusters under a Subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ConnectedCluster> ListBySubscriptionNext(this IConnectedClusterOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all connected clusters
            /// </summary>
            /// <remarks>
            /// API to enumerate registered connected K8s clusters under a Subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectedCluster>> ListBySubscriptionNextAsync(this IConnectedClusterOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
