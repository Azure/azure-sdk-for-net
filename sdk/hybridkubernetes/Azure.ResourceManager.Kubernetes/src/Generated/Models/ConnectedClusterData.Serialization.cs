// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Kubernetes.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Kubernetes
{
    public partial class ConnectedClusterData : IUtf8JsonSerializable, IJsonModel<ConnectedClusterData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConnectedClusterData>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<ConnectedClusterData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<ConnectedClusterData>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<ConnectedClusterData>)} interface");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("identity"u8);
            JsonSerializer.Serialize(writer, Identity);
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            if (options.Format == "J")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format == "J")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format == "J")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(SystemData))
                {
                    writer.WritePropertyName("systemData"u8);
                    JsonSerializer.Serialize(writer, SystemData);
                }
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("agentPublicKeyCertificate"u8);
            writer.WriteStringValue(AgentPublicKeyCertificate);
            if (options.Format == "J")
            {
                if (Optional.IsDefined(KubernetesVersion))
                {
                    writer.WritePropertyName("kubernetesVersion"u8);
                    writer.WriteStringValue(KubernetesVersion);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(TotalNodeCount))
                {
                    writer.WritePropertyName("totalNodeCount"u8);
                    writer.WriteNumberValue(TotalNodeCount.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(TotalCoreCount))
                {
                    writer.WritePropertyName("totalCoreCount"u8);
                    writer.WriteNumberValue(TotalCoreCount.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(AgentVersion))
                {
                    writer.WritePropertyName("agentVersion"u8);
                    writer.WriteStringValue(AgentVersion);
                }
            }
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(Distribution))
            {
                writer.WritePropertyName("distribution"u8);
                writer.WriteStringValue(Distribution);
            }
            if (Optional.IsDefined(Infrastructure))
            {
                writer.WritePropertyName("infrastructure"u8);
                writer.WriteStringValue(Infrastructure);
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Offering))
                {
                    writer.WritePropertyName("offering"u8);
                    writer.WriteStringValue(Offering);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ManagedIdentityCertificateExpirationOn))
                {
                    writer.WritePropertyName("managedIdentityCertificateExpirationTime"u8);
                    writer.WriteStringValue(ManagedIdentityCertificateExpirationOn.Value, "O");
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LastConnectivityOn))
                {
                    writer.WritePropertyName("lastConnectivityTime"u8);
                    writer.WriteStringValue(LastConnectivityOn.Value, "O");
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ConnectivityStatus))
                {
                    writer.WritePropertyName("connectivityStatus"u8);
                    writer.WriteStringValue(ConnectivityStatus.Value.ToString());
                }
            }
            if (Optional.IsDefined(PrivateLinkState))
            {
                writer.WritePropertyName("privateLinkState"u8);
                writer.WriteStringValue(PrivateLinkState.Value.ToString());
            }
            if (Optional.IsDefined(PrivateLinkScopeResourceId))
            {
                writer.WritePropertyName("privateLinkScopeResourceId"u8);
                writer.WriteStringValue(PrivateLinkScopeResourceId);
            }
            writer.WriteEndObject();
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ConnectedClusterData IJsonModel<ConnectedClusterData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ConnectedClusterData)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConnectedClusterData(document.RootElement, options);
        }

        internal static ConnectedClusterData DeserializeConnectedClusterData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ManagedServiceIdentity identity = default;
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            string agentPublicKeyCertificate = default;
            Optional<string> kubernetesVersion = default;
            Optional<int> totalNodeCount = default;
            Optional<int> totalCoreCount = default;
            Optional<string> agentVersion = default;
            Optional<ProvisioningState> provisioningState = default;
            Optional<string> distribution = default;
            Optional<string> infrastructure = default;
            Optional<string> offering = default;
            Optional<DateTimeOffset> managedIdentityCertificateExpirationTime = default;
            Optional<DateTimeOffset> lastConnectivityTime = default;
            Optional<ConnectivityStatus> connectivityStatus = default;
            Optional<PrivateLinkState> privateLinkState = default;
            Optional<string> privateLinkScopeResourceId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identity"u8))
                {
                    identity = JsonSerializer.Deserialize<ManagedServiceIdentity>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("agentPublicKeyCertificate"u8))
                        {
                            agentPublicKeyCertificate = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("kubernetesVersion"u8))
                        {
                            kubernetesVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("totalNodeCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalNodeCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("totalCoreCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalCoreCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("agentVersion"u8))
                        {
                            agentVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new ProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("distribution"u8))
                        {
                            distribution = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("infrastructure"u8))
                        {
                            infrastructure = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("offering"u8))
                        {
                            offering = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("managedIdentityCertificateExpirationTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            managedIdentityCertificateExpirationTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastConnectivityTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastConnectivityTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("connectivityStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            connectivityStatus = new ConnectivityStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("privateLinkState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            privateLinkState = new PrivateLinkState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("privateLinkScopeResourceId"u8))
                        {
                            privateLinkScopeResourceId = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ConnectedClusterData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, identity, agentPublicKeyCertificate, kubernetesVersion.Value, Optional.ToNullable(totalNodeCount), Optional.ToNullable(totalCoreCount), agentVersion.Value, Optional.ToNullable(provisioningState), distribution.Value, infrastructure.Value, offering.Value, Optional.ToNullable(managedIdentityCertificateExpirationTime), Optional.ToNullable(lastConnectivityTime), Optional.ToNullable(connectivityStatus), Optional.ToNullable(privateLinkState), privateLinkScopeResourceId.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ConnectedClusterData>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ConnectedClusterData)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        ConnectedClusterData IPersistableModel<ConnectedClusterData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ConnectedClusterData)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeConnectedClusterData(document.RootElement, options);
        }

        string IPersistableModel<ConnectedClusterData>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
