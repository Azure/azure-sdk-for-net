// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Kubernetes;

namespace Azure.ResourceManager.Kubernetes.Models
{
    /// <summary> Properties of the connected cluster. </summary>
    public partial class ConnectedClusterProperties
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ConnectedClusterProperties"/>. </summary>
        /// <param name="agentPublicKeyCertificate"> Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentPublicKeyCertificate"/> is null. </exception>
        public ConnectedClusterProperties(string agentPublicKeyCertificate)
        {
            Argument.AssertNotNull(agentPublicKeyCertificate, nameof(agentPublicKeyCertificate));

            AgentPublicKeyCertificate = agentPublicKeyCertificate;
            ArcAgentryConfigurations = new ChangeTrackingList<ArcAgentryConfigurations>();
            MiscellaneousProperties = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="ConnectedClusterProperties"/>. </summary>
        /// <param name="agentPublicKeyCertificate"> Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure. </param>
        /// <param name="kubernetesVersion"> The Kubernetes version of the connected cluster resource. </param>
        /// <param name="totalNodeCount"> Number of nodes present in the connected cluster resource. </param>
        /// <param name="totalCoreCount"> Number of CPU cores present in the connected cluster resource. </param>
        /// <param name="agentVersion"> Version of the agent running on the connected cluster resource. </param>
        /// <param name="provisioningState"> Provisioning state of the connected cluster resource. </param>
        /// <param name="distribution"> The Kubernetes distribution running on this connected cluster. </param>
        /// <param name="distributionVersion"> The Kubernetes distribution version on this connected cluster. </param>
        /// <param name="infrastructure"> The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on. </param>
        /// <param name="offering"> Connected cluster offering. </param>
        /// <param name="managedIdentityCertificateExpirationTime"> Expiration time of the managed identity certificate. </param>
        /// <param name="lastConnectivityTime"> Time representing the last instance when heart beat was received from the cluster. </param>
        /// <param name="connectivityStatus"> Represents the connectivity status of the connected cluster. </param>
        /// <param name="privateLinkState"> Property which describes the state of private link on a connected cluster resource. </param>
        /// <param name="privateLinkScopeResourceId"> This is populated only if privateLinkState is enabled. The resource id of the private link scope this connected cluster is assigned to, if any. </param>
        /// <param name="azureHybridBenefit"> Indicates whether Azure Hybrid Benefit is opted in. </param>
        /// <param name="aadProfile"> AAD profile for the connected cluster. </param>
        /// <param name="arcAgentProfile"> Arc agentry configuration for the provisioned cluster. </param>
        /// <param name="securityProfile"> Security profile for the connected cluster. </param>
        /// <param name="oidcIssuerProfile"> Open ID Connect (OIDC) Issuer Profile for the connected cluster. </param>
        /// <param name="gateway"> Details of the gateway used by the Arc router for connectivity. </param>
        /// <param name="arcAgentryConfigurations"> Configuration settings for customizing the behavior of the connected cluster. </param>
        /// <param name="miscellaneousProperties"> More properties related to the Connected Cluster. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ConnectedClusterProperties(string agentPublicKeyCertificate, string kubernetesVersion, int? totalNodeCount, int? totalCoreCount, string agentVersion, ProvisioningState? provisioningState, string distribution, string distributionVersion, string infrastructure, string offering, DateTimeOffset? managedIdentityCertificateExpirationTime, DateTimeOffset? lastConnectivityTime, ConnectivityStatus? connectivityStatus, PrivateLinkState? privateLinkState, string privateLinkScopeResourceId, AzureHybridBenefit? azureHybridBenefit, AadProfile aadProfile, ArcAgentProfile arcAgentProfile, SecurityProfile securityProfile, OidcIssuerProfile oidcIssuerProfile, Gateway gateway, IList<ArcAgentryConfigurations> arcAgentryConfigurations, IReadOnlyDictionary<string, string> miscellaneousProperties, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            AgentPublicKeyCertificate = agentPublicKeyCertificate;
            KubernetesVersion = kubernetesVersion;
            TotalNodeCount = totalNodeCount;
            TotalCoreCount = totalCoreCount;
            AgentVersion = agentVersion;
            ProvisioningState = provisioningState;
            Distribution = distribution;
            DistributionVersion = distributionVersion;
            Infrastructure = infrastructure;
            Offering = offering;
            ManagedIdentityCertificateExpirationTime = managedIdentityCertificateExpirationTime;
            LastConnectivityTime = lastConnectivityTime;
            ConnectivityStatus = connectivityStatus;
            PrivateLinkState = privateLinkState;
            PrivateLinkScopeResourceId = privateLinkScopeResourceId;
            AzureHybridBenefit = azureHybridBenefit;
            AadProfile = aadProfile;
            ArcAgentProfile = arcAgentProfile;
            SecurityProfile = securityProfile;
            OidcIssuerProfile = oidcIssuerProfile;
            Gateway = gateway;
            ArcAgentryConfigurations = arcAgentryConfigurations;
            MiscellaneousProperties = miscellaneousProperties;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure. </summary>
        public string AgentPublicKeyCertificate { get; set; }

        /// <summary> The Kubernetes version of the connected cluster resource. </summary>
        public string KubernetesVersion { get; }

        /// <summary> Number of nodes present in the connected cluster resource. </summary>
        public int? TotalNodeCount { get; }

        /// <summary> Number of CPU cores present in the connected cluster resource. </summary>
        public int? TotalCoreCount { get; }

        /// <summary> Version of the agent running on the connected cluster resource. </summary>
        public string AgentVersion { get; }

        /// <summary> Provisioning state of the connected cluster resource. </summary>
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary> The Kubernetes distribution running on this connected cluster. </summary>
        public string Distribution { get; set; }

        /// <summary> The Kubernetes distribution version on this connected cluster. </summary>
        public string DistributionVersion { get; set; }

        /// <summary> The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on. </summary>
        public string Infrastructure { get; set; }

        /// <summary> Connected cluster offering. </summary>
        public string Offering { get; }

        /// <summary> Expiration time of the managed identity certificate. </summary>
        public DateTimeOffset? ManagedIdentityCertificateExpirationTime { get; }

        /// <summary> Time representing the last instance when heart beat was received from the cluster. </summary>
        public DateTimeOffset? LastConnectivityTime { get; }

        /// <summary> Represents the connectivity status of the connected cluster. </summary>
        public ConnectivityStatus? ConnectivityStatus { get; }

        /// <summary> Property which describes the state of private link on a connected cluster resource. </summary>
        public PrivateLinkState? PrivateLinkState { get; set; }

        /// <summary> This is populated only if privateLinkState is enabled. The resource id of the private link scope this connected cluster is assigned to, if any. </summary>
        public string PrivateLinkScopeResourceId { get; set; }

        /// <summary> Indicates whether Azure Hybrid Benefit is opted in. </summary>
        public AzureHybridBenefit? AzureHybridBenefit { get; set; }

        /// <summary> AAD profile for the connected cluster. </summary>
        public AadProfile AadProfile { get; set; }

        /// <summary> Arc agentry configuration for the provisioned cluster. </summary>
        public ArcAgentProfile ArcAgentProfile { get; set; }

        /// <summary> Security profile for the connected cluster. </summary>
        public SecurityProfile SecurityProfile { get; set; }

        /// <summary> Open ID Connect (OIDC) Issuer Profile for the connected cluster. </summary>
        public OidcIssuerProfile OidcIssuerProfile { get; set; }

        /// <summary> Details of the gateway used by the Arc router for connectivity. </summary>
        internal Gateway Gateway { get; set; }

        /// <summary> Configuration settings for customizing the behavior of the connected cluster. </summary>
        public IList<ArcAgentryConfigurations> ArcAgentryConfigurations { get; set; }

        /// <summary> More properties related to the Connected Cluster. </summary>
        public IReadOnlyDictionary<string, string> MiscellaneousProperties { get; }

        /// <summary> Indicates whether the gateway for arc router connectivity is enabled. </summary>
        public bool? GatewayEnabled
        {
            get
            {
                return Gateway is null ? default : Gateway.Enabled;
            }
            set
            {
                if (Gateway is null)
                {
                    Gateway = new Gateway();
                }
                Gateway.Enabled = value;
            }
        }
    }
}
