// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.Kubernetes;

namespace Azure.ResourceManager.Kubernetes.Models
{
    /// <summary> Represents the connectivity status of the connected cluster. </summary>
    public readonly partial struct ConnectivityStatus : IEquatable<ConnectivityStatus>
    {
        private readonly string _value;
        private const string ConnectingValue = "Connecting";
        private const string ConnectedValue = "Connected";
        private const string OfflineValue = "Offline";
        private const string ExpiredValue = "Expired";
        private const string AgentNotInstalledValue = "AgentNotInstalled";

        /// <summary> Initializes a new instance of <see cref="ConnectivityStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectivityStatus(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Gets the Connecting. </summary>
        public static ConnectivityStatus Connecting { get; } = new ConnectivityStatus(ConnectingValue);

        /// <summary> Gets the Connected. </summary>
        public static ConnectivityStatus Connected { get; } = new ConnectivityStatus(ConnectedValue);

        /// <summary> Gets the Offline. </summary>
        public static ConnectivityStatus Offline { get; } = new ConnectivityStatus(OfflineValue);

        /// <summary> Gets the Expired. </summary>
        public static ConnectivityStatus Expired { get; } = new ConnectivityStatus(ExpiredValue);

        /// <summary> Gets the AgentNotInstalled. </summary>
        public static ConnectivityStatus AgentNotInstalled { get; } = new ConnectivityStatus(AgentNotInstalledValue);

        /// <summary> Determines if two <see cref="ConnectivityStatus"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ConnectivityStatus left, ConnectivityStatus right) => left.Equals(right);

        /// <summary> Determines if two <see cref="ConnectivityStatus"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ConnectivityStatus left, ConnectivityStatus right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="ConnectivityStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ConnectivityStatus(string value) => new ConnectivityStatus(value);

        /// <summary> Converts a string to a <see cref="ConnectivityStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ConnectivityStatus?(string value) => value == null ? null : new ConnectivityStatus(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectivityStatus other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(ConnectivityStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
