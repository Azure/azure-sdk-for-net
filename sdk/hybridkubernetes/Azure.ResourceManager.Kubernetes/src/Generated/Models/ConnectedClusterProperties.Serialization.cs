// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.Kubernetes;

namespace Azure.ResourceManager.Kubernetes.Models
{
    /// <summary> Properties of the connected cluster. </summary>
    public partial class ConnectedClusterProperties : IJsonModel<ConnectedClusterProperties>
    {
        /// <summary> Initializes a new instance of <see cref="ConnectedClusterProperties"/> for deserialization. </summary>
        internal ConnectedClusterProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ConnectedClusterProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ConnectedClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConnectedClusterProperties)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("agentPublicKeyCertificate"u8);
            writer.WriteStringValue(AgentPublicKeyCertificate);
            if (options.Format != "W" && Optional.IsDefined(KubernetesVersion))
            {
                writer.WritePropertyName("kubernetesVersion"u8);
                writer.WriteStringValue(KubernetesVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalNodeCount))
            {
                writer.WritePropertyName("totalNodeCount"u8);
                writer.WriteNumberValue(TotalNodeCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalCoreCount))
            {
                writer.WritePropertyName("totalCoreCount"u8);
                writer.WriteNumberValue(TotalCoreCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AgentVersion))
            {
                writer.WritePropertyName("agentVersion"u8);
                writer.WriteStringValue(AgentVersion);
            }
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(Distribution))
            {
                writer.WritePropertyName("distribution"u8);
                writer.WriteStringValue(Distribution);
            }
            if (Optional.IsDefined(DistributionVersion))
            {
                writer.WritePropertyName("distributionVersion"u8);
                writer.WriteStringValue(DistributionVersion);
            }
            if (Optional.IsDefined(Infrastructure))
            {
                writer.WritePropertyName("infrastructure"u8);
                writer.WriteStringValue(Infrastructure);
            }
            if (options.Format != "W" && Optional.IsDefined(Offering))
            {
                writer.WritePropertyName("offering"u8);
                writer.WriteStringValue(Offering);
            }
            if (options.Format != "W" && Optional.IsDefined(ManagedIdentityCertificateExpirationOn))
            {
                writer.WritePropertyName("managedIdentityCertificateExpirationTime"u8);
                writer.WriteStringValue(ManagedIdentityCertificateExpirationOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastConnectivityOn))
            {
                writer.WritePropertyName("lastConnectivityTime"u8);
                writer.WriteStringValue(LastConnectivityOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ConnectivityStatus))
            {
                writer.WritePropertyName("connectivityStatus"u8);
                writer.WriteStringValue(ConnectivityStatus.Value.ToString());
            }
            if (Optional.IsDefined(PrivateLinkState))
            {
                writer.WritePropertyName("privateLinkState"u8);
                writer.WriteStringValue(PrivateLinkState.Value.ToString());
            }
            if (Optional.IsDefined(PrivateLinkScopeResourceId))
            {
                writer.WritePropertyName("privateLinkScopeResourceId"u8);
                writer.WriteStringValue(PrivateLinkScopeResourceId);
            }
            if (Optional.IsDefined(AzureHybridBenefit))
            {
                writer.WritePropertyName("azureHybridBenefit"u8);
                writer.WriteStringValue(AzureHybridBenefit.Value.ToString());
            }
            if (Optional.IsDefined(AadProfile))
            {
                writer.WritePropertyName("aadProfile"u8);
                writer.WriteObjectValue(AadProfile, options);
            }
            if (Optional.IsDefined(ArcAgentProfile))
            {
                writer.WritePropertyName("arcAgentProfile"u8);
                writer.WriteObjectValue(ArcAgentProfile, options);
            }
            if (Optional.IsDefined(SecurityProfile))
            {
                writer.WritePropertyName("securityProfile"u8);
                writer.WriteObjectValue(SecurityProfile, options);
            }
            if (Optional.IsDefined(OidcIssuerProfile))
            {
                writer.WritePropertyName("oidcIssuerProfile"u8);
                writer.WriteObjectValue(OidcIssuerProfile, options);
            }
            if (Optional.IsDefined(Gateway))
            {
                writer.WritePropertyName("gateway"u8);
                writer.WriteObjectValue(Gateway, options);
            }
            if (Optional.IsCollectionDefined(ArcAgentryConfigurations))
            {
                writer.WritePropertyName("arcAgentryConfigurations"u8);
                writer.WriteStartArray();
                foreach (ArcAgentryConfigurations item in ArcAgentryConfigurations)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(MiscellaneousProperties))
            {
                writer.WritePropertyName("miscellaneousProperties"u8);
                writer.WriteStartObject();
                foreach (var item in MiscellaneousProperties)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ConnectedClusterProperties IJsonModel<ConnectedClusterProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ConnectedClusterProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ConnectedClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConnectedClusterProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConnectedClusterProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static ConnectedClusterProperties DeserializeConnectedClusterProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string agentPublicKeyCertificate = default;
            string kubernetesVersion = default;
            int? totalNodeCount = default;
            int? totalCoreCount = default;
            string agentVersion = default;
            ProvisioningState? provisioningState = default;
            string distribution = default;
            string distributionVersion = default;
            string infrastructure = default;
            string offering = default;
            DateTimeOffset? managedIdentityCertificateExpirationOn = default;
            DateTimeOffset? lastConnectivityOn = default;
            ConnectivityStatus? connectivityStatus = default;
            PrivateLinkState? privateLinkState = default;
            string privateLinkScopeResourceId = default;
            AzureHybridBenefit? azureHybridBenefit = default;
            AadProfile aadProfile = default;
            ArcAgentProfile arcAgentProfile = default;
            SecurityProfile securityProfile = default;
            OidcIssuerProfile oidcIssuerProfile = default;
            Gateway gateway = default;
            IList<ArcAgentryConfigurations> arcAgentryConfigurations = default;
            IReadOnlyDictionary<string, string> miscellaneousProperties = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("agentPublicKeyCertificate"u8))
                {
                    agentPublicKeyCertificate = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("kubernetesVersion"u8))
                {
                    kubernetesVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("totalNodeCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalNodeCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("totalCoreCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalCoreCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("agentVersion"u8))
                {
                    agentVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("distribution"u8))
                {
                    distribution = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("distributionVersion"u8))
                {
                    distributionVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("infrastructure"u8))
                {
                    infrastructure = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("offering"u8))
                {
                    offering = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("managedIdentityCertificateExpirationTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managedIdentityCertificateExpirationOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("lastConnectivityTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastConnectivityOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("connectivityStatus"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectivityStatus = new ConnectivityStatus(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("privateLinkState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    privateLinkState = new PrivateLinkState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("privateLinkScopeResourceId"u8))
                {
                    privateLinkScopeResourceId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("azureHybridBenefit"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureHybridBenefit = new AzureHybridBenefit(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("aadProfile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    aadProfile = AadProfile.DeserializeAadProfile(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("arcAgentProfile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    arcAgentProfile = ArcAgentProfile.DeserializeArcAgentProfile(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("securityProfile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    securityProfile = SecurityProfile.DeserializeSecurityProfile(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("oidcIssuerProfile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    oidcIssuerProfile = OidcIssuerProfile.DeserializeOidcIssuerProfile(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("gateway"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        gateway = null;
                        continue;
                    }
                    gateway = Gateway.DeserializeGateway(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("arcAgentryConfigurations"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ArcAgentryConfigurations> array = new List<ArcAgentryConfigurations>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(Models.ArcAgentryConfigurations.DeserializeArcAgentryConfigurations(item, options));
                    }
                    arcAgentryConfigurations = array;
                    continue;
                }
                if (prop.NameEquals("miscellaneousProperties"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, prop0.Value.GetString());
                        }
                    }
                    miscellaneousProperties = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new ConnectedClusterProperties(
                agentPublicKeyCertificate,
                kubernetesVersion,
                totalNodeCount,
                totalCoreCount,
                agentVersion,
                provisioningState,
                distribution,
                distributionVersion,
                infrastructure,
                offering,
                managedIdentityCertificateExpirationOn,
                lastConnectivityOn,
                connectivityStatus,
                privateLinkState,
                privateLinkScopeResourceId,
                azureHybridBenefit,
                aadProfile,
                arcAgentProfile,
                securityProfile,
                oidcIssuerProfile,
                gateway,
                arcAgentryConfigurations ?? new ChangeTrackingList<ArcAgentryConfigurations>(),
                miscellaneousProperties ?? new ChangeTrackingDictionary<string, string>(),
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ConnectedClusterProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ConnectedClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerKubernetesContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ConnectedClusterProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ConnectedClusterProperties IPersistableModel<ConnectedClusterProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ConnectedClusterProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ConnectedClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeConnectedClusterProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ConnectedClusterProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ConnectedClusterProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
