// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Kubernetes;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Kubernetes.Mocking
{
    /// <summary> A class to add extension methods to <see cref="SubscriptionResource"/>. </summary>
    public partial class MockableKubernetesSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _connectedClustersClientDiagnostics;
        private ConnectedClusters _connectedClustersRestClient;

        /// <summary> Initializes a new instance of MockableKubernetesSubscriptionResource for mocking. </summary>
        protected MockableKubernetesSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableKubernetesSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableKubernetesSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ConnectedClustersClientDiagnostics => _connectedClustersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Kubernetes.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private ConnectedClusters ConnectedClustersRestClient => _connectedClustersRestClient ??= new ConnectedClusters(ConnectedClustersClientDiagnostics, Pipeline, Endpoint, "2025-12-01-preview");

        /// <summary> API to enumerate registered connected K8s clusters under a Subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ConnectedClusterResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ConnectedClusterResource> GetConnectedClustersAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<ConnectedClusterData, ConnectedClusterResource>(new ConnectedClustersGetBySubscriptionAsyncCollectionResultOfT(ConnectedClustersRestClient, Id.SubscriptionId, context), data => new ConnectedClusterResource(Client, data));
        }

        /// <summary> API to enumerate registered connected K8s clusters under a Subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ConnectedClusterResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ConnectedClusterResource> GetConnectedClusters(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<ConnectedClusterData, ConnectedClusterResource>(new ConnectedClustersGetBySubscriptionCollectionResultOfT(ConnectedClustersRestClient, Id.SubscriptionId, context), data => new ConnectedClusterResource(Client, data));
        }
    }
}
