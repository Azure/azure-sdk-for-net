// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityDevOps.Models
{
    public partial class AzureDevOpsRepoProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(RepoId))
            {
                writer.WritePropertyName("repoId");
                writer.WriteStringValue(RepoId);
            }
            if (Optional.IsDefined(RepoUri))
            {
                writer.WritePropertyName("repoUrl");
                writer.WriteStringValue(RepoUri.AbsoluteUri);
            }
            if (Optional.IsDefined(OrgName))
            {
                writer.WritePropertyName("orgName");
                writer.WriteStringValue(OrgName);
            }
            if (Optional.IsDefined(ProjectName))
            {
                writer.WritePropertyName("projectName");
                writer.WriteStringValue(ProjectName);
            }
            if (Optional.IsDefined(Visibility))
            {
                writer.WritePropertyName("visibility");
                writer.WriteStringValue(Visibility);
            }
            if (Optional.IsDefined(ActionableRemediation))
            {
                writer.WritePropertyName("actionableRemediation");
                writer.WriteObjectValue(ActionableRemediation);
            }
            writer.WriteEndObject();
        }

        internal static AzureDevOpsRepoProperties DeserializeAzureDevOpsRepoProperties(JsonElement element)
        {
            Optional<ProvisioningState> provisioningState = default;
            Optional<string> repoId = default;
            Optional<Uri> repoUrl = default;
            Optional<string> orgName = default;
            Optional<string> projectName = default;
            Optional<string> visibility = default;
            Optional<ActionableRemediation> actionableRemediation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("repoId"))
                {
                    repoId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("repoUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        repoUrl = null;
                        continue;
                    }
                    repoUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("orgName"))
                {
                    orgName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("projectName"))
                {
                    projectName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("visibility"))
                {
                    visibility = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("actionableRemediation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    actionableRemediation = ActionableRemediation.DeserializeActionableRemediation(property.Value);
                    continue;
                }
            }
            return new AzureDevOpsRepoProperties(Optional.ToNullable(provisioningState), repoId.Value, repoUrl.Value, orgName.Value, projectName.Value, visibility.Value, actionableRemediation.Value);
        }
    }
}
