// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.SecurityDevOps.Models
{
    public partial class ActionableRemediation : IUtf8JsonSerializable, IModelJsonSerializable<ActionableRemediation>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ActionableRemediation>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ActionableRemediation>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ActionableRemediation>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsCollectionDefined(SeverityLevels))
            {
                writer.WritePropertyName("severityLevels"u8);
                writer.WriteStartArray();
                foreach (var item in SeverityLevels)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Categories))
            {
                writer.WritePropertyName("categories"u8);
                writer.WriteStartArray();
                foreach (var item in Categories)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(BranchConfiguration))
            {
                writer.WritePropertyName("branchConfiguration"u8);
                if (BranchConfiguration is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<TargetBranchConfiguration>)BranchConfiguration).Serialize(writer, options);
                }
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ActionableRemediation DeserializeActionableRemediation(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ActionableRemediationState> state = default;
            Optional<IList<string>> severityLevels = default;
            Optional<IList<ActionableRemediationRuleCategory>> categories = default;
            Optional<TargetBranchConfiguration> branchConfiguration = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new ActionableRemediationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("severityLevels"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    severityLevels = array;
                    continue;
                }
                if (property.NameEquals("categories"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ActionableRemediationRuleCategory> array = new List<ActionableRemediationRuleCategory>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new ActionableRemediationRuleCategory(item.GetString()));
                    }
                    categories = array;
                    continue;
                }
                if (property.NameEquals("branchConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    branchConfiguration = TargetBranchConfiguration.DeserializeTargetBranchConfiguration(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ActionableRemediation(Optional.ToNullable(state), Optional.ToList(severityLevels), Optional.ToList(categories), branchConfiguration.Value, rawData);
        }

        ActionableRemediation IModelJsonSerializable<ActionableRemediation>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ActionableRemediation>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeActionableRemediation(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ActionableRemediation>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ActionableRemediation>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ActionableRemediation IModelSerializable<ActionableRemediation>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ActionableRemediation>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeActionableRemediation(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="ActionableRemediation"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="ActionableRemediation"/> to convert. </param>
        public static implicit operator RequestContent(ActionableRemediation model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="ActionableRemediation"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator ActionableRemediation(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeActionableRemediation(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
