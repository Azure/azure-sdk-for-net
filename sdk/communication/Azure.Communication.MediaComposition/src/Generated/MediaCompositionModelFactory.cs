// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using Azure.Communication.MediaComposition.Models;

namespace Azure.Communication.MediaComposition
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class MediaCompositionModelFactory
    {
        /// <summary> Initializes a new instance of MediaComposition. </summary>
        /// <param name="id"> Id of the media composition. </param>
        /// <param name="layout">
        /// Configure a layout
        /// Please note <see cref="MediaCompositionLayout"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoGridLayout"/>, <see cref="CustomLayout"/>, <see cref="GridLayout"/>, <see cref="PresentationLayout"/> and <see cref="PresenterLayout"/>.
        /// </param>
        /// <param name="inputs">
        /// Inputs used in the composition
        /// Please note <see cref="MediaInput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ActivePresenter"/>, <see cref="DominantSpeaker"/>, <see cref="GroupCallInput"/>, <see cref="ImageInput"/>, <see cref="ParticipantInput"/>, <see cref="RoomInput"/>, <see cref="RtmpInput"/>, <see cref="ScreenShare"/>, <see cref="SrtInput"/> and <see cref="TeamsMeetingInput"/>.
        /// </param>
        /// <param name="outputs">
        /// Outputs used in the composition
        /// Please note <see cref="MediaOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GroupCallOutput"/>, <see cref="RoomOutput"/>, <see cref="RtmpOutput"/>, <see cref="SrtOutput"/> and <see cref="TeamsMeetingOutput"/>.
        /// </param>
        /// <param name="streamState"> Provides the state of the media composition. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.MediaComposition"/> instance for mocking. </returns>
        public static MediaComposition MediaComposition(string id = null, MediaCompositionLayout layout = null, IDictionary<string, MediaInput> inputs = null, IDictionary<string, MediaOutput> outputs = null, CompositionStreamState streamState = null)
        {
            inputs ??= new Dictionary<string, MediaInput>();
            outputs ??= new Dictionary<string, MediaOutput>();

            return new MediaComposition(id, layout, inputs, outputs, streamState);
        }

        /// <summary> Initializes a new instance of MediaCompositionLayout. </summary>
        /// <param name="kind"> Kind of layout. </param>
        /// <param name="resolution"> The dimensions of the scene or objects in the scene. </param>
        /// <param name="placeholderImageUri"> Set global placeholder image. </param>
        /// <param name="scalingMode"> The scaling mode for the view of a video stream in a cell. </param>
        /// <returns> A new <see cref="Models.MediaCompositionLayout"/> instance for mocking. </returns>
        public static MediaCompositionLayout MediaCompositionLayout(string kind = null, LayoutResolution resolution = null, string placeholderImageUri = null, ScalingMode? scalingMode = null)
        {
            return new UnknownLayout(kind, resolution, placeholderImageUri, scalingMode);
        }

        /// <summary> Initializes a new instance of MediaInput. </summary>
        /// <param name="kind"> Kind of media input. </param>
        /// <param name="placeholderImageUri"> Image url to be used if participant has no video stream. </param>
        /// <returns> A new <see cref="Models.MediaInput"/> instance for mocking. </returns>
        public static MediaInput MediaInput(string kind = null, string placeholderImageUri = null)
        {
            return new UnknownMediaInput(kind, placeholderImageUri);
        }

        /// <summary> Initializes a new instance of MediaOutput. </summary>
        /// <param name="kind"> Kind of media output. </param>
        /// <returns> A new <see cref="Models.MediaOutput"/> instance for mocking. </returns>
        public static MediaOutput MediaOutput(string kind = null)
        {
            return new UnknownMediaOutput(kind);
        }

        /// <summary> Initializes a new instance of CompositionStreamState. </summary>
        /// <param name="status"> State of the composition stream. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.CompositionStreamState"/> instance for mocking. </returns>
        public static CompositionStreamState CompositionStreamState(StreamStatus? status = null)
        {
            return new CompositionStreamState(status);
        }

        /// <summary> Initializes a new instance of ActivePresenter. </summary>
        /// <param name="placeholderImageUri"> Image url to be used if participant has no video stream. </param>
        /// <param name="call"> The id of the teams meeting or call. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.ActivePresenter"/> instance for mocking. </returns>
        public static ActivePresenter ActivePresenter(string placeholderImageUri = null, string call = null)
        {
            return new ActivePresenter("activePresenter", placeholderImageUri, call);
        }

        /// <summary> Initializes a new instance of AutoGridInputGroup. </summary>
        /// <param name="position"> The (x,y) position on scene or input group. </param>
        /// <param name="width"> The width of the input group container. Can be defined as pixels or percentage. </param>
        /// <param name="height"> The height of the input group container. Can be defined as pixels or percentage. </param>
        /// <param name="layer"> The layer this input group should appear on. </param>
        /// <param name="scalingMode"> The scaling mode for the view of a video stream in a cell. </param>
        /// <param name="inputIds"> Input and input group ids to be included in this input group. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.AutoGridInputGroup"/> instance for mocking. </returns>
        public static AutoGridInputGroup AutoGridInputGroup(InputPosition position = null, string width = null, string height = null, string layer = null, ScalingMode? scalingMode = null, IEnumerable<string> inputIds = null)
        {
            inputIds ??= new List<string>();

            return new AutoGridInputGroup("autoGridBased", position, width, height, layer, scalingMode, inputIds?.ToList());
        }

        /// <summary> Initializes a new instance of InputGroup. </summary>
        /// <param name="kind"> Kind of input group. </param>
        /// <param name="position"> The (x,y) position on scene or input group. </param>
        /// <param name="width"> The width of the input group container. Can be defined as pixels or percentage. </param>
        /// <param name="height"> The height of the input group container. Can be defined as pixels or percentage. </param>
        /// <param name="layer"> The layer this input group should appear on. </param>
        /// <param name="scalingMode"> The scaling mode for the view of a video stream in a cell. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.InputGroup"/> instance for mocking. </returns>
        public static InputGroup InputGroup(string kind = null, InputPosition position = null, string width = null, string height = null, string layer = null, ScalingMode? scalingMode = null)
        {
            return new UnknownInputGroup(kind, position, width, height, layer, scalingMode);
        }

        /// <summary> Initializes a new instance of AutoGridLayout. </summary>
        /// <param name="resolution"> The dimensions of the scene or objects in the scene. </param>
        /// <param name="placeholderImageUri"> Set global placeholder image. </param>
        /// <param name="scalingMode"> The scaling mode for the view of a video stream in a cell. </param>
        /// <param name="inputIds"> Input ids to be included in the layout. </param>
        /// <param name="highlightDominantSpeaker"> Toggle dominant speaker highlighting. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.AutoGridLayout"/> instance for mocking. </returns>
        public static AutoGridLayout AutoGridLayout(LayoutResolution resolution = null, string placeholderImageUri = null, ScalingMode? scalingMode = null, IEnumerable<string> inputIds = null, bool? highlightDominantSpeaker = null)
        {
            inputIds ??= new List<string>();

            return new AutoGridLayout("autoGrid", resolution, placeholderImageUri, scalingMode, inputIds?.ToList(), highlightDominantSpeaker);
        }

        /// <summary> Initializes a new instance of CustomLayout. </summary>
        /// <param name="resolution"> The dimensions of the scene or objects in the scene. </param>
        /// <param name="placeholderImageUri"> Set global placeholder image. </param>
        /// <param name="scalingMode"> The scaling mode for the view of a video stream in a cell. </param>
        /// <param name="layers"> Configure layer to control the z-position of input groups. </param>
        /// <param name="inputGroups">
        /// Configure input groups of the layout
        /// Please note <see cref="InputGroup"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoGridInputGroup"/> and <see cref="GridInputGroup"/>.
        /// </param>
        /// <returns> A new <see cref="Communication.MediaComposition.CustomLayout"/> instance for mocking. </returns>
        public static CustomLayout CustomLayout(LayoutResolution resolution = null, string placeholderImageUri = null, ScalingMode? scalingMode = null, IDictionary<string, LayoutLayer> layers = null, IDictionary<string, InputGroup> inputGroups = null)
        {
            layers ??= new Dictionary<string, LayoutLayer>();
            inputGroups ??= new Dictionary<string, InputGroup>();

            return new CustomLayout("custom", resolution, placeholderImageUri, scalingMode, layers, inputGroups);
        }

        /// <summary> Initializes a new instance of LayoutLayer. </summary>
        /// <param name="zIndex"> The z position of the layer. </param>
        /// <param name="visibility"> The visibility of the layer. </param>
        /// <returns> A new <see cref="Models.LayoutLayer"/> instance for mocking. </returns>
        public static LayoutLayer LayoutLayer(int zIndex = default, LayerVisibility? visibility = null)
        {
            return new LayoutLayer(zIndex, visibility);
        }

        /// <summary> Initializes a new instance of DominantSpeaker. </summary>
        /// <param name="placeholderImageUri"> Image url to be used if participant has no video stream. </param>
        /// <param name="call"> The id of the teams meeting or call. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.DominantSpeaker"/> instance for mocking. </returns>
        public static DominantSpeaker DominantSpeaker(string placeholderImageUri = null, string call = null)
        {
            return new DominantSpeaker("dominantSpeaker", placeholderImageUri, call);
        }

        /// <summary> Initializes a new instance of GridInputGroup. </summary>
        /// <param name="position"> The (x,y) position on scene or input group. </param>
        /// <param name="width"> The width of the input group container. Can be defined as pixels or percentage. </param>
        /// <param name="height"> The height of the input group container. Can be defined as pixels or percentage. </param>
        /// <param name="layer"> The layer this input group should appear on. </param>
        /// <param name="scalingMode"> The scaling mode for the view of a video stream in a cell. </param>
        /// <param name="inputIds"> Input and input group ids to be included in this input group. </param>
        /// <param name="rows"> Number of rows. </param>
        /// <param name="columns"> Number of columns. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.GridInputGroup"/> instance for mocking. </returns>
        public static GridInputGroup GridInputGroup(InputPosition position = null, string width = null, string height = null, string layer = null, ScalingMode? scalingMode = null, IEnumerable<IList<string>> inputIds = null, int rows = default, int columns = default)
        {
            inputIds ??= new List<IList<string>>();

            return new GridInputGroup("gridBased", position, width, height, layer, scalingMode, inputIds?.ToList(), rows, columns);
        }

        /// <summary> Initializes a new instance of GridLayout. </summary>
        /// <param name="resolution"> The dimensions of the scene or objects in the scene. </param>
        /// <param name="placeholderImageUri"> Set global placeholder image. </param>
        /// <param name="scalingMode"> The scaling mode for the view of a video stream in a cell. </param>
        /// <param name="rows"> Number of rows. </param>
        /// <param name="columns"> Number of columns. </param>
        /// <param name="inputIds"> Input ids to be included in the layout. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.GridLayout"/> instance for mocking. </returns>
        public static GridLayout GridLayout(LayoutResolution resolution = null, string placeholderImageUri = null, ScalingMode? scalingMode = null, int rows = default, int columns = default, IEnumerable<IList<string>> inputIds = null)
        {
            inputIds ??= new List<IList<string>>();

            return new GridLayout("grid", resolution, placeholderImageUri, scalingMode, rows, columns, inputIds?.ToList());
        }

        /// <summary> Initializes a new instance of GroupCallInput. </summary>
        /// <param name="placeholderImageUri"> Image url to be used if participant has no video stream. </param>
        /// <param name="id"> Group call identifier. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.GroupCallInput"/> instance for mocking. </returns>
        public static GroupCallInput GroupCallInput(string placeholderImageUri = null, string id = null)
        {
            return new GroupCallInput("groupCall", placeholderImageUri, id);
        }

        /// <summary> Initializes a new instance of GroupCallOutput. </summary>
        /// <param name="id"> Group call identifier. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.GroupCallOutput"/> instance for mocking. </returns>
        public static GroupCallOutput GroupCallOutput(string id = null)
        {
            return new GroupCallOutput("groupCall", id);
        }

        /// <summary> Initializes a new instance of ImageInput. </summary>
        /// <param name="placeholderImageUri"> Image url to be used if participant has no video stream. </param>
        /// <param name="uri"> Url of the image file. </param>
        /// <returns> A new <see cref="Models.ImageInput"/> instance for mocking. </returns>
        public static ImageInput ImageInput(string placeholderImageUri = null, string uri = null)
        {
            return new ImageInput("image", placeholderImageUri, uri);
        }

        /// <summary> Initializes a new instance of PresentationLayout. </summary>
        /// <param name="resolution"> The dimensions of the scene or objects in the scene. </param>
        /// <param name="placeholderImageUri"> Set global placeholder image. </param>
        /// <param name="scalingMode"> The scaling mode for the view of a video stream in a cell. </param>
        /// <param name="presenterId"> Id of the presenter input. </param>
        /// <param name="audienceIds"> Input ids to be included in the audience of layout. </param>
        /// <param name="audiencePosition"> Position of the audience streams. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.PresentationLayout"/> instance for mocking. </returns>
        public static PresentationLayout PresentationLayout(LayoutResolution resolution = null, string placeholderImageUri = null, ScalingMode? scalingMode = null, string presenterId = null, IEnumerable<string> audienceIds = null, AudiencePosition? audiencePosition = null)
        {
            audienceIds ??= new List<string>();

            return new PresentationLayout("presentation", resolution, placeholderImageUri, scalingMode, presenterId, audienceIds?.ToList(), audiencePosition);
        }

        /// <summary> Initializes a new instance of PresenterLayout. </summary>
        /// <param name="resolution"> The dimensions of the scene or objects in the scene. </param>
        /// <param name="placeholderImageUri"> Set global placeholder image. </param>
        /// <param name="scalingMode"> The scaling mode for the view of a video stream in a cell. </param>
        /// <param name="presenterId"> Id of the presenter input. </param>
        /// <param name="supportId"> Id of the support input. </param>
        /// <param name="supportPosition"> Position of the support stream. </param>
        /// <param name="supportAspectRatio"> Aspect ratio of the support stream. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.PresenterLayout"/> instance for mocking. </returns>
        public static PresenterLayout PresenterLayout(LayoutResolution resolution = null, string placeholderImageUri = null, ScalingMode? scalingMode = null, string presenterId = null, string supportId = null, SupportPosition? supportPosition = null, double? supportAspectRatio = null)
        {
            return new PresenterLayout("presenter", resolution, placeholderImageUri, scalingMode, presenterId, supportId, supportPosition, supportAspectRatio);
        }

        /// <summary> Initializes a new instance of RoomInput. </summary>
        /// <param name="placeholderImageUri"> Image url to be used if participant has no video stream. </param>
        /// <param name="id"> Room identifier. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.RoomInput"/> instance for mocking. </returns>
        public static RoomInput RoomInput(string placeholderImageUri = null, string id = null)
        {
            return new RoomInput("room", placeholderImageUri, id);
        }

        /// <summary> Initializes a new instance of RoomOutput. </summary>
        /// <param name="id"> Room identifier. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.RoomOutput"/> instance for mocking. </returns>
        public static RoomOutput RoomOutput(string id = null)
        {
            return new RoomOutput("room", id);
        }

        /// <summary> Initializes a new instance of RtmpInput. </summary>
        /// <param name="placeholderImageUri"> Image url to be used if participant has no video stream. </param>
        /// <param name="streamKey"> Stream key of the stream. </param>
        /// <param name="resolution"> The dimensions of the scene or objects in the scene. </param>
        /// <param name="streamUrl"> The url of the stream. </param>
        /// <param name="mode"> Rtmp mode. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.RtmpInput"/> instance for mocking. </returns>
        public static RtmpInput RtmpInput(string placeholderImageUri = null, string streamKey = null, LayoutResolution resolution = null, string streamUrl = null, RtmpMode? mode = null)
        {
            return new RtmpInput("rtmp", placeholderImageUri, streamKey, resolution, streamUrl, mode);
        }

        /// <summary> Initializes a new instance of RtmpOutput. </summary>
        /// <param name="streamKey"> Stream key of the stream. </param>
        /// <param name="resolution"> The dimensions of the scene or objects in the scene. </param>
        /// <param name="streamUrl"> The url of the stream. </param>
        /// <param name="mode"> Rtmp mode. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.RtmpOutput"/> instance for mocking. </returns>
        public static RtmpOutput RtmpOutput(string streamKey = null, LayoutResolution resolution = null, string streamUrl = null, RtmpMode? mode = null)
        {
            return new RtmpOutput("rtmp", streamKey, resolution, streamUrl, mode);
        }

        /// <summary> Initializes a new instance of ScreenShare. </summary>
        /// <param name="placeholderImageUri"> Image url to be used if participant has no video stream. </param>
        /// <param name="call"> The id of the teams meeting or call. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.ScreenShare"/> instance for mocking. </returns>
        public static ScreenShare ScreenShare(string placeholderImageUri = null, string call = null)
        {
            return new ScreenShare("screenShare", placeholderImageUri, call);
        }

        /// <summary> Initializes a new instance of SrtInput. </summary>
        /// <param name="placeholderImageUri"> Image url to be used if participant has no video stream. </param>
        /// <param name="resolution"> The dimensions of the scene or objects in the scene. </param>
        /// <param name="streamUrl"> The url of the stream. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.SrtInput"/> instance for mocking. </returns>
        public static SrtInput SrtInput(string placeholderImageUri = null, LayoutResolution resolution = null, string streamUrl = null)
        {
            return new SrtInput("srt", placeholderImageUri, resolution, streamUrl);
        }

        /// <summary> Initializes a new instance of SrtOutput. </summary>
        /// <param name="resolution"> The dimensions of the scene or objects in the scene. </param>
        /// <param name="streamUrl"> The url of the stream. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.SrtOutput"/> instance for mocking. </returns>
        public static SrtOutput SrtOutput(LayoutResolution resolution = null, string streamUrl = null)
        {
            return new SrtOutput("srt", resolution, streamUrl);
        }

        /// <summary> Initializes a new instance of TeamsMeetingInput. </summary>
        /// <param name="placeholderImageUri"> Image url to be used if participant has no video stream. </param>
        /// <param name="teamsJoinUrl"> The url from Teams to join the meeting. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.TeamsMeetingInput"/> instance for mocking. </returns>
        public static TeamsMeetingInput TeamsMeetingInput(string placeholderImageUri = null, string teamsJoinUrl = null)
        {
            return new TeamsMeetingInput("teamsMeeting", placeholderImageUri, teamsJoinUrl);
        }

        /// <summary> Initializes a new instance of TeamsMeetingOutput. </summary>
        /// <param name="teamsJoinUrl"> The url from Teams to join the meeting. </param>
        /// <returns> A new <see cref="Communication.MediaComposition.TeamsMeetingOutput"/> instance for mocking. </returns>
        public static TeamsMeetingOutput TeamsMeetingOutput(string teamsJoinUrl = null)
        {
            return new TeamsMeetingOutput("teamsMeeting", teamsJoinUrl);
        }
    }
}
