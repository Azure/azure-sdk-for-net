// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Communication.MediaComposition;
using Azure.Core;

namespace Azure.Communication.MediaComposition.Models
{
    public partial class MediaCompositionLayout : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Resolution))
            {
                writer.WritePropertyName("resolution");
                writer.WriteObjectValue(Resolution);
            }
            if (Optional.IsDefined(Grid))
            {
                writer.WritePropertyName("grid");
                writer.WriteObjectValue(Grid);
            }
            if (Optional.IsDefined(AutoGrid))
            {
                writer.WritePropertyName("autoGrid");
                writer.WriteObjectValue(AutoGrid);
            }
            if (Optional.IsDefined(Presenter))
            {
                writer.WritePropertyName("presenter");
                writer.WriteObjectValue(Presenter);
            }
            if (Optional.IsDefined(Presentation))
            {
                writer.WritePropertyName("presentation");
                writer.WriteObjectValue(Presentation);
            }
            if (Optional.IsCollectionDefined(Layers))
            {
                writer.WritePropertyName("layers");
                writer.WriteStartObject();
                foreach (var item in Layers)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(InputGroups))
            {
                writer.WritePropertyName("inputGroups");
                writer.WriteStartObject();
                foreach (var item in InputGroups)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(PlaceholderImageUri))
            {
                writer.WritePropertyName("placeholderImageUri");
                writer.WriteStringValue(PlaceholderImageUri);
            }
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind.Value.ToSerialString());
            }
            writer.WriteEndObject();
        }

        internal static MediaCompositionLayout DeserializeMediaCompositionLayout(JsonElement element)
        {
            Optional<LayoutResolution> resolution = default;
            Optional<GridLayoutOptions> grid = default;
            Optional<AutoGridLayoutOptions> autoGrid = default;
            Optional<PresenterLayoutOptions> presenter = default;
            Optional<PresentationLayoutOptions> presentation = default;
            Optional<IDictionary<string, LayoutLayer>> layers = default;
            Optional<IDictionary<string, InputGroup>> inputGroups = default;
            Optional<string> placeholderImageUri = default;
            Optional<LayoutType> kind = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resolution"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resolution = LayoutResolution.DeserializeLayoutResolution(property.Value);
                    continue;
                }
                if (property.NameEquals("grid"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    grid = GridLayoutOptions.DeserializeGridLayoutOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("autoGrid"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    autoGrid = AutoGridLayoutOptions.DeserializeAutoGridLayoutOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("presenter"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    presenter = PresenterLayoutOptions.DeserializePresenterLayoutOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("presentation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    presentation = PresentationLayoutOptions.DeserializePresentationLayoutOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("layers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, LayoutLayer> dictionary = new Dictionary<string, LayoutLayer>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, LayoutLayer.DeserializeLayoutLayer(property0.Value));
                    }
                    layers = dictionary;
                    continue;
                }
                if (property.NameEquals("inputGroups"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, InputGroup> dictionary = new Dictionary<string, InputGroup>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, InputGroup.DeserializeInputGroup(property0.Value));
                    }
                    inputGroups = dictionary;
                    continue;
                }
                if (property.NameEquals("placeholderImageUri"))
                {
                    placeholderImageUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    kind = property.Value.GetString().ToLayoutType();
                    continue;
                }
            }
            return new MediaCompositionLayout(resolution.Value, grid.Value, autoGrid.Value, presenter.Value, presentation.Value, Optional.ToDictionary(layers), Optional.ToDictionary(inputGroups), placeholderImageUri.Value, Optional.ToNullable(kind));
        }
    }
}
