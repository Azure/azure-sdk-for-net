// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Communication.MediaComposition;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Communication.MediaComposition.Models
{
    public partial class MediaCompositionLayout : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IUtf8JsonSerializable)this).Write(writer, new SerializableOptions());

        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer, SerializableOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("kind"u8);
            writer.WriteStringValue(Kind.ToString());
            if (Optional.IsDefined(Resolution))
            {
                writer.WritePropertyName("resolution"u8);
                writer.WriteObjectValue(Resolution);
            }
            if (Optional.IsDefined(PlaceholderImageUri))
            {
                writer.WritePropertyName("placeholderImageUri"u8);
                writer.WriteStringValue(PlaceholderImageUri);
            }
            if (Optional.IsDefined(ScalingMode))
            {
                writer.WritePropertyName("scalingMode"u8);
                writer.WriteStringValue(ScalingMode.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static MediaCompositionLayout DeserializeMediaCompositionLayout(JsonElement element, SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("kind", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "autoGrid": return AutoGridLayout.DeserializeAutoGridLayout(element);
                    case "custom": return CustomLayout.DeserializeCustomLayout(element);
                    case "grid": return GridLayout.DeserializeGridLayout(element);
                    case "presentation": return PresentationLayout.DeserializePresentationLayout(element);
                    case "presenter": return PresenterLayout.DeserializePresenterLayout(element);
                }
            }
            return UnknownLayout.DeserializeUnknownLayout(element);
        }
    }
}
