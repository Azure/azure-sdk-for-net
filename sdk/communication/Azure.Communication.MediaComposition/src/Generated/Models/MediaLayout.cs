// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Communication.MediaComposition;
using Azure.Core;

namespace Azure.Communication.MediaComposition.Models
{
    /// <summary> The Layout. </summary>
    public partial class MediaLayout
    {
        /// <summary> Initializes a new instance of MediaLayout. </summary>
        public MediaLayout()
        {
            Containers = new ChangeTrackingList<LayoutContainer>();
        }

        /// <summary> Initializes a new instance of MediaLayout. </summary>
        /// <param name="type"></param>
        /// <param name="resolution"></param>
        /// <param name="trackActiveSpeaker"></param>
        /// <param name="presentationWithContentLayoutOptions"></param>
        /// <param name="gridOptions"></param>
        /// <param name="presentationOptions"></param>
        /// <param name="presenterOptions"></param>
        /// <param name="containers"></param>
        internal MediaLayout(LayoutType? type, MediaResolution resolution, bool? trackActiveSpeaker, PresentationWithContentLayoutOptions presentationWithContentLayoutOptions, GridLayoutOptions gridOptions, PresentationLayoutOptions presentationOptions, PresenterLayoutOptions presenterOptions, IList<LayoutContainer> containers)
        {
            Type = type;
            Resolution = resolution;
            TrackActiveSpeaker = trackActiveSpeaker;
            PresentationWithContentLayoutOptions = presentationWithContentLayoutOptions;
            GridOptions = gridOptions;
            PresentationOptions = presentationOptions;
            PresenterOptions = presenterOptions;
            Containers = containers;
        }

        /// <summary> Gets or sets the type. </summary>
        public LayoutType? Type { get; set; }
        /// <summary> Gets or sets the resolution. </summary>
        public MediaResolution Resolution { get; set; }
        /// <summary> Gets or sets the track active speaker. </summary>
        public bool? TrackActiveSpeaker { get; set; }
        /// <summary> Gets or sets the presentation with content layout options. </summary>
        public PresentationWithContentLayoutOptions PresentationWithContentLayoutOptions { get; set; }
        /// <summary> Gets or sets the grid options. </summary>
        public GridLayoutOptions GridOptions { get; set; }
        /// <summary> Gets or sets the presentation options. </summary>
        public PresentationLayoutOptions PresentationOptions { get; set; }
        /// <summary> Gets or sets the presenter options. </summary>
        public PresenterLayoutOptions PresenterOptions { get; set; }
        /// <summary> Gets the containers. </summary>
        public IList<LayoutContainer> Containers { get; }
    }
}
