// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Communication.MediaComposition.Models;
using Azure.Core;

namespace Azure.Communication.MediaComposition
{
    /// <summary> The MediaCompositionBody. </summary>
    public partial class MediaCompositionBody
    {
        /// <summary> Initializes a new instance of MediaCompositionBody. </summary>
        public MediaCompositionBody()
        {
            Inputs = new ChangeTrackingDictionary<string, MediaInput>();
            Outputs = new ChangeTrackingDictionary<string, MediaOutput>();
        }

        /// <summary> Initializes a new instance of MediaCompositionBody. </summary>
        /// <param name="id"></param>
        /// <param name="layout"></param>
        /// <param name="inputs"> Dictionary of &lt;MediaInput&gt;. </param>
        /// <param name="outputs"> Dictionary of &lt;MediaOutput&gt;. </param>
        /// <param name="streamState"></param>
        internal MediaCompositionBody(string id, MediaCompositionLayout layout, IDictionary<string, MediaInput> inputs, IDictionary<string, MediaOutput> outputs, CompositionStreamState? streamState)
        {
            Id = id;
            Layout = layout;
            Inputs = inputs;
            Outputs = outputs;
            StreamState = streamState;
        }

        /// <summary> Gets or sets the id. </summary>
        public string Id { get; set; }
        /// <summary> Gets or sets the layout. </summary>
        public MediaCompositionLayout Layout { get; set; }
        /// <summary> Dictionary of &lt;MediaInput&gt;. </summary>
        public IDictionary<string, MediaInput> Inputs { get; }
        /// <summary> Dictionary of &lt;MediaOutput&gt;. </summary>
        public IDictionary<string, MediaOutput> Outputs { get; }
        /// <summary> Gets or sets the stream state. </summary>
        public CompositionStreamState? StreamState { get; set; }
    }
}
