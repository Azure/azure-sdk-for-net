// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Communication.MediaComposition.Models;
using Azure.Core;

namespace Azure.Communication.MediaComposition
{
    /// <summary> Configure the presentation layout. </summary>
    public partial class PresentationLayout : MediaCompositionLayout
    {
        /// <summary> Initializes a new instance of <see cref="PresentationLayout"/>. </summary>
        /// <param name="presenterId"> Id of the presenter input. </param>
        /// <param name="audienceIds"> Input ids to be included in the audience of layout. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="presenterId"/> or <paramref name="audienceIds"/> is null. </exception>
        public PresentationLayout(string presenterId, IEnumerable<string> audienceIds)
        {
            Argument.AssertNotNull(presenterId, nameof(presenterId));
            Argument.AssertNotNull(audienceIds, nameof(audienceIds));

            PresenterId = presenterId;
            AudienceIds = audienceIds.ToList();
            Kind = LayoutType.Presentation;
        }

        /// <summary> Initializes a new instance of <see cref="PresentationLayout"/>. </summary>
        /// <param name="kind"> Kind of layout. </param>
        /// <param name="resolution"> The dimensions of the scene or objects in the scene. </param>
        /// <param name="placeholderImageUri"> Set global placeholder image. </param>
        /// <param name="scalingMode"> The scaling mode for the view of a video stream in a cell. </param>
        /// <param name="presenterId"> Id of the presenter input. </param>
        /// <param name="audienceIds"> Input ids to be included in the audience of layout. </param>
        /// <param name="audiencePosition"> Position of the audience streams. </param>
        internal PresentationLayout(LayoutType kind, LayoutResolution resolution, string placeholderImageUri, ScalingMode? scalingMode, string presenterId, IList<string> audienceIds, AudiencePosition? audiencePosition) : base(kind, resolution, placeholderImageUri, scalingMode)
        {
            PresenterId = presenterId;
            AudienceIds = audienceIds;
            AudiencePosition = audiencePosition;
            Kind = kind;
        }

        /// <summary> Id of the presenter input. </summary>
        public string PresenterId { get; set; }
        /// <summary> Input ids to be included in the audience of layout. </summary>
        public IList<string> AudienceIds { get; }
        /// <summary> Position of the audience streams. </summary>
        public AudiencePosition? AudiencePosition { get; set; }
    }
}
