// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.MediaComposition
{
    /// <summary> Position of the support stream. </summary>
    public readonly partial struct SupportPosition : IEquatable<SupportPosition>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SupportPosition"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SupportPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TopLeftValue = "topLeft";
        private const string TopRightValue = "topRight";
        private const string BottomLeftValue = "bottomLeft";
        private const string BottomRightValue = "bottomRight";

        /// <summary> topLeft. </summary>
        public static SupportPosition TopLeft { get; } = new SupportPosition(TopLeftValue);
        /// <summary> topRight. </summary>
        public static SupportPosition TopRight { get; } = new SupportPosition(TopRightValue);
        /// <summary> bottomLeft. </summary>
        public static SupportPosition BottomLeft { get; } = new SupportPosition(BottomLeftValue);
        /// <summary> bottomRight. </summary>
        public static SupportPosition BottomRight { get; } = new SupportPosition(BottomRightValue);
        /// <summary> Determines if two <see cref="SupportPosition"/> values are the same. </summary>
        public static bool operator ==(SupportPosition left, SupportPosition right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SupportPosition"/> values are not the same. </summary>
        public static bool operator !=(SupportPosition left, SupportPosition right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SupportPosition"/>. </summary>
        public static implicit operator SupportPosition(string value) => new SupportPosition(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SupportPosition other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SupportPosition other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
