// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Communication.MediaComposition.Models;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Communication.MediaComposition
{
    public partial class RtmpOutput : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("streamKey"u8);
            writer.WriteStringValue(StreamKey);
            writer.WritePropertyName("resolution"u8);
            writer.WriteObjectValue(Resolution);
            writer.WritePropertyName("streamUrl"u8);
            writer.WriteStringValue(StreamUrl);
            if (Optional.IsDefined(Mode))
            {
                writer.WritePropertyName("mode"u8);
                writer.WriteStringValue(Mode.Value.ToString());
            }
            writer.WritePropertyName("kind"u8);
            writer.WriteStringValue(Kind.ToString());
            writer.WriteEndObject();
        }

        internal static RtmpOutput DeserializeRtmpOutput(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string streamKey = default;
            LayoutResolution resolution = default;
            string streamUrl = default;
            Optional<RtmpMode> mode = default;
            MediaOutputType kind = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("streamKey"u8))
                {
                    streamKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resolution"u8))
                {
                    resolution = LayoutResolution.DeserializeLayoutResolution(property.Value);
                    continue;
                }
                if (property.NameEquals("streamUrl"u8))
                {
                    streamUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mode = new RtmpMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    kind = new MediaOutputType(property.Value.GetString());
                    continue;
                }
            }
            return new RtmpOutput(kind, streamKey, resolution, streamUrl, Optional.ToNullable(mode));
        }
    }
}
