// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Communication.MediaComposition
{
    internal static partial class MediaInputTypeExtensions
    {
        public static string ToSerialString(this MediaInputType value) => value switch
        {
            MediaInputType.GroupCall => "groupCall",
            MediaInputType.Room => "room",
            MediaInputType.TeamsMeeting => "teamsMeeting",
            MediaInputType.Srt => "srt",
            MediaInputType.Rtmp => "rtmp",
            MediaInputType.Participant => "participant",
            MediaInputType.ScreenShare => "screenShare",
            MediaInputType.DominantSpeaker => "dominantSpeaker",
            MediaInputType.ActivePresenter => "activePresenter",
            MediaInputType.Image => "image",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown MediaInputType value.")
        };

        public static MediaInputType ToMediaInputType(this string value)
        {
            if (string.Equals(value, "groupCall", StringComparison.InvariantCultureIgnoreCase)) return MediaInputType.GroupCall;
            if (string.Equals(value, "room", StringComparison.InvariantCultureIgnoreCase)) return MediaInputType.Room;
            if (string.Equals(value, "teamsMeeting", StringComparison.InvariantCultureIgnoreCase)) return MediaInputType.TeamsMeeting;
            if (string.Equals(value, "srt", StringComparison.InvariantCultureIgnoreCase)) return MediaInputType.Srt;
            if (string.Equals(value, "rtmp", StringComparison.InvariantCultureIgnoreCase)) return MediaInputType.Rtmp;
            if (string.Equals(value, "participant", StringComparison.InvariantCultureIgnoreCase)) return MediaInputType.Participant;
            if (string.Equals(value, "screenShare", StringComparison.InvariantCultureIgnoreCase)) return MediaInputType.ScreenShare;
            if (string.Equals(value, "dominantSpeaker", StringComparison.InvariantCultureIgnoreCase)) return MediaInputType.DominantSpeaker;
            if (string.Equals(value, "activePresenter", StringComparison.InvariantCultureIgnoreCase)) return MediaInputType.ActivePresenter;
            if (string.Equals(value, "image", StringComparison.InvariantCultureIgnoreCase)) return MediaInputType.Image;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown MediaInputType value.");
        }
    }
}
