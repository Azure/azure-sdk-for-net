// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.MediaComposition
{
    /// <summary> Position of the audience streams. </summary>
    public readonly partial struct AudiencePosition : IEquatable<AudiencePosition>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AudiencePosition"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AudiencePosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TopValue = "top";
        private const string RightValue = "right";
        private const string BottomValue = "bottom";
        private const string LeftValue = "left";

        /// <summary> top. </summary>
        public static AudiencePosition Top { get; } = new AudiencePosition(TopValue);
        /// <summary> right. </summary>
        public static AudiencePosition Right { get; } = new AudiencePosition(RightValue);
        /// <summary> bottom. </summary>
        public static AudiencePosition Bottom { get; } = new AudiencePosition(BottomValue);
        /// <summary> left. </summary>
        public static AudiencePosition Left { get; } = new AudiencePosition(LeftValue);
        /// <summary> Determines if two <see cref="AudiencePosition"/> values are the same. </summary>
        public static bool operator ==(AudiencePosition left, AudiencePosition right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AudiencePosition"/> values are not the same. </summary>
        public static bool operator !=(AudiencePosition left, AudiencePosition right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AudiencePosition"/>. </summary>
        public static implicit operator AudiencePosition(string value) => new AudiencePosition(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AudiencePosition other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AudiencePosition other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
