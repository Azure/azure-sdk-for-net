// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Communication.MediaComposition;
using Azure.Core;

namespace Azure.Communication.MediaComposition.Models
{
    public partial class MediaLayout : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(Type.Value.ToString());
            }
            if (Optional.IsDefined(Resolution))
            {
                writer.WritePropertyName("resolution");
                writer.WriteObjectValue(Resolution);
            }
            if (Optional.IsDefined(TrackActiveSpeaker))
            {
                writer.WritePropertyName("trackActiveSpeaker");
                writer.WriteBooleanValue(TrackActiveSpeaker.Value);
            }
            if (Optional.IsDefined(PresentationWithContentLayoutOptions))
            {
                writer.WritePropertyName("presentationWithContentLayoutOptions");
                writer.WriteObjectValue(PresentationWithContentLayoutOptions);
            }
            if (Optional.IsDefined(GridOptions))
            {
                writer.WritePropertyName("gridOptions");
                writer.WriteObjectValue(GridOptions);
            }
            if (Optional.IsDefined(PresentationOptions))
            {
                writer.WritePropertyName("presentationOptions");
                writer.WriteObjectValue(PresentationOptions);
            }
            if (Optional.IsDefined(PresenterOptions))
            {
                writer.WritePropertyName("presenterOptions");
                writer.WriteObjectValue(PresenterOptions);
            }
            if (Optional.IsCollectionDefined(Containers))
            {
                writer.WritePropertyName("containers");
                writer.WriteStartArray();
                foreach (var item in Containers)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static MediaLayout DeserializeMediaLayout(JsonElement element)
        {
            Optional<LayoutType> type = default;
            Optional<MediaResolution> resolution = default;
            Optional<bool> trackActiveSpeaker = default;
            Optional<PresentationWithContentLayoutOptions> presentationWithContentLayoutOptions = default;
            Optional<GridLayoutOptions> gridOptions = default;
            Optional<PresentationLayoutOptions> presentationOptions = default;
            Optional<PresenterLayoutOptions> presenterOptions = default;
            Optional<IList<LayoutContainer>> containers = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    type = new LayoutType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resolution"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resolution = MediaResolution.DeserializeMediaResolution(property.Value);
                    continue;
                }
                if (property.NameEquals("trackActiveSpeaker"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    trackActiveSpeaker = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("presentationWithContentLayoutOptions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    presentationWithContentLayoutOptions = PresentationWithContentLayoutOptions.DeserializePresentationWithContentLayoutOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("gridOptions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    gridOptions = GridLayoutOptions.DeserializeGridLayoutOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("presentationOptions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    presentationOptions = PresentationLayoutOptions.DeserializePresentationLayoutOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("presenterOptions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    presenterOptions = PresenterLayoutOptions.DeserializePresenterLayoutOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("containers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LayoutContainer> array = new List<LayoutContainer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LayoutContainer.DeserializeLayoutContainer(item));
                    }
                    containers = array;
                    continue;
                }
            }
            return new MediaLayout(Optional.ToNullable(type), resolution.Value, Optional.ToNullable(trackActiveSpeaker), presentationWithContentLayoutOptions.Value, gridOptions.Value, presentationOptions.Value, presenterOptions.Value, Optional.ToList(containers));
        }
    }
}
