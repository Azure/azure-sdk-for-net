// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Communication
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CommunicationServiceOperations.
    /// </summary>
    public static partial class CommunicationServiceOperationsExtensions
    {
            /// <summary>
            /// Link Notification Hub
            /// </summary>
            /// <remarks>
            /// Links an Azure Notification Hub to this communication service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='linkNotificationHubParameters'>
            /// Parameters supplied to the operation.
            /// </param>
            public static LinkedNotificationHub LinkNotificationHub(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, LinkNotificationHubParameters linkNotificationHubParameters = default(LinkNotificationHubParameters))
            {
                return operations.LinkNotificationHubAsync(resourceGroupName, communicationServiceName, linkNotificationHubParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Link Notification Hub
            /// </summary>
            /// <remarks>
            /// Links an Azure Notification Hub to this communication service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='linkNotificationHubParameters'>
            /// Parameters supplied to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LinkedNotificationHub> LinkNotificationHubAsync(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, LinkNotificationHubParameters linkNotificationHubParameters = default(LinkNotificationHubParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LinkNotificationHubWithHttpMessagesAsync(resourceGroupName, communicationServiceName, linkNotificationHubParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List By Subscription
            /// </summary>
            /// <remarks>
            /// Handles requests to list all resources in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<CommunicationServiceResource> ListBySubscription(this ICommunicationServiceOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List By Subscription
            /// </summary>
            /// <remarks>
            /// Handles requests to list all resources in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CommunicationServiceResource>> ListBySubscriptionAsync(this ICommunicationServiceOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List By Resource Group
            /// </summary>
            /// <remarks>
            /// Handles requests to list all resources in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            public static IPage<CommunicationServiceResource> ListByResourceGroup(this ICommunicationServiceOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List By Resource Group
            /// </summary>
            /// <remarks>
            /// Handles requests to list all resources in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CommunicationServiceResource>> ListByResourceGroupAsync(this ICommunicationServiceOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update
            /// </summary>
            /// <remarks>
            /// Operation to update an existing CommunicationService.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='tags'>
            /// Tags of the service which is a list of key value pairs that describe the
            /// resource.
            /// </param>
            public static CommunicationServiceResource Update(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, communicationServiceName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update
            /// </summary>
            /// <remarks>
            /// Operation to update an existing CommunicationService.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='tags'>
            /// Tags of the service which is a list of key value pairs that describe the
            /// resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationServiceResource> UpdateAsync(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, communicationServiceName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get
            /// </summary>
            /// <remarks>
            /// Get the CommunicationService and its properties.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            public static CommunicationServiceResource Get(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName)
            {
                return operations.GetAsync(resourceGroupName, communicationServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get
            /// </summary>
            /// <remarks>
            /// Get the CommunicationService and its properties.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationServiceResource> GetAsync(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, communicationServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Create a new CommunicationService or update an existing
            /// CommunicationService.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the create or update operation
            /// </param>
            public static CommunicationServiceResource CreateOrUpdate(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, CommunicationServiceResource parameters = default(CommunicationServiceResource))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, communicationServiceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Create a new CommunicationService or update an existing
            /// CommunicationService.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the create or update operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationServiceResource> CreateOrUpdateAsync(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, CommunicationServiceResource parameters = default(CommunicationServiceResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, communicationServiceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Operation to delete a CommunicationService.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            public static CommunicationServiceDeleteHeaders Delete(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName)
            {
                return operations.DeleteAsync(resourceGroupName, communicationServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Operation to delete a CommunicationService.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationServiceDeleteHeaders> DeleteAsync(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, communicationServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// List Keys
            /// </summary>
            /// <remarks>
            /// Get the access keys of the CommunicationService resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            public static CommunicationServiceKeys ListKeys(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName)
            {
                return operations.ListKeysAsync(resourceGroupName, communicationServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Keys
            /// </summary>
            /// <remarks>
            /// Get the access keys of the CommunicationService resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationServiceKeys> ListKeysAsync(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysWithHttpMessagesAsync(resourceGroupName, communicationServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerate Key
            /// </summary>
            /// <remarks>
            /// Regenerate CommunicationService access key. PrimaryKey and SecondaryKey
            /// cannot be regenerated at the same time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='keyType'>
            /// The keyType to regenerate. Must be either 'primary' or
            /// 'secondary'(case-insensitive). Possible values include: 'Primary',
            /// 'Secondary'
            /// </param>
            public static CommunicationServiceKeys RegenerateKey(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, KeyType? keyType = default(KeyType?))
            {
                return operations.RegenerateKeyAsync(resourceGroupName, communicationServiceName, keyType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate Key
            /// </summary>
            /// <remarks>
            /// Regenerate CommunicationService access key. PrimaryKey and SecondaryKey
            /// cannot be regenerated at the same time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='keyType'>
            /// The keyType to regenerate. Must be either 'primary' or
            /// 'secondary'(case-insensitive). Possible values include: 'Primary',
            /// 'Secondary'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationServiceKeys> RegenerateKeyAsync(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, KeyType? keyType = default(KeyType?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateKeyWithHttpMessagesAsync(resourceGroupName, communicationServiceName, keyType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Create a new CommunicationService or update an existing
            /// CommunicationService.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the create or update operation
            /// </param>
            public static CommunicationServiceResource BeginCreateOrUpdate(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, CommunicationServiceResource parameters = default(CommunicationServiceResource))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, communicationServiceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Create a new CommunicationService or update an existing
            /// CommunicationService.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the create or update operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationServiceResource> BeginCreateOrUpdateAsync(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, CommunicationServiceResource parameters = default(CommunicationServiceResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, communicationServiceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Operation to delete a CommunicationService.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            public static CommunicationServiceDeleteHeaders BeginDelete(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, communicationServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Operation to delete a CommunicationService.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='communicationServiceName'>
            /// The name of the CommunicationService resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationServiceDeleteHeaders> BeginDeleteAsync(this ICommunicationServiceOperations operations, string resourceGroupName, string communicationServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, communicationServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// List By Subscription
            /// </summary>
            /// <remarks>
            /// Handles requests to list all resources in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CommunicationServiceResource> ListBySubscriptionNext(this ICommunicationServiceOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List By Subscription
            /// </summary>
            /// <remarks>
            /// Handles requests to list all resources in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CommunicationServiceResource>> ListBySubscriptionNextAsync(this ICommunicationServiceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List By Resource Group
            /// </summary>
            /// <remarks>
            /// Handles requests to list all resources in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CommunicationServiceResource> ListByResourceGroupNext(this ICommunicationServiceOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List By Resource Group
            /// </summary>
            /// <remarks>
            /// Handles requests to list all resources in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CommunicationServiceResource>> ListByResourceGroupNextAsync(this ICommunicationServiceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
