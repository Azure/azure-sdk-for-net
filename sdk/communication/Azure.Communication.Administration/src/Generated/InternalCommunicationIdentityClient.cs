// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Communication.Administration.Models;
using Azure.Core.Pipeline;

namespace Azure.Communication.Administration
{
    /// <summary> The InternalCommunicationIdentity service client. </summary>
    internal partial class InternalCommunicationIdentityClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal InternalCommunicationIdentityRestClient RestClient { get; }
        /// <summary> Initializes a new instance of InternalCommunicationIdentityClient for mocking. </summary>
        protected InternalCommunicationIdentityClient()
        {
        }
        /// <summary> Initializes a new instance of InternalCommunicationIdentityClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        internal InternalCommunicationIdentityClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint)
        {
            RestClient = new InternalCommunicationIdentityRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Create a new identity. </summary>
        /// <param name="createTokenWithScopes"> Also create access token for the created identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CommunicationIdentityAccessTokenResult>> CreateIdentityAsync(IEnumerable<CommunicationIdentityTokenScope> createTokenWithScopes = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("InternalCommunicationIdentityClient.CreateIdentity");
            scope.Start();
            try
            {
                return await RestClient.CreateIdentityAsync(createTokenWithScopes, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new identity. </summary>
        /// <param name="createTokenWithScopes"> Also create access token for the created identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CommunicationIdentityAccessTokenResult> CreateIdentity(IEnumerable<CommunicationIdentityTokenScope> createTokenWithScopes = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("InternalCommunicationIdentityClient.CreateIdentity");
            scope.Start();
            try
            {
                return RestClient.CreateIdentity(createTokenWithScopes, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the identity, revoke all tokens for the identity and delete all associated data. </summary>
        /// <param name="id"> Identifier of the identity to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteIdentityAsync(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("InternalCommunicationIdentityClient.DeleteIdentity");
            scope.Start();
            try
            {
                return await RestClient.DeleteIdentityAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the identity, revoke all tokens for the identity and delete all associated data. </summary>
        /// <param name="id"> Identifier of the identity to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteIdentity(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("InternalCommunicationIdentityClient.DeleteIdentity");
            scope.Start();
            try
            {
                return RestClient.DeleteIdentity(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Revoke all access tokens for the specific identity. </summary>
        /// <param name="id"> Identifier of the identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RevokeAccessTokensAsync(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("InternalCommunicationIdentityClient.RevokeAccessTokens");
            scope.Start();
            try
            {
                return await RestClient.RevokeAccessTokensAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Revoke all access tokens for the specific identity. </summary>
        /// <param name="id"> Identifier of the identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RevokeAccessTokens(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("InternalCommunicationIdentityClient.RevokeAccessTokens");
            scope.Start();
            try
            {
                return RestClient.RevokeAccessTokens(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Issue a new token for an identity. </summary>
        /// <param name="id"> Identifier of the identity to issue token for. </param>
        /// <param name="scopes"> List of scopes attached to the token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CommunicationIdentityAccessToken>> IssueAccessTokenAsync(string id, IEnumerable<CommunicationIdentityTokenScope> scopes, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("InternalCommunicationIdentityClient.IssueAccessToken");
            scope.Start();
            try
            {
                return await RestClient.IssueAccessTokenAsync(id, scopes, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Issue a new token for an identity. </summary>
        /// <param name="id"> Identifier of the identity to issue token for. </param>
        /// <param name="scopes"> List of scopes attached to the token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CommunicationIdentityAccessToken> IssueAccessToken(string id, IEnumerable<CommunicationIdentityTokenScope> scopes, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("InternalCommunicationIdentityClient.IssueAccessToken");
            scope.Start();
            try
            {
                return RestClient.IssueAccessToken(id, scopes, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
