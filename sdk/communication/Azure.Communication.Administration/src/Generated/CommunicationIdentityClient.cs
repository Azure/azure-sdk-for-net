// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Communication.Administration.Models;
using Azure.Core.Pipeline;

namespace Azure.Communication.Administration
{
    /// <summary> The CommunicationIdentity service client. </summary>
    public partial class CommunicationIdentityClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal CommunicationIdentityRestClient RestClient { get; }
        /// <summary> Initializes a new instance of CommunicationIdentityClient for mocking. </summary>
        protected CommunicationIdentityClient()
        {
        }
        /// <summary> Initializes a new instance of CommunicationIdentityClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        internal CommunicationIdentityClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint)
        {
            RestClient = new CommunicationIdentityRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Create a new identity. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CommunicationIdentity>> CreateAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CommunicationIdentityClient.Create");
            scope.Start();
            try
            {
                return await RestClient.CreateAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new identity. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CommunicationIdentity> Create(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CommunicationIdentityClient.Create");
            scope.Start();
            try
            {
                return RestClient.Create(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the identity, revoke all tokens of the identity and delete all associated data. </summary>
        /// <param name="id"> Identifier of the identity to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CommunicationIdentityClient.Delete");
            scope.Start();
            try
            {
                return await RestClient.DeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the identity, revoke all tokens of the identity and delete all associated data. </summary>
        /// <param name="id"> Identifier of the identity to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CommunicationIdentityClient.Delete");
            scope.Start();
            try
            {
                return RestClient.Delete(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an Identity. </summary>
        /// <param name="id"> Identifier of the identity. </param>
        /// <param name="tokensValidFrom"> All tokens that are issued prior to this time will be revoked. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateAsync(string id, DateTimeOffset? tokensValidFrom = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CommunicationIdentityClient.Update");
            scope.Start();
            try
            {
                return await RestClient.UpdateAsync(id, tokensValidFrom, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an Identity. </summary>
        /// <param name="id"> Identifier of the identity. </param>
        /// <param name="tokensValidFrom"> All tokens that are issued prior to this time will be revoked. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Update(string id, DateTimeOffset? tokensValidFrom = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CommunicationIdentityClient.Update");
            scope.Start();
            try
            {
                return RestClient.Update(id, tokensValidFrom, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generate a new token for an identity. </summary>
        /// <param name="id"> Identifier of the identity to issue token for. </param>
        /// <param name="scopes"> List of scopes attached to the token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CommunicationUserToken>> IssueTokenAsync(string id, IEnumerable<string> scopes, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CommunicationIdentityClient.IssueToken");
            scope.Start();
            try
            {
                return await RestClient.IssueTokenAsync(id, scopes, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generate a new token for an identity. </summary>
        /// <param name="id"> Identifier of the identity to issue token for. </param>
        /// <param name="scopes"> List of scopes attached to the token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CommunicationUserToken> IssueToken(string id, IEnumerable<string> scopes, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CommunicationIdentityClient.IssueToken");
            scope.Start();
            try
            {
                return RestClient.IssueToken(id, scopes, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
