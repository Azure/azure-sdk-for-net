// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Administration.Models
{
    /// <summary> Kind of the operation. </summary>
    public readonly partial struct OperationKind : IEquatable<OperationKind>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="OperationKind"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OperationKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SearchValue = "search";
        private const string PurchaseValue = "purchase";
        private const string ReleasePhoneNumberValue = "releasePhoneNumber";
        private const string UpdatePhoneNumberCapabilitiesValue = "updatePhoneNumberCapabilities";

        /// <summary> search. </summary>
        public static OperationKind Search { get; } = new OperationKind(SearchValue);
        /// <summary> purchase. </summary>
        public static OperationKind Purchase { get; } = new OperationKind(PurchaseValue);
        /// <summary> releasePhoneNumber. </summary>
        public static OperationKind ReleasePhoneNumber { get; } = new OperationKind(ReleasePhoneNumberValue);
        /// <summary> updatePhoneNumberCapabilities. </summary>
        public static OperationKind UpdatePhoneNumberCapabilities { get; } = new OperationKind(UpdatePhoneNumberCapabilitiesValue);
        /// <summary> Determines if two <see cref="OperationKind"/> values are the same. </summary>
        public static bool operator ==(OperationKind left, OperationKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OperationKind"/> values are not the same. </summary>
        public static bool operator !=(OperationKind left, OperationKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OperationKind"/>. </summary>
        public static implicit operator OperationKind(string value) => new OperationKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OperationKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OperationKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
