// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.Administration.Models
{
    public partial class NumberUpdateCapabilities : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Add))
            {
                writer.WritePropertyName("add");
                writer.WriteStartArray();
                foreach (var item in Add)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Remove))
            {
                writer.WritePropertyName("remove");
                writer.WriteStartArray();
                foreach (var item in Remove)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static NumberUpdateCapabilities DeserializeNumberUpdateCapabilities(JsonElement element)
        {
            Optional<IList<Capability>> @add = default;
            Optional<IList<Capability>> @remove = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("add"))
                {
                    List<Capability> array = new List<Capability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new Capability(item.GetString()));
                    }
                    @add = array;
                    continue;
                }
                if (property.NameEquals("remove"))
                {
                    List<Capability> array = new List<Capability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new Capability(item.GetString()));
                    }
                    @remove = array;
                    continue;
                }
            }
            return new NumberUpdateCapabilities(Optional.ToList(@add), Optional.ToList(@remove));
        }
    }
}
