// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Administration.Models
{
    /// <summary> The status of the search. </summary>
    public readonly partial struct SearchStatus : IEquatable<SearchStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="SearchStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SearchStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string InProgressValue = "InProgress";
        private const string ReservedValue = "Reserved";
        private const string ExpiredValue = "Expired";
        private const string ExpiringValue = "Expiring";
        private const string CompletingValue = "Completing";
        private const string RefreshingValue = "Refreshing";
        private const string SuccessValue = "Success";
        private const string ManualValue = "Manual";
        private const string CancelledValue = "Cancelled";
        private const string CancellingValue = "Cancelling";
        private const string ErrorValue = "Error";
        private const string PurchasePendingValue = "PurchasePending";

        /// <summary> Pending. </summary>
        public static SearchStatus Pending { get; } = new SearchStatus(PendingValue);
        /// <summary> InProgress. </summary>
        public static SearchStatus InProgress { get; } = new SearchStatus(InProgressValue);
        /// <summary> Reserved. </summary>
        public static SearchStatus Reserved { get; } = new SearchStatus(ReservedValue);
        /// <summary> Expired. </summary>
        public static SearchStatus Expired { get; } = new SearchStatus(ExpiredValue);
        /// <summary> Expiring. </summary>
        public static SearchStatus Expiring { get; } = new SearchStatus(ExpiringValue);
        /// <summary> Completing. </summary>
        public static SearchStatus Completing { get; } = new SearchStatus(CompletingValue);
        /// <summary> Refreshing. </summary>
        public static SearchStatus Refreshing { get; } = new SearchStatus(RefreshingValue);
        /// <summary> Success. </summary>
        public static SearchStatus Success { get; } = new SearchStatus(SuccessValue);
        /// <summary> Manual. </summary>
        public static SearchStatus Manual { get; } = new SearchStatus(ManualValue);
        /// <summary> Cancelled. </summary>
        public static SearchStatus Cancelled { get; } = new SearchStatus(CancelledValue);
        /// <summary> Cancelling. </summary>
        public static SearchStatus Cancelling { get; } = new SearchStatus(CancellingValue);
        /// <summary> Error. </summary>
        public static SearchStatus Error { get; } = new SearchStatus(ErrorValue);
        /// <summary> PurchasePending. </summary>
        public static SearchStatus PurchasePending { get; } = new SearchStatus(PurchasePendingValue);
        /// <summary> Determines if two <see cref="SearchStatus"/> values are the same. </summary>
        public static bool operator ==(SearchStatus left, SearchStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SearchStatus"/> values are not the same. </summary>
        public static bool operator !=(SearchStatus left, SearchStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SearchStatus"/>. </summary>
        public static implicit operator SearchStatus(string value) => new SearchStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SearchStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SearchStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
