// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Administration.Models
{
    /// <summary> Status of the capabilities update. </summary>
    public readonly partial struct CapabilitiesUpdateStatus : IEquatable<CapabilitiesUpdateStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="CapabilitiesUpdateStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CapabilitiesUpdateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string InProgressValue = "InProgress";
        private const string CompleteValue = "Complete";
        private const string ErrorValue = "Error";

        /// <summary> Pending. </summary>
        public static CapabilitiesUpdateStatus Pending { get; } = new CapabilitiesUpdateStatus(PendingValue);
        /// <summary> InProgress. </summary>
        public static CapabilitiesUpdateStatus InProgress { get; } = new CapabilitiesUpdateStatus(InProgressValue);
        /// <summary> Complete. </summary>
        public static CapabilitiesUpdateStatus Complete { get; } = new CapabilitiesUpdateStatus(CompleteValue);
        /// <summary> Error. </summary>
        public static CapabilitiesUpdateStatus Error { get; } = new CapabilitiesUpdateStatus(ErrorValue);
        /// <summary> Determines if two <see cref="CapabilitiesUpdateStatus"/> values are the same. </summary>
        public static bool operator ==(CapabilitiesUpdateStatus left, CapabilitiesUpdateStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CapabilitiesUpdateStatus"/> values are not the same. </summary>
        public static bool operator !=(CapabilitiesUpdateStatus left, CapabilitiesUpdateStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CapabilitiesUpdateStatus"/>. </summary>
        public static implicit operator CapabilitiesUpdateStatus(string value) => new CapabilitiesUpdateStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CapabilitiesUpdateStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CapabilitiesUpdateStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
