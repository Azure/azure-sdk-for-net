// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Communication.Administration.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.Administration
{
    /// <summary> The PhoneNumberAdministration service client. </summary>
    public partial class PhoneNumberAdministrationClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PhoneNumberAdministrationRestClient RestClient { get; }
        /// <summary> Initializes a new instance of PhoneNumberAdministrationClient for mocking. </summary>
        protected PhoneNumberAdministrationClient()
        {
        }
        /// <summary> Initializes a new instance of PhoneNumberAdministrationClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        internal PhoneNumberAdministrationClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint)
        {
            RestClient = new PhoneNumberAdministrationRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets a list of the supported area codes. </summary>
        /// <param name="locationType"> The type of location information required by the plan. </param>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanId"> The plan id from which to search area codes. </param>
        /// <param name="locationOptions"> Represents the underlying list of countries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AreaCodes>> GetAllAreaCodesAsync(string locationType, string countryCode, string phonePlanId, IEnumerable<LocationOptionsQuery> locationOptions = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllAreaCodes");
            scope.Start();
            try
            {
                return await RestClient.GetAllAreaCodesAsync(locationType, countryCode, phonePlanId, locationOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of the supported area codes. </summary>
        /// <param name="locationType"> The type of location information required by the plan. </param>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanId"> The plan id from which to search area codes. </param>
        /// <param name="locationOptions"> Represents the underlying list of countries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AreaCodes> GetAllAreaCodes(string locationType, string countryCode, string phonePlanId, IEnumerable<LocationOptionsQuery> locationOptions = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllAreaCodes");
            scope.Start();
            try
            {
                return RestClient.GetAllAreaCodes(locationType, countryCode, phonePlanId, locationOptions, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get capabilities by capabilities update id. </summary>
        /// <param name="capabilitiesUpdateId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UpdatePhoneNumberCapabilitiesResponse>> GetCapabilitiesUpdateAsync(string capabilitiesUpdateId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetCapabilitiesUpdate");
            scope.Start();
            try
            {
                return await RestClient.GetCapabilitiesUpdateAsync(capabilitiesUpdateId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get capabilities by capabilities update id. </summary>
        /// <param name="capabilitiesUpdateId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UpdatePhoneNumberCapabilitiesResponse> GetCapabilitiesUpdate(string capabilitiesUpdateId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetCapabilitiesUpdate");
            scope.Start();
            try
            {
                return RestClient.GetCapabilitiesUpdate(capabilitiesUpdateId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds or removes phone number capabilities. </summary>
        /// <param name="phoneNumberCapabilitiesUpdate"> The map of phone numbers to the capabilities update applied to the phone number. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UpdateNumberCapabilitiesResponse>> UpdateCapabilitiesAsync(IDictionary<string, NumberUpdateCapabilities> phoneNumberCapabilitiesUpdate, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.UpdateCapabilities");
            scope.Start();
            try
            {
                return await RestClient.UpdateCapabilitiesAsync(phoneNumberCapabilitiesUpdate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds or removes phone number capabilities. </summary>
        /// <param name="phoneNumberCapabilitiesUpdate"> The map of phone numbers to the capabilities update applied to the phone number. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UpdateNumberCapabilitiesResponse> UpdateCapabilities(IDictionary<string, NumberUpdateCapabilities> phoneNumberCapabilitiesUpdate, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.UpdateCapabilities");
            scope.Start();
            try
            {
                return RestClient.UpdateCapabilities(phoneNumberCapabilitiesUpdate, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Endpoint for getting number configurations. </summary>
        /// <param name="phoneNumber"> The phone number in the E.164 format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NumberConfigurationResponse>> GetNumberConfigurationAsync(string phoneNumber, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetNumberConfiguration");
            scope.Start();
            try
            {
                return await RestClient.GetNumberConfigurationAsync(phoneNumber, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Endpoint for getting number configurations. </summary>
        /// <param name="phoneNumber"> The phone number in the E.164 format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NumberConfigurationResponse> GetNumberConfiguration(string phoneNumber, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetNumberConfiguration");
            scope.Start();
            try
            {
                return RestClient.GetNumberConfiguration(phoneNumber, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Endpoint for configuring a pstn number. </summary>
        /// <param name="pstnConfiguration"> Definition for pstn number configuration. </param>
        /// <param name="phoneNumber"> The phone number to configure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ConfigureNumberAsync(PstnConfiguration pstnConfiguration, string phoneNumber, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.ConfigureNumber");
            scope.Start();
            try
            {
                return await RestClient.ConfigureNumberAsync(pstnConfiguration, phoneNumber, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Endpoint for configuring a pstn number. </summary>
        /// <param name="pstnConfiguration"> Definition for pstn number configuration. </param>
        /// <param name="phoneNumber"> The phone number to configure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ConfigureNumber(PstnConfiguration pstnConfiguration, string phoneNumber, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.ConfigureNumber");
            scope.Start();
            try
            {
                return RestClient.ConfigureNumber(pstnConfiguration, phoneNumber, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Endpoint for unconfiguring a pstn number by removing the configuration. </summary>
        /// <param name="phoneNumber"> The phone number in the E.164 format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UnconfigureNumberAsync(string phoneNumber, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.UnconfigureNumber");
            scope.Start();
            try
            {
                return await RestClient.UnconfigureNumberAsync(phoneNumber, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Endpoint for unconfiguring a pstn number by removing the configuration. </summary>
        /// <param name="phoneNumber"> The phone number in the E.164 format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UnconfigureNumber(string phoneNumber, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.UnconfigureNumber");
            scope.Start();
            try
            {
                return RestClient.UnconfigureNumber(phoneNumber, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of location options for a phone plan. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanGroupId"> The String to use. </param>
        /// <param name="phonePlanId"> The String to use. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LocationOptionsResponse>> GetPhonePlanLocationOptionsAsync(string countryCode, string phonePlanGroupId, string phonePlanId, string locale = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetPhonePlanLocationOptions");
            scope.Start();
            try
            {
                return await RestClient.GetPhonePlanLocationOptionsAsync(countryCode, phonePlanGroupId, phonePlanId, locale, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of location options for a phone plan. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanGroupId"> The String to use. </param>
        /// <param name="phonePlanId"> The String to use. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LocationOptionsResponse> GetPhonePlanLocationOptions(string countryCode, string phonePlanGroupId, string phonePlanId, string locale = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetPhonePlanLocationOptions");
            scope.Start();
            try
            {
                return RestClient.GetPhonePlanLocationOptions(countryCode, phonePlanGroupId, phonePlanId, locale, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a release by a release id. </summary>
        /// <param name="releaseId"> Represents the release id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PhoneNumberRelease>> GetReleaseByIdAsync(string releaseId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetReleaseById");
            scope.Start();
            try
            {
                return await RestClient.GetReleaseByIdAsync(releaseId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a release by a release id. </summary>
        /// <param name="releaseId"> Represents the release id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PhoneNumberRelease> GetReleaseById(string releaseId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetReleaseById");
            scope.Start();
            try
            {
                return RestClient.GetReleaseById(releaseId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a release for the given phone numbers. </summary>
        /// <param name="phoneNumbers"> The list of phone numbers in the release request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ReleaseResponse>> ReleasePhoneNumbersAsync(IEnumerable<string> phoneNumbers, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.ReleasePhoneNumbers");
            scope.Start();
            try
            {
                return await RestClient.ReleasePhoneNumbersAsync(phoneNumbers, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a release for the given phone numbers. </summary>
        /// <param name="phoneNumbers"> The list of phone numbers in the release request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ReleaseResponse> ReleasePhoneNumbers(IEnumerable<string> phoneNumbers, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.ReleasePhoneNumbers");
            scope.Start();
            try
            {
                return RestClient.ReleasePhoneNumbers(phoneNumbers, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search by search id. </summary>
        /// <param name="searchId"> The search id to be searched for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PhoneNumberReservation>> GetSearchByIdAsync(string searchId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetSearchById");
            scope.Start();
            try
            {
                return await RestClient.GetSearchByIdAsync(searchId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get search by search id. </summary>
        /// <param name="searchId"> The search id to be searched for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PhoneNumberReservation> GetSearchById(string searchId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetSearchById");
            scope.Start();
            try
            {
                return RestClient.GetSearchById(searchId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancels the search. This means existing numbers in the search will be made available. </summary>
        /// <param name="searchId"> The search id to be canceled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CancelSearchAsync(string searchId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.CancelSearch");
            scope.Start();
            try
            {
                return await RestClient.CancelSearchAsync(searchId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancels the search. This means existing numbers in the search will be made available. </summary>
        /// <param name="searchId"> The search id to be canceled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CancelSearch(string searchId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.CancelSearch");
            scope.Start();
            try
            {
                return RestClient.CancelSearch(searchId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Purchases the phone number search. </summary>
        /// <param name="searchId"> The search id to be purchased. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PurchaseSearchAsync(string searchId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.PurchaseSearch");
            scope.Start();
            try
            {
                return await RestClient.PurchaseSearchAsync(searchId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Purchases the phone number search. </summary>
        /// <param name="searchId"> The search id to be purchased. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PurchaseSearch(string searchId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.PurchaseSearch");
            scope.Start();
            try
            {
                return RestClient.PurchaseSearch(searchId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the list of the acquired phone numbers. </summary>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<AcquiredPhoneNumber> GetAllPhoneNumbersAsync(string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AcquiredPhoneNumber>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllPhoneNumbers");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllPhoneNumbersAsync(locale, skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.PhoneNumbers, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AcquiredPhoneNumber>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllPhoneNumbers");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllPhoneNumbersNextPageAsync(nextLink, locale, skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.PhoneNumbers, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets the list of the acquired phone numbers. </summary>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<AcquiredPhoneNumber> GetAllPhoneNumbers(string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            Page<AcquiredPhoneNumber> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllPhoneNumbers");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllPhoneNumbers(locale, skip, take, cancellationToken);
                    return Page.FromValues(response.Value.PhoneNumbers, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AcquiredPhoneNumber> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllPhoneNumbers");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllPhoneNumbersNextPage(nextLink, locale, skip, take, cancellationToken);
                    return Page.FromValues(response.Value.PhoneNumbers, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of supported countries. </summary>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<PhoneNumberCountry> GetAllSupportedCountriesAsync(string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PhoneNumberCountry>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllSupportedCountries");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllSupportedCountriesAsync(locale, skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Countries, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PhoneNumberCountry>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllSupportedCountries");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllSupportedCountriesNextPageAsync(nextLink, locale, skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Countries, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of supported countries. </summary>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<PhoneNumberCountry> GetAllSupportedCountries(string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            Page<PhoneNumberCountry> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllSupportedCountries");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllSupportedCountries(locale, skip, take, cancellationToken);
                    return Page.FromValues(response.Value.Countries, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PhoneNumberCountry> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllSupportedCountries");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllSupportedCountriesNextPage(nextLink, locale, skip, take, cancellationToken);
                    return Page.FromValues(response.Value.Countries, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of phone plan groups for the given country. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="includeRateInformation"> The Boolean to use. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/> is null. </exception>
        public virtual AsyncPageable<PhonePlanGroup> GetPhonePlanGroupsAsync(string countryCode, string locale = null, bool? includeRateInformation = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }

            async Task<Page<PhonePlanGroup>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetPhonePlanGroups");
                scope.Start();
                try
                {
                    var response = await RestClient.GetPhonePlanGroupsAsync(countryCode, locale, includeRateInformation, skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.PhonePlanGroupsValue, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PhonePlanGroup>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetPhonePlanGroups");
                scope.Start();
                try
                {
                    var response = await RestClient.GetPhonePlanGroupsNextPageAsync(nextLink, countryCode, locale, includeRateInformation, skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.PhonePlanGroupsValue, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of phone plan groups for the given country. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="includeRateInformation"> The Boolean to use. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/> is null. </exception>
        public virtual Pageable<PhonePlanGroup> GetPhonePlanGroups(string countryCode, string locale = null, bool? includeRateInformation = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }

            Page<PhonePlanGroup> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetPhonePlanGroups");
                scope.Start();
                try
                {
                    var response = RestClient.GetPhonePlanGroups(countryCode, locale, includeRateInformation, skip, take, cancellationToken);
                    return Page.FromValues(response.Value.PhonePlanGroupsValue, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PhonePlanGroup> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetPhonePlanGroups");
                scope.Start();
                try
                {
                    var response = RestClient.GetPhonePlanGroupsNextPage(nextLink, countryCode, locale, includeRateInformation, skip, take, cancellationToken);
                    return Page.FromValues(response.Value.PhonePlanGroupsValue, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of phone plans for a phone plan group. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanGroupId"> The String to use. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/> or <paramref name="phonePlanGroupId"/> is null. </exception>
        public virtual AsyncPageable<PhonePlan> GetPhonePlansAsync(string countryCode, string phonePlanGroupId, string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }
            if (phonePlanGroupId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanGroupId));
            }

            async Task<Page<PhonePlan>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetPhonePlans");
                scope.Start();
                try
                {
                    var response = await RestClient.GetPhonePlansAsync(countryCode, phonePlanGroupId, locale, skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.PhonePlans, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PhonePlan>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetPhonePlans");
                scope.Start();
                try
                {
                    var response = await RestClient.GetPhonePlansNextPageAsync(nextLink, countryCode, phonePlanGroupId, locale, skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.PhonePlans, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of phone plans for a phone plan group. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanGroupId"> The String to use. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/> or <paramref name="phonePlanGroupId"/> is null. </exception>
        public virtual Pageable<PhonePlan> GetPhonePlans(string countryCode, string phonePlanGroupId, string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }
            if (phonePlanGroupId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanGroupId));
            }

            Page<PhonePlan> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetPhonePlans");
                scope.Start();
                try
                {
                    var response = RestClient.GetPhonePlans(countryCode, phonePlanGroupId, locale, skip, take, cancellationToken);
                    return Page.FromValues(response.Value.PhonePlans, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PhonePlan> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetPhonePlans");
                scope.Start();
                try
                {
                    var response = RestClient.GetPhonePlansNextPage(nextLink, countryCode, phonePlanGroupId, locale, skip, take, cancellationToken);
                    return Page.FromValues(response.Value.PhonePlans, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of all releases. </summary>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<PhoneNumberEntity> GetAllReleasesAsync(int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PhoneNumberEntity>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllReleases");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllReleasesAsync(skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Entities, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PhoneNumberEntity>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllReleases");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllReleasesNextPageAsync(nextLink, skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Entities, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of all releases. </summary>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<PhoneNumberEntity> GetAllReleases(int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            Page<PhoneNumberEntity> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllReleases");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllReleases(skip, take, cancellationToken);
                    return Page.FromValues(response.Value.Entities, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PhoneNumberEntity> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllReleases");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllReleasesNextPage(nextLink, skip, take, cancellationToken);
                    return Page.FromValues(response.Value.Entities, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of all searches. </summary>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<PhoneNumberEntity> GetAllSearchesAsync(int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PhoneNumberEntity>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllSearches");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllSearchesAsync(skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Entities, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PhoneNumberEntity>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllSearches");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllSearchesNextPageAsync(nextLink, skip, take, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Entities, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of all searches. </summary>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<PhoneNumberEntity> GetAllSearches(int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            Page<PhoneNumberEntity> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllSearches");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllSearches(skip, take, cancellationToken);
                    return Page.FromValues(response.Value.Entities, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PhoneNumberEntity> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.GetAllSearches");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllSearchesNextPage(nextLink, skip, take, cancellationToken);
                    return Page.FromValues(response.Value.Entities, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Creates a phone number search. </summary>
        /// <param name="body"> Defines the search options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<PhoneNumberAdministrationCreateSearchOperation> StartCreateSearchAsync(CreateReservationOptions body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.StartCreateSearch");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateSearchAsync(body, cancellationToken).ConfigureAwait(false);
                return new PhoneNumberAdministrationCreateSearchOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateSearchRequest(body).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a phone number search. </summary>
        /// <param name="body"> Defines the search options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual PhoneNumberAdministrationCreateSearchOperation StartCreateSearch(CreateReservationOptions body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PhoneNumberAdministrationClient.StartCreateSearch");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateSearch(body, cancellationToken);
                return new PhoneNumberAdministrationCreateSearchOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateSearchRequest(body).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
