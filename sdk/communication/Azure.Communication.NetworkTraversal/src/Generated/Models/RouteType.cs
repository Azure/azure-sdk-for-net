// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.NetworkTraversal
{
    /// <summary> The routing methodology to where the ICE server will be located from the client. "any" will have higher reliability while "nearest" will have lower latency. It is recommended to default to use the "any" routing method unless there are specific scenarios which minimizing latency is critical. </summary>
    public readonly partial struct RouteType : IEquatable<RouteType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RouteType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RouteType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AnyValue = "any";
        private const string NearestValue = "nearest";

        /// <summary> any. </summary>
        public static RouteType Any { get; } = new RouteType(AnyValue);
        /// <summary> nearest. </summary>
        public static RouteType Nearest { get; } = new RouteType(NearestValue);
        /// <summary> Determines if two <see cref="RouteType"/> values are the same. </summary>
        public static bool operator ==(RouteType left, RouteType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RouteType"/> values are not the same. </summary>
        public static bool operator !=(RouteType left, RouteType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RouteType"/>. </summary>
        public static implicit operator RouteType(string value) => new RouteType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RouteType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RouteType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
