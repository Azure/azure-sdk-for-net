// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Communication.Models
{
    /// <summary> Status of the verification operation. </summary>
    public readonly partial struct VerificationStatus : IEquatable<VerificationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VerificationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VerificationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string VerificationRequestedValue = "VerificationRequested";
        private const string VerificationInProgressValue = "VerificationInProgress";
        private const string VerificationFailedValue = "VerificationFailed";
        private const string VerifiedValue = "Verified";
        private const string CancellationRequestedValue = "CancellationRequested";

        /// <summary> NotStarted. </summary>
        public static VerificationStatus NotStarted { get; } = new VerificationStatus(NotStartedValue);
        /// <summary> VerificationRequested. </summary>
        public static VerificationStatus VerificationRequested { get; } = new VerificationStatus(VerificationRequestedValue);
        /// <summary> VerificationInProgress. </summary>
        public static VerificationStatus VerificationInProgress { get; } = new VerificationStatus(VerificationInProgressValue);
        /// <summary> VerificationFailed. </summary>
        public static VerificationStatus VerificationFailed { get; } = new VerificationStatus(VerificationFailedValue);
        /// <summary> Verified. </summary>
        public static VerificationStatus Verified { get; } = new VerificationStatus(VerifiedValue);
        /// <summary> CancellationRequested. </summary>
        public static VerificationStatus CancellationRequested { get; } = new VerificationStatus(CancellationRequestedValue);
        /// <summary> Determines if two <see cref="VerificationStatus"/> values are the same. </summary>
        public static bool operator ==(VerificationStatus left, VerificationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VerificationStatus"/> values are not the same. </summary>
        public static bool operator !=(VerificationStatus left, VerificationStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VerificationStatus"/>. </summary>
        public static implicit operator VerificationStatus(string value) => new VerificationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VerificationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VerificationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
