// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Communication.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Communication
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Communication. </summary>
    public static partial class CommunicationExtensions
    {
        private static SubscriptionExtensionClient GetExtensionClient(Subscription subscription)
        {
            return subscription.GetCachedClient((client) =>
            {
                return new SubscriptionExtensionClient(client, subscription.Id);
            }
            );
        }

        /// <summary>
        /// Checks that the CommunicationService name is valid and is not already in use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Communication/checkNameAvailability
        /// Operation Id: CommunicationService_CheckNameAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="nameAvailabilityParameters"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static async Task<Response<NameAvailability>> CheckCommunicationNameAvailabilityAsync(this Subscription subscription, NameAvailabilityOptions nameAvailabilityParameters = null, CancellationToken cancellationToken = default)
        {
            return await GetExtensionClient(subscription).CheckCommunicationNameAvailabilityAsync(nameAvailabilityParameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks that the CommunicationService name is valid and is not already in use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Communication/checkNameAvailability
        /// Operation Id: CommunicationService_CheckNameAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="nameAvailabilityParameters"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static Response<NameAvailability> CheckCommunicationNameAvailability(this Subscription subscription, NameAvailabilityOptions nameAvailabilityParameters = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).CheckCommunicationNameAvailability(nameAvailabilityParameters, cancellationToken);
        }

        /// <summary>
        /// Handles requests to list all resources in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Communication/communicationServices
        /// Operation Id: CommunicationService_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CommunicationService" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CommunicationService> GetCommunicationServicesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetCommunicationServicesAsync(cancellationToken);
        }

        /// <summary>
        /// Handles requests to list all resources in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Communication/communicationServices
        /// Operation Id: CommunicationService_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CommunicationService" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CommunicationService> GetCommunicationServices(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetCommunicationServices(cancellationToken);
        }

        private static ResourceGroupExtensionClient GetExtensionClient(ResourceGroup resourceGroup)
        {
            return resourceGroup.GetCachedClient((client) =>
            {
                return new ResourceGroupExtensionClient(client, resourceGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of CommunicationServices in the CommunicationService. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of CommunicationServices and their operations over a CommunicationService. </returns>
        public static CommunicationServiceCollection GetCommunicationServices(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetCommunicationServices();
        }

        /// <summary>
        /// Get the CommunicationService and its properties.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}
        /// Operation Id: CommunicationService_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="communicationServiceName"> The name of the CommunicationService resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communicationServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communicationServiceName"/> is null. </exception>
        public static async Task<Response<CommunicationService>> GetCommunicationServiceAsync(this ResourceGroup resourceGroup, string communicationServiceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetCommunicationServices().GetAsync(communicationServiceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the CommunicationService and its properties.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}
        /// Operation Id: CommunicationService_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="communicationServiceName"> The name of the CommunicationService resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communicationServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communicationServiceName"/> is null. </exception>
        public static Response<CommunicationService> GetCommunicationService(this ResourceGroup resourceGroup, string communicationServiceName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetCommunicationServices().Get(communicationServiceName, cancellationToken);
        }

        #region CommunicationService
        /// <summary>
        /// Gets an object representing a <see cref="CommunicationService" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CommunicationService.CreateResourceIdentifier" /> to create a <see cref="CommunicationService" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CommunicationService" /> object. </returns>
        public static CommunicationService GetCommunicationService(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CommunicationService.ValidateResourceId(id);
                return new CommunicationService(client, id);
            }
            );
        }
        #endregion
    }
}
