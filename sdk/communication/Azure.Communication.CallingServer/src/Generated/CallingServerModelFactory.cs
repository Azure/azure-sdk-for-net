// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Communication.CallingServer
{
    /// <summary> Model factory for read-only models. </summary>
    internal static partial class CallingServerModelFactory
    {
        /// <summary> Initializes new instance of CreateCallResult class. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <returns> A new <see cref="CallingServer.CreateCallResult"/> instance for mocking. </returns>
        public static CreateCallResult CreateCallResult(string callConnectionId = default)
        {
            return new CreateCallResult(callConnectionId);
        }

        /// <summary> Initializes new instance of PlayAudioResult class. </summary>
        /// <param name="id"> Gets or sets the identifier. </param>
        /// <param name="status"> Gets or sets the status of the operation. </param>
        /// <param name="operationContext"> Gets or sets the operation context. </param>
        /// <param name="resultInfo"> Gets or sets the result info. </param>
        /// <returns> A new <see cref="CallingServer.PlayAudioResult"/> instance for mocking. </returns>
        public static PlayAudioResult PlayAudioResult(string id = default, OperationStatus? status = default, string operationContext = default, ResultInfo resultInfo = default)
        {
            return new PlayAudioResult(id, status, operationContext, resultInfo);
        }

        /// <summary> Initializes new instance of ResultInfo class. </summary>
        /// <param name="code">
        /// Gets or sets the result code
        /// 
        /// For synchronous failures, this maps one-to-one with HTTP responses. For asynchronous failures or messages, it is contextual.
        /// </param>
        /// <param name="subcode">
        /// Gets or sets the result subcode.
        /// 
        /// The subcode further classifies a failure. For example.
        /// </param>
        /// <param name="message">
        /// Gets or sets the message
        /// 
        /// The message is a detail explanation of subcode.
        /// </param>
        /// <returns> A new <see cref="CallingServer.ResultInfo"/> instance for mocking. </returns>
        public static ResultInfo ResultInfo(int? code = default, int? subcode = default, string message = default)
        {
            return new ResultInfo(code, subcode, message);
        }

        /// <summary> Initializes new instance of CancelAllMediaOperationsResult class. </summary>
        /// <param name="id"> Gets or sets the identifier. </param>
        /// <param name="status"> Gets or sets the status of the operation. </param>
        /// <param name="operationContext"> Gets or sets the operation context. </param>
        /// <param name="resultInfo"> Gets or sets the result info. </param>
        /// <returns> A new <see cref="CallingServer.CancelAllMediaOperationsResult"/> instance for mocking. </returns>
        public static CancelAllMediaOperationsResult CancelAllMediaOperationsResult(string id = default, OperationStatus? status = default, string operationContext = default, ResultInfo resultInfo = default)
        {
            return new CancelAllMediaOperationsResult(id, status, operationContext, resultInfo);
        }

        /// <summary> Initializes new instance of StartCallRecordingResult class. </summary>
        /// <param name="recordingId"> The recording id of the started recording. </param>
        /// <returns> A new <see cref="CallingServer.StartCallRecordingResult"/> instance for mocking. </returns>
        public static StartCallRecordingResult StartCallRecordingResult(string recordingId = default)
        {
            return new StartCallRecordingResult(recordingId);
        }

        /// <summary> Initializes new instance of CallRecordingStateResult class. </summary>
        /// <param name="recordingState"> The recording state of the recording. </param>
        /// <returns> A new <see cref="CallingServer.CallRecordingStateResult"/> instance for mocking. </returns>
        public static CallRecordingStateResult CallRecordingStateResult(CallRecordingState? recordingState = default)
        {
            return new CallRecordingStateResult(recordingState);
        }

        /// <summary> Initializes new instance of JoinCallResult class. </summary>
        /// <param name="callConnectionId"> The call connection id. </param>
        /// <returns> A new <see cref="CallingServer.JoinCallResult"/> instance for mocking. </returns>
        public static JoinCallResult JoinCallResult(string callConnectionId = default)
        {
            return new JoinCallResult(callConnectionId);
        }
    }
}
