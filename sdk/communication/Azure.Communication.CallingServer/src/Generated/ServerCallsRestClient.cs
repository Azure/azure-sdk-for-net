// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Communication;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.CallingServer
{
    internal partial class ServerCallsRestClient
    {
        private string endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ServerCallsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public ServerCallsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string apiVersion = "2021-11-15-preview")
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetParticipantsRequest(CallLocatorModel callLocator)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants:getAll", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new GetAllParticipantsWithCallLocatorRequest(callLocator);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Get participants from a server call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> is null. </exception>
        public async Task<Response<IReadOnlyList<CallParticipantInternal>>> GetParticipantsAsync(CallLocatorModel callLocator, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }

            using var message = CreateGetParticipantsRequest(callLocator);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<CallParticipantInternal> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<CallParticipantInternal> array = new List<CallParticipantInternal>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(CallParticipantInternal.DeserializeCallParticipantInternal(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get participants from a server call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> is null. </exception>
        public Response<IReadOnlyList<CallParticipantInternal>> GetParticipants(CallLocatorModel callLocator, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }

            using var message = CreateGetParticipantsRequest(callLocator);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<CallParticipantInternal> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<CallParticipantInternal> array = new List<CallParticipantInternal>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(CallParticipantInternal.DeserializeCallParticipantInternal(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddParticipantRequest(CallLocatorModel callLocator, AddParticipantRequestInternal addParticipantRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new AddParticipantWithCallLocatorRequest(callLocator, addParticipantRequest);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Add a participant to the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="addParticipantRequest"> The add participant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="addParticipantRequest"/> is null. </exception>
        public async Task<Response<AddParticipantResult>> AddParticipantAsync(CallLocatorModel callLocator, AddParticipantRequestInternal addParticipantRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (addParticipantRequest == null)
            {
                throw new ArgumentNullException(nameof(addParticipantRequest));
            }

            using var message = CreateAddParticipantRequest(callLocator, addParticipantRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        AddParticipantResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AddParticipantResult.DeserializeAddParticipantResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a participant to the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="addParticipantRequest"> The add participant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="addParticipantRequest"/> is null. </exception>
        public Response<AddParticipantResult> AddParticipant(CallLocatorModel callLocator, AddParticipantRequestInternal addParticipantRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (addParticipantRequest == null)
            {
                throw new ArgumentNullException(nameof(addParticipantRequest));
            }

            using var message = CreateAddParticipantRequest(callLocator, addParticipantRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        AddParticipantResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AddParticipantResult.DeserializeAddParticipantResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveParticipantRequest(CallLocatorModel callLocator, RemoveParticipantRequestInternal removeParticipantRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants:remove", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new RemoveParticipantWithCallLocatorRequest(callLocator, removeParticipantRequest);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Remove participant from the call using identifier. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="removeParticipantRequest"> The remove participant by identifier request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="removeParticipantRequest"/> is null. </exception>
        public async Task<Response> RemoveParticipantAsync(CallLocatorModel callLocator, RemoveParticipantRequestInternal removeParticipantRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (removeParticipantRequest == null)
            {
                throw new ArgumentNullException(nameof(removeParticipantRequest));
            }

            using var message = CreateRemoveParticipantRequest(callLocator, removeParticipantRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove participant from the call using identifier. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="removeParticipantRequest"> The remove participant by identifier request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="removeParticipantRequest"/> is null. </exception>
        public Response RemoveParticipant(CallLocatorModel callLocator, RemoveParticipantRequestInternal removeParticipantRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (removeParticipantRequest == null)
            {
                throw new ArgumentNullException(nameof(removeParticipantRequest));
            }

            using var message = CreateRemoveParticipantRequest(callLocator, removeParticipantRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetParticipantRequest(CallLocatorModel callLocator, GetParticipantRequestInternal getParticipantRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants:get", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new GetParticipantWithCallLocatorRequest(callLocator, getParticipantRequest);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Get participant from the call using identifier. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="getParticipantRequest"> The get participant by identifier request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="getParticipantRequest"/> is null. </exception>
        public async Task<Response<IReadOnlyList<CallParticipantInternal>>> GetParticipantAsync(CallLocatorModel callLocator, GetParticipantRequestInternal getParticipantRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (getParticipantRequest == null)
            {
                throw new ArgumentNullException(nameof(getParticipantRequest));
            }

            using var message = CreateGetParticipantRequest(callLocator, getParticipantRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<CallParticipantInternal> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<CallParticipantInternal> array = new List<CallParticipantInternal>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(CallParticipantInternal.DeserializeCallParticipantInternal(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get participant from the call using identifier. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="getParticipantRequest"> The get participant by identifier request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="getParticipantRequest"/> is null. </exception>
        public Response<IReadOnlyList<CallParticipantInternal>> GetParticipant(CallLocatorModel callLocator, GetParticipantRequestInternal getParticipantRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (getParticipantRequest == null)
            {
                throw new ArgumentNullException(nameof(getParticipantRequest));
            }

            using var message = CreateGetParticipantRequest(callLocator, getParticipantRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<CallParticipantInternal> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<CallParticipantInternal> array = new List<CallParticipantInternal>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(CallParticipantInternal.DeserializeCallParticipantInternal(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStartHoldMusicRequest(CallLocatorModel callLocator, StartHoldMusicRequestInternal startHoldMusicRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants:startHoldMusic", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new StartHoldMusicWithCallLocatorRequest(callLocator, startHoldMusicRequest);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Play hold music to a participant. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="startHoldMusicRequest"> The request payload for playing hold music for a participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="startHoldMusicRequest"/> is null. </exception>
        public async Task<Response<StartHoldMusicResult>> StartHoldMusicAsync(CallLocatorModel callLocator, StartHoldMusicRequestInternal startHoldMusicRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (startHoldMusicRequest == null)
            {
                throw new ArgumentNullException(nameof(startHoldMusicRequest));
            }

            using var message = CreateStartHoldMusicRequest(callLocator, startHoldMusicRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StartHoldMusicResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StartHoldMusicResult.DeserializeStartHoldMusicResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Play hold music to a participant. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="startHoldMusicRequest"> The request payload for playing hold music for a participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="startHoldMusicRequest"/> is null. </exception>
        public Response<StartHoldMusicResult> StartHoldMusic(CallLocatorModel callLocator, StartHoldMusicRequestInternal startHoldMusicRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (startHoldMusicRequest == null)
            {
                throw new ArgumentNullException(nameof(startHoldMusicRequest));
            }

            using var message = CreateStartHoldMusicRequest(callLocator, startHoldMusicRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StartHoldMusicResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StartHoldMusicResult.DeserializeStartHoldMusicResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStopHoldMusicRequest(CallLocatorModel callLocator, CommunicationIdentifierModel identifier, string startHoldMusicOperationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants:stopHoldMusic", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new StopHoldMusicWithCallLocatorRequest(callLocator, identifier, startHoldMusicOperationId);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Stop hold music to a participant. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="startHoldMusicOperationId"> The operationId of the StartHoldMusicOperation to stop. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/>, <paramref name="identifier"/>, or <paramref name="startHoldMusicOperationId"/> is null. </exception>
        public async Task<Response<StopHoldMusicResult>> StopHoldMusicAsync(CallLocatorModel callLocator, CommunicationIdentifierModel identifier, string startHoldMusicOperationId, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (startHoldMusicOperationId == null)
            {
                throw new ArgumentNullException(nameof(startHoldMusicOperationId));
            }

            using var message = CreateStopHoldMusicRequest(callLocator, identifier, startHoldMusicOperationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StopHoldMusicResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StopHoldMusicResult.DeserializeStopHoldMusicResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Stop hold music to a participant. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="startHoldMusicOperationId"> The operationId of the StartHoldMusicOperation to stop. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/>, <paramref name="identifier"/>, or <paramref name="startHoldMusicOperationId"/> is null. </exception>
        public Response<StopHoldMusicResult> StopHoldMusic(CallLocatorModel callLocator, CommunicationIdentifierModel identifier, string startHoldMusicOperationId, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }
            if (startHoldMusicOperationId == null)
            {
                throw new ArgumentNullException(nameof(startHoldMusicOperationId));
            }

            using var message = CreateStopHoldMusicRequest(callLocator, identifier, startHoldMusicOperationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StopHoldMusicResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StopHoldMusicResult.DeserializeStopHoldMusicResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateParticipantPlayAudioRequest(CallLocatorModel callLocator, PlayAudioToParticipantRequestInternal playAudioToParticipantRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants:playAudio", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new PlayAudioToParticipantWithCallLocatorRequest(callLocator)
            {
                PlayAudioToParticipantRequest = playAudioToParticipantRequest
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Play audio to a participant. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="playAudioToParticipantRequest"> The play audio to participant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> is null. </exception>
        public async Task<Response<PlayAudioResult>> ParticipantPlayAudioAsync(CallLocatorModel callLocator, PlayAudioToParticipantRequestInternal playAudioToParticipantRequest = null, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }

            using var message = CreateParticipantPlayAudioRequest(callLocator, playAudioToParticipantRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PlayAudioResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PlayAudioResult.DeserializePlayAudioResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Play audio to a participant. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="playAudioToParticipantRequest"> The play audio to participant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> is null. </exception>
        public Response<PlayAudioResult> ParticipantPlayAudio(CallLocatorModel callLocator, PlayAudioToParticipantRequestInternal playAudioToParticipantRequest = null, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }

            using var message = CreateParticipantPlayAudioRequest(callLocator, playAudioToParticipantRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PlayAudioResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PlayAudioResult.DeserializePlayAudioResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCancelParticipantMediaOperationRequest(CallLocatorModel callLocator, CancelParticipantMediaOperationRequestInternal cancelParticipantMediaOperationRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants:cancelMediaOperation", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new CancelParticipantMediaOperationWithCallLocatorRequest(callLocator, cancelParticipantMediaOperationRequest);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> cancel media operation for a participant. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="cancelParticipantMediaOperationRequest"> The request payload for stopping a media operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="cancelParticipantMediaOperationRequest"/> is null. </exception>
        public async Task<Response> CancelParticipantMediaOperationAsync(CallLocatorModel callLocator, CancelParticipantMediaOperationRequestInternal cancelParticipantMediaOperationRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (cancelParticipantMediaOperationRequest == null)
            {
                throw new ArgumentNullException(nameof(cancelParticipantMediaOperationRequest));
            }

            using var message = CreateCancelParticipantMediaOperationRequest(callLocator, cancelParticipantMediaOperationRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> cancel media operation for a participant. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="cancelParticipantMediaOperationRequest"> The request payload for stopping a media operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="cancelParticipantMediaOperationRequest"/> is null. </exception>
        public Response CancelParticipantMediaOperation(CallLocatorModel callLocator, CancelParticipantMediaOperationRequestInternal cancelParticipantMediaOperationRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (cancelParticipantMediaOperationRequest == null)
            {
                throw new ArgumentNullException(nameof(cancelParticipantMediaOperationRequest));
            }

            using var message = CreateCancelParticipantMediaOperationRequest(callLocator, cancelParticipantMediaOperationRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateMuteParticipantRequest(CallLocatorModel callLocator, CommunicationIdentifierModel identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants:mute", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new MuteParticipantWithCallLocatorRequest(callLocator, identifier);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Mute participant in the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="identifier"> The identifier of the participant to be muted in the call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="identifier"/> is null. </exception>
        public async Task<Response> MuteParticipantAsync(CallLocatorModel callLocator, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateMuteParticipantRequest(callLocator, identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Mute participant in the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="identifier"> The identifier of the participant to be muted in the call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="identifier"/> is null. </exception>
        public Response MuteParticipant(CallLocatorModel callLocator, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateMuteParticipantRequest(callLocator, identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUnmuteParticipantRequest(CallLocatorModel callLocator, CommunicationIdentifierModel identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants:unmute", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new UnmuteParticipantWithCallLocatorRequest(callLocator, identifier);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Unmute participant in the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="identifier"> The identifier of the participant to be unmuted in the call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="identifier"/> is null. </exception>
        public async Task<Response> UnmuteParticipantAsync(CallLocatorModel callLocator, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateUnmuteParticipantRequest(callLocator, identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Unmute participant in the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="identifier"> The identifier of the participant to be unmuted in the call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="identifier"/> is null. </exception>
        public Response UnmuteParticipant(CallLocatorModel callLocator, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateUnmuteParticipantRequest(callLocator, identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHoldParticipantMeetingAudioRequest(CallLocatorModel callLocator, CommunicationIdentifierModel identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants:holdMeetingAudio", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new HoldMeetingAudioWithCallLocatorRequest(callLocator, identifier);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Hold meeting audio of a participant in the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="identifier"/> is null. </exception>
        public async Task<Response> HoldParticipantMeetingAudioAsync(CallLocatorModel callLocator, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateHoldParticipantMeetingAudioRequest(callLocator, identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Hold meeting audio of a participant in the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="identifier"/> is null. </exception>
        public Response HoldParticipantMeetingAudio(CallLocatorModel callLocator, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateHoldParticipantMeetingAudioRequest(callLocator, identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateResumeParticipantMeetingAudioRequest(CallLocatorModel callLocator, CommunicationIdentifierModel identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/participants:resumeMeetingAudio", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new ResumeMeetingAudioWithCallLocatorRequest(callLocator, identifier);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Resume meeting audio of a participant in the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="identifier"/> is null. </exception>
        public async Task<Response> ResumeParticipantMeetingAudioAsync(CallLocatorModel callLocator, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateResumeParticipantMeetingAudioRequest(callLocator, identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Resume meeting audio of a participant in the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="identifier"> The identifier of the participant. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="identifier"/> is null. </exception>
        public Response ResumeParticipantMeetingAudio(CallLocatorModel callLocator, CommunicationIdentifierModel identifier, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateResumeParticipantMeetingAudioRequest(callLocator, identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStartRecordingRequest(CallLocatorModel callLocator, StartCallRecordingRequest startCallRecordingRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/recordings", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new StartCallRecordingWithCallLocatorRequest(callLocator, startCallRecordingRequest);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Start recording the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="startCallRecordingRequest"> The request payload for start call recording operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="startCallRecordingRequest"/> is null. </exception>
        public async Task<Response<StartCallRecordingResult>> StartRecordingAsync(CallLocatorModel callLocator, StartCallRecordingRequest startCallRecordingRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (startCallRecordingRequest == null)
            {
                throw new ArgumentNullException(nameof(startCallRecordingRequest));
            }

            using var message = CreateStartRecordingRequest(callLocator, startCallRecordingRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StartCallRecordingResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StartCallRecordingResult.DeserializeStartCallRecordingResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start recording the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="startCallRecordingRequest"> The request payload for start call recording operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="startCallRecordingRequest"/> is null. </exception>
        public Response<StartCallRecordingResult> StartRecording(CallLocatorModel callLocator, StartCallRecordingRequest startCallRecordingRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (startCallRecordingRequest == null)
            {
                throw new ArgumentNullException(nameof(startCallRecordingRequest));
            }

            using var message = CreateStartRecordingRequest(callLocator, startCallRecordingRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StartCallRecordingResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StartCallRecordingResult.DeserializeStartCallRecordingResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRecordingPropertiesRequest(string recordingId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/recordings/", false);
            uri.AppendPath(recordingId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get call recording properties. </summary>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        public async Task<Response<CallRecordingProperties>> GetRecordingPropertiesAsync(string recordingId, CancellationToken cancellationToken = default)
        {
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateGetRecordingPropertiesRequest(recordingId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallRecordingProperties value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CallRecordingProperties.DeserializeCallRecordingProperties(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get call recording properties. </summary>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        public Response<CallRecordingProperties> GetRecordingProperties(string recordingId, CancellationToken cancellationToken = default)
        {
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateGetRecordingPropertiesRequest(recordingId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CallRecordingProperties value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CallRecordingProperties.DeserializeCallRecordingProperties(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStopRecordingRequest(string recordingId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/recordings/", false);
            uri.AppendPath(recordingId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Stop recording the call. </summary>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        public async Task<Response> StopRecordingAsync(string recordingId, CancellationToken cancellationToken = default)
        {
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateStopRecordingRequest(recordingId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Stop recording the call. </summary>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        public Response StopRecording(string recordingId, CancellationToken cancellationToken = default)
        {
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateStopRecordingRequest(recordingId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePauseRecordingRequest(string recordingId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/recordings/", false);
            uri.AppendPath(recordingId, true);
            uri.AppendPath("/:pause", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Pause recording the call. </summary>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        public async Task<Response> PauseRecordingAsync(string recordingId, CancellationToken cancellationToken = default)
        {
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreatePauseRecordingRequest(recordingId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Pause recording the call. </summary>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        public Response PauseRecording(string recordingId, CancellationToken cancellationToken = default)
        {
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreatePauseRecordingRequest(recordingId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateResumeRecordingRequest(string recordingId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/recordings/", false);
            uri.AppendPath(recordingId, true);
            uri.AppendPath("/:resume", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Resume recording the call. </summary>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        public async Task<Response> ResumeRecordingAsync(string recordingId, CancellationToken cancellationToken = default)
        {
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateResumeRecordingRequest(recordingId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Resume recording the call. </summary>
        /// <param name="recordingId"> The recording id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recordingId"/> is null. </exception>
        public Response ResumeRecording(string recordingId, CancellationToken cancellationToken = default)
        {
            if (recordingId == null)
            {
                throw new ArgumentNullException(nameof(recordingId));
            }

            using var message = CreateResumeRecordingRequest(recordingId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateJoinCallRequest(CommunicationIdentifierModel source, string callbackUri, CallLocatorModel callLocator, string subject, IEnumerable<MediaType> requestedMediaTypes, IEnumerable<EventSubscriptionType> requestedCallEvents)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling:join", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            JoinCallRequestInternal joinCallRequestInternal = new JoinCallRequestInternal(source, callbackUri)
            {
                CallLocator = callLocator,
                Subject = subject
            };
            if (requestedMediaTypes != null)
            {
                foreach (var value in requestedMediaTypes)
                {
                    joinCallRequestInternal.RequestedMediaTypes.Add(value);
                }
            }
            if (requestedCallEvents != null)
            {
                foreach (var value in requestedCallEvents)
                {
                    joinCallRequestInternal.RequestedCallEvents.Add(value);
                }
            }
            var model = joinCallRequestInternal;
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Join a call. </summary>
        /// <param name="source"> The source of the call. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="subject"> The subject. </param>
        /// <param name="requestedMediaTypes"> The requested modalities. </param>
        /// <param name="requestedCallEvents"> The requested call events to subscribe to. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="source"/> or <paramref name="callbackUri"/> is null. </exception>
        public async Task<Response<JoinCallResultInternal>> JoinCallAsync(CommunicationIdentifierModel source, string callbackUri, CallLocatorModel callLocator = null, string subject = null, IEnumerable<MediaType> requestedMediaTypes = null, IEnumerable<EventSubscriptionType> requestedCallEvents = null, CancellationToken cancellationToken = default)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }
            if (callbackUri == null)
            {
                throw new ArgumentNullException(nameof(callbackUri));
            }

            using var message = CreateJoinCallRequest(source, callbackUri, callLocator, subject, requestedMediaTypes, requestedCallEvents);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        JoinCallResultInternal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JoinCallResultInternal.DeserializeJoinCallResultInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Join a call. </summary>
        /// <param name="source"> The source of the call. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="subject"> The subject. </param>
        /// <param name="requestedMediaTypes"> The requested modalities. </param>
        /// <param name="requestedCallEvents"> The requested call events to subscribe to. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="source"/> or <paramref name="callbackUri"/> is null. </exception>
        public Response<JoinCallResultInternal> JoinCall(CommunicationIdentifierModel source, string callbackUri, CallLocatorModel callLocator = null, string subject = null, IEnumerable<MediaType> requestedMediaTypes = null, IEnumerable<EventSubscriptionType> requestedCallEvents = null, CancellationToken cancellationToken = default)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }
            if (callbackUri == null)
            {
                throw new ArgumentNullException(nameof(callbackUri));
            }

            using var message = CreateJoinCallRequest(source, callbackUri, callLocator, subject, requestedMediaTypes, requestedCallEvents);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        JoinCallResultInternal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JoinCallResultInternal.DeserializeJoinCallResultInternal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePlayAudioRequest(CallLocatorModel callLocator, PlayAudioRequest playAudioRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling:playAudio", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new PlayAudioWithCallLocatorRequest(callLocator, playAudioRequest);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Play audio in the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="playAudioRequest"> The request payload for playing audio. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="playAudioRequest"/> is null. </exception>
        public async Task<Response<PlayAudioResult>> PlayAudioAsync(CallLocatorModel callLocator, PlayAudioRequest playAudioRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (playAudioRequest == null)
            {
                throw new ArgumentNullException(nameof(playAudioRequest));
            }

            using var message = CreatePlayAudioRequest(callLocator, playAudioRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PlayAudioResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PlayAudioResult.DeserializePlayAudioResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Play audio in the call. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="playAudioRequest"> The request payload for playing audio. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="playAudioRequest"/> is null. </exception>
        public Response<PlayAudioResult> PlayAudio(CallLocatorModel callLocator, PlayAudioRequest playAudioRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (playAudioRequest == null)
            {
                throw new ArgumentNullException(nameof(playAudioRequest));
            }

            using var message = CreatePlayAudioRequest(callLocator, playAudioRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PlayAudioResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PlayAudioResult.DeserializePlayAudioResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCancelMediaOperationRequest(CallLocatorModel callLocator, CancelMediaOperationRequest cancelMediaOperationRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling:cancelMediaOperation", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new CancelMediaOperationWithCallLocatorRequest(callLocator, cancelMediaOperationRequest);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> cancel media operation. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="cancelMediaOperationRequest"> The request payload for stopping a media operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="cancelMediaOperationRequest"/> is null. </exception>
        public async Task<Response> CancelMediaOperationAsync(CallLocatorModel callLocator, CancelMediaOperationRequest cancelMediaOperationRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (cancelMediaOperationRequest == null)
            {
                throw new ArgumentNullException(nameof(cancelMediaOperationRequest));
            }

            using var message = CreateCancelMediaOperationRequest(callLocator, cancelMediaOperationRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> cancel media operation. </summary>
        /// <param name="callLocator"> The call locator. </param>
        /// <param name="cancelMediaOperationRequest"> The request payload for stopping a media operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callLocator"/> or <paramref name="cancelMediaOperationRequest"/> is null. </exception>
        public Response CancelMediaOperation(CallLocatorModel callLocator, CancelMediaOperationRequest cancelMediaOperationRequest, CancellationToken cancellationToken = default)
        {
            if (callLocator == null)
            {
                throw new ArgumentNullException(nameof(callLocator));
            }
            if (cancelMediaOperationRequest == null)
            {
                throw new ArgumentNullException(nameof(cancelMediaOperationRequest));
            }

            using var message = CreateCancelMediaOperationRequest(callLocator, cancelMediaOperationRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAnswerCallRequest(string callbackUrl, string incomingCallContext, int? participantCapacity, IEnumerable<MediaType> requestedMediaTypes, IEnumerable<EventSubscriptionType> requestedCallEvents)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling:answer", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            AnswerCallRequest answerCallRequest = new AnswerCallRequest(callbackUrl)
            {
                IncomingCallContext = incomingCallContext,
                ParticipantCapacity = participantCapacity
            };
            if (requestedMediaTypes != null)
            {
                foreach (var value in requestedMediaTypes)
                {
                    answerCallRequest.RequestedMediaTypes.Add(value);
                }
            }
            if (requestedCallEvents != null)
            {
                foreach (var value in requestedCallEvents)
                {
                    answerCallRequest.RequestedCallEvents.Add(value);
                }
            }
            var model = answerCallRequest;
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Answer the call. </summary>
        /// <param name="callbackUrl"> The callback url. </param>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="participantCapacity"> The number of participant that the application can handle for the call. </param>
        /// <param name="requestedMediaTypes"> The requested modalities. </param>
        /// <param name="requestedCallEvents"> The requested call events to subscribe to. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callbackUrl"/> is null. </exception>
        public async Task<Response<AnswerCallResult>> AnswerCallAsync(string callbackUrl, string incomingCallContext = null, int? participantCapacity = null, IEnumerable<MediaType> requestedMediaTypes = null, IEnumerable<EventSubscriptionType> requestedCallEvents = null, CancellationToken cancellationToken = default)
        {
            if (callbackUrl == null)
            {
                throw new ArgumentNullException(nameof(callbackUrl));
            }

            using var message = CreateAnswerCallRequest(callbackUrl, incomingCallContext, participantCapacity, requestedMediaTypes, requestedCallEvents);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        AnswerCallResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AnswerCallResult.DeserializeAnswerCallResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Answer the call. </summary>
        /// <param name="callbackUrl"> The callback url. </param>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="participantCapacity"> The number of participant that the application can handle for the call. </param>
        /// <param name="requestedMediaTypes"> The requested modalities. </param>
        /// <param name="requestedCallEvents"> The requested call events to subscribe to. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callbackUrl"/> is null. </exception>
        public Response<AnswerCallResult> AnswerCall(string callbackUrl, string incomingCallContext = null, int? participantCapacity = null, IEnumerable<MediaType> requestedMediaTypes = null, IEnumerable<EventSubscriptionType> requestedCallEvents = null, CancellationToken cancellationToken = default)
        {
            if (callbackUrl == null)
            {
                throw new ArgumentNullException(nameof(callbackUrl));
            }

            using var message = CreateAnswerCallRequest(callbackUrl, incomingCallContext, participantCapacity, requestedMediaTypes, requestedCallEvents);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        AnswerCallResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AnswerCallResult.DeserializeAnswerCallResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRejectCallRequest(string incomingCallContext, string callbackUrl, CallRejectReason? callRejectReason)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling:reject", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new RejectCallRequest(incomingCallContext, callbackUrl)
            {
                CallRejectReason = callRejectReason
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Reject the call. </summary>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="callbackUrl"> The callback url. </param>
        /// <param name="callRejectReason"> The rejection reason. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="incomingCallContext"/> or <paramref name="callbackUrl"/> is null. </exception>
        public async Task<Response> RejectCallAsync(string incomingCallContext, string callbackUrl, CallRejectReason? callRejectReason = null, CancellationToken cancellationToken = default)
        {
            if (incomingCallContext == null)
            {
                throw new ArgumentNullException(nameof(incomingCallContext));
            }
            if (callbackUrl == null)
            {
                throw new ArgumentNullException(nameof(callbackUrl));
            }

            using var message = CreateRejectCallRequest(incomingCallContext, callbackUrl, callRejectReason);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Reject the call. </summary>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="callbackUrl"> The callback url. </param>
        /// <param name="callRejectReason"> The rejection reason. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="incomingCallContext"/> or <paramref name="callbackUrl"/> is null. </exception>
        public Response RejectCall(string incomingCallContext, string callbackUrl, CallRejectReason? callRejectReason = null, CancellationToken cancellationToken = default)
        {
            if (incomingCallContext == null)
            {
                throw new ArgumentNullException(nameof(incomingCallContext));
            }
            if (callbackUrl == null)
            {
                throw new ArgumentNullException(nameof(callbackUrl));
            }

            using var message = CreateRejectCallRequest(incomingCallContext, callbackUrl, callRejectReason);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRedirectCallRequest(string incomingCallContext, IEnumerable<CommunicationIdentifierModel> targets, string callbackUrl, int? timeout)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling:redirect", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new RedirectCallRequest(incomingCallContext, targets.ToList(), callbackUrl)
            {
                Timeout = timeout
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Redirect the call. </summary>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="targets"> The target identity to redirect the call to. </param>
        /// <param name="callbackUrl"> The callback url. </param>
        /// <param name="timeout"> The timeout for the redirect in seconds. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="incomingCallContext"/>, <paramref name="targets"/>, or <paramref name="callbackUrl"/> is null. </exception>
        public async Task<Response> RedirectCallAsync(string incomingCallContext, IEnumerable<CommunicationIdentifierModel> targets, string callbackUrl, int? timeout = null, CancellationToken cancellationToken = default)
        {
            if (incomingCallContext == null)
            {
                throw new ArgumentNullException(nameof(incomingCallContext));
            }
            if (targets == null)
            {
                throw new ArgumentNullException(nameof(targets));
            }
            if (callbackUrl == null)
            {
                throw new ArgumentNullException(nameof(callbackUrl));
            }

            using var message = CreateRedirectCallRequest(incomingCallContext, targets, callbackUrl, timeout);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Redirect the call. </summary>
        /// <param name="incomingCallContext"> The context associated with the call. </param>
        /// <param name="targets"> The target identity to redirect the call to. </param>
        /// <param name="callbackUrl"> The callback url. </param>
        /// <param name="timeout"> The timeout for the redirect in seconds. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="incomingCallContext"/>, <paramref name="targets"/>, or <paramref name="callbackUrl"/> is null. </exception>
        public Response RedirectCall(string incomingCallContext, IEnumerable<CommunicationIdentifierModel> targets, string callbackUrl, int? timeout = null, CancellationToken cancellationToken = default)
        {
            if (incomingCallContext == null)
            {
                throw new ArgumentNullException(nameof(incomingCallContext));
            }
            if (targets == null)
            {
                throw new ArgumentNullException(nameof(targets));
            }
            if (callbackUrl == null)
            {
                throw new ArgumentNullException(nameof(callbackUrl));
            }

            using var message = CreateRedirectCallRequest(incomingCallContext, targets, callbackUrl, timeout);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
