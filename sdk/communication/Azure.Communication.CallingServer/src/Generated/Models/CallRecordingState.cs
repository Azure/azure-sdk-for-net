// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.CallingServer
{
    /// <summary> The state of the recording. </summary>
    public readonly partial struct CallRecordingState : IEquatable<CallRecordingState>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="CallRecordingState"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CallRecordingState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "active";
        private const string InactiveValue = "inactive";

        /// <summary> active. </summary>
        public static CallRecordingState Active { get; } = new CallRecordingState(ActiveValue);
        /// <summary> inactive. </summary>
        public static CallRecordingState Inactive { get; } = new CallRecordingState(InactiveValue);
        /// <summary> Determines if two <see cref="CallRecordingState"/> values are the same. </summary>
        public static bool operator ==(CallRecordingState left, CallRecordingState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CallRecordingState"/> values are not the same. </summary>
        public static bool operator !=(CallRecordingState left, CallRecordingState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CallRecordingState"/>. </summary>
        public static implicit operator CallRecordingState(string value) => new CallRecordingState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CallRecordingState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CallRecordingState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
