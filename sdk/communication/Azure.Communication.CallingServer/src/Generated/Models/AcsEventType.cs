// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.CallingServer
{
    /// <summary> The AcsEventType. </summary>
    internal readonly partial struct AcsEventType : IEquatable<AcsEventType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AcsEventType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AcsEventType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "unknown";
        private const string CallConnectedValue = "callConnected";
        private const string CallDisconnectedValue = "callDisconnected";
        private const string CallTransferAcceptedValue = "callTransferAccepted";
        private const string CallTransferFailedValue = "callTransferFailed";
        private const string AddParticipantsSucceededValue = "addParticipantsSucceeded";
        private const string AddParticipantsFailedValue = "addParticipantsFailed";
        private const string ParticipantsUpdatedValue = "participantsUpdated";

        /// <summary> unknown. </summary>
        public static AcsEventType Unknown { get; } = new AcsEventType(UnknownValue);
        /// <summary> callConnected. </summary>
        public static AcsEventType CallConnected { get; } = new AcsEventType(CallConnectedValue);
        /// <summary> callDisconnected. </summary>
        public static AcsEventType CallDisconnected { get; } = new AcsEventType(CallDisconnectedValue);
        /// <summary> callTransferAccepted. </summary>
        public static AcsEventType CallTransferAccepted { get; } = new AcsEventType(CallTransferAcceptedValue);
        /// <summary> callTransferFailed. </summary>
        public static AcsEventType CallTransferFailed { get; } = new AcsEventType(CallTransferFailedValue);
        /// <summary> addParticipantsSucceeded. </summary>
        public static AcsEventType AddParticipantsSucceeded { get; } = new AcsEventType(AddParticipantsSucceededValue);
        /// <summary> addParticipantsFailed. </summary>
        public static AcsEventType AddParticipantsFailed { get; } = new AcsEventType(AddParticipantsFailedValue);
        /// <summary> participantsUpdated. </summary>
        public static AcsEventType ParticipantsUpdated { get; } = new AcsEventType(ParticipantsUpdatedValue);
        /// <summary> Determines if two <see cref="AcsEventType"/> values are the same. </summary>
        public static bool operator ==(AcsEventType left, AcsEventType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AcsEventType"/> values are not the same. </summary>
        public static bool operator !=(AcsEventType left, AcsEventType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AcsEventType"/>. </summary>
        public static implicit operator AcsEventType(string value) => new AcsEventType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AcsEventType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AcsEventType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
