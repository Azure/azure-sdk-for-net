// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.CallingServer
{
    public partial class CallRecordingStateChangeEvent : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RecordingId))
            {
                writer.WritePropertyName("recordingId");
                writer.WriteStringValue(RecordingId);
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state");
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsDefined(StartDateTime))
            {
                writer.WritePropertyName("startDateTime");
                writer.WriteStringValue(StartDateTime.Value, "O");
            }
            if (Optional.IsDefined(ConversationId))
            {
                writer.WritePropertyName("conversationId");
                writer.WriteStringValue(ConversationId);
            }
            writer.WriteEndObject();
        }

        internal static CallRecordingStateChangeEvent DeserializeCallRecordingStateChangeEvent(JsonElement element)
        {
            Optional<string> recordingId = default;
            Optional<CallRecordingState> state = default;
            Optional<DateTimeOffset> startDateTime = default;
            Optional<string> conversationId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("recordingId"))
                {
                    recordingId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    state = new CallRecordingState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("conversationId"))
                {
                    conversationId = property.Value.GetString();
                    continue;
                }
            }
            return new CallRecordingStateChangeEvent(recordingId.Value, Optional.ToNullable(state), Optional.ToNullable(startDateTime), conversationId.Value);
        }
    }
}
