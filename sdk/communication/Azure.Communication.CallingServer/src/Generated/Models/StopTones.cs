// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.CallingServer
{
    /// <summary> The StopTones. </summary>
    public readonly partial struct StopTones : IEquatable<StopTones>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StopTones"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StopTones(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ZeroValue = "zero";
        private const string OneValue = "one";
        private const string TwoValue = "two";
        private const string ThreeValue = "three";
        private const string FourValue = "four";
        private const string FiveValue = "five";
        private const string SixValue = "six";
        private const string SevenValue = "seven";
        private const string EightValue = "eight";
        private const string NineValue = "nine";
        private const string AValue = "a";
        private const string BValue = "b";
        private const string CValue = "c";
        private const string DValue = "d";
        private const string PoundValue = "pound";
        private const string AsteriskValue = "asterisk";

        /// <summary> zero. </summary>
        public static StopTones Zero { get; } = new StopTones(ZeroValue);
        /// <summary> one. </summary>
        public static StopTones One { get; } = new StopTones(OneValue);
        /// <summary> two. </summary>
        public static StopTones Two { get; } = new StopTones(TwoValue);
        /// <summary> three. </summary>
        public static StopTones Three { get; } = new StopTones(ThreeValue);
        /// <summary> four. </summary>
        public static StopTones Four { get; } = new StopTones(FourValue);
        /// <summary> five. </summary>
        public static StopTones Five { get; } = new StopTones(FiveValue);
        /// <summary> six. </summary>
        public static StopTones Six { get; } = new StopTones(SixValue);
        /// <summary> seven. </summary>
        public static StopTones Seven { get; } = new StopTones(SevenValue);
        /// <summary> eight. </summary>
        public static StopTones Eight { get; } = new StopTones(EightValue);
        /// <summary> nine. </summary>
        public static StopTones Nine { get; } = new StopTones(NineValue);
        /// <summary> a. </summary>
        public static StopTones A { get; } = new StopTones(AValue);
        /// <summary> b. </summary>
        public static StopTones B { get; } = new StopTones(BValue);
        /// <summary> c. </summary>
        public static StopTones C { get; } = new StopTones(CValue);
        /// <summary> d. </summary>
        public static StopTones D { get; } = new StopTones(DValue);
        /// <summary> pound. </summary>
        public static StopTones Pound { get; } = new StopTones(PoundValue);
        /// <summary> asterisk. </summary>
        public static StopTones Asterisk { get; } = new StopTones(AsteriskValue);
        /// <summary> Determines if two <see cref="StopTones"/> values are the same. </summary>
        public static bool operator ==(StopTones left, StopTones right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StopTones"/> values are not the same. </summary>
        public static bool operator !=(StopTones left, StopTones right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StopTones"/>. </summary>
        public static implicit operator StopTones(string value) => new StopTones(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StopTones other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StopTones other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
