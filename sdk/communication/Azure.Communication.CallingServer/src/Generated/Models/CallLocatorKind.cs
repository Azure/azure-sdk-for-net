// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.CallingServer
{
    /// <summary> The call locator kind. </summary>
    public readonly partial struct CallLocatorKind : IEquatable<CallLocatorKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CallLocatorKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CallLocatorKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GroupCallLocatorValue = "groupCallLocator";
        private const string ServerCallLocatorValue = "serverCallLocator";

        /// <summary> groupCallLocator. </summary>
        public static CallLocatorKind GroupCallLocator { get; } = new CallLocatorKind(GroupCallLocatorValue);
        /// <summary> serverCallLocator. </summary>
        public static CallLocatorKind ServerCallLocator { get; } = new CallLocatorKind(ServerCallLocatorValue);
        /// <summary> Determines if two <see cref="CallLocatorKind"/> values are the same. </summary>
        public static bool operator ==(CallLocatorKind left, CallLocatorKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CallLocatorKind"/> values are not the same. </summary>
        public static bool operator !=(CallLocatorKind left, CallLocatorKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CallLocatorKind"/>. </summary>
        public static implicit operator CallLocatorKind(string value) => new CallLocatorKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CallLocatorKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CallLocatorKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
