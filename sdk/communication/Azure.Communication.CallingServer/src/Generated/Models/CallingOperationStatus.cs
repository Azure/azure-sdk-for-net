// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.CallingServer
{
    /// <summary> The status of the operation. </summary>
    public readonly partial struct CallingOperationStatus : IEquatable<CallingOperationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CallingOperationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CallingOperationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "notStarted";
        private const string RunningValue = "running";
        private const string CompletedValue = "completed";
        private const string FailedValue = "failed";

        /// <summary> notStarted. </summary>
        public static CallingOperationStatus NotStarted { get; } = new CallingOperationStatus(NotStartedValue);
        /// <summary> running. </summary>
        public static CallingOperationStatus Running { get; } = new CallingOperationStatus(RunningValue);
        /// <summary> completed. </summary>
        public static CallingOperationStatus Completed { get; } = new CallingOperationStatus(CompletedValue);
        /// <summary> failed. </summary>
        public static CallingOperationStatus Failed { get; } = new CallingOperationStatus(FailedValue);
        /// <summary> Determines if two <see cref="CallingOperationStatus"/> values are the same. </summary>
        public static bool operator ==(CallingOperationStatus left, CallingOperationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CallingOperationStatus"/> values are not the same. </summary>
        public static bool operator !=(CallingOperationStatus left, CallingOperationStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CallingOperationStatus"/>. </summary>
        public static implicit operator CallingOperationStatus(string value) => new CallingOperationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CallingOperationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CallingOperationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
