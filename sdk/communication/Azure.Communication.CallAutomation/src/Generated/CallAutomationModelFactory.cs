// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Communication.CallAutomation
{
    /// <summary> Model factory for models. </summary>
    public static partial class CallAutomationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="CallAutomation.TransferCallToParticipantResult"/>. </summary>
        /// <param name="operationContext"> The operation context provided by client. </param>
        /// <returns> A new <see cref="CallAutomation.TransferCallToParticipantResult"/> instance for mocking. </returns>
        public static TransferCallToParticipantResult TransferCallToParticipantResult(string operationContext = null)
        {
            return new TransferCallToParticipantResult(operationContext);
        }

        /// <summary> Initializes a new instance of <see cref="CallAutomation.SendDtmfTonesResult"/>. </summary>
        /// <param name="operationContext"> The operation context provided by client. </param>
        /// <returns> A new <see cref="CallAutomation.SendDtmfTonesResult"/> instance for mocking. </returns>
        public static SendDtmfTonesResult SendDtmfTonesResult(string operationContext = null)
        {
            return new SendDtmfTonesResult(operationContext);
        }

        /// <summary> Initializes a new instance of <see cref="CallAutomation.MuteParticipantResult"/>. </summary>
        /// <param name="operationContext"> The operation context provided by client. </param>
        /// <returns> A new <see cref="CallAutomation.MuteParticipantResult"/> instance for mocking. </returns>
        public static MuteParticipantResult MuteParticipantResult(string operationContext = null)
        {
            return new MuteParticipantResult(operationContext);
        }

        /// <summary> Initializes a new instance of <see cref="CallAutomation.ResultInformation"/>. </summary>
        /// <param name="code"> Code of the current result. This can be helpful to Call Automation team to troubleshoot the issue if this result was unexpected. </param>
        /// <param name="subCode"> Subcode of the current result. This can be helpful to Call Automation team to troubleshoot the issue if this result was unexpected. </param>
        /// <param name="message"> Detail message that describes the current result. </param>
        /// <returns> A new <see cref="CallAutomation.ResultInformation"/> instance for mocking. </returns>
        public static ResultInformation ResultInformation(int? code = null, int? subCode = null, string message = null)
        {
            return new ResultInformation(code, subCode, message);
        }

        /// <summary> Initializes a new instance of <see cref="CallAutomation.DtmfResult"/>. </summary>
        /// <param name="tones"></param>
        /// <returns> A new <see cref="CallAutomation.DtmfResult"/> instance for mocking. </returns>
        public static DtmfResult DtmfResult(IEnumerable<DtmfTone> tones = null)
        {
            tones ??= new List<DtmfTone>();

            return new DtmfResult(tones?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="CallAutomation.ChoiceResult"/>. </summary>
        /// <param name="label"> Label is the primary identifier for the choice detected. </param>
        /// <param name="recognizedPhrase">
        /// Phrases are set to the value if choice is selected via phrase detection.
        /// If Dtmf input is recognized, then Label will be the identifier for the choice detected and phrases will be set to null
        /// </param>
        /// <returns> A new <see cref="CallAutomation.ChoiceResult"/> instance for mocking. </returns>
        public static ChoiceResult ChoiceResult(string label = null, string recognizedPhrase = null)
        {
            return new ChoiceResult(label, recognizedPhrase);
        }

        /// <summary> Initializes a new instance of <see cref="CallAutomation.SpeechResult"/>. </summary>
        /// <param name="speech"> The recognized speech in string. </param>
        /// <returns> A new <see cref="CallAutomation.SpeechResult"/> instance for mocking. </returns>
        public static SpeechResult SpeechResult(string speech = null)
        {
            return new SpeechResult(speech);
        }
    }
}
