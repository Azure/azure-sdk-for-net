// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Communication.CallAutomation
{
    /// <summary> Model factory for models. </summary>
    public static partial class CallAutomationModelFactory
    {
        /// <summary> Initializes a new instance of TransferCallToParticipantResult. </summary>
        /// <param name="operationContext"> The operation context provided by client. </param>
        /// <returns> A new <see cref="CallAutomation.TransferCallToParticipantResult"/> instance for mocking. </returns>
        public static TransferCallToParticipantResult TransferCallToParticipantResult(string operationContext = null)
        {
            return new TransferCallToParticipantResult(operationContext);
        }

        /// <summary> Initializes a new instance of MuteParticipantsResponse. </summary>
        /// <param name="operationContext"> The operation context provided by client. </param>
        /// <returns> A new <see cref="CallAutomation.MuteParticipantsResponse"/> instance for mocking. </returns>
        public static MuteParticipantsResponse MuteParticipantsResponse(string operationContext = null)
        {
            return new MuteParticipantsResponse(operationContext);
        }

        /// <summary> Initializes a new instance of UnmuteParticipantsResponse. </summary>
        /// <param name="operationContext"> The operation context provided by client. </param>
        /// <returns> A new <see cref="CallAutomation.UnmuteParticipantsResponse"/> instance for mocking. </returns>
        public static UnmuteParticipantsResponse UnmuteParticipantsResponse(string operationContext = null)
        {
            return new UnmuteParticipantsResponse(operationContext);
        }

        /// <summary> Initializes a new instance of RecordingStateResult. </summary>
        /// <param name="recordingId"></param>
        /// <param name="recordingState"></param>
        /// <returns> A new <see cref="CallAutomation.RecordingStateResult"/> instance for mocking. </returns>
        public static RecordingStateResult RecordingStateResult(string recordingId = null, RecordingState? recordingState = null)
        {
            return new RecordingStateResult(recordingId, recordingState);
        }

        /// <summary> Initializes a new instance of ResultInformation. </summary>
        /// <param name="code"></param>
        /// <param name="subCode"></param>
        /// <param name="message"></param>
        /// <returns> A new <see cref="CallAutomation.ResultInformation"/> instance for mocking. </returns>
        public static ResultInformation ResultInformation(int? code = null, int? subCode = null, string message = null)
        {
            return new ResultInformation(code, subCode, message);
        }

        /// <summary> Initializes a new instance of CallConnectedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers to set the context for creating a new call. This property will be null for answering a call. </param>
        /// <returns> A new <see cref="CallAutomation.CallConnectedEventData"/> instance for mocking. </returns>
        public static CallConnectedEventData CallConnectedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null)
        {
            return new CallConnectedEventData(callConnectionId, serverCallId, correlationId, operationContext);
        }

        /// <summary> Initializes a new instance of CallDisconnectedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers to set the context for creating a new call. This property will be null for answering a call. </param>
        /// <returns> A new <see cref="CallAutomation.CallDisconnectedEventData"/> instance for mocking. </returns>
        public static CallDisconnectedEventData CallDisconnectedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null)
        {
            return new CallDisconnectedEventData(callConnectionId, serverCallId, correlationId, operationContext);
        }

        /// <summary> Initializes a new instance of CallTransferAcceptedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers when calling mid-call actions to correlate the request to the response event. </param>
        /// <param name="resultInformation"> Contains the resulting SIP code/sub-code and message from NGC services. </param>
        /// <returns> A new <see cref="CallAutomation.CallTransferAcceptedEventData"/> instance for mocking. </returns>
        public static CallTransferAcceptedEventData CallTransferAcceptedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null, ResultInformation resultInformation = null)
        {
            return new CallTransferAcceptedEventData(callConnectionId, serverCallId, correlationId, operationContext, resultInformation);
        }

        /// <summary> Initializes a new instance of CallTransferFailedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers when calling mid-call actions to correlate the request to the response event. </param>
        /// <param name="resultInformation"> Contains the resulting SIP code/sub-code and message from NGC services. </param>
        /// <returns> A new <see cref="CallAutomation.CallTransferFailedEventData"/> instance for mocking. </returns>
        public static CallTransferFailedEventData CallTransferFailedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null, ResultInformation resultInformation = null)
        {
            return new CallTransferFailedEventData(callConnectionId, serverCallId, correlationId, operationContext, resultInformation);
        }

        /// <summary> Initializes a new instance of RecordingStateChangedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="recordingId"> The call recording id. </param>
        /// <param name="state"></param>
        /// <param name="startDateTime"> The time of the recording started. </param>
        /// <returns> A new <see cref="CallAutomation.RecordingStateChangedEventData"/> instance for mocking. </returns>
        public static RecordingStateChangedEventData RecordingStateChangedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string recordingId = null, RecordingState state = default, DateTimeOffset? startDateTime = null)
        {
            return new RecordingStateChangedEventData(callConnectionId, serverCallId, correlationId, recordingId, state, startDateTime);
        }

        /// <summary> Initializes a new instance of PlayCompletedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers when calling mid-call actions to correlate the request to the response event. </param>
        /// <param name="resultInformation"> Contains the resulting SIP code/sub-code and message from NGC services. </param>
        /// <returns> A new <see cref="CallAutomation.PlayCompletedEventData"/> instance for mocking. </returns>
        public static PlayCompletedEventData PlayCompletedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null, ResultInformation resultInformation = null)
        {
            return new PlayCompletedEventData(callConnectionId, serverCallId, correlationId, operationContext, resultInformation);
        }

        /// <summary> Initializes a new instance of PlayFailedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers when calling mid-call actions to correlate the request to the response event. </param>
        /// <param name="resultInformation"> Contains the resulting SIP code/sub-code and message from NGC services. </param>
        /// <returns> A new <see cref="CallAutomation.PlayFailedEventData"/> instance for mocking. </returns>
        public static PlayFailedEventData PlayFailedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null, ResultInformation resultInformation = null)
        {
            return new PlayFailedEventData(callConnectionId, serverCallId, correlationId, operationContext, resultInformation);
        }

        /// <summary> Initializes a new instance of PlayCanceledEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers when calling mid-call actions to correlate the request to the response event. </param>
        /// <returns> A new <see cref="CallAutomation.PlayCanceledEventData"/> instance for mocking. </returns>
        public static PlayCanceledEventData PlayCanceledEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null)
        {
            return new PlayCanceledEventData(callConnectionId, serverCallId, correlationId, operationContext);
        }

        /// <summary> Initializes a new instance of CollectTonesResult. </summary>
        /// <param name="tones"></param>
        /// <returns> A new <see cref="CallAutomation.CollectTonesResult"/> instance for mocking. </returns>
        public static CollectTonesResult CollectTonesResult(IEnumerable<DtmfTone> tones = null)
        {
            tones ??= new List<DtmfTone>();

            return new CollectTonesResult(tones?.ToList());
        }

        /// <summary> Initializes a new instance of DtmfResult. </summary>
        /// <param name="tones"></param>
        /// <returns> A new <see cref="CallAutomation.DtmfResult"/> instance for mocking. </returns>
        public static DtmfResult DtmfResult(IEnumerable<DtmfTone> tones = null)
        {
            tones ??= new List<DtmfTone>();

            return new DtmfResult(tones?.ToList());
        }

        /// <summary> Initializes a new instance of ChoiceResult. </summary>
        /// <param name="label"> Label is the primary identifier for the choice detected. </param>
        /// <param name="recognizedPhrase">
        /// Phrases are set to the value if choice is selected via phrase detection.
        /// If Dtmf input is recognized, then Label will be the identifier for the choice detected and phrases will be set to null
        /// </param>
        /// <returns> A new <see cref="CallAutomation.ChoiceResult"/> instance for mocking. </returns>
        public static ChoiceResult ChoiceResult(string label = null, string recognizedPhrase = null)
        {
            return new ChoiceResult(label, recognizedPhrase);
        }

        /// <summary> Initializes a new instance of SpeechResult. </summary>
        /// <param name="speech"> The recognized speech in string. </param>
        /// <returns> A new <see cref="CallAutomation.SpeechResult"/> instance for mocking. </returns>
        public static SpeechResult SpeechResult(string speech = null)
        {
            return new SpeechResult(speech);
        }

        /// <summary> Initializes a new instance of RecognizeFailedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers when calling mid-call actions to correlate the request to the response event. </param>
        /// <param name="resultInformation"> Contains the resulting SIP code/sub-code and message from NGC services. </param>
        /// <returns> A new <see cref="CallAutomation.RecognizeFailedEventData"/> instance for mocking. </returns>
        public static RecognizeFailedEventData RecognizeFailedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null, ResultInformation resultInformation = null)
        {
            return new RecognizeFailedEventData(callConnectionId, serverCallId, correlationId, operationContext, resultInformation);
        }

        /// <summary> Initializes a new instance of RecognizeCanceledEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers when calling mid-call actions to correlate the request to the response event. </param>
        /// <returns> A new <see cref="CallAutomation.RecognizeCanceledEventData"/> instance for mocking. </returns>
        public static RecognizeCanceledEventData RecognizeCanceledEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null)
        {
            return new RecognizeCanceledEventData(callConnectionId, serverCallId, correlationId, operationContext);
        }

        /// <summary> Initializes a new instance of ContinuousDtmfRecognitionToneFailedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="resultInformation"> Contains the resulting SIP code/sub-code and message from NGC services. </param>
        /// <returns> A new <see cref="CallAutomation.ContinuousDtmfRecognitionToneFailedEventData"/> instance for mocking. </returns>
        public static ContinuousDtmfRecognitionToneFailedEventData ContinuousDtmfRecognitionToneFailedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, ResultInformation resultInformation = null)
        {
            return new ContinuousDtmfRecognitionToneFailedEventData(callConnectionId, serverCallId, correlationId, resultInformation);
        }

        /// <summary> Initializes a new instance of ContinuousDtmfRecognitionToneReceivedEventData. </summary>
        /// <param name="toneInfo"> Information about Tone. </param>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId or skype chain ID. </param>
        /// <param name="resultInformation"> Contains the resulting SIP code/sub-code and message from NGC services. </param>
        /// <returns> A new <see cref="CallAutomation.ContinuousDtmfRecognitionToneReceivedEventData"/> instance for mocking. </returns>
        public static ContinuousDtmfRecognitionToneReceivedEventData ContinuousDtmfRecognitionToneReceivedEventData(ToneInfo toneInfo = null, string callConnectionId = null, string serverCallId = null, string correlationId = null, ResultInformation resultInformation = null)
        {
            return new ContinuousDtmfRecognitionToneReceivedEventData(toneInfo, callConnectionId, serverCallId, correlationId, resultInformation);
        }

        /// <summary> Initializes a new instance of ToneInfo. </summary>
        /// <param name="sequenceId"> The sequence id which can be used to determine if the same tone was played multiple times or if any tones were missed. </param>
        /// <param name="tone"></param>
        /// <param name="participantId"> The id of participant. </param>
        /// <returns> A new <see cref="CallAutomation.ToneInfo"/> instance for mocking. </returns>
        public static ToneInfo ToneInfo(int sequenceId = default, DtmfTone tone = default, string participantId = null)
        {
            return new ToneInfo(sequenceId, tone, participantId);
        }

        /// <summary> Initializes a new instance of ContinuousDtmfRecognitionStoppedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers when calling mid-call actions to correlate the request to the response event. </param>
        /// <param name="resultInformation"> Contains the resulting SIP code/sub-code and message from NGC services. </param>
        /// <returns> A new <see cref="CallAutomation.ContinuousDtmfRecognitionStoppedEventData"/> instance for mocking. </returns>
        public static ContinuousDtmfRecognitionStoppedEventData ContinuousDtmfRecognitionStoppedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null, ResultInformation resultInformation = null)
        {
            return new ContinuousDtmfRecognitionStoppedEventData(callConnectionId, serverCallId, correlationId, operationContext, resultInformation);
        }

        /// <summary> Initializes a new instance of SendDtmfCompletedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers when calling mid-call actions to correlate the request to the response event. </param>
        /// <param name="resultInformation"> Contains the resulting SIP code/sub-code and message from NGC services. </param>
        /// <returns> A new <see cref="CallAutomation.SendDtmfCompletedEventData"/> instance for mocking. </returns>
        public static SendDtmfCompletedEventData SendDtmfCompletedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null, ResultInformation resultInformation = null)
        {
            return new SendDtmfCompletedEventData(callConnectionId, serverCallId, correlationId, operationContext, resultInformation);
        }

        /// <summary> Initializes a new instance of SendDtmfFailedEventData. </summary>
        /// <param name="callConnectionId"> Call connection ID. </param>
        /// <param name="serverCallId"> Server call ID. </param>
        /// <param name="correlationId"> Correlation ID for event to call correlation. Also called ChainId for skype chain ID. </param>
        /// <param name="operationContext"> Used by customers when calling mid-call actions to correlate the request to the response event. </param>
        /// <param name="resultInformation"> Contains the resulting SIP code/sub-code and message from NGC services. </param>
        /// <returns> A new <see cref="CallAutomation.SendDtmfFailedEventData"/> instance for mocking. </returns>
        public static SendDtmfFailedEventData SendDtmfFailedEventData(string callConnectionId = null, string serverCallId = null, string correlationId = null, string operationContext = null, ResultInformation resultInformation = null)
        {
            return new SendDtmfFailedEventData(callConnectionId, serverCallId, correlationId, operationContext, resultInformation);
        }
    }
}
