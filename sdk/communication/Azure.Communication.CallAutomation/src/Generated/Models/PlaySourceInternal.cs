// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.CallAutomation
{
    /// <summary> The PlaySource. </summary>
    internal partial class PlaySourceInternal
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PlaySourceInternal"/>. </summary>
        /// <param name="sourceType"> Defines the type of the play source. </param>
        public PlaySourceInternal(PlaySourceTypeInternal sourceType)
        {
            SourceType = sourceType;
        }

        /// <summary> Initializes a new instance of <see cref="PlaySourceInternal"/>. </summary>
        /// <param name="sourceType"> Defines the type of the play source. </param>
        /// <param name="playSourceId"> Defines the identifier to be used for caching related media. </param>
        /// <param name="fileSource"> Defines the file source info to be used for play. </param>
        /// <param name="textSource"> Defines the text source info to be used for play. </param>
        /// <param name="ssmlSource"> Defines the ssml(Speech Synthesis Markup Language) source info to be used for play. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PlaySourceInternal(PlaySourceTypeInternal sourceType, string playSourceId, FileSourceInternal fileSource, TextSourceInternal textSource, SsmlSourceInternal ssmlSource, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SourceType = sourceType;
            PlaySourceId = playSourceId;
            FileSource = fileSource;
            TextSource = textSource;
            SsmlSource = ssmlSource;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PlaySourceInternal"/> for deserialization. </summary>
        internal PlaySourceInternal()
        {
        }

        /// <summary> Defines the type of the play source. </summary>
        public PlaySourceTypeInternal SourceType { get; }
        /// <summary> Defines the identifier to be used for caching related media. </summary>
        public string PlaySourceId { get; set; }
        /// <summary> Defines the file source info to be used for play. </summary>
        public FileSourceInternal FileSource { get; set; }
        /// <summary> Defines the text source info to be used for play. </summary>
        public TextSourceInternal TextSource { get; set; }
        /// <summary> Defines the ssml(Speech Synthesis Markup Language) source info to be used for play. </summary>
        public SsmlSourceInternal SsmlSource { get; set; }
    }
}
