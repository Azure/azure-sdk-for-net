// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.CallAutomation
{
    internal partial class TeamsPhoneCallDetailsInternal : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TeamsPhoneCallerDetails))
            {
                writer.WritePropertyName("teamsPhoneCallerDetails"u8);
                writer.WriteObjectValue(TeamsPhoneCallerDetails);
            }
            if (Optional.IsDefined(TeamsPhoneSourceDetails))
            {
                writer.WritePropertyName("teamsPhoneSourceDetails"u8);
                writer.WriteObjectValue(TeamsPhoneSourceDetails);
            }
            if (Optional.IsDefined(SessionId))
            {
                writer.WritePropertyName("sessionId"u8);
                writer.WriteStringValue(SessionId);
            }
            if (Optional.IsDefined(Intent))
            {
                writer.WritePropertyName("intent"u8);
                writer.WriteStringValue(Intent);
            }
            if (Optional.IsDefined(CallTopic))
            {
                writer.WritePropertyName("callTopic"u8);
                writer.WriteStringValue(CallTopic);
            }
            if (Optional.IsDefined(CallContext))
            {
                writer.WritePropertyName("callContext"u8);
                writer.WriteStringValue(CallContext);
            }
            if (Optional.IsDefined(TranscriptUrl))
            {
                writer.WritePropertyName("transcriptUrl"u8);
                writer.WriteStringValue(TranscriptUrl);
            }
            if (Optional.IsDefined(CallSentiment))
            {
                writer.WritePropertyName("callSentiment"u8);
                writer.WriteStringValue(CallSentiment);
            }
            if (Optional.IsDefined(SuggestedActions))
            {
                writer.WritePropertyName("suggestedActions"u8);
                writer.WriteStringValue(SuggestedActions);
            }
            writer.WriteEndObject();
        }

        internal static TeamsPhoneCallDetailsInternal DeserializeTeamsPhoneCallDetailsInternal(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            TeamsPhoneCallerDetailsInternal teamsPhoneCallerDetails = default;
            TeamsPhoneSourceDetailsInternal teamsPhoneSourceDetails = default;
            string sessionId = default;
            string intent = default;
            string callTopic = default;
            string callContext = default;
            string transcriptUrl = default;
            string callSentiment = default;
            string suggestedActions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("teamsPhoneCallerDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    teamsPhoneCallerDetails = TeamsPhoneCallerDetailsInternal.DeserializeTeamsPhoneCallerDetailsInternal(property.Value);
                    continue;
                }
                if (property.NameEquals("teamsPhoneSourceDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    teamsPhoneSourceDetails = TeamsPhoneSourceDetailsInternal.DeserializeTeamsPhoneSourceDetailsInternal(property.Value);
                    continue;
                }
                if (property.NameEquals("sessionId"u8))
                {
                    sessionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("intent"u8))
                {
                    intent = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("callTopic"u8))
                {
                    callTopic = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("callContext"u8))
                {
                    callContext = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("transcriptUrl"u8))
                {
                    transcriptUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("callSentiment"u8))
                {
                    callSentiment = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("suggestedActions"u8))
                {
                    suggestedActions = property.Value.GetString();
                    continue;
                }
            }
            return new TeamsPhoneCallDetailsInternal(
                teamsPhoneCallerDetails,
                teamsPhoneSourceDetails,
                sessionId,
                intent,
                callTopic,
                callContext,
                transcriptUrl,
                callSentiment,
                suggestedActions);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TeamsPhoneCallDetailsInternal FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeTeamsPhoneCallDetailsInternal(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
