// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Communication;
using Azure.Core;

namespace Azure.Communication.CallAutomation
{
    public partial struct AddParticipantResultEvent
    {
        internal static AddParticipantResultEvent DeserializeAddParticipantResultEvent(JsonElement element)
        {
            Optional<CommunicationIdentifierModel> participant = default;
            Optional<CallingOperationResultDetails> resultDetails = default;
            Optional<string> operationId = default;
            Optional<string> operationContext = default;
            CallingOperationStatus status = default;
            Optional<CallLocatorModel> callLocator = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("participant"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    participant = CommunicationIdentifierModel.DeserializeCommunicationIdentifierModel(property.Value);
                    continue;
                }
                if (property.NameEquals("resultDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resultDetails = CallingOperationResultDetails.DeserializeCallingOperationResultDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("operationId"))
                {
                    operationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operationContext"))
                {
                    operationContext = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = new CallingOperationStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("callLocator"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    callLocator = CallLocatorModel.DeserializeCallLocatorModel(property.Value);
                    continue;
                }
            }
            return new AddParticipantResultEvent(participant.Value, resultDetails.Value, operationId.Value, operationContext.Value, status, callLocator.Value);
        }
    }
}
