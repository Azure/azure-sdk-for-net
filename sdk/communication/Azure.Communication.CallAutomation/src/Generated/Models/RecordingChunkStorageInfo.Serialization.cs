// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;

namespace Azure.Communication.CallAutomation
{
    public partial class RecordingChunkStorageInfo
    {
        internal static RecordingChunkStorageInfo DeserializeRecordingChunkStorageInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string documentId = default;
            int? index = default;
            ChunkEndReason? endReason = default;
            string contentLocation = default;
            string metadataLocation = default;
            string deleteLocation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("documentId"u8))
                {
                    documentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("index"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    index = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("endReason"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endReason = new ChunkEndReason(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("contentLocation"u8))
                {
                    contentLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metadataLocation"u8))
                {
                    metadataLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deleteLocation"u8))
                {
                    deleteLocation = property.Value.GetString();
                    continue;
                }
            }
            return new RecordingChunkStorageInfo(
                documentId,
                index,
                endReason,
                contentLocation,
                metadataLocation,
                deleteLocation);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static RecordingChunkStorageInfo FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeRecordingChunkStorageInfo(document.RootElement);
        }
    }
}
