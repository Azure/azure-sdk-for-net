// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Communication;
using Azure.Core;

namespace Azure.Communication.CallAutomation
{
    /// <summary> The request payload for holding participant from the call. </summary>
    internal partial class StartHoldMusicRequestInternal
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StartHoldMusicRequestInternal"/>. </summary>
        /// <param name="targetParticipant"> Participant to be held from the call. </param>
        /// <param name="playSourceInfo"> Prompt to play while in hold. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetParticipant"/> or <paramref name="playSourceInfo"/> is null. </exception>
        public StartHoldMusicRequestInternal(CommunicationIdentifierModel targetParticipant, PlaySourceInternal playSourceInfo)
        {
            Argument.AssertNotNull(targetParticipant, nameof(targetParticipant));
            Argument.AssertNotNull(playSourceInfo, nameof(playSourceInfo));

            TargetParticipant = targetParticipant;
            PlaySourceInfo = playSourceInfo;
        }

        /// <summary> Initializes a new instance of <see cref="StartHoldMusicRequestInternal"/>. </summary>
        /// <param name="targetParticipant"> Participant to be held from the call. </param>
        /// <param name="playSourceInfo"> Prompt to play while in hold. </param>
        /// <param name="loop"> If the prompt will be looped or not. </param>
        /// <param name="operationContext"> Used by customers when calling mid-call actions to correlate the request to the response event. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StartHoldMusicRequestInternal(CommunicationIdentifierModel targetParticipant, PlaySourceInternal playSourceInfo, bool? loop, string operationContext, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TargetParticipant = targetParticipant;
            PlaySourceInfo = playSourceInfo;
            Loop = loop;
            OperationContext = operationContext;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="StartHoldMusicRequestInternal"/> for deserialization. </summary>
        internal StartHoldMusicRequestInternal()
        {
        }

        /// <summary> Participant to be held from the call. </summary>
        public CommunicationIdentifierModel TargetParticipant { get; }
        /// <summary> Prompt to play while in hold. </summary>
        public PlaySourceInternal PlaySourceInfo { get; }
        /// <summary> If the prompt will be looped or not. </summary>
        public bool? Loop { get; set; }
        /// <summary> Used by customers when calling mid-call actions to correlate the request to the response event. </summary>
        public string OperationContext { get; set; }
    }
}
