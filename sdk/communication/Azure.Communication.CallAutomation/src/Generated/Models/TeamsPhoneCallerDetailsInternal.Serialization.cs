// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.CallAutomation
{
    internal partial class TeamsPhoneCallerDetailsInternal : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("caller"u8);
            writer.WriteObjectValue(Caller);
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("phoneNumber"u8);
            writer.WriteStringValue(PhoneNumber);
            if (Optional.IsDefined(RecordId))
            {
                writer.WritePropertyName("recordId"u8);
                writer.WriteStringValue(RecordId);
            }
            if (Optional.IsDefined(ScreenPopUrl))
            {
                writer.WritePropertyName("screenPopUrl"u8);
                writer.WriteStringValue(ScreenPopUrl);
            }
            if (Optional.IsDefined(IsAuthenticated))
            {
                writer.WritePropertyName("isAuthenticated"u8);
                writer.WriteBooleanValue(IsAuthenticated.Value);
            }
            if (Optional.IsCollectionDefined(AdditionalCallerInformation))
            {
                writer.WritePropertyName("additionalCallerInformation"u8);
                writer.WriteStartObject();
                foreach (var item in AdditionalCallerInformation)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static TeamsPhoneCallerDetailsInternal DeserializeTeamsPhoneCallerDetailsInternal(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CommunicationIdentifierModel caller = default;
            string name = default;
            string phoneNumber = default;
            string recordId = default;
            string screenPopUrl = default;
            bool? isAuthenticated = default;
            IDictionary<string, string> additionalCallerInformation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("caller"u8))
                {
                    caller = CommunicationIdentifierModel.DeserializeCommunicationIdentifierModel(property.Value);
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("phoneNumber"u8))
                {
                    phoneNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recordId"u8))
                {
                    recordId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("screenPopUrl"u8))
                {
                    screenPopUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isAuthenticated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isAuthenticated = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("additionalCallerInformation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    additionalCallerInformation = dictionary;
                    continue;
                }
            }
            return new TeamsPhoneCallerDetailsInternal(
                caller,
                name,
                phoneNumber,
                recordId,
                screenPopUrl,
                isAuthenticated,
                additionalCallerInformation ?? new ChangeTrackingDictionary<string, string>());
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TeamsPhoneCallerDetailsInternal FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeTeamsPhoneCallerDetailsInternal(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
