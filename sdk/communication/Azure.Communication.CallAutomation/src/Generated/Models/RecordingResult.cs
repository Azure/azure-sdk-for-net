// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.CallAutomation
{
    /// <summary> Recording result data. </summary>
    public partial class RecordingResult
    {
        /// <summary> Initializes a new instance of <see cref="RecordingResult"/>. </summary>
        internal RecordingResult()
        {
            Errors = new ChangeTrackingList<ErrorDetails>();
        }

        /// <summary> Initializes a new instance of <see cref="RecordingResult"/>. </summary>
        /// <param name="recordingId"></param>
        /// <param name="recordingStorageInfo"> Container for chunks. </param>
        /// <param name="errors"></param>
        /// <param name="recordingStartTime"></param>
        /// <param name="recordingDurationMs"></param>
        /// <param name="sessionEndReason"></param>
        /// <param name="recordingExpirationTime"></param>
        internal RecordingResult(string recordingId, RecordingStorageInfo recordingStorageInfo, IReadOnlyList<ErrorDetails> errors, DateTimeOffset? recordingStartTime, long? recordingDurationMs, CallSessionEndReason? sessionEndReason, DateTimeOffset? recordingExpirationTime)
        {
            RecordingId = recordingId;
            RecordingStorageInfo = recordingStorageInfo;
            Errors = errors;
            RecordingStartTime = recordingStartTime;
            RecordingDurationMs = recordingDurationMs;
            SessionEndReason = sessionEndReason;
            RecordingExpirationTime = recordingExpirationTime;
        }

        /// <summary> Gets the recording id. </summary>
        public string RecordingId { get; }
        /// <summary> Container for chunks. </summary>
        public RecordingStorageInfo RecordingStorageInfo { get; }
        /// <summary> Gets the errors. </summary>
        public IReadOnlyList<ErrorDetails> Errors { get; }
        /// <summary> Gets the recording start time. </summary>
        public DateTimeOffset? RecordingStartTime { get; }
        /// <summary> Gets the recording duration ms. </summary>
        public long? RecordingDurationMs { get; }
        /// <summary> Gets the session end reason. </summary>
        public CallSessionEndReason? SessionEndReason { get; }
        /// <summary> Gets the recording expiration time. </summary>
        public DateTimeOffset? RecordingExpirationTime { get; }
    }
}
