// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.CallAutomation
{
    /// <summary> Reason this chunk ended. </summary>
    public readonly partial struct ChunkEndReason : IEquatable<ChunkEndReason>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ChunkEndReason"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ChunkEndReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ChunkIsBeingRecordedValue = "chunkIsBeingRecorded";
        private const string SessionEndedValue = "sessionEnded";
        private const string ChunkMaximumSizeExceededValue = "chunkMaximumSizeExceeded";
        private const string ChunkMaximumTimeExceededValue = "chunkMaximumTimeExceeded";
        private const string ChunkUploadFailureValue = "chunkUploadFailure";

        /// <summary> chunkIsBeingRecorded. </summary>
        public static ChunkEndReason ChunkIsBeingRecorded { get; } = new ChunkEndReason(ChunkIsBeingRecordedValue);
        /// <summary> sessionEnded. </summary>
        public static ChunkEndReason SessionEnded { get; } = new ChunkEndReason(SessionEndedValue);
        /// <summary> chunkMaximumSizeExceeded. </summary>
        public static ChunkEndReason ChunkMaximumSizeExceeded { get; } = new ChunkEndReason(ChunkMaximumSizeExceededValue);
        /// <summary> chunkMaximumTimeExceeded. </summary>
        public static ChunkEndReason ChunkMaximumTimeExceeded { get; } = new ChunkEndReason(ChunkMaximumTimeExceededValue);
        /// <summary> chunkUploadFailure. </summary>
        public static ChunkEndReason ChunkUploadFailure { get; } = new ChunkEndReason(ChunkUploadFailureValue);
        /// <summary> Determines if two <see cref="ChunkEndReason"/> values are the same. </summary>
        public static bool operator ==(ChunkEndReason left, ChunkEndReason right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ChunkEndReason"/> values are not the same. </summary>
        public static bool operator !=(ChunkEndReason left, ChunkEndReason right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ChunkEndReason"/>. </summary>
        public static implicit operator ChunkEndReason(string value) => new ChunkEndReason(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ChunkEndReason other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ChunkEndReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
