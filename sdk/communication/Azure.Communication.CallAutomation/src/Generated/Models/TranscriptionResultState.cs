// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.CallAutomation
{
    /// <summary> The TranscriptionResultType. </summary>
    public readonly partial struct TranscriptionResultState : IEquatable<TranscriptionResultState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TranscriptionResultState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TranscriptionResultState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FinalValue = "final";
        private const string IntermediateValue = "intermediate";

        /// <summary> final. </summary>
        public static TranscriptionResultState Final { get; } = new TranscriptionResultState(FinalValue);
        /// <summary> intermediate. </summary>
        public static TranscriptionResultState Intermediate { get; } = new TranscriptionResultState(IntermediateValue);
        /// <summary> Determines if two <see cref="TranscriptionResultState"/> values are the same. </summary>
        public static bool operator ==(TranscriptionResultState left, TranscriptionResultState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TranscriptionResultState"/> values are not the same. </summary>
        public static bool operator !=(TranscriptionResultState left, TranscriptionResultState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TranscriptionResultState"/>. </summary>
        public static implicit operator TranscriptionResultState(string value) => new TranscriptionResultState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TranscriptionResultState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TranscriptionResultState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
