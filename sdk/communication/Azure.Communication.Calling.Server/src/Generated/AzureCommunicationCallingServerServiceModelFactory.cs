// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Communication.Calling.Server
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AzureCommunicationCallingServerServiceModelFactory
    {
        /// <summary> Initializes new instance of CreateCallResponse class. </summary>
        /// <param name="callLegId"> Call leg id of the call. </param>
        /// <returns> A new <see cref="Server.CreateCallResponse"/> instance for mocking. </returns>
        public static CreateCallResponse CreateCallResponse(string callLegId = default)
        {
            return new CreateCallResponse(callLegId);
        }

        /// <summary> Initializes new instance of PlayAudioResponse class. </summary>
        /// <param name="id"> Gets or sets the identifier. </param>
        /// <param name="status"> Gets or sets the status of the operation. </param>
        /// <param name="operationContext"> Gets or sets the operation context. </param>
        /// <param name="resultInfo"> Gets or sets the result info. </param>
        /// <returns> A new <see cref="Server.PlayAudioResponse"/> instance for mocking. </returns>
        public static PlayAudioResponse PlayAudioResponse(string id = default, OperationStatus? status = default, string operationContext = default, ResultInfo resultInfo = default)
        {
            return new PlayAudioResponse(id, status, operationContext, resultInfo);
        }

        /// <summary> Initializes new instance of ResultInfo class. </summary>
        /// <param name="code">
        /// Gets or sets the result code
        /// 
        /// For synchronous failures, this maps one-to-one with HTTP responses. For asynchronous failures or messages, it is contextual.
        /// </param>
        /// <param name="subcode">
        /// Gets or sets the result subcode.
        /// 
        /// The subcode further classifies a failure. For example.
        /// </param>
        /// <param name="message">
        /// Gets or sets the message
        /// 
        /// The message is a detail explanation of subcode.
        /// </param>
        /// <returns> A new <see cref="Server.ResultInfo"/> instance for mocking. </returns>
        public static ResultInfo ResultInfo(int? code = default, int? subcode = default, string message = default)
        {
            return new ResultInfo(code, subcode, message);
        }

        /// <summary> Initializes new instance of CancelMediaProcessingResponse class. </summary>
        /// <param name="id"> Gets or sets the identifier. </param>
        /// <param name="status"> Gets or sets the status of the operation. </param>
        /// <param name="operationContext"> Gets or sets the operation context. </param>
        /// <param name="resultInfo"> Gets or sets the result info. </param>
        /// <returns> A new <see cref="Server.CancelMediaProcessingResponse"/> instance for mocking. </returns>
        public static CancelMediaProcessingResponse CancelMediaProcessingResponse(string id = default, OperationStatus? status = default, string operationContext = default, ResultInfo resultInfo = default)
        {
            return new CancelMediaProcessingResponse(id, status, operationContext, resultInfo);
        }

        /// <summary> Initializes new instance of JoinCallResponse class. </summary>
        /// <param name="callLegId"> Call leg id of the call. </param>
        /// <returns> A new <see cref="Server.JoinCallResponse"/> instance for mocking. </returns>
        public static JoinCallResponse JoinCallResponse(string callLegId = default)
        {
            return new JoinCallResponse(callLegId);
        }

        /// <summary> Initializes new instance of StartCallRecordingResponse class. </summary>
        /// <param name="recordingId"> The recording id of the started recording. </param>
        /// <returns> A new <see cref="Server.StartCallRecordingResponse"/> instance for mocking. </returns>
        public static StartCallRecordingResponse StartCallRecordingResponse(string recordingId = default)
        {
            return new StartCallRecordingResponse(recordingId);
        }

        /// <summary> Initializes new instance of GetCallRecordingStateResponse class. </summary>
        /// <param name="recordingState"> The recording state of the recording. </param>
        /// <returns> A new <see cref="Server.GetCallRecordingStateResponse"/> instance for mocking. </returns>
        public static GetCallRecordingStateResponse GetCallRecordingStateResponse(CallRecordingState? recordingState = default)
        {
            return new GetCallRecordingStateResponse(recordingState);
        }
    }
}
