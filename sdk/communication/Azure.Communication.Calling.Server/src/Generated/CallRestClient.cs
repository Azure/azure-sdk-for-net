// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.Calling.Server
{
    internal partial class CallRestClient
    {
        private string endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of CallRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public CallRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string apiVersion = "2021-04-15-preview1")
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateCreateCallRequest(CreateCallRequestInternal callRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/calls", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(callRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Create a new call. </summary>
        /// <param name="callRequest"> Create call request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callRequest"/> is null. </exception>
        public async Task<Response<CreateCallResponse>> CreateCallAsync(CreateCallRequestInternal callRequest, CancellationToken cancellationToken = default)
        {
            if (callRequest == null)
            {
                throw new ArgumentNullException(nameof(callRequest));
            }

            using var message = CreateCreateCallRequest(callRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        CreateCallResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CreateCallResponse.DeserializeCreateCallResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a new call. </summary>
        /// <param name="callRequest"> Create call request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callRequest"/> is null. </exception>
        public Response<CreateCallResponse> CreateCall(CreateCallRequestInternal callRequest, CancellationToken cancellationToken = default)
        {
            if (callRequest == null)
            {
                throw new ArgumentNullException(nameof(callRequest));
            }

            using var message = CreateCreateCallRequest(callRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        CreateCallResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CreateCallResponse.DeserializeCreateCallResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHangupCallRequest(string callId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/calls/", false);
            uri.AppendPath(callId, true);
            uri.AppendPath("/Hangup", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Hangup a call. </summary>
        /// <param name="callId"> Call id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> is null. </exception>
        public async Task<Response> HangupCallAsync(string callId, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }

            using var message = CreateHangupCallRequest(callId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Hangup a call. </summary>
        /// <param name="callId"> Call id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> is null. </exception>
        public Response HangupCall(string callId, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }

            using var message = CreateHangupCallRequest(callId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteCallRequest(string callId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/calls/", false);
            uri.AppendPath(callId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a call. </summary>
        /// <param name="callId"> Call id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> is null. </exception>
        public async Task<Response> DeleteCallAsync(string callId, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }

            using var message = CreateDeleteCallRequest(callId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a call. </summary>
        /// <param name="callId"> Call id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> is null. </exception>
        public Response DeleteCall(string callId, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }

            using var message = CreateDeleteCallRequest(callId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePlayAudioRequest(string callId, PlayAudioRequest request)
        {
            var message = _pipeline.CreateMessage();
            var request0 = message.Request;
            request0.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/calls/", false);
            uri.AppendPath(callId, true);
            uri.AppendPath("/PlayAudio", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request0.Uri = uri;
            request0.Headers.Add("Accept", "application/json");
            request0.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(request);
            request0.Content = content;
            return message;
        }

        /// <summary> Play audio in a call. </summary>
        /// <param name="callId"> The call id. </param>
        /// <param name="request"> Play audio request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> or <paramref name="request"/> is null. </exception>
        public async Task<Response<PlayAudioResponse>> PlayAudioAsync(string callId, PlayAudioRequest request, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            using var message = CreatePlayAudioRequest(callId, request);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PlayAudioResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PlayAudioResponse.DeserializePlayAudioResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Play audio in a call. </summary>
        /// <param name="callId"> The call id. </param>
        /// <param name="request"> Play audio request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> or <paramref name="request"/> is null. </exception>
        public Response<PlayAudioResponse> PlayAudio(string callId, PlayAudioRequest request, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            using var message = CreatePlayAudioRequest(callId, request);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PlayAudioResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PlayAudioResponse.DeserializePlayAudioResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCancelMediaOperationsRequest(string callId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/calls/", false);
            uri.AppendPath(callId, true);
            uri.AppendPath("/CancelMediaOperations", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Cancel Media Processing. </summary>
        /// <param name="callId"> The call id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> is null. </exception>
        public async Task<Response<CancelMediaOperationsResponse>> CancelMediaOperationsAsync(string callId, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }

            using var message = CreateCancelMediaOperationsRequest(callId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CancelMediaOperationsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CancelMediaOperationsResponse.DeserializeCancelMediaOperationsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Cancel Media Processing. </summary>
        /// <param name="callId"> The call id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> is null. </exception>
        public Response<CancelMediaOperationsResponse> CancelMediaOperations(string callId, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }

            using var message = CreateCancelMediaOperationsRequest(callId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CancelMediaOperationsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CancelMediaOperationsResponse.DeserializeCancelMediaOperationsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateInviteParticipantsRequest(string callId, InviteParticipantsRequestInternal inviteParticipantsRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/calls/", false);
            uri.AppendPath(callId, true);
            uri.AppendPath("/participants", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(inviteParticipantsRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Invite participants to the call. </summary>
        /// <param name="callId"> Call id. </param>
        /// <param name="inviteParticipantsRequest"> Invite participant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> or <paramref name="inviteParticipantsRequest"/> is null. </exception>
        public async Task<Response> InviteParticipantsAsync(string callId, InviteParticipantsRequestInternal inviteParticipantsRequest, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }
            if (inviteParticipantsRequest == null)
            {
                throw new ArgumentNullException(nameof(inviteParticipantsRequest));
            }

            using var message = CreateInviteParticipantsRequest(callId, inviteParticipantsRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Invite participants to the call. </summary>
        /// <param name="callId"> Call id. </param>
        /// <param name="inviteParticipantsRequest"> Invite participant request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> or <paramref name="inviteParticipantsRequest"/> is null. </exception>
        public Response InviteParticipants(string callId, InviteParticipantsRequestInternal inviteParticipantsRequest, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }
            if (inviteParticipantsRequest == null)
            {
                throw new ArgumentNullException(nameof(inviteParticipantsRequest));
            }

            using var message = CreateInviteParticipantsRequest(callId, inviteParticipantsRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveParticipantRequest(string callId, string participantId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/calling/calls/", false);
            uri.AppendPath(callId, true);
            uri.AppendPath("/participants/", false);
            uri.AppendPath(participantId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Remove participant from the call. </summary>
        /// <param name="callId"> Call id. </param>
        /// <param name="participantId"> Participant id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> or <paramref name="participantId"/> is null. </exception>
        public async Task<Response> RemoveParticipantAsync(string callId, string participantId, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateRemoveParticipantRequest(callId, participantId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove participant from the call. </summary>
        /// <param name="callId"> Call id. </param>
        /// <param name="participantId"> Participant id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callId"/> or <paramref name="participantId"/> is null. </exception>
        public Response RemoveParticipant(string callId, string participantId, CancellationToken cancellationToken = default)
        {
            if (callId == null)
            {
                throw new ArgumentNullException(nameof(callId));
            }
            if (participantId == null)
            {
                throw new ArgumentNullException(nameof(participantId));
            }

            using var message = CreateRemoveParticipantRequest(callId, participantId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
