// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Communication.Rooms
{
    /// <summary> The meeting room. </summary>
    public partial class CommunicationRoom
    {
        /// <summary> Initializes a new instance of CommunicationRoom. </summary>
        internal CommunicationRoom()
        {
            Participants = new ChangeTrackingList<RoomParticipant>();
        }

        /// <summary> Initializes a new instance of CommunicationRoom. </summary>
        /// <param name="id"> Unique identifier of a room. This id is server generated. </param>
        /// <param name="createdOn"> The timestamp when the room was created at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
        /// <param name="validFrom"> The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
        /// <param name="validUntil"> The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
        /// <param name="roomJoinPolicy"> The room join policy for the room. </param>
        /// <param name="participants"> Collection of identities invited to the room. </param>
        internal CommunicationRoom(string id, DateTimeOffset? createdOn, DateTimeOffset? validFrom, DateTimeOffset? validUntil, RoomJoinPolicy? roomJoinPolicy, IReadOnlyList<RoomParticipant> participants)
        {
            Id = id;
            CreatedOn = createdOn;
            ValidFrom = validFrom;
            ValidUntil = validUntil;
            RoomJoinPolicy = roomJoinPolicy;
            Participants = participants;
        }

        internal CommunicationRoom(RoomModelInternal roomModelInternal)
        {
            Id = roomModelInternal.Id;
            CreatedOn = roomModelInternal.CreatedDateTime;
            ValidFrom = roomModelInternal.ValidFrom;
            ValidUntil = roomModelInternal.ValidUntil;
            RoomJoinPolicy = roomModelInternal.RoomJoinPolicy;
            //Participants = (IReadOnlyList<RoomParticipant>)roomModelInternal.Participants;
            Participants = RoomParticipantsInternalToRoomParticipants(roomModelInternal.Participants);
        }

        internal IReadOnlyList<RoomParticipant> RoomParticipantsInternalToRoomParticipants(IReadOnlyList<RoomParticipantInternal> roomParticipantsInternal)
        {
            List<RoomParticipant> roomParticipants = new List<RoomParticipant>();
            foreach(RoomParticipantInternal eachRoomParticipantInternal in roomParticipantsInternal)
            {
                RoomParticipant roomParticipant = new RoomParticipant(eachRoomParticipantInternal);
                roomParticipants.Add(roomParticipant);
            }

            return roomParticipants;
        }
        /// <summary> Unique identifier of a room. This id is server generated. </summary>
        public string Id { get; }
        /// <summary> The timestamp when the room was created at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary> The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        public DateTimeOffset? ValidFrom { get; }
        /// <summary> The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        public DateTimeOffset? ValidUntil { get; }
        /// <summary> The room join policy for the room. </summary>
        public RoomJoinPolicy? RoomJoinPolicy { get; }
        /// <summary> Collection of identities invited to the room. </summary>
        public IReadOnlyList<RoomParticipant> Participants { get; }
    }
}
