// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Communication.JobRouter;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Communication.JobRouter.Samples
{
    public partial class Samples_JobRouterAdministrationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicy_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.GetDistributionPolicy("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicy_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.GetDistributionPolicyAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicy_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<DistributionPolicy> response = client.GetDistributionPolicy("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicy_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<DistributionPolicy> response = await client.GetDistributionPolicyAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicy_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.GetDistributionPolicy("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("offerExpiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("minConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("maxConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("bypassSelectors").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicy_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.GetDistributionPolicyAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("offerExpiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("minConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("maxConcurrentOffers").ToString());
            Console.WriteLine(result.GetProperty("mode").GetProperty("bypassSelectors").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicy_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<DistributionPolicy> response = client.GetDistributionPolicy("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicy_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<DistributionPolicy> response = await client.GetDistributionPolicyAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDistributionPolicy_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.DeleteDistributionPolicy("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDistributionPolicy_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.DeleteDistributionPolicyAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDistributionPolicy_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.DeleteDistributionPolicy("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDistributionPolicy_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.DeleteDistributionPolicyAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicy_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.GetClassificationPolicy("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicy_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.GetClassificationPolicyAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicy_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<ClassificationPolicy> response = client.GetClassificationPolicy("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicy_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<ClassificationPolicy> response = await client.GetClassificationPolicyAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicy_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.GetClassificationPolicy("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("fallbackQueueId").ToString());
            Console.WriteLine(result.GetProperty("queueSelectors")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("prioritizationRule").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("workerSelectors")[0].GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicy_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.GetClassificationPolicyAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("fallbackQueueId").ToString());
            Console.WriteLine(result.GetProperty("queueSelectors")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("prioritizationRule").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("workerSelectors")[0].GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicy_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<ClassificationPolicy> response = client.GetClassificationPolicy("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicy_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<ClassificationPolicy> response = await client.GetClassificationPolicyAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteClassificationPolicy_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.DeleteClassificationPolicy("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteClassificationPolicy_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.DeleteClassificationPolicyAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteClassificationPolicy_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.DeleteClassificationPolicy("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteClassificationPolicy_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.DeleteClassificationPolicyAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicy_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.GetExceptionPolicy("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicy_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.GetExceptionPolicyAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicy_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<ExceptionPolicy> response = client.GetExceptionPolicy("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicy_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<ExceptionPolicy> response = await client.GetExceptionPolicyAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicy_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.GetExceptionPolicy("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<key>").GetProperty("trigger").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<key>").GetProperty("actions").GetProperty("<key>").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicy_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.GetExceptionPolicyAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<key>").GetProperty("trigger").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("exceptionRules").GetProperty("<key>").GetProperty("actions").GetProperty("<key>").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicy_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<ExceptionPolicy> response = client.GetExceptionPolicy("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicy_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<ExceptionPolicy> response = await client.GetExceptionPolicyAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteExceptionPolicy_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.DeleteExceptionPolicy("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteExceptionPolicy_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.DeleteExceptionPolicyAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteExceptionPolicy_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.DeleteExceptionPolicy("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteExceptionPolicy_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.DeleteExceptionPolicyAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueue_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.GetQueue("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueue_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.GetQueueAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueue_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<RouterQueue> response = client.GetQueue("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueue_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<RouterQueue> response = await client.GetQueueAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueue_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.GetQueue("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("distributionPolicyId").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("exceptionPolicyId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueue_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.GetQueueAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("distributionPolicyId").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("exceptionPolicyId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueue_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<RouterQueue> response = client.GetQueue("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueue_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response<RouterQueue> response = await client.GetQueueAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteQueue_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.DeleteQueue("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteQueue_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.DeleteQueueAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteQueue_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = client.DeleteQueue("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteQueue_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            Response response = await client.DeleteQueueAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicies_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (BinaryData item in client.GetDistributionPolicies(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicies_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (BinaryData item in client.GetDistributionPoliciesAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicies_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (DistributionPolicyItem item in client.GetDistributionPolicies())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicies_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (DistributionPolicyItem item in client.GetDistributionPoliciesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicies_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (BinaryData item in client.GetDistributionPolicies(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("offerExpiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("minConcurrentOffers").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("maxConcurrentOffers").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("bypassSelectors").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicies_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (BinaryData item in client.GetDistributionPoliciesAsync(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("offerExpiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("minConcurrentOffers").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("maxConcurrentOffers").ToString());
                Console.WriteLine(result.GetProperty("distributionPolicy").GetProperty("mode").GetProperty("bypassSelectors").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDistributionPolicies_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (DistributionPolicyItem item in client.GetDistributionPolicies(maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDistributionPolicies_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (DistributionPolicyItem item in client.GetDistributionPoliciesAsync(maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicies_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (BinaryData item in client.GetClassificationPolicies(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicies_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (BinaryData item in client.GetClassificationPoliciesAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicies_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (ClassificationPolicyItem item in client.GetClassificationPolicies())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicies_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (ClassificationPolicyItem item in client.GetClassificationPoliciesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicies_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (BinaryData item in client.GetClassificationPolicies(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("fallbackQueueId").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("queueSelectors")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("prioritizationRule").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("workerSelectors")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicies_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (BinaryData item in client.GetClassificationPoliciesAsync(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("fallbackQueueId").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("queueSelectors")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("prioritizationRule").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicy").GetProperty("workerSelectors")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClassificationPolicies_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (ClassificationPolicyItem item in client.GetClassificationPolicies(maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClassificationPolicies_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (ClassificationPolicyItem item in client.GetClassificationPoliciesAsync(maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicies_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (BinaryData item in client.GetExceptionPolicies(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicies_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (BinaryData item in client.GetExceptionPoliciesAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicies_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (ExceptionPolicyItem item in client.GetExceptionPolicies())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicies_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (ExceptionPolicyItem item in client.GetExceptionPoliciesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicies_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (BinaryData item in client.GetExceptionPolicies(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("exceptionRules").GetProperty("<key>").GetProperty("trigger").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("exceptionRules").GetProperty("<key>").GetProperty("actions").GetProperty("<key>").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicies_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (BinaryData item in client.GetExceptionPoliciesAsync(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("exceptionRules").GetProperty("<key>").GetProperty("trigger").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("exceptionPolicy").GetProperty("exceptionRules").GetProperty("<key>").GetProperty("actions").GetProperty("<key>").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExceptionPolicies_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (ExceptionPolicyItem item in client.GetExceptionPolicies(maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExceptionPolicies_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (ExceptionPolicyItem item in client.GetExceptionPoliciesAsync(maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueues_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (BinaryData item in client.GetQueues(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("queue").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueues_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (BinaryData item in client.GetQueuesAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("queue").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueues_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (RouterQueueItem item in client.GetQueues())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueues_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (RouterQueueItem item in client.GetQueuesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueues_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (BinaryData item in client.GetQueues(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("queue").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("distributionPolicyId").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("labels").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("exceptionPolicyId").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueues_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (BinaryData item in client.GetQueuesAsync(1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("queue").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("distributionPolicyId").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("labels").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("queue").GetProperty("exceptionPolicyId").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueues_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            foreach (RouterQueueItem item in client.GetQueues(maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueues_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint);

            await foreach (RouterQueueItem item in client.GetQueuesAsync(maxpagesize: 1234))
            {
            }
        }
    }
}
