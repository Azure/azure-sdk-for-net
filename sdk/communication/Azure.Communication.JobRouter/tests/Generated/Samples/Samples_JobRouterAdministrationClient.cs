// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Communication.JobRouter.Samples
{
    public partial class Samples_JobRouterAdministrationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DistributionPolicy_GetDistributionPolicy_RetrievesAnExistingDistributionPolicyById()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = client.GetDistributionPolicy("MainDistributionPolicy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DistributionPolicy_GetDistributionPolicy_RetrievesAnExistingDistributionPolicyById_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = await client.GetDistributionPolicyAsync("MainDistributionPolicy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DistributionPolicy_GetDistributionPolicy_RetrievesAnExistingDistributionPolicyById_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response<DistributionPolicy> response = client.GetDistributionPolicy("MainDistributionPolicy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DistributionPolicy_GetDistributionPolicy_RetrievesAnExistingDistributionPolicyById_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response<DistributionPolicy> response = await client.GetDistributionPolicyAsync("MainDistributionPolicy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DistributionPolicy_DeleteDistributionPolicy_DeleteADistributionPolicy()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = client.DeleteDistributionPolicy("MainDistributionPolicy");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DistributionPolicy_DeleteDistributionPolicy_DeleteADistributionPolicy_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = await client.DeleteDistributionPolicyAsync("MainDistributionPolicy");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ClassificationPolicy_GetClassificationPolicy_RetrievesAnExistingClassificationPolicyById()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = client.GetClassificationPolicy("MainClassificationPolicy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ClassificationPolicy_GetClassificationPolicy_RetrievesAnExistingClassificationPolicyById_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = await client.GetClassificationPolicyAsync("MainClassificationPolicy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ClassificationPolicy_GetClassificationPolicy_RetrievesAnExistingClassificationPolicyById_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response<ClassificationPolicy> response = client.GetClassificationPolicy("MainClassificationPolicy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ClassificationPolicy_GetClassificationPolicy_RetrievesAnExistingClassificationPolicyById_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response<ClassificationPolicy> response = await client.GetClassificationPolicyAsync("MainClassificationPolicy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ClassificationPolicy_DeleteClassificationPolicy_DeleteAClassificationPolicy()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = client.DeleteClassificationPolicy("MainClassificationPolicy");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ClassificationPolicy_DeleteClassificationPolicy_DeleteAClassificationPolicy_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = await client.DeleteClassificationPolicyAsync("MainClassificationPolicy");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExceptionPolicy_GetExceptionPolicy_RetrievesAnExistingExceptionPolicyById()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = client.GetExceptionPolicy("MainExceptionPolicy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExceptionPolicy_GetExceptionPolicy_RetrievesAnExistingExceptionPolicyById_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = await client.GetExceptionPolicyAsync("MainExceptionPolicy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExceptionPolicy_GetExceptionPolicy_RetrievesAnExistingExceptionPolicyById_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response<ExceptionPolicy> response = client.GetExceptionPolicy("MainExceptionPolicy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExceptionPolicy_GetExceptionPolicy_RetrievesAnExistingExceptionPolicyById_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response<ExceptionPolicy> response = await client.GetExceptionPolicyAsync("MainExceptionPolicy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExceptionPolicy_DeleteExceptionPolicy_DeletesAExceptionPolicy()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = client.DeleteExceptionPolicy("MainExceptionPolicy");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExceptionPolicy_DeleteExceptionPolicy_DeletesAExceptionPolicy_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = await client.DeleteExceptionPolicyAsync("MainExceptionPolicy");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RouterQueue_GetQueue_RetrievesAnExistingQueueById()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = client.GetQueue("MainQueue", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RouterQueue_GetQueue_RetrievesAnExistingQueueById_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = await client.GetQueueAsync("MainQueue", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RouterQueue_GetQueue_RetrievesAnExistingQueueById_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response<RouterQueue> response = client.GetQueue("MainQueue");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RouterQueue_GetQueue_RetrievesAnExistingQueueById_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response<RouterQueue> response = await client.GetQueueAsync("MainQueue");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RouterQueue_DeleteQueue_DeletesAQueue()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = client.DeleteQueue("MainQueue");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RouterQueue_DeleteQueue_DeletesAQueue_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterAdministrationClient client = new JobRouterAdministrationClient(endpoint, credential);

            Response response = await client.DeleteQueueAsync("MainQueue");

            Console.WriteLine(response.Status);
        }
    }
}
