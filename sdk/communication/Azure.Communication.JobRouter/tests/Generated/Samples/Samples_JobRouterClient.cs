// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Communication.JobRouter.Samples
{
    public partial class Samples_JobRouterClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RouterJob_GetJob_RetrievesAnExistingJobById()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = client.GetJob("8780b28c-7079-4de1-9143-4d369289e958", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RouterJob_GetJob_RetrievesAnExistingJobById_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = await client.GetJobAsync("8780b28c-7079-4de1-9143-4d369289e958", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RouterJob_GetJob_RetrievesAnExistingJobById_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response<RouterJob> response = client.GetJob("8780b28c-7079-4de1-9143-4d369289e958");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RouterJob_GetJob_RetrievesAnExistingJobById_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response<RouterJob> response = await client.GetJobAsync("8780b28c-7079-4de1-9143-4d369289e958");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RouterJob_DeleteJob_DeletesAJobAndAllOfItsTraces()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = client.DeleteJob("8780b28c-7079-4de1-9143-4d369289e958");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RouterJob_DeleteJob_DeletesAJobAndAllOfItsTraces_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = await client.DeleteJobAsync("8780b28c-7079-4de1-9143-4d369289e958");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JobRouterRestClient_GetQueuePosition_GetsAJobSPositionDetails()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = client.GetQueuePosition("8780b28c-7079-4de1-9143-4d369289e958", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JobRouterRestClient_GetQueuePosition_GetsAJobSPositionDetails_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = await client.GetQueuePositionAsync("8780b28c-7079-4de1-9143-4d369289e958", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JobRouterRestClient_GetQueuePosition_GetsAJobSPositionDetails_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response<RouterJobPositionDetails> response = client.GetQueuePosition("8780b28c-7079-4de1-9143-4d369289e958");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JobRouterRestClient_GetQueuePosition_GetsAJobSPositionDetails_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response<RouterJobPositionDetails> response = await client.GetQueuePositionAsync("8780b28c-7079-4de1-9143-4d369289e958");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JobRouterRestClient_AcceptJobOffer_AcceptsAnOfferToWorkOnAJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = client.AcceptJobOffer("DefaultWorker", "1d5896f3-8b54-40be-82d3-910323f5e2af", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JobRouterRestClient_AcceptJobOffer_AcceptsAnOfferToWorkOnAJob_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = await client.AcceptJobOfferAsync("DefaultWorker", "1d5896f3-8b54-40be-82d3-910323f5e2af", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JobRouterRestClient_AcceptJobOffer_AcceptsAnOfferToWorkOnAJob_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response<AcceptJobOfferResult> response = client.AcceptJobOffer("DefaultWorker", "1d5896f3-8b54-40be-82d3-910323f5e2af");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JobRouterRestClient_AcceptJobOffer_AcceptsAnOfferToWorkOnAJob_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response<AcceptJobOfferResult> response = await client.AcceptJobOfferAsync("DefaultWorker", "1d5896f3-8b54-40be-82d3-910323f5e2af");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JobRouterRestClient_GetQueueStatistics_RetrievesAQueueSStatistics()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = client.GetQueueStatistics("MainQueue", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JobRouterRestClient_GetQueueStatistics_RetrievesAQueueSStatistics_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = await client.GetQueueStatisticsAsync("MainQueue", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JobRouterRestClient_GetQueueStatistics_RetrievesAQueueSStatistics_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response<RouterQueueStatistics> response = client.GetQueueStatistics("MainQueue");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JobRouterRestClient_GetQueueStatistics_RetrievesAQueueSStatistics_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response<RouterQueueStatistics> response = await client.GetQueueStatisticsAsync("MainQueue");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RouterWorker_GetWorker_RetrievesAnExistingWorkerById()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = client.GetWorker("DefaultWorker", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RouterWorker_GetWorker_RetrievesAnExistingWorkerById_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = await client.GetWorkerAsync("DefaultWorker", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RouterWorker_GetWorker_RetrievesAnExistingWorkerById_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response<RouterWorker> response = client.GetWorker("DefaultWorker");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RouterWorker_GetWorker_RetrievesAnExistingWorkerById_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response<RouterWorker> response = await client.GetWorkerAsync("DefaultWorker");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RouterWorker_DeleteWorker_DeletesAWorkerAndAllOfItsTraces()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = client.DeleteWorker("DefaultWorker");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RouterWorker_DeleteWorker_DeletesAWorkerAndAllOfItsTraces_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            JobRouterClient client = new JobRouterClient(endpoint, credential);

            Response response = await client.DeleteWorkerAsync("DefaultWorker");

            Console.WriteLine(response.Status);
        }
    }
}
