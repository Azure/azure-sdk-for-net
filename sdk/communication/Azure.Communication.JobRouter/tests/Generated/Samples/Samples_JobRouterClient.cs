// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Communication.JobRouter;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Communication.JobRouter.Samples
{
    public partial class Samples_JobRouterClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJob_ShortVersion()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.GetJob("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJob_ShortVersion_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.GetJobAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJob_ShortVersion_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterJob> response = client.GetJob("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJob_ShortVersion_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterJob> response = await client.GetJobAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJob_AllParameters()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.GetJob("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("channelReference").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
            Console.WriteLine(result.GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("dispositionCode").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("notes")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("notes")[0].GetProperty("addedAt").ToString());
            Console.WriteLine(result.GetProperty("scheduledAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJob_AllParameters_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.GetJobAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("channelReference").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
            Console.WriteLine(result.GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("dispositionCode").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("notes")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("notes")[0].GetProperty("addedAt").ToString());
            Console.WriteLine(result.GetProperty("scheduledAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJob_AllParameters_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterJob> response = client.GetJob("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJob_AllParameters_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterJob> response = await client.GetJobAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteJob_ShortVersion()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.DeleteJob("<jobId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteJob_ShortVersion_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.DeleteJobAsync("<jobId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteJob_AllParameters()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.DeleteJob("<jobId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteJob_AllParameters_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.DeleteJobAsync("<jobId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueuePosition_ShortVersion()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.GetQueuePosition("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueuePosition_ShortVersion_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.GetQueuePositionAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueuePosition_ShortVersion_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterJobPositionDetails> response = client.GetQueuePosition("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueuePosition_ShortVersion_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterJobPositionDetails> response = await client.GetQueuePositionAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueuePosition_AllParameters()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.GetQueuePosition("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueuePosition_AllParameters_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.GetQueuePositionAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueuePosition_AllParameters_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterJobPositionDetails> response = client.GetQueuePosition("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueuePosition_AllParameters_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterJobPositionDetails> response = await client.GetQueuePositionAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcceptJobOffer_ShortVersion()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.AcceptJobOffer("<workerId>", "<offerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcceptJobOffer_ShortVersion_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.AcceptJobOfferAsync("<workerId>", "<offerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcceptJobOffer_ShortVersion_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<AcceptJobOfferResult> response = client.AcceptJobOffer("<workerId>", "<offerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcceptJobOffer_ShortVersion_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<AcceptJobOfferResult> response = await client.AcceptJobOfferAsync("<workerId>", "<offerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcceptJobOffer_AllParameters()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.AcceptJobOffer("<workerId>", "<offerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcceptJobOffer_AllParameters_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.AcceptJobOfferAsync("<workerId>", "<offerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcceptJobOffer_AllParameters_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<AcceptJobOfferResult> response = client.AcceptJobOffer("<workerId>", "<offerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcceptJobOffer_AllParameters_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<AcceptJobOfferResult> response = await client.AcceptJobOfferAsync("<workerId>", "<offerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueueStatistics_ShortVersion()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.GetQueueStatistics("<queueId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueueStatistics_ShortVersion_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.GetQueueStatisticsAsync("<queueId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueueStatistics_ShortVersion_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterQueueStatistics> response = client.GetQueueStatistics("<queueId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueueStatistics_ShortVersion_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterQueueStatistics> response = await client.GetQueueStatisticsAsync("<queueId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueueStatistics_AllParameters()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.GetQueueStatistics("<queueId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("longestJobWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueueStatistics_AllParameters_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.GetQueueStatisticsAsync("<queueId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("longestJobWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueueStatistics_AllParameters_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterQueueStatistics> response = client.GetQueueStatistics("<queueId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueueStatistics_AllParameters_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterQueueStatistics> response = await client.GetQueueStatisticsAsync("<queueId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorker_ShortVersion()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.GetWorker("<workerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorker_ShortVersion_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.GetWorkerAsync("<workerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorker_ShortVersion_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterWorker> response = client.GetWorker("<workerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorker_ShortVersion_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterWorker> response = await client.GetWorkerAsync("<workerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorker_AllParameters()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.GetWorker("<workerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("queues")[0].ToString());
            Console.WriteLine(result.GetProperty("capacity").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("channels")[0].GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("channels")[0].GetProperty("capacityCostPerJob").ToString());
            Console.WriteLine(result.GetProperty("channels")[0].GetProperty("maxNumberOfJobs").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("loadRatio").ToString());
            Console.WriteLine(result.GetProperty("availableForOffers").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorker_AllParameters_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.GetWorkerAsync("<workerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("queues")[0].ToString());
            Console.WriteLine(result.GetProperty("capacity").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("channels")[0].GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("channels")[0].GetProperty("capacityCostPerJob").ToString());
            Console.WriteLine(result.GetProperty("channels")[0].GetProperty("maxNumberOfJobs").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("loadRatio").ToString());
            Console.WriteLine(result.GetProperty("availableForOffers").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorker_AllParameters_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterWorker> response = client.GetWorker("<workerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorker_AllParameters_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response<RouterWorker> response = await client.GetWorkerAsync("<workerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWorker_ShortVersion()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.DeleteWorker("<workerId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWorker_ShortVersion_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.DeleteWorkerAsync("<workerId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWorker_AllParameters()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = client.DeleteWorker("<workerId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWorker_AllParameters_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            Response response = await client.DeleteWorkerAsync("<workerId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJobs_ShortVersion()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            foreach (BinaryData item in client.GetJobs(null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJobs_ShortVersion_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            await foreach (BinaryData item in client.GetJobsAsync(null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJobs_ShortVersion_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            foreach (RouterJob item in client.GetJobs())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJobs_ShortVersion_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            await foreach (RouterJob item in client.GetJobsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJobs_AllParameters()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            foreach (BinaryData item in client.GetJobs(1234, "all", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("channelReference").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
                Console.WriteLine(result.GetProperty("channelId").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
                Console.WriteLine(result.GetProperty("queueId").ToString());
                Console.WriteLine(result.GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("dispositionCode").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
                Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
                Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
                Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("notes")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("notes")[0].GetProperty("addedAt").ToString());
                Console.WriteLine(result.GetProperty("scheduledAt").ToString());
                Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJobs_AllParameters_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            await foreach (BinaryData item in client.GetJobsAsync(1234, "all", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("channelReference").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
                Console.WriteLine(result.GetProperty("channelId").ToString());
                Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
                Console.WriteLine(result.GetProperty("queueId").ToString());
                Console.WriteLine(result.GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("dispositionCode").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
                Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
                Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
                Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("notes")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("notes")[0].GetProperty("addedAt").ToString());
                Console.WriteLine(result.GetProperty("scheduledAt").ToString());
                Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJobs_AllParameters_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            foreach (RouterJob item in client.GetJobs(maxpagesize: 1234, status: RouterJobStatusSelector.All, queueId: "<queueId>", channelId: "<channelId>", classificationPolicyId: "<classificationPolicyId>", scheduledBefore: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), scheduledAfter: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJobs_AllParameters_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            await foreach (RouterJob item in client.GetJobsAsync(maxpagesize: 1234, status: RouterJobStatusSelector.All, queueId: "<queueId>", channelId: "<channelId>", classificationPolicyId: "<classificationPolicyId>", scheduledBefore: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), scheduledAfter: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkers_ShortVersion()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            foreach (BinaryData item in client.GetWorkers(null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkers_ShortVersion_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            await foreach (BinaryData item in client.GetWorkersAsync(null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkers_ShortVersion_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            foreach (RouterWorker item in client.GetWorkers())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkers_ShortVersion_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            await foreach (RouterWorker item in client.GetWorkersAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkers_AllParameters()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            foreach (BinaryData item in client.GetWorkers(1234, "active", "<channelId>", "<queueId>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("queues")[0].ToString());
                Console.WriteLine(result.GetProperty("capacity").ToString());
                Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("channels")[0].GetProperty("channelId").ToString());
                Console.WriteLine(result.GetProperty("channels")[0].GetProperty("capacityCostPerJob").ToString());
                Console.WriteLine(result.GetProperty("channels")[0].GetProperty("maxNumberOfJobs").ToString());
                Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
                Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
                Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
                Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
                Console.WriteLine(result.GetProperty("loadRatio").ToString());
                Console.WriteLine(result.GetProperty("availableForOffers").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkers_AllParameters_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            await foreach (BinaryData item in client.GetWorkersAsync(1234, "active", "<channelId>", "<queueId>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("queues")[0].ToString());
                Console.WriteLine(result.GetProperty("capacity").ToString());
                Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("channels")[0].GetProperty("channelId").ToString());
                Console.WriteLine(result.GetProperty("channels")[0].GetProperty("capacityCostPerJob").ToString());
                Console.WriteLine(result.GetProperty("channels")[0].GetProperty("maxNumberOfJobs").ToString());
                Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
                Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
                Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
                Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
                Console.WriteLine(result.GetProperty("loadRatio").ToString());
                Console.WriteLine(result.GetProperty("availableForOffers").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkers_AllParameters_Convenience()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            foreach (RouterWorker item in client.GetWorkers(maxpagesize: 1234, state: RouterWorkerStateSelector.Active, channelId: "<channelId>", queueId: "<queueId>", hasCapacity: true))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkers_AllParameters_Convenience_Async()
        {
            JobRouterClient client = new JobRouterClient((string)null);

            await foreach (RouterWorker item in client.GetWorkersAsync(maxpagesize: 1234, state: RouterWorkerStateSelector.Active, channelId: "<channelId>", queueId: "<queueId>", hasCapacity: true))
            {
            }
        }
    }
}
