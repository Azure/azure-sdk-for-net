// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Communication.JobRouter;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Communication.JobRouter.Samples
{
    public class Samples_JobRouterRestClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.UpsertJob("<id>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpsertJobAsync("<id>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                channelReference = "<channelReference>",
                channelId = "<channelId>",
                classificationPolicyId = "<classificationPolicyId>",
                queueId = "<queueId>",
                priority = 1234,
                dispositionCode = "<dispositionCode>",
                requestedWorkerSelectors = new List<object>()
{
new
{
key = "<key>",
labelOperator = "equal",
value = new object(),
expiresAfterSeconds = 123.45,
expedite = true,
}
},
                labels = new
                {
                    key = new object(),
                },
                tags = new
                {
                    key = new object(),
                },
                notes = new
                {
                    key = "<notes>",
                },
                matchingMode = new
                {
                    scheduleAt = "2022-05-10T14:57:31.2311892-04:00",
                    kind = "schedule-and-suspend",
                },
            });
            Response response = client.UpsertJob("<id>", content, requestConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("channelReference").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
            Console.WriteLine(result.GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("dispositionCode").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("notes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("scheduledAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                channelReference = "<channelReference>",
                channelId = "<channelId>",
                classificationPolicyId = "<classificationPolicyId>",
                queueId = "<queueId>",
                priority = 1234,
                dispositionCode = "<dispositionCode>",
                requestedWorkerSelectors = new List<object>()
{
new
{
key = "<key>",
labelOperator = "equal",
value = new object(),
expiresAfterSeconds = 123.45,
expedite = true,
}
},
                labels = new
                {
                    key = new object(),
                },
                tags = new
                {
                    key = new object(),
                },
                notes = new
                {
                    key = "<notes>",
                },
                matchingMode = new
                {
                    scheduleAt = "2022-05-10T14:57:31.2311892-04:00",
                    kind = "schedule-and-suspend",
                },
            });
            Response response = await client.UpsertJobAsync("<id>", content, requestConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("channelReference").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
            Console.WriteLine(result.GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("dispositionCode").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("notes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("scheduledAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.GetJob("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.GetJobAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterJob> response = client.GetJob("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterJob> response = await client.GetJobAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.GetJob("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("channelReference").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
            Console.WriteLine(result.GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("dispositionCode").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("notes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("scheduledAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.GetJobAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("channelReference").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
            Console.WriteLine(result.GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("dispositionCode").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("notes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("scheduledAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterJob> response = client.GetJob("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterJob> response = await client.GetJobAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.DeleteJob("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.DeleteJobAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.DeleteJob("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.DeleteJobAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReclassifyJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = null;
            Response response = client.ReclassifyJob("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReclassifyJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = null;
            Response response = await client.ReclassifyJobAsync("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReclassifyJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.ReclassifyJob("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReclassifyJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.ReclassifyJobAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReclassifyJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                key = "<reclassifyJobRequest>",
            });
            Response response = client.ReclassifyJob("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReclassifyJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                key = "<reclassifyJobRequest>",
            });
            Response response = await client.ReclassifyJobAsync("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReclassifyJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.ReclassifyJob("<id>", reclassifyJobRequest: new Dictionary<string, string>()
            {
                ["key"] = "<reclassifyJobRequest>",
            });
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReclassifyJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.ReclassifyJobAsync("<id>", reclassifyJobRequest: new Dictionary<string, string>()
            {
                ["key"] = "<reclassifyJobRequest>",
            });
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = null;
            Response response = client.CancelJob("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = null;
            Response response = await client.CancelJobAsync("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.CancelJob("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.CancelJobAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                note = "<note>",
                dispositionCode = "<dispositionCode>",
            });
            Response response = client.CancelJob("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                note = "<note>",
                dispositionCode = "<dispositionCode>",
            });
            Response response = await client.CancelJobAsync("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            CancelJobRequest cancelJobRequest = new CancelJobRequest()
            {
                Note = "<note>",
                DispositionCode = "<dispositionCode>",
            };
            Response response = client.CancelJob("<id>", cancelJobRequest: cancelJobRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            CancelJobRequest cancelJobRequest = new CancelJobRequest()
            {
                Note = "<note>",
                DispositionCode = "<dispositionCode>",
            };
            Response response = await client.CancelJobAsync("<id>", cancelJobRequest: cancelJobRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CompleteJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                assignmentId = "<assignmentId>",
            });
            Response response = client.CompleteJob("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CompleteJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                assignmentId = "<assignmentId>",
            });
            Response response = await client.CompleteJobAsync("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CompleteJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            CompleteJobRequest completeJobRequest = new CompleteJobRequest("<assignmentId>");
            Response response = client.CompleteJob("<id>", completeJobRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CompleteJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            CompleteJobRequest completeJobRequest = new CompleteJobRequest("<assignmentId>");
            Response response = await client.CompleteJobAsync("<id>", completeJobRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CompleteJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                assignmentId = "<assignmentId>",
                note = "<note>",
            });
            Response response = client.CompleteJob("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CompleteJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                assignmentId = "<assignmentId>",
                note = "<note>",
            });
            Response response = await client.CompleteJobAsync("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CompleteJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            CompleteJobRequest completeJobRequest = new CompleteJobRequest("<assignmentId>")
            {
                Note = "<note>",
            };
            Response response = client.CompleteJob("<id>", completeJobRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CompleteJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            CompleteJobRequest completeJobRequest = new CompleteJobRequest("<assignmentId>")
            {
                Note = "<note>",
            };
            Response response = await client.CompleteJobAsync("<id>", completeJobRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CloseJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                assignmentId = "<assignmentId>",
            });
            Response response = client.CloseJob("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CloseJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                assignmentId = "<assignmentId>",
            });
            Response response = await client.CloseJobAsync("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CloseJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            CloseJobRequest closeJobRequest = new CloseJobRequest("<assignmentId>");
            Response response = client.CloseJob("<id>", closeJobRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CloseJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            CloseJobRequest closeJobRequest = new CloseJobRequest("<assignmentId>");
            Response response = await client.CloseJobAsync("<id>", closeJobRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CloseJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                assignmentId = "<assignmentId>",
                dispositionCode = "<dispositionCode>",
                closeAt = "2022-05-10T14:57:31.2311892-04:00",
                note = "<note>",
            });
            Response response = client.CloseJob("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CloseJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                assignmentId = "<assignmentId>",
                dispositionCode = "<dispositionCode>",
                closeAt = "2022-05-10T14:57:31.2311892-04:00",
                note = "<note>",
            });
            Response response = await client.CloseJobAsync("<id>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CloseJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            CloseJobRequest closeJobRequest = new CloseJobRequest("<assignmentId>")
            {
                DispositionCode = "<dispositionCode>",
                CloseAt = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
                Note = "<note>",
            };
            Response response = client.CloseJob("<id>", closeJobRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CloseJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            CloseJobRequest closeJobRequest = new CloseJobRequest("<assignmentId>")
            {
                DispositionCode = "<dispositionCode>",
                CloseAt = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
                Note = "<note>",
            };
            Response response = await client.CloseJobAsync("<id>", closeJobRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueuePosition_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.GetQueuePosition("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueuePosition_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.GetQueuePositionAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueuePosition_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterJobPositionDetails> response = client.GetQueuePosition("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueuePosition_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterJobPositionDetails> response = await client.GetQueuePositionAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueuePosition_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.GetQueuePosition("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueuePosition_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.GetQueuePositionAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueuePosition_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterJobPositionDetails> response = client.GetQueuePosition("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueuePosition_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterJobPositionDetails> response = await client.GetQueuePositionAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnassignJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = null;
            Response response = client.UnassignJob("<id>", "<assignmentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnassignJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = null;
            Response response = await client.UnassignJobAsync("<id>", "<assignmentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnassignJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<UnassignJobResult> response = client.UnassignJob("<id>", "<assignmentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnassignJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<UnassignJobResult> response = await client.UnassignJobAsync("<id>", "<assignmentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnassignJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                suspendMatching = true,
            });
            Response response = client.UnassignJob("<id>", "<assignmentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnassignJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                suspendMatching = true,
            });
            Response response = await client.UnassignJobAsync("<id>", "<assignmentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnassignJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            UnassignJobRequest unassignJobRequest = new UnassignJobRequest()
            {
                SuspendMatching = true,
            };
            Response<UnassignJobResult> response = client.UnassignJob("<id>", "<assignmentId>", unassignJobRequest: unassignJobRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnassignJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            UnassignJobRequest unassignJobRequest = new UnassignJobRequest()
            {
                SuspendMatching = true,
            };
            Response<UnassignJobResult> response = await client.UnassignJobAsync("<id>", "<assignmentId>", unassignJobRequest: unassignJobRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcceptJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.AcceptJob("<workerId>", "<offerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcceptJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.AcceptJobAsync("<workerId>", "<offerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcceptJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<AcceptJobOfferResult> response = client.AcceptJob("<workerId>", "<offerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcceptJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<AcceptJobOfferResult> response = await client.AcceptJobAsync("<workerId>", "<offerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcceptJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.AcceptJob("<workerId>", "<offerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcceptJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.AcceptJobAsync("<workerId>", "<offerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcceptJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<AcceptJobOfferResult> response = client.AcceptJob("<workerId>", "<offerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcceptJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<AcceptJobOfferResult> response = await client.AcceptJobAsync("<workerId>", "<offerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeclineJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = null;
            Response response = client.DeclineJob("<workerId>", "<offerId>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeclineJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = null;
            Response response = await client.DeclineJobAsync("<workerId>", "<offerId>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeclineJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.DeclineJob("<workerId>", "<offerId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeclineJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.DeclineJobAsync("<workerId>", "<offerId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeclineJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                retryOfferAt = "2022-05-10T14:57:31.2311892-04:00",
            });
            Response response = client.DeclineJob("<workerId>", "<offerId>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeclineJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                retryOfferAt = "2022-05-10T14:57:31.2311892-04:00",
            });
            Response response = await client.DeclineJobAsync("<workerId>", "<offerId>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeclineJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            DeclineJobOfferRequest declineJobOfferRequest = new DeclineJobOfferRequest()
            {
                RetryOfferAt = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
            };
            Response response = client.DeclineJob("<workerId>", "<offerId>", declineJobOfferRequest: declineJobOfferRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeclineJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            DeclineJobOfferRequest declineJobOfferRequest = new DeclineJobOfferRequest()
            {
                RetryOfferAt = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
            };
            Response response = await client.DeclineJobAsync("<workerId>", "<offerId>", declineJobOfferRequest: declineJobOfferRequest);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueueStatistics_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.GetQueueStatistics("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueueStatistics_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.GetQueueStatisticsAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueueStatistics_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterQueueStatistics> response = client.GetQueueStatistics("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueueStatistics_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterQueueStatistics> response = await client.GetQueueStatisticsAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueueStatistics_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.GetQueueStatistics("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("longestJobWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueueStatistics_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.GetQueueStatisticsAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("longestJobWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueueStatistics_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterQueueStatistics> response = client.GetQueueStatistics("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueueStatistics_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterQueueStatistics> response = await client.GetQueueStatisticsAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertWorker_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.UpsertWorker("<workerId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertWorker_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpsertWorkerAsync("<workerId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertWorker_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                queueAssignments = new
                {
                    key = new object(),
                },
                totalCapacity = 1234,
                labels = new
                {
                    key = new object(),
                },
                tags = new
                {
                    key = new object(),
                },
                channelConfigurations = new
                {
                    key = new
                    {
                        capacityCostPerJob = 1234,
                        maxNumberOfJobs = 1234,
                    },
                },
                availableForOffers = true,
            });
            Response response = client.UpsertWorker("<workerId>", content, requestConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("totalCapacity").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("capacityCostPerJob").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("maxNumberOfJobs").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("loadRatio").ToString());
            Console.WriteLine(result.GetProperty("availableForOffers").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertWorker_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                queueAssignments = new
                {
                    key = new object(),
                },
                totalCapacity = 1234,
                labels = new
                {
                    key = new object(),
                },
                tags = new
                {
                    key = new object(),
                },
                channelConfigurations = new
                {
                    key = new
                    {
                        capacityCostPerJob = 1234,
                        maxNumberOfJobs = 1234,
                    },
                },
                availableForOffers = true,
            });
            Response response = await client.UpsertWorkerAsync("<workerId>", content, requestConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("totalCapacity").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("capacityCostPerJob").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("maxNumberOfJobs").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("loadRatio").ToString());
            Console.WriteLine(result.GetProperty("availableForOffers").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorker_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.GetWorker("<workerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorker_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.GetWorkerAsync("<workerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorker_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterWorker> response = client.GetWorker("<workerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorker_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterWorker> response = await client.GetWorkerAsync("<workerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorker_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.GetWorker("<workerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("totalCapacity").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("capacityCostPerJob").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("maxNumberOfJobs").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("loadRatio").ToString());
            Console.WriteLine(result.GetProperty("availableForOffers").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorker_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.GetWorkerAsync("<workerId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("totalCapacity").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("capacityCostPerJob").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("maxNumberOfJobs").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("loadRatio").ToString());
            Console.WriteLine(result.GetProperty("availableForOffers").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorker_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterWorker> response = client.GetWorker("<workerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorker_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response<RouterWorker> response = await client.GetWorkerAsync("<workerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWorker_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.DeleteWorker("<workerId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWorker_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.DeleteWorkerAsync("<workerId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWorker_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = client.DeleteWorker("<workerId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWorker_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            Response response = await client.DeleteWorkerAsync("<workerId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJobs_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            foreach (BinaryData item in client.GetJobs(null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("job").GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJobs_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            await foreach (BinaryData item in client.GetJobsAsync(null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("job").GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJobs_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            foreach (RouterJobItem item in client.GetJobs())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJobs_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            await foreach (RouterJobItem item in client.GetJobsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJobs_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            foreach (BinaryData item in client.GetJobs(1234, "all", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("job").GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("channelReference").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("status").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("enqueuedAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("channelId").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("classificationPolicyId").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("queueId").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("priority").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("dispositionCode").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("labels").GetProperty("<key>").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("notes").GetProperty("<key>").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("scheduledAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("matchingMode").GetProperty("kind").ToString());
                Console.WriteLine(result[0].GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJobs_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            await foreach (BinaryData item in client.GetJobsAsync(1234, "all", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("job").GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("channelReference").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("status").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("enqueuedAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("channelId").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("classificationPolicyId").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("queueId").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("priority").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("dispositionCode").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("labels").GetProperty("<key>").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("notes").GetProperty("<key>").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("scheduledAt").ToString());
                Console.WriteLine(result[0].GetProperty("job").GetProperty("matchingMode").GetProperty("kind").ToString());
                Console.WriteLine(result[0].GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJobs_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            foreach (RouterJobItem item in client.GetJobs(maxpagesize: 1234, status: RouterJobStatusSelector.All, queueId: "<queueId>", channelId: "<channelId>", classificationPolicyId: "<classificationPolicyId>", scheduledBefore: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), scheduledAfter: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJobs_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            await foreach (RouterJobItem item in client.GetJobsAsync(maxpagesize: 1234, status: RouterJobStatusSelector.All, queueId: "<queueId>", channelId: "<channelId>", classificationPolicyId: "<classificationPolicyId>", scheduledBefore: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), scheduledAfter: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkers_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            foreach (BinaryData item in client.GetWorkers(null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkers_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            await foreach (BinaryData item in client.GetWorkersAsync(null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkers_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            foreach (RouterWorkerItem item in client.GetWorkers())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkers_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            await foreach (RouterWorkerItem item in client.GetWorkersAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkers_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            foreach (BinaryData item in client.GetWorkers(1234, "active", "<channelId>", "<queueId>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("state").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("totalCapacity").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("labels").GetProperty("<key>").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("capacityCostPerJob").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("maxNumberOfJobs").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("offers")[0].GetProperty("offerId").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("offers")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("offers")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("offers")[0].GetProperty("offeredAt").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("offers")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("loadRatio").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("availableForOffers").ToString());
                Console.WriteLine(result[0].GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkers_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            await foreach (BinaryData item in client.GetWorkersAsync(1234, "active", "<channelId>", "<queueId>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("state").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("totalCapacity").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("labels").GetProperty("<key>").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("capacityCostPerJob").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<key>").GetProperty("maxNumberOfJobs").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("offers")[0].GetProperty("offerId").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("offers")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("offers")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("offers")[0].GetProperty("offeredAt").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("offers")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("loadRatio").ToString());
                Console.WriteLine(result[0].GetProperty("worker").GetProperty("availableForOffers").ToString());
                Console.WriteLine(result[0].GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkers_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            foreach (RouterWorkerItem item in client.GetWorkers(maxpagesize: 1234, state: RouterWorkerStateSelector.Active, channelId: "<channelId>", queueId: "<queueId>", hasCapacity: true))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkers_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            JobRouterRestClient client = new JobRouterRestClient(endpoint);

            await foreach (RouterWorkerItem item in client.GetWorkersAsync(maxpagesize: 1234, state: RouterWorkerStateSelector.Active, channelId: "<channelId>", queueId: "<queueId>", hasCapacity: true))
            {
            }
        }
    }
}
