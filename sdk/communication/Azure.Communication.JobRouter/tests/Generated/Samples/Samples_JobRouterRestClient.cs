// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Communication.JobRouter.Samples
{
    public class Samples_JobRouterRestClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertJob()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = client.UpsertJob("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertJob_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                channelReference = "<channelReference>",
                channelId = "<channelId>",
                classificationPolicyId = "<classificationPolicyId>",
                queueId = "<queueId>",
                priority = 1234,
                dispositionCode = "<dispositionCode>",
                requestedWorkerSelectors = new[] {
        new {
            key = "<key>",
            labelOperator = "equal",
            value = new {},
            expiresAfterSeconds = 123.45d,
            expedite = true,
        }
    },
                labels = new
                {
                    key = new { },
                },
                tags = new
                {
                    key = new { },
                },
                notes = new
                {
                    key = "<String>",
                },
                matchingMode = new
                {
                    modeType = "queueAndMatchMode",
                    queueAndMatchMode = new { },
                    scheduleAndSuspendMode = new
                    {
                        scheduleAt = "2022-05-10T14:57:31.2311892-04:00",
                    },
                    suspendMode = new { },
                },
            };

            Response response = client.UpsertJob("<id>", RequestContent.Create(data), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("channelReference").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
            Console.WriteLine(result.GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("dispositionCode").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("notes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("scheduledAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("modeType").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("suspendMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertJob_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = await client.UpsertJobAsync("<id>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertJob_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                channelReference = "<channelReference>",
                channelId = "<channelId>",
                classificationPolicyId = "<classificationPolicyId>",
                queueId = "<queueId>",
                priority = 1234,
                dispositionCode = "<dispositionCode>",
                requestedWorkerSelectors = new[] {
        new {
            key = "<key>",
            labelOperator = "equal",
            value = new {},
            expiresAfterSeconds = 123.45d,
            expedite = true,
        }
    },
                labels = new
                {
                    key = new { },
                },
                tags = new
                {
                    key = new { },
                },
                notes = new
                {
                    key = "<String>",
                },
                matchingMode = new
                {
                    modeType = "queueAndMatchMode",
                    queueAndMatchMode = new { },
                    scheduleAndSuspendMode = new
                    {
                        scheduleAt = "2022-05-10T14:57:31.2311892-04:00",
                    },
                    suspendMode = new { },
                },
            };

            Response response = await client.UpsertJobAsync("<id>", RequestContent.Create(data), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("channelReference").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
            Console.WriteLine(result.GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("dispositionCode").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("notes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("scheduledAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("modeType").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("suspendMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJob()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.GetJob("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJob_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.GetJob("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("channelReference").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
            Console.WriteLine(result.GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("dispositionCode").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("notes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("scheduledAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("modeType").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("suspendMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJob_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.GetJobAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJob_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.GetJobAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("channelReference").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
            Console.WriteLine(result.GetProperty("channelId").ToString());
            Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("dispositionCode").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("notes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("scheduledAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("modeType").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
            Console.WriteLine(result.GetProperty("matchingMode").GetProperty("suspendMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJob_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var result = await client.GetJobAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteJob()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.DeleteJob("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteJob_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.DeleteJob("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteJob_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.DeleteJobAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteJob_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.DeleteJobAsync("<id>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReclassifyJob()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = client.ReclassifyJob("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReclassifyJob_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = client.ReclassifyJob("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReclassifyJob_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = await client.ReclassifyJobAsync("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReclassifyJob_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = await client.ReclassifyJobAsync("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelJob()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = client.CancelJob("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelJob_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                note = "<note>",
                dispositionCode = "<dispositionCode>",
            };

            Response response = client.CancelJob("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelJob_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = await client.CancelJobAsync("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelJob_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                note = "<note>",
                dispositionCode = "<dispositionCode>",
            };

            Response response = await client.CancelJobAsync("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelJob_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var cancelJobRequest = new CancelJobRequest()
            {
                Note = "<Note>",
                DispositionCode = "<DispositionCode>",
            };
            var result = await client.CancelJobAsync("<id>", cancelJobRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CompleteJob()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                assignmentId = "<assignmentId>",
            };

            Response response = client.CompleteJob("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CompleteJob_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                assignmentId = "<assignmentId>",
                note = "<note>",
            };

            Response response = client.CompleteJob("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CompleteJob_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                assignmentId = "<assignmentId>",
            };

            Response response = await client.CompleteJobAsync("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CompleteJob_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                assignmentId = "<assignmentId>",
                note = "<note>",
            };

            Response response = await client.CompleteJobAsync("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CompleteJob_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var completeJobRequest = new CompleteJobRequest("<assignmentId>")
            {
                Note = "<Note>",
            };
            var result = await client.CompleteJobAsync("<id>", completeJobRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CloseJob()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                assignmentId = "<assignmentId>",
            };

            Response response = client.CloseJob("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CloseJob_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                assignmentId = "<assignmentId>",
                dispositionCode = "<dispositionCode>",
                closeAt = "2022-05-10T14:57:31.2311892-04:00",
                note = "<note>",
            };

            Response response = client.CloseJob("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CloseJob_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                assignmentId = "<assignmentId>",
            };

            Response response = await client.CloseJobAsync("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CloseJob_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                assignmentId = "<assignmentId>",
                dispositionCode = "<dispositionCode>",
                closeAt = "2022-05-10T14:57:31.2311892-04:00",
                note = "<note>",
            };

            Response response = await client.CloseJobAsync("<id>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CloseJob_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var closeJobRequest = new CloseJobRequest("<assignmentId>")
            {
                DispositionCode = "<DispositionCode>",
                CloseAt = DateTimeOffset.UtcNow,
                Note = "<Note>",
            };
            var result = await client.CloseJobAsync("<id>", closeJobRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueuePosition()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.GetQueuePosition("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueuePosition_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.GetQueuePosition("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueuePosition_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.GetQueuePositionAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueuePosition_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.GetQueuePositionAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("position").ToString());
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("queueLength").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueuePosition_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var result = await client.GetQueuePositionAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnassignJob()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = client.UnassignJob("<id>", "<assignmentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnassignJob_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                suspendMatching = true,
            };

            Response response = client.UnassignJob("<id>", "<assignmentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnassignJob_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = await client.UnassignJobAsync("<id>", "<assignmentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnassignJob_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                suspendMatching = true,
            };

            Response response = await client.UnassignJobAsync("<id>", "<assignmentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnassignJob_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var unassignJobRequest = new UnassignJobRequest()
            {
                SuspendMatching = true,
            };
            var result = await client.UnassignJobAsync("<id>", "<assignmentId>", unassignJobRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcceptJob()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.AcceptJob("<workerId>", "<offerId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcceptJob_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.AcceptJob("<workerId>", "<offerId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcceptJob_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.AcceptJobAsync("<workerId>", "<offerId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcceptJob_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.AcceptJobAsync("<workerId>", "<offerId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("workerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcceptJob_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var result = await client.AcceptJobAsync("<workerId>", "<offerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeclineJob()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = client.DeclineJob("<workerId>", "<offerId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeclineJob_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                retryOfferAt = "2022-05-10T14:57:31.2311892-04:00",
            };

            Response response = client.DeclineJob("<workerId>", "<offerId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeclineJob_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = await client.DeclineJobAsync("<workerId>", "<offerId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeclineJob_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                retryOfferAt = "2022-05-10T14:57:31.2311892-04:00",
            };

            Response response = await client.DeclineJobAsync("<workerId>", "<offerId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeclineJob_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var declineJobOfferRequest = new DeclineJobOfferRequest()
            {
                RetryOfferAt = DateTimeOffset.UtcNow,
            };
            var result = await client.DeclineJobAsync("<workerId>", "<offerId>", declineJobOfferRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueueStatistics()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.GetQueueStatistics("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQueueStatistics_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.GetQueueStatistics("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("longestJobWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueueStatistics_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.GetQueueStatisticsAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueueStatistics_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.GetQueueStatisticsAsync("<id>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("queueId").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("longestJobWaitTimeMinutes").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQueueStatistics_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var result = await client.GetQueueStatisticsAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertWorker()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = client.UpsertWorker("<workerId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpsertWorker_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                queueAssignments = new
                {
                    key = new { },
                },
                totalCapacity = 1234,
                labels = new
                {
                    key = new { },
                },
                tags = new
                {
                    key = new { },
                },
                channelConfigurations = new
                {
                    key = new
                    {
                        capacityCostPerJob = 1234,
                        maxNumberOfJobs = 1234,
                    },
                },
                availableForOffers = true,
            };

            Response response = client.UpsertWorker("<workerId>", RequestContent.Create(data), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("queueAssignments").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("totalCapacity").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("loadRatio").ToString());
            Console.WriteLine(result.GetProperty("availableForOffers").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertWorker_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new { };

            Response response = await client.UpsertWorkerAsync("<workerId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpsertWorker_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var data = new
            {
                queueAssignments = new
                {
                    key = new { },
                },
                totalCapacity = 1234,
                labels = new
                {
                    key = new { },
                },
                tags = new
                {
                    key = new { },
                },
                channelConfigurations = new
                {
                    key = new
                    {
                        capacityCostPerJob = 1234,
                        maxNumberOfJobs = 1234,
                    },
                },
                availableForOffers = true,
            };

            Response response = await client.UpsertWorkerAsync("<workerId>", RequestContent.Create(data), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("queueAssignments").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("totalCapacity").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("loadRatio").ToString());
            Console.WriteLine(result.GetProperty("availableForOffers").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorker()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.GetWorker("<workerId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorker_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.GetWorker("<workerId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("queueAssignments").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("totalCapacity").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("loadRatio").ToString());
            Console.WriteLine(result.GetProperty("availableForOffers").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorker_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.GetWorkerAsync("<workerId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorker_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.GetWorkerAsync("<workerId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("queueAssignments").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("totalCapacity").ToString());
            Console.WriteLine(result.GetProperty("labels").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
            Console.WriteLine(result.GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
            Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
            Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
            Console.WriteLine(result.GetProperty("loadRatio").ToString());
            Console.WriteLine(result.GetProperty("availableForOffers").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorker_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            var result = await client.GetWorkerAsync("<workerId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWorker()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.DeleteWorker("<workerId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWorker_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = client.DeleteWorker("<workerId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWorker_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.DeleteWorkerAsync("<workerId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWorker_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            Response response = await client.DeleteWorkerAsync("<workerId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJobs()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            foreach (var item in client.GetJobs("<status>", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("job").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJobs_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            foreach (var item in client.GetJobs("<status>", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("job").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("channelReference").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("enqueuedAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("channelId").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("classificationPolicyId").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("queueId").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("dispositionCode").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("labels").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("tags").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("notes").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("scheduledAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("modeType").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("suspendMode").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJobs_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            await foreach (var item in client.GetJobsAsync("<status>", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("job").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJobs_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            await foreach (var item in client.GetJobsAsync("<status>", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("job").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("channelReference").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("enqueuedAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("channelId").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("classificationPolicyId").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("queueId").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("dispositionCode").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("labels").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("assignmentId").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("workerId").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("assignedAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("assignments").GetProperty("<test>").GetProperty("closedAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("tags").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("notes").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("scheduledAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("modeType").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("queueAndMatchMode").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("scheduleAndSuspendMode").GetProperty("scheduleAt").ToString());
                Console.WriteLine(result.GetProperty("job").GetProperty("matchingMode").GetProperty("suspendMode").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJobs_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            await foreach (var item in client.GetJobsAsync(null, "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkers()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            foreach (var item in client.GetWorkers("<state>", "<channelId>", "<queueId>", true, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("worker").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkers_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            foreach (var item in client.GetWorkers("<state>", "<channelId>", "<queueId>", true, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("worker").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("queueAssignments").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("totalCapacity").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("labels").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("tags").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("offerId").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("offeredAt").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("loadRatio").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("availableForOffers").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkers_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            await foreach (var item in client.GetWorkersAsync("<state>", "<channelId>", "<queueId>", true, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("worker").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkers_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            await foreach (var item in client.GetWorkersAsync("<state>", "<channelId>", "<queueId>", true, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("worker").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("queueAssignments").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("totalCapacity").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("labels").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("tags").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("capacityCostPerJob").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("channelConfigurations").GetProperty("<test>").GetProperty("maxNumberOfJobs").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("offerId").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("offeredAt").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("offers")[0].GetProperty("expiresAt").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("loadRatio").ToString());
                Console.WriteLine(result.GetProperty("worker").GetProperty("availableForOffers").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkers_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new JobRouterRestClient(endpoint);

            await foreach (var item in client.GetWorkersAsync(null, "<channelId>", "<queueId>", true, 1234))
            {
            }
        }
    }
}
