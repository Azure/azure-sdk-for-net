// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Communication.JobRouter
{
    /// <summary>
    /// Describes multiple sets of queue selectors, of which one will be selected and
    /// attached according to a weighting
    /// </summary>
    public partial class WeightedAllocationQueueSelectorAttachment : QueueSelectorAttachment
    {
        /// <summary> Initializes a new instance of WeightedAllocationQueueSelectorAttachment. </summary>
        /// <param name="allocations"> A collection of percentage based weighted allocations. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="allocations"/> is null. </exception>
        internal WeightedAllocationQueueSelectorAttachment(IEnumerable<QueueWeightedAllocation> allocations)
        {
            Argument.AssertNotNull(allocations, nameof(allocations));

            Kind = "weighted-allocation-queue-selector";
            Allocations = allocations.ToList();
        }

        /// <summary> Initializes a new instance of WeightedAllocationQueueSelectorAttachment. </summary>
        /// <param name="kind"> Discriminator. </param>
        /// <param name="allocations"> A collection of percentage based weighted allocations. </param>
        internal WeightedAllocationQueueSelectorAttachment(string kind, IReadOnlyList<QueueWeightedAllocation> allocations) : base(kind)
        {
            Allocations = allocations;
        }

        /// <summary> A collection of percentage based weighted allocations. </summary>
        public IReadOnlyList<QueueWeightedAllocation> Allocations { get; }
    }
}
