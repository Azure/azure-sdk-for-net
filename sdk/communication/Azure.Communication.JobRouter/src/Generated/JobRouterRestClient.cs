// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Communication.JobRouter.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.JobRouter
{
    internal partial class JobRouterRestClient
    {
        private string endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of JobRouterRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public JobRouterRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string apiVersion = "2021-04-07-preview1")
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateCreateOrUpdateChannelRequest(UpsertChannelRequest body, string ifMatch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/channels", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            if (ifMatch != null)
            {
                request.Headers.Add("if-Match", ifMatch);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Creates or updates a channel. </summary>
        /// <param name="body"> Model of channel to be created or updated. </param>
        /// <param name="ifMatch"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<UpsertChannelResponse>> CreateOrUpdateChannelAsync(UpsertChannelRequest body, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateChannelRequest(body, ifMatch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpsertChannelResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UpsertChannelResponse.DeserializeUpsertChannelResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates or updates a channel. </summary>
        /// <param name="body"> Model of channel to be created or updated. </param>
        /// <param name="ifMatch"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<UpsertChannelResponse> CreateOrUpdateChannel(UpsertChannelRequest body, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateChannelRequest(body, ifMatch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpsertChannelResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UpsertChannelResponse.DeserializeUpsertChannelResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListChannelsRequest(string type, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/channels", false);
            if (type != null)
            {
                uri.AppendQuery("type", type, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves custom channels. </summary>
        /// <param name="type"> Specifies Managed Channels or Custom Channels, left blank returns all channels. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ChannelCollection>> ListChannelsAsync(string type = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListChannelsRequest(type, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ChannelCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ChannelCollection.DeserializeChannelCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves custom channels. </summary>
        /// <param name="type"> Specifies Managed Channels or Custom Channels, left blank returns all channels. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ChannelCollection> ListChannels(string type = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListChannelsRequest(type, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ChannelCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ChannelCollection.DeserializeChannelCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetChannelRequest(string id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/channels/", false);
            uri.AppendPath(id, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves an existing channel by Id. </summary>
        /// <param name="id"> Id of the channel to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response<RouterChannel>> GetChannelAsync(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetChannelRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterChannel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RouterChannel.DeserializeRouterChannel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves an existing channel by Id. </summary>
        /// <param name="id"> Id of the channel to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response<RouterChannel> GetChannel(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetChannelRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterChannel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RouterChannel.DeserializeRouterChannel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteChannelRequest(string id, string ifMatch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/channels/", false);
            uri.AppendPath(id, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            if (ifMatch != null)
            {
                request.Headers.Add("if-Match", ifMatch);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a channel by Id. </summary>
        /// <param name="id"> Id of the channel to delete. </param>
        /// <param name="ifMatch"> Concurrency token for CosmosDB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response> DeleteChannelAsync(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteChannelRequest(id, ifMatch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a channel by Id. </summary>
        /// <param name="id"> Id of the channel to delete. </param>
        /// <param name="ifMatch"> Concurrency token for CosmosDB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response DeleteChannel(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteChannelRequest(id, ifMatch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateClassificationPolicyRequest(UpsertClassificationPolicyRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/classificationpolicies", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new classification policy. </summary>
        /// <param name="body"> The UpsertClassificationPolicyRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<UpsertClassificationPolicyResponse>> CreateOrUpdateClassificationPolicyAsync(UpsertClassificationPolicyRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateClassificationPolicyRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpsertClassificationPolicyResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UpsertClassificationPolicyResponse.DeserializeUpsertClassificationPolicyResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new classification policy. </summary>
        /// <param name="body"> The UpsertClassificationPolicyRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<UpsertClassificationPolicyResponse> CreateOrUpdateClassificationPolicy(UpsertClassificationPolicyRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateClassificationPolicyRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpsertClassificationPolicyResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UpsertClassificationPolicyResponse.DeserializeUpsertClassificationPolicyResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListClassificationPoliciesRequest(int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/classificationpolicies", false);
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing classification policies. </summary>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ClassificationPolicyCollection>> ListClassificationPoliciesAsync(int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListClassificationPoliciesRequest(maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClassificationPolicyCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ClassificationPolicyCollection.DeserializeClassificationPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing classification policies. </summary>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ClassificationPolicyCollection> ListClassificationPolicies(int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListClassificationPoliciesRequest(maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClassificationPolicyCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ClassificationPolicyCollection.DeserializeClassificationPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetClassificationPolicyRequest(string id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/classificationpolicies/", false);
            uri.AppendPath(id, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves an existing classification policy by Id. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response<ClassificationPolicy>> GetClassificationPolicyAsync(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetClassificationPolicyRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClassificationPolicy value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ClassificationPolicy.DeserializeClassificationPolicy(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves an existing classification policy by Id. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response<ClassificationPolicy> GetClassificationPolicy(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetClassificationPolicyRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClassificationPolicy value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ClassificationPolicy.DeserializeClassificationPolicy(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteClassificationPolicyRequest(string id, string ifMatch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/classificationpolicies/", false);
            uri.AppendPath(id, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            if (ifMatch != null)
            {
                request.Headers.Add("if-Match", ifMatch);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a classification policy by Id. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="ifMatch"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response> DeleteClassificationPolicyAsync(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteClassificationPolicyRequest(id, ifMatch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a classification policy by Id. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="ifMatch"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response DeleteClassificationPolicy(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteClassificationPolicyRequest(id, ifMatch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateDistributionPolicyRequest(UpsertDistributionPolicyRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/distributionpolicies", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new distribution policy. </summary>
        /// <param name="body"> The UpsertDistributionPolicyRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<UpsertDistributionPolicyResponse>> CreateOrUpdateDistributionPolicyAsync(UpsertDistributionPolicyRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateDistributionPolicyRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpsertDistributionPolicyResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UpsertDistributionPolicyResponse.DeserializeUpsertDistributionPolicyResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new distribution policy. </summary>
        /// <param name="body"> The UpsertDistributionPolicyRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<UpsertDistributionPolicyResponse> CreateOrUpdateDistributionPolicy(UpsertDistributionPolicyRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateDistributionPolicyRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpsertDistributionPolicyResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UpsertDistributionPolicyResponse.DeserializeUpsertDistributionPolicyResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListDistributionPoliciesRequest(int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/distributionpolicies", false);
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing distribution policies. </summary>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<DistributionPolicyCollection>> ListDistributionPoliciesAsync(int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListDistributionPoliciesRequest(maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DistributionPolicyCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DistributionPolicyCollection.DeserializeDistributionPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing distribution policies. </summary>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DistributionPolicyCollection> ListDistributionPolicies(int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListDistributionPoliciesRequest(maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DistributionPolicyCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DistributionPolicyCollection.DeserializeDistributionPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDistributionPolicyRequest(string id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/distributionpolicies/", false);
            uri.AppendPath(id, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves an existing distribution policy by Id. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response<DistributionPolicy>> GetDistributionPolicyAsync(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetDistributionPolicyRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DistributionPolicy value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DistributionPolicy.DeserializeDistributionPolicy(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves an existing distribution policy by Id. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response<DistributionPolicy> GetDistributionPolicy(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetDistributionPolicyRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DistributionPolicy value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DistributionPolicy.DeserializeDistributionPolicy(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDistributionPolicyRequest(string id, string ifMatch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/distributionpolicies/", false);
            uri.AppendPath(id, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            if (ifMatch != null)
            {
                request.Headers.Add("if-Match", ifMatch);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a distribution policy by Id. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="ifMatch"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response> DeleteDistributionPolicyAsync(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteDistributionPolicyRequest(id, ifMatch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a distribution policy by Id. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="ifMatch"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response DeleteDistributionPolicy(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteDistributionPolicyRequest(id, ifMatch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateExceptionPolicyRequest(UpsertExceptionPolicyRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/exceptionpolicies", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new exception policy. </summary>
        /// <param name="body"> Model of Exception Policy to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<UpsertExceptionPolicyResponse>> CreateOrUpdateExceptionPolicyAsync(UpsertExceptionPolicyRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateExceptionPolicyRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpsertExceptionPolicyResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UpsertExceptionPolicyResponse.DeserializeUpsertExceptionPolicyResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new exception policy. </summary>
        /// <param name="body"> Model of Exception Policy to be created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<UpsertExceptionPolicyResponse> CreateOrUpdateExceptionPolicy(UpsertExceptionPolicyRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateExceptionPolicyRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpsertExceptionPolicyResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UpsertExceptionPolicyResponse.DeserializeUpsertExceptionPolicyResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListExceptionPoliciesRequest(int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/exceptionpolicies", false);
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing exception policies. </summary>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ExceptionPolicyCollection>> ListExceptionPoliciesAsync(int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListExceptionPoliciesRequest(maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ExceptionPolicyCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionPolicyCollection.DeserializeExceptionPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing exception policies. </summary>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ExceptionPolicyCollection> ListExceptionPolicies(int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListExceptionPoliciesRequest(maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ExceptionPolicyCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionPolicyCollection.DeserializeExceptionPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetExceptionPolicyRequest(string id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/exceptionpolicies/", false);
            uri.AppendPath(id, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves an existing exception policy by Id. </summary>
        /// <param name="id"> Id of the exception policy to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response<ExceptionPolicy>> GetExceptionPolicyAsync(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetExceptionPolicyRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ExceptionPolicy value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionPolicy.DeserializeExceptionPolicy(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves an existing exception policy by Id. </summary>
        /// <param name="id"> Id of the exception policy to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response<ExceptionPolicy> GetExceptionPolicy(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetExceptionPolicyRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ExceptionPolicy value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionPolicy.DeserializeExceptionPolicy(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteExceptionPolicyRequest(string id, string ifMatch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/exceptionpolicies/", false);
            uri.AppendPath(id, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            if (ifMatch != null)
            {
                request.Headers.Add("if-Match", ifMatch);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a exception policy by Id. </summary>
        /// <param name="id"> Id of the exception policy to delete. </param>
        /// <param name="ifMatch"> Concurrency token for CosmosDB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response> DeleteExceptionPolicyAsync(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteExceptionPolicyRequest(id, ifMatch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a exception policy by Id. </summary>
        /// <param name="id"> Id of the exception policy to delete. </param>
        /// <param name="ifMatch"> Concurrency token for CosmosDB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response DeleteExceptionPolicy(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteExceptionPolicyRequest(id, ifMatch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateJobRequest(CreateJobRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/jobs", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new job to be routed. </summary>
        /// <param name="body"> The CreateJobRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<CreateJobResponse>> CreateJobAsync(CreateJobRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateJobRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        CreateJobResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CreateJobResponse.DeserializeCreateJobResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new job to be routed. </summary>
        /// <param name="body"> The CreateJobRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<CreateJobResponse> CreateJob(CreateJobRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateJobRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        CreateJobResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CreateJobResponse.DeserializeCreateJobResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListJobsRequest(JobStateSelector? status, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/jobs", false);
            if (status != null)
            {
                uri.AppendQuery("status", status.Value.ToSerialString(), true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves list of jobs based on filter parameters. </summary>
        /// <param name="status"> (Optional) If specified, filter jobs by status. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<JobCollection>> ListJobsAsync(JobStateSelector? status = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListJobsRequest(status, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves list of jobs based on filter parameters. </summary>
        /// <param name="status"> (Optional) If specified, filter jobs by status. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<JobCollection> ListJobs(JobStateSelector? status = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListJobsRequest(status, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetJobRequest(string jobId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/jobs/", false);
            uri.AppendPath(jobId, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves an existing job by Id. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public async Task<Response<RouterJob>> GetJobAsync(string jobId, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            using var message = CreateGetJobRequest(jobId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterJob value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RouterJob.DeserializeRouterJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves an existing job by Id. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public Response<RouterJob> GetJob(string jobId, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            using var message = CreateGetJobRequest(jobId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterJob value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RouterJob.DeserializeRouterJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListEnqueuedJobsRequest(string queueId, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/queues/", false);
            uri.AppendPath(queueId, true);
            uri.AppendPath("/jobs", false);
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing jobs by queue. </summary>
        /// <param name="queueId"> The String to use. </param>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queueId"/> is null. </exception>
        public async Task<Response<JobCollection>> ListEnqueuedJobsAsync(string queueId, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (queueId == null)
            {
                throw new ArgumentNullException(nameof(queueId));
            }

            using var message = CreateListEnqueuedJobsRequest(queueId, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing jobs by queue. </summary>
        /// <param name="queueId"> The String to use. </param>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queueId"/> is null. </exception>
        public Response<JobCollection> ListEnqueuedJobs(string queueId, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (queueId == null)
            {
                throw new ArgumentNullException(nameof(queueId));
            }

            using var message = CreateListEnqueuedJobsRequest(queueId, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateJobLabelsRequest(string jobId, IDictionary<string, object> labels, string note)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/updatelabels", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new UpdateJobLabelsRequest(labels)
            {
                Note = note
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Update or insert labels of a job by Id. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="labels"> A set of key/value pairs used as metadata for a job. </param>
        /// <param name="note"> (Optional) Customer supplied note. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="labels"/> is null. </exception>
        public async Task<Response<RouterJob>> UpdateJobLabelsAsync(string jobId, IDictionary<string, object> labels, string note = null, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (labels == null)
            {
                throw new ArgumentNullException(nameof(labels));
            }

            using var message = CreateUpdateJobLabelsRequest(jobId, labels, note);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterJob value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RouterJob.DeserializeRouterJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update or insert labels of a job by Id. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="labels"> A set of key/value pairs used as metadata for a job. </param>
        /// <param name="note"> (Optional) Customer supplied note. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="labels"/> is null. </exception>
        public Response<RouterJob> UpdateJobLabels(string jobId, IDictionary<string, object> labels, string note = null, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (labels == null)
            {
                throw new ArgumentNullException(nameof(labels));
            }

            using var message = CreateUpdateJobLabelsRequest(jobId, labels, note);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterJob value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RouterJob.DeserializeRouterJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateReclassifyJobRequest(string jobId, ReclassifyJobRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/reclassify", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Updates an existing job by Id and forcing it to be reclassified.
        /// 
        /// The following attributes can be updated:
        /// 
        /// 1. ClassificationPolicyId: (Optional) The classification policy that will determine queue, priority and required abilities.
        /// 
        /// 2. LabelsToUpsert: (Optional) Update or insert labels associated to a job.
        /// </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="body"> The ReclassifyJobRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<RouterJob>> ReclassifyJobAsync(string jobId, ReclassifyJobRequest body, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateReclassifyJobRequest(jobId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterJob value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RouterJob.DeserializeRouterJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Updates an existing job by Id and forcing it to be reclassified.
        /// 
        /// The following attributes can be updated:
        /// 
        /// 1. ClassificationPolicyId: (Optional) The classification policy that will determine queue, priority and required abilities.
        /// 
        /// 2. LabelsToUpsert: (Optional) Update or insert labels associated to a job.
        /// </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="body"> The ReclassifyJobRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="body"/> is null. </exception>
        public Response<RouterJob> ReclassifyJob(string jobId, ReclassifyJobRequest body, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateReclassifyJobRequest(jobId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterJob value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RouterJob.DeserializeRouterJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateJobClassificationRequest(string jobId, string queueId, int? priority, IEnumerable<LabelSelector> workerSelectors, string note)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/updateclassification", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new UpdateJobClassificationRequest()
            {
                QueueId = queueId,
                Priority = priority,
                WorkerSelectors = workerSelectors?.ToList(),
                Note = note
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Updates an existing job&apos;s queueId, priority, requiredAbilities and labels.
        /// 
        /// The following attributes can be updated:
        /// 
        /// 1. QueuedId: (Optional) Can be used to assign a job to particular queue.
        /// 
        /// 2. Priority: (Optional) Can be used to set job priority.
        /// 
        /// 3. RequiredAbilities: (Optional) Can be used to set required abilities on a job. Note, that all previous abilities will be overridden.
        /// </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="queueId"> Updated QueueId. </param>
        /// <param name="priority"> Updated Priority. </param>
        /// <param name="workerSelectors"> Updated WorkerSelectors. </param>
        /// <param name="note"> (Optional) Customer supplied note. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public async Task<Response<RouterJob>> UpdateJobClassificationAsync(string jobId, string queueId = null, int? priority = null, IEnumerable<LabelSelector> workerSelectors = null, string note = null, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            using var message = CreateUpdateJobClassificationRequest(jobId, queueId, priority, workerSelectors, note);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterJob value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RouterJob.DeserializeRouterJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Updates an existing job&apos;s queueId, priority, requiredAbilities and labels.
        /// 
        /// The following attributes can be updated:
        /// 
        /// 1. QueuedId: (Optional) Can be used to assign a job to particular queue.
        /// 
        /// 2. Priority: (Optional) Can be used to set job priority.
        /// 
        /// 3. RequiredAbilities: (Optional) Can be used to set required abilities on a job. Note, that all previous abilities will be overridden.
        /// </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="queueId"> Updated QueueId. </param>
        /// <param name="priority"> Updated Priority. </param>
        /// <param name="workerSelectors"> Updated WorkerSelectors. </param>
        /// <param name="note"> (Optional) Customer supplied note. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public Response<RouterJob> UpdateJobClassification(string jobId, string queueId = null, int? priority = null, IEnumerable<LabelSelector> workerSelectors = null, string note = null, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            using var message = CreateUpdateJobClassificationRequest(jobId, queueId, priority, workerSelectors, note);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterJob value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RouterJob.DeserializeRouterJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCancelJobRequest(string jobId, string note, string dispositionCode)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/cancel", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new CancelJobRequest()
            {
                Note = note,
                DispositionCode = dispositionCode
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Submits request to cancel an existing job by Id while supplying free-form cancellation reason. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="note"> (Optional) Customer supplied note, e.g., cancellation reason. </param>
        /// <param name="dispositionCode">
        /// (Optional) Customer supplied disposition code for specifying any short label
        /// 
        /// If not provided, default value of &quot;CancelledByUser&quot; is set.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public async Task<Response> CancelJobAsync(string jobId, string note = null, string dispositionCode = null, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            using var message = CreateCancelJobRequest(jobId, note, dispositionCode);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Submits request to cancel an existing job by Id while supplying free-form cancellation reason. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="note"> (Optional) Customer supplied note, e.g., cancellation reason. </param>
        /// <param name="dispositionCode">
        /// (Optional) Customer supplied disposition code for specifying any short label
        /// 
        /// If not provided, default value of &quot;CancelledByUser&quot; is set.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public Response CancelJob(string jobId, string note = null, string dispositionCode = null, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            using var message = CreateCancelJobRequest(jobId, note, dispositionCode);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCompleteJobRequest(string jobId, string assignmentId, string note)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/complete", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new CompleteJobRequest(assignmentId)
            {
                Note = note
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Completes an assigned job. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="assignmentId"> The assignment within the job to complete. </param>
        /// <param name="note"> (Optional) Customer supplied note. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="assignmentId"/> is null. </exception>
        public async Task<Response> CompleteJobAsync(string jobId, string assignmentId, string note = null, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (assignmentId == null)
            {
                throw new ArgumentNullException(nameof(assignmentId));
            }

            using var message = CreateCompleteJobRequest(jobId, assignmentId, note);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Completes an assigned job. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="assignmentId"> The assignment within the job to complete. </param>
        /// <param name="note"> (Optional) Customer supplied note. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="assignmentId"/> is null. </exception>
        public Response CompleteJob(string jobId, string assignmentId, string note = null, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (assignmentId == null)
            {
                throw new ArgumentNullException(nameof(assignmentId));
            }

            using var message = CreateCompleteJobRequest(jobId, assignmentId, note);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCloseJobRequest(string jobId, string assignmentId, string dispositionCode, DateTimeOffset? releaseTime, string note)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/close", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new CloseJobRequest(assignmentId)
            {
                DispositionCode = dispositionCode,
                ReleaseTime = releaseTime,
                Note = note
            };
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Closes a completed job. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="assignmentId"> The assignment within which the job is to be closed. </param>
        /// <param name="dispositionCode"> Indicates the outcome of the job, populate this field with your own custom values. </param>
        /// <param name="releaseTime">
        /// If not provided, capacity will be released immediately.
        /// 
        /// If provided, the future time at which to release the capacity.
        /// </param>
        /// <param name="note"> (Optional) Customer supplied note. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="assignmentId"/> is null. </exception>
        public async Task<Response> CloseJobAsync(string jobId, string assignmentId, string dispositionCode = null, DateTimeOffset? releaseTime = null, string note = null, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (assignmentId == null)
            {
                throw new ArgumentNullException(nameof(assignmentId));
            }

            using var message = CreateCloseJobRequest(jobId, assignmentId, dispositionCode, releaseTime, note);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Closes a completed job. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="assignmentId"> The assignment within which the job is to be closed. </param>
        /// <param name="dispositionCode"> Indicates the outcome of the job, populate this field with your own custom values. </param>
        /// <param name="releaseTime">
        /// If not provided, capacity will be released immediately.
        /// 
        /// If provided, the future time at which to release the capacity.
        /// </param>
        /// <param name="note"> (Optional) Customer supplied note. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="assignmentId"/> is null. </exception>
        public Response CloseJob(string jobId, string assignmentId, string dispositionCode = null, DateTimeOffset? releaseTime = null, string note = null, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (assignmentId == null)
            {
                throw new ArgumentNullException(nameof(assignmentId));
            }

            using var message = CreateCloseJobRequest(jobId, assignmentId, dispositionCode, releaseTime, note);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetInQueuePositionRequest(string jobId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/position", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a job&apos;s position details. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public async Task<Response<JobPositionDetails>> GetInQueuePositionAsync(string jobId, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            using var message = CreateGetInQueuePositionRequest(jobId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobPositionDetails value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobPositionDetails.DeserializeJobPositionDetails(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a job&apos;s position details. </summary>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public Response<JobPositionDetails> GetInQueuePosition(string jobId, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            using var message = CreateGetInQueuePositionRequest(jobId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobPositionDetails value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobPositionDetails.DeserializeJobPositionDetails(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAcceptJobRequest(string offerId, string workerId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/workers/", false);
            uri.AppendPath(workerId, true);
            uri.AppendPath("/offers/", false);
            uri.AppendPath(offerId, true);
            uri.AppendPath("/accept", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already. </summary>
        /// <param name="offerId"> The String to use. </param>
        /// <param name="workerId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> or <paramref name="workerId"/> is null. </exception>
        public async Task<Response<AcceptJobOfferResponse>> AcceptJobAsync(string offerId, string workerId, CancellationToken cancellationToken = default)
        {
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }
            if (workerId == null)
            {
                throw new ArgumentNullException(nameof(workerId));
            }

            using var message = CreateAcceptJobRequest(offerId, workerId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AcceptJobOfferResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AcceptJobOfferResponse.DeserializeAcceptJobOfferResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already. </summary>
        /// <param name="offerId"> The String to use. </param>
        /// <param name="workerId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> or <paramref name="workerId"/> is null. </exception>
        public Response<AcceptJobOfferResponse> AcceptJob(string offerId, string workerId, CancellationToken cancellationToken = default)
        {
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }
            if (workerId == null)
            {
                throw new ArgumentNullException(nameof(workerId));
            }

            using var message = CreateAcceptJobRequest(offerId, workerId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AcceptJobOfferResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AcceptJobOfferResponse.DeserializeAcceptJobOfferResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeclineJobRequest(string offerId, string workerId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/workers/", false);
            uri.AppendPath(workerId, true);
            uri.AppendPath("/offers/", false);
            uri.AppendPath(offerId, true);
            uri.AppendPath("/decline", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Declines an offer to work on a job. </summary>
        /// <param name="offerId"> The String to use. </param>
        /// <param name="workerId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> or <paramref name="workerId"/> is null. </exception>
        public async Task<Response> DeclineJobAsync(string offerId, string workerId, CancellationToken cancellationToken = default)
        {
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }
            if (workerId == null)
            {
                throw new ArgumentNullException(nameof(workerId));
            }

            using var message = CreateDeclineJobRequest(offerId, workerId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Declines an offer to work on a job. </summary>
        /// <param name="offerId"> The String to use. </param>
        /// <param name="workerId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> or <paramref name="workerId"/> is null. </exception>
        public Response DeclineJob(string offerId, string workerId, CancellationToken cancellationToken = default)
        {
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }
            if (workerId == null)
            {
                throw new ArgumentNullException(nameof(workerId));
            }

            using var message = CreateDeclineJobRequest(offerId, workerId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateQueueRequest(UpsertQueueRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/queues", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Creates or updates a queue. </summary>
        /// <param name="body"> Model of queue to be created or Updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<UpsertQueueResponse>> CreateOrUpdateQueueAsync(UpsertQueueRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateQueueRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpsertQueueResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UpsertQueueResponse.DeserializeUpsertQueueResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates or updates a queue. </summary>
        /// <param name="body"> Model of queue to be created or Updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<UpsertQueueResponse> CreateOrUpdateQueue(UpsertQueueRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateQueueRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpsertQueueResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UpsertQueueResponse.DeserializeUpsertQueueResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListQueuesRequest(int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/queues", false);
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing queues. </summary>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<QueueCollection>> ListQueuesAsync(int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListQueuesRequest(maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueueCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueueCollection.DeserializeQueueCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing queues. </summary>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<QueueCollection> ListQueues(int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListQueuesRequest(maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueueCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueueCollection.DeserializeQueueCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetQueueRequest(string id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/queues/", false);
            uri.AppendPath(id, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves an existing queue by Id. </summary>
        /// <param name="id"> Id of the queue to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response<JobQueue>> GetQueueAsync(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetQueueRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobQueue value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobQueue.DeserializeJobQueue(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves an existing queue by Id. </summary>
        /// <param name="id"> Id of the queue to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response<JobQueue> GetQueue(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetQueueRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobQueue value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobQueue.DeserializeJobQueue(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteQueueRequest(string id, string ifMatch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/queues/", false);
            uri.AppendPath(id, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            if (ifMatch != null)
            {
                request.Headers.Add("if-Match", ifMatch);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a queue by Id. </summary>
        /// <param name="id"> Id of the queue to delete. </param>
        /// <param name="ifMatch"> Concurrency token for CosmosDB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response> DeleteQueueAsync(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteQueueRequest(id, ifMatch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a queue by Id. </summary>
        /// <param name="id"> Id of the queue to delete. </param>
        /// <param name="ifMatch"> Concurrency token for CosmosDB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response DeleteQueue(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteQueueRequest(id, ifMatch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRegisterWorkerRequest(RegisterWorkerRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/workers", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Registers a worker to process jobs. </summary>
        /// <param name="body"> The RegisterWorkerRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<RouterWorker>> RegisterWorkerAsync(RegisterWorkerRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRegisterWorkerRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterWorker value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RouterWorker.DeserializeRouterWorker(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Registers a worker to process jobs. </summary>
        /// <param name="body"> The RegisterWorkerRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<RouterWorker> RegisterWorker(RegisterWorkerRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateRegisterWorkerRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterWorker value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RouterWorker.DeserializeRouterWorker(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListWorkersRequest(WorkerStateSelector? status, string channelId, string queueId, bool? hasCapacity, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/workers", false);
            if (status != null)
            {
                uri.AppendQuery("status", status.Value.ToSerialString(), true);
            }
            if (channelId != null)
            {
                uri.AppendQuery("channelId", channelId, true);
            }
            if (queueId != null)
            {
                uri.AppendQuery("queueId", queueId, true);
            }
            if (hasCapacity != null)
            {
                uri.AppendQuery("hasCapacity", hasCapacity.Value, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing workers. </summary>
        /// <param name="status"> (Optional) If specified, select workers by worker status. </param>
        /// <param name="channelId"> (Optional) If specified, select workers who have a channel configuration with this channel. </param>
        /// <param name="queueId"> (Optional) If specified, select workers who are assigned to this queue. </param>
        /// <param name="hasCapacity">
        /// (Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
        /// 
        ///             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.
        /// </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<WorkerCollection>> ListWorkersAsync(WorkerStateSelector? status = null, string channelId = null, string queueId = null, bool? hasCapacity = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListWorkersRequest(status, channelId, queueId, hasCapacity, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkerCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = WorkerCollection.DeserializeWorkerCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing workers. </summary>
        /// <param name="status"> (Optional) If specified, select workers by worker status. </param>
        /// <param name="channelId"> (Optional) If specified, select workers who have a channel configuration with this channel. </param>
        /// <param name="queueId"> (Optional) If specified, select workers who are assigned to this queue. </param>
        /// <param name="hasCapacity">
        /// (Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
        /// 
        ///             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.
        /// </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<WorkerCollection> ListWorkers(WorkerStateSelector? status = null, string channelId = null, string queueId = null, bool? hasCapacity = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListWorkersRequest(status, channelId, queueId, hasCapacity, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkerCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = WorkerCollection.DeserializeWorkerCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeregisterWorkerRequest(string workerId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/workers/", false);
            uri.AppendPath(workerId, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deregisters a worker from processing jobs. </summary>
        /// <param name="workerId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workerId"/> is null. </exception>
        public async Task<Response> DeregisterWorkerAsync(string workerId, CancellationToken cancellationToken = default)
        {
            if (workerId == null)
            {
                throw new ArgumentNullException(nameof(workerId));
            }

            using var message = CreateDeregisterWorkerRequest(workerId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deregisters a worker from processing jobs. </summary>
        /// <param name="workerId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workerId"/> is null. </exception>
        public Response DeregisterWorker(string workerId, CancellationToken cancellationToken = default)
        {
            if (workerId == null)
            {
                throw new ArgumentNullException(nameof(workerId));
            }

            using var message = CreateDeregisterWorkerRequest(workerId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetWorkerRequest(string workerId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/workers/", false);
            uri.AppendPath(workerId, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves an existing worker by Id. </summary>
        /// <param name="workerId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workerId"/> is null. </exception>
        public async Task<Response<RouterWorker>> GetWorkerAsync(string workerId, CancellationToken cancellationToken = default)
        {
            if (workerId == null)
            {
                throw new ArgumentNullException(nameof(workerId));
            }

            using var message = CreateGetWorkerRequest(workerId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterWorker value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RouterWorker.DeserializeRouterWorker(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves an existing worker by Id. </summary>
        /// <param name="workerId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workerId"/> is null. </exception>
        public Response<RouterWorker> GetWorker(string workerId, CancellationToken cancellationToken = default)
        {
            if (workerId == null)
            {
                throw new ArgumentNullException(nameof(workerId));
            }

            using var message = CreateGetWorkerRequest(workerId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RouterWorker value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RouterWorker.DeserializeRouterWorker(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateReleaseAssignmentRequest(string workerId, string assignmentId, ReleaseAssignmentRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/routing/workers/", false);
            uri.AppendPath(workerId, true);
            uri.AppendPath("/assignments/", false);
            uri.AppendPath(assignmentId, true);
            uri.AppendPath("/release", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Releases capacity consumed by an assignment within a workers socket collection. </summary>
        /// <param name="workerId"> The String to use. </param>
        /// <param name="assignmentId"> The String to use. </param>
        /// <param name="body"> The ReleaseAssignmentRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workerId"/> or <paramref name="assignmentId"/> is null. </exception>
        public async Task<Response> ReleaseAssignmentAsync(string workerId, string assignmentId, ReleaseAssignmentRequest body = null, CancellationToken cancellationToken = default)
        {
            if (workerId == null)
            {
                throw new ArgumentNullException(nameof(workerId));
            }
            if (assignmentId == null)
            {
                throw new ArgumentNullException(nameof(assignmentId));
            }

            using var message = CreateReleaseAssignmentRequest(workerId, assignmentId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Releases capacity consumed by an assignment within a workers socket collection. </summary>
        /// <param name="workerId"> The String to use. </param>
        /// <param name="assignmentId"> The String to use. </param>
        /// <param name="body"> The ReleaseAssignmentRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workerId"/> or <paramref name="assignmentId"/> is null. </exception>
        public Response ReleaseAssignment(string workerId, string assignmentId, ReleaseAssignmentRequest body = null, CancellationToken cancellationToken = default)
        {
            if (workerId == null)
            {
                throw new ArgumentNullException(nameof(workerId));
            }
            if (assignmentId == null)
            {
                throw new ArgumentNullException(nameof(assignmentId));
            }

            using var message = CreateReleaseAssignmentRequest(workerId, assignmentId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListChannelsNextPageRequest(string nextLink, string type, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves custom channels. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="type"> Specifies Managed Channels or Custom Channels, left blank returns all channels. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<ChannelCollection>> ListChannelsNextPageAsync(string nextLink, string type = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListChannelsNextPageRequest(nextLink, type, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ChannelCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ChannelCollection.DeserializeChannelCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves custom channels. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="type"> Specifies Managed Channels or Custom Channels, left blank returns all channels. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<ChannelCollection> ListChannelsNextPage(string nextLink, string type = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListChannelsNextPageRequest(nextLink, type, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ChannelCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ChannelCollection.DeserializeChannelCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListClassificationPoliciesNextPageRequest(string nextLink, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing classification policies. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<ClassificationPolicyCollection>> ListClassificationPoliciesNextPageAsync(string nextLink, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListClassificationPoliciesNextPageRequest(nextLink, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClassificationPolicyCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ClassificationPolicyCollection.DeserializeClassificationPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing classification policies. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<ClassificationPolicyCollection> ListClassificationPoliciesNextPage(string nextLink, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListClassificationPoliciesNextPageRequest(nextLink, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClassificationPolicyCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ClassificationPolicyCollection.DeserializeClassificationPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListDistributionPoliciesNextPageRequest(string nextLink, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing distribution policies. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<DistributionPolicyCollection>> ListDistributionPoliciesNextPageAsync(string nextLink, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListDistributionPoliciesNextPageRequest(nextLink, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DistributionPolicyCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DistributionPolicyCollection.DeserializeDistributionPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing distribution policies. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<DistributionPolicyCollection> ListDistributionPoliciesNextPage(string nextLink, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListDistributionPoliciesNextPageRequest(nextLink, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DistributionPolicyCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DistributionPolicyCollection.DeserializeDistributionPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListExceptionPoliciesNextPageRequest(string nextLink, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing exception policies. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<ExceptionPolicyCollection>> ListExceptionPoliciesNextPageAsync(string nextLink, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListExceptionPoliciesNextPageRequest(nextLink, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ExceptionPolicyCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionPolicyCollection.DeserializeExceptionPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing exception policies. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<ExceptionPolicyCollection> ListExceptionPoliciesNextPage(string nextLink, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListExceptionPoliciesNextPageRequest(nextLink, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ExceptionPolicyCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionPolicyCollection.DeserializeExceptionPolicyCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListJobsNextPageRequest(string nextLink, JobStateSelector? status, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves list of jobs based on filter parameters. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="status"> (Optional) If specified, filter jobs by status. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<JobCollection>> ListJobsNextPageAsync(string nextLink, JobStateSelector? status = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListJobsNextPageRequest(nextLink, status, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves list of jobs based on filter parameters. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="status"> (Optional) If specified, filter jobs by status. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<JobCollection> ListJobsNextPage(string nextLink, JobStateSelector? status = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListJobsNextPageRequest(nextLink, status, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListEnqueuedJobsNextPageRequest(string nextLink, string queueId, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing jobs by queue. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="queueId"> The String to use. </param>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="queueId"/> is null. </exception>
        public async Task<Response<JobCollection>> ListEnqueuedJobsNextPageAsync(string nextLink, string queueId, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (queueId == null)
            {
                throw new ArgumentNullException(nameof(queueId));
            }

            using var message = CreateListEnqueuedJobsNextPageRequest(nextLink, queueId, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing jobs by queue. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="queueId"> The String to use. </param>
        /// <param name="maxPageSize"> The Integer to use. </param>
        /// <param name="continuationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="queueId"/> is null. </exception>
        public Response<JobCollection> ListEnqueuedJobsNextPage(string nextLink, string queueId, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (queueId == null)
            {
                throw new ArgumentNullException(nameof(queueId));
            }

            using var message = CreateListEnqueuedJobsNextPageRequest(nextLink, queueId, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobCollection.DeserializeJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListQueuesNextPageRequest(string nextLink, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing queues. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<QueueCollection>> ListQueuesNextPageAsync(string nextLink, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListQueuesNextPageRequest(nextLink, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueueCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueueCollection.DeserializeQueueCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing queues. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<QueueCollection> ListQueuesNextPage(string nextLink, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListQueuesNextPageRequest(nextLink, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueueCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueueCollection.DeserializeQueueCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListWorkersNextPageRequest(string nextLink, WorkerStateSelector? status, string channelId, string queueId, bool? hasCapacity, int? maxPageSize, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retrieves existing workers. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="status"> (Optional) If specified, select workers by worker status. </param>
        /// <param name="channelId"> (Optional) If specified, select workers who have a channel configuration with this channel. </param>
        /// <param name="queueId"> (Optional) If specified, select workers who are assigned to this queue. </param>
        /// <param name="hasCapacity">
        /// (Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
        /// 
        ///             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.
        /// </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<WorkerCollection>> ListWorkersNextPageAsync(string nextLink, WorkerStateSelector? status = null, string channelId = null, string queueId = null, bool? hasCapacity = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListWorkersNextPageRequest(nextLink, status, channelId, queueId, hasCapacity, maxPageSize, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkerCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = WorkerCollection.DeserializeWorkerCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retrieves existing workers. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="status"> (Optional) If specified, select workers by worker status. </param>
        /// <param name="channelId"> (Optional) If specified, select workers who have a channel configuration with this channel. </param>
        /// <param name="queueId"> (Optional) If specified, select workers who are assigned to this queue. </param>
        /// <param name="hasCapacity">
        /// (Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
        /// 
        ///             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.
        /// </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="continuationToken"> Token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<WorkerCollection> ListWorkersNextPage(string nextLink, WorkerStateSelector? status = null, string channelId = null, string queueId = null, bool? hasCapacity = null, int? maxPageSize = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListWorkersNextPageRequest(nextLink, status, channelId, queueId, hasCapacity, maxPageSize, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        WorkerCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = WorkerCollection.DeserializeWorkerCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
