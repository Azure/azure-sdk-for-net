// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Communication.JobRouter.Models;

namespace Azure.Communication.JobRouter
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AzureCommunicationServicesModelFactory
    {
        /// <summary> Initializes new instance of UpsertChannelResponse class. </summary>
        /// <param name="id"> Id of the channel created. </param>
        /// <param name="name"> Friendly name of the channel created. </param>
        /// <param name="acsManaged"> Indicates that the Channel was created and is maintained by ACS. </param>
        /// <returns> A new <see cref="Models.UpsertChannelResponse"/> instance for mocking. </returns>
        public static UpsertChannelResponse UpsertChannelResponse(string id = default, string name = default, bool acsManaged = default)
        {
            return new UpsertChannelResponse(id, name, acsManaged);
        }

        /// <summary> Initializes new instance of ChannelCollection class. </summary>
        /// <param name="value"> . </param>
        /// <param name="nextLink"> . </param>
        /// <returns> A new <see cref="Models.ChannelCollection"/> instance for mocking. </returns>
        public static ChannelCollection ChannelCollection(IReadOnlyList<RouterChannel> value = default, string nextLink = default)
        {
            value ??= new List<RouterChannel>();
            return new ChannelCollection(value, nextLink);
        }

        /// <summary> Initializes new instance of RouterChannel class. </summary>
        /// <param name="id"> The Id of the channel. </param>
        /// <param name="name"> (Optional) The friendly name of the channel. </param>
        /// <param name="acsManaged"> Indicates that the Channel was created and is maintained by ACS. </param>
        /// <returns> A new <see cref="Models.RouterChannel"/> instance for mocking. </returns>
        public static RouterChannel RouterChannel(string id = default, string name = default, bool acsManaged = default)
        {
            return new RouterChannel(id, name, acsManaged);
        }

        /// <summary> Initializes new instance of UpsertClassificationPolicyResponse class. </summary>
        /// <param name="id"> Unique identifier of this policy. </param>
        /// <param name="name"> Friendly name of this policy. </param>
        /// <param name="fallbackQueueId"> The fallback queue to select if the queue selector doesn&apos;t find a match. </param>
        /// <param name="queueSelector"> The queue selector to select a queue for a given job. </param>
        /// <param name="prioritizationRule"> The rule to determine a priority score for a given job. </param>
        /// <param name="workerSelectors"> The worker label selectors to attach to a given job. </param>
        /// <returns> A new <see cref="Models.UpsertClassificationPolicyResponse"/> instance for mocking. </returns>
        public static UpsertClassificationPolicyResponse UpsertClassificationPolicyResponse(string id = default, string name = default, string fallbackQueueId = default, QueueSelector queueSelector = default, RouterRule prioritizationRule = default, IReadOnlyList<LabelSelectorAttachment> workerSelectors = default)
        {
            workerSelectors ??= new List<LabelSelectorAttachment>();
            return new UpsertClassificationPolicyResponse(id, name, fallbackQueueId, queueSelector, prioritizationRule, workerSelectors);
        }

        /// <summary> Initializes new instance of ClassificationPolicyCollection class. </summary>
        /// <param name="value"> . </param>
        /// <param name="nextLink"> . </param>
        /// <returns> A new <see cref="Models.ClassificationPolicyCollection"/> instance for mocking. </returns>
        public static ClassificationPolicyCollection ClassificationPolicyCollection(IReadOnlyList<ClassificationPolicy> value = default, string nextLink = default)
        {
            value ??= new List<ClassificationPolicy>();
            return new ClassificationPolicyCollection(value, nextLink);
        }

        /// <summary> Initializes new instance of ClassificationPolicy class. </summary>
        /// <param name="id"> Unique identifier of this policy. </param>
        /// <param name="name"> Friendly name of this policy. </param>
        /// <param name="fallbackQueueId"> The fallback queue to select if the queue selector doesn&apos;t find a match. </param>
        /// <param name="queueSelector"> The queue selector to select a queue for a given job. </param>
        /// <param name="prioritizationRule"> The rule to determine a priority score for a given job. </param>
        /// <param name="workerSelectors"> The worker label selectors to attach to a given job. </param>
        /// <returns> A new <see cref="Models.ClassificationPolicy"/> instance for mocking. </returns>
        public static ClassificationPolicy ClassificationPolicy(string id = default, string name = default, string fallbackQueueId = default, QueueSelector queueSelector = default, RouterRule prioritizationRule = default, IReadOnlyList<LabelSelectorAttachment> workerSelectors = default)
        {
            workerSelectors ??= new List<LabelSelectorAttachment>();
            return new ClassificationPolicy(id, name, fallbackQueueId, queueSelector, prioritizationRule, workerSelectors);
        }

        /// <summary> Initializes new instance of UpsertDistributionPolicyResponse class. </summary>
        /// <param name="id"> Unique identifier of this policy. </param>
        /// <param name="name"> The human readable name of the policy. </param>
        /// <param name="offerTTL"> The expiry time of any offers created under this policy will be governed by the offer time to live. </param>
        /// <param name="mode"> The policy governing the specific distribution method. </param>
        /// <returns> A new <see cref="Models.UpsertDistributionPolicyResponse"/> instance for mocking. </returns>
        public static UpsertDistributionPolicyResponse UpsertDistributionPolicyResponse(string id = default, string name = default, TimeSpan offerTTL = default, DistributionMode mode = default)
        {
            return new UpsertDistributionPolicyResponse(id, name, offerTTL, mode);
        }

        /// <summary> Initializes new instance of DistributionPolicyCollection class. </summary>
        /// <param name="value"> . </param>
        /// <param name="nextLink"> . </param>
        /// <returns> A new <see cref="Models.DistributionPolicyCollection"/> instance for mocking. </returns>
        public static DistributionPolicyCollection DistributionPolicyCollection(IReadOnlyList<DistributionPolicy> value = default, string nextLink = default)
        {
            value ??= new List<DistributionPolicy>();
            return new DistributionPolicyCollection(value, nextLink);
        }

        /// <summary> Initializes new instance of DistributionPolicy class. </summary>
        /// <param name="id"> The unique identifier of the policy. </param>
        /// <param name="name"> The human readable name of the policy. </param>
        /// <param name="offerTTL"> The expiry time of any offers created under this policy will be governed by the offer time to live. </param>
        /// <param name="mode"> The policy governing the specific distribution method. </param>
        /// <returns> A new <see cref="Models.DistributionPolicy"/> instance for mocking. </returns>
        public static DistributionPolicy DistributionPolicy(string id = default, string name = default, TimeSpan offerTTL = default, DistributionMode mode = default)
        {
            return new DistributionPolicy(id, name, offerTTL, mode);
        }

        /// <summary> Initializes new instance of UpsertExceptionPolicyResponse class. </summary>
        /// <param name="id"> Unique identifier of this policy. </param>
        /// <param name="name"> The name of the exception policy created. </param>
        /// <param name="exceptionRules"> A collection of exception rules on the exception policy. </param>
        /// <returns> A new <see cref="Models.UpsertExceptionPolicyResponse"/> instance for mocking. </returns>
        public static UpsertExceptionPolicyResponse UpsertExceptionPolicyResponse(string id = default, string name = default, IReadOnlyList<ExceptionRule> exceptionRules = default)
        {
            exceptionRules ??= new List<ExceptionRule>();
            return new UpsertExceptionPolicyResponse(id, name, exceptionRules);
        }

        /// <summary> Initializes new instance of ExceptionPolicyCollection class. </summary>
        /// <param name="value"> . </param>
        /// <param name="nextLink"> . </param>
        /// <returns> A new <see cref="Models.ExceptionPolicyCollection"/> instance for mocking. </returns>
        public static ExceptionPolicyCollection ExceptionPolicyCollection(IReadOnlyList<ExceptionPolicy> value = default, string nextLink = default)
        {
            value ??= new List<ExceptionPolicy>();
            return new ExceptionPolicyCollection(value, nextLink);
        }

        /// <summary> Initializes new instance of ExceptionPolicy class. </summary>
        /// <param name="id"> The Id of the exception policy. </param>
        /// <param name="name"> (Optional) The name of the exception policy. </param>
        /// <param name="exceptionRules"> (Optional) A collection of exception rules on the exception policy. </param>
        /// <returns> A new <see cref="Models.ExceptionPolicy"/> instance for mocking. </returns>
        public static ExceptionPolicy ExceptionPolicy(string id = default, string name = default, IReadOnlyList<ExceptionRule> exceptionRules = default)
        {
            exceptionRules ??= new List<ExceptionRule>();
            return new ExceptionPolicy(id, name, exceptionRules);
        }

        /// <summary> Initializes new instance of CreateJobResponse class. </summary>
        /// <param name="id"> Id of the newly created job. </param>
        /// <returns> A new <see cref="Models.CreateJobResponse"/> instance for mocking. </returns>
        public static CreateJobResponse CreateJobResponse(string id = default)
        {
            return new CreateJobResponse(id);
        }

        /// <summary> Initializes new instance of JobCollection class. </summary>
        /// <param name="value"> . </param>
        /// <param name="nextLink"> . </param>
        /// <returns> A new <see cref="Models.JobCollection"/> instance for mocking. </returns>
        public static JobCollection JobCollection(IReadOnlyList<RouterJob> value = default, string nextLink = default)
        {
            value ??= new List<RouterJob>();
            return new JobCollection(value, nextLink);
        }

        /// <summary> Initializes new instance of RouterJob class. </summary>
        /// <param name="id"> The id of the Job. </param>
        /// <param name="channelReference"> Reference to an external parent context, eg. call ID. </param>
        /// <param name="jobStatus"> The state of the Job. </param>
        /// <param name="enqueueTimeUtc"> The time a job was queued. </param>
        /// <param name="channelId"> The channel or modality upon which this job will be executed. </param>
        /// <param name="classificationPolicyId"> The Id of the Classification policy used for classifying a job. </param>
        /// <param name="queueId"> The Id of the Queue that a job is queued to. </param>
        /// <param name="priority"> The priority of this job. </param>
        /// <param name="dispositionCode"> Reason code for cancelled or closed jobs. </param>
        /// <param name="workerSelectors"> A collection of label selectors a worker must satisfy in order to process this job. </param>
        /// <param name="Labels"> A set of key/value pairs used by the classification process to determine queue, priority and attach label selectors. </param>
        /// <param name="assignments">
        /// A collection of the assignments of the job.
        /// 
        /// Key is AssignmentId.
        /// </param>
        /// <param name="notes"> Generic text notes attached to a job, sorted by timestamp. </param>
        /// <returns> A new <see cref="Models.RouterJob"/> instance for mocking. </returns>
        public static RouterJob RouterJob(string id = default, string channelReference = default, JobStatus jobStatus = default, DateTimeOffset? enqueueTimeUtc = default, string channelId = default, string classificationPolicyId = default, string queueId = default, int? priority = default, string dispositionCode = default, IReadOnlyList<LabelSelector> workerSelectors = default, IDictionary<string, object> Labels = default, IReadOnlyDictionary<string, JobAssignment> assignments = default, IReadOnlyDictionary<string, string> notes = default)
        {
            workerSelectors ??= new List<LabelSelector>();
            Labels ??= new Dictionary<string, object>();
            assignments ??= new Dictionary<string, JobAssignment>();
            notes ??= new Dictionary<string, string>();
            return new RouterJob(id, channelReference, jobStatus, enqueueTimeUtc, channelId, classificationPolicyId, queueId, priority, dispositionCode, workerSelectors, Labels, assignments, notes);
        }

        /// <summary> Initializes new instance of JobAssignment class. </summary>
        /// <param name="id"> The Id of the job assignment. </param>
        /// <param name="workerId"> The Id of the Worker assigned to the job. </param>
        /// <param name="assignTime"> The Assignment time of the job. </param>
        /// <param name="completeTime"> The time the job was marked as completed after being assigned. </param>
        /// <param name="closeTime"> The time the job was marked as closed after being completed. </param>
        /// <returns> A new <see cref="Models.JobAssignment"/> instance for mocking. </returns>
        public static JobAssignment JobAssignment(string id = default, string workerId = default, DateTimeOffset assignTime = default, DateTimeOffset? completeTime = default, DateTimeOffset? closeTime = default)
        {
            return new JobAssignment(id, workerId, assignTime, completeTime, closeTime);
        }

        /// <summary> Initializes new instance of JobPositionDetails class. </summary>
        /// <param name="jobId"> Id of the job these details are about. </param>
        /// <param name="position"> Position of the job in question within that queue. </param>
        /// <param name="queueId"> Id of the queue this job is enqueued in. </param>
        /// <param name="queueLength"> Length of the queue: total number of enqueued jobs. </param>
        /// <returns> A new <see cref="Models.JobPositionDetails"/> instance for mocking. </returns>
        public static JobPositionDetails JobPositionDetails(string jobId = default, int position = default, string queueId = default, int queueLength = default)
        {
            return new JobPositionDetails(jobId, position, queueId, queueLength);
        }

        /// <summary> Initializes new instance of AcceptJobOfferResponse class. </summary>
        /// <param name="assignmentId"> The assignment Id that assigns a worker that has accepted an offer to a job. </param>
        /// <param name="jobId"> The Id of the job assigned. </param>
        /// <param name="workerId"> The Id of the worker that has been assigned this job. </param>
        /// <returns> A new <see cref="Models.AcceptJobOfferResponse"/> instance for mocking. </returns>
        public static AcceptJobOfferResponse AcceptJobOfferResponse(string assignmentId = default, string jobId = default, string workerId = default)
        {
            return new AcceptJobOfferResponse(assignmentId, jobId, workerId);
        }

        /// <summary> Initializes new instance of UpsertQueueResponse class. </summary>
        /// <param name="id"> Unique identifier of this Queue. </param>
        /// <param name="name"> The name of this queue. </param>
        /// <param name="distributionPolicyId"> The ID of the distribution policy that will determine how a job is distributed to workers. </param>
        /// <param name="Labels"> (Optional) A set of key/value pairs used by the classification process to determine queue to assign a job. </param>
        /// <param name="exceptionPolicyId"> The ID of the exception policy that determines various job escalation rules. </param>
        /// <returns> A new <see cref="Models.UpsertQueueResponse"/> instance for mocking. </returns>
        public static UpsertQueueResponse UpsertQueueResponse(string id = default, string name = default, string distributionPolicyId = default, IDictionary<string, object> Labels = default, string exceptionPolicyId = default)
        {
            Labels ??= new Dictionary<string, object>();
            return new UpsertQueueResponse(id, name, distributionPolicyId, Labels, exceptionPolicyId);
        }

        /// <summary> Initializes new instance of QueueCollection class. </summary>
        /// <param name="value"> . </param>
        /// <param name="nextLink"> . </param>
        /// <returns> A new <see cref="Models.QueueCollection"/> instance for mocking. </returns>
        public static QueueCollection QueueCollection(IReadOnlyList<JobQueue> value = default, string nextLink = default)
        {
            value ??= new List<JobQueue>();
            return new QueueCollection(value, nextLink);
        }

        /// <summary> Initializes new instance of JobQueue class. </summary>
        /// <param name="id"> The Id of this queue. </param>
        /// <param name="name"> The name of this queue. </param>
        /// <param name="distributionPolicyId"> The ID of the distribution policy that will determine how a job is distributed to workers. </param>
        /// <param name="Labels"> (Optional) A set of key/value pairs used by the classification process to determine queue to assign a job. </param>
        /// <param name="exceptionPolicyId"> (Optional) The ID of the exception policy that determines various job escalation rules. </param>
        /// <returns> A new <see cref="Models.JobQueue"/> instance for mocking. </returns>
        public static JobQueue JobQueue(string id = default, string name = default, string distributionPolicyId = default, IDictionary<string, object> Labels = default, string exceptionPolicyId = default)
        {
            Labels ??= new Dictionary<string, object>();
            return new JobQueue(id, name, distributionPolicyId, Labels, exceptionPolicyId);
        }

        /// <summary> Initializes new instance of RouterWorker class. </summary>
        /// <param name="id"> . </param>
        /// <param name="state"> . </param>
        /// <param name="queueAssignments"> . </param>
        /// <param name="totalCapacity"> . </param>
        /// <param name="Labels"> Dictionary of &lt;any&gt;. </param>
        /// <param name="channelConfigurations"> . </param>
        /// <param name="offers"> . </param>
        /// <param name="assignedJobs"> . </param>
        /// <param name="loadRatio"> . </param>
        /// <returns> A new <see cref="Models.RouterWorker"/> instance for mocking. </returns>
        public static RouterWorker RouterWorker(string id = default, WorkerState state = default, IReadOnlyList<QueueAssignment> queueAssignments = default, int totalCapacity = default, IDictionary<string, object> Labels = default, IReadOnlyList<ChannelConfiguration> channelConfigurations = default, IReadOnlyList<JobOffer> offers = default, IReadOnlyList<WorkerAssignment> assignedJobs = default, double loadRatio = default)
        {
            queueAssignments ??= new List<QueueAssignment>();
            Labels ??= new Dictionary<string, object>();
            channelConfigurations ??= new List<ChannelConfiguration>();
            offers ??= new List<JobOffer>();
            assignedJobs ??= new List<WorkerAssignment>();
            return new RouterWorker(id, state, queueAssignments, totalCapacity, Labels, channelConfigurations, offers, assignedJobs, loadRatio);
        }

        /// <summary> Initializes new instance of JobOffer class. </summary>
        /// <param name="id"> The Id of the offer. </param>
        /// <param name="jobId"> The Id of the job assigned. </param>
        /// <param name="capacityCost"> The capacity cost consumed by the job offer. </param>
        /// <param name="offerTimeUtc"> The time the offer was created. </param>
        /// <param name="expiryTimeUtc"> The time that indicates when the offer will expire. </param>
        /// <returns> A new <see cref="Models.JobOffer"/> instance for mocking. </returns>
        public static JobOffer JobOffer(string id = default, string jobId = default, int capacityCost = default, DateTimeOffset? offerTimeUtc = default, DateTimeOffset? expiryTimeUtc = default)
        {
            return new JobOffer(id, jobId, capacityCost, offerTimeUtc, expiryTimeUtc);
        }

        /// <summary> Initializes new instance of WorkerAssignment class. </summary>
        /// <param name="id"> The Id of the assignment. </param>
        /// <param name="jobId"> The Id of the Job assigned. </param>
        /// <param name="capacityCost"> The amount of capacity this assignment has consumed for a worker. </param>
        /// <param name="assignTime"> The Assignment time of the job. </param>
        /// <returns> A new <see cref="Models.WorkerAssignment"/> instance for mocking. </returns>
        public static WorkerAssignment WorkerAssignment(string id = default, string jobId = default, int capacityCost = default, DateTimeOffset assignTime = default)
        {
            return new WorkerAssignment(id, jobId, capacityCost, assignTime);
        }
    }
}
