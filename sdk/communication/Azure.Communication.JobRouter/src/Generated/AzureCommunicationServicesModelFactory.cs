// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Communication.JobRouter
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AzureCommunicationServicesModelFactory
    {
        /// <summary> Initializes a new instance of ClassificationPolicy. </summary>
        /// <param name="id"> Unique identifier of this policy. </param>
        /// <param name="name"> Friendly name of this policy. </param>
        /// <param name="fallbackQueueId"> The fallback queue to select if the queue selector doesn&apos;t find a match. </param>
        /// <param name="queueSelectors"> The queue selectors to resolve a queue for a given job. </param>
        /// <param name="prioritizationRule">
        /// A rule of one of the following types:
        ///             
        /// StaticRule:  A rule providing static rules that always return the same result, regardless of input.
        /// DirectMapRule:  A rule that return the same labels as the input labels.
        /// ExpressionRule: A rule providing inline expression rules.
        /// AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        /// </param>
        /// <param name="workerSelectors"> The worker label selectors to attach to a given job. </param>
        /// <returns> A new <see cref="JobRouter.ClassificationPolicy"/> instance for mocking. </returns>
        public static ClassificationPolicy ClassificationPolicy(string id = null, string name = null, string fallbackQueueId = null, IEnumerable<QueueSelectorAttachment> queueSelectors = null, RouterRule prioritizationRule = null, IEnumerable<WorkerSelectorAttachment> workerSelectors = null)
        {
            queueSelectors ??= new List<QueueSelectorAttachment>();
            workerSelectors ??= new List<WorkerSelectorAttachment>();

            return new ClassificationPolicy(id, name, fallbackQueueId, queueSelectors?.ToList(), prioritizationRule, workerSelectors?.ToList());
        }

        /// <summary> Initializes a new instance of JobRouterError. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The error target. </param>
        /// <param name="details"> Further details about specific errors that led to this error. </param>
        /// <param name="innerError"> The inner error if any. </param>
        /// <returns> A new <see cref="JobRouter.JobRouterError"/> instance for mocking. </returns>
        public static JobRouterError JobRouterError(string code = null, string message = null, string target = null, IEnumerable<JobRouterError> details = null, JobRouterError innerError = null)
        {
            details ??= new List<JobRouterError>();

            return new JobRouterError(code, message, target, details?.ToList(), innerError);
        }

        /// <summary> Initializes a new instance of ClassificationPolicyCollection. </summary>
        /// <param name="value"></param>
        /// <param name="nextLink"></param>
        /// <returns> A new <see cref="JobRouter.ClassificationPolicyCollection"/> instance for mocking. </returns>
        public static ClassificationPolicyCollection ClassificationPolicyCollection(IEnumerable<PagedClassificationPolicy> value = null, string nextLink = null)
        {
            value ??= new List<PagedClassificationPolicy>();

            return new ClassificationPolicyCollection(value?.ToList(), nextLink);
        }

        /// <summary> Initializes a new instance of PagedClassificationPolicy. </summary>
        /// <param name="id"> Unique identifier of this policy. </param>
        /// <param name="name"> Friendly name of this policy. </param>
        /// <param name="fallbackQueueId"> The fallback queue to select if the queue selector doesn&apos;t find a match. </param>
        /// <param name="queueSelectors"> The queue selectors to resolve a queue for a given job. </param>
        /// <param name="prioritizationRule">
        /// A rule of one of the following types:
        ///             
        /// StaticRule:  A rule providing static rules that always return the same result, regardless of input.
        /// DirectMapRule:  A rule that return the same labels as the input labels.
        /// ExpressionRule: A rule providing inline expression rules.
        /// AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        /// </param>
        /// <param name="workerSelectors"> The worker label selectors to attach to a given job. </param>
        /// <returns> A new <see cref="JobRouter.PagedClassificationPolicy"/> instance for mocking. </returns>
        public static PagedClassificationPolicy PagedClassificationPolicy(string id = null, string name = null, string fallbackQueueId = null, IEnumerable<QueueSelectorAttachment> queueSelectors = null, RouterRule prioritizationRule = null, IEnumerable<WorkerSelectorAttachment> workerSelectors = null)
        {
            queueSelectors ??= new List<QueueSelectorAttachment>();
            workerSelectors ??= new List<WorkerSelectorAttachment>();

            return new PagedClassificationPolicy(id, name, fallbackQueueId, queueSelectors?.ToList(), prioritizationRule, workerSelectors?.ToList());
        }

        /// <summary> Initializes a new instance of DistributionPolicy. </summary>
        /// <param name="id"> The unique identifier of the policy. </param>
        /// <param name="name"> The human readable name of the policy. </param>
        /// <param name="offerTtlSeconds"> The expiry time of any offers created under this policy will be governed by the offer time to live. </param>
        /// <param name="mode"> Abstract base class for defining a distribution mode. </param>
        /// <returns> A new <see cref="JobRouter.DistributionPolicy"/> instance for mocking. </returns>
        public static DistributionPolicy DistributionPolicy(string id = null, string name = null, double? offerTtlSeconds = null, DistributionMode mode = null)
        {
            return new DistributionPolicy(id, name, offerTtlSeconds, mode);
        }

        /// <summary> Initializes a new instance of DistributionPolicyCollection. </summary>
        /// <param name="value"></param>
        /// <param name="nextLink"></param>
        /// <returns> A new <see cref="JobRouter.DistributionPolicyCollection"/> instance for mocking. </returns>
        public static DistributionPolicyCollection DistributionPolicyCollection(IEnumerable<PagedDistributionPolicy> value = null, string nextLink = null)
        {
            value ??= new List<PagedDistributionPolicy>();

            return new DistributionPolicyCollection(value?.ToList(), nextLink);
        }

        /// <summary> Initializes a new instance of PagedDistributionPolicy. </summary>
        /// <param name="id"> The unique identifier of the policy. </param>
        /// <param name="name"> The human readable name of the policy. </param>
        /// <param name="offerTtlSeconds"> The expiry time of any offers created under this policy will be governed by the offer time to live. </param>
        /// <param name="mode"> Abstract base class for defining a distribution mode. </param>
        /// <returns> A new <see cref="JobRouter.PagedDistributionPolicy"/> instance for mocking. </returns>
        public static PagedDistributionPolicy PagedDistributionPolicy(string id = null, string name = null, double? offerTtlSeconds = null, DistributionMode mode = null)
        {
            return new PagedDistributionPolicy(id, name, offerTtlSeconds, mode);
        }

        /// <summary> Initializes a new instance of ExceptionPolicy. </summary>
        /// <param name="id"> The Id of the exception policy. </param>
        /// <param name="name"> (Optional) The name of the exception policy. </param>
        /// <param name="exceptionRules"> (Optional) A dictionary collection of exception rules on the exception policy. Key is the Id of each exception rule. </param>
        /// <returns> A new <see cref="JobRouter.ExceptionPolicy"/> instance for mocking. </returns>
        public static ExceptionPolicy ExceptionPolicy(string id = null, string name = null, IDictionary<string, ExceptionRule> exceptionRules = null)
        {
            exceptionRules ??= new Dictionary<string, ExceptionRule>();

            return new ExceptionPolicy(id, name, exceptionRules);
        }

        /// <summary> Initializes a new instance of ExceptionPolicyCollection. </summary>
        /// <param name="value"></param>
        /// <param name="nextLink"></param>
        /// <returns> A new <see cref="JobRouter.ExceptionPolicyCollection"/> instance for mocking. </returns>
        public static ExceptionPolicyCollection ExceptionPolicyCollection(IEnumerable<PagedExceptionPolicy> value = null, string nextLink = null)
        {
            value ??= new List<PagedExceptionPolicy>();

            return new ExceptionPolicyCollection(value?.ToList(), nextLink);
        }

        /// <summary> Initializes a new instance of PagedExceptionPolicy. </summary>
        /// <param name="id"> The Id of the exception policy. </param>
        /// <param name="name"> (Optional) The name of the exception policy. </param>
        /// <param name="exceptionRules"> (Optional) A dictionary collection of exception rules on the exception policy. Key is the Id of each exception rule. </param>
        /// <returns> A new <see cref="JobRouter.PagedExceptionPolicy"/> instance for mocking. </returns>
        public static PagedExceptionPolicy PagedExceptionPolicy(string id = null, string name = null, IReadOnlyDictionary<string, ExceptionRule> exceptionRules = null)
        {
            exceptionRules ??= new Dictionary<string, ExceptionRule>();

            return new PagedExceptionPolicy(id, name, exceptionRules);
        }

        /// <summary> Initializes a new instance of JobAssignment. </summary>
        /// <param name="id"> The Id of the job assignment. </param>
        /// <param name="workerId"> The Id of the Worker assigned to the job. </param>
        /// <param name="assignTime"> The assignment time of the job. </param>
        /// <param name="completeTime"> The time the job was marked as completed after being assigned. </param>
        /// <param name="closeTime"> The time the job was marked as closed after being completed. </param>
        /// <returns> A new <see cref="JobRouter.JobAssignment"/> instance for mocking. </returns>
        public static JobAssignment JobAssignment(string id = null, string workerId = null, DateTimeOffset assignTime = default, DateTimeOffset? completeTime = null, DateTimeOffset? closeTime = null)
        {
            return new JobAssignment(id, workerId, assignTime, completeTime, closeTime);
        }

        /// <summary> Initializes a new instance of JobCollection. </summary>
        /// <param name="value"></param>
        /// <param name="nextLink"></param>
        /// <returns> A new <see cref="JobRouter.JobCollection"/> instance for mocking. </returns>
        public static JobCollection JobCollection(IEnumerable<PagedJob> value = null, string nextLink = null)
        {
            value ??= new List<PagedJob>();

            return new JobCollection(value?.ToList(), nextLink);
        }

        /// <summary> Initializes a new instance of PagedJob. </summary>
        /// <param name="id"> The id of the job. </param>
        /// <param name="channelReference"> Reference to an external parent context, eg. call ID. </param>
        /// <param name="jobStatus"> The state of the Job. </param>
        /// <param name="enqueueTimeUtc"> The time a job was queued. </param>
        /// <param name="channelId"> The channel identifier. eg. voice, chat, etc. </param>
        /// <param name="classificationPolicyId"> The Id of the Classification policy used for classifying a job. </param>
        /// <param name="queueId"> The Id of the Queue that this job is queued to. </param>
        /// <param name="priority"> The priority of this job. </param>
        /// <param name="dispositionCode"> Reason code for cancelled or closed jobs. </param>
        /// <param name="requestedWorkerSelectors"> A collection of manually specified label selectors, which a worker must satisfy in order to process this job. </param>
        /// <param name="attachedWorkerSelectors"> A collection of label selectors attached by a classification policy, which a worker must satisfy in order to process this job. </param>
        /// <param name="labels"> A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. </param>
        /// <param name="assignments">
        /// A collection of the assignments of the job.
        /// Key is AssignmentId.
        /// </param>
        /// <param name="tags"> A set of non-identifying attributes attached to this job. </param>
        /// <param name="notes"> Notes attached to a job, sorted by timestamp. </param>
        /// <returns> A new <see cref="JobRouter.PagedJob"/> instance for mocking. </returns>
        public static PagedJob PagedJob(string id = null, string channelReference = null, JobStatus? jobStatus = null, DateTimeOffset? enqueueTimeUtc = null, string channelId = null, string classificationPolicyId = null, string queueId = null, int? priority = null, string dispositionCode = null, IEnumerable<WorkerSelector> requestedWorkerSelectors = null, IEnumerable<WorkerSelector> attachedWorkerSelectors = null, IReadOnlyDictionary<string, object> labels = null, IReadOnlyDictionary<string, JobAssignment> assignments = null, IReadOnlyDictionary<string, object> tags = null, IReadOnlyDictionary<string, string> notes = null)
        {
            requestedWorkerSelectors ??= new List<WorkerSelector>();
            attachedWorkerSelectors ??= new List<WorkerSelector>();
            labels ??= new Dictionary<string, object>();
            assignments ??= new Dictionary<string, JobAssignment>();
            tags ??= new Dictionary<string, object>();
            notes ??= new Dictionary<string, string>();

            return new PagedJob(id, channelReference, jobStatus, enqueueTimeUtc, channelId, classificationPolicyId, queueId, priority, dispositionCode, requestedWorkerSelectors?.ToList(), attachedWorkerSelectors?.ToList(), labels, assignments, tags, notes);
        }

        /// <summary> Initializes a new instance of JobPositionDetails. </summary>
        /// <param name="jobId"> Id of the job these details are about. </param>
        /// <param name="position"> Position of the job in question within that queue. </param>
        /// <param name="queueId"> Id of the queue this job is enqueued in. </param>
        /// <param name="queueLength"> Length of the queue: total number of enqueued jobs. </param>
        /// <param name="estimatedWaitTimeMinutes"> Estimated wait time of the job rounded up to the nearest minute. </param>
        /// <returns> A new <see cref="JobRouter.JobPositionDetails"/> instance for mocking. </returns>
        public static JobPositionDetails JobPositionDetails(string jobId = null, int position = default, string queueId = null, int queueLength = default, double estimatedWaitTimeMinutes = default)
        {
            return new JobPositionDetails(jobId, position, queueId, queueLength, estimatedWaitTimeMinutes);
        }

        /// <summary> Initializes a new instance of AcceptJobOfferResult. </summary>
        /// <param name="assignmentId"> The assignment Id that assigns a worker that has accepted an offer to a job. </param>
        /// <param name="jobId"> The Id of the job assigned. </param>
        /// <param name="workerId"> The Id of the worker that has been assigned this job. </param>
        /// <returns> A new <see cref="JobRouter.AcceptJobOfferResult"/> instance for mocking. </returns>
        public static AcceptJobOfferResult AcceptJobOfferResult(string assignmentId = null, string jobId = null, string workerId = null)
        {
            return new AcceptJobOfferResult(assignmentId, jobId, workerId);
        }

        /// <summary> Initializes a new instance of QueueCollection. </summary>
        /// <param name="value"></param>
        /// <param name="nextLink"></param>
        /// <returns> A new <see cref="JobRouter.QueueCollection"/> instance for mocking. </returns>
        public static QueueCollection QueueCollection(IEnumerable<PagedQueue> value = null, string nextLink = null)
        {
            value ??= new List<PagedQueue>();

            return new QueueCollection(value?.ToList(), nextLink);
        }

        /// <summary> Initializes a new instance of QueueStatistics. </summary>
        /// <param name="queueId"> Id of the queue these details are about. </param>
        /// <param name="length"> Length of the queue: total number of enqueued jobs. </param>
        /// <param name="estimatedWaitTimeMinutes"> The estimated wait time of this queue rounded up to the nearest minute, grouped by job priority. </param>
        /// <param name="longestJobWaitTimeMinutes"> The wait time of the job that has been enqueued in this queue for the longest. </param>
        /// <returns> A new <see cref="JobRouter.QueueStatistics"/> instance for mocking. </returns>
        public static QueueStatistics QueueStatistics(string queueId = null, int length = default, IReadOnlyDictionary<string, double> estimatedWaitTimeMinutes = null, double? longestJobWaitTimeMinutes = null)
        {
            estimatedWaitTimeMinutes ??= new Dictionary<string, double>();

            return new QueueStatistics(queueId, length, estimatedWaitTimeMinutes, longestJobWaitTimeMinutes);
        }

        /// <summary> Initializes a new instance of JobOffer. </summary>
        /// <param name="id"> The Id of the offer. </param>
        /// <param name="jobId"> The Id of the job. </param>
        /// <param name="capacityCost"> The capacity cost consumed by the job offer. </param>
        /// <param name="offerTimeUtc"> The time the offer was created. </param>
        /// <param name="expiryTimeUtc"> The time that the offer will expire. </param>
        /// <returns> A new <see cref="JobRouter.JobOffer"/> instance for mocking. </returns>
        public static JobOffer JobOffer(string id = null, string jobId = null, int capacityCost = default, DateTimeOffset? offerTimeUtc = null, DateTimeOffset? expiryTimeUtc = null)
        {
            return new JobOffer(id, jobId, capacityCost, offerTimeUtc, expiryTimeUtc);
        }

        /// <summary> Initializes a new instance of WorkerAssignment. </summary>
        /// <param name="id"> The Id of the assignment. </param>
        /// <param name="jobId"> The Id of the Job assigned. </param>
        /// <param name="capacityCost"> The amount of capacity this assignment has consumed on the worker. </param>
        /// <param name="assignTime"> The assignment time of the job. </param>
        /// <returns> A new <see cref="JobRouter.WorkerAssignment"/> instance for mocking. </returns>
        public static WorkerAssignment WorkerAssignment(string id = null, string jobId = null, int capacityCost = default, DateTimeOffset assignTime = default)
        {
            return new WorkerAssignment(id, jobId, capacityCost, assignTime);
        }

        /// <summary> Initializes a new instance of PagedWorker. </summary>
        /// <param name="id"></param>
        /// <param name="state"> The current state of the worker. </param>
        /// <param name="queueAssignments"> The queue(s) that this worker can receive work from. </param>
        /// <param name="totalCapacity"> The total capacity score this worker has to manage multiple concurrent jobs. </param>
        /// <param name="labels"> A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. </param>
        /// <param name="tags"> A set of non-identifying attributes attached to this worker. </param>
        /// <param name="channelConfigurations"> The channel(s) this worker can handle and their impact on the workers capacity. </param>
        /// <param name="offers"> A list of active offers issued to this worker. </param>
        /// <param name="assignedJobs"> A list of assigned jobs attached to this worker. </param>
        /// <param name="loadRatio"> A value indicating the workers capacity. A value of &apos;1&apos; means all capacity is consumed. A value of &apos;0&apos; means no capacity is currently consumed. </param>
        /// <param name="availableForOffers"> A flag indicating this worker is open to receive offers or not. </param>
        /// <returns> A new <see cref="JobRouter.PagedWorker"/> instance for mocking. </returns>
        public static PagedWorker PagedWorker(string id = null, PagedWorkerState? state = null, IReadOnlyDictionary<string, object> queueAssignments = null, int? totalCapacity = null, IReadOnlyDictionary<string, object> labels = null, IReadOnlyDictionary<string, object> tags = null, IReadOnlyDictionary<string, ChannelConfiguration> channelConfigurations = null, IEnumerable<JobOffer> offers = null, IEnumerable<WorkerAssignment> assignedJobs = null, double? loadRatio = null, bool? availableForOffers = null)
        {
            queueAssignments ??= new Dictionary<string, object>();
            labels ??= new Dictionary<string, object>();
            tags ??= new Dictionary<string, object>();
            channelConfigurations ??= new Dictionary<string, ChannelConfiguration>();
            offers ??= new List<JobOffer>();
            assignedJobs ??= new List<WorkerAssignment>();

            return new PagedWorker(id, state, queueAssignments, totalCapacity, labels, tags, channelConfigurations, offers?.ToList(), assignedJobs?.ToList(), loadRatio, availableForOffers);
        }
    }
}
