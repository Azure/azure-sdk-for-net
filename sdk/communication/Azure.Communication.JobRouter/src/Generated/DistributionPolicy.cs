// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Communication.JobRouter
{
    /// <summary> Policy governing how jobs are distributed to workers. </summary>
    public partial class DistributionPolicy
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DistributionPolicy"/>. </summary>
        internal DistributionPolicy()
        {
            _serializedAdditionalRawData = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="DistributionPolicy"/>. </summary>
        /// <param name="etag"> Concurrency Token. </param>
        /// <param name="id"> The unique identifier of the policy. </param>
        /// <param name="name"> The human readable name of the policy. </param>
        /// <param name="offerExpiresAfterSeconds">
        /// The number of seconds after which any offers created under this policy will be
        /// expired.
        /// </param>
        /// <param name="mode"> Abstract base class for defining a distribution mode. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DistributionPolicy(string etag, string id, string name, double? offerExpiresAfterSeconds, DistributionMode mode, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            _etag = etag;
            Id = id;
            Name = name;
            _offerExpiresAfterSeconds = offerExpiresAfterSeconds;
            Mode = mode;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }
        /// <summary> The unique identifier of the policy. </summary>
        public string Id { get; }
    }
}
