// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.JobRouter
{
    /// <summary> The current state of the worker. </summary>
    public readonly partial struct PagedWorkerState : IEquatable<PagedWorkerState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PagedWorkerState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PagedWorkerState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "active";
        private const string DrainingValue = "draining";
        private const string InactiveValue = "inactive";

        /// <summary> active. </summary>
        public static PagedWorkerState Active { get; } = new PagedWorkerState(ActiveValue);
        /// <summary> draining. </summary>
        public static PagedWorkerState Draining { get; } = new PagedWorkerState(DrainingValue);
        /// <summary> inactive. </summary>
        public static PagedWorkerState Inactive { get; } = new PagedWorkerState(InactiveValue);
        /// <summary> Determines if two <see cref="PagedWorkerState"/> values are the same. </summary>
        public static bool operator ==(PagedWorkerState left, PagedWorkerState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PagedWorkerState"/> values are not the same. </summary>
        public static bool operator !=(PagedWorkerState left, PagedWorkerState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PagedWorkerState"/>. </summary>
        public static implicit operator PagedWorkerState(string value) => new PagedWorkerState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PagedWorkerState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PagedWorkerState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
