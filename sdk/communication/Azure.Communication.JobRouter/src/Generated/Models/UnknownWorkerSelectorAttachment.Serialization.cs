// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Communication.JobRouter
{
    internal partial class UnknownWorkerSelectorAttachment : IUtf8JsonSerializable, IModelJsonSerializable<WorkerSelectorAttachment>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<WorkerSelectorAttachment>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<WorkerSelectorAttachment>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<WorkerSelectorAttachment>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("kind"u8);
            writer.WriteStringValue(Kind);
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static WorkerSelectorAttachment DeserializeUnknownWorkerSelectorAttachment(JsonElement element, ModelSerializerOptions options = default) => DeserializeWorkerSelectorAttachment(element, options);

        WorkerSelectorAttachment IModelJsonSerializable<WorkerSelectorAttachment>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<WorkerSelectorAttachment>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeUnknownWorkerSelectorAttachment(doc.RootElement, options);
        }

        BinaryData IModelSerializable<WorkerSelectorAttachment>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<WorkerSelectorAttachment>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        WorkerSelectorAttachment IModelSerializable<WorkerSelectorAttachment>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<WorkerSelectorAttachment>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeWorkerSelectorAttachment(doc.RootElement, options);
        }
    }
}
