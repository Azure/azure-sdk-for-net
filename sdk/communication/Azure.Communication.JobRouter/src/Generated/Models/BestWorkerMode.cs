// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Communication.JobRouter.Models
{
    /// <summary> Jobs are distributed to the worker with the strongest abilities available. </summary>
    public partial class BestWorkerMode : DistributionMode
    {

        /// <summary> Initializes a new instance of BestWorkerMode. </summary>
        /// <param name="kind"> The type discriminator describing a sub-type of Mode. </param>
        /// <param name="minConcurrentOffers"> Governs the minimum desired number of active concurrent offers a job can have. </param>
        /// <param name="maxConcurrentOffers"> Governs the maximum number of active concurrent offers a job can have. </param>
        /// <param name="bypassSelectors">
        /// (Optional)
        /// 
        /// If set to true, then router will match workers to jobs even if they don&apos;t match label selectors.
        /// 
        /// Warning: You may get workers that are not qualified for the job they are matched with if you set this
        /// 
        /// variable to true. This flag is intended more for temporary usage.
        /// 
        /// By default, set to false.
        /// </param>
        /// <param name="scoringRule">
        /// (Optional)
        /// 
        /// Define a scoring rule to use, when calculating a score to determine the best worker.
        /// 
        /// If not set, will use a default scoring formula that uses the number of job labels that the worker
        /// 
        /// labels match, as well as the number of label selectors the worker labels match and/or exceed
        /// 
        /// using a logistic function (https://en.wikipedia.org/wiki/Logistic_function).
        /// </param>
        /// <param name="scoringRuleOptions"> Encapsulates all options that can be passed as parameters for scoring rule with BestWorkerMode. </param>
        internal BestWorkerMode(string kind, int minConcurrentOffers, int maxConcurrentOffers, bool? bypassSelectors, RouterRule scoringRule, ScoringRuleOptions scoringRuleOptions) : base(kind, minConcurrentOffers, maxConcurrentOffers, bypassSelectors)
        {
            ScoringRule = scoringRule;
            ScoringRuleOptions = scoringRuleOptions;
            Kind = kind ?? "best-worker";
        }

        /// <summary>
        /// (Optional)
        /// 
        /// Define a scoring rule to use, when calculating a score to determine the best worker.
        /// 
        /// If not set, will use a default scoring formula that uses the number of job labels that the worker
        /// 
        /// labels match, as well as the number of label selectors the worker labels match and/or exceed
        /// 
        /// using a logistic function (https://en.wikipedia.org/wiki/Logistic_function).
        /// </summary>
        public RouterRule ScoringRule { get; set; }
        /// <summary> Encapsulates all options that can be passed as parameters for scoring rule with BestWorkerMode. </summary>
        public ScoringRuleOptions ScoringRuleOptions { get; set; }
    }
}
