// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Communication.JobRouter
{
    /// <summary> Describes a set of label selectors that will be attached if the given condition resolves to true. </summary>
    public partial class ConditionalWorkerSelector : WorkerSelectorAttachment
    {
        /// <summary> Initializes a new instance of ConditionalWorkerSelector. </summary>
        /// <param name="condition">
        /// A rule of one of the following types:
        ///             
        /// StaticRule:  A rule providing static rules that always return the same result, regardless of input.
        /// DirectMapRule:  A rule that return the same labels as the input labels.
        /// ExpressionRule: A rule providing inline expression rules.
        /// AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        /// </param>
        /// <param name="labelSelectors"> The label selectors to attach. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="condition"/> or <paramref name="labelSelectors"/> is null. </exception>
        public ConditionalWorkerSelector(RouterRule condition, IEnumerable<WorkerSelector> labelSelectors)
        {
            if (condition == null)
            {
                throw new ArgumentNullException(nameof(condition));
            }
            if (labelSelectors == null)
            {
                throw new ArgumentNullException(nameof(labelSelectors));
            }

            Condition = condition;
            LabelSelectors = labelSelectors.ToList();
            Kind = "conditional";
        }

        /// <summary> Initializes a new instance of ConditionalWorkerSelector. </summary>
        /// <param name="kind"> The type discriminator describing the type of label selector attachment. </param>
        /// <param name="condition">
        /// A rule of one of the following types:
        ///             
        /// StaticRule:  A rule providing static rules that always return the same result, regardless of input.
        /// DirectMapRule:  A rule that return the same labels as the input labels.
        /// ExpressionRule: A rule providing inline expression rules.
        /// AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        /// </param>
        /// <param name="labelSelectors"> The label selectors to attach. </param>
        internal ConditionalWorkerSelector(string kind, RouterRule condition, IList<WorkerSelector> labelSelectors) : base(kind)
        {
            Condition = condition;
            LabelSelectors = labelSelectors;
            Kind = kind ?? "conditional";
        }

        /// <summary>
        /// A rule of one of the following types:
        ///             
        /// StaticRule:  A rule providing static rules that always return the same result, regardless of input.
        /// DirectMapRule:  A rule that return the same labels as the input labels.
        /// ExpressionRule: A rule providing inline expression rules.
        /// AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        /// </summary>
        public RouterRule Condition { get; set; }
        /// <summary> The label selectors to attach. </summary>
        public IList<WorkerSelector> LabelSelectors { get; }
    }
}
