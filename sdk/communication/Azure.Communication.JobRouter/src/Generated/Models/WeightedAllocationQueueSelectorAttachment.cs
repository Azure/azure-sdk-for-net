// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Communication.JobRouter
{
    /// <summary> Describes multiple sets of queue selectors, of which one will be selected and attached according to a weighting. </summary>
    public partial class WeightedAllocationQueueSelectorAttachment : QueueSelectorAttachment
    {
        /// <summary> Initializes a new instance of <see cref="WeightedAllocationQueueSelectorAttachment"/>. </summary>
        /// <param name="allocations"> A collection of percentage based weighted allocations. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="allocations"/> is null. </exception>
        public WeightedAllocationQueueSelectorAttachment(IEnumerable<QueueWeightedAllocation> allocations)
        {
            Argument.AssertNotNull(allocations, nameof(allocations));

            Allocations = allocations.ToList();
            Kind = "weighted-allocation-queue-selector";
        }

        /// <summary> Initializes a new instance of <see cref="WeightedAllocationQueueSelectorAttachment"/>. </summary>
        /// <param name="kind"> The type discriminator describing the type of queue selector attachment. </param>
        /// <param name="allocations"> A collection of percentage based weighted allocations. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WeightedAllocationQueueSelectorAttachment(string kind, IList<QueueWeightedAllocation> allocations, Dictionary<string, BinaryData> serializedAdditionalRawData) : base(kind, serializedAdditionalRawData)
        {
            Allocations = allocations;
            Kind = kind ?? "weighted-allocation-queue-selector";
        }

        /// <summary> Initializes a new instance of <see cref="WeightedAllocationQueueSelectorAttachment"/> for deserialization. </summary>
        internal WeightedAllocationQueueSelectorAttachment()
        {
        }

        /// <summary> A collection of percentage based weighted allocations. </summary>
        public IList<QueueWeightedAllocation> Allocations { get; }
    }
}
