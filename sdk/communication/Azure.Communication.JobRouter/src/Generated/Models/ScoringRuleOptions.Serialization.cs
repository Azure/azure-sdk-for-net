// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.JobRouter
{
    public partial class ScoringRuleOptions : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(BatchSize))
            {
                writer.WritePropertyName("batchSize");
                writer.WriteNumberValue(BatchSize.Value);
            }
            if (Optional.IsCollectionDefined(ScoringParameters))
            {
                writer.WritePropertyName("scoringParameters");
                writer.WriteStartArray();
                foreach (var item in ScoringParameters)
                {
                    writer.WriteStringValue(item.ToSerialString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AllowScoringBatchOfWorkers))
            {
                writer.WritePropertyName("allowScoringBatchOfWorkers");
                writer.WriteBooleanValue(AllowScoringBatchOfWorkers.Value);
            }
            if (Optional.IsDefined(DescendingOrder))
            {
                writer.WritePropertyName("descendingOrder");
                writer.WriteBooleanValue(DescendingOrder.Value);
            }
            writer.WriteEndObject();
        }

        internal static ScoringRuleOptions DeserializeScoringRuleOptions(JsonElement element)
        {
            Optional<int> batchSize = default;
            Optional<IList<ScoringRuleParameterSelector>> scoringParameters = default;
            Optional<bool> allowScoringBatchOfWorkers = default;
            Optional<bool> descendingOrder = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("batchSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    batchSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("scoringParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ScoringRuleParameterSelector> array = new List<ScoringRuleParameterSelector>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString().ToScoringRuleParameterSelector());
                    }
                    scoringParameters = array;
                    continue;
                }
                if (property.NameEquals("allowScoringBatchOfWorkers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    allowScoringBatchOfWorkers = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("descendingOrder"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    descendingOrder = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ScoringRuleOptions(Optional.ToNullable(batchSize), Optional.ToList(scoringParameters), Optional.ToNullable(allowScoringBatchOfWorkers), Optional.ToNullable(descendingOrder));
        }
    }
}
