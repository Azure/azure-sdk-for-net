// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.JobRouter
{
    /// <summary> The JobMatchModeType. </summary>
    internal readonly partial struct JobMatchModeType : IEquatable<JobMatchModeType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="JobMatchModeType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JobMatchModeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string QueueAndMatchModeValue = "queueAndMatchMode";
        private const string ScheduleAndSuspendModeValue = "scheduleAndSuspendMode";
        private const string SuspendModeValue = "suspendMode";

        /// <summary> queueAndMatchMode. </summary>
        public static JobMatchModeType QueueAndMatchMode { get; } = new JobMatchModeType(QueueAndMatchModeValue);
        /// <summary> scheduleAndSuspendMode. </summary>
        public static JobMatchModeType ScheduleAndSuspendMode { get; } = new JobMatchModeType(ScheduleAndSuspendModeValue);
        /// <summary> suspendMode. </summary>
        public static JobMatchModeType SuspendMode { get; } = new JobMatchModeType(SuspendModeValue);
        /// <summary> Determines if two <see cref="JobMatchModeType"/> values are the same. </summary>
        public static bool operator ==(JobMatchModeType left, JobMatchModeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JobMatchModeType"/> values are not the same. </summary>
        public static bool operator !=(JobMatchModeType left, JobMatchModeType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="JobMatchModeType"/>. </summary>
        public static implicit operator JobMatchModeType(string value) => new JobMatchModeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JobMatchModeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JobMatchModeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
