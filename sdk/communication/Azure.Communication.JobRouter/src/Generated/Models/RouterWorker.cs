// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Communication.JobRouter.Models
{
    /// <summary> The RouterWorker. </summary>
    public partial class RouterWorker
    {
        /// <summary> Initializes a new instance of RouterWorker. </summary>
        /// <param name="id"> . </param>
        /// <param name="state"> . </param>
        /// <param name="totalCapacity"> . </param>
        /// <param name="loadRatio"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        internal RouterWorker(string id, WorkerState state, int totalCapacity, double loadRatio)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            Id = id;
            State = state;
            QueueAssignments = new ChangeTrackingList<QueueAssignment>();
            TotalCapacity = totalCapacity;
            _labels = new ChangeTrackingDictionary<string, object>();
            ChannelConfigurations = new ChangeTrackingList<ChannelConfiguration>();
            Offers = new ChangeTrackingList<JobOffer>();
            AssignedJobs = new ChangeTrackingList<WorkerAssignment>();
            LoadRatio = loadRatio;
        }

        /// <summary> Initializes a new instance of RouterWorker. </summary>
        /// <param name="id"> . </param>
        /// <param name="state"> . </param>
        /// <param name="queueAssignments"> . </param>
        /// <param name="totalCapacity"> . </param>
        /// <param name="Labels"> Dictionary of &lt;any&gt;. </param>
        /// <param name="channelConfigurations"> . </param>
        /// <param name="offers"> . </param>
        /// <param name="assignedJobs"> . </param>
        /// <param name="loadRatio"> . </param>
        internal RouterWorker(string id, WorkerState state, IReadOnlyList<QueueAssignment> queueAssignments, int totalCapacity, IDictionary<string, object> Labels, IReadOnlyList<ChannelConfiguration> channelConfigurations, IReadOnlyList<JobOffer> offers, IReadOnlyList<WorkerAssignment> assignedJobs, double loadRatio)
        {
            Id = id;
            State = state;
            QueueAssignments = queueAssignments;
            TotalCapacity = totalCapacity;
            _labels = Labels;
            ChannelConfigurations = channelConfigurations;
            Offers = offers;
            AssignedJobs = assignedJobs;
            LoadRatio = loadRatio;
        }

        public string Id { get; }
        public WorkerState State { get; }
        public IReadOnlyList<QueueAssignment> QueueAssignments { get; }
        public int TotalCapacity { get; }
        public IReadOnlyList<ChannelConfiguration> ChannelConfigurations { get; }
        public IReadOnlyList<JobOffer> Offers { get; }
        public IReadOnlyList<WorkerAssignment> AssignedJobs { get; }
        public double LoadRatio { get; }
    }
}
