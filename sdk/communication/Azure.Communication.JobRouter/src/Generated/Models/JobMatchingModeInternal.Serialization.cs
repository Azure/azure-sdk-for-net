// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.JobRouter
{
    internal partial class JobMatchingModeInternal : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ModeType))
            {
                writer.WritePropertyName("modeType"u8);
                writer.WriteStringValue(ModeType.Value.ToString());
            }
            if (Optional.IsDefined(QueueAndMatchMode))
            {
                writer.WritePropertyName("queueAndMatchMode"u8);
                writer.WriteObjectValue(QueueAndMatchMode);
            }
            if (Optional.IsDefined(ScheduleAndSuspendMode))
            {
                writer.WritePropertyName("scheduleAndSuspendMode"u8);
                writer.WriteObjectValue(ScheduleAndSuspendMode);
            }
            if (Optional.IsDefined(SuspendMode))
            {
                writer.WritePropertyName("suspendMode"u8);
                writer.WriteObjectValue(SuspendMode);
            }
            writer.WriteEndObject();
        }

        internal static JobMatchingModeInternal DeserializeJobMatchingModeInternal(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<JobMatchModeType> modeType = default;
            Optional<object> queueAndMatchMode = default;
            Optional<ScheduleAndSuspendModeInternal> scheduleAndSuspendMode = default;
            Optional<object> suspendMode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("modeType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    modeType = new JobMatchModeType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("queueAndMatchMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    queueAndMatchMode = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("scheduleAndSuspendMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scheduleAndSuspendMode = ScheduleAndSuspendModeInternal.DeserializeScheduleAndSuspendModeInternal(property.Value);
                    continue;
                }
                if (property.NameEquals("suspendMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    suspendMode = property.Value.GetObject();
                    continue;
                }
            }
            return new JobMatchingModeInternal(Optional.ToNullable(modeType), queueAndMatchMode.Value, scheduleAndSuspendMode.Value, suspendMode.Value);
        }
    }
}
