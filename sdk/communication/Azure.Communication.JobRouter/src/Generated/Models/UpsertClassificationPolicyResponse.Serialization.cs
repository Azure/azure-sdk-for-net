// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.JobRouter.Models
{
    public partial class UpsertClassificationPolicyResponse
    {
        internal static UpsertClassificationPolicyResponse DeserializeUpsertClassificationPolicyResponse(JsonElement element)
        {
            string id = default;
            Optional<string> name = default;
            Optional<string> fallbackQueueId = default;
            Optional<QueueSelector> queueSelector = default;
            Optional<RouterRule> prioritizationRule = default;
            Optional<IReadOnlyList<LabelSelectorAttachment>> workerSelectors = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fallbackQueueId"))
                {
                    fallbackQueueId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("queueSelector"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        queueSelector = null;
                        continue;
                    }
                    queueSelector = QueueSelector.DeserializeQueueSelector(property.Value);
                    continue;
                }
                if (property.NameEquals("prioritizationRule"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        prioritizationRule = null;
                        continue;
                    }
                    prioritizationRule = RouterRule.DeserializeRouterRule(property.Value);
                    continue;
                }
                if (property.NameEquals("workerSelectors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        workerSelectors = null;
                        continue;
                    }
                    List<LabelSelectorAttachment> array = new List<LabelSelectorAttachment>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LabelSelectorAttachment.DeserializeLabelSelectorAttachment(item));
                    }
                    workerSelectors = array;
                    continue;
                }
            }
            return new UpsertClassificationPolicyResponse(id, name.Value, fallbackQueueId.Value, queueSelector.Value, prioritizationRule.Value, Optional.ToList(workerSelectors));
        }
    }
}
