// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Communication.JobRouter.Models
{
    /// <summary> The RouterJob. </summary>
    public partial class RouterJob
    {
        /// <summary> Initializes a new instance of RouterJob. </summary>
        /// <param name="id"> The id of the Job. </param>
        /// <param name="jobStatus"> The state of the Job. </param>
        /// <param name="channelId"> The channel or modality upon which this job will be executed. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="channelId"/> is null. </exception>
        internal RouterJob(string id, JobStatus jobStatus, string channelId)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (channelId == null)
            {
                throw new ArgumentNullException(nameof(channelId));
            }

            Id = id;
            JobStatus = jobStatus;
            ChannelId = channelId;
            WorkerSelectors = new ChangeTrackingList<LabelSelector>();
            _labels = new ChangeTrackingDictionary<string, object>();
            Assignments = new ChangeTrackingDictionary<string, JobAssignment>();
            Notes = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of RouterJob. </summary>
        /// <param name="id"> The id of the Job. </param>
        /// <param name="channelReference"> Reference to an external parent context, eg. call ID. </param>
        /// <param name="jobStatus"> The state of the Job. </param>
        /// <param name="enqueueTimeUtc"> The time a job was queued. </param>
        /// <param name="channelId"> The channel or modality upon which this job will be executed. </param>
        /// <param name="classificationPolicyId"> The Id of the Classification policy used for classifying a job. </param>
        /// <param name="queueId"> The Id of the Queue that a job is queued to. </param>
        /// <param name="priority"> The priority of this job. </param>
        /// <param name="dispositionCode"> Reason code for cancelled or closed jobs. </param>
        /// <param name="workerSelectors"> A collection of label selectors a worker must satisfy in order to process this job. </param>
        /// <param name="Labels"> A set of key/value pairs used by the classification process to determine queue, priority and attach label selectors. </param>
        /// <param name="assignments">
        /// A collection of the assignments of the job.
        /// 
        /// Key is AssignmentId.
        /// </param>
        /// <param name="notes"> Generic text notes attached to a job, sorted by timestamp. </param>
        internal RouterJob(string id, string channelReference, JobStatus jobStatus, DateTimeOffset? enqueueTimeUtc, string channelId, string classificationPolicyId, string queueId, int? priority, string dispositionCode, IReadOnlyList<LabelSelector> workerSelectors, IDictionary<string, object> Labels, IReadOnlyDictionary<string, JobAssignment> assignments, IReadOnlyDictionary<string, string> notes)
        {
            Id = id;
            ChannelReference = channelReference;
            JobStatus = jobStatus;
            EnqueueTimeUtc = enqueueTimeUtc;
            ChannelId = channelId;
            ClassificationPolicyId = classificationPolicyId;
            QueueId = queueId;
            Priority = priority;
            DispositionCode = dispositionCode;
            WorkerSelectors = workerSelectors;
            _labels = Labels;
            Assignments = assignments;
            Notes = notes;
        }

        /// <summary> The id of the Job. </summary>
        public string Id { get; }
        /// <summary> Reference to an external parent context, eg. call ID. </summary>
        public string ChannelReference { get; }
        /// <summary> The state of the Job. </summary>
        public JobStatus JobStatus { get; }
        /// <summary> The time a job was queued. </summary>
        public DateTimeOffset? EnqueueTimeUtc { get; }
        /// <summary> The channel or modality upon which this job will be executed. </summary>
        public string ChannelId { get; }
        /// <summary> The Id of the Classification policy used for classifying a job. </summary>
        public string ClassificationPolicyId { get; }
        /// <summary> The Id of the Queue that a job is queued to. </summary>
        public string QueueId { get; }
        /// <summary> The priority of this job. </summary>
        public int? Priority { get; }
        /// <summary> Reason code for cancelled or closed jobs. </summary>
        public string DispositionCode { get; }
        /// <summary> A collection of label selectors a worker must satisfy in order to process this job. </summary>
        public IReadOnlyList<LabelSelector> WorkerSelectors { get; }
        /// <summary>
        /// A collection of the assignments of the job.
        /// 
        /// Key is AssignmentId.
        /// </summary>
        public IReadOnlyDictionary<string, JobAssignment> Assignments { get; }
        /// <summary> Generic text notes attached to a job, sorted by timestamp. </summary>
        public IReadOnlyDictionary<string, string> Notes { get; }
    }
}
