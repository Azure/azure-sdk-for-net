// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.JobRouter.Models
{
    public partial class RouterWorker
    {
        internal static RouterWorker DeserializeRouterWorker(JsonElement element)
        {
            string id = default;
            WorkerState state = default;
            Optional<IReadOnlyList<QueueAssignment>> queueAssignments = default;
            int totalCapacity = default;
            Optional<IDictionary<string, object>> labels = default;
            Optional<IReadOnlyList<ChannelConfiguration>> channelConfigurations = default;
            Optional<IReadOnlyList<JobOffer>> offers = default;
            Optional<IReadOnlyList<WorkerAssignment>> assignedJobs = default;
            double loadRatio = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    state = property.Value.GetString().ToWorkerState();
                    continue;
                }
                if (property.NameEquals("queueAssignments"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        queueAssignments = null;
                        continue;
                    }
                    List<QueueAssignment> array = new List<QueueAssignment>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(QueueAssignment.DeserializeQueueAssignment(item));
                    }
                    queueAssignments = array;
                    continue;
                }
                if (property.NameEquals("totalCapacity"))
                {
                    totalCapacity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("labels"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        labels = null;
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    labels = dictionary;
                    continue;
                }
                if (property.NameEquals("channelConfigurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        channelConfigurations = null;
                        continue;
                    }
                    List<ChannelConfiguration> array = new List<ChannelConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ChannelConfiguration.DeserializeChannelConfiguration(item));
                    }
                    channelConfigurations = array;
                    continue;
                }
                if (property.NameEquals("offers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        offers = null;
                        continue;
                    }
                    List<JobOffer> array = new List<JobOffer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(JobOffer.DeserializeJobOffer(item));
                    }
                    offers = array;
                    continue;
                }
                if (property.NameEquals("assignedJobs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        assignedJobs = null;
                        continue;
                    }
                    List<WorkerAssignment> array = new List<WorkerAssignment>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WorkerAssignment.DeserializeWorkerAssignment(item));
                    }
                    assignedJobs = array;
                    continue;
                }
                if (property.NameEquals("loadRatio"))
                {
                    loadRatio = property.Value.GetDouble();
                    continue;
                }
            }
            return new RouterWorker(id, state, Optional.ToList(queueAssignments), totalCapacity, Optional.ToDictionary(labels), Optional.ToList(channelConfigurations), Optional.ToList(offers), Optional.ToList(assignedJobs), loadRatio);
        }
    }
}
