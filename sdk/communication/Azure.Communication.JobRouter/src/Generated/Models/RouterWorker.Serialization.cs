// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Communication.JobRouter;
using Azure.Core;

namespace Azure.Communication.JobRouter.Models
{
    public partial class RouterWorker : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsCollectionDefined(_queueAssignments))
            {
                writer.WritePropertyName("queueAssignments"u8);
                writer.WriteStartObject();
                foreach (var item in _queueAssignments)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Core.Optional.IsDefined(TotalCapacity))
            {
                writer.WritePropertyName("totalCapacity"u8);
                writer.WriteNumberValue(TotalCapacity.Value);
            }
            if (Core.Optional.IsCollectionDefined(_labels))
            {
                writer.WritePropertyName("labels"u8);
                writer.WriteStartObject();
                foreach (var item in _labels)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Core.Optional.IsCollectionDefined(_tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in _tags)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Core.Optional.IsCollectionDefined(_channelConfigurations))
            {
                writer.WritePropertyName("channelConfigurations"u8);
                writer.WriteStartObject();
                foreach (var item in _channelConfigurations)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Core.Optional.IsDefined(AvailableForOffers))
            {
                writer.WritePropertyName("availableForOffers"u8);
                writer.WriteBooleanValue(AvailableForOffers.Value);
            }
            writer.WriteEndObject();
        }

        internal static RouterWorker DeserializeRouterWorker(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> id = default;
            Core.Optional<RouterWorkerState> state = default;
            Core.Optional<IDictionary<string, object>> queueAssignments = default;
            Core.Optional<int> totalCapacity = default;
            Core.Optional<IDictionary<string, object>> labels = default;
            Core.Optional<IDictionary<string, object>> tags = default;
            Core.Optional<IDictionary<string, ChannelConfiguration>> channelConfigurations = default;
            Core.Optional<IReadOnlyList<RouterJobOffer>> offers = default;
            Core.Optional<IReadOnlyList<RouterWorkerAssignment>> assignedJobs = default;
            Core.Optional<double> loadRatio = default;
            Core.Optional<bool> availableForOffers = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new RouterWorkerState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("queueAssignments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, property0.Value.GetObject());
                        }
                    }
                    queueAssignments = dictionary;
                    continue;
                }
                if (property.NameEquals("totalCapacity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalCapacity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("labels"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, property0.Value.GetObject());
                        }
                    }
                    labels = dictionary;
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, property0.Value.GetObject());
                        }
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("channelConfigurations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, ChannelConfiguration> dictionary = new Dictionary<string, ChannelConfiguration>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, ChannelConfiguration.DeserializeChannelConfiguration(property0.Value));
                    }
                    channelConfigurations = dictionary;
                    continue;
                }
                if (property.NameEquals("offers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RouterJobOffer> array = new List<RouterJobOffer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RouterJobOffer.DeserializeRouterJobOffer(item));
                    }
                    offers = array;
                    continue;
                }
                if (property.NameEquals("assignedJobs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RouterWorkerAssignment> array = new List<RouterWorkerAssignment>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RouterWorkerAssignment.DeserializeRouterWorkerAssignment(item));
                    }
                    assignedJobs = array;
                    continue;
                }
                if (property.NameEquals("loadRatio"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    loadRatio = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("availableForOffers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableForOffers = property.Value.GetBoolean();
                    continue;
                }
            }
            return new RouterWorker(id.Value, Core.Optional.ToNullable(state), Core.Optional.ToDictionary(queueAssignments), Core.Optional.ToNullable(totalCapacity), Core.Optional.ToDictionary(labels), Core.Optional.ToDictionary(tags), Core.Optional.ToDictionary(channelConfigurations), Core.Optional.ToList(offers), Core.Optional.ToList(assignedJobs), Core.Optional.ToNullable(loadRatio), Core.Optional.ToNullable(availableForOffers));
        }
    }
}
