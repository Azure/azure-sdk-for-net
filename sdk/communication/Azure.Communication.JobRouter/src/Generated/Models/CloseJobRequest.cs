// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Communication.JobRouter
{
    /// <summary> Request payload for closing jobs. </summary>
    internal partial class CloseJobRequest
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="CloseJobRequest"/>. </summary>
        /// <param name="assignmentId"> The assignment within which the job is to be closed. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assignmentId"/> is null. </exception>
        public CloseJobRequest(string assignmentId)
        {
            Argument.AssertNotNull(assignmentId, nameof(assignmentId));

            AssignmentId = assignmentId;
        }

        /// <summary> Initializes a new instance of <see cref="CloseJobRequest"/>. </summary>
        /// <param name="assignmentId"> The assignment within which the job is to be closed. </param>
        /// <param name="dispositionCode"> Indicates the outcome of the job, populate this field with your own custom values. </param>
        /// <param name="closeAt">
        /// If not provided, worker capacity is released immediately along with a JobClosedEvent notification.
        /// If provided, worker capacity is released along with a JobClosedEvent notification at a future time in UTC.
        /// </param>
        /// <param name="note"> (Optional) A note that will be appended to the jobs' Notes collection with the current timestamp. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal CloseJobRequest(string assignmentId, string dispositionCode, DateTimeOffset? closeAt, string note, Dictionary<string, BinaryData> rawData)
        {
            AssignmentId = assignmentId;
            DispositionCode = dispositionCode;
            CloseAt = closeAt;
            Note = note;
            _rawData = rawData;
        }

        /// <summary> Initializes a new instance of <see cref="CloseJobRequest"/> for deserialization. </summary>
        internal CloseJobRequest()
        {
        }

        /// <summary> The assignment within which the job is to be closed. </summary>
        public string AssignmentId { get; }
        /// <summary> Indicates the outcome of the job, populate this field with your own custom values. </summary>
        public string DispositionCode { get; set; }
        /// <summary>
        /// If not provided, worker capacity is released immediately along with a JobClosedEvent notification.
        /// If provided, worker capacity is released along with a JobClosedEvent notification at a future time in UTC.
        /// </summary>
        public DateTimeOffset? CloseAt { get; set; }
        /// <summary> (Optional) A note that will be appended to the jobs' Notes collection with the current timestamp. </summary>
        public string Note { get; set; }
    }
}
