// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.JobRouter
{
    public partial class ExceptionRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("trigger"u8);
            writer.WriteObjectValue(Trigger);
            writer.WritePropertyName("actions"u8);
            writer.WriteStartObject();
            foreach (var item in Actions)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ExceptionRule DeserializeExceptionRule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            JobExceptionTrigger trigger = default;
            IDictionary<string, ExceptionAction> actions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("trigger"u8))
                {
                    trigger = JobExceptionTrigger.DeserializeJobExceptionTrigger(property.Value);
                    continue;
                }
                if (property.NameEquals("actions"u8))
                {
                    Dictionary<string, ExceptionAction> dictionary = new Dictionary<string, ExceptionAction>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, ExceptionAction.DeserializeExceptionAction(property0.Value));
                    }
                    actions = dictionary;
                    continue;
                }
            }
            return new ExceptionRule(trigger, actions);
        }
    }
}
