// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.JobRouter.Models
{
    public partial class ExceptionRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id");
            writer.WriteStringValue(Id);
            writer.WritePropertyName("trigger");
            writer.WriteObjectValue(Trigger);
            writer.WritePropertyName("actions");
            writer.WriteStartArray();
            foreach (var item in Actions)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static ExceptionRule DeserializeExceptionRule(JsonElement element)
        {
            string id = default;
            JobExceptionTrigger trigger = default;
            IList<ExceptionAction> actions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("trigger"))
                {
                    trigger = JobExceptionTrigger.DeserializeJobExceptionTrigger(property.Value);
                    continue;
                }
                if (property.NameEquals("actions"))
                {
                    List<ExceptionAction> array = new List<ExceptionAction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ExceptionAction.DeserializeExceptionAction(item));
                    }
                    actions = array;
                    continue;
                }
            }
            return new ExceptionRule(id, trigger, actions);
        }
    }
}
