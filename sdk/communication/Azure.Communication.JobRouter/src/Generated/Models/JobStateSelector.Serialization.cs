// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Communication.JobRouter
{
    internal static partial class JobStateSelectorExtensions
    {
        public static string ToSerialString(this JobStateSelector value) => value switch
        {
            JobStateSelector.All => "all",
            JobStateSelector.PendingClassification => "pendingClassification",
            JobStateSelector.Queued => "queued",
            JobStateSelector.Assigned => "assigned",
            JobStateSelector.Completed => "completed",
            JobStateSelector.Closed => "closed",
            JobStateSelector.Cancelled => "cancelled",
            JobStateSelector.ClassificationFailed => "classificationFailed",
            JobStateSelector.Created => "created",
            JobStateSelector.PendingSchedule => "pendingSchedule",
            JobStateSelector.Scheduled => "scheduled",
            JobStateSelector.ScheduleFailed => "scheduleFailed",
            JobStateSelector.WaitingForActivation => "waitingForActivation",
            JobStateSelector.Active => "active",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown JobStateSelector value.")
        };

        public static JobStateSelector ToJobStateSelector(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "all")) return JobStateSelector.All;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "pendingClassification")) return JobStateSelector.PendingClassification;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "queued")) return JobStateSelector.Queued;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "assigned")) return JobStateSelector.Assigned;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "completed")) return JobStateSelector.Completed;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "closed")) return JobStateSelector.Closed;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "cancelled")) return JobStateSelector.Cancelled;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "classificationFailed")) return JobStateSelector.ClassificationFailed;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "created")) return JobStateSelector.Created;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "pendingSchedule")) return JobStateSelector.PendingSchedule;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "scheduled")) return JobStateSelector.Scheduled;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "scheduleFailed")) return JobStateSelector.ScheduleFailed;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "waitingForActivation")) return JobStateSelector.WaitingForActivation;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "active")) return JobStateSelector.Active;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown JobStateSelector value.");
        }
    }
}
