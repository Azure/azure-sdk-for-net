// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Communication.JobRouter
{
    internal static partial class JobStateSelectorExtensions
    {
        public static string ToSerialString(this JobStateSelector value) => value switch
        {
            JobStateSelector.All => "all",
            JobStateSelector.PendingClassification => "pendingClassification",
            JobStateSelector.Queued => "queued",
            JobStateSelector.Assigned => "assigned",
            JobStateSelector.Completed => "completed",
            JobStateSelector.Closed => "closed",
            JobStateSelector.Cancelled => "cancelled",
            JobStateSelector.ClassificationFailed => "classificationFailed",
            JobStateSelector.Active => "active",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown JobStateSelector value.")
        };

        public static JobStateSelector ToJobStateSelector(this string value)
        {
            if (string.Equals(value, "all", StringComparison.InvariantCultureIgnoreCase)) return JobStateSelector.All;
            if (string.Equals(value, "pendingClassification", StringComparison.InvariantCultureIgnoreCase)) return JobStateSelector.PendingClassification;
            if (string.Equals(value, "queued", StringComparison.InvariantCultureIgnoreCase)) return JobStateSelector.Queued;
            if (string.Equals(value, "assigned", StringComparison.InvariantCultureIgnoreCase)) return JobStateSelector.Assigned;
            if (string.Equals(value, "completed", StringComparison.InvariantCultureIgnoreCase)) return JobStateSelector.Completed;
            if (string.Equals(value, "closed", StringComparison.InvariantCultureIgnoreCase)) return JobStateSelector.Closed;
            if (string.Equals(value, "cancelled", StringComparison.InvariantCultureIgnoreCase)) return JobStateSelector.Cancelled;
            if (string.Equals(value, "classificationFailed", StringComparison.InvariantCultureIgnoreCase)) return JobStateSelector.ClassificationFailed;
            if (string.Equals(value, "active", StringComparison.InvariantCultureIgnoreCase)) return JobStateSelector.Active;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown JobStateSelector value.");
        }
    }
}
