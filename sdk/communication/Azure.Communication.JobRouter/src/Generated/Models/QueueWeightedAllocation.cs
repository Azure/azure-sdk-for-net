// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Communication.JobRouter
{
    /// <summary> Contains the weight percentage and queue selectors to be applied if selected for weighted distributions. </summary>
    public partial class QueueWeightedAllocation
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="QueueWeightedAllocation"/>. </summary>
        /// <param name="weight"> The percentage of this weight, expressed as a fraction of 1. </param>
        /// <param name="queueSelectors"> A collection of queue selectors that will be applied if this allocation is selected. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queueSelectors"/> is null. </exception>
        public QueueWeightedAllocation(double weight, IEnumerable<RouterQueueSelector> queueSelectors)
        {
            Argument.AssertNotNull(queueSelectors, nameof(queueSelectors));

            Weight = weight;
            QueueSelectors = queueSelectors.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="QueueWeightedAllocation"/>. </summary>
        /// <param name="weight"> The percentage of this weight, expressed as a fraction of 1. </param>
        /// <param name="queueSelectors"> A collection of queue selectors that will be applied if this allocation is selected. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal QueueWeightedAllocation(double weight, IList<RouterQueueSelector> queueSelectors, Dictionary<string, BinaryData> rawData)
        {
            Weight = weight;
            QueueSelectors = queueSelectors;
            _rawData = rawData;
        }

        /// <summary> Initializes a new instance of <see cref="QueueWeightedAllocation"/> for deserialization. </summary>
        internal QueueWeightedAllocation()
        {
        }

        /// <summary> The percentage of this weight, expressed as a fraction of 1. </summary>
        public double Weight { get; set; }
        /// <summary> A collection of queue selectors that will be applied if this allocation is selected. </summary>
        public IList<RouterQueueSelector> QueueSelectors { get; }
    }
}
