// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Communication.JobRouter
{
    /// <summary> Request payload for completing jobs. </summary>
    internal partial class CompleteJobRequest
    {
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="CompleteJobRequest"/>. </summary>
        /// <param name="assignmentId"> The assignment within the job to complete. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assignmentId"/> is null. </exception>
        public CompleteJobRequest(string assignmentId)
        {
            Argument.AssertNotNull(assignmentId, nameof(assignmentId));

            AssignmentId = assignmentId;
        }

        /// <summary> Initializes a new instance of <see cref="CompleteJobRequest"/>. </summary>
        /// <param name="assignmentId"> The assignment within the job to complete. </param>
        /// <param name="note"> (Optional) A note that will be appended to the jobs' Notes collection with the current timestamp. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal CompleteJobRequest(string assignmentId, string note, Dictionary<string, BinaryData> rawData)
        {
            AssignmentId = assignmentId;
            Note = note;
            _rawData = rawData;
        }

        /// <summary> Initializes a new instance of <see cref="CompleteJobRequest"/> for deserialization. </summary>
        internal CompleteJobRequest()
        {
        }

        /// <summary> The assignment within the job to complete. </summary>
        public string AssignmentId { get; }
        /// <summary> (Optional) A note that will be appended to the jobs' Notes collection with the current timestamp. </summary>
        public string Note { get; set; }
    }
}
