// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.JobRouter.Models
{
    public partial class ConditionalLabelSelector : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("condition");
            writer.WriteObjectValue(Condition);
            writer.WritePropertyName("labelSelectors");
            writer.WriteStartArray();
            foreach (var item in LabelSelectors)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind);
            writer.WriteEndObject();
        }

        internal static ConditionalLabelSelector DeserializeConditionalLabelSelector(JsonElement element)
        {
            RouterRule condition = default;
            IList<LabelSelector> labelSelectors = default;
            string kind = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("condition"))
                {
                    condition = RouterRule.DeserializeRouterRule(property.Value);
                    continue;
                }
                if (property.NameEquals("labelSelectors"))
                {
                    List<LabelSelector> array = new List<LabelSelector>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LabelSelector.DeserializeLabelSelector(item));
                    }
                    labelSelectors = array;
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
            }
            return new ConditionalLabelSelector(kind, condition, labelSelectors);
        }
    }
}
