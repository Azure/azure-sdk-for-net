// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Communication.Email.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.Email
{
    internal partial class EmailRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of EmailRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The communication resource, for example https://my-resource.communication.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public EmailRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string apiVersion = "2021-10-01-preview")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateGetSendStatusRequest(string messageId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/emails/", false);
            uri.AppendPath(messageId, true);
            uri.AppendPath("/status", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the status of a message sent previously. </summary>
        /// <param name="messageId"> System generated message id (GUID) returned from a previous call to send email. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="messageId"/> is null. </exception>
        public async Task<ResponseWithHeaders<SendStatusResult, EmailGetSendStatusHeaders>> GetSendStatusAsync(string messageId, CancellationToken cancellationToken = default)
        {
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }

            using var message = CreateGetSendStatusRequest(messageId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new EmailGetSendStatusHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SendStatusResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SendStatusResult.DeserializeSendStatusResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the status of a message sent previously. </summary>
        /// <param name="messageId"> System generated message id (GUID) returned from a previous call to send email. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="messageId"/> is null. </exception>
        public ResponseWithHeaders<SendStatusResult, EmailGetSendStatusHeaders> GetSendStatus(string messageId, CancellationToken cancellationToken = default)
        {
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }

            using var message = CreateGetSendStatusRequest(messageId);
            _pipeline.Send(message, cancellationToken);
            var headers = new EmailGetSendStatusHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SendStatusResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SendStatusResult.DeserializeSendStatusResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendRequest(string repeatabilityRequestId, string repeatabilityFirstSent, EmailMessage emailMessage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/emails:send", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("repeatability-request-id", repeatabilityRequestId);
            request.Headers.Add("repeatability-first-sent", repeatabilityFirstSent);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(emailMessage);
            request.Content = content;
            return message;
        }

        /// <summary> Queues an email message to be sent to one or more recipients. </summary>
        /// <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        /// <param name="repeatabilityFirstSent"> Must be sent by clients to specify that a request is repeatable. Repeatability-First-Sent is used to specify the date and time at which the request was first created in the IMF-fix date form of HTTP-date as defined in RFC7231. eg- Tue, 26 Mar 2019 16:06:51 GMT. </param>
        /// <param name="emailMessage"> Message payload for sending an email. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="repeatabilityRequestId"/>, <paramref name="repeatabilityFirstSent"/> or <paramref name="emailMessage"/> is null. </exception>
        public async Task<ResponseWithHeaders<EmailSendHeaders>> SendAsync(string repeatabilityRequestId, string repeatabilityFirstSent, EmailMessage emailMessage, CancellationToken cancellationToken = default)
        {
            if (repeatabilityRequestId == null)
            {
                throw new ArgumentNullException(nameof(repeatabilityRequestId));
            }
            if (repeatabilityFirstSent == null)
            {
                throw new ArgumentNullException(nameof(repeatabilityFirstSent));
            }
            if (emailMessage == null)
            {
                throw new ArgumentNullException(nameof(emailMessage));
            }

            using var message = CreateSendRequest(repeatabilityRequestId, repeatabilityFirstSent, emailMessage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new EmailSendHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Queues an email message to be sent to one or more recipients. </summary>
        /// <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        /// <param name="repeatabilityFirstSent"> Must be sent by clients to specify that a request is repeatable. Repeatability-First-Sent is used to specify the date and time at which the request was first created in the IMF-fix date form of HTTP-date as defined in RFC7231. eg- Tue, 26 Mar 2019 16:06:51 GMT. </param>
        /// <param name="emailMessage"> Message payload for sending an email. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="repeatabilityRequestId"/>, <paramref name="repeatabilityFirstSent"/> or <paramref name="emailMessage"/> is null. </exception>
        public ResponseWithHeaders<EmailSendHeaders> Send(string repeatabilityRequestId, string repeatabilityFirstSent, EmailMessage emailMessage, CancellationToken cancellationToken = default)
        {
            if (repeatabilityRequestId == null)
            {
                throw new ArgumentNullException(nameof(repeatabilityRequestId));
            }
            if (repeatabilityFirstSent == null)
            {
                throw new ArgumentNullException(nameof(repeatabilityFirstSent));
            }
            if (emailMessage == null)
            {
                throw new ArgumentNullException(nameof(emailMessage));
            }

            using var message = CreateSendRequest(repeatabilityRequestId, repeatabilityFirstSent, emailMessage);
            _pipeline.Send(message, cancellationToken);
            var headers = new EmailSendHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
