// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Communication.Email.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.Email
{
    /// <summary> The Email service client. </summary>
    public partial class EmailClient
    {
        private readonly HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of EmailClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The communication resource, for example https://my-resource.communication.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        internal EmailClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2023-01-15-preview")
        {
            RestClient = new EmailRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the status of the email send operation. </summary>
        /// <param name="operationId"> ID of the long running operation (GUID) returned from a previous call to send email. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<OperationStatus>> GetOperationStatusAsync(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EmailClient.GetOperationStatus");
            scope.Start();
            try
            {
                return await RestClient.GetOperationStatusAsync(operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of the email send operation. </summary>
        /// <param name="operationId"> ID of the long running operation (GUID) returned from a previous call to send email. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OperationStatus> GetOperationStatus(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("EmailClient.GetOperationStatus");
            scope.Start();
            try
            {
                return RestClient.GetOperationStatus(operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Queues an email message to be sent to one or more recipients. </summary>
        /// <param name="message"> Message payload for sending an email. </param>
        /// <param name="operationId"> This is the ID used by the status monitor for this long running operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> is null. </exception>
        public virtual async Task<EmailSendOperation> StartSendAsync(EmailMessage message, Guid? operationId = null, CancellationToken cancellationToken = default)
        {
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var scope = _clientDiagnostics.CreateScope("EmailClient.StartSend");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.SendAsync(message, operationId, cancellationToken).ConfigureAwait(false);
                return new EmailSendOperation(_clientDiagnostics, _pipeline, RestClient.CreateSendRequest(message, operationId).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Queues an email message to be sent to one or more recipients. </summary>
        /// <param name="message"> Message payload for sending an email. </param>
        /// <param name="operationId"> This is the ID used by the status monitor for this long running operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> is null. </exception>
        public virtual EmailSendOperation StartSend(EmailMessage message, Guid? operationId = null, CancellationToken cancellationToken = default)
        {
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var scope = _clientDiagnostics.CreateScope("EmailClient.StartSend");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Send(message, operationId, cancellationToken);
                return new EmailSendOperation(_clientDiagnostics, _pipeline, RestClient.CreateSendRequest(message, operationId).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
