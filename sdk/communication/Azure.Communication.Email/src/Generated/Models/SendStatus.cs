// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Email.Models
{
    /// <summary> The type indicating the status of a request. </summary>
    public readonly partial struct SendStatus : IEquatable<SendStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SendStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SendStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string QueuedValue = "queued";
        private const string OutForDeliveryValue = "outForDelivery";
        private const string DroppedValue = "dropped";

        /// <summary> The message has passed basic validations and has been queued to be processed further. </summary>
        public static SendStatus Queued { get; } = new SendStatus(QueuedValue);
        /// <summary> The message has been processed and is now out for delivery. </summary>
        public static SendStatus OutForDelivery { get; } = new SendStatus(OutForDeliveryValue);
        /// <summary> The message could not be processed and was dropped. </summary>
        public static SendStatus Dropped { get; } = new SendStatus(DroppedValue);
        /// <summary> Determines if two <see cref="SendStatus"/> values are the same. </summary>
        public static bool operator ==(SendStatus left, SendStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SendStatus"/> values are not the same. </summary>
        public static bool operator !=(SendStatus left, SendStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SendStatus"/>. </summary>
        public static implicit operator SendStatus(string value) => new SendStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SendStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SendStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
