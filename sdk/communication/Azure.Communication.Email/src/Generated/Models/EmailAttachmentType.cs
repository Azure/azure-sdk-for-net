// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Email.Models
{
    /// <summary> The type of attachment file. </summary>
    public readonly partial struct EmailAttachmentType : IEquatable<EmailAttachmentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EmailAttachmentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EmailAttachmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AviValue = "avi";
        private const string BmpValue = "bmp";
        private const string DocValue = "doc";
        private const string DocmValue = "docm";
        private const string DocxValue = "docx";
        private const string GifValue = "gif";
        private const string JpegValue = "jpeg";
        private const string Mp3Value = "mp3";
        private const string OneValue = "one";
        private const string PdfValue = "pdf";
        private const string PngValue = "png";
        private const string PpsmValue = "ppsm";
        private const string PpsxValue = "ppsx";
        private const string PptValue = "ppt";
        private const string PptmValue = "pptm";
        private const string PptxValue = "pptx";
        private const string PubValue = "pub";
        private const string RpmsgValue = "rpmsg";
        private const string RtfValue = "rtf";
        private const string TifValue = "tif";
        private const string TxtValue = "txt";
        private const string VsdValue = "vsd";
        private const string WavValue = "wav";
        private const string WmaValue = "wma";
        private const string XlsValue = "xls";
        private const string XlsbValue = "xlsb";
        private const string XlsmValue = "xlsm";
        private const string XlsxValue = "xlsx";

        /// <summary> avi. </summary>
        public static EmailAttachmentType Avi { get; } = new EmailAttachmentType(AviValue);
        /// <summary> bmp. </summary>
        public static EmailAttachmentType Bmp { get; } = new EmailAttachmentType(BmpValue);
        /// <summary> doc. </summary>
        public static EmailAttachmentType Doc { get; } = new EmailAttachmentType(DocValue);
        /// <summary> docm. </summary>
        public static EmailAttachmentType Docm { get; } = new EmailAttachmentType(DocmValue);
        /// <summary> docx. </summary>
        public static EmailAttachmentType Docx { get; } = new EmailAttachmentType(DocxValue);
        /// <summary> gif. </summary>
        public static EmailAttachmentType Gif { get; } = new EmailAttachmentType(GifValue);
        /// <summary> jpeg. </summary>
        public static EmailAttachmentType Jpeg { get; } = new EmailAttachmentType(JpegValue);
        /// <summary> mp3. </summary>
        public static EmailAttachmentType Mp3 { get; } = new EmailAttachmentType(Mp3Value);
        /// <summary> one. </summary>
        public static EmailAttachmentType One { get; } = new EmailAttachmentType(OneValue);
        /// <summary> pdf. </summary>
        public static EmailAttachmentType Pdf { get; } = new EmailAttachmentType(PdfValue);
        /// <summary> png. </summary>
        public static EmailAttachmentType Png { get; } = new EmailAttachmentType(PngValue);
        /// <summary> ppsm. </summary>
        public static EmailAttachmentType Ppsm { get; } = new EmailAttachmentType(PpsmValue);
        /// <summary> ppsx. </summary>
        public static EmailAttachmentType Ppsx { get; } = new EmailAttachmentType(PpsxValue);
        /// <summary> ppt. </summary>
        public static EmailAttachmentType Ppt { get; } = new EmailAttachmentType(PptValue);
        /// <summary> pptm. </summary>
        public static EmailAttachmentType Pptm { get; } = new EmailAttachmentType(PptmValue);
        /// <summary> pptx. </summary>
        public static EmailAttachmentType Pptx { get; } = new EmailAttachmentType(PptxValue);
        /// <summary> pub. </summary>
        public static EmailAttachmentType Pub { get; } = new EmailAttachmentType(PubValue);
        /// <summary> rpmsg. </summary>
        public static EmailAttachmentType Rpmsg { get; } = new EmailAttachmentType(RpmsgValue);
        /// <summary> rtf. </summary>
        public static EmailAttachmentType Rtf { get; } = new EmailAttachmentType(RtfValue);
        /// <summary> tif. </summary>
        public static EmailAttachmentType Tif { get; } = new EmailAttachmentType(TifValue);
        /// <summary> txt. </summary>
        public static EmailAttachmentType Txt { get; } = new EmailAttachmentType(TxtValue);
        /// <summary> vsd. </summary>
        public static EmailAttachmentType Vsd { get; } = new EmailAttachmentType(VsdValue);
        /// <summary> wav. </summary>
        public static EmailAttachmentType Wav { get; } = new EmailAttachmentType(WavValue);
        /// <summary> wma. </summary>
        public static EmailAttachmentType Wma { get; } = new EmailAttachmentType(WmaValue);
        /// <summary> xls. </summary>
        public static EmailAttachmentType Xls { get; } = new EmailAttachmentType(XlsValue);
        /// <summary> xlsb. </summary>
        public static EmailAttachmentType Xlsb { get; } = new EmailAttachmentType(XlsbValue);
        /// <summary> xlsm. </summary>
        public static EmailAttachmentType Xlsm { get; } = new EmailAttachmentType(XlsmValue);
        /// <summary> xlsx. </summary>
        public static EmailAttachmentType Xlsx { get; } = new EmailAttachmentType(XlsxValue);
        /// <summary> Determines if two <see cref="EmailAttachmentType"/> values are the same. </summary>
        public static bool operator ==(EmailAttachmentType left, EmailAttachmentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EmailAttachmentType"/> values are not the same. </summary>
        public static bool operator !=(EmailAttachmentType left, EmailAttachmentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EmailAttachmentType"/>. </summary>
        public static implicit operator EmailAttachmentType(string value) => new EmailAttachmentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EmailAttachmentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EmailAttachmentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
