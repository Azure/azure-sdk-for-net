// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Email.Models
{
    /// <summary> Status of operation. </summary>
    public readonly partial struct EmailSendOperationStatus : IEquatable<EmailSendOperationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EmailSendOperationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EmailSendOperationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "notStarted";
        private const string RunningValue = "running";
        private const string SucceededValue = "succeeded";
        private const string FailedValue = "failed";
        private const string CanceledValue = "canceled";

        /// <summary> notStarted. </summary>
        public static EmailSendOperationStatus NotStarted { get; } = new EmailSendOperationStatus(NotStartedValue);
        /// <summary> running. </summary>
        public static EmailSendOperationStatus Running { get; } = new EmailSendOperationStatus(RunningValue);
        /// <summary> succeeded. </summary>
        public static EmailSendOperationStatus Succeeded { get; } = new EmailSendOperationStatus(SucceededValue);
        /// <summary> failed. </summary>
        public static EmailSendOperationStatus Failed { get; } = new EmailSendOperationStatus(FailedValue);
        /// <summary> canceled. </summary>
        public static EmailSendOperationStatus Canceled { get; } = new EmailSendOperationStatus(CanceledValue);
        /// <summary> Determines if two <see cref="EmailSendOperationStatus"/> values are the same. </summary>
        public static bool operator ==(EmailSendOperationStatus left, EmailSendOperationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EmailSendOperationStatus"/> values are not the same. </summary>
        public static bool operator !=(EmailSendOperationStatus left, EmailSendOperationStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EmailSendOperationStatus"/>. </summary>
        public static implicit operator EmailSendOperationStatus(string value) => new EmailSendOperationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EmailSendOperationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EmailSendOperationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
