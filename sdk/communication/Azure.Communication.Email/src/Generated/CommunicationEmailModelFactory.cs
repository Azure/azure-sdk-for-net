// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.Communication.Email
{
    /// <summary> Model factory for models. </summary>
    public static partial class CommunicationEmailModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Email.EmailMessage"/>. </summary>
        /// <param name="headers"> Custom email headers to be passed. </param>
        /// <param name="senderAddress"> Sender email address from a verified domain. </param>
        /// <param name="content"> Email content to be sent. </param>
        /// <param name="recipients"> Recipients for the email. </param>
        /// <param name="attachments"> List of attachments. Please note that we limit the total size of an email request (which includes attachments) to 10MB. </param>
        /// <param name="replyTo"> Email addresses where recipients' replies will be sent to. </param>
        /// <param name="userEngagementTrackingDisabled"> Indicates whether user engagement tracking should be disabled for this request if the resource-level user engagement tracking setting was already enabled in the control plane. </param>
        /// <returns> A new <see cref="Email.EmailMessage"/> instance for mocking. </returns>
        public static EmailMessage EmailMessage(IDictionary<string, string> headers = null, string senderAddress = null, EmailContent content = null, EmailRecipients recipients = null, IEnumerable<EmailAttachment> attachments = null, IEnumerable<EmailAddress> replyTo = null, bool? userEngagementTrackingDisabled = null)
        {
            headers ??= new Dictionary<string, string>();
            attachments ??= new List<EmailAttachment>();
            replyTo ??= new List<EmailAddress>();

            return new EmailMessage(headers, senderAddress, content, recipients, attachments?.ToList(), replyTo?.ToList(), userEngagementTrackingDisabled, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Email.EmailContent"/>. </summary>
        /// <param name="subject"> Subject of the email message. </param>
        /// <param name="plainText"> Plain text version of the email message. </param>
        /// <param name="html"> Html version of the email message. </param>
        /// <returns> A new <see cref="Email.EmailContent"/> instance for mocking. </returns>
        public static EmailContent EmailContent(string subject = null, string plainText = null, string html = null)
        {
            return new EmailContent(subject, plainText, html, serializedAdditionalRawData: null);
        }
    }
}
