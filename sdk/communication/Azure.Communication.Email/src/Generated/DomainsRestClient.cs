// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.Email
{
    internal partial class DomainsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _subscriptionId;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of DomainsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="subscriptionId"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DomainsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2023-03-01-preview")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _subscriptionId = subscriptionId ?? throw new ArgumentNullException(nameof(subscriptionId));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateGetRequest(string resourceGroupName, string emailServiceName, string domainName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Communication/emailServices/", false);
            uri.AppendPath(emailServiceName, true);
            uri.AppendPath("/domains/", false);
            uri.AppendPath(domainName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/> or <paramref name="domainName"/> is null. </exception>
        /// <remarks> Get the Domains resource and its properties. </remarks>
        public async Task<Response<DomainResource>> GetAsync(string resourceGroupName, string emailServiceName, string domainName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var message = CreateGetRequest(resourceGroupName, emailServiceName, domainName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DomainResource value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DomainResource.DeserializeDomainResource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/> or <paramref name="domainName"/> is null. </exception>
        /// <remarks> Get the Domains resource and its properties. </remarks>
        public Response<DomainResource> Get(string resourceGroupName, string emailServiceName, string domainName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var message = CreateGetRequest(resourceGroupName, emailServiceName, domainName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DomainResource value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DomainResource.DeserializeDomainResource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string resourceGroupName, string emailServiceName, string domainName, DomainResource parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Communication/emailServices/", false);
            uri.AppendPath(emailServiceName, true);
            uri.AppendPath("/domains/", false);
            uri.AppendPath(domainName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Create Or Update. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="parameters"> Parameters for the create or update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/>, <paramref name="domainName"/> or <paramref name="parameters"/> is null. </exception>
        /// <remarks> Add a new Domains resource under the parent EmailService resource or update an existing Domains resource. </remarks>
        public async Task<ResponseWithHeaders<DomainsCreateOrUpdateHeaders>> CreateOrUpdateAsync(string resourceGroupName, string emailServiceName, string domainName, DomainResource parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCreateOrUpdateRequest(resourceGroupName, emailServiceName, domainName, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DomainsCreateOrUpdateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create Or Update. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="parameters"> Parameters for the create or update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/>, <paramref name="domainName"/> or <paramref name="parameters"/> is null. </exception>
        /// <remarks> Add a new Domains resource under the parent EmailService resource or update an existing Domains resource. </remarks>
        public ResponseWithHeaders<DomainsCreateOrUpdateHeaders> CreateOrUpdate(string resourceGroupName, string emailServiceName, string domainName, DomainResource parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCreateOrUpdateRequest(resourceGroupName, emailServiceName, domainName, parameters);
            _pipeline.Send(message, cancellationToken);
            var headers = new DomainsCreateOrUpdateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string resourceGroupName, string emailServiceName, string domainName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Communication/emailServices/", false);
            uri.AppendPath(emailServiceName, true);
            uri.AppendPath("/domains/", false);
            uri.AppendPath(domainName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/> or <paramref name="domainName"/> is null. </exception>
        /// <remarks> Operation to delete a Domains resource. </remarks>
        public async Task<ResponseWithHeaders<DomainsDeleteHeaders>> DeleteAsync(string resourceGroupName, string emailServiceName, string domainName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var message = CreateDeleteRequest(resourceGroupName, emailServiceName, domainName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DomainsDeleteHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/> or <paramref name="domainName"/> is null. </exception>
        /// <remarks> Operation to delete a Domains resource. </remarks>
        public ResponseWithHeaders<DomainsDeleteHeaders> Delete(string resourceGroupName, string emailServiceName, string domainName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var message = CreateDeleteRequest(resourceGroupName, emailServiceName, domainName);
            _pipeline.Send(message, cancellationToken);
            var headers = new DomainsDeleteHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(string resourceGroupName, string emailServiceName, string domainName, IDictionary<string, string> tags, UserEngagementTracking? userEngagementTracking)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Communication/emailServices/", false);
            uri.AppendPath(emailServiceName, true);
            uri.AppendPath("/domains/", false);
            uri.AppendPath(domainName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            UpdateDomainRequestParameters updateDomainRequestParameters = new UpdateDomainRequestParameters()
            {
                UserEngagementTracking = userEngagementTracking
            };
            if (tags != null)
            {
                foreach (var value in tags)
                {
                    updateDomainRequestParameters.Tags.Add(value);
                }
            }
            var model = updateDomainRequestParameters;
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Update. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="tags"> Tags of the service which is a list of key value pairs that describe the resource. </param>
        /// <param name="userEngagementTracking"> Describes whether user engagement tracking is enabled or disabled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/> or <paramref name="domainName"/> is null. </exception>
        /// <remarks> Operation to update an existing Domains resource. </remarks>
        public async Task<ResponseWithHeaders<DomainsUpdateHeaders>> UpdateAsync(string resourceGroupName, string emailServiceName, string domainName, IDictionary<string, string> tags = null, UserEngagementTracking? userEngagementTracking = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var message = CreateUpdateRequest(resourceGroupName, emailServiceName, domainName, tags, userEngagementTracking);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DomainsUpdateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="tags"> Tags of the service which is a list of key value pairs that describe the resource. </param>
        /// <param name="userEngagementTracking"> Describes whether user engagement tracking is enabled or disabled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/> or <paramref name="domainName"/> is null. </exception>
        /// <remarks> Operation to update an existing Domains resource. </remarks>
        public ResponseWithHeaders<DomainsUpdateHeaders> Update(string resourceGroupName, string emailServiceName, string domainName, IDictionary<string, string> tags = null, UserEngagementTracking? userEngagementTracking = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var message = CreateUpdateRequest(resourceGroupName, emailServiceName, domainName, tags, userEngagementTracking);
            _pipeline.Send(message, cancellationToken);
            var headers = new DomainsUpdateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByEmailServiceResourceRequest(string resourceGroupName, string emailServiceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Communication/emailServices/", false);
            uri.AppendPath(emailServiceName, true);
            uri.AppendPath("/domains", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List by EmailService. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="emailServiceName"/> is null. </exception>
        /// <remarks> Handles requests to list all Domains resources under the parent EmailServices resource. </remarks>
        public async Task<Response<DomainResourceList>> ListByEmailServiceResourceAsync(string resourceGroupName, string emailServiceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }

            using var message = CreateListByEmailServiceResourceRequest(resourceGroupName, emailServiceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DomainResourceList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DomainResourceList.DeserializeDomainResourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List by EmailService. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="emailServiceName"/> is null. </exception>
        /// <remarks> Handles requests to list all Domains resources under the parent EmailServices resource. </remarks>
        public Response<DomainResourceList> ListByEmailServiceResource(string resourceGroupName, string emailServiceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }

            using var message = CreateListByEmailServiceResourceRequest(resourceGroupName, emailServiceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DomainResourceList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DomainResourceList.DeserializeDomainResourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateInitiateVerificationRequest(string resourceGroupName, string emailServiceName, string domainName, VerificationType verificationType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Communication/emailServices/", false);
            uri.AppendPath(emailServiceName, true);
            uri.AppendPath("/domains/", false);
            uri.AppendPath(domainName, true);
            uri.AppendPath("/initiateVerification", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new VerificationParameter(verificationType);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Initiate Verification. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="verificationType"> Type of verification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/> or <paramref name="domainName"/> is null. </exception>
        /// <remarks> Initiate verification of DNS record. </remarks>
        public async Task<ResponseWithHeaders<DomainsInitiateVerificationHeaders>> InitiateVerificationAsync(string resourceGroupName, string emailServiceName, string domainName, VerificationType verificationType, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var message = CreateInitiateVerificationRequest(resourceGroupName, emailServiceName, domainName, verificationType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DomainsInitiateVerificationHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Initiate Verification. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="verificationType"> Type of verification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/> or <paramref name="domainName"/> is null. </exception>
        /// <remarks> Initiate verification of DNS record. </remarks>
        public ResponseWithHeaders<DomainsInitiateVerificationHeaders> InitiateVerification(string resourceGroupName, string emailServiceName, string domainName, VerificationType verificationType, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var message = CreateInitiateVerificationRequest(resourceGroupName, emailServiceName, domainName, verificationType);
            _pipeline.Send(message, cancellationToken);
            var headers = new DomainsInitiateVerificationHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCancelVerificationRequest(string resourceGroupName, string emailServiceName, string domainName, VerificationType verificationType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Communication/emailServices/", false);
            uri.AppendPath(emailServiceName, true);
            uri.AppendPath("/domains/", false);
            uri.AppendPath(domainName, true);
            uri.AppendPath("/cancelVerification", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new VerificationParameter(verificationType);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Cancel Verification. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="verificationType"> Type of verification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/> or <paramref name="domainName"/> is null. </exception>
        /// <remarks> Cancel verification of DNS record. </remarks>
        public async Task<ResponseWithHeaders<DomainsCancelVerificationHeaders>> CancelVerificationAsync(string resourceGroupName, string emailServiceName, string domainName, VerificationType verificationType, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var message = CreateCancelVerificationRequest(resourceGroupName, emailServiceName, domainName, verificationType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DomainsCancelVerificationHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Cancel Verification. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="domainName"> The name of the Domains resource. </param>
        /// <param name="verificationType"> Type of verification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="emailServiceName"/> or <paramref name="domainName"/> is null. </exception>
        /// <remarks> Cancel verification of DNS record. </remarks>
        public ResponseWithHeaders<DomainsCancelVerificationHeaders> CancelVerification(string resourceGroupName, string emailServiceName, string domainName, VerificationType verificationType, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var message = CreateCancelVerificationRequest(resourceGroupName, emailServiceName, domainName, verificationType);
            _pipeline.Send(message, cancellationToken);
            var headers = new DomainsCancelVerificationHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByEmailServiceResourceNextPageRequest(string nextLink, string resourceGroupName, string emailServiceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List by EmailService. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/> or <paramref name="emailServiceName"/> is null. </exception>
        /// <remarks> Handles requests to list all Domains resources under the parent EmailServices resource. </remarks>
        public async Task<Response<DomainResourceList>> ListByEmailServiceResourceNextPageAsync(string nextLink, string resourceGroupName, string emailServiceName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }

            using var message = CreateListByEmailServiceResourceNextPageRequest(nextLink, resourceGroupName, emailServiceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DomainResourceList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DomainResourceList.DeserializeDomainResourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List by EmailService. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="emailServiceName"> The name of the EmailService resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/> or <paramref name="emailServiceName"/> is null. </exception>
        /// <remarks> Handles requests to list all Domains resources under the parent EmailServices resource. </remarks>
        public Response<DomainResourceList> ListByEmailServiceResourceNextPage(string nextLink, string resourceGroupName, string emailServiceName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (emailServiceName == null)
            {
                throw new ArgumentNullException(nameof(emailServiceName));
            }

            using var message = CreateListByEmailServiceResourceNextPageRequest(nextLink, resourceGroupName, emailServiceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DomainResourceList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DomainResourceList.DeserializeDomainResourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
