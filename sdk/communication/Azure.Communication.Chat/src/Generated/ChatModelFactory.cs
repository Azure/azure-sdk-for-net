// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Communication.Chat
{
    /// <summary> Model factory for models. </summary>
    public static partial class ChatModelFactory
    {
        /// <summary> Initializes a new instance of ChatError. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The error target. </param>
        /// <param name="details"> Further details about specific errors that led to this error. </param>
        /// <param name="innerError"> The inner error if any. </param>
        /// <returns> A new <see cref="Chat.ChatError"/> instance for mocking. </returns>
        public static ChatError ChatError(string code = null, string message = null, string target = null, IEnumerable<ChatError> details = null, ChatError innerError = null)
        {
            details ??= new List<ChatError>();

            return new ChatError(code, message, target, details?.ToList(), innerError);
        }

        /// <summary> Initializes a new instance of AddChatParticipantsResult. </summary>
        /// <param name="invalidParticipants"> The participants that failed to be added to the chat thread. </param>
        /// <returns> A new <see cref="Chat.AddChatParticipantsResult"/> instance for mocking. </returns>
        public static AddChatParticipantsResult AddChatParticipantsResult(IEnumerable<ChatError> invalidParticipants = null)
        {
            invalidParticipants ??= new List<ChatError>();

            return new AddChatParticipantsResult(invalidParticipants?.ToList());
        }

        /// <summary> Initializes a new instance of ChatThreadItem. </summary>
        /// <param name="id"> Chat thread id. </param>
        /// <param name="topic"> Chat thread topic. </param>
        /// <param name="deletedOn"> The timestamp when the chat thread was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
        /// <param name="lastMessageReceivedOn"> The timestamp when the last message arrived at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
        /// <param name="retentionPolicy">
        /// Data retention policy for auto deletion.
        /// Please note <see cref="RetentionPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BasedOnThreadCreationDateRetentionPolicy"/>.
        /// </param>
        /// <returns> A new <see cref="Chat.ChatThreadItem"/> instance for mocking. </returns>
        public static ChatThreadItem ChatThreadItem(string id = null, string topic = null, DateTimeOffset? deletedOn = null, DateTimeOffset? lastMessageReceivedOn = null, RetentionPolicy retentionPolicy = null)
        {
            return new ChatThreadItem(id, topic, deletedOn, lastMessageReceivedOn, retentionPolicy);
        }
    }
}
