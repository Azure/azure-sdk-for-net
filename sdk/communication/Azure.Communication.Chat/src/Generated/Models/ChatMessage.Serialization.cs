// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.Chat
{
    public partial class ChatMessage
    {
        internal static ChatMessage DeserializeChatMessage(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> type = default;
            Optional<ChatMessagePriority> priority = default;
            Optional<string> version = default;
            Optional<string> content = default;
            Optional<string> senderDisplayName = default;
            Optional<DateTimeOffset> createdOn = default;
            Optional<string> senderId = default;
            Optional<DateTimeOffset> deletedOn = default;
            Optional<DateTimeOffset> editedOn = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("priority"))
                {
                    priority = new ChatMessagePriority(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("content"))
                {
                    content = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("senderDisplayName"))
                {
                    senderDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdOn"))
                {
                    createdOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("senderId"))
                {
                    senderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deletedOn"))
                {
                    deletedOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("editedOn"))
                {
                    editedOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new ChatMessage(id.Value, type.Value, Optional.ToNullable(priority), version.Value, content.Value, senderDisplayName.Value, Optional.ToNullable(createdOn), senderId.Value, Optional.ToNullable(deletedOn), Optional.ToNullable(editedOn));
        }
    }
}
