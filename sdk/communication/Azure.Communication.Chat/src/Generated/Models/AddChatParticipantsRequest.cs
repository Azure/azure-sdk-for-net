// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Communication.Chat
{
    /// <summary> Participants to be added to the thread. </summary>
    internal partial class AddChatParticipantsRequest
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AddChatParticipantsRequest"/>. </summary>
        /// <param name="participants"> Participants to add to a chat thread. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="participants"/> is null. </exception>
        public AddChatParticipantsRequest(IEnumerable<ChatParticipantInternal> participants)
        {
            Argument.AssertNotNull(participants, nameof(participants));

            Participants = participants.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="AddChatParticipantsRequest"/>. </summary>
        /// <param name="participants"> Participants to add to a chat thread. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AddChatParticipantsRequest(IList<ChatParticipantInternal> participants, Dictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Participants = participants;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AddChatParticipantsRequest"/> for deserialization. </summary>
        internal AddChatParticipantsRequest()
        {
        }

        /// <summary> Participants to add to a chat thread. </summary>
        public IList<ChatParticipantInternal> Participants { get; }
    }
}
