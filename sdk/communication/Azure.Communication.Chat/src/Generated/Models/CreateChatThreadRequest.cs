// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.Chat
{
    /// <summary> Request payload for creating a chat thread. </summary>
    internal partial class CreateChatThreadRequest
    {
        /// <summary> Initializes a new instance of <see cref="CreateChatThreadRequest"/>. </summary>
        /// <param name="topic"> The chat thread topic. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="topic"/> is null. </exception>
        public CreateChatThreadRequest(string topic)
        {
            Argument.AssertNotNull(topic, nameof(topic));

            Topic = topic;
            Participants = new ChangeTrackingList<ChatParticipantInternal>();
            Metadata = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="CreateChatThreadRequest"/>. </summary>
        /// <param name="topic"> The chat thread topic. </param>
        /// <param name="participants"> Participants to be added to the chat thread. </param>
        /// <param name="metadata"> Contextual metadata for the thread. The metadata consists of name/value pairs. The total size of all metadata pairs can be up to 1KB in size. </param>
        /// <param name="retentionPolicy">
        /// Data retention policy for auto deletion.
        /// Please note <see cref="ChatRetentionPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="NoneRetentionPolicy"/> and <see cref="ThreadCreationDateRetentionPolicy"/>.
        /// </param>
        internal CreateChatThreadRequest(string topic, IList<ChatParticipantInternal> participants, IDictionary<string, string> metadata, ChatRetentionPolicy retentionPolicy)
        {
            Topic = topic;
            Participants = participants;
            Metadata = metadata;
            RetentionPolicy = retentionPolicy;
        }

        /// <summary> The chat thread topic. </summary>
        public string Topic { get; }
        /// <summary> Participants to be added to the chat thread. </summary>
        public IList<ChatParticipantInternal> Participants { get; }
        /// <summary> Contextual metadata for the thread. The metadata consists of name/value pairs. The total size of all metadata pairs can be up to 1KB in size. </summary>
        public IDictionary<string, string> Metadata { get; }
        /// <summary>
        /// Data retention policy for auto deletion.
        /// Please note <see cref="ChatRetentionPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="NoneRetentionPolicy"/> and <see cref="ThreadCreationDateRetentionPolicy"/>.
        /// </summary>
        public ChatRetentionPolicy RetentionPolicy { get; set; }
    }
}
