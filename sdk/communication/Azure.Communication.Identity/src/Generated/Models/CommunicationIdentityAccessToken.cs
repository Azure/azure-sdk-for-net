// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Communication.Identity
{
    /// <summary> An access token. </summary>
    internal partial class CommunicationIdentityAccessToken
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CommunicationIdentityAccessToken"/>. </summary>
        /// <param name="token"> The access token issued for the identity. </param>
        /// <param name="expiresOn"> The expiry time of the token. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="token"/> is null. </exception>
        internal CommunicationIdentityAccessToken(string token, DateTimeOffset expiresOn)
        {
            Argument.AssertNotNull(token, nameof(token));

            Token = token;
            ExpiresOn = expiresOn;
        }

        /// <summary> Initializes a new instance of <see cref="CommunicationIdentityAccessToken"/>. </summary>
        /// <param name="token"> The access token issued for the identity. </param>
        /// <param name="expiresOn"> The expiry time of the token. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CommunicationIdentityAccessToken(string token, DateTimeOffset expiresOn, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Token = token;
            ExpiresOn = expiresOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CommunicationIdentityAccessToken"/> for deserialization. </summary>
        internal CommunicationIdentityAccessToken()
        {
        }

        /// <summary> The access token issued for the identity. </summary>
        public string Token { get; }
        /// <summary> The expiry time of the token. </summary>
        public DateTimeOffset ExpiresOn { get; }
    }
}
