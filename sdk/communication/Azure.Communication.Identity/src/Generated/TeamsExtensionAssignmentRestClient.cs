// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Communication.Identity.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.Identity
{
    internal partial class TeamsExtensionAssignmentRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of TeamsExtensionAssignmentRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The communication resource, for example https://my-resource.communication.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public TeamsExtensionAssignmentRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2025-03-02-preview")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateGetRequest(string tenantId, string objectId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/access/teamsExtension/tenants/", false);
            uri.AppendPath(tenantId, true);
            uri.AppendPath("/assignments/", false);
            uri.AppendPath(objectId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get Teams Phone access assignment by object id. </summary>
        /// <param name="tenantId"> Tenant Id we want to get the assignment for. </param>
        /// <param name="objectId"> Object Id we want to get the assignment for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> or <paramref name="objectId"/> is null. </exception>
        public async Task<Response<TeamsExtensionAssignmentResponse>> GetAsync(string tenantId, string objectId, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ArgumentNullException(nameof(tenantId));
            }
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            using var message = CreateGetRequest(tenantId, objectId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TeamsExtensionAssignmentResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = TeamsExtensionAssignmentResponse.DeserializeTeamsExtensionAssignmentResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get Teams Phone access assignment by object id. </summary>
        /// <param name="tenantId"> Tenant Id we want to get the assignment for. </param>
        /// <param name="objectId"> Object Id we want to get the assignment for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> or <paramref name="objectId"/> is null. </exception>
        public Response<TeamsExtensionAssignmentResponse> Get(string tenantId, string objectId, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ArgumentNullException(nameof(tenantId));
            }
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            using var message = CreateGetRequest(tenantId, objectId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TeamsExtensionAssignmentResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = TeamsExtensionAssignmentResponse.DeserializeTeamsExtensionAssignmentResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpsertRequest(string tenantId, string objectId, TeamsExtensionPrincipalType principalType, IEnumerable<string> clientIds)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/access/teamsExtension/tenants/", false);
            uri.AppendPath(tenantId, true);
            uri.AppendPath("/assignments/", false);
            uri.AppendPath(objectId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            TeamsExtensionAssignmentCreateOrUpdateRequest teamsExtensionAssignmentCreateOrUpdateRequest = new TeamsExtensionAssignmentCreateOrUpdateRequest(principalType);
            if (clientIds != null)
            {
                foreach (var value in clientIds)
                {
                    teamsExtensionAssignmentCreateOrUpdateRequest.ClientIds.Add(value);
                }
            }
            var model = teamsExtensionAssignmentCreateOrUpdateRequest;
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Creates or replaces a Teams Phone access assignment. </summary>
        /// <param name="tenantId"> Tenant Id we want to update the assignment for. </param>
        /// <param name="objectId"> Object Id we want to update the assignment for. </param>
        /// <param name="principalType"> The type of principal the assignment is for. </param>
        /// <param name="clientIds"> The <see cref="IEnumerable{T}"/> where <c>T</c> is of type <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> or <paramref name="objectId"/> is null. </exception>
        public async Task<Response<TeamsExtensionAssignmentResponse>> UpsertAsync(string tenantId, string objectId, TeamsExtensionPrincipalType principalType, IEnumerable<string> clientIds = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ArgumentNullException(nameof(tenantId));
            }
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            using var message = CreateUpsertRequest(tenantId, objectId, principalType, clientIds);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        TeamsExtensionAssignmentResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = TeamsExtensionAssignmentResponse.DeserializeTeamsExtensionAssignmentResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Creates or replaces a Teams Phone access assignment. </summary>
        /// <param name="tenantId"> Tenant Id we want to update the assignment for. </param>
        /// <param name="objectId"> Object Id we want to update the assignment for. </param>
        /// <param name="principalType"> The type of principal the assignment is for. </param>
        /// <param name="clientIds"> The <see cref="IEnumerable{T}"/> where <c>T</c> is of type <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> or <paramref name="objectId"/> is null. </exception>
        public Response<TeamsExtensionAssignmentResponse> Upsert(string tenantId, string objectId, TeamsExtensionPrincipalType principalType, IEnumerable<string> clientIds = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ArgumentNullException(nameof(tenantId));
            }
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            using var message = CreateUpsertRequest(tenantId, objectId, principalType, clientIds);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        TeamsExtensionAssignmentResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = TeamsExtensionAssignmentResponse.DeserializeTeamsExtensionAssignmentResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string tenantId, string objectId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/access/teamsExtension/tenants/", false);
            uri.AppendPath(tenantId, true);
            uri.AppendPath("/assignments/", false);
            uri.AppendPath(objectId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Removes a Teams Phone access assignment. </summary>
        /// <param name="tenantId"> Tenant Id we want to remove the assignment for. </param>
        /// <param name="objectId"> Object Id we want to remove the assignment for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> or <paramref name="objectId"/> is null. </exception>
        public async Task<Response> DeleteAsync(string tenantId, string objectId, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ArgumentNullException(nameof(tenantId));
            }
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            using var message = CreateDeleteRequest(tenantId, objectId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Removes a Teams Phone access assignment. </summary>
        /// <param name="tenantId"> Tenant Id we want to remove the assignment for. </param>
        /// <param name="objectId"> Object Id we want to remove the assignment for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> or <paramref name="objectId"/> is null. </exception>
        public Response Delete(string tenantId, string objectId, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ArgumentNullException(nameof(tenantId));
            }
            if (objectId == null)
            {
                throw new ArgumentNullException(nameof(objectId));
            }

            using var message = CreateDeleteRequest(tenantId, objectId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
