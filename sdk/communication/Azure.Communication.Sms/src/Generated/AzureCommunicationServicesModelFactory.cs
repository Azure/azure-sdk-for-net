// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.Communication.Sms
{
    /// <summary> Model factory for models. </summary>
    public static partial class AzureCommunicationServicesModelFactory
    {
        /// <summary> Initializes a new instance of MmsSendResponse. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Sms.MmsSendResponse"/> instance for mocking. </returns>
        public static MmsSendResponse MmsSendResponse(IEnumerable<MmsSendResponseItem> value = null)
        {
            value ??= new List<MmsSendResponseItem>();

            return new MmsSendResponse(value?.ToList());
        }

        /// <summary> Initializes a new instance of MmsSendResponseItem. </summary>
        /// <param name="to"> The recipient&apos;s phone number in E.164 format. </param>
        /// <param name="messageId"> The identifier of the outgoing message. Only present if message processed. </param>
        /// <param name="httpStatusCode"> HTTP Status code. </param>
        /// <param name="errorMessage"> Optional error message in case of 4xx/5xx/repeatable errors. </param>
        /// <param name="repeatabilityResult"> The result of a repeatable request with one of the case-insensitive values accepted or rejected. </param>
        /// <param name="successful"> Indicates if the message is processed successfully or not. </param>
        /// <returns> A new <see cref="Sms.MmsSendResponseItem"/> instance for mocking. </returns>
        public static MmsSendResponseItem MmsSendResponseItem(string to = null, string messageId = null, int httpStatusCode = default, string errorMessage = null, MmsSendResponseItemRepeatabilityResult? repeatabilityResult = null, bool successful = default)
        {
            return new MmsSendResponseItem(to, messageId, httpStatusCode, errorMessage, repeatabilityResult, successful);
        }
    }
}
