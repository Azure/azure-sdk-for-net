// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.Sms
{
    /// <summary> MIME type of attachment. </summary>
    public readonly partial struct MmsContentType : IEquatable<MmsContentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MmsContentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MmsContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ImagePngValue = "image/png";
        private const string ImageJpegValue = "image/jpeg";
        private const string ImageGifValue = "image/gif";
        private const string ImageBmpValue = "image/bmp";
        private const string AudioWavValue = "audio/wav";
        private const string AudioXWavValue = "audio/x-wav";
        private const string AudioAc3Value = "audio/ac3";
        private const string AudioAmrValue = "audio/amr";
        private const string VideoMp4Value = "video/mp4";
        private const string VideoXMsvideoValue = "video/x-msvideo";
        private const string TextPlainValue = "text/plain";

        /// <summary> image/png. </summary>
        public static MmsContentType ImagePng { get; } = new MmsContentType(ImagePngValue);
        /// <summary> image/jpeg. </summary>
        public static MmsContentType ImageJpeg { get; } = new MmsContentType(ImageJpegValue);
        /// <summary> image/gif. </summary>
        public static MmsContentType ImageGif { get; } = new MmsContentType(ImageGifValue);
        /// <summary> image/bmp. </summary>
        public static MmsContentType ImageBmp { get; } = new MmsContentType(ImageBmpValue);
        /// <summary> audio/wav. </summary>
        public static MmsContentType AudioWav { get; } = new MmsContentType(AudioWavValue);
        /// <summary> audio/x-wav. </summary>
        public static MmsContentType AudioXWav { get; } = new MmsContentType(AudioXWavValue);
        /// <summary> audio/ac3. </summary>
        public static MmsContentType AudioAc3 { get; } = new MmsContentType(AudioAc3Value);
        /// <summary> audio/amr. </summary>
        public static MmsContentType AudioAmr { get; } = new MmsContentType(AudioAmrValue);
        /// <summary> video/mp4. </summary>
        public static MmsContentType VideoMp4 { get; } = new MmsContentType(VideoMp4Value);
        /// <summary> video/x-msvideo. </summary>
        public static MmsContentType VideoXMsvideo { get; } = new MmsContentType(VideoXMsvideoValue);
        /// <summary> text/plain. </summary>
        public static MmsContentType TextPlain { get; } = new MmsContentType(TextPlainValue);
        /// <summary> Determines if two <see cref="MmsContentType"/> values are the same. </summary>
        public static bool operator ==(MmsContentType left, MmsContentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MmsContentType"/> values are not the same. </summary>
        public static bool operator !=(MmsContentType left, MmsContentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MmsContentType"/>. </summary>
        public static implicit operator MmsContentType(string value) => new MmsContentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MmsContentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MmsContentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
