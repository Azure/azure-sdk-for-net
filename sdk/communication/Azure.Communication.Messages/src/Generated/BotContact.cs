// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.Messages
{
    /// <summary> Bot Contact. </summary>
    public partial class BotContact : ConversationContact
    {
        /// <summary> Initializes a new instance of <see cref="BotContact"/>. </summary>
        /// <param name="id"> External platform identifier. </param>
        /// <param name="botAppId"> Bot App Id of the Bot Contact. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="botAppId"/> is null. </exception>
        public BotContact(string id, string botAppId) : base(id)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(botAppId, nameof(botAppId));

            Kind = MessagePlatformKind.Bot;
            BotAppId = botAppId;
        }

        /// <summary> Initializes a new instance of <see cref="BotContact"/>. </summary>
        /// <param name="id"> External platform identifier. </param>
        /// <param name="kind"> Type of message platform (e.g., WhatsApp). </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="botAppId"> Bot App Id of the Bot Contact. </param>
        internal BotContact(string id, MessagePlatformKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, string botAppId) : base(id, kind, serializedAdditionalRawData)
        {
            BotAppId = botAppId;
        }

        /// <summary> Initializes a new instance of <see cref="BotContact"/> for deserialization. </summary>
        internal BotContact()
        {
        }

        /// <summary> Bot App Id of the Bot Contact. </summary>
        public string BotAppId { get; set; }
    }
}
