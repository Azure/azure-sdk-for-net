// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.Messages
{
    /// <summary> A request to send a document conversation message. </summary>
    public partial class DocumentConversationMessageContent : ConversationMessageContent
    {
        /// <summary> Initializes a new instance of <see cref="DocumentConversationMessageContent"/>. </summary>
        /// <param name="mediaUri"> A media url for the file. Required if the type is one of the supported media types, e.g. image. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="mediaUri"/> is null. </exception>
        public DocumentConversationMessageContent(Uri mediaUri)
        {
            Argument.AssertNotNull(mediaUri, nameof(mediaUri));

            Kind = CommunicationMessageKind.Document;
            MediaUri = mediaUri;
        }

        /// <summary> Initializes a new instance of <see cref="DocumentConversationMessageContent"/>. </summary>
        /// <param name="kind"> The type discriminator describing a message type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="caption"> Optional text content. </param>
        /// <param name="fileName"> Optional name for the file. </param>
        /// <param name="mediaUri"> A media url for the file. Required if the type is one of the supported media types, e.g. image. </param>
        internal DocumentConversationMessageContent(CommunicationMessageKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, string caption, string fileName, Uri mediaUri) : base(kind, serializedAdditionalRawData)
        {
            Caption = caption;
            FileName = fileName;
            MediaUri = mediaUri;
        }

        /// <summary> Initializes a new instance of <see cref="DocumentConversationMessageContent"/> for deserialization. </summary>
        internal DocumentConversationMessageContent()
        {
        }

        /// <summary> Optional text content. </summary>
        public string Caption { get; set; }
        /// <summary> Optional name for the file. </summary>
        public string FileName { get; set; }
        /// <summary> A media url for the file. Required if the type is one of the supported media types, e.g. image. </summary>
        public Uri MediaUri { get; set; }
    }
}
