// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.Messages
{
    /// <summary> The conversation message as returned from the service. </summary>
    public partial class ConversationMessageItem
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConversationMessageItem"/>. </summary>
        /// <param name="message">
        /// Payload of a threaded conversation message.
        /// Please note <see cref="ConversationMessageContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioConversationMessageContent"/>, <see cref="DocumentConversationMessageContent"/>, <see cref="ImageConversationMessageContent"/>, <see cref="TemplateConversationMessageContent"/>, <see cref="TextConversationMessageContent"/> and <see cref="VideoConversationMessageContent"/>.
        /// </param>
        /// <param name="senderCommunicationIdentifier"> The communication identifier of the message sender. </param>
        /// <param name="createdOn"> Timestamp when the message is sent. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> or <paramref name="senderCommunicationIdentifier"/> is null. </exception>
        internal ConversationMessageItem(ConversationMessageContent message, string senderCommunicationIdentifier, DateTimeOffset createdOn)
        {
            Argument.AssertNotNull(message, nameof(message));
            Argument.AssertNotNull(senderCommunicationIdentifier, nameof(senderCommunicationIdentifier));

            Message = message;
            SenderCommunicationIdentifier = senderCommunicationIdentifier;
            CreatedOn = createdOn;
        }

        /// <summary> Initializes a new instance of <see cref="ConversationMessageItem"/>. </summary>
        /// <param name="id"> Message ID. </param>
        /// <param name="sequenceId"> Message sequence ID. </param>
        /// <param name="message">
        /// Payload of a threaded conversation message.
        /// Please note <see cref="ConversationMessageContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioConversationMessageContent"/>, <see cref="DocumentConversationMessageContent"/>, <see cref="ImageConversationMessageContent"/>, <see cref="TemplateConversationMessageContent"/>, <see cref="TextConversationMessageContent"/> and <see cref="VideoConversationMessageContent"/>.
        /// </param>
        /// <param name="senderDisplayName"> The display name of the message sender. </param>
        /// <param name="senderCommunicationIdentifier"> The communication identifier of the message sender. </param>
        /// <param name="createdOn"> Timestamp when the message is sent. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConversationMessageItem(string id, long? sequenceId, ConversationMessageContent message, string senderDisplayName, string senderCommunicationIdentifier, DateTimeOffset createdOn, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            SequenceId = sequenceId;
            Message = message;
            SenderDisplayName = senderDisplayName;
            SenderCommunicationIdentifier = senderCommunicationIdentifier;
            CreatedOn = createdOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ConversationMessageItem"/> for deserialization. </summary>
        internal ConversationMessageItem()
        {
        }

        /// <summary> Message ID. </summary>
        public string Id { get; }
        /// <summary> Message sequence ID. </summary>
        public long? SequenceId { get; }
        /// <summary>
        /// Payload of a threaded conversation message.
        /// Please note <see cref="ConversationMessageContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioConversationMessageContent"/>, <see cref="DocumentConversationMessageContent"/>, <see cref="ImageConversationMessageContent"/>, <see cref="TemplateConversationMessageContent"/>, <see cref="TextConversationMessageContent"/> and <see cref="VideoConversationMessageContent"/>.
        /// </summary>
        public ConversationMessageContent Message { get; }
        /// <summary> The display name of the message sender. </summary>
        public string SenderDisplayName { get; }
        /// <summary> The communication identifier of the message sender. </summary>
        public string SenderCommunicationIdentifier { get; }
        /// <summary> Timestamp when the message is sent. </summary>
        public DateTimeOffset CreatedOn { get; }
    }
}
