// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.Messages
{
    /// <summary> A conversation. </summary>
    public partial class CommunicationConversation
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CommunicationConversation"/>. </summary>
        public CommunicationConversation()
        {
            DeliveryChannelIds = new ChangeTrackingList<string>();
            Participants = new ChangeTrackingList<ConversationParticipant>();
        }

        /// <summary> Initializes a new instance of <see cref="CommunicationConversation"/>. </summary>
        /// <param name="id"> The conversation ID. </param>
        /// <param name="topic"> The conversation topic. </param>
        /// <param name="deliveryChannelIds"> List of delivery channel IDs. </param>
        /// <param name="outboundDeliveryStrategy"> Outbound delivery strategy for the conversation. </param>
        /// <param name="participants">
        /// List of participants involved in the conversation.
        /// Please note <see cref="ConversationParticipant"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExternalConversationParticipant"/> and <see cref="InternalConversationParticipant"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CommunicationConversation(string id, string topic, IList<string> deliveryChannelIds, OutboundDeliveryStrategyKind? outboundDeliveryStrategy, IList<ConversationParticipant> participants, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Topic = topic;
            DeliveryChannelIds = deliveryChannelIds;
            OutboundDeliveryStrategy = outboundDeliveryStrategy;
            Participants = participants;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The conversation ID. </summary>
        public string Id { get; }
        /// <summary> The conversation topic. </summary>
        public string Topic { get; set; }
        /// <summary> List of delivery channel IDs. </summary>
        public IList<string> DeliveryChannelIds { get; }
        /// <summary> Outbound delivery strategy for the conversation. </summary>
        public OutboundDeliveryStrategyKind? OutboundDeliveryStrategy { get; set; }
        /// <summary>
        /// List of participants involved in the conversation.
        /// Please note <see cref="ConversationParticipant"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExternalConversationParticipant"/> and <see cref="InternalConversationParticipant"/>.
        /// </summary>
        public IList<ConversationParticipant> Participants { get; }
    }
}
