// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.Messages
{
    /// <summary> The Interactive message content to which user can read and respond. </summary>
    public partial class InteractiveMessage
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InteractiveMessage"/>. </summary>
        /// <param name="body"> Gets or Sets Message body content. Emojis, markdown, and links are supported. </param>
        /// <param name="actionBindings">
        /// The binding object to get or set Action which describes options user have to respond to message.
        /// Please note <see cref="Messages.ActionBindings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="WhatsAppButtonActionBindings"/>, <see cref="WhatsAppListActionBindings"/> and <see cref="WhatsAppUrlActionBindings"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> or <paramref name="actionBindings"/> is null. </exception>
        public InteractiveMessage(TextMessageContent body, ActionBindings actionBindings)
        {
            Argument.AssertNotNull(body, nameof(body));
            Argument.AssertNotNull(actionBindings, nameof(actionBindings));

            Body = body;
            ActionBindings = actionBindings;
        }

        /// <summary> Initializes a new instance of <see cref="InteractiveMessage"/>. </summary>
        /// <param name="header">
        /// Gets or Sets Header content. Supports the following types:text, images etc.
        /// Please note <see cref="MessageContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ActionSetContent"/>, <see cref="ButtonSetContent"/>, <see cref="DocumentMessageContent"/>, <see cref="ImageMessageContent"/>, <see cref="TextMessageContent"/>, <see cref="UrlContent"/> and <see cref="VideoMessageContent"/>.
        /// </param>
        /// <param name="body"> Gets or Sets Message body content. Emojis, markdown, and links are supported. </param>
        /// <param name="footer"> Gets or Sets Message footer content. Emojis, markdown, and links are supported. </param>
        /// <param name="actionBindings">
        /// The binding object to get or set Action which describes options user have to respond to message.
        /// Please note <see cref="Messages.ActionBindings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="WhatsAppButtonActionBindings"/>, <see cref="WhatsAppListActionBindings"/> and <see cref="WhatsAppUrlActionBindings"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InteractiveMessage(MessageContent header, TextMessageContent body, TextMessageContent footer, ActionBindings actionBindings, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Header = header;
            Body = body;
            Footer = footer;
            ActionBindings = actionBindings;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InteractiveMessage"/> for deserialization. </summary>
        internal InteractiveMessage()
        {
        }

        /// <summary>
        /// Gets or Sets Header content. Supports the following types:text, images etc.
        /// Please note <see cref="MessageContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ActionSetContent"/>, <see cref="ButtonSetContent"/>, <see cref="DocumentMessageContent"/>, <see cref="ImageMessageContent"/>, <see cref="TextMessageContent"/>, <see cref="UrlContent"/> and <see cref="VideoMessageContent"/>.
        /// </summary>
        public MessageContent Header { get; set; }
        /// <summary> Gets or Sets Message body content. Emojis, markdown, and links are supported. </summary>
        public TextMessageContent Body { get; }
        /// <summary> Gets or Sets Message footer content. Emojis, markdown, and links are supported. </summary>
        public TextMessageContent Footer { get; set; }
        /// <summary>
        /// The binding object to get or set Action which describes options user have to respond to message.
        /// Please note <see cref="Messages.ActionBindings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="WhatsAppButtonActionBindings"/>, <see cref="WhatsAppListActionBindings"/> and <see cref="WhatsAppUrlActionBindings"/>.
        /// </summary>
        public ActionBindings ActionBindings { get; }
    }
}
