// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Communication.Messages.Models.Channels;

namespace Azure.Communication.Messages
{
    /// <summary> Internal conversation participant. </summary>
    public partial class InternalConversationParticipant : ConversationParticipant
    {
        /// <summary> Initializes a new instance of <see cref="InternalConversationParticipant"/>. </summary>
        /// <param name="contact">
        /// The internal platform identifiers for the participant.
        /// Please note <see cref="ConversationContact"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BotContact"/>, <see cref="CommunicationContact"/> and <see cref="WhatsAppContact"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contact"/> is null. </exception>
        public InternalConversationParticipant(ConversationContact contact)
        {
            Argument.AssertNotNull(contact, nameof(contact));

            Kind = ParticipantKind.Internal;
            Contact = contact;
        }

        /// <summary> Initializes a new instance of <see cref="InternalConversationParticipant"/>. </summary>
        /// <param name="id"> Participant Identifier. </param>
        /// <param name="displayName"> Participant display name. </param>
        /// <param name="kind"> The type discriminator describing a participant type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="contact">
        /// The internal platform identifiers for the participant.
        /// Please note <see cref="ConversationContact"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BotContact"/>, <see cref="CommunicationContact"/> and <see cref="WhatsAppContact"/>.
        /// </param>
        internal InternalConversationParticipant(string id, string displayName, ParticipantKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, ConversationContact contact) : base(id, displayName, kind, serializedAdditionalRawData)
        {
            Contact = contact;
        }

        /// <summary> Initializes a new instance of <see cref="InternalConversationParticipant"/> for deserialization. </summary>
        internal InternalConversationParticipant()
        {
        }

        /// <summary>
        /// The internal platform identifiers for the participant.
        /// Please note <see cref="ConversationContact"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BotContact"/>, <see cref="CommunicationContact"/> and <see cref="WhatsAppContact"/>.
        /// </summary>
        public ConversationContact Contact { get; set; }
    }
}
