// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Communication.Messages
{
    /// <summary> The Action Group content. </summary>
    public partial class ActionGroup
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ActionGroup"/>. </summary>
        /// <param name="title"> Title of the ActionGroup. </param>
        /// <param name="items"> Array of items in ActionGroup. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="title"/> or <paramref name="items"/> is null. </exception>
        public ActionGroup(string title, IEnumerable<ActionGroupItem> items)
        {
            Argument.AssertNotNull(title, nameof(title));
            Argument.AssertNotNull(items, nameof(items));

            Title = title;
            Items = items.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ActionGroup"/>. </summary>
        /// <param name="title"> Title of the ActionGroup. </param>
        /// <param name="items"> Array of items in ActionGroup. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ActionGroup(string title, IList<ActionGroupItem> items, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Title = title;
            Items = items;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ActionGroup"/> for deserialization. </summary>
        internal ActionGroup()
        {
        }

        /// <summary> Title of the ActionGroup. </summary>
        public string Title { get; }
        /// <summary> Array of items in ActionGroup. </summary>
        public IList<ActionGroupItem> Items { get; }
    }
}
