// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Communication.Messages.Models.Channels;

namespace Azure.Communication.Messages
{
    /// <summary> External conversation participant. </summary>
    public partial class ExternalConversationParticipant : ConversationParticipant
    {
        /// <summary> Initializes a new instance of <see cref="ExternalConversationParticipant"/>. </summary>
        /// <param name="contacts">
        /// List of external platform identifiers for the participant.
        /// Please note <see cref="ConversationContact"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BotContact"/>, <see cref="CommunicationContact"/> and <see cref="WhatsAppContact"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contacts"/> is null. </exception>
        public ExternalConversationParticipant(IEnumerable<ConversationContact> contacts)
        {
            Argument.AssertNotNull(contacts, nameof(contacts));

            Kind = ParticipantKind.External;
            Contacts = contacts.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ExternalConversationParticipant"/>. </summary>
        /// <param name="id"> Participant Identifier. </param>
        /// <param name="displayName"> Participant display name. </param>
        /// <param name="kind"> The type discriminator describing a participant type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="contacts">
        /// List of external platform identifiers for the participant.
        /// Please note <see cref="ConversationContact"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BotContact"/>, <see cref="CommunicationContact"/> and <see cref="WhatsAppContact"/>.
        /// </param>
        internal ExternalConversationParticipant(string id, string displayName, ParticipantKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, IList<ConversationContact> contacts) : base(id, displayName, kind, serializedAdditionalRawData)
        {
            Contacts = contacts;
        }

        /// <summary> Initializes a new instance of <see cref="ExternalConversationParticipant"/> for deserialization. </summary>
        internal ExternalConversationParticipant()
        {
        }

        /// <summary>
        /// List of external platform identifiers for the participant.
        /// Please note <see cref="ConversationContact"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BotContact"/>, <see cref="CommunicationContact"/> and <see cref="WhatsAppContact"/>.
        /// </summary>
        public IList<ConversationContact> Contacts { get; }
    }
}
