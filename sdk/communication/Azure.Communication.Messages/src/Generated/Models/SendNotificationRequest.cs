// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Communication.Messages
{
    /// <summary> Details of the message to send. </summary>
    internal partial class SendNotificationRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SendNotificationRequest"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="type"> The type of message. Supports text, image, template. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="channelRegistrationId"/> or <paramref name="to"/> is null. </exception>
        public SendNotificationRequest(string channelRegistrationId, IEnumerable<string> to, CommunicationMessageType type)
        {
            Argument.AssertNotNull(channelRegistrationId, nameof(channelRegistrationId));
            Argument.AssertNotNull(to, nameof(to));

            ChannelRegistrationId = channelRegistrationId;
            To = to.ToList();
            Type = type;
        }

        /// <summary> Initializes a new instance of <see cref="SendNotificationRequest"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="type"> The type of message. Supports text, image, template. </param>
        /// <param name="content"> Message content. </param>
        /// <param name="mediaUri"> A media url for the file. Required if the type is one of the supported media types, e.g. image. </param>
        /// <param name="template"> The template object used to create templates. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SendNotificationRequest(string channelRegistrationId, IList<string> to, CommunicationMessageType type, string content, string mediaUri, MessageTemplateInternal template, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ChannelRegistrationId = channelRegistrationId;
            To = to;
            Type = type;
            Content = content;
            MediaUri = mediaUri;
            Template = template;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SendNotificationRequest"/> for deserialization. </summary>
        internal SendNotificationRequest()
        {
        }

        /// <summary> The Channel Registration ID for the Business Identifier. </summary>
        public string ChannelRegistrationId { get; }
        /// <summary> The native external platform user identifiers of the recipient. </summary>
        public IList<string> To { get; }
        /// <summary> The type of message. Supports text, image, template. </summary>
        public CommunicationMessageType Type { get; }
        /// <summary> Message content. </summary>
        public string Content { get; set; }
        /// <summary> A media url for the file. Required if the type is one of the supported media types, e.g. image. </summary>
        public string MediaUri { get; set; }
        /// <summary> The template object used to create templates. </summary>
        public MessageTemplateInternal Template { get; set; }
    }
}
