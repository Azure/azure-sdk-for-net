// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.Messages
{
    /// <summary> A request to send an Interactive message notification. </summary>
    public partial class InteractiveNotificationContent : NotificationContent
    {
        /// <summary> Initializes a new instance of <see cref="InteractiveNotificationContent"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="interactiveMessage"> The interactive message content. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="to"/> or <paramref name="interactiveMessage"/> is null. </exception>
        public InteractiveNotificationContent(Guid channelRegistrationId, IEnumerable<string> to, InteractiveMessage interactiveMessage) : base(channelRegistrationId, to)
        {
            Argument.AssertNotNull(to, nameof(to));
            Argument.AssertNotNull(interactiveMessage, nameof(interactiveMessage));

            Kind = CommunicationMessageKind.Interactive;
            InteractiveMessage = interactiveMessage;
        }

        /// <summary> Initializes a new instance of <see cref="InteractiveNotificationContent"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="kind"> The type discriminator describing a notification type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="interactiveMessage"> The interactive message content. </param>
        internal InteractiveNotificationContent(Guid channelRegistrationId, IList<string> to, CommunicationMessageKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, InteractiveMessage interactiveMessage) : base(channelRegistrationId, to, kind, serializedAdditionalRawData)
        {
            InteractiveMessage = interactiveMessage;
        }

        /// <summary> Initializes a new instance of <see cref="InteractiveNotificationContent"/> for deserialization. </summary>
        internal InteractiveNotificationContent()
        {
        }

        /// <summary> The interactive message content. </summary>
        public InteractiveMessage InteractiveMessage { get; }
    }
}
