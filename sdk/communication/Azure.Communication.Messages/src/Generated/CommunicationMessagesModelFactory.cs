// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Communication.Messages.Models.Channels;

namespace Azure.Communication.Messages
{
    /// <summary> Model factory for models. </summary>
    public static partial class CommunicationMessagesModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Messages.NotificationContent"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="kind"> The type discriminator describing a message type. </param>
        /// <returns> A new <see cref="Messages.NotificationContent"/> instance for mocking. </returns>
        public static NotificationContent NotificationContent(Guid channelRegistrationId = default, IEnumerable<string> to = null, string kind = null)
        {
            to ??= new List<string>();

            return new UnknownNotificationContent(channelRegistrationId, to?.ToList(), kind == null ? default : new CommunicationMessageKind(kind), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.TextNotificationContent"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="content"> Message content. </param>
        /// <returns> A new <see cref="Messages.TextNotificationContent"/> instance for mocking. </returns>
        public static TextNotificationContent TextNotificationContent(Guid channelRegistrationId = default, IEnumerable<string> to = null, string content = null)
        {
            to ??= new List<string>();

            return new TextNotificationContent(channelRegistrationId, to?.ToList(), CommunicationMessageKind.Text, serializedAdditionalRawData: null, content);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.ImageNotificationContent"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="caption"> Optional text content. </param>
        /// <param name="mediaUri"> A media url for the file. Required if the type is one of the supported media types, e.g. image. </param>
        /// <returns> A new <see cref="Messages.ImageNotificationContent"/> instance for mocking. </returns>
        public static ImageNotificationContent ImageNotificationContent(Guid channelRegistrationId = default, IEnumerable<string> to = null, string caption = null, Uri mediaUri = null)
        {
            to ??= new List<string>();

            return new ImageNotificationContent(
                channelRegistrationId,
                to?.ToList(),
                CommunicationMessageKind.Image,
                serializedAdditionalRawData: null,
                caption,
                mediaUri);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.DocumentNotificationContent"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="caption"> Optional text content. </param>
        /// <param name="fileName"> Optional name for the file. </param>
        /// <param name="mediaUri"> A media url for the file. Required if the type is one of the supported media types, e.g. image. </param>
        /// <returns> A new <see cref="Messages.DocumentNotificationContent"/> instance for mocking. </returns>
        public static DocumentNotificationContent DocumentNotificationContent(Guid channelRegistrationId = default, IEnumerable<string> to = null, string caption = null, string fileName = null, Uri mediaUri = null)
        {
            to ??= new List<string>();

            return new DocumentNotificationContent(
                channelRegistrationId,
                to?.ToList(),
                CommunicationMessageKind.Document,
                serializedAdditionalRawData: null,
                caption,
                fileName,
                mediaUri);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.VideoNotificationContent"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="caption"> Optional text content. </param>
        /// <param name="mediaUri"> A media url for the file. Required if the type is one of the supported media types, e.g. image. </param>
        /// <returns> A new <see cref="Messages.VideoNotificationContent"/> instance for mocking. </returns>
        public static VideoNotificationContent VideoNotificationContent(Guid channelRegistrationId = default, IEnumerable<string> to = null, string caption = null, Uri mediaUri = null)
        {
            to ??= new List<string>();

            return new VideoNotificationContent(
                channelRegistrationId,
                to?.ToList(),
                CommunicationMessageKind.Video,
                serializedAdditionalRawData: null,
                caption,
                mediaUri);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.AudioNotificationContent"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="mediaUri"> A media url for the file. Required if the type is one of the supported media types, e.g. image. </param>
        /// <returns> A new <see cref="Messages.AudioNotificationContent"/> instance for mocking. </returns>
        public static AudioNotificationContent AudioNotificationContent(Guid channelRegistrationId = default, IEnumerable<string> to = null, Uri mediaUri = null)
        {
            to ??= new List<string>();

            return new AudioNotificationContent(channelRegistrationId, to?.ToList(), CommunicationMessageKind.Audio, serializedAdditionalRawData: null, mediaUri);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.TemplateNotificationContent"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="template"> The template object used to create templates. </param>
        /// <returns> A new <see cref="Messages.TemplateNotificationContent"/> instance for mocking. </returns>
        public static TemplateNotificationContent TemplateNotificationContent(Guid channelRegistrationId = default, IEnumerable<string> to = null, MessageTemplate template = null)
        {
            to ??= new List<string>();

            return new TemplateNotificationContent(channelRegistrationId, to?.ToList(), CommunicationMessageKind.Template, serializedAdditionalRawData: null, template);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.SendMessageResult"/>. </summary>
        /// <param name="receipts"> Receipts of the send message operation. </param>
        /// <returns> A new <see cref="Messages.SendMessageResult"/> instance for mocking. </returns>
        public static SendMessageResult SendMessageResult(IEnumerable<MessageReceipt> receipts = null)
        {
            receipts ??= new List<MessageReceipt>();

            return new SendMessageResult(receipts?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.MessageReceipt"/>. </summary>
        /// <param name="messageId"> The message id. </param>
        /// <param name="to"> The native external platform user identifier of the recipient. </param>
        /// <returns> A new <see cref="Messages.MessageReceipt"/> instance for mocking. </returns>
        public static MessageReceipt MessageReceipt(string messageId = null, string to = null)
        {
            return new MessageReceipt(messageId, to, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.MessageTemplateItem"/>. </summary>
        /// <param name="name"> The template's name. </param>
        /// <param name="language"> The template's language, in the ISO 639 format, consist of a two-letter language code followed by an optional two-letter country code, e.g., 'en' or 'en_US'. </param>
        /// <param name="status"> The aggregated template status. </param>
        /// <param name="kind"> The type discriminator describing a template type. </param>
        /// <returns> A new <see cref="Messages.MessageTemplateItem"/> instance for mocking. </returns>
        public static MessageTemplateItem MessageTemplateItem(string name = null, string language = null, MessageTemplateStatus status = default, string kind = null)
        {
            return new UnknownMessageTemplateItem(name, language, status, kind == null ? default : new CommunicationMessagesChannel(kind), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Channels.WhatsAppMessageTemplateItem"/>. </summary>
        /// <param name="name"> The template's name. </param>
        /// <param name="language"> The template's language, in the ISO 639 format, consist of a two-letter language code followed by an optional two-letter country code, e.g., 'en' or 'en_US'. </param>
        /// <param name="status"> The aggregated template status. </param>
        /// <param name="content"> WhatsApp platform's template content. This is the payload returned from WhatsApp API. </param>
        /// <returns> A new <see cref="Models.Channels.WhatsAppMessageTemplateItem"/> instance for mocking. </returns>
        public static WhatsAppMessageTemplateItem WhatsAppMessageTemplateItem(string name = null, string language = null, MessageTemplateStatus status = default, BinaryData content = null)
        {
            return new WhatsAppMessageTemplateItem(
                name,
                language,
                status,
                CommunicationMessagesChannel.WhatsApp,
                serializedAdditionalRawData: null,
                content);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.CommunicationConversation"/>. </summary>
        /// <param name="id"> The conversation ID. </param>
        /// <param name="topic"> The conversation topic. </param>
        /// <param name="deliveryChannelIds"> List of delivery channel IDs. </param>
        /// <param name="outboundDeliveryStrategy"> Outbound delivery strategy for the conversation. </param>
        /// <param name="participants">
        /// List of participants involved in the conversation.
        /// Please note <see cref="Messages.ConversationParticipant"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Messages.ExternalConversationParticipant"/> and <see cref="Messages.InternalConversationParticipant"/>.
        /// </param>
        /// <returns> A new <see cref="Messages.CommunicationConversation"/> instance for mocking. </returns>
        public static CommunicationConversation CommunicationConversation(string id = null, string topic = null, IEnumerable<string> deliveryChannelIds = null, OutboundDeliveryStrategyKind? outboundDeliveryStrategy = null, IEnumerable<ConversationParticipant> participants = null)
        {
            deliveryChannelIds ??= new List<string>();
            participants ??= new List<ConversationParticipant>();

            return new CommunicationConversation(
                id,
                topic,
                deliveryChannelIds?.ToList(),
                outboundDeliveryStrategy,
                participants?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.ConversationParticipant"/>. </summary>
        /// <param name="id"> Participant Identifier. </param>
        /// <param name="displayName"> Participant display name. </param>
        /// <param name="kind"> The type discriminator describing a participant type. </param>
        /// <returns> A new <see cref="Messages.ConversationParticipant"/> instance for mocking. </returns>
        public static ConversationParticipant ConversationParticipant(string id = null, string displayName = null, string kind = null)
        {
            return new UnknownConversationParticipant(id, displayName, kind == null ? default : new ParticipantKind(kind), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.InternalConversationParticipant"/>. </summary>
        /// <param name="id"> Participant Identifier. </param>
        /// <param name="displayName"> Participant display name. </param>
        /// <param name="contact">
        /// The internal platform identifiers for the participant.
        /// Please note <see cref="ConversationContact"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BotContact"/>, <see cref="CommunicationContact"/> and <see cref="WhatsAppContact"/>.
        /// </param>
        /// <returns> A new <see cref="Messages.InternalConversationParticipant"/> instance for mocking. </returns>
        public static InternalConversationParticipant InternalConversationParticipant(string id = null, string displayName = null, ConversationContact contact = null)
        {
            return new InternalConversationParticipant(id, displayName, ParticipantKind.Internal, serializedAdditionalRawData: null, contact);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.ExternalConversationParticipant"/>. </summary>
        /// <param name="id"> Participant Identifier. </param>
        /// <param name="displayName"> Participant display name. </param>
        /// <param name="contacts">
        /// List of external platform identifiers for the participant.
        /// Please note <see cref="ConversationContact"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BotContact"/>, <see cref="CommunicationContact"/> and <see cref="WhatsAppContact"/>.
        /// </param>
        /// <returns> A new <see cref="Messages.ExternalConversationParticipant"/> instance for mocking. </returns>
        public static ExternalConversationParticipant ExternalConversationParticipant(string id = null, string displayName = null, IEnumerable<ConversationContact> contacts = null)
        {
            contacts ??= new List<ConversationContact>();

            return new ExternalConversationParticipant(id, displayName, ParticipantKind.External, serializedAdditionalRawData: null, contacts?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Messages.ConversationMessageItem"/>. </summary>
        /// <param name="id"> Message ID. </param>
        /// <param name="sequenceId"> Message sequence ID. </param>
        /// <param name="message">
        /// Payload of a threaded conversation message.
        /// Please note <see cref="ConversationMessageContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioConversationMessageContent"/>, <see cref="DocumentConversationMessageContent"/>, <see cref="ImageConversationMessageContent"/>, <see cref="TemplateConversationMessageContent"/>, <see cref="TextConversationMessageContent"/> and <see cref="VideoConversationMessageContent"/>.
        /// </param>
        /// <param name="senderDisplayName"> The display name of the message sender. </param>
        /// <param name="senderCommunicationIdentifier"> The communication identifier of the message sender. </param>
        /// <param name="createdOn"> Timestamp when the message is sent. </param>
        /// <returns> A new <see cref="Messages.ConversationMessageItem"/> instance for mocking. </returns>
        public static ConversationMessageItem ConversationMessageItem(string id = null, long? sequenceId = null, ConversationMessageContent message = null, string senderDisplayName = null, string senderCommunicationIdentifier = null, DateTimeOffset createdOn = default)
        {
            return new ConversationMessageItem(
                id,
                sequenceId,
                message,
                senderDisplayName,
                senderCommunicationIdentifier,
                createdOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.AddParticipantsResult"/>. </summary>
        /// <param name="invalidParticipants"> List of Ids with Errors if failed to be added. </param>
        /// <returns> A new <see cref="Messages.AddParticipantsResult"/> instance for mocking. </returns>
        public static AddParticipantsResult AddParticipantsResult(IEnumerable<UpdateParticipantsResult> invalidParticipants = null)
        {
            invalidParticipants ??= new List<UpdateParticipantsResult>();

            return new AddParticipantsResult(invalidParticipants?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.UpdateParticipantsResult"/>. </summary>
        /// <param name="id"> Participant User Id. </param>
        /// <param name="error"> Error of the participant operation. </param>
        /// <returns> A new <see cref="Messages.UpdateParticipantsResult"/> instance for mocking. </returns>
        public static UpdateParticipantsResult UpdateParticipantsResult(string id = null, ResponseError error = null)
        {
            return new UpdateParticipantsResult(id, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.RemoveParticipantsResult"/>. </summary>
        /// <param name="invalidParticipants"> List of Ids with Errors if failed to be added. </param>
        /// <returns> A new <see cref="Messages.RemoveParticipantsResult"/> instance for mocking. </returns>
        public static RemoveParticipantsResult RemoveParticipantsResult(IEnumerable<UpdateParticipantsResult> invalidParticipants = null)
        {
            invalidParticipants ??= new List<UpdateParticipantsResult>();

            return new RemoveParticipantsResult(invalidParticipants?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.GetConversationThreadAnalysisResult"/>. </summary>
        /// <param name="summary"> The AI summary of the conversation messages. </param>
        /// <returns> A new <see cref="Messages.GetConversationThreadAnalysisResult"/> instance for mocking. </returns>
        public static GetConversationThreadAnalysisResult GetConversationThreadAnalysisResult(string summary = null)
        {
            return new GetConversationThreadAnalysisResult(summary, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.SendConversationMessageOptions"/>. </summary>
        /// <param name="request">
        /// Details of a send conversation message request.
        /// Please note <see cref="ConversationMessageContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioConversationMessageContent"/>, <see cref="DocumentConversationMessageContent"/>, <see cref="ImageConversationMessageContent"/>, <see cref="TemplateConversationMessageContent"/>, <see cref="TextConversationMessageContent"/> and <see cref="VideoConversationMessageContent"/>.
        /// </param>
        /// <param name="outboundDeliveryStrategy">
        /// The options of the outbound delivery strategy for messages sent by emplyees in a conversation.
        /// Supports internalOnly, allChannels.
        /// </param>
        /// <returns> A new <see cref="Messages.SendConversationMessageOptions"/> instance for mocking. </returns>
        public static SendConversationMessageOptions SendConversationMessageOptions(ConversationMessageContent request = null, OutboundDeliveryStrategyKind? outboundDeliveryStrategy = null)
        {
            return new SendConversationMessageOptions(request, outboundDeliveryStrategy, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Messages.SendConversationMessageResult"/>. </summary>
        /// <param name="messageId"> A server-generated Advanced Messaging conversation message id. </param>
        /// <returns> A new <see cref="Messages.SendConversationMessageResult"/> instance for mocking. </returns>
        public static SendConversationMessageResult SendConversationMessageResult(string messageId = null)
        {
            return new SendConversationMessageResult(messageId, serializedAdditionalRawData: null);
        }
    }
}
