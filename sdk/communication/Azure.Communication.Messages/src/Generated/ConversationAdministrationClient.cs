// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.Messages
{
    // Data plane generated client.
    /// <summary> The ConversationAdministration service client. </summary>
    public partial class ConversationAdministrationClient
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly AzureKeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";
        private static readonly string[] AuthorizationScopes = new string[] { "https://communication.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ConversationAdministrationClient. </summary>
        /// <param name="endpoint"> The communication resource, for example https://my-resource.communication.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ConversationAdministrationClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new CommunicationMessagesClientOptions())
        {
        }

        /// <summary> Creates a new conversation. This is only for create operation. </summary>
        /// <param name="conversation"> The conversation details. </param>
        /// <param name="initialMessage"> An initial message within the conversation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversation"/> is null. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='CreateConversationAsync(CommunicationConversation,ConversationMessage,CancellationToken)']/*" />
        public virtual async Task<Response<CommunicationConversation>> CreateConversationAsync(CommunicationConversation conversation, ConversationMessage initialMessage = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(conversation, nameof(conversation));

            CreateConversationRequest1 createConversationRequest1 = new CreateConversationRequest1(conversation, initialMessage, null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateConversationAsync(createConversationRequest1.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(CommunicationConversation.FromResponse(response), response);
        }

        /// <summary> Creates a new conversation. This is only for create operation. </summary>
        /// <param name="conversation"> The conversation details. </param>
        /// <param name="initialMessage"> An initial message within the conversation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversation"/> is null. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='CreateConversation(CommunicationConversation,ConversationMessage,CancellationToken)']/*" />
        public virtual Response<CommunicationConversation> CreateConversation(CommunicationConversation conversation, ConversationMessage initialMessage = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(conversation, nameof(conversation));

            CreateConversationRequest1 createConversationRequest1 = new CreateConversationRequest1(conversation, initialMessage, null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateConversation(createConversationRequest1.ToRequestContent(), context);
            return Response.FromValue(CommunicationConversation.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates a new conversation. This is only for create operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateConversationAsync(CommunicationConversation,ConversationMessage,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='CreateConversationAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateConversationAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.CreateConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateConversationRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a new conversation. This is only for create operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateConversation(CommunicationConversation,ConversationMessage,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='CreateConversation(RequestContent,RequestContext)']/*" />
        public virtual Response CreateConversation(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.CreateConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateConversationRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of a specific conversation. </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetConversationAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<CommunicationConversation>> GetConversationAsync(string conversationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetConversationAsync(conversationId, context).ConfigureAwait(false);
            return Response.FromValue(CommunicationConversation.FromResponse(response), response);
        }

        /// <summary> Gets the details of a specific conversation. </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetConversation(string,CancellationToken)']/*" />
        public virtual Response<CommunicationConversation> GetConversation(string conversationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetConversation(conversationId, context);
            return Response.FromValue(CommunicationConversation.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets the details of a specific conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversationAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetConversationAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetConversationAsync(string conversationId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.GetConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConversationRequest(conversationId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the details of a specific conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversation(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetConversation(string,RequestContext)']/*" />
        public virtual Response GetConversation(string conversationId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.GetConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConversationRequest(conversationId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes a specific conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='DeleteConversationAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteConversationAsync(string conversationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.DeleteConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteConversationRequest(conversationId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes a specific conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='DeleteConversation(string,RequestContext)']/*" />
        public virtual Response DeleteConversation(string conversationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.DeleteConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteConversationRequest(conversationId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Terminates a specific conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='TerminateConversationAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> TerminateConversationAsync(string conversationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.TerminateConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTerminateConversationRequest(conversationId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Terminates a specific conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='TerminateConversation(string,RequestContext)']/*" />
        public virtual Response TerminateConversation(string conversationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.TerminateConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTerminateConversationRequest(conversationId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds participants to a specific conversation. </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="options"> Details of the payload for adding participants to a conversation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='AddParticipantsAsync(string,AddParticipantsOptions,CancellationToken)']/*" />
        public virtual async Task<Response<AddParticipantsResult>> AddParticipantsAsync(string conversationId, AddParticipantsOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(options, nameof(options));

            using RequestContent content = options.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await AddParticipantsAsync(conversationId, content, context).ConfigureAwait(false);
            return Response.FromValue(AddParticipantsResult.FromResponse(response), response);
        }

        /// <summary> Adds participants to a specific conversation. </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="options"> Details of the payload for adding participants to a conversation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='AddParticipants(string,AddParticipantsOptions,CancellationToken)']/*" />
        public virtual Response<AddParticipantsResult> AddParticipants(string conversationId, AddParticipantsOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(options, nameof(options));

            using RequestContent content = options.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = AddParticipants(conversationId, content, context);
            return Response.FromValue(AddParticipantsResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Adds participants to a specific conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddParticipantsAsync(string,AddParticipantsOptions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='AddParticipantsAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> AddParticipantsAsync(string conversationId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.AddParticipants");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddParticipantsRequest(conversationId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Adds participants to a specific conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddParticipants(string,AddParticipantsOptions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='AddParticipants(string,RequestContent,RequestContext)']/*" />
        public virtual Response AddParticipants(string conversationId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.AddParticipants");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddParticipantsRequest(conversationId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> remove a participant from a conversation. </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="options"> Details of the request body for removing participants from a conversation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='RemoveParticipantsAsync(string,RemoveParticipantsOptions,CancellationToken)']/*" />
        public virtual async Task<Response<RemoveParticipantsResult>> RemoveParticipantsAsync(string conversationId, RemoveParticipantsOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(options, nameof(options));

            using RequestContent content = options.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await RemoveParticipantsAsync(conversationId, content, context).ConfigureAwait(false);
            return Response.FromValue(RemoveParticipantsResult.FromResponse(response), response);
        }

        /// <summary> remove a participant from a conversation. </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="options"> Details of the request body for removing participants from a conversation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='RemoveParticipants(string,RemoveParticipantsOptions,CancellationToken)']/*" />
        public virtual Response<RemoveParticipantsResult> RemoveParticipants(string conversationId, RemoveParticipantsOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(options, nameof(options));

            using RequestContent content = options.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = RemoveParticipants(conversationId, content, context);
            return Response.FromValue(RemoveParticipantsResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] remove a participant from a conversation
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="RemoveParticipantsAsync(string,RemoveParticipantsOptions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='RemoveParticipantsAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> RemoveParticipantsAsync(string conversationId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.RemoveParticipants");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRemoveParticipantsRequest(conversationId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] remove a participant from a conversation
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="RemoveParticipants(string,RemoveParticipantsOptions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='RemoveParticipants(string,RequestContent,RequestContext)']/*" />
        public virtual Response RemoveParticipants(string conversationId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.RemoveParticipants");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRemoveParticipantsRequest(conversationId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get AI Analysis of a conversation. </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='AnalyzeConversationAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<GetConversationThreadAnalysisResult>> AnalyzeConversationAsync(string conversationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await AnalyzeConversationAsync(conversationId, context).ConfigureAwait(false);
            return Response.FromValue(GetConversationThreadAnalysisResult.FromResponse(response), response);
        }

        /// <summary> Get AI Analysis of a conversation. </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='AnalyzeConversation(string,CancellationToken)']/*" />
        public virtual Response<GetConversationThreadAnalysisResult> AnalyzeConversation(string conversationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = AnalyzeConversation(conversationId, context);
            return Response.FromValue(GetConversationThreadAnalysisResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get AI Analysis of a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AnalyzeConversationAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='AnalyzeConversationAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> AnalyzeConversationAsync(string conversationId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.AnalyzeConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnalyzeConversationRequest(conversationId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get AI Analysis of a conversation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AnalyzeConversation(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='AnalyzeConversation(string,RequestContext)']/*" />
        public virtual Response AnalyzeConversation(string conversationId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using var scope = ClientDiagnostics.CreateScope("ConversationAdministrationClient.AnalyzeConversation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnalyzeConversationRequest(conversationId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves list of conversations. </summary>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="participantId"> The participant user ID. </param>
        /// <param name="channelId"> The id of channel. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetConversationsAsync(int?,string,Guid?,CancellationToken)']/*" />
        public virtual AsyncPageable<CommunicationConversation> GetConversationsAsync(int? maxPageSize = null, string participantId = null, Guid? channelId = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetConversationsRequest(maxPageSize, participantId, channelId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetConversationsNextPageRequest(nextLink, maxPageSize, participantId, channelId, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => CommunicationConversation.DeserializeCommunicationConversation(e), ClientDiagnostics, _pipeline, "ConversationAdministrationClient.GetConversations", "value", "nextLink", context);
        }

        /// <summary> Retrieves list of conversations. </summary>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="participantId"> The participant user ID. </param>
        /// <param name="channelId"> The id of channel. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetConversations(int?,string,Guid?,CancellationToken)']/*" />
        public virtual Pageable<CommunicationConversation> GetConversations(int? maxPageSize = null, string participantId = null, Guid? channelId = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetConversationsRequest(maxPageSize, participantId, channelId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetConversationsNextPageRequest(nextLink, maxPageSize, participantId, channelId, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => CommunicationConversation.DeserializeCommunicationConversation(e), ClientDiagnostics, _pipeline, "ConversationAdministrationClient.GetConversations", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Retrieves list of conversations.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversationsAsync(int?,string,Guid?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="participantId"> The participant user ID. </param>
        /// <param name="channelId"> The id of channel. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetConversationsAsync(int?,string,Guid?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetConversationsAsync(int? maxPageSize, string participantId, Guid? channelId, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetConversationsRequest(maxPageSize, participantId, channelId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetConversationsNextPageRequest(nextLink, maxPageSize, participantId, channelId, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ConversationAdministrationClient.GetConversations", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Retrieves list of conversations.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetConversations(int?,string,Guid?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="participantId"> The participant user ID. </param>
        /// <param name="channelId"> The id of channel. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetConversations(int?,string,Guid?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetConversations(int? maxPageSize, string participantId, Guid? channelId, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetConversationsRequest(maxPageSize, participantId, channelId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetConversationsNextPageRequest(nextLink, maxPageSize, participantId, channelId, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ConversationAdministrationClient.GetConversations", "value", "nextLink", context);
        }

        /// <summary> Retrieves list of conversation messages. </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="participantId"> The participant user ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetMessagesAsync(string,int?,string,CancellationToken)']/*" />
        public virtual AsyncPageable<ConversationMessageItem> GetMessagesAsync(string conversationId, int? maxPageSize = null, string participantId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMessagesRequest(conversationId, maxPageSize, participantId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMessagesNextPageRequest(nextLink, conversationId, maxPageSize, participantId, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => ConversationMessageItem.DeserializeConversationMessageItem(e), ClientDiagnostics, _pipeline, "ConversationAdministrationClient.GetMessages", "value", "nextLink", context);
        }

        /// <summary> Retrieves list of conversation messages. </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="participantId"> The participant user ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetMessages(string,int?,string,CancellationToken)']/*" />
        public virtual Pageable<ConversationMessageItem> GetMessages(string conversationId, int? maxPageSize = null, string participantId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMessagesRequest(conversationId, maxPageSize, participantId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMessagesNextPageRequest(nextLink, conversationId, maxPageSize, participantId, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => ConversationMessageItem.DeserializeConversationMessageItem(e), ClientDiagnostics, _pipeline, "ConversationAdministrationClient.GetMessages", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Retrieves list of conversation messages.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessagesAsync(string,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="participantId"> The participant user ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetMessagesAsync(string,int?,string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetMessagesAsync(string conversationId, int? maxPageSize, string participantId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMessagesRequest(conversationId, maxPageSize, participantId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMessagesNextPageRequest(nextLink, conversationId, maxPageSize, participantId, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ConversationAdministrationClient.GetMessages", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Retrieves list of conversation messages.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessages(string,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="conversationId"> The conversation ID. </param>
        /// <param name="maxPageSize"> Number of objects to return per page. </param>
        /// <param name="participantId"> The participant user ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="conversationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ConversationAdministrationClient.xml" path="doc/members/member[@name='GetMessages(string,int?,string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetMessages(string conversationId, int? maxPageSize, string participantId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMessagesRequest(conversationId, maxPageSize, participantId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMessagesNextPageRequest(nextLink, conversationId, maxPageSize, participantId, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ConversationAdministrationClient.GetMessages", "value", "nextLink", context);
        }

        internal HttpMessage CreateCreateConversationRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/messages/conversations", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetConversationRequest(string conversationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/messages/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteConversationRequest(string conversationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/messages/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Repeatability-Request-ID", Guid.NewGuid());
            request.Headers.Add("Repeatability-First-Sent", DateTimeOffset.Now, "R");
            return message;
        }

        internal HttpMessage CreateTerminateConversationRequest(string conversationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/messages/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendPath(":terminate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Repeatability-Request-ID", Guid.NewGuid());
            request.Headers.Add("Repeatability-First-Sent", DateTimeOffset.Now, "R");
            return message;
        }

        internal HttpMessage CreateGetConversationsRequest(int? maxPageSize, string participantId, Guid? channelId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/messages/conversations", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            if (participantId != null)
            {
                uri.AppendQuery("participantId", participantId, true);
            }
            if (channelId != null)
            {
                uri.AppendQuery("channelId", channelId.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetMessagesRequest(string conversationId, int? maxPageSize, string participantId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/messages/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendPath("/messages", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            if (participantId != null)
            {
                uri.AppendQuery("participantId", participantId, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateAddParticipantsRequest(string conversationId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier207);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/messages/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendPath("/participants:add", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Repeatability-Request-ID", Guid.NewGuid());
            request.Headers.Add("Repeatability-First-Sent", DateTimeOffset.Now, "R");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRemoveParticipantsRequest(string conversationId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier207);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/messages/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendPath("/participants:remove", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Repeatability-Request-ID", Guid.NewGuid());
            request.Headers.Add("Repeatability-First-Sent", DateTimeOffset.Now, "R");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAnalyzeConversationRequest(string conversationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/messages/conversations/", false);
            uri.AppendPath(conversationId, true);
            uri.AppendPath(":analyze", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Repeatability-Request-ID", Guid.NewGuid());
            request.Headers.Add("Repeatability-First-Sent", DateTimeOffset.Now, "R");
            return message;
        }

        internal HttpMessage CreateGetConversationsNextPageRequest(string nextLink, int? maxPageSize, string participantId, Guid? channelId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetMessagesNextPageRequest(string nextLink, string conversationId, int? maxPageSize, string participantId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier207;
        private static ResponseClassifier ResponseClassifier207 => _responseClassifier207 ??= new StatusCodeClassifier(stackalloc ushort[] { 207 });
    }
}
