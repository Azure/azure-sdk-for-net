// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Communication.Messages
{
    /// <summary> A request to send a Reaction notification. </summary>
    public partial class ReactionNotificationContent : NotificationContent
    {
        /// <summary> Initializes a new instance of <see cref="ReactionNotificationContent"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="emoji"> emoji content like \uD83D\uDE00. </param>
        /// <param name="messageId"> ID of the previous message you want to reply to. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="to"/>, <paramref name="emoji"/> or <paramref name="messageId"/> is null. </exception>
        public ReactionNotificationContent(Guid channelRegistrationId, IEnumerable<string> to, string emoji, string messageId) : base(channelRegistrationId, to)
        {
            Argument.AssertNotNull(to, nameof(to));
            Argument.AssertNotNull(emoji, nameof(emoji));
            Argument.AssertNotNull(messageId, nameof(messageId));

            Kind = CommunicationMessageKind.Reaction;
            Emoji = emoji;
            MessageId = messageId;
        }

        /// <summary> Initializes a new instance of <see cref="ReactionNotificationContent"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="kind"> The type discriminator describing a notification type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="emoji"> emoji content like \uD83D\uDE00. </param>
        /// <param name="messageId"> ID of the previous message you want to reply to. </param>
        internal ReactionNotificationContent(Guid channelRegistrationId, IList<string> to, CommunicationMessageKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, string emoji, string messageId) : base(channelRegistrationId, to, kind, serializedAdditionalRawData)
        {
            Emoji = emoji;
            MessageId = messageId;
        }

        /// <summary> Initializes a new instance of <see cref="ReactionNotificationContent"/> for deserialization. </summary>
        internal ReactionNotificationContent()
        {
        }

        /// <summary> emoji content like \uD83D\uDE00. </summary>
        public string Emoji { get; }
        /// <summary> ID of the previous message you want to reply to. </summary>
        public string MessageId { get; }
    }
}
