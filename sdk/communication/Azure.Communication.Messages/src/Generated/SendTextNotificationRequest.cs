// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Communication.Messages
{
    /// <summary> The SendTextNotificationRequest. </summary>
    internal partial class SendTextNotificationRequest : SendNotificationRequest
    {
        /// <summary> Initializes a new instance of <see cref="SendTextNotificationRequest"/>. </summary>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="content"> Message content. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="to"/> or <paramref name="content"/> is null. </exception>
        public SendTextNotificationRequest(Guid channelRegistrationId, IEnumerable<string> to, string content) : base(channelRegistrationId, to)
        {
            Argument.AssertNotNull(to, nameof(to));
            Argument.AssertNotNull(content, nameof(content));

            Kind = "text";
            Content = content;
        }

        /// <summary> Initializes a new instance of <see cref="SendTextNotificationRequest"/>. </summary>
        /// <param name="kind"> Discriminator. </param>
        /// <param name="channelRegistrationId"> The Channel Registration ID for the Business Identifier. </param>
        /// <param name="to"> The native external platform user identifiers of the recipient. </param>
        /// <param name="content"> Message content. </param>
        internal SendTextNotificationRequest(string kind, Guid channelRegistrationId, IList<string> to, string content) : base(kind, channelRegistrationId, to)
        {
            Content = content;
        }

        /// <summary> Message content. </summary>
        public string Content { get; }
    }
}
