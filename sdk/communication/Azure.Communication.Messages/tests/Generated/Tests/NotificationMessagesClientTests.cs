// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Communication.Messages.Tests
{
    public partial class NotificationMessagesClientTests : CommunicationMessagesTestBase
    {
        public NotificationMessagesClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotificationMessagesClient_Send_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = null;
            NotificationMessagesClient client = CreateNotificationMessagesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "text",
                content = "<content>",
                channelRegistrationId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                to = new object[]
            {
"<to>"
            },
            });
            Response response = await client.SendAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotificationMessagesClient_Send_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = null;
            NotificationMessagesClient client = CreateNotificationMessagesClient(endpoint, credential);

            NotificationContent notificationContent = new TextNotificationContent(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new string[] { "<to>" }, "<content>");
            Response<SendMessageResult> response = await client.SendAsync(notificationContent);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotificationMessagesClient_Send_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = null;
            NotificationMessagesClient client = CreateNotificationMessagesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "text",
                content = "<content>",
                channelRegistrationId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                to = new object[]
            {
"<to>"
            },
            });
            Response response = await client.SendAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotificationMessagesClient_Send_AllParameters_Convenience()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = null;
            NotificationMessagesClient client = CreateNotificationMessagesClient(endpoint, credential);

            NotificationContent notificationContent = new TextNotificationContent(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new string[] { "<to>" }, "<content>");
            Response<SendMessageResult> response = await client.SendAsync(notificationContent);
        }
    }
}
