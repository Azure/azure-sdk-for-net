// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Communication.Messages.Models.Channels;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Communication.Messages.Samples
{
    public partial class Samples_ConversationAdministrationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_CreateConversation_ShortVersion()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                conversation = new object(),
            });
            Response response = client.CreateConversation(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_CreateConversation_ShortVersion_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                conversation = new object(),
            });
            Response response = await client.CreateConversationAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_CreateConversation_ShortVersion_Convenience()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            CommunicationConversation conversation = new CommunicationConversation();
            Response<CommunicationConversation> response = client.CreateConversation(conversation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_CreateConversation_ShortVersion_Convenience_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            CommunicationConversation conversation = new CommunicationConversation();
            Response<CommunicationConversation> response = await client.CreateConversationAsync(conversation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_CreateConversation_AllParameters()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                conversation = new
                {
                    topic = "<topic>",
                    deliveryChannelIds = new object[]
            {
"<deliveryChannelIds>"
            },
                    outboundDeliveryStrategy = "internalOnly",
                    participants = new object[]
            {
new
{
kind = "internal",
contact = new
{
kind = "communication",
id = "<id>",
},
displayName = "<displayName>",
}
            },
                },
                initialMessage = new
                {
                    content = "<content>",
                },
            });
            Response response = client.CreateConversation(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("topic").ToString());
            Console.WriteLine(result.GetProperty("deliveryChannelIds")[0].ToString());
            Console.WriteLine(result.GetProperty("outboundDeliveryStrategy").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_CreateConversation_AllParameters_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                conversation = new
                {
                    topic = "<topic>",
                    deliveryChannelIds = new object[]
            {
"<deliveryChannelIds>"
            },
                    outboundDeliveryStrategy = "internalOnly",
                    participants = new object[]
            {
new
{
kind = "internal",
contact = new
{
kind = "communication",
id = "<id>",
},
displayName = "<displayName>",
}
            },
                },
                initialMessage = new
                {
                    content = "<content>",
                },
            });
            Response response = await client.CreateConversationAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("topic").ToString());
            Console.WriteLine(result.GetProperty("deliveryChannelIds")[0].ToString());
            Console.WriteLine(result.GetProperty("outboundDeliveryStrategy").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_CreateConversation_AllParameters_Convenience()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            CommunicationConversation conversation = new CommunicationConversation
            {
                Topic = "<topic>",
                DeliveryChannelIds = { "<deliveryChannelIds>" },
                OutboundDeliveryStrategy = OutboundDeliveryStrategyKind.InternalOnly,
                Participants = {new InternalConversationParticipant(new CommunicationContact("<id>"))
{
DisplayName = "<displayName>",
}},
            };
            ConversationMessage initialMessage = new ConversationMessage("<content>");
            Response<CommunicationConversation> response = client.CreateConversation(conversation, initialMessage: initialMessage);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_CreateConversation_AllParameters_Convenience_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            CommunicationConversation conversation = new CommunicationConversation
            {
                Topic = "<topic>",
                DeliveryChannelIds = { "<deliveryChannelIds>" },
                OutboundDeliveryStrategy = OutboundDeliveryStrategyKind.InternalOnly,
                Participants = {new InternalConversationParticipant(new CommunicationContact("<id>"))
{
DisplayName = "<displayName>",
}},
            };
            ConversationMessage initialMessage = new ConversationMessage("<content>");
            Response<CommunicationConversation> response = await client.CreateConversationAsync(conversation, initialMessage: initialMessage);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_GetConversation_ShortVersion()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = client.GetConversation("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_GetConversation_ShortVersion_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = await client.GetConversationAsync("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_GetConversation_ShortVersion_Convenience()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response<CommunicationConversation> response = client.GetConversation("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_GetConversation_ShortVersion_Convenience_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response<CommunicationConversation> response = await client.GetConversationAsync("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_GetConversation_AllParameters()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = client.GetConversation("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("topic").ToString());
            Console.WriteLine(result.GetProperty("deliveryChannelIds")[0].ToString());
            Console.WriteLine(result.GetProperty("outboundDeliveryStrategy").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_GetConversation_AllParameters_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = await client.GetConversationAsync("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("topic").ToString());
            Console.WriteLine(result.GetProperty("deliveryChannelIds")[0].ToString());
            Console.WriteLine(result.GetProperty("outboundDeliveryStrategy").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("participants")[0].GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_GetConversation_AllParameters_Convenience()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response<CommunicationConversation> response = client.GetConversation("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_GetConversation_AllParameters_Convenience_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response<CommunicationConversation> response = await client.GetConversationAsync("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_DeleteConversation_ShortVersion()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = client.DeleteConversation("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_DeleteConversation_ShortVersion_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = await client.DeleteConversationAsync("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_DeleteConversation_AllParameters()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = client.DeleteConversation("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_DeleteConversation_AllParameters_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = await client.DeleteConversationAsync("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationAdministrationClient_TerminateConversation_ShortVersion()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = client.TerminateConversation("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationAdministrationClient_TerminateConversation_ShortVersion_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = await client.TerminateConversationAsync("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationAdministrationClient_TerminateConversation_AllParameters()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = client.TerminateConversation("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationAdministrationClient_TerminateConversation_AllParameters_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = await client.TerminateConversationAsync("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationAdministrationClient_AddParticipants_AddsParticipantsToASpecificConversation()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participants = new object[]
            {
new
{
displayName = "Customer",
kind = "external",
contacts = new object[]
{
new
{
id = "12345678901",
kind = "whatsApp",
}
},
},
new
{
displayName = "Support",
kind = "internal",
contact = new
{
id = "8:acs:uuid1",
kind = "communication",
},
}
            },
            });
            Response response = client.AddParticipants("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationAdministrationClient_AddParticipants_AddsParticipantsToASpecificConversation_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participants = new object[]
            {
new
{
displayName = "Customer",
kind = "external",
contacts = new object[]
{
new
{
id = "12345678901",
kind = "whatsApp",
}
},
},
new
{
displayName = "Support",
kind = "internal",
contact = new
{
id = "8:acs:uuid1",
kind = "communication",
},
}
            },
            });
            Response response = await client.AddParticipantsAsync("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationAdministrationClient_AddParticipants_AddsParticipantsToASpecificConversation_Convenience()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            AddParticipantsOptions options = new AddParticipantsOptions(new ConversationParticipant[]
            {
new ExternalConversationParticipant(new ConversationContact[]
{
new WhatsAppContact("12345678901")
})
{
DisplayName = "Customer",
},
new InternalConversationParticipant(new CommunicationContact("8:acs:uuid1"))
{
DisplayName = "Support",
}
            });
            Response<AddParticipantsResult> response = client.AddParticipants("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationAdministrationClient_AddParticipants_AddsParticipantsToASpecificConversation_Convenience_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            AddParticipantsOptions options = new AddParticipantsOptions(new ConversationParticipant[]
            {
new ExternalConversationParticipant(new ConversationContact[]
{
new WhatsAppContact("12345678901")
})
{
DisplayName = "Customer",
},
new InternalConversationParticipant(new CommunicationContact("8:acs:uuid1"))
{
DisplayName = "Support",
}
            });
            Response<AddParticipantsResult> response = await client.AddParticipantsAsync("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationAdministrationClient_RemoveParticipants_RemoveAParticipantFromAConversation()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participantIds = new object[]
            {
"8:acs:uuid2"
            },
            });
            Response response = client.RemoveParticipants("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationAdministrationClient_RemoveParticipants_RemoveAParticipantFromAConversation_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participantIds = new object[]
            {
"8:acs:uuid2"
            },
            });
            Response response = await client.RemoveParticipantsAsync("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationAdministrationClient_RemoveParticipants_RemoveAParticipantFromAConversation_Convenience()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            RemoveParticipantsOptions options = new RemoveParticipantsOptions(new string[] { "8:acs:uuid2" });
            Response<RemoveParticipantsResult> response = client.RemoveParticipants("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationAdministrationClient_RemoveParticipants_RemoveAParticipantFromAConversation_Convenience_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            RemoveParticipantsOptions options = new RemoveParticipantsOptions(new string[] { "8:acs:uuid2" });
            Response<RemoveParticipantsResult> response = await client.RemoveParticipantsAsync("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationAdministrationClient_AnalyzeConversation_GetAIAnalysisOfAConversation()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = client.AnalyzeConversation("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationAdministrationClient_AnalyzeConversation_GetAIAnalysisOfAConversation_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response response = await client.AnalyzeConversationAsync("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationAdministrationClient_AnalyzeConversation_GetAIAnalysisOfAConversation_Convenience()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response<GetConversationThreadAnalysisResult> response = client.AnalyzeConversation("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationAdministrationClient_AnalyzeConversation_GetAIAnalysisOfAConversation_Convenience_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            Response<GetConversationThreadAnalysisResult> response = await client.AnalyzeConversationAsync("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_GetConversations_RetrievesListOfConversations()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            foreach (BinaryData item in client.GetConversations(25, null, Guid.Parse("0f0eb78e-a576-1dfc-b414-0f0756de3338"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_GetConversations_RetrievesListOfConversations_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            await foreach (BinaryData item in client.GetConversationsAsync(25, null, Guid.Parse("0f0eb78e-a576-1dfc-b414-0f0756de3338"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_GetConversations_RetrievesListOfConversations_Convenience()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            foreach (CommunicationConversation item in client.GetConversations())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_GetConversations_RetrievesListOfConversations_Convenience_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            await foreach (CommunicationConversation item in client.GetConversationsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessageItem_GetMessages_RetrievesListOfConversationMessages()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            foreach (BinaryData item in client.GetMessages("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("message").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("senderCommunicationIdentifier").ToString());
                Console.WriteLine(result.GetProperty("createdOn").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessageItem_GetMessages_RetrievesListOfConversationMessages_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            await foreach (BinaryData item in client.GetMessagesAsync("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("message").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("senderCommunicationIdentifier").ToString());
                Console.WriteLine(result.GetProperty("createdOn").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessageItem_GetMessages_RetrievesListOfConversationMessages_Convenience()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            foreach (ConversationMessageItem item in client.GetMessages("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessageItem_GetMessages_RetrievesListOfConversationMessages_Convenience_Async()
        {
            ConversationAdministrationClient client = new ConversationAdministrationClient((string)null);

            await foreach (ConversationMessageItem item in client.GetMessagesAsync("19:34adfa4f-cedf-4dc0-ba29-b6d1a69ab345@thread.v2"))
            {
            }
        }
    }
}
