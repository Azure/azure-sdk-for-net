// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Communication.Messages.Samples
{
    public partial class Samples_ConversationMessagesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_AddParticipants_ShortVersion()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participants = new object[]
            {
new
{
kind = "internal",
contact = new
{
kind = "communication",
id = "<id>",
},
}
            },
            });
            Response response = client.AddParticipants("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_AddParticipants_ShortVersion_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participants = new object[]
            {
new
{
kind = "internal",
contact = new
{
kind = "communication",
id = "<id>",
},
}
            },
            });
            Response response = await client.AddParticipantsAsync("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_AddParticipants_ShortVersion_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            AddParticipantsRequest body = new AddParticipantsRequest(new Participant[]
            {
new InternalParticipant(new CommunicationContact("<id>"))
            });
            Response<AddParticipantsResult> response = client.AddParticipants("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_AddParticipants_ShortVersion_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            AddParticipantsRequest body = new AddParticipantsRequest(new Participant[]
            {
new InternalParticipant(new CommunicationContact("<id>"))
            });
            Response<AddParticipantsResult> response = await client.AddParticipantsAsync("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_AddParticipants_AllParameters()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participants = new object[]
            {
new
{
kind = "internal",
contact = new
{
kind = "communication",
id = "<id>",
},
displayName = "<displayName>",
}
            },
            });
            Response response = client.AddParticipants("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_AddParticipants_AllParameters_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participants = new object[]
            {
new
{
kind = "internal",
contact = new
{
kind = "communication",
id = "<id>",
},
displayName = "<displayName>",
}
            },
            });
            Response response = await client.AddParticipantsAsync("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_AddParticipants_AllParameters_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            AddParticipantsRequest body = new AddParticipantsRequest(new Participant[]
            {
new InternalParticipant(new CommunicationContact("<id>"))
{
DisplayName = "<displayName>",
}
            });
            Response<AddParticipantsResult> response = client.AddParticipants("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_AddParticipants_AllParameters_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            AddParticipantsRequest body = new AddParticipantsRequest(new Participant[]
            {
new InternalParticipant(new CommunicationContact("<id>"))
{
DisplayName = "<displayName>",
}
            });
            Response<AddParticipantsResult> response = await client.AddParticipantsAsync("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_RemoveParticipants_ShortVersion()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participantIds = new object[]
            {
"<participantIds>"
            },
            });
            Response response = client.RemoveParticipants("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_RemoveParticipants_ShortVersion_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participantIds = new object[]
            {
"<participantIds>"
            },
            });
            Response response = await client.RemoveParticipantsAsync("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_RemoveParticipants_ShortVersion_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            RemoveParticipantsRequest body = new RemoveParticipantsRequest(new string[] { "<participantIds>" });
            Response<RemoveParticipantsResult> response = client.RemoveParticipants("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_RemoveParticipants_ShortVersion_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            RemoveParticipantsRequest body = new RemoveParticipantsRequest(new string[] { "<participantIds>" });
            Response<RemoveParticipantsResult> response = await client.RemoveParticipantsAsync("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_RemoveParticipants_AllParameters()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participantIds = new object[]
            {
"<participantIds>"
            },
            });
            Response response = client.RemoveParticipants("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_RemoveParticipants_AllParameters_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                participantIds = new object[]
            {
"<participantIds>"
            },
            });
            Response response = await client.RemoveParticipantsAsync("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("invalidParticipants")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_RemoveParticipants_AllParameters_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            RemoveParticipantsRequest body = new RemoveParticipantsRequest(new string[] { "<participantIds>" });
            Response<RemoveParticipantsResult> response = client.RemoveParticipants("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_RemoveParticipants_AllParameters_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            RemoveParticipantsRequest body = new RemoveParticipantsRequest(new string[] { "<participantIds>" });
            Response<RemoveParticipantsResult> response = await client.RemoveParticipantsAsync("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_SendMessage_ShortVersion()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                request = new
                {
                    kind = "text",
                    content = "<content>",
                },
            });
            Response response = client.SendMessage("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("messageId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_SendMessage_ShortVersion_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                request = new
                {
                    kind = "text",
                    content = "<content>",
                },
            });
            Response response = await client.SendMessageAsync("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("messageId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_SendMessage_ShortVersion_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            SendConversationMessageRequest body = new SendConversationMessageRequest(new TextConversationMessageContent("<content>"));
            Response<SendConversationMessageResult> response = client.SendMessage("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_SendMessage_ShortVersion_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            SendConversationMessageRequest body = new SendConversationMessageRequest(new TextConversationMessageContent("<content>"));
            Response<SendConversationMessageResult> response = await client.SendMessageAsync("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_SendMessage_AllParameters()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                request = new
                {
                    kind = "text",
                    content = "<content>",
                },
                outboundDeliveryStrategy = "internalOnly",
            });
            Response response = client.SendMessage("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("messageId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_SendMessage_AllParameters_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            using RequestContent content = RequestContent.Create(new
            {
                request = new
                {
                    kind = "text",
                    content = "<content>",
                },
                outboundDeliveryStrategy = "internalOnly",
            });
            Response response = await client.SendMessageAsync("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("messageId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_SendMessage_AllParameters_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            SendConversationMessageRequest body = new SendConversationMessageRequest(new TextConversationMessageContent("<content>"))
            {
                OutboundDeliveryStrategy = OutboundDeliveryStrategyKind.InternalOnly,
            };
            Response<SendConversationMessageResult> response = client.SendMessage("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_SendMessage_AllParameters_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            SendConversationMessageRequest body = new SendConversationMessageRequest(new TextConversationMessageContent("<content>"))
            {
                OutboundDeliveryStrategy = OutboundDeliveryStrategyKind.InternalOnly,
            };
            Response<SendConversationMessageResult> response = await client.SendMessageAsync("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_AnalyzeConversation_ShortVersion()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            Response response = client.AnalyzeConversation("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_AnalyzeConversation_ShortVersion_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            Response response = await client.AnalyzeConversationAsync("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_AnalyzeConversation_ShortVersion_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            Response<GetConversationMessagesAnalysisResult> response = client.AnalyzeConversation("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_AnalyzeConversation_ShortVersion_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            Response<GetConversationMessagesAnalysisResult> response = await client.AnalyzeConversationAsync("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_AnalyzeConversation_AllParameters()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            Response response = client.AnalyzeConversation("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_AnalyzeConversation_AllParameters_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            Response response = await client.AnalyzeConversationAsync("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessagesClient_AnalyzeConversation_AllParameters_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            Response<GetConversationMessagesAnalysisResult> response = client.AnalyzeConversation("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessagesClient_AnalyzeConversation_AllParameters_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            Response<GetConversationMessagesAnalysisResult> response = await client.AnalyzeConversationAsync("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_GetConversations_ShortVersion()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            foreach (BinaryData item in client.GetConversations(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_GetConversations_ShortVersion_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            await foreach (BinaryData item in client.GetConversationsAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_GetConversations_ShortVersion_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            foreach (Conversation item in client.GetConversations())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_GetConversations_ShortVersion_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            await foreach (Conversation item in client.GetConversationsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_GetConversations_AllParameters()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            foreach (BinaryData item in client.GetConversations(1234, "<participantId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("topic").ToString());
                Console.WriteLine(result.GetProperty("deliveryChannelIds")[0].ToString());
                Console.WriteLine(result.GetProperty("outboundDeliveryStrategy").ToString());
                Console.WriteLine(result.GetProperty("participants")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("participants")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("participants")[0].GetProperty("kind").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_GetConversations_AllParameters_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            await foreach (BinaryData item in client.GetConversationsAsync(1234, "<participantId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("topic").ToString());
                Console.WriteLine(result.GetProperty("deliveryChannelIds")[0].ToString());
                Console.WriteLine(result.GetProperty("outboundDeliveryStrategy").ToString());
                Console.WriteLine(result.GetProperty("participants")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("participants")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("participants")[0].GetProperty("kind").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversation_GetConversations_AllParameters_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            foreach (Conversation item in client.GetConversations(maxpagesize: 1234, participantId: "<participantId>", channelId: Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversation_GetConversations_AllParameters_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            await foreach (Conversation item in client.GetConversationsAsync(maxpagesize: 1234, participantId: "<participantId>", channelId: Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessageItem_GetMessages_ShortVersion()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            foreach (BinaryData item in client.GetMessages("<conversationId>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("message").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("senderCommunicationIdentifier").ToString());
                Console.WriteLine(result.GetProperty("createdOn").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessageItem_GetMessages_ShortVersion_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            await foreach (BinaryData item in client.GetMessagesAsync("<conversationId>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("message").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("senderCommunicationIdentifier").ToString());
                Console.WriteLine(result.GetProperty("createdOn").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessageItem_GetMessages_ShortVersion_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            foreach (ConversationMessageItem item in client.GetMessages("<conversationId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessageItem_GetMessages_ShortVersion_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            await foreach (ConversationMessageItem item in client.GetMessagesAsync("<conversationId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessageItem_GetMessages_AllParameters()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            foreach (BinaryData item in client.GetMessages("<conversationId>", 1234, "<participantId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("sequenceId").ToString());
                Console.WriteLine(result.GetProperty("message").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("senderDisplayName").ToString());
                Console.WriteLine(result.GetProperty("senderCommunicationIdentifier").ToString());
                Console.WriteLine(result.GetProperty("createdOn").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessageItem_GetMessages_AllParameters_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            await foreach (BinaryData item in client.GetMessagesAsync("<conversationId>", 1234, "<participantId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("sequenceId").ToString());
                Console.WriteLine(result.GetProperty("message").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("senderDisplayName").ToString());
                Console.WriteLine(result.GetProperty("senderCommunicationIdentifier").ToString());
                Console.WriteLine(result.GetProperty("createdOn").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConversationMessageItem_GetMessages_AllParameters_Convenience()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            foreach (ConversationMessageItem item in client.GetMessages("<conversationId>", maxpagesize: 1234, participantId: "<participantId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConversationMessageItem_GetMessages_AllParameters_Convenience_Async()
        {
            ConversationMessagesClient client = new ConversationMessagesClient((string)null);

            await foreach (ConversationMessageItem item in client.GetMessagesAsync("<conversationId>", maxpagesize: 1234, participantId: "<participantId>"))
            {
            }
        }
    }
}
