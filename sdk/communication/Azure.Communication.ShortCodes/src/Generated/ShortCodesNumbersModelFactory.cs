// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Communication.ShortCodes.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ShortCodesNumbersModelFactory
    {
        /// <summary> Initializes a new instance of ShortCode. </summary>
        /// <param name="number"> The value of the ShortCode or the alpha numeric e.g. &apos;555555&apos;, &apos;CONTOSO&apos;, etc. </param>
        /// <param name="numberType"> The type of number e.g. &apos;ShortCode&apos;, &apos;AlphaId&apos;. </param>
        /// <param name="countryCode"> ISO 3166 2-char code representing the country e.g. &apos;US&apos;. </param>
        /// <param name="programBriefIds"> Program Brief Name. </param>
        /// <param name="purchaseDate"> Date in which number was purchased. </param>
        /// <returns> A new <see cref="Models.ShortCode"/> instance for mocking. </returns>
        public static ShortCode ShortCode(string number = null, NumberType? numberType = null, string countryCode = null, IEnumerable<string> programBriefIds = null, DateTimeOffset? purchaseDate = null)
        {
            programBriefIds ??= new List<string>();

            return new ShortCode(number, numberType, countryCode, programBriefIds?.ToList(), purchaseDate);
        }

        /// <summary> Initializes a new instance of USProgramBrief. </summary>
        /// <param name="id"> Program Brief Id. </param>
        /// <param name="status"> Program Brief status e.g. &apos;submitted&apos;, &apos;approved&apos;, etc. </param>
        /// <param name="number"> Number provisioned for the Program Brief e.g. 555555, &apos;CONTOSO&apos;. </param>
        /// <param name="reviewNotes">
        /// Notes added to the Program Brief after being reviewed to help customer understand
        /// review results and necessary follow up actions.
        /// </param>
        /// <param name="costs"> Represents the costs tied to the number. </param>
        /// <param name="submissionDate"> Date and time when the Program Brief was submitted. </param>
        /// <param name="statusUpdatedDate"> Last date and time when the Program Brief status was updated. </param>
        /// <param name="programDetails"> ProgramDetails. </param>
        /// <param name="companyInformation"> CompanyInformation. </param>
        /// <param name="messageDetails"> MessageDetails. </param>
        /// <param name="trafficDetails"> TrafficDetails. </param>
        /// <returns> A new <see cref="Models.USProgramBrief"/> instance for mocking. </returns>
        public static USProgramBrief USProgramBrief(Guid id = default, ProgramBriefStatus? status = null, string number = null, IEnumerable<ReviewNote> reviewNotes = null, IEnumerable<ShortCodeCost> costs = null, DateTimeOffset? submissionDate = null, DateTimeOffset? statusUpdatedDate = null, ProgramDetails programDetails = null, CompanyInformation companyInformation = null, MessageDetails messageDetails = null, TrafficDetails trafficDetails = null)
        {
            reviewNotes ??= new List<ReviewNote>();
            costs ??= new List<ShortCodeCost>();

            return new USProgramBrief(id, status, number, reviewNotes?.ToList(), costs?.ToList(), submissionDate, statusUpdatedDate, programDetails, companyInformation, messageDetails, trafficDetails);
        }

        /// <summary> Initializes a new instance of ReviewNote. </summary>
        /// <param name="message"> Note related to a Program Brief that may imply changes needed from the client. </param>
        /// <param name="date"> Date and time when the note was added to the Program Brief. </param>
        /// <returns> A new <see cref="Models.ReviewNote"/> instance for mocking. </returns>
        public static ReviewNote ReviewNote(string message = null, DateTimeOffset? date = null)
        {
            return new ReviewNote(message, date);
        }

        /// <summary> Initializes a new instance of ProgramDetails. </summary>
        /// <param name="isVanity"> Set to true if the request is for a vanity number. </param>
        /// <param name="preferredVanityNumbers">
        /// Priority ordered list of preferred vanity numbers.
        /// Vanity numbers should be 5 or 6 digit when number type is ShortCode.
        /// e.g. 555555, 222222.
        /// </param>
        /// <param name="numberType"> Type for desired numbers e.g. &apos;shortCode&apos; or &apos;alphaId&apos;. </param>
        /// <param name="isPoliticalCampaign"> Indicates whether the number will be used for political campaigns or not. </param>
        /// <param name="name">
        /// A program name that indicates the purpose of filling the Program Brief and how the number will be used for messaging.
        /// e.g. &apos;CONTOSO Shipping&apos;
        /// </param>
        /// <param name="description"> Describes how and why the number will be used for messaging as part of the program. </param>
        /// <param name="url"> URL for the program or company. </param>
        /// <param name="signUpTypes"> Indicates how the consumer can sign up to the program e.g. &apos;website&apos;, &apos;pointOfSale&apos; and/or &apos;sms&apos;. </param>
        /// <param name="signUpUrl"> URL for &quot;call to action&quot; image for the program. </param>
        /// <param name="termsOfServiceUrl"> URL for program terms of service. </param>
        /// <param name="privacyPolicyUrl"> URL for privacy policy. </param>
        /// <param name="expectedDateOfService">
        /// Date in which SMS messages will start to be sent out.
        /// Should follow ISO 8601 internet format for datetimes.
        /// e.g. 2021-08-17T22:02:51.316Z, 2021-08-17T16:39:57-08:00, etc.
        /// </param>
        /// <returns> A new <see cref="Models.ProgramDetails"/> instance for mocking. </returns>
        public static ProgramDetails ProgramDetails(bool? isVanity = null, IEnumerable<string> preferredVanityNumbers = null, NumberType? numberType = null, bool? isPoliticalCampaign = null, string name = null, string description = null, Uri url = null, IEnumerable<ProgramSignUpType> signUpTypes = null, Uri signUpUrl = null, Uri termsOfServiceUrl = null, Uri privacyPolicyUrl = null, DateTimeOffset? expectedDateOfService = null)
        {
            preferredVanityNumbers ??= new List<string>();
            signUpTypes ??= new List<ProgramSignUpType>();

            return new ProgramDetails(isVanity, preferredVanityNumbers?.ToList(), numberType, isPoliticalCampaign, name, description, url, signUpTypes?.ToList(), signUpUrl, termsOfServiceUrl, privacyPolicyUrl, expectedDateOfService);
        }

        /// <summary> Initializes a new instance of CompanyInformation. </summary>
        /// <param name="name"> Legal entity name for customer submitting Program Brief. </param>
        /// <param name="url"> Company URL for customer submitting Program Brief. </param>
        /// <param name="address"> Company&apos;s address for the customer submitting the Program Brief. </param>
        /// <param name="contactInformation"> Contact Information. </param>
        /// <param name="customerCareInformation"> Customer Care Information. </param>
        /// <returns> A new <see cref="Models.CompanyInformation"/> instance for mocking. </returns>
        public static CompanyInformation CompanyInformation(string name = null, Uri url = null, string address = null, ContactInformation contactInformation = null, CustomerCareInformation customerCareInformation = null)
        {
            return new CompanyInformation(name, url, address, contactInformation, customerCareInformation);
        }

        /// <summary> Initializes a new instance of ContactInformation. </summary>
        /// <param name="name"> Name of authorized user for purposes of submitting the Program Brief. </param>
        /// <param name="phone"> Contact phone number for the authorized user for the customer. Use E164 format. e.g. +14086111111. </param>
        /// <param name="email"> Contact email address number for the authorized user for the customer. </param>
        /// <returns> A new <see cref="Models.ContactInformation"/> instance for mocking. </returns>
        public static ContactInformation ContactInformation(string name = null, string phone = null, string email = null)
        {
            return new ContactInformation(name, phone, email);
        }

        /// <summary> Initializes a new instance of CustomerCareInformation. </summary>
        /// <param name="tollFreeNumber"> Customer support phone number for the customer submitting the Program Brief. Use E164 format. e.g. +18005551212. </param>
        /// <param name="email"> Customer support email address for the customer submitting the Program Brief. </param>
        /// <returns> A new <see cref="Models.CustomerCareInformation"/> instance for mocking. </returns>
        public static CustomerCareInformation CustomerCareInformation(string tollFreeNumber = null, string email = null)
        {
            return new CustomerCareInformation(tollFreeNumber, email);
        }

        /// <summary> Initializes a new instance of MessageDetails. </summary>
        /// <param name="supportedProtocols"> Applicable message protocols used in the program e.g. SMS, MMS. </param>
        /// <param name="recurrence"> Indicates the nature of the messaging associated with the program e.g. &apos;subscription&apos;, &apos;transaction&apos;. </param>
        /// <param name="helpMessage">
        /// Message text for mobile terminated message associated with HELP keyword
        /// e.g &apos;This is the HELP message test.&apos;.
        /// </param>
        /// <param name="optOutMessage">
        /// &quot;Message text for mobile terminated message associated with STOP keyword
        /// e.g. &apos;This is the STOP message test.&apos;.
        /// </param>
        /// <param name="optInMessage"> OptInMessage. </param>
        /// <param name="optInReply"> Keyword used to confirm double Opt-In method e.g. &apos;JOIN&apos;. </param>
        /// <param name="confirmationMessage"> ConfirmationMessage. </param>
        /// <param name="directionality"> Describes directionality e.g. oneWay or twoWay. </param>
        /// <param name="useCases"> Provides message exchange examples from and to end user for each supported message content type. </param>
        /// <returns> A new <see cref="Models.MessageDetails"/> instance for mocking. </returns>
        public static MessageDetails MessageDetails(IEnumerable<MessageProtocol> supportedProtocols = null, MessageRecurrence? recurrence = null, string helpMessage = null, string optOutMessage = null, string optInMessage = null, string optInReply = null, string confirmationMessage = null, MessageDirectionality? directionality = null, IEnumerable<UseCase> useCases = null)
        {
            supportedProtocols ??= new List<MessageProtocol>();
            useCases ??= new List<UseCase>();

            return new MessageDetails(supportedProtocols?.ToList(), recurrence, helpMessage, optOutMessage, optInMessage, optInReply, confirmationMessage, directionality, useCases?.ToList());
        }

        /// <summary> Initializes a new instance of UseCase. </summary>
        /// <param name="contentCategory"> Indicates the messaging content category used in the program e.g. &apos;ringTones&apos;, &apos;smsChat&apos;, &apos;video&apos;, &apos;loyaltyProgramPointsPrizes&apos;, &apos;gifting&apos;, &apos;inApplicationBilling&apos;, &apos;textToScreen&apos;. </param>
        /// <param name="examples"> Example messages to be sent to and from the end user for the indicated content type. </param>
        /// <returns> A new <see cref="Models.UseCase"/> instance for mocking. </returns>
        public static UseCase UseCase(MessageContentCategory? contentCategory = null, IEnumerable<MessageExampleSequence> examples = null)
        {
            examples ??= new List<MessageExampleSequence>();

            return new UseCase(contentCategory, examples?.ToList());
        }

        /// <summary> Initializes a new instance of MessageExampleSequence. </summary>
        /// <param name="messages"> Example messages to be sent to and from the end user. </param>
        /// <returns> A new <see cref="Models.MessageExampleSequence"/> instance for mocking. </returns>
        public static MessageExampleSequence MessageExampleSequence(IEnumerable<MessageExample> messages = null)
        {
            messages ??= new List<MessageExample>();

            return new MessageExampleSequence(messages?.ToList());
        }

        /// <summary> Initializes a new instance of MessageExample. </summary>
        /// <param name="direction"> Indicates whether the message example is supposed to be sent to or from the end user e.g. toUser. </param>
        /// <param name="text"> Actual example text for the message e.g. &apos;Want me to notify you when package in the way?&apos;. </param>
        /// <returns> A new <see cref="Models.MessageExample"/> instance for mocking. </returns>
        public static MessageExample MessageExample(MessageDirection? direction = null, string text = null)
        {
            return new MessageExample(direction, text);
        }

        /// <summary> Initializes a new instance of TrafficDetails. </summary>
        /// <param name="totalMonthlyVolume"> Estimated total messages per month. </param>
        /// <param name="monthlyAverageMessagesFromUser"> Estimated number of Mobile-Originated messages likely to be received from a user per month. </param>
        /// <param name="monthlyAverageMessagesToUser"> Estimated number of Mobile-Terminated messages likely to be sent per user per month. </param>
        /// <param name="isSpiky"> Indicates if the nature of the messaging traffic will be bursty. </param>
        /// <param name="spikeDetails">
        /// If isSpiky=true, then explain additional details about the traffic pattern
        /// e.g. &apos;Higher traffic expected during holiday season and Black Friday.&apos;.
        /// </param>
        /// <param name="estimatedRampUpTimeInDays"> Numbers of days in which is expected to start sending messages from the short code. </param>
        /// <returns> A new <see cref="Models.TrafficDetails"/> instance for mocking. </returns>
        public static TrafficDetails TrafficDetails(int? totalMonthlyVolume = null, int? monthlyAverageMessagesFromUser = null, int? monthlyAverageMessagesToUser = null, bool? isSpiky = null, string spikeDetails = null, int? estimatedRampUpTimeInDays = null)
        {
            return new TrafficDetails(totalMonthlyVolume, monthlyAverageMessagesFromUser, monthlyAverageMessagesToUser, isSpiky, spikeDetails, estimatedRampUpTimeInDays);
        }
    }
}
