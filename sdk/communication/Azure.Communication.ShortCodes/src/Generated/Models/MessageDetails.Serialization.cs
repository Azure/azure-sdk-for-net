// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.ShortCodes.Models
{
    public partial class MessageDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(SupportedProtocols))
            {
                writer.WritePropertyName("supportedProtocols");
                writer.WriteStartArray();
                foreach (var item in SupportedProtocols)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Recurrence))
            {
                writer.WritePropertyName("recurrence");
                writer.WriteStringValue(Recurrence.Value.ToString());
            }
            if (Optional.IsDefined(HelpMessage))
            {
                writer.WritePropertyName("helpMessage");
                writer.WriteStringValue(HelpMessage);
            }
            if (Optional.IsDefined(OptOutMessage))
            {
                writer.WritePropertyName("optOutMessage");
                writer.WriteStringValue(OptOutMessage);
            }
            if (Optional.IsDefined(OptInMessage))
            {
                writer.WritePropertyName("optInMessage");
                writer.WriteStringValue(OptInMessage);
            }
            if (Optional.IsDefined(OptInReply))
            {
                writer.WritePropertyName("optInReply");
                writer.WriteStringValue(OptInReply);
            }
            if (Optional.IsDefined(ConfirmationMessage))
            {
                writer.WritePropertyName("confirmationMessage");
                writer.WriteStringValue(ConfirmationMessage);
            }
            if (Optional.IsDefined(Directionality))
            {
                writer.WritePropertyName("directionality");
                writer.WriteStringValue(Directionality.Value.ToString());
            }
            if (Optional.IsCollectionDefined(UseCases))
            {
                writer.WritePropertyName("useCases");
                writer.WriteStartArray();
                foreach (var item in UseCases)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static MessageDetails DeserializeMessageDetails(JsonElement element)
        {
            Optional<IList<MessageProtocol>> supportedProtocols = default;
            Optional<MessageRecurrence> recurrence = default;
            Optional<string> helpMessage = default;
            Optional<string> optOutMessage = default;
            Optional<string> optInMessage = default;
            Optional<string> optInReply = default;
            Optional<string> confirmationMessage = default;
            Optional<MessageDirectionality> directionality = default;
            Optional<IList<UseCase>> useCases = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("supportedProtocols"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MessageProtocol> array = new List<MessageProtocol>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new MessageProtocol(item.GetString()));
                    }
                    supportedProtocols = array;
                    continue;
                }
                if (property.NameEquals("recurrence"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recurrence = new MessageRecurrence(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("helpMessage"))
                {
                    helpMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optOutMessage"))
                {
                    optOutMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optInMessage"))
                {
                    optInMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optInReply"))
                {
                    optInReply = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("confirmationMessage"))
                {
                    confirmationMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("directionality"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    directionality = new MessageDirectionality(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("useCases"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<UseCase> array = new List<UseCase>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(UseCase.DeserializeUseCase(item));
                    }
                    useCases = array;
                    continue;
                }
            }
            return new MessageDetails(Optional.ToList(supportedProtocols), Optional.ToNullable(recurrence), helpMessage.Value, optOutMessage.Value, optInMessage.Value, optInReply.Value, confirmationMessage.Value, Optional.ToNullable(directionality), Optional.ToList(useCases));
        }
    }
}
