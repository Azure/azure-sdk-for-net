// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.ShortCodes.Models
{
    public partial class TrafficDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TotalMonthlyVolume))
            {
                writer.WritePropertyName("totalMonthlyVolume");
                writer.WriteNumberValue(TotalMonthlyVolume.Value);
            }
            if (Optional.IsDefined(MonthlyAverageMessagesFromUser))
            {
                writer.WritePropertyName("monthlyAverageMessagesFromUser");
                writer.WriteNumberValue(MonthlyAverageMessagesFromUser.Value);
            }
            if (Optional.IsDefined(MonthlyAverageMessagesToUser))
            {
                writer.WritePropertyName("monthlyAverageMessagesToUser");
                writer.WriteNumberValue(MonthlyAverageMessagesToUser.Value);
            }
            if (Optional.IsDefined(IsSpiky))
            {
                writer.WritePropertyName("isSpiky");
                writer.WriteBooleanValue(IsSpiky.Value);
            }
            if (Optional.IsDefined(SpikeDetails))
            {
                writer.WritePropertyName("spikeDetails");
                writer.WriteStringValue(SpikeDetails);
            }
            if (Optional.IsDefined(EstimatedRampUpTimeInDays))
            {
                writer.WritePropertyName("estimatedRampUpTimeInDays");
                writer.WriteNumberValue(EstimatedRampUpTimeInDays.Value);
            }
            writer.WriteEndObject();
        }

        internal static TrafficDetails DeserializeTrafficDetails(JsonElement element)
        {
            Optional<int> totalMonthlyVolume = default;
            Optional<int> monthlyAverageMessagesFromUser = default;
            Optional<int> monthlyAverageMessagesToUser = default;
            Optional<bool> isSpiky = default;
            Optional<string> spikeDetails = default;
            Optional<int> estimatedRampUpTimeInDays = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("totalMonthlyVolume"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalMonthlyVolume = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("monthlyAverageMessagesFromUser"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyAverageMessagesFromUser = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("monthlyAverageMessagesToUser"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyAverageMessagesToUser = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isSpiky"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isSpiky = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("spikeDetails"))
                {
                    spikeDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("estimatedRampUpTimeInDays"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    estimatedRampUpTimeInDays = property.Value.GetInt32();
                    continue;
                }
            }
            return new TrafficDetails(Optional.ToNullable(totalMonthlyVolume), Optional.ToNullable(monthlyAverageMessagesFromUser), Optional.ToNullable(monthlyAverageMessagesToUser), Optional.ToNullable(isSpiky), spikeDetails.Value, Optional.ToNullable(estimatedRampUpTimeInDays));
        }
    }
}
