// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Communication.ShortCodes.Models
{
    /// <summary> The incurred cost for a single short code. </summary>
    public partial class ShortCodeCost
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ShortCodeCost"/>. </summary>
        /// <param name="amount"> The cost amount. </param>
        /// <param name="currencyCode"> The ISO 4217 currency code for the cost amount, e.g. USD. </param>
        /// <param name="billingFrequency"> The frequency with which the cost gets billed. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="currencyCode"/> is null. </exception>
        public ShortCodeCost(double amount, string currencyCode, BillingFrequency billingFrequency)
        {
            Argument.AssertNotNull(currencyCode, nameof(currencyCode));

            Amount = amount;
            CurrencyCode = currencyCode;
            BillingFrequency = billingFrequency;
        }

        /// <summary> Initializes a new instance of <see cref="ShortCodeCost"/>. </summary>
        /// <param name="amount"> The cost amount. </param>
        /// <param name="currencyCode"> The ISO 4217 currency code for the cost amount, e.g. USD. </param>
        /// <param name="billingFrequency"> The frequency with which the cost gets billed. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ShortCodeCost(double amount, string currencyCode, BillingFrequency billingFrequency, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Amount = amount;
            CurrencyCode = currencyCode;
            BillingFrequency = billingFrequency;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ShortCodeCost"/> for deserialization. </summary>
        internal ShortCodeCost()
        {
        }

        /// <summary> The cost amount. </summary>
        public double Amount { get; set; }
        /// <summary> The ISO 4217 currency code for the cost amount, e.g. USD. </summary>
        public string CurrencyCode { get; set; }
        /// <summary> The frequency with which the cost gets billed. </summary>
        public BillingFrequency BillingFrequency { get; set; }
    }
}
