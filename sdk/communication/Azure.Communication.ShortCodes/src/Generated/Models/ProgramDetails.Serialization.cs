// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Communication.ShortCodes.Models
{
    public partial class ProgramDetails : IUtf8JsonSerializable, IModelJsonSerializable<ProgramDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ProgramDetails>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ProgramDetails>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ProgramDetails>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(IsVanity))
            {
                writer.WritePropertyName("isVanity"u8);
                writer.WriteBooleanValue(IsVanity.Value);
            }
            if (Optional.IsCollectionDefined(PreferredVanityNumbers))
            {
                writer.WritePropertyName("preferredVanityNumbers"u8);
                writer.WriteStartArray();
                foreach (var item in PreferredVanityNumbers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(NumberType))
            {
                writer.WritePropertyName("numberType"u8);
                writer.WriteStringValue(NumberType.Value.ToString());
            }
            if (Optional.IsDefined(IsPoliticalCampaign))
            {
                writer.WritePropertyName("isPoliticalCampaign"u8);
                writer.WriteBooleanValue(IsPoliticalCampaign.Value);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Url))
            {
                writer.WritePropertyName("url"u8);
                writer.WriteStringValue(Url.AbsoluteUri);
            }
            if (Optional.IsCollectionDefined(SignUpTypes))
            {
                writer.WritePropertyName("signUpTypes"u8);
                writer.WriteStartArray();
                foreach (var item in SignUpTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SignUpUrl))
            {
                writer.WritePropertyName("signUpUrl"u8);
                writer.WriteStringValue(SignUpUrl.AbsoluteUri);
            }
            if (Optional.IsDefined(TermsOfServiceUrl))
            {
                writer.WritePropertyName("termsOfServiceUrl"u8);
                writer.WriteStringValue(TermsOfServiceUrl.AbsoluteUri);
            }
            if (Optional.IsDefined(PrivacyPolicyUrl))
            {
                writer.WritePropertyName("privacyPolicyUrl"u8);
                writer.WriteStringValue(PrivacyPolicyUrl.AbsoluteUri);
            }
            if (Optional.IsDefined(ExpectedDateOfService))
            {
                writer.WritePropertyName("expectedDateOfService"u8);
                writer.WriteStringValue(ExpectedDateOfService.Value, "O");
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ProgramDetails DeserializeProgramDetails(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> isVanity = default;
            Optional<IList<string>> preferredVanityNumbers = default;
            Optional<NumberType> numberType = default;
            Optional<bool> isPoliticalCampaign = default;
            Optional<string> name = default;
            Optional<string> description = default;
            Optional<Uri> url = default;
            Optional<IList<ProgramSignUpType>> signUpTypes = default;
            Optional<Uri> signUpUrl = default;
            Optional<Uri> termsOfServiceUrl = default;
            Optional<Uri> privacyPolicyUrl = default;
            Optional<DateTimeOffset> expectedDateOfService = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("isVanity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isVanity = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("preferredVanityNumbers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    preferredVanityNumbers = array;
                    continue;
                }
                if (property.NameEquals("numberType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberType = new NumberType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isPoliticalCampaign"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isPoliticalCampaign = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    url = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("signUpTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ProgramSignUpType> array = new List<ProgramSignUpType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new ProgramSignUpType(item.GetString()));
                    }
                    signUpTypes = array;
                    continue;
                }
                if (property.NameEquals("signUpUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    signUpUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("termsOfServiceUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    termsOfServiceUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("privacyPolicyUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    privacyPolicyUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("expectedDateOfService"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expectedDateOfService = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ProgramDetails(Optional.ToNullable(isVanity), Optional.ToList(preferredVanityNumbers), Optional.ToNullable(numberType), Optional.ToNullable(isPoliticalCampaign), name.Value, description.Value, url.Value, Optional.ToList(signUpTypes), signUpUrl.Value, termsOfServiceUrl.Value, privacyPolicyUrl.Value, Optional.ToNullable(expectedDateOfService), rawData);
        }

        ProgramDetails IModelJsonSerializable<ProgramDetails>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ProgramDetails>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeProgramDetails(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ProgramDetails>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ProgramDetails>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ProgramDetails IModelSerializable<ProgramDetails>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ProgramDetails>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeProgramDetails(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="ProgramDetails"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="ProgramDetails"/> to convert. </param>
        public static implicit operator RequestContent(ProgramDetails model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="ProgramDetails"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator ProgramDetails(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeProgramDetails(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
