// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Communication.ShortCodes.Models
{
    /// <summary> Describes a messaging use case for a given content type by providing example messages. </summary>
    public partial class UseCase
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UseCase"/>. </summary>
        public UseCase()
        {
            Examples = new ChangeTrackingList<MessageExampleSequence>();
        }

        /// <summary> Initializes a new instance of <see cref="UseCase"/>. </summary>
        /// <param name="contentCategory"> Indicates the messaging content category used in the program e.g. 'ringTones', 'smsChat', 'video', 'loyaltyProgramPointsPrizes', 'gifting', 'inApplicationBilling', 'textToScreen'. </param>
        /// <param name="examples"> Example messages to be sent to and from the end user for the indicated content type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UseCase(MessageContentCategory? contentCategory, IList<MessageExampleSequence> examples, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ContentCategory = contentCategory;
            Examples = examples;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Indicates the messaging content category used in the program e.g. 'ringTones', 'smsChat', 'video', 'loyaltyProgramPointsPrizes', 'gifting', 'inApplicationBilling', 'textToScreen'. </summary>
        public MessageContentCategory? ContentCategory { get; set; }
        /// <summary> Example messages to be sent to and from the end user for the indicated content type. </summary>
        public IList<MessageExampleSequence> Examples { get; }
    }
}
