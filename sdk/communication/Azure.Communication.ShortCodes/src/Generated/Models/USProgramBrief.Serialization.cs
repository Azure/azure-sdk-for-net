// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.ShortCodes.Models
{
    public partial class USProgramBrief : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id");
            writer.WriteStringValue(Id);
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(Number))
            {
                writer.WritePropertyName("number");
                writer.WriteStringValue(Number);
            }
            if (Optional.IsCollectionDefined(ReviewNotes))
            {
                writer.WritePropertyName("reviewNotes");
                writer.WriteStartArray();
                foreach (var item in ReviewNotes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Costs))
            {
                writer.WritePropertyName("costs");
                writer.WriteStartArray();
                foreach (var item in Costs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SubmissionDate))
            {
                writer.WritePropertyName("submissionDate");
                writer.WriteStringValue(SubmissionDate.Value, "O");
            }
            if (Optional.IsDefined(StatusUpdatedDate))
            {
                writer.WritePropertyName("statusUpdatedDate");
                writer.WriteStringValue(StatusUpdatedDate.Value, "O");
            }
            if (Optional.IsDefined(ProgramDetails))
            {
                writer.WritePropertyName("programDetails");
                writer.WriteObjectValue(ProgramDetails);
            }
            if (Optional.IsDefined(CompanyInformation))
            {
                writer.WritePropertyName("companyInformation");
                writer.WriteObjectValue(CompanyInformation);
            }
            if (Optional.IsDefined(MessageDetails))
            {
                writer.WritePropertyName("messageDetails");
                writer.WriteObjectValue(MessageDetails);
            }
            if (Optional.IsDefined(TrafficDetails))
            {
                writer.WritePropertyName("trafficDetails");
                writer.WriteObjectValue(TrafficDetails);
            }
            writer.WriteEndObject();
        }

        internal static USProgramBrief DeserializeUSProgramBrief(JsonElement element)
        {
            Guid id = default;
            Optional<ProgramBriefStatus> status = default;
            Optional<string> number = default;
            Optional<IList<ReviewNote>> reviewNotes = default;
            Optional<IList<ShortCodeCost>> costs = default;
            Optional<DateTimeOffset> submissionDate = default;
            Optional<DateTimeOffset> statusUpdatedDate = default;
            Optional<ProgramDetails> programDetails = default;
            Optional<CompanyInformation> companyInformation = default;
            Optional<MessageDetails> messageDetails = default;
            Optional<TrafficDetails> trafficDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new ProgramBriefStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("number"))
                {
                    number = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reviewNotes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ReviewNote> array = new List<ReviewNote>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ReviewNote.DeserializeReviewNote(item));
                    }
                    reviewNotes = array;
                    continue;
                }
                if (property.NameEquals("costs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ShortCodeCost> array = new List<ShortCodeCost>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ShortCodeCost.DeserializeShortCodeCost(item));
                    }
                    costs = array;
                    continue;
                }
                if (property.NameEquals("submissionDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    submissionDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("statusUpdatedDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    statusUpdatedDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("programDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    programDetails = ProgramDetails.DeserializeProgramDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("companyInformation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    companyInformation = CompanyInformation.DeserializeCompanyInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("messageDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    messageDetails = MessageDetails.DeserializeMessageDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("trafficDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    trafficDetails = TrafficDetails.DeserializeTrafficDetails(property.Value);
                    continue;
                }
            }
            return new USProgramBrief(id, Optional.ToNullable(status), number.Value, Optional.ToList(reviewNotes), Optional.ToList(costs), Optional.ToNullable(submissionDate), Optional.ToNullable(statusUpdatedDate), programDetails.Value, companyInformation.Value, messageDetails.Value, trafficDetails.Value);
        }
    }
}
