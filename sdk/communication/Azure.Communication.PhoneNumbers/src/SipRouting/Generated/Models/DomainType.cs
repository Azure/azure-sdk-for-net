// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.PhoneNumbers.SipRouting
{
    /// <summary>
    /// Type of domain.
    /// Currently only &apos;custom&apos; type is supported.
    /// </summary>
    public readonly partial struct DomainType : IEquatable<DomainType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DomainType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DomainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CustomValue = "custom";

        /// <summary> Custom domain is every domain that is configured by user (domain.com). </summary>
        public static DomainType Custom { get; } = new DomainType(CustomValue);
        /// <summary> Determines if two <see cref="DomainType"/> values are the same. </summary>
        public static bool operator ==(DomainType left, DomainType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DomainType"/> values are not the same. </summary>
        public static bool operator !=(DomainType left, DomainType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DomainType"/>. </summary>
        public static implicit operator DomainType(string value) => new DomainType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DomainType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DomainType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
