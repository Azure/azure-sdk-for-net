// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.PhoneNumbers.SipRouting
{
    /// <summary> The reason overall status of Trunk is inactive. </summary>
    public readonly partial struct InactiveStatusReason : IEquatable<InactiveStatusReason>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InactiveStatusReason"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InactiveStatusReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoRecentCallsValue = "noRecentCalls";
        private const string NoRecentPingsValue = "noRecentPings";
        private const string NoRecentCallsAndPingsValue = "noRecentCallsAndPings";

        /// <summary> Indicates no recent calls. </summary>
        public static InactiveStatusReason NoRecentCalls { get; } = new InactiveStatusReason(NoRecentCallsValue);
        /// <summary> Indicates ping status is expired. </summary>
        public static InactiveStatusReason NoRecentPings { get; } = new InactiveStatusReason(NoRecentPingsValue);
        /// <summary> Indicates no recent calls and ping status is expired. </summary>
        public static InactiveStatusReason NoRecentCallsAndPings { get; } = new InactiveStatusReason(NoRecentCallsAndPingsValue);
        /// <summary> Determines if two <see cref="InactiveStatusReason"/> values are the same. </summary>
        public static bool operator ==(InactiveStatusReason left, InactiveStatusReason right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InactiveStatusReason"/> values are not the same. </summary>
        public static bool operator !=(InactiveStatusReason left, InactiveStatusReason right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="InactiveStatusReason"/>. </summary>
        public static implicit operator InactiveStatusReason(string value) => new InactiveStatusReason(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InactiveStatusReason other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InactiveStatusReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
