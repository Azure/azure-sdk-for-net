// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.PhoneNumbers.SipRouting
{
    /// <summary> SIP privacy header value, `id` - Privacy requested for Third-Party Asserted Identity (rfc3325), `none` - No operation is performed by privacy service (rfc3323). </summary>
    public readonly partial struct PrivacyHeader : IEquatable<PrivacyHeader>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PrivacyHeader"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PrivacyHeader(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IdValue = "id";
        private const string NoneValue = "none";

        /// <summary> id. </summary>
        public static PrivacyHeader Id { get; } = new PrivacyHeader(IdValue);
        /// <summary> none. </summary>
        public static PrivacyHeader None { get; } = new PrivacyHeader(NoneValue);
        /// <summary> Determines if two <see cref="PrivacyHeader"/> values are the same. </summary>
        public static bool operator ==(PrivacyHeader left, PrivacyHeader right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PrivacyHeader"/> values are not the same. </summary>
        public static bool operator !=(PrivacyHeader left, PrivacyHeader right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PrivacyHeader"/>. </summary>
        public static implicit operator PrivacyHeader(string value) => new PrivacyHeader(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PrivacyHeader other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PrivacyHeader other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
