// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.PhoneNumbers.SipRouting
{
    /// <summary> The status of the TLS connections of the Trunk. </summary>
    public readonly partial struct TlsStatus : IEquatable<TlsStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TlsStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TlsStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "unknown";
        private const string OkValue = "ok";
        private const string CertExpiringValue = "certExpiring";
        private const string CertExpiredValue = "certExpired";

        /// <summary> Indicates an unknown status. </summary>
        public static TlsStatus Unknown { get; } = new TlsStatus(UnknownValue);
        /// <summary> Indicates the status is okay. </summary>
        public static TlsStatus Ok { get; } = new TlsStatus(OkValue);
        /// <summary> Indicates the Trunk certificate is expiring. </summary>
        public static TlsStatus CertExpiring { get; } = new TlsStatus(CertExpiringValue);
        /// <summary> Indicates the Trunk certificate is expired. </summary>
        public static TlsStatus CertExpired { get; } = new TlsStatus(CertExpiredValue);
        /// <summary> Determines if two <see cref="TlsStatus"/> values are the same. </summary>
        public static bool operator ==(TlsStatus left, TlsStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TlsStatus"/> values are not the same. </summary>
        public static bool operator !=(TlsStatus left, TlsStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TlsStatus"/>. </summary>
        public static implicit operator TlsStatus(string value) => new TlsStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TlsStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TlsStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
