// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.PhoneNumbers.SipRouting
{
    /// <summary> The status of SIP OPTIONS message sent by Trunk. </summary>
    public readonly partial struct PingStatus : IEquatable<PingStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PingStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PingStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "unknown";
        private const string OkValue = "ok";
        private const string ExpiredValue = "expired";
        private const string ErrorValue = "error";

        /// <summary> Indicates an unknown status. </summary>
        public static PingStatus Unknown { get; } = new PingStatus(UnknownValue);
        /// <summary> Indicates the status is okay. </summary>
        public static PingStatus Ok { get; } = new PingStatus(OkValue);
        /// <summary> Indicates the status is expired. </summary>
        public static PingStatus Expired { get; } = new PingStatus(ExpiredValue);
        /// <summary> Indicates the status is at an error level. </summary>
        public static PingStatus Error { get; } = new PingStatus(ErrorValue);
        /// <summary> Determines if two <see cref="PingStatus"/> values are the same. </summary>
        public static bool operator ==(PingStatus left, PingStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PingStatus"/> values are not the same. </summary>
        public static bool operator !=(PingStatus left, PingStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PingStatus"/>. </summary>
        public static implicit operator PingStatus(string value) => new PingStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PingStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PingStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
