// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Communication.PhoneNumbers
{
    public partial class AvailablePhoneNumber : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            writer.WritePropertyName("countryCode"u8);
            writer.WriteStringValue(CountryCode);
            writer.WritePropertyName("phoneNumber"u8);
            writer.WriteStringValue(PhoneNumber);
            writer.WritePropertyName("capabilities"u8);
            writer.WriteObjectValue(Capabilities);
            writer.WritePropertyName("phoneNumberType"u8);
            writer.WriteStringValue(PhoneNumberType.ToString());
            writer.WritePropertyName("assignmentType"u8);
            writer.WriteStringValue(AssignmentType.ToString());
            writer.WritePropertyName("cost"u8);
            writer.WriteObjectValue(Cost);
            writer.WriteEndObject();
        }

        internal static AvailablePhoneNumber DeserializeAvailablePhoneNumber(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string id = default;
            string countryCode = default;
            string phoneNumber = default;
            PhoneNumberCapabilities capabilities = default;
            PhoneNumberType phoneNumberType = default;
            PhoneNumberAssignmentType assignmentType = default;
            PhoneNumberCost cost = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryCode"u8))
                {
                    countryCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("phoneNumber"u8))
                {
                    phoneNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("capabilities"u8))
                {
                    capabilities = PhoneNumberCapabilities.DeserializePhoneNumberCapabilities(property.Value);
                    continue;
                }
                if (property.NameEquals("phoneNumberType"u8))
                {
                    phoneNumberType = new PhoneNumberType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("assignmentType"u8))
                {
                    assignmentType = new PhoneNumberAssignmentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("cost"u8))
                {
                    cost = PhoneNumberCost.DeserializePhoneNumberCost(property.Value);
                    continue;
                }
            }
            return new AvailablePhoneNumber(id, countryCode, phoneNumber, capabilities, phoneNumberType, assignmentType, cost);
        }
    }
}
