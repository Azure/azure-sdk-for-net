// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.PhoneNumbers.Models
{
    /// <summary> The activation state of the phone number. Can be &quot;Activated&quot;, &quot;AssignmentPending&quot;, &quot;AssignmentFailed&quot;, &quot;UpdatePending&quot;, &quot;UpdateFailed&quot;. </summary>
    public readonly partial struct ActivationState : IEquatable<ActivationState>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ActivationState"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ActivationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActivatedValue = "Activated";
        private const string AssignmentPendingValue = "AssignmentPending";
        private const string AssignmentFailedValue = "AssignmentFailed";
        private const string UpdatePendingValue = "UpdatePending";
        private const string UpdateFailedValue = "UpdateFailed";

        /// <summary> Activated. </summary>
        public static ActivationState Activated { get; } = new ActivationState(ActivatedValue);
        /// <summary> AssignmentPending. </summary>
        public static ActivationState AssignmentPending { get; } = new ActivationState(AssignmentPendingValue);
        /// <summary> AssignmentFailed. </summary>
        public static ActivationState AssignmentFailed { get; } = new ActivationState(AssignmentFailedValue);
        /// <summary> UpdatePending. </summary>
        public static ActivationState UpdatePending { get; } = new ActivationState(UpdatePendingValue);
        /// <summary> UpdateFailed. </summary>
        public static ActivationState UpdateFailed { get; } = new ActivationState(UpdateFailedValue);
        /// <summary> Determines if two <see cref="ActivationState"/> values are the same. </summary>
        public static bool operator ==(ActivationState left, ActivationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ActivationState"/> values are not the same. </summary>
        public static bool operator !=(ActivationState left, ActivationState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ActivationState"/>. </summary>
        public static implicit operator ActivationState(string value) => new ActivationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ActivationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ActivationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
