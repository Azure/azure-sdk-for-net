// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.PhoneNumbers
{
    /// <summary> Represents the status of the phone number. Possible values include: 'available', 'reserved', 'expired', 'error', 'purchased'. </summary>
    public readonly partial struct PhoneNumberAvailabilityStatus : IEquatable<PhoneNumberAvailabilityStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PhoneNumberAvailabilityStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PhoneNumberAvailabilityStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AvailableValue = "available";
        private const string ReservedValue = "reserved";
        private const string ExpiredValue = "expired";
        private const string ErrorValue = "error";
        private const string PurchasedValue = "purchased";

        /// <summary> available. </summary>
        public static PhoneNumberAvailabilityStatus Available { get; } = new PhoneNumberAvailabilityStatus(AvailableValue);
        /// <summary> reserved. </summary>
        public static PhoneNumberAvailabilityStatus Reserved { get; } = new PhoneNumberAvailabilityStatus(ReservedValue);
        /// <summary> expired. </summary>
        public static PhoneNumberAvailabilityStatus Expired { get; } = new PhoneNumberAvailabilityStatus(ExpiredValue);
        /// <summary> error. </summary>
        public static PhoneNumberAvailabilityStatus Error { get; } = new PhoneNumberAvailabilityStatus(ErrorValue);
        /// <summary> purchased. </summary>
        public static PhoneNumberAvailabilityStatus Purchased { get; } = new PhoneNumberAvailabilityStatus(PurchasedValue);
        /// <summary> Determines if two <see cref="PhoneNumberAvailabilityStatus"/> values are the same. </summary>
        public static bool operator ==(PhoneNumberAvailabilityStatus left, PhoneNumberAvailabilityStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PhoneNumberAvailabilityStatus"/> values are not the same. </summary>
        public static bool operator !=(PhoneNumberAvailabilityStatus left, PhoneNumberAvailabilityStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PhoneNumberAvailabilityStatus"/>. </summary>
        public static implicit operator PhoneNumberAvailabilityStatus(string value) => new PhoneNumberAvailabilityStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PhoneNumberAvailabilityStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PhoneNumberAvailabilityStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
