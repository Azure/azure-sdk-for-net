// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.PhoneNumbers
{
    /// <summary> Represents the status of the reservation. Possible values include: 'active', 'submitted', 'completed', 'expired'. </summary>
    public readonly partial struct ReservationStatus : IEquatable<ReservationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ReservationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ReservationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "active";
        private const string SubmittedValue = "submitted";
        private const string CompletedValue = "completed";
        private const string ExpiredValue = "expired";

        /// <summary> active. </summary>
        public static ReservationStatus Active { get; } = new ReservationStatus(ActiveValue);
        /// <summary> submitted. </summary>
        public static ReservationStatus Submitted { get; } = new ReservationStatus(SubmittedValue);
        /// <summary> completed. </summary>
        public static ReservationStatus Completed { get; } = new ReservationStatus(CompletedValue);
        /// <summary> expired. </summary>
        public static ReservationStatus Expired { get; } = new ReservationStatus(ExpiredValue);
        /// <summary> Determines if two <see cref="ReservationStatus"/> values are the same. </summary>
        public static bool operator ==(ReservationStatus left, ReservationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ReservationStatus"/> values are not the same. </summary>
        public static bool operator !=(ReservationStatus left, ReservationStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ReservationStatus"/>. </summary>
        public static implicit operator ReservationStatus(string value) => new ReservationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ReservationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ReservationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
