// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.PhoneNumbers
{
    /// <summary> Type of service associated with the phone number. </summary>
    public readonly partial struct OperatorNumberType : IEquatable<OperatorNumberType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OperatorNumberType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OperatorNumberType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GeographicValue = "geographic";
        private const string MobileValue = "mobile";
        private const string PagingValue = "paging";
        private const string FreePhoneValue = "freePhone";
        private const string SpecialServicesValue = "specialServices";
        private const string TestNumberValue = "testNumber";
        private const string VoipValue = "voip";

        /// <summary> geographic. </summary>
        public static OperatorNumberType Geographic { get; } = new OperatorNumberType(GeographicValue);
        /// <summary> mobile. </summary>
        public static OperatorNumberType Mobile { get; } = new OperatorNumberType(MobileValue);
        /// <summary> paging. </summary>
        public static OperatorNumberType Paging { get; } = new OperatorNumberType(PagingValue);
        /// <summary> freePhone. </summary>
        public static OperatorNumberType FreePhone { get; } = new OperatorNumberType(FreePhoneValue);
        /// <summary> specialServices. </summary>
        public static OperatorNumberType SpecialServices { get; } = new OperatorNumberType(SpecialServicesValue);
        /// <summary> testNumber. </summary>
        public static OperatorNumberType TestNumber { get; } = new OperatorNumberType(TestNumberValue);
        /// <summary> voip. </summary>
        public static OperatorNumberType Voip { get; } = new OperatorNumberType(VoipValue);
        /// <summary> Determines if two <see cref="OperatorNumberType"/> values are the same. </summary>
        public static bool operator ==(OperatorNumberType left, OperatorNumberType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OperatorNumberType"/> values are not the same. </summary>
        public static bool operator !=(OperatorNumberType left, OperatorNumberType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OperatorNumberType"/>. </summary>
        public static implicit operator OperatorNumberType(string value) => new OperatorNumberType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OperatorNumberType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OperatorNumberType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
