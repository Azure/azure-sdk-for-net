// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Communication.PhoneNumbers.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.PhoneNumbers
{
    internal partial class PhoneNumberAdministrationRestClient
    {
        private string endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of PhoneNumberAdministrationRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public PhoneNumberAdministrationRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string apiVersion = "2020-07-20-preview1")
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetAllPhoneNumbersRequest(string locale, int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/phonenumbers", false);
            if (locale != null)
            {
                uri.AppendQuery("locale", locale, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (take != null)
            {
                uri.AppendQuery("take", take.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the list of the acquired phone numbers. </summary>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AcquiredPhoneNumbers>> GetAllPhoneNumbersAsync(string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllPhoneNumbersRequest(locale, skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AcquiredPhoneNumbers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AcquiredPhoneNumbers.DeserializeAcquiredPhoneNumbers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the list of the acquired phone numbers. </summary>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AcquiredPhoneNumbers> GetAllPhoneNumbers(string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllPhoneNumbersRequest(locale, skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AcquiredPhoneNumbers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AcquiredPhoneNumbers.DeserializeAcquiredPhoneNumbers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllAreaCodesRequest(string locationType, string countryCode, string phonePlanId, IEnumerable<LocationOptionsQuery> locationOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/countries/", false);
            uri.AppendPath(countryCode, true);
            uri.AppendPath("/areacodes", false);
            uri.AppendQuery("locationType", locationType, true);
            uri.AppendQuery("phonePlanId", phonePlanId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            LocationOptionsQueries locationOptionsQueries = new LocationOptionsQueries();
            foreach (var value in locationOptions)
            {
                locationOptionsQueries.LocationOptions.Add(value);
            }
            var model = locationOptionsQueries;
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Gets a list of the supported area codes. </summary>
        /// <param name="locationType"> The type of location information required by the plan. </param>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanId"> The plan id from which to search area codes. </param>
        /// <param name="locationOptions"> Represents the underlying list of countries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="locationType"/>, <paramref name="countryCode"/>, or <paramref name="phonePlanId"/> is null. </exception>
        public async Task<Response<AreaCodes>> GetAllAreaCodesAsync(string locationType, string countryCode, string phonePlanId, IEnumerable<LocationOptionsQuery> locationOptions = null, CancellationToken cancellationToken = default)
        {
            if (locationType == null)
            {
                throw new ArgumentNullException(nameof(locationType));
            }
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }
            if (phonePlanId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanId));
            }

            using var message = CreateGetAllAreaCodesRequest(locationType, countryCode, phonePlanId, locationOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AreaCodes value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AreaCodes.DeserializeAreaCodes(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of the supported area codes. </summary>
        /// <param name="locationType"> The type of location information required by the plan. </param>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanId"> The plan id from which to search area codes. </param>
        /// <param name="locationOptions"> Represents the underlying list of countries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="locationType"/>, <paramref name="countryCode"/>, or <paramref name="phonePlanId"/> is null. </exception>
        public Response<AreaCodes> GetAllAreaCodes(string locationType, string countryCode, string phonePlanId, IEnumerable<LocationOptionsQuery> locationOptions = null, CancellationToken cancellationToken = default)
        {
            if (locationType == null)
            {
                throw new ArgumentNullException(nameof(locationType));
            }
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }
            if (phonePlanId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanId));
            }

            using var message = CreateGetAllAreaCodesRequest(locationType, countryCode, phonePlanId, locationOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AreaCodes value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AreaCodes.DeserializeAreaCodes(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCapabilitiesUpdateRequest(string capabilitiesUpdateId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/capabilities/", false);
            uri.AppendPath(capabilitiesUpdateId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get capabilities by capabilities update id. </summary>
        /// <param name="capabilitiesUpdateId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="capabilitiesUpdateId"/> is null. </exception>
        public async Task<Response<UpdatePhoneNumberCapabilitiesResponse>> GetCapabilitiesUpdateAsync(string capabilitiesUpdateId, CancellationToken cancellationToken = default)
        {
            if (capabilitiesUpdateId == null)
            {
                throw new ArgumentNullException(nameof(capabilitiesUpdateId));
            }

            using var message = CreateGetCapabilitiesUpdateRequest(capabilitiesUpdateId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpdatePhoneNumberCapabilitiesResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UpdatePhoneNumberCapabilitiesResponse.DeserializeUpdatePhoneNumberCapabilitiesResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get capabilities by capabilities update id. </summary>
        /// <param name="capabilitiesUpdateId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="capabilitiesUpdateId"/> is null. </exception>
        public Response<UpdatePhoneNumberCapabilitiesResponse> GetCapabilitiesUpdate(string capabilitiesUpdateId, CancellationToken cancellationToken = default)
        {
            if (capabilitiesUpdateId == null)
            {
                throw new ArgumentNullException(nameof(capabilitiesUpdateId));
            }

            using var message = CreateGetCapabilitiesUpdateRequest(capabilitiesUpdateId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpdatePhoneNumberCapabilitiesResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UpdatePhoneNumberCapabilitiesResponse.DeserializeUpdatePhoneNumberCapabilitiesResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateCapabilitiesRequest(IDictionary<string, NumberUpdateCapabilities> phoneNumberCapabilitiesUpdate)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/capabilities", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new UpdateNumberCapabilitiesRequest(phoneNumberCapabilitiesUpdate);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Adds or removes phone number capabilities. </summary>
        /// <param name="phoneNumberCapabilitiesUpdate"> The map of phone numbers to the capabilities update applied to the phone number. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="phoneNumberCapabilitiesUpdate"/> is null. </exception>
        public async Task<Response<UpdateNumberCapabilitiesResponse>> UpdateCapabilitiesAsync(IDictionary<string, NumberUpdateCapabilities> phoneNumberCapabilitiesUpdate, CancellationToken cancellationToken = default)
        {
            if (phoneNumberCapabilitiesUpdate == null)
            {
                throw new ArgumentNullException(nameof(phoneNumberCapabilitiesUpdate));
            }

            using var message = CreateUpdateCapabilitiesRequest(phoneNumberCapabilitiesUpdate);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpdateNumberCapabilitiesResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UpdateNumberCapabilitiesResponse.DeserializeUpdateNumberCapabilitiesResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Adds or removes phone number capabilities. </summary>
        /// <param name="phoneNumberCapabilitiesUpdate"> The map of phone numbers to the capabilities update applied to the phone number. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="phoneNumberCapabilitiesUpdate"/> is null. </exception>
        public Response<UpdateNumberCapabilitiesResponse> UpdateCapabilities(IDictionary<string, NumberUpdateCapabilities> phoneNumberCapabilitiesUpdate, CancellationToken cancellationToken = default)
        {
            if (phoneNumberCapabilitiesUpdate == null)
            {
                throw new ArgumentNullException(nameof(phoneNumberCapabilitiesUpdate));
            }

            using var message = CreateUpdateCapabilitiesRequest(phoneNumberCapabilitiesUpdate);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpdateNumberCapabilitiesResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UpdateNumberCapabilitiesResponse.DeserializeUpdateNumberCapabilitiesResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllSupportedCountriesRequest(string locale, int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/countries", false);
            if (locale != null)
            {
                uri.AppendQuery("locale", locale, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (take != null)
            {
                uri.AppendQuery("take", take.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of supported countries. </summary>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PhoneNumberCountries>> GetAllSupportedCountriesAsync(string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllSupportedCountriesRequest(locale, skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberCountries value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhoneNumberCountries.DeserializePhoneNumberCountries(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of supported countries. </summary>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PhoneNumberCountries> GetAllSupportedCountries(string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllSupportedCountriesRequest(locale, skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberCountries value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhoneNumberCountries.DeserializePhoneNumberCountries(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetNumberConfigurationRequest(string phoneNumber)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/numberconfiguration", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new NumberConfigurationPhoneNumber(phoneNumber);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Endpoint for getting number configurations. </summary>
        /// <param name="phoneNumber"> The phone number in the E.164 format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="phoneNumber"/> is null. </exception>
        public async Task<Response<NumberConfigurationResponse>> GetNumberConfigurationAsync(string phoneNumber, CancellationToken cancellationToken = default)
        {
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            using var message = CreateGetNumberConfigurationRequest(phoneNumber);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NumberConfigurationResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = NumberConfigurationResponse.DeserializeNumberConfigurationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Endpoint for getting number configurations. </summary>
        /// <param name="phoneNumber"> The phone number in the E.164 format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="phoneNumber"/> is null. </exception>
        public Response<NumberConfigurationResponse> GetNumberConfiguration(string phoneNumber, CancellationToken cancellationToken = default)
        {
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            using var message = CreateGetNumberConfigurationRequest(phoneNumber);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NumberConfigurationResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = NumberConfigurationResponse.DeserializeNumberConfigurationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateConfigureNumberRequest(PstnConfiguration pstnConfiguration, string phoneNumber)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/numberconfiguration/configure", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new NumberConfiguration(pstnConfiguration, phoneNumber);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Endpoint for configuring a pstn number. </summary>
        /// <param name="pstnConfiguration"> Definition for pstn number configuration. </param>
        /// <param name="phoneNumber"> The phone number to configure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pstnConfiguration"/> or <paramref name="phoneNumber"/> is null. </exception>
        public async Task<Response> ConfigureNumberAsync(PstnConfiguration pstnConfiguration, string phoneNumber, CancellationToken cancellationToken = default)
        {
            if (pstnConfiguration == null)
            {
                throw new ArgumentNullException(nameof(pstnConfiguration));
            }
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            using var message = CreateConfigureNumberRequest(pstnConfiguration, phoneNumber);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Endpoint for configuring a pstn number. </summary>
        /// <param name="pstnConfiguration"> Definition for pstn number configuration. </param>
        /// <param name="phoneNumber"> The phone number to configure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pstnConfiguration"/> or <paramref name="phoneNumber"/> is null. </exception>
        public Response ConfigureNumber(PstnConfiguration pstnConfiguration, string phoneNumber, CancellationToken cancellationToken = default)
        {
            if (pstnConfiguration == null)
            {
                throw new ArgumentNullException(nameof(pstnConfiguration));
            }
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            using var message = CreateConfigureNumberRequest(pstnConfiguration, phoneNumber);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUnconfigureNumberRequest(string phoneNumber)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/numberconfiguration/unconfigure", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new NumberConfigurationPhoneNumber(phoneNumber);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Endpoint for unconfiguring a pstn number by removing the configuration. </summary>
        /// <param name="phoneNumber"> The phone number in the E.164 format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="phoneNumber"/> is null. </exception>
        public async Task<Response> UnconfigureNumberAsync(string phoneNumber, CancellationToken cancellationToken = default)
        {
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            using var message = CreateUnconfigureNumberRequest(phoneNumber);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Endpoint for unconfiguring a pstn number by removing the configuration. </summary>
        /// <param name="phoneNumber"> The phone number in the E.164 format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="phoneNumber"/> is null. </exception>
        public Response UnconfigureNumber(string phoneNumber, CancellationToken cancellationToken = default)
        {
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            using var message = CreateUnconfigureNumberRequest(phoneNumber);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPhonePlanGroupsRequest(string countryCode, string locale, bool? includeRateInformation, int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/countries/", false);
            uri.AppendPath(countryCode, true);
            uri.AppendPath("/phoneplangroups", false);
            if (locale != null)
            {
                uri.AppendQuery("locale", locale, true);
            }
            if (includeRateInformation != null)
            {
                uri.AppendQuery("includeRateInformation", includeRateInformation.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (take != null)
            {
                uri.AppendQuery("take", take.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of phone plan groups for the given country. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="includeRateInformation"> The Boolean to use. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/> is null. </exception>
        public async Task<Response<PhonePlanGroups>> GetPhonePlanGroupsAsync(string countryCode, string locale = null, bool? includeRateInformation = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }

            using var message = CreateGetPhonePlanGroupsRequest(countryCode, locale, includeRateInformation, skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhonePlanGroups value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhonePlanGroups.DeserializePhonePlanGroups(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of phone plan groups for the given country. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="includeRateInformation"> The Boolean to use. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/> is null. </exception>
        public Response<PhonePlanGroups> GetPhonePlanGroups(string countryCode, string locale = null, bool? includeRateInformation = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }

            using var message = CreateGetPhonePlanGroupsRequest(countryCode, locale, includeRateInformation, skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhonePlanGroups value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhonePlanGroups.DeserializePhonePlanGroups(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPhonePlansRequest(string countryCode, string phonePlanGroupId, string locale, int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/countries/", false);
            uri.AppendPath(countryCode, true);
            uri.AppendPath("/phoneplangroups/", false);
            uri.AppendPath(phonePlanGroupId, true);
            uri.AppendPath("/phoneplans", false);
            if (locale != null)
            {
                uri.AppendQuery("locale", locale, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (take != null)
            {
                uri.AppendQuery("take", take.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of phone plans for a phone plan group. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanGroupId"> The String to use. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/> or <paramref name="phonePlanGroupId"/> is null. </exception>
        public async Task<Response<PhonePlansResponse>> GetPhonePlansAsync(string countryCode, string phonePlanGroupId, string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }
            if (phonePlanGroupId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanGroupId));
            }

            using var message = CreateGetPhonePlansRequest(countryCode, phonePlanGroupId, locale, skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhonePlansResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhonePlansResponse.DeserializePhonePlansResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of phone plans for a phone plan group. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanGroupId"> The String to use. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/> or <paramref name="phonePlanGroupId"/> is null. </exception>
        public Response<PhonePlansResponse> GetPhonePlans(string countryCode, string phonePlanGroupId, string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }
            if (phonePlanGroupId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanGroupId));
            }

            using var message = CreateGetPhonePlansRequest(countryCode, phonePlanGroupId, locale, skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhonePlansResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhonePlansResponse.DeserializePhonePlansResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPhonePlanLocationOptionsRequest(string countryCode, string phonePlanGroupId, string phonePlanId, string locale)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/countries/", false);
            uri.AppendPath(countryCode, true);
            uri.AppendPath("/phoneplangroups/", false);
            uri.AppendPath(phonePlanGroupId, true);
            uri.AppendPath("/phoneplans/", false);
            uri.AppendPath(phonePlanId, true);
            uri.AppendPath("/locationoptions", false);
            if (locale != null)
            {
                uri.AppendQuery("locale", locale, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of location options for a phone plan. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanGroupId"> The String to use. </param>
        /// <param name="phonePlanId"> The String to use. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/>, <paramref name="phonePlanGroupId"/>, or <paramref name="phonePlanId"/> is null. </exception>
        public async Task<Response<LocationOptionsResponse>> GetPhonePlanLocationOptionsAsync(string countryCode, string phonePlanGroupId, string phonePlanId, string locale = null, CancellationToken cancellationToken = default)
        {
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }
            if (phonePlanGroupId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanGroupId));
            }
            if (phonePlanId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanId));
            }

            using var message = CreateGetPhonePlanLocationOptionsRequest(countryCode, phonePlanGroupId, phonePlanId, locale);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        LocationOptionsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = LocationOptionsResponse.DeserializeLocationOptionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of location options for a phone plan. </summary>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanGroupId"> The String to use. </param>
        /// <param name="phonePlanId"> The String to use. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/>, <paramref name="phonePlanGroupId"/>, or <paramref name="phonePlanId"/> is null. </exception>
        public Response<LocationOptionsResponse> GetPhonePlanLocationOptions(string countryCode, string phonePlanGroupId, string phonePlanId, string locale = null, CancellationToken cancellationToken = default)
        {
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }
            if (phonePlanGroupId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanGroupId));
            }
            if (phonePlanId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanId));
            }

            using var message = CreateGetPhonePlanLocationOptionsRequest(countryCode, phonePlanGroupId, phonePlanId, locale);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        LocationOptionsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = LocationOptionsResponse.DeserializeLocationOptionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReleaseByIdRequest(string releaseId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/releases/", false);
            uri.AppendPath(releaseId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a release by a release id. </summary>
        /// <param name="releaseId"> Represents the release id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> is null. </exception>
        public async Task<Response<PhoneNumberRelease>> GetReleaseByIdAsync(string releaseId, CancellationToken cancellationToken = default)
        {
            if (releaseId == null)
            {
                throw new ArgumentNullException(nameof(releaseId));
            }

            using var message = CreateGetReleaseByIdRequest(releaseId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberRelease value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhoneNumberRelease.DeserializePhoneNumberRelease(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a release by a release id. </summary>
        /// <param name="releaseId"> Represents the release id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> is null. </exception>
        public Response<PhoneNumberRelease> GetReleaseById(string releaseId, CancellationToken cancellationToken = default)
        {
            if (releaseId == null)
            {
                throw new ArgumentNullException(nameof(releaseId));
            }

            using var message = CreateGetReleaseByIdRequest(releaseId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberRelease value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhoneNumberRelease.DeserializePhoneNumberRelease(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateReleasePhoneNumbersRequest(IEnumerable<string> phoneNumbers)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/releases", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new ReleaseRequest(phoneNumbers);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a release for the given phone numbers. </summary>
        /// <param name="phoneNumbers"> The list of phone numbers in the release request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="phoneNumbers"/> is null. </exception>
        public async Task<Response<PhoneNumberReleaseResponse>> ReleasePhoneNumbersAsync(IEnumerable<string> phoneNumbers, CancellationToken cancellationToken = default)
        {
            if (phoneNumbers == null)
            {
                throw new ArgumentNullException(nameof(phoneNumbers));
            }

            using var message = CreateReleasePhoneNumbersRequest(phoneNumbers);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberReleaseResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhoneNumberReleaseResponse.DeserializePhoneNumberReleaseResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a release for the given phone numbers. </summary>
        /// <param name="phoneNumbers"> The list of phone numbers in the release request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="phoneNumbers"/> is null. </exception>
        public Response<PhoneNumberReleaseResponse> ReleasePhoneNumbers(IEnumerable<string> phoneNumbers, CancellationToken cancellationToken = default)
        {
            if (phoneNumbers == null)
            {
                throw new ArgumentNullException(nameof(phoneNumbers));
            }

            using var message = CreateReleasePhoneNumbersRequest(phoneNumbers);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberReleaseResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhoneNumberReleaseResponse.DeserializePhoneNumberReleaseResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllReleasesRequest(int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/releases", false);
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (take != null)
            {
                uri.AppendQuery("take", take.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of all releases. </summary>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PhoneNumberEntities>> GetAllReleasesAsync(int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllReleasesRequest(skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberEntities value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhoneNumberEntities.DeserializePhoneNumberEntities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of all releases. </summary>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PhoneNumberEntities> GetAllReleases(int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllReleasesRequest(skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberEntities value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhoneNumberEntities.DeserializePhoneNumberEntities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSearchByIdRequest(string searchId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/searches/", false);
            uri.AppendPath(searchId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get search by search id. </summary>
        /// <param name="searchId"> The search id to be searched for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        public async Task<Response<PhoneNumberReservation>> GetSearchByIdAsync(string searchId, CancellationToken cancellationToken = default)
        {
            if (searchId == null)
            {
                throw new ArgumentNullException(nameof(searchId));
            }

            using var message = CreateGetSearchByIdRequest(searchId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberReservation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhoneNumberReservation.DeserializePhoneNumberReservation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get search by search id. </summary>
        /// <param name="searchId"> The search id to be searched for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        public Response<PhoneNumberReservation> GetSearchById(string searchId, CancellationToken cancellationToken = default)
        {
            if (searchId == null)
            {
                throw new ArgumentNullException(nameof(searchId));
            }

            using var message = CreateGetSearchByIdRequest(searchId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberReservation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhoneNumberReservation.DeserializePhoneNumberReservation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateSearchRequest(CreateReservationOptions body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/searches", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Creates a phone number search. </summary>
        /// <param name="body"> Defines the search options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<CreateReservationResponse>> CreateSearchAsync(CreateReservationOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateSearchRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        CreateReservationResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CreateReservationResponse.DeserializeCreateReservationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a phone number search. </summary>
        /// <param name="body"> Defines the search options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<CreateReservationResponse> CreateSearch(CreateReservationOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateSearchRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        CreateReservationResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CreateReservationResponse.DeserializeCreateReservationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllSearchesRequest(int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/searches", false);
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (take != null)
            {
                uri.AppendQuery("take", take.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of all searches. </summary>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PhoneNumberEntities>> GetAllSearchesAsync(int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllSearchesRequest(skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberEntities value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhoneNumberEntities.DeserializePhoneNumberEntities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of all searches. </summary>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PhoneNumberEntities> GetAllSearches(int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllSearchesRequest(skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberEntities value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhoneNumberEntities.DeserializePhoneNumberEntities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCancelSearchRequest(string searchId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/searches/", false);
            uri.AppendPath(searchId, true);
            uri.AppendPath("/cancel", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Cancels the search. This means existing numbers in the search will be made available. </summary>
        /// <param name="searchId"> The search id to be canceled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        public async Task<Response> CancelSearchAsync(string searchId, CancellationToken cancellationToken = default)
        {
            if (searchId == null)
            {
                throw new ArgumentNullException(nameof(searchId));
            }

            using var message = CreateCancelSearchRequest(searchId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Cancels the search. This means existing numbers in the search will be made available. </summary>
        /// <param name="searchId"> The search id to be canceled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        public Response CancelSearch(string searchId, CancellationToken cancellationToken = default)
        {
            if (searchId == null)
            {
                throw new ArgumentNullException(nameof(searchId));
            }

            using var message = CreateCancelSearchRequest(searchId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePurchaseSearchRequest(string searchId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/administration/phonenumbers/searches/", false);
            uri.AppendPath(searchId, true);
            uri.AppendPath("/purchase", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Purchases the phone number search. </summary>
        /// <param name="searchId"> The search id to be purchased. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        public async Task<Response> PurchaseSearchAsync(string searchId, CancellationToken cancellationToken = default)
        {
            if (searchId == null)
            {
                throw new ArgumentNullException(nameof(searchId));
            }

            using var message = CreatePurchaseSearchRequest(searchId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Purchases the phone number search. </summary>
        /// <param name="searchId"> The search id to be purchased. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        public Response PurchaseSearch(string searchId, CancellationToken cancellationToken = default)
        {
            if (searchId == null)
            {
                throw new ArgumentNullException(nameof(searchId));
            }

            using var message = CreatePurchaseSearchRequest(searchId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllPhoneNumbersNextPageRequest(string nextLink, string locale, int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the list of the acquired phone numbers. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<AcquiredPhoneNumbers>> GetAllPhoneNumbersNextPageAsync(string nextLink, string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllPhoneNumbersNextPageRequest(nextLink, locale, skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AcquiredPhoneNumbers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AcquiredPhoneNumbers.DeserializeAcquiredPhoneNumbers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the list of the acquired phone numbers. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<AcquiredPhoneNumbers> GetAllPhoneNumbersNextPage(string nextLink, string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllPhoneNumbersNextPageRequest(nextLink, locale, skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AcquiredPhoneNumbers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AcquiredPhoneNumbers.DeserializeAcquiredPhoneNumbers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllSupportedCountriesNextPageRequest(string nextLink, string locale, int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of supported countries. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<PhoneNumberCountries>> GetAllSupportedCountriesNextPageAsync(string nextLink, string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllSupportedCountriesNextPageRequest(nextLink, locale, skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberCountries value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhoneNumberCountries.DeserializePhoneNumberCountries(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of supported countries. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<PhoneNumberCountries> GetAllSupportedCountriesNextPage(string nextLink, string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllSupportedCountriesNextPageRequest(nextLink, locale, skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberCountries value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhoneNumberCountries.DeserializePhoneNumberCountries(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPhonePlanGroupsNextPageRequest(string nextLink, string countryCode, string locale, bool? includeRateInformation, int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of phone plan groups for the given country. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="includeRateInformation"> The Boolean to use. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="countryCode"/> is null. </exception>
        public async Task<Response<PhonePlanGroups>> GetPhonePlanGroupsNextPageAsync(string nextLink, string countryCode, string locale = null, bool? includeRateInformation = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }

            using var message = CreateGetPhonePlanGroupsNextPageRequest(nextLink, countryCode, locale, includeRateInformation, skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhonePlanGroups value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhonePlanGroups.DeserializePhonePlanGroups(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of phone plan groups for the given country. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="includeRateInformation"> The Boolean to use. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="countryCode"/> is null. </exception>
        public Response<PhonePlanGroups> GetPhonePlanGroupsNextPage(string nextLink, string countryCode, string locale = null, bool? includeRateInformation = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }

            using var message = CreateGetPhonePlanGroupsNextPageRequest(nextLink, countryCode, locale, includeRateInformation, skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhonePlanGroups value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhonePlanGroups.DeserializePhonePlanGroups(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPhonePlansNextPageRequest(string nextLink, string countryCode, string phonePlanGroupId, string locale, int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of phone plans for a phone plan group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanGroupId"> The String to use. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="countryCode"/>, or <paramref name="phonePlanGroupId"/> is null. </exception>
        public async Task<Response<PhonePlansResponse>> GetPhonePlansNextPageAsync(string nextLink, string countryCode, string phonePlanGroupId, string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }
            if (phonePlanGroupId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanGroupId));
            }

            using var message = CreateGetPhonePlansNextPageRequest(nextLink, countryCode, phonePlanGroupId, locale, skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhonePlansResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhonePlansResponse.DeserializePhonePlansResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of phone plans for a phone plan group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="countryCode"> The ISO 3166-2 country code. </param>
        /// <param name="phonePlanGroupId"> The String to use. </param>
        /// <param name="locale"> A language-locale pairing which will be used to localize the names of countries. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="countryCode"/>, or <paramref name="phonePlanGroupId"/> is null. </exception>
        public Response<PhonePlansResponse> GetPhonePlansNextPage(string nextLink, string countryCode, string phonePlanGroupId, string locale = null, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (countryCode == null)
            {
                throw new ArgumentNullException(nameof(countryCode));
            }
            if (phonePlanGroupId == null)
            {
                throw new ArgumentNullException(nameof(phonePlanGroupId));
            }

            using var message = CreateGetPhonePlansNextPageRequest(nextLink, countryCode, phonePlanGroupId, locale, skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhonePlansResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhonePlansResponse.DeserializePhonePlansResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllReleasesNextPageRequest(string nextLink, int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of all releases. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<PhoneNumberEntities>> GetAllReleasesNextPageAsync(string nextLink, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllReleasesNextPageRequest(nextLink, skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberEntities value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhoneNumberEntities.DeserializePhoneNumberEntities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of all releases. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<PhoneNumberEntities> GetAllReleasesNextPage(string nextLink, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllReleasesNextPageRequest(nextLink, skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberEntities value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhoneNumberEntities.DeserializePhoneNumberEntities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllSearchesNextPageRequest(string nextLink, int? skip, int? take)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of all searches. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<PhoneNumberEntities>> GetAllSearchesNextPageAsync(string nextLink, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllSearchesNextPageRequest(nextLink, skip, take);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberEntities value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PhoneNumberEntities.DeserializePhoneNumberEntities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of all searches. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="skip"> An optional parameter for how many entries to skip, for pagination purposes. </param>
        /// <param name="take"> An optional parameter for how many entries to return, for pagination purposes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<PhoneNumberEntities> GetAllSearchesNextPage(string nextLink, int? skip = null, int? take = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllSearchesNextPageRequest(nextLink, skip, take);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PhoneNumberEntities value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PhoneNumberEntities.DeserializePhoneNumberEntities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
