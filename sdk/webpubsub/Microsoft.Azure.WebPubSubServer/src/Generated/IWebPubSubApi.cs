// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.WebPubSub
{
    using Microsoft.Rest;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// WebPubSubApi operations.
    /// </summary>
    public partial interface IWebPubSubApi
    {
        /// <summary>
        /// Broadcast content inside request body to all the connected to
        /// endpoint "/ws/client"
        /// </summary>
        /// <param name='payloadMessage'>
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='excluded'>
        /// Excluded connection Ids
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> BroadcastWithHttpMessagesAsync(string payloadMessage, string hub = default(string), IList<string> excluded = default(IList<string>), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send content inside request body to the specific user.
        /// </summary>
        /// <param name='id'>
        /// The user Id.
        /// </param>
        /// <param name='payloadMessage'>
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> SendToUserWithHttpMessagesAsync(string id, string payloadMessage, string hub = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send content inside request body to the specific connection.
        /// </summary>
        /// <param name='connectionId'>
        /// The connection Id.
        /// </param>
        /// <param name='payloadMessage'>
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> SendToConnectionWithHttpMessagesAsync(string connectionId, string payloadMessage, string hub = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send content inside request body to a group of connections.
        /// </summary>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='payloadMessage'>
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='excluded'>
        /// Excluded connection Ids
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> GroupBroadcastWithHttpMessagesAsync(string group, string payloadMessage, string hub = default(string), IList<string> excluded = default(IList<string>), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check if the connection with the given connectionId exists
        /// </summary>
        /// <param name='connectionId'>
        /// The connection Id.
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> CheckConnectionExistenceWithHttpMessagesAsync(string connectionId, string hub = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Close the client connection
        /// </summary>
        /// <param name='connectionId'>
        /// Target connection Id
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='reason'>
        /// The reason closing the client connection
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> CloseClientConnectionWithHttpMessagesAsync(string connectionId, string hub = default(string), string reason = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check if there are any client connections inside the given group
        /// </summary>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> CheckGroupExistenceWithHttpMessagesAsync(string group, string hub = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check if there are any client connections connected for the given
        /// user
        /// </summary>
        /// <param name='user'>
        /// Target user Id
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> CheckUserExistenceWithHttpMessagesAsync(string user, string hub = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a connection to the target group.
        /// </summary>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='connectionId'>
        /// Target connection Id
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> AddConnectionToGroupWithHttpMessagesAsync(string group, string connectionId, string hub = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a connection from the target group.
        /// </summary>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='connectionId'>
        /// Target connection Id
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> RemoveConnectionFromGroupWithHttpMessagesAsync(string group, string connectionId, string hub = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check whether a user exists in the target group.
        /// </summary>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='user'>
        /// Target user Id
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> CheckUserExistenceInGroupWithHttpMessagesAsync(string group, string user, string hub = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a user to the target group.
        /// </summary>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='user'>
        /// Target user Id
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='ttl'>
        /// Specifies the seconds that the user exists in the group. If not
        /// set, the user lives in the group forever.
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> AddUserToGroupWithHttpMessagesAsync(string group, string user, string hub = default(string), int? ttl = default(int?), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a user from the target group.
        /// </summary>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='user'>
        /// Target user Id
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> RemoveUserFromGroupWithHttpMessagesAsync(string group, string user, string hub = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a user from all groups.
        /// </summary>
        /// <param name='user'>
        /// Target user Id
        /// </param>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore. When it is not
        /// set, it uses the default hub
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> RemoveUserFromAllGroupsWithHttpMessagesAsync(string user, string hub = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
