// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.WebPubSub
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WebPubSubApi.
    /// </summary>
    public static partial class WebPubSubApiExtensions
    {
            /// <summary>
            /// Broadcast content inside request body to all the connected to endpoint
            /// "/ws/client"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payloadMessage'>
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void Broadcast(this IWebPubSubApi operations, string payloadMessage, string hub = default(string), IList<string> excluded = default(IList<string>), string apiVersion = "2020-10-01")
            {
                operations.BroadcastAsync(payloadMessage, hub, excluded, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Broadcast content inside request body to all the connected to endpoint
            /// "/ws/client"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payloadMessage'>
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BroadcastAsync(this IWebPubSubApi operations, string payloadMessage, string hub = default(string), IList<string> excluded = default(IList<string>), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BroadcastWithHttpMessagesAsync(payloadMessage, hub, excluded, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Send content inside request body to the specific user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The user Id.
            /// </param>
            /// <param name='payloadMessage'>
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void SendToUser(this IWebPubSubApi operations, string id, string payloadMessage, string hub = default(string), string apiVersion = "2020-10-01")
            {
                operations.SendToUserAsync(id, payloadMessage, hub, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send content inside request body to the specific user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The user Id.
            /// </param>
            /// <param name='payloadMessage'>
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendToUserAsync(this IWebPubSubApi operations, string id, string payloadMessage, string hub = default(string), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendToUserWithHttpMessagesAsync(id, payloadMessage, hub, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Send content inside request body to the specific connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='payloadMessage'>
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void SendToConnection(this IWebPubSubApi operations, string connectionId, string payloadMessage, string hub = default(string), string apiVersion = "2020-10-01")
            {
                operations.SendToConnectionAsync(connectionId, payloadMessage, hub, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send content inside request body to the specific connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='payloadMessage'>
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendToConnectionAsync(this IWebPubSubApi operations, string connectionId, string payloadMessage, string hub = default(string), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendToConnectionWithHttpMessagesAsync(connectionId, payloadMessage, hub, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Send content inside request body to a group of connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='payloadMessage'>
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void GroupBroadcast(this IWebPubSubApi operations, string group, string payloadMessage, string hub = default(string), IList<string> excluded = default(IList<string>), string apiVersion = "2020-10-01")
            {
                operations.GroupBroadcastAsync(group, payloadMessage, hub, excluded, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send content inside request body to a group of connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='payloadMessage'>
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GroupBroadcastAsync(this IWebPubSubApi operations, string group, string payloadMessage, string hub = default(string), IList<string> excluded = default(IList<string>), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GroupBroadcastWithHttpMessagesAsync(group, payloadMessage, hub, excluded, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Check if the connection with the given connectionId exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void CheckConnectionExistence(this IWebPubSubApi operations, string connectionId, string hub = default(string), string apiVersion = "2020-10-01")
            {
                operations.CheckConnectionExistenceAsync(connectionId, hub, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if the connection with the given connectionId exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CheckConnectionExistenceAsync(this IWebPubSubApi operations, string connectionId, string hub = default(string), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CheckConnectionExistenceWithHttpMessagesAsync(connectionId, hub, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Close the client connection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void CloseClientConnection(this IWebPubSubApi operations, string connectionId, string hub = default(string), string reason = default(string), string apiVersion = "2020-10-01")
            {
                operations.CloseClientConnectionAsync(connectionId, hub, reason, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Close the client connection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CloseClientConnectionAsync(this IWebPubSubApi operations, string connectionId, string hub = default(string), string reason = default(string), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CloseClientConnectionWithHttpMessagesAsync(connectionId, hub, reason, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Check if there are any client connections inside the given group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void CheckGroupExistence(this IWebPubSubApi operations, string group, string hub = default(string), string apiVersion = "2020-10-01")
            {
                operations.CheckGroupExistenceAsync(group, hub, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if there are any client connections inside the given group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CheckGroupExistenceAsync(this IWebPubSubApi operations, string group, string hub = default(string), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CheckGroupExistenceWithHttpMessagesAsync(group, hub, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Check if there are any client connections connected for the given user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// Target user Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void CheckUserExistence(this IWebPubSubApi operations, string user, string hub = default(string), string apiVersion = "2020-10-01")
            {
                operations.CheckUserExistenceAsync(user, hub, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if there are any client connections connected for the given user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// Target user Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CheckUserExistenceAsync(this IWebPubSubApi operations, string user, string hub = default(string), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CheckUserExistenceWithHttpMessagesAsync(user, hub, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add a connection to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void AddConnectionToGroup(this IWebPubSubApi operations, string group, string connectionId, string hub = default(string), string apiVersion = "2020-10-01")
            {
                operations.AddConnectionToGroupAsync(group, connectionId, hub, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a connection to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddConnectionToGroupAsync(this IWebPubSubApi operations, string group, string connectionId, string hub = default(string), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddConnectionToGroupWithHttpMessagesAsync(group, connectionId, hub, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove a connection from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void RemoveConnectionFromGroup(this IWebPubSubApi operations, string group, string connectionId, string hub = default(string), string apiVersion = "2020-10-01")
            {
                operations.RemoveConnectionFromGroupAsync(group, connectionId, hub, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a connection from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveConnectionFromGroupAsync(this IWebPubSubApi operations, string group, string connectionId, string hub = default(string), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveConnectionFromGroupWithHttpMessagesAsync(group, connectionId, hub, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Check whether a user exists in the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='user'>
            /// Target user Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void CheckUserExistenceInGroup(this IWebPubSubApi operations, string group, string user, string hub = default(string), string apiVersion = "2020-10-01")
            {
                operations.CheckUserExistenceInGroupAsync(group, user, hub, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check whether a user exists in the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='user'>
            /// Target user Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CheckUserExistenceInGroupAsync(this IWebPubSubApi operations, string group, string user, string hub = default(string), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CheckUserExistenceInGroupWithHttpMessagesAsync(group, user, hub, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add a user to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='user'>
            /// Target user Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='ttl'>
            /// Specifies the seconds that the user exists in the group. If not set, the
            /// user lives in the group forever.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void AddUserToGroup(this IWebPubSubApi operations, string group, string user, string hub = default(string), int? ttl = default(int?), string apiVersion = "2020-10-01")
            {
                operations.AddUserToGroupAsync(group, user, hub, ttl, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a user to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='user'>
            /// Target user Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='ttl'>
            /// Specifies the seconds that the user exists in the group. If not set, the
            /// user lives in the group forever.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddUserToGroupAsync(this IWebPubSubApi operations, string group, string user, string hub = default(string), int? ttl = default(int?), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddUserToGroupWithHttpMessagesAsync(group, user, hub, ttl, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove a user from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='user'>
            /// Target user Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void RemoveUserFromGroup(this IWebPubSubApi operations, string group, string user, string hub = default(string), string apiVersion = "2020-10-01")
            {
                operations.RemoveUserFromGroupAsync(group, user, hub, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a user from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='user'>
            /// Target user Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveUserFromGroupAsync(this IWebPubSubApi operations, string group, string user, string hub = default(string), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveUserFromGroupWithHttpMessagesAsync(group, user, hub, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove a user from all groups.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// Target user Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void RemoveUserFromAllGroups(this IWebPubSubApi operations, string user, string hub = default(string), string apiVersion = "2020-10-01")
            {
                operations.RemoveUserFromAllGroupsAsync(user, hub, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a user from all groups.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// Target user Id
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore. When it is not set, it uses
            /// the default hub
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveUserFromAllGroupsAsync(this IWebPubSubApi operations, string user, string hub = default(string), string apiVersion = "2020-10-01", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveUserFromAllGroupsWithHttpMessagesAsync(user, hub, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
