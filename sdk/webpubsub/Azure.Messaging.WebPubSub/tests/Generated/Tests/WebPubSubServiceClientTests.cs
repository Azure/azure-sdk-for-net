// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.IO;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Messaging.WebPubSub.Tests
{
    public partial class WebPubSubServiceClientTests : MessagingWebPubSubTestBase
    {
        public WebPubSubServiceClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CloseAllConnections_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.CloseAllConnectionsAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CloseAllConnections_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.CloseAllConnectionsAsync(excluded: new string[] { "<excluded>" }, reason: "<reason>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SendToAll_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.SendToAllAsync(content, new ContentType("application/json"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SendToAll_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.SendToAllAsync(content, new ContentType("application/json"), excluded: new string[] { "<excluded>" }, filter: "<filter>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CloseConnection_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.CloseConnectionAsync("<connectionId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CloseConnection_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.CloseConnectionAsync("<connectionId>", reason: "<reason>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SendToConnection_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.SendToConnectionAsync("<connectionId>", content, new ContentType("application/json"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SendToConnection_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.SendToConnectionAsync("<connectionId>", content, new ContentType("application/json"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RemoveConnectionFromAllGroups_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.RemoveConnectionFromAllGroupsAsync("<connectionId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RemoveConnectionFromAllGroups_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.RemoveConnectionFromAllGroupsAsync("<connectionId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CloseGroupConnections_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.CloseGroupConnectionsAsync("<group>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CloseGroupConnections_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.CloseGroupConnectionsAsync("<group>", excluded: new string[] { "<excluded>" }, reason: "<reason>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SendToGroup_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.SendToGroupAsync("<group>", content, new ContentType("application/json"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SendToGroup_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.SendToGroupAsync("<group>", content, new ContentType("application/json"), excluded: new string[] { "<excluded>" }, filter: "<filter>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RemoveConnectionFromGroup_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.RemoveConnectionFromGroupAsync("<group>", "<connectionId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RemoveConnectionFromGroup_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.RemoveConnectionFromGroupAsync("<group>", "<connectionId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddConnectionToGroup_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.AddConnectionToGroupAsync("<group>", "<connectionId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddConnectionToGroup_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.AddConnectionToGroupAsync("<group>", "<connectionId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CloseUserConnections_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.CloseUserConnectionsAsync("<userId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CloseUserConnections_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.CloseUserConnectionsAsync("<userId>", excluded: new string[] { "<excluded>" }, reason: "<reason>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SendToUser_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.SendToUserAsync("<userId>", content, new ContentType("application/json"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SendToUser_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.SendToUserAsync("<userId>", content, new ContentType("application/json"), filter: "<filter>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RemoveUserFromAllGroups_ShortVersion()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.RemoveUserFromAllGroupsAsync("<userId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RemoveUserFromAllGroups_AllParameters()
        {
            WebPubSubServiceClient client = CreateWebPubSubServiceClient("<Endpoint>", "<Hub>");

            Response response = await client.RemoveUserFromAllGroupsAsync("<userId>");
        }
    }
}
