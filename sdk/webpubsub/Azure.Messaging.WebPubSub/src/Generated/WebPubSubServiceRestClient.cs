// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Messaging.WebPubSub.Models;

namespace Azure.Messaging.WebPubSub
{
    internal partial class WebPubSubServiceRestClient
    {
        private string endpoint;
        private string hub;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of WebPubSubServiceRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> HTTP or HTTPS endpoint for the Web PubSub service instance. </param>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="hub"/>, or <paramref name="apiVersion"/> is null. </exception>
        public WebPubSubServiceRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string hub, string apiVersion = "2021-10-01")
        {
            this.endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
            this.hub = hub ?? throw new ArgumentNullException(nameof(hub));
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGenerateClientTokenImplRequest(string userId, IEnumerable<string> role, int? minutesToExpire)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/:generateToken", false);
            if (userId != null)
            {
                uri.AppendQuery("userId", userId, true);
            }
            if (role != null)
            {
                foreach (var param in role)
                {
                    uri.AppendQuery("role", param, true);
                }
            }
            if (minutesToExpire != null)
            {
                uri.AppendQuery("minutesToExpire", minutesToExpire.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Generate token for the client to connect Azure Web PubSub service. </summary>
        /// <param name="userId"> User Id. </param>
        /// <param name="role"> Roles that the connection with the generated token will have. </param>
        /// <param name="minutesToExpire"> The expire time of the generated token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ClientTokenResponse>> GenerateClientTokenImplAsync(string userId = null, IEnumerable<string> role = null, int? minutesToExpire = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGenerateClientTokenImplRequest(userId, role, minutesToExpire);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClientTokenResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ClientTokenResponse.DeserializeClientTokenResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Generate token for the client to connect Azure Web PubSub service. </summary>
        /// <param name="userId"> User Id. </param>
        /// <param name="role"> Roles that the connection with the generated token will have. </param>
        /// <param name="minutesToExpire"> The expire time of the generated token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ClientTokenResponse> GenerateClientTokenImpl(string userId = null, IEnumerable<string> role = null, int? minutesToExpire = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGenerateClientTokenImplRequest(userId, role, minutesToExpire);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClientTokenResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ClientTokenResponse.DeserializeClientTokenResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCloseAllConnectionsRequest(IEnumerable<string> excluded, string reason)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/:closeConnections", false);
            if (excluded != null)
            {
                foreach (var param in excluded)
                {
                    uri.AppendQuery("excluded", param, true);
                }
            }
            if (reason != null)
            {
                uri.AppendQuery("reason", reason, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Close the connections in the hub. </summary>
        /// <param name="excluded"> Exclude these connectionIds when closing the connections in the hub. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> CloseAllConnectionsAsync(IEnumerable<string> excluded = null, string reason = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCloseAllConnectionsRequest(excluded, reason);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Close the connections in the hub. </summary>
        /// <param name="excluded"> Exclude these connectionIds when closing the connections in the hub. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response CloseAllConnections(IEnumerable<string> excluded = null, string reason = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCloseAllConnectionsRequest(excluded, reason);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToAllRequest(Models.ContentType contentType, Stream message, IEnumerable<string> excluded)
        {
            var message0 = _pipeline.CreateMessage();
            var request = message0.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/:send", false);
            if (excluded != null)
            {
                foreach (var param in excluded)
                {
                    uri.AppendQuery("excluded", param, true);
                }
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = RequestContent.Create(message);
            return message0;
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> is null. </exception>
        public async Task<Response> SendToAllAsync(Models.ContentType contentType, Stream message, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToAllRequest(contentType, message, excluded);
            await _pipeline.SendAsync(message0, cancellationToken).ConfigureAwait(false);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message0.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> is null. </exception>
        public Response SendToAll(Models.ContentType contentType, Stream message, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToAllRequest(contentType, message, excluded);
            _pipeline.Send(message0, cancellationToken);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message0.Response);
            }
        }

        internal HttpMessage CreateSendToAllRequest(string message, IEnumerable<string> excluded)
        {
            var message0 = _pipeline.CreateMessage();
            var request = message0.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/:send", false);
            if (excluded != null)
            {
                foreach (var param in excluded)
                {
                    uri.AppendQuery("excluded", param, true);
                }
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(message);
            return message0;
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="message"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> is null. </exception>
        public async Task<Response> SendToAllAsync(string message, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToAllRequest(message, excluded);
            await _pipeline.SendAsync(message0, cancellationToken).ConfigureAwait(false);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message0.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="message"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> is null. </exception>
        public Response SendToAll(string message, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToAllRequest(message, excluded);
            _pipeline.Send(message0, cancellationToken);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message0.Response);
            }
        }

        internal HttpMessage CreateConnectionExistsImplRequest(string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> ConnectionExistsImplAsync(string connectionId, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateConnectionExistsImplRequest(connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> is null. </exception>
        public Response ConnectionExistsImpl(string connectionId, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateConnectionExistsImplRequest(connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCloseConnectionRequest(string connectionId, string reason)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (reason != null)
            {
                uri.AppendQuery("reason", reason, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> CloseConnectionAsync(string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCloseConnectionRequest(connectionId, reason);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> is null. </exception>
        public Response CloseConnection(string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCloseConnectionRequest(connectionId, reason);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToConnectionRequest(string connectionId, Models.ContentType contentType, Stream message)
        {
            var message0 = _pipeline.CreateMessage();
            var request = message0.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            uri.AppendPath("/:send", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = RequestContent.Create(message);
            return message0;
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> or <paramref name="message"/> is null. </exception>
        public async Task<Response> SendToConnectionAsync(string connectionId, Models.ContentType contentType, Stream message, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToConnectionRequest(connectionId, contentType, message);
            await _pipeline.SendAsync(message0, cancellationToken).ConfigureAwait(false);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message0.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> or <paramref name="message"/> is null. </exception>
        public Response SendToConnection(string connectionId, Models.ContentType contentType, Stream message, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToConnectionRequest(connectionId, contentType, message);
            _pipeline.Send(message0, cancellationToken);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message0.Response);
            }
        }

        internal HttpMessage CreateSendToConnectionRequest(string connectionId, string message)
        {
            var message0 = _pipeline.CreateMessage();
            var request = message0.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            uri.AppendPath("/:send", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(message);
            return message0;
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> or <paramref name="message"/> is null. </exception>
        public async Task<Response> SendToConnectionAsync(string connectionId, string message, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToConnectionRequest(connectionId, message);
            await _pipeline.SendAsync(message0, cancellationToken).ConfigureAwait(false);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message0.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> or <paramref name="message"/> is null. </exception>
        public Response SendToConnection(string connectionId, string message, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToConnectionRequest(connectionId, message);
            _pipeline.Send(message0, cancellationToken);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message0.Response);
            }
        }

        internal HttpMessage CreateGroupExistsImplRequest(string group)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> is null. </exception>
        public async Task<Response> GroupExistsImplAsync(string group, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateGroupExistsImplRequest(group);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> is null. </exception>
        public Response GroupExistsImpl(string group, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateGroupExistsImplRequest(group);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCloseGroupConnectionsRequest(string group, IEnumerable<string> excluded, string reason)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/:closeConnections", false);
            if (excluded != null)
            {
                foreach (var param in excluded)
                {
                    uri.AppendQuery("excluded", param, true);
                }
            }
            if (reason != null)
            {
                uri.AppendQuery("reason", reason, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Close connections in the specific group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="excluded"> Exclude these connectionIds when closing the connections in the group. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> is null. </exception>
        public async Task<Response> CloseGroupConnectionsAsync(string group, IEnumerable<string> excluded = null, string reason = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateCloseGroupConnectionsRequest(group, excluded, reason);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Close connections in the specific group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="excluded"> Exclude these connectionIds when closing the connections in the group. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> is null. </exception>
        public Response CloseGroupConnections(string group, IEnumerable<string> excluded = null, string reason = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateCloseGroupConnectionsRequest(group, excluded, reason);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToGroupRequest(string group, Models.ContentType contentType, Stream message, IEnumerable<string> excluded)
        {
            var message0 = _pipeline.CreateMessage();
            var request = message0.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/:send", false);
            if (excluded != null)
            {
                foreach (var param in excluded)
                {
                    uri.AppendQuery("excluded", param, true);
                }
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = RequestContent.Create(message);
            return message0;
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="message"/> is null. </exception>
        public async Task<Response> SendToGroupAsync(string group, Models.ContentType contentType, Stream message, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToGroupRequest(group, contentType, message, excluded);
            await _pipeline.SendAsync(message0, cancellationToken).ConfigureAwait(false);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message0.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="message"/> is null. </exception>
        public Response SendToGroup(string group, Models.ContentType contentType, Stream message, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToGroupRequest(group, contentType, message, excluded);
            _pipeline.Send(message0, cancellationToken);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message0.Response);
            }
        }

        internal HttpMessage CreateSendToGroupRequest(string group, string message, IEnumerable<string> excluded)
        {
            var message0 = _pipeline.CreateMessage();
            var request = message0.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/:send", false);
            if (excluded != null)
            {
                foreach (var param in excluded)
                {
                    uri.AppendQuery("excluded", param, true);
                }
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(message);
            return message0;
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="message"/> is null. </exception>
        public async Task<Response> SendToGroupAsync(string group, string message, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToGroupRequest(group, message, excluded);
            await _pipeline.SendAsync(message0, cancellationToken).ConfigureAwait(false);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message0.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="message"/> is null. </exception>
        public Response SendToGroup(string group, string message, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToGroupRequest(group, message, excluded);
            _pipeline.Send(message0, cancellationToken);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message0.Response);
            }
        }

        internal HttpMessage CreateAddConnectionToGroupRequest(string group, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> AddConnectionToGroupAsync(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateAddConnectionToGroupRequest(group, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="connectionId"/> is null. </exception>
        public Response AddConnectionToGroup(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateAddConnectionToGroupRequest(group, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveConnectionFromGroupRequest(string group, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> RemoveConnectionFromGroupAsync(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateRemoveConnectionFromGroupRequest(group, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="connectionId"/> is null. </exception>
        public Response RemoveConnectionFromGroup(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateRemoveConnectionFromGroupRequest(group, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUserExistsImplRequest(string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public async Task<Response> UserExistsImplAsync(string userId, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateUserExistsImplRequest(userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public Response UserExistsImpl(string userId, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateUserExistsImplRequest(userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCloseUserConnectionsRequest(string userId, IEnumerable<string> excluded, string reason)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/:closeConnections", false);
            if (excluded != null)
            {
                foreach (var param in excluded)
                {
                    uri.AppendQuery("excluded", param, true);
                }
            }
            if (reason != null)
            {
                uri.AppendQuery("reason", reason, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Close connections for the specific user. </summary>
        /// <param name="userId"> The user Id. </param>
        /// <param name="excluded"> Exclude these connectionIds when closing the connections for the user. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public async Task<Response> CloseUserConnectionsAsync(string userId, IEnumerable<string> excluded = null, string reason = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateCloseUserConnectionsRequest(userId, excluded, reason);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Close connections for the specific user. </summary>
        /// <param name="userId"> The user Id. </param>
        /// <param name="excluded"> Exclude these connectionIds when closing the connections for the user. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public Response CloseUserConnections(string userId, IEnumerable<string> excluded = null, string reason = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateCloseUserConnectionsRequest(userId, excluded, reason);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToUserRequest(string userId, Models.ContentType contentType, Stream message)
        {
            var message0 = _pipeline.CreateMessage();
            var request = message0.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/:send", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = RequestContent.Create(message);
            return message0;
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="userId"> The user Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> or <paramref name="message"/> is null. </exception>
        public async Task<Response> SendToUserAsync(string userId, Models.ContentType contentType, Stream message, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToUserRequest(userId, contentType, message);
            await _pipeline.SendAsync(message0, cancellationToken).ConfigureAwait(false);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message0.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="userId"> The user Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> or <paramref name="message"/> is null. </exception>
        public Response SendToUser(string userId, Models.ContentType contentType, Stream message, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToUserRequest(userId, contentType, message);
            _pipeline.Send(message0, cancellationToken);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message0.Response);
            }
        }

        internal HttpMessage CreateSendToUserRequest(string userId, string message)
        {
            var message0 = _pipeline.CreateMessage();
            var request = message0.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/:send", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(message);
            return message0;
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="userId"> The user Id. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> or <paramref name="message"/> is null. </exception>
        public async Task<Response> SendToUserAsync(string userId, string message, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToUserRequest(userId, message);
            await _pipeline.SendAsync(message0, cancellationToken).ConfigureAwait(false);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message0.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="userId"> The user Id. </param>
        /// <param name="message"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> or <paramref name="message"/> is null. </exception>
        public Response SendToUser(string userId, string message, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendToUserRequest(userId, message);
            _pipeline.Send(message0, cancellationToken);
            switch (message0.Response.Status)
            {
                case 202:
                    return message0.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message0.Response);
            }
        }

        internal HttpMessage CreateAddUserToGroupRequest(string group, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="userId"/> is null. </exception>
        public async Task<Response> AddUserToGroupAsync(string group, string userId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateAddUserToGroupRequest(group, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="userId"/> is null. </exception>
        public Response AddUserToGroup(string group, string userId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateAddUserToGroupRequest(group, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveUserFromGroupRequest(string group, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="userId"/> is null. </exception>
        public async Task<Response> RemoveUserFromGroupAsync(string group, string userId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateRemoveUserFromGroupRequest(group, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> or <paramref name="userId"/> is null. </exception>
        public Response RemoveUserFromGroup(string group, string userId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateRemoveUserFromGroupRequest(group, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveUserFromAllGroupsRequest(string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/groups", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public async Task<Response> RemoveUserFromAllGroupsAsync(string userId, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateRemoveUserFromAllGroupsRequest(userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public Response RemoveUserFromAllGroups(string userId, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateRemoveUserFromAllGroupsRequest(userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGrantPermissionRequest(WebPubSubPermission permission, string connectionId, string targetName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/permissions/", false);
            uri.AppendPath(permission.ToSerialString(), true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (targetName != null)
            {
                uri.AppendQuery("targetName", targetName, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Grant permission to the connection. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> GrantPermissionAsync(WebPubSubPermission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateGrantPermissionRequest(permission, connectionId, targetName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Grant permission to the connection. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> is null. </exception>
        public Response GrantPermission(WebPubSubPermission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateGrantPermissionRequest(permission, connectionId, targetName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRevokePermissionRequest(WebPubSubPermission permission, string connectionId, string targetName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/permissions/", false);
            uri.AppendPath(permission.ToSerialString(), true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (targetName != null)
            {
                uri.AppendQuery("targetName", targetName, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Revoke permission for the connection. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> RevokePermissionAsync(WebPubSubPermission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateRevokePermissionRequest(permission, connectionId, targetName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Revoke permission for the connection. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> is null. </exception>
        public Response RevokePermission(WebPubSubPermission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateRevokePermissionRequest(permission, connectionId, targetName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCheckPermissionRequest(WebPubSubPermission permission, string connectionId, string targetName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/permissions/", false);
            uri.AppendPath(permission.ToSerialString(), true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (targetName != null)
            {
                uri.AppendQuery("targetName", targetName, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Check if a connection has permission to the specified action. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> CheckPermissionAsync(WebPubSubPermission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCheckPermissionRequest(permission, connectionId, targetName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if a connection has permission to the specified action. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionId"/> is null. </exception>
        public Response CheckPermission(WebPubSubPermission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCheckPermissionRequest(permission, connectionId, targetName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
