// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Messaging.WebPubSub
{
    /// <summary> The WebPubSubService service client. </summary>
    public partial class WebPubSubServiceClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get => _pipeline; }
        private HttpPipeline _pipeline;
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly WebPubSubServiceRestClient _restClient;

        /// <summary> Initializes a new instance of WebPubSubServiceClient for mocking. </summary>
        protected WebPubSubServiceClient()
        {
        }

        /// <summary> Generate token for the client to connect Azure Web PubSub service. </summary>
        /// <param name="userId"> User Id. </param>
        /// <param name="role"> Roles that the connection with the generated token will have. </param>
        /// <param name="minutesToExpire"> The expire time of the generated token. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   token: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        internal virtual async Task<Response> GenerateClientTokenImplAsync(string userId = null, IEnumerable<string> role = null, int? minutesToExpire = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.GenerateClientTokenImpl");
            scope.Start();
            try
            {
                return await _restClient.GenerateClientTokenImplAsync(userId, role, minutesToExpire, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generate token for the client to connect Azure Web PubSub service. </summary>
        /// <param name="userId"> User Id. </param>
        /// <param name="role"> Roles that the connection with the generated token will have. </param>
        /// <param name="minutesToExpire"> The expire time of the generated token. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   token: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        internal virtual Response GenerateClientTokenImpl(string userId = null, IEnumerable<string> role = null, int? minutesToExpire = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.GenerateClientTokenImpl");
            scope.Start();
            try
            {
                return _restClient.GenerateClientTokenImpl(userId, role, minutesToExpire, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> SendToAllAsync(RequestContent content, ContentType contentType, IEnumerable<string> excluded = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.SendToAll");
            scope.Start();
            try
            {
                return await _restClient.SendToAllAsync(content, contentType, excluded, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response SendToAll(RequestContent content, ContentType contentType, IEnumerable<string> excluded = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.SendToAll");
            scope.Start();
            try
            {
                return _restClient.SendToAll(content, contentType, excluded, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual async Task<Response> ConnectionExistsImplAsync(string connectionId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.ConnectionExistsImpl");
            scope.Start();
            try
            {
                return await _restClient.ConnectionExistsImplAsync(connectionId, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual Response ConnectionExistsImpl(string connectionId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.ConnectionExistsImpl");
            scope.Start();
            try
            {
                return _restClient.ConnectionExistsImpl(connectionId, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CloseConnectionAsync(string connectionId, string reason = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.CloseConnection");
            scope.Start();
            try
            {
                return await _restClient.CloseConnectionAsync(connectionId, reason, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CloseConnection(string connectionId, string reason = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.CloseConnection");
            scope.Start();
            try
            {
                return _restClient.CloseConnection(connectionId, reason, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> SendToConnectionAsync(string connectionId, RequestContent content, ContentType contentType, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.SendToConnection");
            scope.Start();
            try
            {
                return await _restClient.SendToConnectionAsync(connectionId, content, contentType, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response SendToConnection(string connectionId, RequestContent content, ContentType contentType, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.SendToConnection");
            scope.Start();
            try
            {
                return _restClient.SendToConnection(connectionId, content, contentType, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual async Task<Response> GroupExistsImplAsync(string group, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.GroupExistsImpl");
            scope.Start();
            try
            {
                return await _restClient.GroupExistsImplAsync(group, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual Response GroupExistsImpl(string group, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.GroupExistsImpl");
            scope.Start();
            try
            {
                return _restClient.GroupExistsImpl(group, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> SendToGroupAsync(string group, RequestContent content, ContentType contentType, IEnumerable<string> excluded = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.SendToGroup");
            scope.Start();
            try
            {
                return await _restClient.SendToGroupAsync(group, content, contentType, excluded, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response SendToGroup(string group, RequestContent content, ContentType contentType, IEnumerable<string> excluded = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.SendToGroup");
            scope.Start();
            try
            {
                return _restClient.SendToGroup(group, content, contentType, excluded, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> AddConnectionToGroupAsync(string group, string connectionId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.AddConnectionToGroup");
            scope.Start();
            try
            {
                return await _restClient.AddConnectionToGroupAsync(group, connectionId, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response AddConnectionToGroup(string group, string connectionId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.AddConnectionToGroup");
            scope.Start();
            try
            {
                return _restClient.AddConnectionToGroup(group, connectionId, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> RemoveConnectionFromGroupAsync(string group, string connectionId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.RemoveConnectionFromGroup");
            scope.Start();
            try
            {
                return await _restClient.RemoveConnectionFromGroupAsync(group, connectionId, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response RemoveConnectionFromGroup(string group, string connectionId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.RemoveConnectionFromGroup");
            scope.Start();
            try
            {
                return _restClient.RemoveConnectionFromGroup(group, connectionId, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual async Task<Response> UserExistsImplAsync(string userId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.UserExistsImpl");
            scope.Start();
            try
            {
                return await _restClient.UserExistsImplAsync(userId, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual Response UserExistsImpl(string userId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.UserExistsImpl");
            scope.Start();
            try
            {
                return _restClient.UserExistsImpl(userId, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="userId"> The user Id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> SendToUserAsync(string userId, RequestContent content, ContentType contentType, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.SendToUser");
            scope.Start();
            try
            {
                return await _restClient.SendToUserAsync(userId, content, contentType, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="userId"> The user Id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response SendToUser(string userId, RequestContent content, ContentType contentType, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.SendToUser");
            scope.Start();
            try
            {
                return _restClient.SendToUser(userId, content, contentType, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> AddUserToGroupAsync(string group, string userId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.AddUserToGroup");
            scope.Start();
            try
            {
                return await _restClient.AddUserToGroupAsync(group, userId, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response AddUserToGroup(string group, string userId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.AddUserToGroup");
            scope.Start();
            try
            {
                return _restClient.AddUserToGroup(group, userId, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> RemoveUserFromGroupAsync(string group, string userId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.RemoveUserFromGroup");
            scope.Start();
            try
            {
                return await _restClient.RemoveUserFromGroupAsync(group, userId, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response RemoveUserFromGroup(string group, string userId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.RemoveUserFromGroup");
            scope.Start();
            try
            {
                return _restClient.RemoveUserFromGroup(group, userId, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> RemoveUserFromAllGroupsAsync(string userId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.RemoveUserFromAllGroups");
            scope.Start();
            try
            {
                return await _restClient.RemoveUserFromAllGroupsAsync(userId, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response RemoveUserFromAllGroups(string userId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.RemoveUserFromAllGroups");
            scope.Start();
            try
            {
                return _restClient.RemoveUserFromAllGroups(userId, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grant permission to the connection. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual async Task<Response> GrantPermissionAsync(string permission, string connectionId, string targetName = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.GrantPermission");
            scope.Start();
            try
            {
                return await _restClient.GrantPermissionAsync(permission, connectionId, targetName, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grant permission to the connection. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual Response GrantPermission(string permission, string connectionId, string targetName = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.GrantPermission");
            scope.Start();
            try
            {
                return _restClient.GrantPermission(permission, connectionId, targetName, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Revoke permission for the connection. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual async Task<Response> RevokePermissionAsync(string permission, string connectionId, string targetName = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.RevokePermission");
            scope.Start();
            try
            {
                return await _restClient.RevokePermissionAsync(permission, connectionId, targetName, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Revoke permission for the connection. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual Response RevokePermission(string permission, string connectionId, string targetName = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.RevokePermission");
            scope.Start();
            try
            {
                return _restClient.RevokePermission(permission, connectionId, targetName, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if a connection has permission to the specified action. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual async Task<Response> CheckPermissionAsync(string permission, string connectionId, string targetName = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.CheckPermission");
            scope.Start();
            try
            {
                return await _restClient.CheckPermissionAsync(permission, connectionId, targetName, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if a connection has permission to the specified action. </summary>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        internal virtual Response CheckPermission(string permission, string connectionId, string targetName = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubServiceClient.CheckPermission");
            scope.Start();
            try
            {
                return _restClient.CheckPermission(permission, connectionId, targetName, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
