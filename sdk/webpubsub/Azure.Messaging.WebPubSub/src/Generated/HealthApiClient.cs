// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace Azure.Messaging.WebPubSub
{
    /// <summary> The HealthApi service client. </summary>
    internal partial class HealthApiClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get => _pipeline; }
        private HttpPipeline _pipeline;
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HealthApiRestClient _restClient;

        /// <summary> Initializes a new instance of HealthApiClient for mocking. </summary>
        protected HealthApiClient()
        {
        }

        /// <summary> Initializes a new instance of HealthApiClient. </summary>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public HealthApiClient(Uri endpoint = null, WebPubSubServiceClientOptions options = null)
        {
            endpoint ??= new Uri("");

            options ??= new WebPubSubServiceClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _restClient = new HealthApiRestClient(_clientDiagnostics, _pipeline, endpoint, options.Version);
        }

        /// <summary> Get service health status. </summary>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetServiceStatusAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("HealthApiClient.GetServiceStatus");
            scope.Start();
            try
            {
                return await _restClient.GetServiceStatusAsync(options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get service health status. </summary>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetServiceStatus(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("HealthApiClient.GetServiceStatus");
            scope.Start();
            try
            {
                return _restClient.GetServiceStatus(options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
