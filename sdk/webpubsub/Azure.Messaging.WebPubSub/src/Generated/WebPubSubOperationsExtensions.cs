// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Messaging.WebPubSub
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WebPubSubOperations.
    /// </summary>
    public static partial class WebPubSubOperationsExtensions
    {
            /// <summary>
            /// Broadcast content inside request body to all the connected client
            /// connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void SendToAll(this IWebPubSubOperations operations, string hub, string message, IList<string> excluded = default(IList<string>), string apiVersion = "2021-05-01-preview")
            {
                operations.SendToAllAsync(hub, message, excluded, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Broadcast content inside request body to all the connected client
            /// connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendToAllAsync(this IWebPubSubOperations operations, string hub, string message, IList<string> excluded = default(IList<string>), string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendToAllWithHttpMessagesAsync(hub, message, excluded, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Check if the connection with the given connectionId exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void ConnectionExists(this IWebPubSubOperations operations, string hub, string connectionId, string apiVersion = "2021-05-01-preview")
            {
                operations.ConnectionExistsAsync(hub, connectionId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if the connection with the given connectionId exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConnectionExistsAsync(this IWebPubSubOperations operations, string hub, string connectionId, string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ConnectionExistsWithHttpMessagesAsync(hub, connectionId, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Close the client connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void CloseClientConnection(this IWebPubSubOperations operations, string hub, string connectionId, string reason = default(string), string apiVersion = "2021-05-01-preview")
            {
                operations.CloseClientConnectionAsync(hub, connectionId, reason, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Close the client connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CloseClientConnectionAsync(this IWebPubSubOperations operations, string hub, string connectionId, string reason = default(string), string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CloseClientConnectionWithHttpMessagesAsync(hub, connectionId, reason, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Send content inside request body to the specific connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void SendToConnection(this IWebPubSubOperations operations, string hub, string connectionId, string message, string apiVersion = "2021-05-01-preview")
            {
                operations.SendToConnectionAsync(hub, connectionId, message, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send content inside request body to the specific connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendToConnectionAsync(this IWebPubSubOperations operations, string hub, string connectionId, string message, string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendToConnectionWithHttpMessagesAsync(hub, connectionId, message, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Check if there are any client connections inside the given group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void GroupExists(this IWebPubSubOperations operations, string hub, string group, string apiVersion = "2021-05-01-preview")
            {
                operations.GroupExistsAsync(hub, group, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if there are any client connections inside the given group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GroupExistsAsync(this IWebPubSubOperations operations, string hub, string group, string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GroupExistsWithHttpMessagesAsync(hub, group, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Send content inside request body to a group of connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void SendToGroup(this IWebPubSubOperations operations, string hub, string group, string message, IList<string> excluded = default(IList<string>), string apiVersion = "2021-05-01-preview")
            {
                operations.SendToGroupAsync(hub, group, message, excluded, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send content inside request body to a group of connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendToGroupAsync(this IWebPubSubOperations operations, string hub, string group, string message, IList<string> excluded = default(IList<string>), string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendToGroupWithHttpMessagesAsync(hub, group, message, excluded, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add a connection to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void AddConnectionToGroup(this IWebPubSubOperations operations, string hub, string group, string connectionId, string apiVersion = "2021-05-01-preview")
            {
                operations.AddConnectionToGroupAsync(hub, group, connectionId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a connection to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddConnectionToGroupAsync(this IWebPubSubOperations operations, string hub, string group, string connectionId, string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddConnectionToGroupWithHttpMessagesAsync(hub, group, connectionId, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove a connection from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void RemoveConnectionFromGroup(this IWebPubSubOperations operations, string hub, string group, string connectionId, string apiVersion = "2021-05-01-preview")
            {
                operations.RemoveConnectionFromGroupAsync(hub, group, connectionId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a connection from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveConnectionFromGroupAsync(this IWebPubSubOperations operations, string hub, string group, string connectionId, string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveConnectionFromGroupWithHttpMessagesAsync(hub, group, connectionId, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Check if there are any client connections connected for the given user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void UserExists(this IWebPubSubOperations operations, string hub, string userId, string apiVersion = "2021-05-01-preview")
            {
                operations.UserExistsAsync(hub, userId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if there are any client connections connected for the given user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UserExistsAsync(this IWebPubSubOperations operations, string hub, string userId, string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UserExistsWithHttpMessagesAsync(hub, userId, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Send content inside request body to the specific user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// The user Id.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void SendToUser(this IWebPubSubOperations operations, string hub, string userId, string message, string apiVersion = "2021-05-01-preview")
            {
                operations.SendToUserAsync(hub, userId, message, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send content inside request body to the specific user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// The user Id.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendToUserAsync(this IWebPubSubOperations operations, string hub, string userId, string message, string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendToUserWithHttpMessagesAsync(hub, userId, message, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add a user to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void AddUserToGroup(this IWebPubSubOperations operations, string hub, string group, string userId, string apiVersion = "2021-05-01-preview")
            {
                operations.AddUserToGroupAsync(hub, group, userId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a user to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddUserToGroupAsync(this IWebPubSubOperations operations, string hub, string group, string userId, string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddUserToGroupWithHttpMessagesAsync(hub, group, userId, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove a user from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void RemoveUserFromGroup(this IWebPubSubOperations operations, string hub, string group, string userId, string apiVersion = "2021-05-01-preview")
            {
                operations.RemoveUserFromGroupAsync(hub, group, userId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a user from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveUserFromGroupAsync(this IWebPubSubOperations operations, string hub, string group, string userId, string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveUserFromGroupWithHttpMessagesAsync(hub, group, userId, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove a user from all groups.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void RemoveUserFromAllGroups(this IWebPubSubOperations operations, string hub, string userId, string apiVersion = "2021-05-01-preview")
            {
                operations.RemoveUserFromAllGroupsAsync(hub, userId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a user from all groups.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveUserFromAllGroupsAsync(this IWebPubSubOperations operations, string hub, string userId, string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveUserFromAllGroupsWithHttpMessagesAsync(hub, userId, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Grant permission to the connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='targetName'>
            /// Optional. If not set, grant the permission to all the targets. If set,
            /// grant the permission to the specific target. The meaning of the target
            /// depends on the specific permission.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void GrantPermission(this IWebPubSubOperations operations, string hub, string permission, string connectionId, string targetName = default(string), string apiVersion = "2021-05-01-preview")
            {
                operations.GrantPermissionAsync(hub, permission, connectionId, targetName, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grant permission to the connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='targetName'>
            /// Optional. If not set, grant the permission to all the targets. If set,
            /// grant the permission to the specific target. The meaning of the target
            /// depends on the specific permission.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GrantPermissionAsync(this IWebPubSubOperations operations, string hub, string permission, string connectionId, string targetName = default(string), string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GrantPermissionWithHttpMessagesAsync(hub, permission, connectionId, targetName, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Revoke permission for the connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='targetName'>
            /// Optional. If not set, revoke the permission for all targets. If set, revoke
            /// the permission for the specific target. The meaning of the target depends
            /// on the specific permission.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void RevokePermission(this IWebPubSubOperations operations, string hub, string permission, string connectionId, string targetName = default(string), string apiVersion = "2021-05-01-preview")
            {
                operations.RevokePermissionAsync(hub, permission, connectionId, targetName, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke permission for the connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='targetName'>
            /// Optional. If not set, revoke the permission for all targets. If set, revoke
            /// the permission for the specific target. The meaning of the target depends
            /// on the specific permission.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokePermissionAsync(this IWebPubSubOperations operations, string hub, string permission, string connectionId, string targetName = default(string), string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevokePermissionWithHttpMessagesAsync(hub, permission, connectionId, targetName, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Check if a connection has permission to the specified action.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='targetName'>
            /// Optional. If not set, get the permission for all targets. If set, get the
            /// permission for the specific target. The meaning of the target depends on
            /// the specific permission.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static void CheckPermission(this IWebPubSubOperations operations, string hub, string permission, string connectionId, string targetName = default(string), string apiVersion = "2021-05-01-preview")
            {
                operations.CheckPermissionAsync(hub, permission, connectionId, targetName, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if a connection has permission to the specified action.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='targetName'>
            /// Optional. If not set, get the permission for all targets. If set, get the
            /// permission for the specific target. The meaning of the target depends on
            /// the specific permission.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CheckPermissionAsync(this IWebPubSubOperations operations, string hub, string permission, string connectionId, string targetName = default(string), string apiVersion = "2021-05-01-preview", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CheckPermissionWithHttpMessagesAsync(hub, permission, connectionId, targetName, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
