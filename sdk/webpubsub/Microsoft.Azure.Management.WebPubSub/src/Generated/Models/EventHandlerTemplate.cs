// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebPubSub.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// EventHandler template item settings.
    /// </summary>
    public partial class EventHandlerTemplate
    {
        /// <summary>
        /// Initializes a new instance of the EventHandlerTemplate class.
        /// </summary>
        public EventHandlerTemplate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EventHandlerTemplate class.
        /// </summary>
        /// <param name="urlTemplate">Gets or sets the EventHandler URL
        /// template. You can use a predefined parameter {hub} and {event}
        /// inside the template, the value of the EventHandler URL is
        /// dynamically calculated when the client request comes in.
        /// For example, UrlTemplate can be
        /// `http://example.com/api/{hub}/{event}`. The host part can't
        /// contains parameters.</param>
        /// <param name="userEventPattern">Gets or sets the matching pattern
        /// for event names.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any event name
        /// 2. Combine multiple events with ",", for example "event1,event2",
        /// it matches event "event1" and "event2"
        /// 3. The single event name, for example, "event1", it matches
        /// "event1"</param>
        /// <param name="systemEventPattern">Gets ot sets the system event
        /// pattern.
        /// There are 2 kind of patterns supported:
        /// 1. The single event name, for example, "connect", it matches
        /// "connect"
        /// 2. Combine multiple events with ",", for example
        /// "connect,disconnected", it matches event "connect" and
        /// "disconnected"</param>
        /// <param name="auth">Gets or sets the auth settings for an event
        /// handler. If not set, no auth is used.</param>
        public EventHandlerTemplate(string urlTemplate, string userEventPattern = default(string), string systemEventPattern = default(string), UpstreamAuthSettings auth = default(UpstreamAuthSettings))
        {
            UrlTemplate = urlTemplate;
            UserEventPattern = userEventPattern;
            SystemEventPattern = systemEventPattern;
            Auth = auth;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the EventHandler URL template. You can use a
        /// predefined parameter {hub} and {event} inside the template, the
        /// value of the EventHandler URL is dynamically calculated when the
        /// client request comes in.
        /// For example, UrlTemplate can be
        /// `http://example.com/api/{hub}/{event}`. The host part can't
        /// contains parameters.
        /// </summary>
        [JsonProperty(PropertyName = "urlTemplate")]
        public string UrlTemplate { get; set; }

        /// <summary>
        /// Gets or sets the matching pattern for event names.
        /// There are 3 kind of patterns supported:
        /// 1. "*", it to matches any event name
        /// 2. Combine multiple events with ",", for example "event1,event2",
        /// it matches event "event1" and "event2"
        /// 3. The single event name, for example, "event1", it matches
        /// "event1"
        /// </summary>
        [JsonProperty(PropertyName = "userEventPattern")]
        public string UserEventPattern { get; set; }

        /// <summary>
        /// Gets ot sets the system event pattern.
        /// There are 2 kind of patterns supported:
        /// 1. The single event name, for example, "connect", it matches
        /// "connect"
        /// 2. Combine multiple events with ",", for example
        /// "connect,disconnected", it matches event "connect" and
        /// "disconnected"
        /// </summary>
        [JsonProperty(PropertyName = "systemEventPattern")]
        public string SystemEventPattern { get; set; }

        /// <summary>
        /// Gets or sets the auth settings for an event handler. If not set, no
        /// auth is used.
        /// </summary>
        [JsonProperty(PropertyName = "auth")]
        public UpstreamAuthSettings Auth { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UrlTemplate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UrlTemplate");
            }
        }
    }
}
