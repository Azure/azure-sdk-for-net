// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WebPubSub.Models
{
    /// <summary> Throttle the client traffic by a custom JWT claim. </summary>
    public partial class TrafficThrottleByJwtCustomClaimRule : ClientTrafficControlRule
    {
        /// <summary> Initializes a new instance of <see cref="TrafficThrottleByJwtCustomClaimRule"/>. </summary>
        /// <param name="claimName"> The name of the claim in the JWT token. The message bytes with the same claim value will be aggregated. If the claim is not found in the token, the rule will be skipped. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="claimName"/> is null. </exception>
        public TrafficThrottleByJwtCustomClaimRule(string claimName)
        {
            Argument.AssertNotNull(claimName, nameof(claimName));

            ClaimName = claimName;
            TrafficThrottleType = ClientTrafficControlRuleDiscriminator.TrafficThrottleByJwtCustomClaimRule;
        }

        /// <summary> Initializes a new instance of <see cref="TrafficThrottleByJwtCustomClaimRule"/>. </summary>
        /// <param name="trafficThrottleType"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="claimName"> The name of the claim in the JWT token. The message bytes with the same claim value will be aggregated. If the claim is not found in the token, the rule will be skipped. </param>
        /// <param name="maxInboundMessageBytes"> Maximum accumulated inbound message bytes allowed for the same JWT signature within a time window. Clients with the same JWT claim will get disconnected if the message bytes exceeds this value. Default value is 1GB. </param>
        /// <param name="aggregationWindowInSeconds"> The aggregation window for the message bytes. The message bytes will be aggregated in this window and be reset after the window. Default value is 60 seconds. </param>
        internal TrafficThrottleByJwtCustomClaimRule(ClientTrafficControlRuleDiscriminator trafficThrottleType, IDictionary<string, BinaryData> serializedAdditionalRawData, string claimName, long? maxInboundMessageBytes, int? aggregationWindowInSeconds) : base(trafficThrottleType, serializedAdditionalRawData)
        {
            ClaimName = claimName;
            MaxInboundMessageBytes = maxInboundMessageBytes;
            AggregationWindowInSeconds = aggregationWindowInSeconds;
            TrafficThrottleType = trafficThrottleType;
        }

        /// <summary> Initializes a new instance of <see cref="TrafficThrottleByJwtCustomClaimRule"/> for deserialization. </summary>
        internal TrafficThrottleByJwtCustomClaimRule()
        {
        }

        /// <summary> The name of the claim in the JWT token. The message bytes with the same claim value will be aggregated. If the claim is not found in the token, the rule will be skipped. </summary>
        [WirePath("claimName")]
        public string ClaimName { get; set; }
        /// <summary> Maximum accumulated inbound message bytes allowed for the same JWT signature within a time window. Clients with the same JWT claim will get disconnected if the message bytes exceeds this value. Default value is 1GB. </summary>
        [WirePath("maxInboundMessageBytes")]
        public long? MaxInboundMessageBytes { get; set; }
        /// <summary> The aggregation window for the message bytes. The message bytes will be aggregated in this window and be reset after the window. Default value is 60 seconds. </summary>
        [WirePath("aggregationWindowInSeconds")]
        public int? AggregationWindowInSeconds { get; set; }
    }
}
