// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WebPubSub.Models
{
    /// <summary> A setting defines which kinds of events should be sent to which endpoint. </summary>
    public partial class WebPubSubEventListener
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WebPubSubEventListener"/>. </summary>
        /// <param name="filter">
        /// A base class for event filter which determines whether an event should be sent to an event listener.
        /// Please note <see cref="EventListenerFilter"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EventNameFilter"/>.
        /// </param>
        /// <param name="endpoint">
        /// An endpoint specifying where Web PubSub should send events to.
        /// Please note <see cref="EventListenerEndpoint"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="WebPubSubEventHubEndpoint"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filter"/> or <paramref name="endpoint"/> is null. </exception>
        public WebPubSubEventListener(EventListenerFilter filter, EventListenerEndpoint endpoint)
        {
            Argument.AssertNotNull(filter, nameof(filter));
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            Filter = filter;
            Endpoint = endpoint;
        }

        /// <summary> Initializes a new instance of <see cref="WebPubSubEventListener"/>. </summary>
        /// <param name="filter">
        /// A base class for event filter which determines whether an event should be sent to an event listener.
        /// Please note <see cref="EventListenerFilter"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EventNameFilter"/>.
        /// </param>
        /// <param name="endpoint">
        /// An endpoint specifying where Web PubSub should send events to.
        /// Please note <see cref="EventListenerEndpoint"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="WebPubSubEventHubEndpoint"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WebPubSubEventListener(EventListenerFilter filter, EventListenerEndpoint endpoint, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Filter = filter;
            Endpoint = endpoint;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="WebPubSubEventListener"/> for deserialization. </summary>
        internal WebPubSubEventListener()
        {
        }

        /// <summary>
        /// A base class for event filter which determines whether an event should be sent to an event listener.
        /// Please note <see cref="EventListenerFilter"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EventNameFilter"/>.
        /// </summary>
        [WirePath("filter")]
        public EventListenerFilter Filter { get; set; }
        /// <summary>
        /// An endpoint specifying where Web PubSub should send events to.
        /// Please note <see cref="EventListenerEndpoint"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="WebPubSubEventHubEndpoint"/>.
        /// </summary>
        [WirePath("endpoint")]
        public EventListenerEndpoint Endpoint { get; set; }
    }
}
