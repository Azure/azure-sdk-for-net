// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WebPubSub;

namespace Azure.ResourceManager.WebPubSub.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class WebPubSubModelFactory
    {
        /// <summary> Initializes a new instance of WebPubSubNameAvailability. </summary>
        /// <param name="nameAvailable"> Indicates whether the name is available or not. </param>
        /// <param name="reason"> The reason of the availability. Required if name is not available. </param>
        /// <param name="message"> The message of the operation. </param>
        /// <returns> A new <see cref="Models.WebPubSubNameAvailability"/> instance for mocking. </returns>
        public static WebPubSubNameAvailability WebPubSubNameAvailability(bool? nameAvailable = null, string reason = null, string message = null)
        {
            return new WebPubSubNameAvailability(nameAvailable, reason, message);
        }

        /// <summary> Initializes a new instance of SignalRServiceUsage. </summary>
        /// <param name="id"> Fully qualified ARM resource id. </param>
        /// <param name="currentValue"> Current value for the usage quota. </param>
        /// <param name="limit"> The maximum permitted value for the usage quota. If there is no limit, this value will be -1. </param>
        /// <param name="name"> Localizable String object containing the name and a localized value. </param>
        /// <param name="unit"> Representing the units of the usage quota. Possible values are: Count, Bytes, Seconds, Percent, CountPerSecond, BytesPerSecond. </param>
        /// <returns> A new <see cref="Models.SignalRServiceUsage"/> instance for mocking. </returns>
        public static SignalRServiceUsage SignalRServiceUsage(ResourceIdentifier id = null, long? currentValue = null, long? limit = null, SignalRServiceUsageName name = null, string unit = null)
        {
            return new SignalRServiceUsage(id, currentValue, limit, name, unit);
        }

        /// <summary> Initializes a new instance of SignalRServiceUsageName. </summary>
        /// <param name="value"> The identifier of the usage. </param>
        /// <param name="localizedValue"> Localized name of the usage. </param>
        /// <returns> A new <see cref="Models.SignalRServiceUsageName"/> instance for mocking. </returns>
        public static SignalRServiceUsageName SignalRServiceUsageName(string value = null, string localizedValue = null)
        {
            return new SignalRServiceUsageName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of WebPubSubData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The billing information of the resource. </param>
        /// <param name="identity"> A class represent managed identities used for request and response. Current supported identity types: None, SystemAssigned, UserAssigned. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="externalIP"> The publicly accessible IP of the resource. </param>
        /// <param name="hostName"> FQDN of the service instance. </param>
        /// <param name="publicPort"> The publicly accessible port of the resource which is designed for browser/client side usage. </param>
        /// <param name="serverPort"> The publicly accessible port of the resource which is designed for customer server side usage. </param>
        /// <param name="version"> Version of the resource. Probably you need the same or higher version of client SDKs. </param>
        /// <param name="privateEndpointConnections"> Private endpoint connections to the resource. </param>
        /// <param name="sharedPrivateLinkResources"> The list of shared private link resources. </param>
        /// <param name="isClientCertEnabled"> TLS settings for the resource. </param>
        /// <param name="hostNamePrefix"> Deprecated. </param>
        /// <param name="liveTraceConfiguration"> Live trace configuration of a Microsoft.SignalRService resource. </param>
        /// <param name="resourceLogCategories"> Resource log configuration of a Microsoft.SignalRService resource. </param>
        /// <param name="networkAcls"> Network ACLs for the resource. </param>
        /// <param name="publicNetworkAccess">
        /// Enable or disable public network access. Default to &quot;Enabled&quot;.
        /// When it&apos;s Enabled, network ACLs still apply.
        /// When it&apos;s Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </param>
        /// <param name="isLocalAuthDisabled">
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won&apos;t work.
        /// </param>
        /// <param name="isAadAuthDisabled">
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won&apos;t work.
        /// </param>
        /// <returns> A new <see cref="WebPubSub.WebPubSubData"/> instance for mocking. </returns>
        public static WebPubSubData WebPubSubData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BillingInfoSku sku = null, ManagedServiceIdentity identity = null, WebPubSubProvisioningState? provisioningState = null, string externalIP = null, string hostName = null, int? publicPort = null, int? serverPort = null, string version = null, IEnumerable<WebPubSubPrivateEndpointConnectionData> privateEndpointConnections = null, IEnumerable<WebPubSubSharedPrivateLinkData> sharedPrivateLinkResources = null, bool? isClientCertEnabled = null, string hostNamePrefix = null, LiveTraceConfiguration liveTraceConfiguration = null, IEnumerable<ResourceLogCategory> resourceLogCategories = null, WebPubSubNetworkAcls networkAcls = null, string publicNetworkAccess = null, bool? isLocalAuthDisabled = null, bool? isAadAuthDisabled = null)
        {
            tags ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<WebPubSubPrivateEndpointConnectionData>();
            sharedPrivateLinkResources ??= new List<WebPubSubSharedPrivateLinkData>();
            resourceLogCategories ??= new List<ResourceLogCategory>();

            return new WebPubSubData(id, name, resourceType, systemData, tags, location, sku, identity, provisioningState, externalIP, hostName, publicPort, serverPort, version, privateEndpointConnections?.ToList(), sharedPrivateLinkResources?.ToList(), isClientCertEnabled != null ? new WebPubSubTlsSettings(isClientCertEnabled) : null, hostNamePrefix, liveTraceConfiguration, resourceLogCategories != null ? new ResourceLogConfiguration(resourceLogCategories?.ToList()) : null, networkAcls, publicNetworkAccess, isLocalAuthDisabled, isAadAuthDisabled);
        }

        /// <summary> Initializes a new instance of BillingInfoSku. </summary>
        /// <param name="name">
        /// The name of the SKU. Required.
        /// 
        /// Allowed values: Standard_S1, Free_F1
        /// </param>
        /// <param name="tier">
        /// Optional tier of this particular SKU. &apos;Standard&apos; or &apos;Free&apos;. 
        /// 
        /// `Basic` is deprecated, use `Standard` instead.
        /// </param>
        /// <param name="size"> Not used. Retained for future use. </param>
        /// <param name="family"> Not used. Retained for future use. </param>
        /// <param name="capacity">
        /// Optional, integer. The unit count of the resource. 1 by default.
        /// 
        /// If present, following values are allowed:
        ///     Free: 1
        ///     Standard: 1,2,5,10,20,50,100
        /// </param>
        /// <returns> A new <see cref="Models.BillingInfoSku"/> instance for mocking. </returns>
        public static BillingInfoSku BillingInfoSku(string name = null, WebPubSubSkuTier? tier = null, string size = null, string family = null, int? capacity = null)
        {
            return new BillingInfoSku(name, tier, size, family, capacity);
        }

        /// <summary> Initializes a new instance of WebPubSubPrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="privateEndpointId"> Private endpoint. </param>
        /// <param name="groupIds"> Group IDs. </param>
        /// <param name="connectionState"> Connection state of the private endpoint connection. </param>
        /// <returns> A new <see cref="WebPubSub.WebPubSubPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static WebPubSubPrivateEndpointConnectionData WebPubSubPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, WebPubSubProvisioningState? provisioningState = null, ResourceIdentifier privateEndpointId = null, IEnumerable<string> groupIds = null, WebPubSubPrivateLinkServiceConnectionState connectionState = null)
        {
            groupIds ??= new List<string>();

            return new WebPubSubPrivateEndpointConnectionData(id, name, resourceType, systemData, provisioningState, privateEndpointId != null ? new PrivateEndpoint(privateEndpointId) : null, groupIds?.ToList(), connectionState);
        }

        /// <summary> Initializes a new instance of WebPubSubPrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. </param>
        /// <param name="description"> The reason for approval/rejection of the connection. </param>
        /// <param name="actionsRequired"> A message indicating if changes on the service provider require any updates on the consumer. </param>
        /// <returns> A new <see cref="Models.WebPubSubPrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static WebPubSubPrivateLinkServiceConnectionState WebPubSubPrivateLinkServiceConnectionState(WebPubSubPrivateLinkServiceConnectionStatus? status = null, string description = null, string actionsRequired = null)
        {
            return new WebPubSubPrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of WebPubSubSharedPrivateLinkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"> The group id from the provider of resource the shared private link resource is for. </param>
        /// <param name="privateLinkResourceId"> The resource id of the resource the shared private link resource is for. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="requestMessage"> The request message for requesting approval of the shared private link resource. </param>
        /// <param name="status"> Status of the shared private link resource. </param>
        /// <returns> A new <see cref="WebPubSub.WebPubSubSharedPrivateLinkData"/> instance for mocking. </returns>
        public static WebPubSubSharedPrivateLinkData WebPubSubSharedPrivateLinkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string groupId = null, ResourceIdentifier privateLinkResourceId = null, WebPubSubProvisioningState? provisioningState = null, string requestMessage = null, WebPubSubSharedPrivateLinkStatus? status = null)
        {
            return new WebPubSubSharedPrivateLinkData(id, name, resourceType, systemData, groupId, privateLinkResourceId, provisioningState, requestMessage, status);
        }

        /// <summary> Initializes a new instance of LiveTraceConfiguration. </summary>
        /// <param name="enabled">
        /// Indicates whether or not enable live trace.
        /// When it&apos;s set to true, live trace client can connect to the service.
        /// Otherwise, live trace client can&apos;t connect to the service, so that you are unable to receive any log, no matter what you configure in &quot;categories&quot;.
        /// Available values: true, false.
        /// Case insensitive.
        /// </param>
        /// <param name="categories"> Gets or sets the list of category configurations. </param>
        /// <returns> A new <see cref="Models.LiveTraceConfiguration"/> instance for mocking. </returns>
        public static LiveTraceConfiguration LiveTraceConfiguration(string enabled = null, IEnumerable<LiveTraceCategory> categories = null)
        {
            categories ??= new List<LiveTraceCategory>();

            return new LiveTraceConfiguration(enabled, categories?.ToList());
        }

        /// <summary> Initializes a new instance of LiveTraceCategory. </summary>
        /// <param name="name">
        /// Gets or sets the live trace category&apos;s name.
        /// Available values: ConnectivityLogs, MessagingLogs.
        /// Case insensitive.
        /// </param>
        /// <param name="enabled">
        /// Indicates whether or the live trace category is enabled.
        /// Available values: true, false.
        /// Case insensitive.
        /// </param>
        /// <returns> A new <see cref="Models.LiveTraceCategory"/> instance for mocking. </returns>
        public static LiveTraceCategory LiveTraceCategory(string name = null, string enabled = null)
        {
            return new LiveTraceCategory(name, enabled);
        }

        /// <summary> Initializes a new instance of ResourceLogCategory. </summary>
        /// <param name="name">
        /// Gets or sets the resource log category&apos;s name.
        /// Available values: ConnectivityLogs, MessagingLogs.
        /// Case insensitive.
        /// </param>
        /// <param name="enabled">
        /// Indicates whether or the resource log category is enabled.
        /// Available values: true, false.
        /// Case insensitive.
        /// </param>
        /// <returns> A new <see cref="Models.ResourceLogCategory"/> instance for mocking. </returns>
        public static ResourceLogCategory ResourceLogCategory(string name = null, string enabled = null)
        {
            return new ResourceLogCategory(name, enabled);
        }

        /// <summary> Initializes a new instance of WebPubSubNetworkAcls. </summary>
        /// <param name="defaultAction"> Azure Networking ACL Action. </param>
        /// <param name="publicNetwork"> Network ACL. </param>
        /// <param name="privateEndpoints"> ACLs for requests from private endpoints. </param>
        /// <returns> A new <see cref="Models.WebPubSubNetworkAcls"/> instance for mocking. </returns>
        public static WebPubSubNetworkAcls WebPubSubNetworkAcls(AclAction? defaultAction = null, PublicNetworkAcls publicNetwork = null, IEnumerable<PrivateEndpointAcl> privateEndpoints = null)
        {
            privateEndpoints ??= new List<PrivateEndpointAcl>();

            return new WebPubSubNetworkAcls(defaultAction, publicNetwork, privateEndpoints?.ToList());
        }

        /// <summary> Initializes a new instance of PublicNetworkAcls. </summary>
        /// <param name="allow"> Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI. </param>
        /// <param name="deny"> Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI. </param>
        /// <returns> A new <see cref="Models.PublicNetworkAcls"/> instance for mocking. </returns>
        public static PublicNetworkAcls PublicNetworkAcls(IEnumerable<WebPubSubRequestType> allow = null, IEnumerable<WebPubSubRequestType> deny = null)
        {
            allow ??= new List<WebPubSubRequestType>();
            deny ??= new List<WebPubSubRequestType>();

            return new PublicNetworkAcls(allow?.ToList(), deny?.ToList());
        }

        /// <summary> Initializes a new instance of PrivateEndpointAcl. </summary>
        /// <param name="allow"> Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI. </param>
        /// <param name="deny"> Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI. </param>
        /// <param name="name"> Name of the private endpoint connection. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointAcl"/> instance for mocking. </returns>
        public static PrivateEndpointAcl PrivateEndpointAcl(IEnumerable<WebPubSubRequestType> allow = null, IEnumerable<WebPubSubRequestType> deny = null, string name = null)
        {
            allow ??= new List<WebPubSubRequestType>();
            deny ??= new List<WebPubSubRequestType>();

            return new PrivateEndpointAcl(allow?.ToList(), deny?.ToList(), name);
        }

        /// <summary> Initializes a new instance of WebPubSubHubData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of a hub. </param>
        /// <returns> A new <see cref="WebPubSub.WebPubSubHubData"/> instance for mocking. </returns>
        public static WebPubSubHubData WebPubSubHubData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, WebPubSubHubProperties properties = null)
        {
            return new WebPubSubHubData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of WebPubSubHubProperties. </summary>
        /// <param name="eventHandlers"> Event handler of a hub. </param>
        /// <param name="anonymousConnectPolicy"> The settings for configuring if anonymous connections are allowed for this hub: &quot;allow&quot; or &quot;deny&quot;. Default to &quot;deny&quot;. </param>
        /// <returns> A new <see cref="Models.WebPubSubHubProperties"/> instance for mocking. </returns>
        public static WebPubSubHubProperties WebPubSubHubProperties(IEnumerable<WebPubSubEventHandler> eventHandlers = null, string anonymousConnectPolicy = null)
        {
            eventHandlers ??= new List<WebPubSubEventHandler>();

            return new WebPubSubHubProperties(eventHandlers?.ToList(), anonymousConnectPolicy);
        }

        /// <summary> Initializes a new instance of WebPubSubEventHandler. </summary>
        /// <param name="urlTemplate">
        /// Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
        /// For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can&apos;t contains parameters.
        /// </param>
        /// <param name="userEventPattern">
        /// Gets or sets the matching pattern for event names.
        /// There are 3 kind of patterns supported:
        ///     1. &quot;*&quot;, it to matches any event name
        ///     2. Combine multiple events with &quot;,&quot;, for example &quot;event1,event2&quot;, it matches event &quot;event1&quot; and &quot;event2&quot;
        ///     3. The single event name, for example, &quot;event1&quot;, it matches &quot;event1&quot;
        /// </param>
        /// <param name="systemEvents"> Gets ot sets the list of system events. </param>
        /// <param name="auth"> Upstream auth settings. If not set, no auth is used for upstream messages. </param>
        /// <returns> A new <see cref="Models.WebPubSubEventHandler"/> instance for mocking. </returns>
        public static WebPubSubEventHandler WebPubSubEventHandler(string urlTemplate = null, string userEventPattern = null, IEnumerable<string> systemEvents = null, UpstreamAuthSettings auth = null)
        {
            systemEvents ??= new List<string>();

            return new WebPubSubEventHandler(urlTemplate, userEventPattern, systemEvents?.ToList(), auth);
        }

        /// <summary> Initializes a new instance of UpstreamAuthSettings. </summary>
        /// <param name="authType"> Upstream auth type enum. </param>
        /// <param name="managedIdentityResource"> Managed identity settings for upstream. </param>
        /// <returns> A new <see cref="Models.UpstreamAuthSettings"/> instance for mocking. </returns>
        public static UpstreamAuthSettings UpstreamAuthSettings(UpstreamAuthType? authType = null, string managedIdentityResource = null)
        {
            return new UpstreamAuthSettings(authType, managedIdentityResource != null ? new ManagedIdentitySettings(managedIdentityResource) : null);
        }

        /// <summary> Initializes a new instance of WebPubSubKeys. </summary>
        /// <param name="primaryKey"> The primary access key. </param>
        /// <param name="secondaryKey"> The secondary access key. </param>
        /// <param name="primaryConnectionString"> Connection string constructed via the primaryKey. </param>
        /// <param name="secondaryConnectionString"> Connection string constructed via the secondaryKey. </param>
        /// <returns> A new <see cref="Models.WebPubSubKeys"/> instance for mocking. </returns>
        public static WebPubSubKeys WebPubSubKeys(string primaryKey = null, string secondaryKey = null, string primaryConnectionString = null, string secondaryConnectionString = null)
        {
            return new WebPubSubKeys(primaryKey, secondaryKey, primaryConnectionString, secondaryConnectionString);
        }

        /// <summary> Initializes a new instance of WebPubSubPrivateLink. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"> Group Id of the private link resource. </param>
        /// <param name="requiredMembers"> Required members of the private link resource. </param>
        /// <param name="requiredZoneNames"> Required private DNS zone names. </param>
        /// <param name="shareablePrivateLinkTypes"> The list of resources that are onboarded to private link service. </param>
        /// <returns> A new <see cref="Models.WebPubSubPrivateLink"/> instance for mocking. </returns>
        public static WebPubSubPrivateLink WebPubSubPrivateLink(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null, IEnumerable<ShareablePrivateLinkType> shareablePrivateLinkTypes = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();
            shareablePrivateLinkTypes ??= new List<ShareablePrivateLinkType>();

            return new WebPubSubPrivateLink(id, name, resourceType, systemData, groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList(), shareablePrivateLinkTypes?.ToList());
        }

        /// <summary> Initializes a new instance of ShareablePrivateLinkType. </summary>
        /// <param name="name"> The name of the resource type that has been onboarded to private link service. </param>
        /// <param name="properties"> Describes the properties of a resource type that has been onboarded to private link service. </param>
        /// <returns> A new <see cref="Models.ShareablePrivateLinkType"/> instance for mocking. </returns>
        public static ShareablePrivateLinkType ShareablePrivateLinkType(string name = null, ShareablePrivateLinkProperties properties = null)
        {
            return new ShareablePrivateLinkType(name, properties);
        }

        /// <summary> Initializes a new instance of ShareablePrivateLinkProperties. </summary>
        /// <param name="description"> The description of the resource type that has been onboarded to private link service. </param>
        /// <param name="groupId"> The resource provider group id for the resource that has been onboarded to private link service. </param>
        /// <param name="shareablePrivateLinkPropertiesType"> The resource provider type for the resource that has been onboarded to private link service. </param>
        /// <returns> A new <see cref="Models.ShareablePrivateLinkProperties"/> instance for mocking. </returns>
        public static ShareablePrivateLinkProperties ShareablePrivateLinkProperties(string description = null, string groupId = null, string shareablePrivateLinkPropertiesType = null)
        {
            return new ShareablePrivateLinkProperties(description, groupId, shareablePrivateLinkPropertiesType);
        }

        /// <summary> Initializes a new instance of WebPubSubSku. </summary>
        /// <param name="resourceType"> The resource type that this object applies to. </param>
        /// <param name="sku"> The billing information of the resource. </param>
        /// <param name="capacity"> Describes scaling information of a sku. </param>
        /// <returns> A new <see cref="Models.WebPubSubSku"/> instance for mocking. </returns>
        public static WebPubSubSku WebPubSubSku(ResourceType? resourceType = null, BillingInfoSku sku = null, WebPubSubSkuCapacity capacity = null)
        {
            return new WebPubSubSku(resourceType, sku, capacity);
        }

        /// <summary> Initializes a new instance of WebPubSubSkuCapacity. </summary>
        /// <param name="minimum"> The lowest permitted capacity for this resource. </param>
        /// <param name="maximum"> The highest permitted capacity for this resource. </param>
        /// <param name="default"> The default capacity. </param>
        /// <param name="allowedValues"> Allows capacity value list. </param>
        /// <param name="scaleType"> The scale type applicable to the sku. </param>
        /// <returns> A new <see cref="Models.WebPubSubSkuCapacity"/> instance for mocking. </returns>
        public static WebPubSubSkuCapacity WebPubSubSkuCapacity(int? minimum = null, int? maximum = null, int? @default = null, IEnumerable<int> allowedValues = null, WebPubSubScaleType? scaleType = null)
        {
            allowedValues ??= new List<int>();

            return new WebPubSubSkuCapacity(minimum, maximum, @default, allowedValues?.ToList(), scaleType);
        }
    }
}
