// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WebPubSub.Models
{
    public partial class EventHandlerSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Items))
            {
                writer.WritePropertyName("items");
                writer.WriteStartObject();
                foreach (var item in Items)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStartArray();
                    foreach (var item0 in item.Value)
                    {
                        writer.WriteObjectValue(item0);
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static EventHandlerSettings DeserializeEventHandlerSettings(JsonElement element)
        {
            Optional<IDictionary<string, IList<EventHandlerTemplate>>> items = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("items"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, IList<EventHandlerTemplate>> dictionary = new Dictionary<string, IList<EventHandlerTemplate>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        List<EventHandlerTemplate> array = new List<EventHandlerTemplate>();
                        foreach (var item in property0.Value.EnumerateArray())
                        {
                            array.Add(EventHandlerTemplate.DeserializeEventHandlerTemplate(item));
                        }
                        dictionary.Add(property0.Name, array);
                    }
                    items = dictionary;
                    continue;
                }
            }
            return new EventHandlerSettings(Optional.ToDictionary(items));
        }
    }
}
