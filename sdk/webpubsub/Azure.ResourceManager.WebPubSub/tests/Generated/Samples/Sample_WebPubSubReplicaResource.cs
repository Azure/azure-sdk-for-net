// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WebPubSub.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WebPubSub.Samples
{
    public partial class Sample_WebPubSubReplicaResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_WebPubSubReplicasGet()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubReplicas_Get.json
            // this example is just showing the usage of "WebPubSubReplicas_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubReplicaResource created on azure
            // for more information of creating WebPubSubReplicaResource, please refer to the document of WebPubSubReplicaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string replicaName = "myWebPubSubService-eastus";
            ResourceIdentifier webPubSubReplicaResourceId = WebPubSubReplicaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, replicaName);
            WebPubSubReplicaResource webPubSubReplica = client.GetWebPubSubReplicaResource(webPubSubReplicaResourceId);

            // invoke the operation
            WebPubSubReplicaResource result = await webPubSubReplica.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebPubSubReplicaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_WebPubSubReplicasDelete()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubReplicas_Delete.json
            // this example is just showing the usage of "WebPubSubReplicas_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubReplicaResource created on azure
            // for more information of creating WebPubSubReplicaResource, please refer to the document of WebPubSubReplicaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string replicaName = "myWebPubSubService-eastus";
            ResourceIdentifier webPubSubReplicaResourceId = WebPubSubReplicaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, replicaName);
            WebPubSubReplicaResource webPubSubReplica = client.GetWebPubSubReplicaResource(webPubSubReplicaResourceId);

            // invoke the operation
            await webPubSubReplica.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_WebPubSubReplicasUpdate()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubReplicas_Update.json
            // this example is just showing the usage of "WebPubSubReplicas_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubReplicaResource created on azure
            // for more information of creating WebPubSubReplicaResource, please refer to the document of WebPubSubReplicaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string replicaName = "myWebPubSubService-eastus";
            ResourceIdentifier webPubSubReplicaResourceId = WebPubSubReplicaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, replicaName);
            WebPubSubReplicaResource webPubSubReplica = client.GetWebPubSubReplicaResource(webPubSubReplicaResourceId);

            // invoke the operation
            WebPubSubReplicaData data = new WebPubSubReplicaData(new AzureLocation("eastus"))
            {
                Sku = new BillingInfoSku("Premium_P1")
                {
                    Tier = WebPubSubSkuTier.Premium,
                    Capacity = 1,
                },
                ResourceStopped = "false",
                Tags =
{
["key1"] = "value1"
},
            };
            ArmOperation<WebPubSubReplicaResource> lro = await webPubSubReplica.UpdateAsync(WaitUntil.Completed, data);
            WebPubSubReplicaResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebPubSubReplicaData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetReplicaSkusWebPubSubs_WebPubSubListReplicaSkus()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSub_ListReplicaSkus.json
            // this example is just showing the usage of "WebPubSub_ListReplicaSkus" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubReplicaResource created on azure
            // for more information of creating WebPubSubReplicaResource, please refer to the document of WebPubSubReplicaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string replicaName = "myWebPubSubService-eastus";
            ResourceIdentifier webPubSubReplicaResourceId = WebPubSubReplicaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, replicaName);
            WebPubSubReplicaResource webPubSubReplica = client.GetWebPubSubReplicaResource(webPubSubReplicaResourceId);

            // invoke the operation and iterate over the result
            await foreach (WebPubSubSku item in webPubSubReplica.GetReplicaSkusWebPubSubsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Restart_WebPubSubReplicasRestart()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubReplicas_Restart.json
            // this example is just showing the usage of "WebPubSubReplicas_Restart" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubReplicaResource created on azure
            // for more information of creating WebPubSubReplicaResource, please refer to the document of WebPubSubReplicaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string replicaName = "myWebPubSubService-eastus";
            ResourceIdentifier webPubSubReplicaResourceId = WebPubSubReplicaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, replicaName);
            WebPubSubReplicaResource webPubSubReplica = client.GetWebPubSubReplicaResource(webPubSubReplicaResourceId);

            // invoke the operation
            await webPubSubReplica.RestartAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }
    }
}
