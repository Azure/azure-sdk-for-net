// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.WebPubSub.Samples
{
    public partial class Sample_WebPubSubReplicaSharedPrivateLinkResourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_WebPubSubReplicaSharedPrivateLinkResourcesCreateOrUpdate()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubReplicaSharedPrivateLinkResources_CreateOrUpdate.json
            // this example is just showing the usage of "WebPubSubReplicaSharedPrivateLinkResources_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubReplicaResource created on azure
            // for more information of creating WebPubSubReplicaResource, please refer to the document of WebPubSubReplicaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string replicaName = "myWebPubSubService-eastus";
            ResourceIdentifier webPubSubReplicaResourceId = WebPubSubReplicaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, replicaName);
            WebPubSubReplicaResource webPubSubReplica = client.GetWebPubSubReplicaResource(webPubSubReplicaResourceId);

            // get the collection of this WebPubSubReplicaSharedPrivateLinkResource
            WebPubSubReplicaSharedPrivateLinkResourceCollection collection = webPubSubReplica.GetWebPubSubReplicaSharedPrivateLinkResources();

            // invoke the operation
            string sharedPrivateLinkResourceName = "upstream";
            WebPubSubSharedPrivateLinkData data = new WebPubSubSharedPrivateLinkData
            {
                GroupId = "sites",
                PrivateLinkResourceId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
                RequestMessage = "Please approve",
            };
            ArmOperation<WebPubSubReplicaSharedPrivateLinkResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sharedPrivateLinkResourceName, data);
            WebPubSubReplicaSharedPrivateLinkResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebPubSubSharedPrivateLinkData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_WebPubSubReplicaSharedPrivateLinkResourcesGet()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubReplicaSharedPrivateLinkResources_Get.json
            // this example is just showing the usage of "WebPubSubReplicaSharedPrivateLinkResources_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubReplicaResource created on azure
            // for more information of creating WebPubSubReplicaResource, please refer to the document of WebPubSubReplicaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string replicaName = "myWebPubSubService-eastus";
            ResourceIdentifier webPubSubReplicaResourceId = WebPubSubReplicaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, replicaName);
            WebPubSubReplicaResource webPubSubReplica = client.GetWebPubSubReplicaResource(webPubSubReplicaResourceId);

            // get the collection of this WebPubSubReplicaSharedPrivateLinkResource
            WebPubSubReplicaSharedPrivateLinkResourceCollection collection = webPubSubReplica.GetWebPubSubReplicaSharedPrivateLinkResources();

            // invoke the operation
            string sharedPrivateLinkResourceName = "upstream";
            WebPubSubReplicaSharedPrivateLinkResource result = await collection.GetAsync(sharedPrivateLinkResourceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebPubSubSharedPrivateLinkData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_WebPubSubReplicaSharedPrivateLinkResourcesList()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubReplicaSharedPrivateLinkResources_List.json
            // this example is just showing the usage of "WebPubSubReplicaSharedPrivateLinkResources_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubReplicaResource created on azure
            // for more information of creating WebPubSubReplicaResource, please refer to the document of WebPubSubReplicaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string replicaName = "myWebPubSubService-eastus";
            ResourceIdentifier webPubSubReplicaResourceId = WebPubSubReplicaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, replicaName);
            WebPubSubReplicaResource webPubSubReplica = client.GetWebPubSubReplicaResource(webPubSubReplicaResourceId);

            // get the collection of this WebPubSubReplicaSharedPrivateLinkResource
            WebPubSubReplicaSharedPrivateLinkResourceCollection collection = webPubSubReplica.GetWebPubSubReplicaSharedPrivateLinkResources();

            // invoke the operation and iterate over the result
            await foreach (WebPubSubReplicaSharedPrivateLinkResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WebPubSubSharedPrivateLinkData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_WebPubSubReplicaSharedPrivateLinkResourcesGet()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubReplicaSharedPrivateLinkResources_Get.json
            // this example is just showing the usage of "WebPubSubReplicaSharedPrivateLinkResources_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubReplicaResource created on azure
            // for more information of creating WebPubSubReplicaResource, please refer to the document of WebPubSubReplicaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string replicaName = "myWebPubSubService-eastus";
            ResourceIdentifier webPubSubReplicaResourceId = WebPubSubReplicaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, replicaName);
            WebPubSubReplicaResource webPubSubReplica = client.GetWebPubSubReplicaResource(webPubSubReplicaResourceId);

            // get the collection of this WebPubSubReplicaSharedPrivateLinkResource
            WebPubSubReplicaSharedPrivateLinkResourceCollection collection = webPubSubReplica.GetWebPubSubReplicaSharedPrivateLinkResources();

            // invoke the operation
            string sharedPrivateLinkResourceName = "upstream";
            bool result = await collection.ExistsAsync(sharedPrivateLinkResourceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_WebPubSubReplicaSharedPrivateLinkResourcesGet()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubReplicaSharedPrivateLinkResources_Get.json
            // this example is just showing the usage of "WebPubSubReplicaSharedPrivateLinkResources_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubReplicaResource created on azure
            // for more information of creating WebPubSubReplicaResource, please refer to the document of WebPubSubReplicaResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string replicaName = "myWebPubSubService-eastus";
            ResourceIdentifier webPubSubReplicaResourceId = WebPubSubReplicaResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, replicaName);
            WebPubSubReplicaResource webPubSubReplica = client.GetWebPubSubReplicaResource(webPubSubReplicaResourceId);

            // get the collection of this WebPubSubReplicaSharedPrivateLinkResource
            WebPubSubReplicaSharedPrivateLinkResourceCollection collection = webPubSubReplica.GetWebPubSubReplicaSharedPrivateLinkResources();

            // invoke the operation
            string sharedPrivateLinkResourceName = "upstream";
            NullableResponse<WebPubSubReplicaSharedPrivateLinkResource> response = await collection.GetIfExistsAsync(sharedPrivateLinkResourceName);
            WebPubSubReplicaSharedPrivateLinkResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WebPubSubSharedPrivateLinkData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
