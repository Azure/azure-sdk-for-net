// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.WebPubSub.Samples
{
    public partial class Sample_WebPubSubCustomCertificateCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_WebPubSubCustomCertificatesCreateOrUpdate()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubCustomCertificates_CreateOrUpdate.json
            // this example is just showing the usage of "WebPubSubCustomCertificates_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // get the collection of this WebPubSubCustomCertificateResource
            WebPubSubCustomCertificateCollection collection = webPubSub.GetWebPubSubCustomCertificates();

            // invoke the operation
            string certificateName = "myCert";
            WebPubSubCustomCertificateData data = new WebPubSubCustomCertificateData(new Uri("https://myvault.keyvault.azure.net/"), "mycert")
            {
                KeyVaultSecretVersion = "bb6a44b2743f47f68dad0d6cc9756432",
            };
            ArmOperation<WebPubSubCustomCertificateResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, certificateName, data);
            WebPubSubCustomCertificateResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebPubSubCustomCertificateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_WebPubSubCustomCertificatesGet()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubCustomCertificates_Get.json
            // this example is just showing the usage of "WebPubSubCustomCertificates_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // get the collection of this WebPubSubCustomCertificateResource
            WebPubSubCustomCertificateCollection collection = webPubSub.GetWebPubSubCustomCertificates();

            // invoke the operation
            string certificateName = "myCert";
            WebPubSubCustomCertificateResource result = await collection.GetAsync(certificateName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebPubSubCustomCertificateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_WebPubSubCustomCertificatesList()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubCustomCertificates_List.json
            // this example is just showing the usage of "WebPubSubCustomCertificates_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // get the collection of this WebPubSubCustomCertificateResource
            WebPubSubCustomCertificateCollection collection = webPubSub.GetWebPubSubCustomCertificates();

            // invoke the operation and iterate over the result
            await foreach (WebPubSubCustomCertificateResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WebPubSubCustomCertificateData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_WebPubSubCustomCertificatesGet()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubCustomCertificates_Get.json
            // this example is just showing the usage of "WebPubSubCustomCertificates_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // get the collection of this WebPubSubCustomCertificateResource
            WebPubSubCustomCertificateCollection collection = webPubSub.GetWebPubSubCustomCertificates();

            // invoke the operation
            string certificateName = "myCert";
            bool result = await collection.ExistsAsync(certificateName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_WebPubSubCustomCertificatesGet()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/preview/2025-01-01-preview/examples/WebPubSubCustomCertificates_Get.json
            // this example is just showing the usage of "WebPubSubCustomCertificates_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // get the collection of this WebPubSubCustomCertificateResource
            WebPubSubCustomCertificateCollection collection = webPubSub.GetWebPubSubCustomCertificates();

            // invoke the operation
            string certificateName = "myCert";
            NullableResponse<WebPubSubCustomCertificateResource> response = await collection.GetIfExistsAsync(certificateName);
            WebPubSubCustomCertificateResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WebPubSubCustomCertificateData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
