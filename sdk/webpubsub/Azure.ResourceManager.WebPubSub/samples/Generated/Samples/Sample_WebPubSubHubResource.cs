// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.WebPubSub;
using Azure.ResourceManager.WebPubSub.Models;

namespace Azure.ResourceManager.WebPubSub.Samples
{
    public partial class Sample_WebPubSubHubResource
    {
        // WebPubSubHubs_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_WebPubSubHubsGet()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_Get.json
            // this example is just showing the usage of "WebPubSubHubs_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubHubResource created on azure
            // for more information of creating WebPubSubHubResource, please refer to the document of WebPubSubHubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string hubName = "exampleHub";
            ResourceIdentifier webPubSubHubResourceId = WebPubSubHubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, hubName);
            WebPubSubHubResource webPubSubHub = client.GetWebPubSubHubResource(webPubSubHubResourceId);

            // invoke the operation
            WebPubSubHubResource result = await webPubSubHub.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebPubSubHubData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // WebPubSubHubs_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_WebPubSubHubsCreateOrUpdate()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_CreateOrUpdate.json
            // this example is just showing the usage of "WebPubSubHubs_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubHubResource created on azure
            // for more information of creating WebPubSubHubResource, please refer to the document of WebPubSubHubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string hubName = "exampleHub";
            ResourceIdentifier webPubSubHubResourceId = WebPubSubHubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, hubName);
            WebPubSubHubResource webPubSubHub = client.GetWebPubSubHubResource(webPubSubHubResourceId);

            // invoke the operation
            WebPubSubHubData data = new WebPubSubHubData(new WebPubSubHubProperties()
            {
                EventHandlers =
{
new WebPubSubEventHandler("http://host.com")
{
UserEventPattern = "*",
SystemEvents =
{
"connect","connected"
},
Auth = new UpstreamAuthSettings()
{
AuthType = UpstreamAuthType.ManagedIdentity,
ManagedIdentityResource = "abc",
},
}
},
            });
            ArmOperation<WebPubSubHubResource> lro = await webPubSubHub.UpdateAsync(WaitUntil.Completed, data);
            WebPubSubHubResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebPubSubHubData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // WebPubSubHubs_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_WebPubSubHubsDelete()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubHubs_Delete.json
            // this example is just showing the usage of "WebPubSubHubs_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubHubResource created on azure
            // for more information of creating WebPubSubHubResource, please refer to the document of WebPubSubHubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            string hubName = "exampleHub";
            ResourceIdentifier webPubSubHubResourceId = WebPubSubHubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, hubName);
            WebPubSubHubResource webPubSubHub = client.GetWebPubSubHubResource(webPubSubHubResourceId);

            // invoke the operation
            await webPubSubHub.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
