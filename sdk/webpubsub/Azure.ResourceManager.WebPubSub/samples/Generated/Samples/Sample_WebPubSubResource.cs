// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WebPubSub;
using Azure.ResourceManager.WebPubSub.Models;

namespace Azure.ResourceManager.WebPubSub.Samples
{
    public partial class Sample_WebPubSubResource
    {
        // WebPubSub_CheckNameAvailability
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CheckWebPubSubNameAvailability_WebPubSubCheckNameAvailability()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_CheckNameAvailability.json
            // this example is just showing the usage of "WebPubSub_CheckNameAvailability" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("eastus");
            WebPubSubNameAvailabilityContent content = new WebPubSubNameAvailabilityContent("Microsoft.SignalRService/WebPubSub", "myWebPubSubService");
            WebPubSubNameAvailability result = await subscriptionResource.CheckWebPubSubNameAvailabilityAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // WebPubSub_ListBySubscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetWebPubSubs_WebPubSubListBySubscription()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListBySubscription.json
            // this example is just showing the usage of "WebPubSub_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (WebPubSubResource item in subscriptionResource.GetWebPubSubsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WebPubSubData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // WebPubSub_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_WebPubSubGet()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Get.json
            // this example is just showing the usage of "WebPubSub_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // invoke the operation
            WebPubSubResource result = await webPubSub.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebPubSubData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // WebPubSub_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_WebPubSubDelete()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Delete.json
            // this example is just showing the usage of "WebPubSub_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // invoke the operation
            await webPubSub.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // WebPubSub_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_WebPubSubUpdate()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Update.json
            // this example is just showing the usage of "WebPubSub_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // invoke the operation
            WebPubSubData data = new WebPubSubData(new AzureLocation("eastus"))
            {
                Sku = new BillingInfoSku("Standard_S1")
                {
                    Tier = WebPubSubSkuTier.Standard,
                    Capacity = 1,
                },
                Identity = new ManagedServiceIdentity("SystemAssigned"),
                IsClientCertEnabled = false,
                LiveTraceConfiguration = new LiveTraceConfiguration()
                {
                    Categories =
{
new LiveTraceCategory()
{
Name = "ConnectivityLogs",
}
},
                },
                NetworkAcls = new WebPubSubNetworkAcls()
                {
                    DefaultAction = AclAction.Deny,
                    PublicNetwork = new PublicNetworkAcls()
                    {
                        Allow =
{
WebPubSubRequestType.ClientConnection
},
                    },
                    PrivateEndpoints =
{
new PrivateEndpointAcl("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e")
{
Allow =
{
WebPubSubRequestType.ServerConnection
},
}
},
                },
                PublicNetworkAccess = "Enabled",
                IsLocalAuthDisabled = false,
                IsAadAuthDisabled = false,
                Tags =
{
["key1"] = "value1",
},
            };
            ArmOperation<WebPubSubResource> lro = await webPubSub.UpdateAsync(WaitUntil.Completed, data);
            WebPubSubResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebPubSubData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // WebPubSub_ListKeys
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetKeys_WebPubSubListKeys()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListKeys.json
            // this example is just showing the usage of "WebPubSub_ListKeys" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // invoke the operation
            WebPubSubKeys result = await webPubSub.GetKeysAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // WebPubSub_RegenerateKey
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task RegenerateKey_WebPubSubRegenerateKey()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_RegenerateKey.json
            // this example is just showing the usage of "WebPubSub_RegenerateKey" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // invoke the operation
            WebPubSubRegenerateKeyContent content = new WebPubSubRegenerateKeyContent()
            {
                KeyType = WebPubSubKeyType.Primary,
            };
            ArmOperation<WebPubSubKeys> lro = await webPubSub.RegenerateKeyAsync(WaitUntil.Completed, content);
            WebPubSubKeys result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // WebPubSub_Restart
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Restart_WebPubSubRestart()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Restart.json
            // this example is just showing the usage of "WebPubSub_Restart" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // invoke the operation
            await webPubSub.RestartAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // WebPubSub_ListSkus
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSkus_WebPubSubListSkus()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListSkus.json
            // this example is just showing the usage of "WebPubSub_ListSkus" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // invoke the operation and iterate over the result
            await foreach (WebPubSubSku item in webPubSub.GetSkusAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // WebPubSubPrivateLinkResources_List
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetWebPubSubPrivateLinkResources_WebPubSubPrivateLinkResourcesList()
        {
            // Generated from example definition: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSubPrivateLinkResources_List.json
            // this example is just showing the usage of "WebPubSubPrivateLinkResources_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this WebPubSubResource created on azure
            // for more information of creating WebPubSubResource, please refer to the document of WebPubSubResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string resourceName = "myWebPubSubService";
            ResourceIdentifier webPubSubResourceId = WebPubSubResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            WebPubSubResource webPubSub = client.GetWebPubSubResource(webPubSubResourceId);

            // invoke the operation and iterate over the result
            await foreach (WebPubSubPrivateLink item in webPubSub.GetWebPubSubPrivateLinkResourcesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
