// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.PlanetaryComputer
{
    /// <summary> Defines partitioning schemes for temporal data organization. </summary>
    public readonly partial struct PartitionTypeScheme : IEquatable<PartitionTypeScheme>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PartitionTypeScheme"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PartitionTypeScheme(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string YearValue = "year";
        private const string MonthValue = "month";
        private const string NoneValue = "none";

        /// <summary> Partition data by year. </summary>
        public static PartitionTypeScheme Year { get; } = new PartitionTypeScheme(YearValue);
        /// <summary> Partition data by month. </summary>
        public static PartitionTypeScheme Month { get; } = new PartitionTypeScheme(MonthValue);
        /// <summary> No partitioning. </summary>
        public static PartitionTypeScheme None { get; } = new PartitionTypeScheme(NoneValue);
        /// <summary> Determines if two <see cref="PartitionTypeScheme"/> values are the same. </summary>
        public static bool operator ==(PartitionTypeScheme left, PartitionTypeScheme right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PartitionTypeScheme"/> values are not the same. </summary>
        public static bool operator !=(PartitionTypeScheme left, PartitionTypeScheme right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PartitionTypeScheme"/>. </summary>
        public static implicit operator PartitionTypeScheme(string value) => new PartitionTypeScheme(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PartitionTypeScheme other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PartitionTypeScheme other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
