// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.PlanetaryComputer
{
    /// <summary>
    /// Identifier selecting one of the TileMatrixSetId supported (default:
    /// 'WebMercatorQuad')Standard identifier for a coordinate reference system and tiling scheme used for serving map tiles
    /// </summary>
    public readonly partial struct TileMatrixSetId : IEquatable<TileMatrixSetId>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TileMatrixSetId"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TileMatrixSetId(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CanadianNAD83LCCValue = "CanadianNAD83_LCC";
        private const string EuropeanETRS89LAEAQuadValue = "EuropeanETRS89_LAEAQuad";
        private const string LINZAntarticaMapTilegridValue = "LINZAntarticaMapTilegrid";
        private const string NZTM2000QuadValue = "NZTM2000Quad";
        private const string UPSAntarcticWGS84QuadValue = "UPSAntarcticWGS84Quad";
        private const string UPSArcticWGS84QuadValue = "UPSArcticWGS84Quad";
        private const string UTM31WGS84QuadValue = "UTM31WGS84Quad";
        private const string WGS1984QuadValue = "WGS1984Quad";
        private const string WebMercatorQuadValue = "WebMercatorQuad";
        private const string WorldCRS84QuadValue = "WorldCRS84Quad";
        private const string WorldMercatorWGS84QuadValue = "WorldMercatorWGS84Quad";

        /// <summary> Canadian NAD83 Lambert Conformal Conic projection tile matrix set. </summary>
        public static TileMatrixSetId CanadianNAD83LCC { get; } = new TileMatrixSetId(CanadianNAD83LCCValue);
        /// <summary> European ETRS89 Lambert Azimuthal Equal Area Quad tile matrix set. </summary>
        public static TileMatrixSetId EuropeanETRS89LAEAQuad { get; } = new TileMatrixSetId(EuropeanETRS89LAEAQuadValue);
        /// <summary> Land Information New Zealand (LINZ) Antarctica Map tile grid matrix set. </summary>
        public static TileMatrixSetId LINZAntarticaMapTilegrid { get; } = new TileMatrixSetId(LINZAntarticaMapTilegridValue);
        /// <summary> New Zealand Transverse Mercator 2000 Quad tile matrix set. </summary>
        public static TileMatrixSetId NZTM2000Quad { get; } = new TileMatrixSetId(NZTM2000QuadValue);
        /// <summary> Universal Polar Stereographic Antarctic WGS84 Quad tile matrix set. </summary>
        public static TileMatrixSetId UPSAntarcticWGS84Quad { get; } = new TileMatrixSetId(UPSAntarcticWGS84QuadValue);
        /// <summary> Universal Polar Stereographic Arctic WGS84 Quad tile matrix set. </summary>
        public static TileMatrixSetId UPSArcticWGS84Quad { get; } = new TileMatrixSetId(UPSArcticWGS84QuadValue);
        /// <summary> Universal Transverse Mercator Zone 31 WGS84 Quad tile matrix set. </summary>
        public static TileMatrixSetId UTM31WGS84Quad { get; } = new TileMatrixSetId(UTM31WGS84QuadValue);
        /// <summary> WGS 1984 Quad tile matrix set. </summary>
        public static TileMatrixSetId WGS1984Quad { get; } = new TileMatrixSetId(WGS1984QuadValue);
        /// <summary> Web Mercator Quad tile matrix set. </summary>
        public static TileMatrixSetId WebMercatorQuad { get; } = new TileMatrixSetId(WebMercatorQuadValue);
        /// <summary> World CRS84 Quad tile matrix set. </summary>
        public static TileMatrixSetId WorldCRS84Quad { get; } = new TileMatrixSetId(WorldCRS84QuadValue);
        /// <summary> World Mercator WGS84 Quad tile matrix set. </summary>
        public static TileMatrixSetId WorldMercatorWGS84Quad { get; } = new TileMatrixSetId(WorldMercatorWGS84QuadValue);
        /// <summary> Determines if two <see cref="TileMatrixSetId"/> values are the same. </summary>
        public static bool operator ==(TileMatrixSetId left, TileMatrixSetId right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TileMatrixSetId"/> values are not the same. </summary>
        public static bool operator !=(TileMatrixSetId left, TileMatrixSetId right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TileMatrixSetId"/>. </summary>
        public static implicit operator TileMatrixSetId(string value) => new TileMatrixSetId(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TileMatrixSetId other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TileMatrixSetId other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
