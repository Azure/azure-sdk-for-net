// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Microsoft.PlanetaryComputer
{
    /// <summary> Parameters for requesting a rendered image from a collection. </summary>
    public partial class ImageContent
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ImageContent"/>. </summary>
        /// <param name="cql"> Cql. </param>
        /// <param name="renderParams"> JSON-encoded visualization parameters. </param>
        /// <param name="cols"> Width of the output image in pixels. </param>
        /// <param name="rows"> Height of the output image in pixels. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cql"/> or <paramref name="renderParams"/> is null. </exception>
        public ImageContent(CqlFilter cql, string renderParams, int cols, int rows)
        {
            Argument.AssertNotNull(cql, nameof(cql));
            Argument.AssertNotNull(renderParams, nameof(renderParams));

            Cql = cql;
            RenderParams = renderParams;
            Cols = cols;
            Rows = rows;
        }

        /// <summary> Initializes a new instance of <see cref="ImageContent"/>. </summary>
        /// <param name="cql"> Cql. </param>
        /// <param name="geometry"> Geometry. </param>
        /// <param name="renderParams"> JSON-encoded visualization parameters. </param>
        /// <param name="cols"> Width of the output image in pixels. </param>
        /// <param name="rows"> Height of the output image in pixels. </param>
        /// <param name="format"> Output format for the generated image. </param>
        /// <param name="showBranding"> Whether to include branding on the output image. </param>
        /// <param name="mask"> Whether to apply masking to invalid or no-data areas. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ImageContent(CqlFilter cql, GeoJsonGeometry geometry, string renderParams, int cols, int rows, ImageRequestFormat? format, bool? showBranding, bool? mask, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Cql = cql;
            Geometry = geometry;
            RenderParams = renderParams;
            Cols = cols;
            Rows = rows;
            Format = format;
            ShowBranding = showBranding;
            Mask = mask;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Cql. </summary>
        public CqlFilter Cql { get; }

        /// <summary> Geometry. </summary>
        public GeoJsonGeometry Geometry { get; set; }

        /// <summary> JSON-encoded visualization parameters. </summary>
        public string RenderParams { get; }

        /// <summary> Width of the output image in pixels. </summary>
        public int Cols { get; }

        /// <summary> Height of the output image in pixels. </summary>
        public int Rows { get; }

        /// <summary> Output format for the generated image. </summary>
        public ImageRequestFormat? Format { get; set; }

        /// <summary> Whether to include branding on the output image. </summary>
        public bool? ShowBranding { get; set; }

        /// <summary> Whether to apply masking to invalid or no-data areas. </summary>
        public bool? Mask { get; set; }
    }
}
