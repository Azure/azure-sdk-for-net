// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.PlanetaryComputer
{
    /// <summary>
    /// Point model.
    ///
    /// response model for `/point` endpointsResponse model for point query operations providing values at a specific location
    /// </summary>
    public partial class TitilerCoreModelsResponsesPoint
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TitilerCoreModelsResponsesPoint"/>. </summary>
        /// <param name="coordinates"> Geographic coordinates [longitude, latitude] of the queried point. </param>
        /// <param name="values"> Array of pixel values at the queried point for each band. </param>
        /// <param name="bandNames"> Names of each band in the raster data. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="coordinates"/>, <paramref name="values"/> or <paramref name="bandNames"/> is null. </exception>
        internal TitilerCoreModelsResponsesPoint(IEnumerable<float> coordinates, IEnumerable<float> values, IEnumerable<string> bandNames)
        {
            Argument.AssertNotNull(coordinates, nameof(coordinates));
            Argument.AssertNotNull(values, nameof(values));
            Argument.AssertNotNull(bandNames, nameof(bandNames));

            Coordinates = coordinates.ToList();
            Values = values.ToList();
            BandNames = bandNames.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="TitilerCoreModelsResponsesPoint"/>. </summary>
        /// <param name="coordinates"> Geographic coordinates [longitude, latitude] of the queried point. </param>
        /// <param name="values"> Array of pixel values at the queried point for each band. </param>
        /// <param name="bandNames"> Names of each band in the raster data. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TitilerCoreModelsResponsesPoint(IReadOnlyList<float> coordinates, IReadOnlyList<float> values, IReadOnlyList<string> bandNames, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Coordinates = coordinates;
            Values = values;
            BandNames = bandNames;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TitilerCoreModelsResponsesPoint"/> for deserialization. </summary>
        internal TitilerCoreModelsResponsesPoint()
        {
        }

        /// <summary> Geographic coordinates [longitude, latitude] of the queried point. </summary>
        public IReadOnlyList<float> Coordinates { get; }
        /// <summary> Array of pixel values at the queried point for each band. </summary>
        public IReadOnlyList<float> Values { get; }
        /// <summary> Names of each band in the raster data. </summary>
        public IReadOnlyList<string> BandNames { get; }
    }
}
