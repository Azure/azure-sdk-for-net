// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.PlanetaryComputer
{
    /// <summary>
    /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#temporal-extent-object
    /// 
    /// Represents the temporal extent of a STAC collection with time intervals.
    /// </summary>
    public partial class TimeInterval
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="TimeInterval"/>. </summary>
        /// <param name="interval"> Array of time intervals in format [[start_datetime, end_datetime]]. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="interval"/> is null. </exception>
        public TimeInterval(IEnumerable<IList<string>> interval)
        {
            Argument.AssertNotNull(interval, nameof(interval));

            Interval = interval.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="TimeInterval"/>. </summary>
        /// <param name="interval"> Array of time intervals in format [[start_datetime, end_datetime]]. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal TimeInterval(IList<IList<string>> interval, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Interval = interval;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Array of time intervals in format [[start_datetime, end_datetime]]. </summary>
        public IList<IList<string>> Interval { get; }
    }
}
