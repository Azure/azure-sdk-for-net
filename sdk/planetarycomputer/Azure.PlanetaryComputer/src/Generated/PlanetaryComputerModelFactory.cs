// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.PlanetaryComputer
{
    /// <summary> Model factory for models. </summary>
    public static partial class PlanetaryComputerModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.IngestionDefinitionsPagedResult"/>. </summary>
        /// <param name="value"> Ingestion Definitions. </param>
        /// <param name="nextLink"> Next page. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionDefinitionsPagedResult"/> instance for mocking. </returns>
        public static IngestionDefinitionsPagedResult IngestionDefinitionsPagedResult(IEnumerable<IngestionConfiguration> value = null, Uri nextLink = null)
        {
            value ??= new List<IngestionConfiguration>();

            return new IngestionDefinitionsPagedResult(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.IngestionConfiguration"/>. </summary>
        /// <param name="id"> Ingestion id. </param>
        /// <param name="importType"> Ingestion type. </param>
        /// <param name="displayName"> Ingestion name. </param>
        /// <param name="sourceCatalogUrl"> Source catalog URL. Required for StaticCatalog ingestion type. </param>
        /// <param name="skipExistingItems"> Skip processing existing items in the catalog. </param>
        /// <param name="keepOriginalAssets"> Keep original source assets. </param>
        /// <param name="creationTime"> Ingestion creation time. </param>
        /// <param name="status"> Ingestion status. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionConfiguration"/> instance for mocking. </returns>
        public static IngestionConfiguration IngestionConfiguration(Guid id = default, IngestionType importType = default, string displayName = null, Uri sourceCatalogUrl = null, bool? skipExistingItems = null, bool? keepOriginalAssets = null, DateTimeOffset creationTime = default, IngestionStatus status = default)
        {
            return new IngestionConfiguration(
                id,
                importType,
                displayName,
                sourceCatalogUrl,
                skipExistingItems,
                keepOriginalAssets,
                creationTime,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.OperationInfo"/>. </summary>
        /// <param name="id"> Operation id. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="type"> Operation type. </param>
        /// <param name="creationTime"> The UTC time at which the operation was created. </param>
        /// <param name="collectionId"> Collection ID. </param>
        /// <param name="statusHistory"> The history of the operation status in time. </param>
        /// <param name="startTime"> The UTC time at which the operation was started. </param>
        /// <param name="finishTime"> The UTC time at which the operation finished its execution. </param>
        /// <param name="additionalInformation"> Additional information elements about the particular operation type. </param>
        /// <param name="error"> Error information. </param>
        /// <returns> A new <see cref="PlanetaryComputer.OperationInfo"/> instance for mocking. </returns>
        public static OperationInfo OperationInfo(Guid id = default, OperationStatus status = default, string type = null, DateTimeOffset creationTime = default, string collectionId = null, IEnumerable<OperationStatusHistoryItem> statusHistory = null, DateTimeOffset? startTime = null, DateTimeOffset? finishTime = null, IReadOnlyDictionary<string, string> additionalInformation = null, ResponseError error = null)
        {
            statusHistory ??= new List<OperationStatusHistoryItem>();
            additionalInformation ??= new Dictionary<string, string>();

            return new OperationInfo(
                id,
                status,
                type,
                creationTime,
                collectionId,
                statusHistory?.ToList(),
                startTime,
                finishTime,
                additionalInformation,
                error,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.OperationStatusHistoryItem"/>. </summary>
        /// <param name="timestamp"> The UTC time at which the status was set. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="errorCode"> If the status is failed, the error code. </param>
        /// <param name="errorMessage"> If the status is failed, the error message. </param>
        /// <returns> A new <see cref="PlanetaryComputer.OperationStatusHistoryItem"/> instance for mocking. </returns>
        public static OperationStatusHistoryItem OperationStatusHistoryItem(DateTimeOffset timestamp = default, OperationStatus status = default, string errorCode = null, string errorMessage = null)
        {
            return new OperationStatusHistoryItem(timestamp, status, errorCode, errorMessage, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.IngestionRunsPagedResult"/>. </summary>
        /// <param name="value"> Ingestion Runs. </param>
        /// <param name="nextLink"> Next page. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionRunsPagedResult"/> instance for mocking. </returns>
        public static IngestionRunsPagedResult IngestionRunsPagedResult(IEnumerable<IngestionRun> value = null, Uri nextLink = null)
        {
            value ??= new List<IngestionRun>();

            return new IngestionRunsPagedResult(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.IngestionRun"/>. </summary>
        /// <param name="id"> Run id. </param>
        /// <param name="parentRunId"> Run id which this run is associated to because it has been retried or rerun. </param>
        /// <param name="operation"> Operation. </param>
        /// <param name="creationTime"> Creation time. </param>
        /// <param name="sourceCatalogUrl"> URL of the source catalog. </param>
        /// <param name="skipExistingItems"> Skip any item that already exist in the GeoCatalog. </param>
        /// <param name="keepOriginalAssets"> Keep original source assets. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionRun"/> instance for mocking. </returns>
        public static IngestionRun IngestionRun(Guid id = default, Guid? parentRunId = null, IngestionRunInfo operation = null, DateTimeOffset creationTime = default, Uri sourceCatalogUrl = null, bool? skipExistingItems = null, bool? keepOriginalAssets = null)
        {
            return new IngestionRun(
                id,
                parentRunId,
                operation,
                creationTime,
                sourceCatalogUrl,
                skipExistingItems,
                keepOriginalAssets,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.IngestionRunInfo"/>. </summary>
        /// <param name="id"> Operation id. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="creationTime"> The UTC time at which the operation was created. </param>
        /// <param name="statusHistory"> The history of the operation status in time. </param>
        /// <param name="startTime"> The UTC time at which the operation was started. </param>
        /// <param name="finishTime"> The UTC time at which the operation finished its execution. </param>
        /// <param name="totalItems"> The number of total items to be processed. </param>
        /// <param name="totalPendingItems"> The number of items pending to be processed. </param>
        /// <param name="totalSuccessfulItems"> The number of items successfully processed. </param>
        /// <param name="totalFailedItems"> The number of items that have failed to be processed. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionRunInfo"/> instance for mocking. </returns>
        public static IngestionRunInfo IngestionRunInfo(Guid id = default, OperationStatus status = default, DateTimeOffset creationTime = default, IEnumerable<OperationStatusHistoryItem> statusHistory = null, DateTimeOffset? startTime = null, DateTimeOffset? finishTime = null, int totalItems = default, int totalPendingItems = default, int totalSuccessfulItems = default, int totalFailedItems = default)
        {
            statusHistory ??= new List<OperationStatusHistoryItem>();

            return new IngestionRunInfo(
                id,
                status,
                creationTime,
                statusHistory?.ToList(),
                startTime,
                finishTime,
                totalItems,
                totalPendingItems,
                totalSuccessfulItems,
                totalFailedItems,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.OperationsPagedResult"/>. </summary>
        /// <param name="value"> Operations. </param>
        /// <param name="nextLink"> Next page. </param>
        /// <returns> A new <see cref="PlanetaryComputer.OperationsPagedResult"/> instance for mocking. </returns>
        public static OperationsPagedResult OperationsPagedResult(IEnumerable<OperationInfo> value = null, Uri nextLink = null)
        {
            value ??= new List<OperationInfo>();

            return new OperationsPagedResult(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.IngestionSourcesPagedResult"/>. </summary>
        /// <param name="value"> Ingestion sources. </param>
        /// <param name="nextLink"> Next page. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionSourcesPagedResult"/> instance for mocking. </returns>
        public static IngestionSourcesPagedResult IngestionSourcesPagedResult(IEnumerable<IngestionSourceSummary> value = null, Uri nextLink = null)
        {
            value ??= new List<IngestionSourceSummary>();

            return new IngestionSourcesPagedResult(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.IngestionSourceSummary"/>. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="kind"> Ingestion source type. </param>
        /// <param name="created"> Created time in UTC format. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionSourceSummary"/> instance for mocking. </returns>
        public static IngestionSourceSummary IngestionSourceSummary(Guid id = default, IngestionSourceType kind = default, DateTimeOffset created = default)
        {
            return new IngestionSourceSummary(id, kind, created, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.IngestionSource"/>. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="created"> Created time in UTC format. </param>
        /// <param name="kind"> Discriminator for the ingestion source. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionSource"/> instance for mocking. </returns>
        public static IngestionSource IngestionSource(Guid id = default, DateTimeOffset created = default, string kind = null)
        {
            return new UnknownIngestionSource(id, created, kind == null ? default : new IngestionSourceType(kind), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.SasTokenIngestionSource"/>. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="created"> Created time in UTC format. </param>
        /// <param name="connectionInfo"> SAS token connection information. </param>
        /// <returns> A new <see cref="PlanetaryComputer.SasTokenIngestionSource"/> instance for mocking. </returns>
        public static SasTokenIngestionSource SasTokenIngestionSource(Guid id = default, DateTimeOffset created = default, SasTokenConnection connectionInfo = null)
        {
            return new SasTokenIngestionSource(id, created, IngestionSourceType.SasToken, serializedAdditionalRawData: null, connectionInfo);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.SasTokenConnection"/>. </summary>
        /// <param name="containerUrl"> Azure Blob Storage container URL. </param>
        /// <param name="sasToken"> SAS token. </param>
        /// <param name="expiration"> Azure Blob Storage SAS token expiration in UTC format. </param>
        /// <returns> A new <see cref="PlanetaryComputer.SasTokenConnection"/> instance for mocking. </returns>
        public static SasTokenConnection SasTokenConnection(Uri containerUrl = null, string sasToken = null, DateTimeOffset? expiration = null)
        {
            return new SasTokenConnection(containerUrl, sasToken, expiration, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.ManagedIdentityIngestionSource"/>. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="created"> Created time in UTC format. </param>
        /// <param name="connectionInfo"> Managed identity connection information. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ManagedIdentityIngestionSource"/> instance for mocking. </returns>
        public static ManagedIdentityIngestionSource ManagedIdentityIngestionSource(Guid id = default, DateTimeOffset created = default, ManagedIdentityConnection connectionInfo = null)
        {
            return new ManagedIdentityIngestionSource(id, created, IngestionSourceType.BlobManagedIdentity, serializedAdditionalRawData: null, connectionInfo);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.ManagedIdentitiesPagedResult"/>. </summary>
        /// <param name="value"> Managed Identities. </param>
        /// <param name="nextLink"> Next page. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ManagedIdentitiesPagedResult"/> instance for mocking. </returns>
        public static ManagedIdentitiesPagedResult ManagedIdentitiesPagedResult(IEnumerable<ManagedIdentityMetadata> value = null, Uri nextLink = null)
        {
            value ??= new List<ManagedIdentityMetadata>();

            return new ManagedIdentitiesPagedResult(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.ManagedIdentityMetadata"/>. </summary>
        /// <param name="objectId"> Object id of the managed identity. </param>
        /// <param name="resourceId"> ARM path or resource id of the managed identity. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ManagedIdentityMetadata"/> instance for mocking. </returns>
        public static ManagedIdentityMetadata ManagedIdentityMetadata(Guid objectId = default, string resourceId = null)
        {
            return new ManagedIdentityMetadata(objectId, resourceId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.LandingPage"/>. </summary>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacExtensions"> URLs to STAC extensions implemented by this STAC resource. </param>
        /// <param name="id"> Unique identifier for the STAC catalog. </param>
        /// <param name="description"> Detailed description of the STAC catalog. </param>
        /// <param name="title"> Human-readable title for the STAC catalog. </param>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="conformsTo"> List of OGC API conformance classes implemented by this API. </param>
        /// <param name="links"> Links to related resources and endpoints. </param>
        /// <param name="type"> Type. </param>
        /// <returns> A new <see cref="PlanetaryComputer.LandingPage"/> instance for mocking. </returns>
        public static LandingPage LandingPage(string msftCreated = null, string msftUpdated = null, string msftShortDescription = null, IEnumerable<string> stacExtensions = null, string id = null, string description = null, string title = null, string stacVersion = null, IEnumerable<Uri> conformsTo = null, IEnumerable<StacLink> links = null, string type = null)
        {
            stacExtensions ??= new List<string>();
            conformsTo ??= new List<Uri>();
            links ??= new List<StacLink>();

            return new LandingPage(
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacExtensions?.ToList(),
                id,
                description,
                title,
                stacVersion,
                conformsTo?.ToList(),
                links?.ToList(),
                type,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.FeatureCollections"/>. </summary>
        /// <param name="links"> Links to related resources and endpoints. </param>
        /// <param name="collections"> Array of STAC collections available in the catalog. </param>
        /// <returns> A new <see cref="PlanetaryComputer.FeatureCollections"/> instance for mocking. </returns>
        public static FeatureCollections FeatureCollections(IEnumerable<StacLink> links = null, IEnumerable<StacCollectionModel> collections = null)
        {
            links ??= new List<StacLink>();
            collections ??= new List<StacCollectionModel>();

            return new FeatureCollections(links?.ToList(), collections?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.JsonSchema"/>. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="PlanetaryComputer.JsonSchema"/> instance for mocking. </returns>
        public static JsonSchema JsonSchema(IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new JsonSchema(additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.ConformanceClasses"/>. </summary>
        /// <param name="conformsTo"> List of OGC API conformance classes implemented by this API. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ConformanceClasses"/> instance for mocking. </returns>
        public static ConformanceClasses ConformanceClasses(IEnumerable<Uri> conformsTo = null)
        {
            conformsTo ??= new List<Uri>();

            return new ConformanceClasses(conformsTo?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.UserCollectionSettings"/>. </summary>
        /// <param name="tileSettings"> Settings for map tile visualization. </param>
        /// <param name="mosaicInfo"> Settings for data mosaic visualization. </param>
        /// <returns> A new <see cref="PlanetaryComputer.UserCollectionSettings"/> instance for mocking. </returns>
        public static UserCollectionSettings UserCollectionSettings(TileSettings tileSettings = null, MosaicInfo mosaicInfo = null)
        {
            return new UserCollectionSettings(tileSettings, mosaicInfo, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.MosaicInfo"/>. </summary>
        /// <param name="mosaics"> Predefined data mosaics available for this collection. </param>
        /// <param name="renderOptions"> Available render options for visualizing the data. </param>
        /// <param name="defaultLocation"> Default map location when displaying this collection. </param>
        /// <param name="defaultCustomQuery"> A list of CQL-JSON expressions to use as the default for  this collection. </param>
        /// <returns> A new <see cref="PlanetaryComputer.MosaicInfo"/> instance for mocking. </returns>
        public static MosaicInfo MosaicInfo(IEnumerable<StacMosaic> mosaics = null, IEnumerable<RenderOptionModel> renderOptions = null, DefaultLocation defaultLocation = null, CqlFilter defaultCustomQuery = null)
        {
            mosaics ??= new List<StacMosaic>();
            renderOptions ??= new List<RenderOptionModel>();

            return new MosaicInfo(mosaics?.ToList(), renderOptions?.ToList(), defaultLocation, defaultCustomQuery, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.AuthConfig"/>. </summary>
        /// <param name="authnAppId"> Application ID for authentication. </param>
        /// <param name="tenantId"> Azure Active Directory tenant ID. </param>
        /// <param name="instance"> Azure AD instance URL. </param>
        /// <param name="redirectUri"> Redirect URI after authentication. </param>
        /// <returns> A new <see cref="PlanetaryComputer.AuthConfig"/> instance for mocking. </returns>
        public static AuthConfig AuthConfig(string authnAppId = null, string tenantId = null, Uri instance = null, Uri redirectUri = null)
        {
            return new AuthConfig(authnAppId, tenantId, instance, redirectUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.AzMapsClientId"/>. </summary>
        /// <param name="clientId"> The client ID for Azure Maps authentication. </param>
        /// <returns> A new <see cref="PlanetaryComputer.AzMapsClientId"/> instance for mocking. </returns>
        public static AzMapsClientId AzMapsClientId(string clientId = null)
        {
            return new AzMapsClientId(clientId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.AzMapsToken"/>. </summary>
        /// <param name="token"> The authentication token for Azure Maps. </param>
        /// <param name="expiresOn"> Expiration timestamp of the token in Unix time. </param>
        /// <returns> A new <see cref="PlanetaryComputer.AzMapsToken"/> instance for mocking. </returns>
        public static AzMapsToken AzMapsToken(string token = null, int expiresOn = default)
        {
            return new AzMapsToken(token, expiresOn, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.ImageContent"/>. </summary>
        /// <param name="cql"> Cql. </param>
        /// <param name="geometry">
        /// Geometry
        /// Please note <see cref="GeoJsonGeometry"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LineString"/>, <see cref="MultiLineString"/>, <see cref="MultiPoint"/>, <see cref="MultiPolygon"/>, <see cref="GeoJsonPoint"/> and <see cref="GeoJsonPolygon"/>.
        /// </param>
        /// <param name="renderParams"> JSON-encoded visualization parameters. </param>
        /// <param name="cols"> Width of the output image in pixels. </param>
        /// <param name="rows"> Height of the output image in pixels. </param>
        /// <param name="format"> Output format for the generated image. </param>
        /// <param name="showBranding"> Whether to include branding on the output image. </param>
        /// <param name="mask"> Whether to apply masking to invalid or no-data areas. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ImageContent"/> instance for mocking. </returns>
        public static ImageContent ImageContent(CqlFilter cql = null, GeoJsonGeometry geometry = null, string renderParams = null, int cols = default, int rows = default, ImageRequestFormat? format = null, bool? showBranding = null, bool? mask = null)
        {
            return new ImageContent(
                cql,
                geometry,
                renderParams,
                cols,
                rows,
                format,
                showBranding,
                mask,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.BoundsResult"/>. </summary>
        /// <param name="bounds"> Array of coordinates defining the bounding box [west, south, east, north]. </param>
        /// <returns> A new <see cref="PlanetaryComputer.BoundsResult"/> instance for mocking. </returns>
        public static BoundsResult BoundsResult(IEnumerable<double> bounds = null)
        {
            bounds ??= new List<double>();

            return new BoundsResult(bounds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.InfoOperationResult"/>. </summary>
        /// <param name="data"> body for info operation response. </param>
        /// <returns> A new <see cref="PlanetaryComputer.InfoOperationResult"/> instance for mocking. </returns>
        public static InfoOperationResult InfoOperationResult(TilerInfo data = null)
        {
            return new InfoOperationResult(data, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.TilerInfo"/>. </summary>
        /// <param name="bounds"> Bounds. </param>
        /// <param name="bandMetadata"> Band Metadata. </param>
        /// <param name="bandDescriptions"> Band Descriptions. </param>
        /// <param name="dtype"> Data type. </param>
        /// <param name="nodataType"> NoData Type. </param>
        /// <param name="colorinterp"> Color interpretation. </param>
        /// <param name="driver"> Driver. </param>
        /// <param name="count"> Count. </param>
        /// <param name="width"> Width. </param>
        /// <param name="height"> Height. </param>
        /// <param name="overviews"> Overviews. </param>
        /// <param name="scales"> Scales. </param>
        /// <param name="offsets"> Offsets. </param>
        /// <param name="colormap"> Colormap. </param>
        /// <param name="minzoom"> Minzoom. </param>
        /// <param name="maxzoom"> Maxzoom. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TilerInfo"/> instance for mocking. </returns>
        public static TilerInfo TilerInfo(IEnumerable<double> bounds = null, IEnumerable<IList<BinaryData>> bandMetadata = null, IEnumerable<IList<string>> bandDescriptions = null, string dtype = null, NoDataType? nodataType = null, IEnumerable<string> colorinterp = null, string driver = null, int? count = null, int? width = null, int? height = null, IEnumerable<string> overviews = null, IEnumerable<long> scales = null, IEnumerable<long> offsets = null, IReadOnlyDictionary<string, IList<string>> colormap = null, long? minzoom = null, long? maxzoom = null)
        {
            bounds ??= new List<double>();
            bandMetadata ??= new List<IList<BinaryData>>();
            bandDescriptions ??= new List<IList<string>>();
            colorinterp ??= new List<string>();
            overviews ??= new List<string>();
            scales ??= new List<long>();
            offsets ??= new List<long>();
            colormap ??= new Dictionary<string, IList<string>>();

            return new TilerInfo(
                bounds?.ToList(),
                bandMetadata?.ToList(),
                bandDescriptions?.ToList(),
                dtype,
                nodataType,
                colorinterp?.ToList(),
                driver,
                count,
                width,
                height,
                overviews?.ToList(),
                scales?.ToList(),
                offsets?.ToList(),
                colormap,
                minzoom,
                maxzoom,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.TilerInfoGeoJsonFeature"/>. </summary>
        /// <param name="type"> GeoJSON type identifier. </param>
        /// <param name="geometry">
        /// Geometry object defining the feature's shape
        /// Please note <see cref="GeoJsonGeometry"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LineString"/>, <see cref="MultiLineString"/>, <see cref="MultiPoint"/>, <see cref="MultiPolygon"/>, <see cref="GeoJsonPoint"/> and <see cref="GeoJsonPolygon"/>.
        /// </param>
        /// <param name="properties"> Properties. </param>
        /// <param name="id"> Unique identifier for the feature. </param>
        /// <param name="bbox"> Bounding box coordinates for the feature. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TilerInfoGeoJsonFeature"/> instance for mocking. </returns>
        public static TilerInfoGeoJsonFeature TilerInfoGeoJsonFeature(FeatureType type = default, GeoJsonGeometry geometry = null, IReadOnlyDictionary<string, TilerInfo> properties = null, string id = null, double? bbox = null)
        {
            properties ??= new Dictionary<string, TilerInfo>();

            return new TilerInfoGeoJsonFeature(
                type,
                geometry,
                properties,
                id,
                bbox,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.AssetStatisticsResult"/>. </summary>
        /// <param name="data"> Response Asset Statistics Api Collections  Collection Id  Items  Item Id  Asset Statistics Get. </param>
        /// <returns> A new <see cref="PlanetaryComputer.AssetStatisticsResult"/> instance for mocking. </returns>
        public static AssetStatisticsResult AssetStatisticsResult(IReadOnlyDictionary<string, BandStatistics> data = null)
        {
            data ??= new Dictionary<string, BandStatistics>();

            return new AssetStatisticsResult(data, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.BandStatistics"/>. </summary>
        /// <param name="min"> Minimum value in the band. </param>
        /// <param name="max"> Maximum value in the band. </param>
        /// <param name="mean"> Mean value of the band. </param>
        /// <param name="count"> Count of pixels in the band. </param>
        /// <param name="sum"> Sum of all pixel values in the band. </param>
        /// <param name="std"> Standard deviation of pixel values in the band. </param>
        /// <param name="median"> Median value of the band. </param>
        /// <param name="majority"> Most common value in the band. </param>
        /// <param name="minority"> Least common value in the band. </param>
        /// <param name="unique"> Count of unique values in the band. </param>
        /// <param name="histogram"> Histogram of pixel values in the band. </param>
        /// <param name="validPercent"> Percentage of valid (non-masked) pixels. </param>
        /// <param name="maskedPixels"> Count of masked pixels in the band. </param>
        /// <param name="validPixels"> Count of valid (non-masked) pixels in the band. </param>
        /// <param name="percentile2">
        /// Percentile 2
        /// The 2nd percentile value.
        /// </param>
        /// <param name="percentile98">
        /// Percentile 98
        /// The 98th percentile value.
        /// </param>
        /// <returns> A new <see cref="PlanetaryComputer.BandStatistics"/> instance for mocking. </returns>
        public static BandStatistics BandStatistics(float min = default, float max = default, float mean = default, float count = default, float sum = default, float std = default, float median = default, float majority = default, float minority = default, float unique = default, IEnumerable<IList<float>> histogram = null, float validPercent = default, float maskedPixels = default, float validPixels = default, float percentile2 = default, float percentile98 = default)
        {
            histogram ??= new List<IList<float>>();

            return new BandStatistics(
                min,
                max,
                mean,
                count,
                sum,
                std,
                median,
                majority,
                minority,
                unique,
                histogram?.ToList(),
                validPercent,
                maskedPixels,
                validPixels,
                percentile2,
                percentile98,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.StatisticsResult"/>. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="PlanetaryComputer.StatisticsResult"/> instance for mocking. </returns>
        public static StatisticsResult StatisticsResult(IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new StatisticsResult(additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.GeoJsonStatisticsItemCollectionResult"/>. </summary>
        /// <param name="type"> GeoJSON type identifier for ItemCollection. </param>
        /// <param name="features"> Array of STAC items with statistics. </param>
        /// <param name="bbox"> Bounding box coordinates [west, south, east, north]. </param>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacExtensions"> List of STAC extension URLs used by this item collection. </param>
        /// <param name="links"> Related links for the item collection. </param>
        /// <param name="context">
        /// Pagination context for the response
        ///
        /// See the [STAC Context Extension](https://github.com/radiantearth/stac-api-spec/tree/master/extensions/context#context-extension-specification)
        /// </param>
        /// <returns> A new <see cref="PlanetaryComputer.GeoJsonStatisticsItemCollectionResult"/> instance for mocking. </returns>
        public static GeoJsonStatisticsItemCollectionResult GeoJsonStatisticsItemCollectionResult(ItemCollectionType type = default, IEnumerable<GeoJsonStatisticsItemResult> features = null, IEnumerable<double> bbox = null, string stacVersion = null, string msftCreated = null, string msftUpdated = null, string msftShortDescription = null, IEnumerable<Uri> stacExtensions = null, IEnumerable<StacLink> links = null, ContextExtension context = null)
        {
            features ??= new List<GeoJsonStatisticsItemResult>();
            bbox ??= new List<double>();
            stacExtensions ??= new List<Uri>();
            links ??= new List<StacLink>();

            return new GeoJsonStatisticsItemCollectionResult(
                type,
                features?.ToList(),
                bbox?.ToList(),
                stacVersion,
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacExtensions?.ToList(),
                links?.ToList(),
                context,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.GeoJsonStatisticsItemResult"/>. </summary>
        /// <param name="geometry">
        /// Geometry object defining the feature's shape
        /// Please note <see cref="GeoJsonGeometry"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LineString"/>, <see cref="MultiLineString"/>, <see cref="MultiPoint"/>, <see cref="MultiPolygon"/>, <see cref="GeoJsonPoint"/> and <see cref="GeoJsonPolygon"/>.
        /// </param>
        /// <param name="bbox"> Bounding box coordinates for the feature. </param>
        /// <param name="id"> Unique identifier for the feature. </param>
        /// <param name="type"> GeoJSON type identifier for Feature. </param>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="collection"> ID of the STAC collection this item belongs to. </param>
        /// <param name="properties"> Properties. </param>
        /// <param name="msftTimestamp"> MSFT Timestamp. </param>
        /// <param name="msftEtag"> MSFT ETag. </param>
        /// <param name="stacExtensions"> List of STAC extension URLs used by this item. </param>
        /// <returns> A new <see cref="PlanetaryComputer.GeoJsonStatisticsItemResult"/> instance for mocking. </returns>
        public static GeoJsonStatisticsItemResult GeoJsonStatisticsItemResult(GeoJsonGeometry geometry = null, IEnumerable<double> bbox = null, string id = null, FeatureType type = default, string msftCreated = null, string msftUpdated = null, string msftShortDescription = null, string stacVersion = null, string collection = null, ItemProperties properties = null, string msftTimestamp = null, string msftEtag = null, IEnumerable<Uri> stacExtensions = null)
        {
            bbox ??= new List<double>();
            stacExtensions ??= new List<Uri>();

            return new GeoJsonStatisticsItemResult(
                geometry,
                bbox?.ToList(),
                id,
                type,
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacVersion,
                collection,
                properties,
                msftTimestamp,
                msftEtag,
                stacExtensions?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.TileJsonResult"/>. </summary>
        /// <param name="tilejson"> Tilejson. </param>
        /// <param name="name"> Human-readable name of the tile set. </param>
        /// <param name="description"> Human-readable description of the tile set. </param>
        /// <param name="version"> Version. </param>
        /// <param name="attribution"> Attribution text for the data sources. </param>
        /// <param name="template"> URL template for feature info queries. </param>
        /// <param name="legend"> URL to legend content for the tile set. </param>
        /// <param name="scheme"> Tile addressing scheme (xyz or tms). </param>
        /// <param name="tiles"> Array of tile URL templates. </param>
        /// <param name="grids"> Array of UTFGrid URL templates. </param>
        /// <param name="data"> Array of data file URL templates. </param>
        /// <param name="minzoom"> Minimum zoom level available in the tile set. </param>
        /// <param name="maxzoom"> Maximum zoom level available in the tile set. </param>
        /// <param name="bounds"> Bounds. </param>
        /// <param name="center"> Default center point [longitude, latitude, zoom] for the tile set. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TileJsonResult"/> instance for mocking. </returns>
        public static TileJsonResult TileJsonResult(string tilejson = null, string name = null, string description = null, string version = null, string attribution = null, string template = null, string legend = null, TileJsonScheme? scheme = null, IEnumerable<string> tiles = null, IEnumerable<string> grids = null, IEnumerable<string> data = null, int? minzoom = null, int? maxzoom = null, IEnumerable<float> bounds = null, IEnumerable<float> center = null)
        {
            tiles ??= new List<string>();
            grids ??= new List<string>();
            data ??= new List<string>();
            bounds ??= new List<float>();
            center ??= new List<float>();

            return new TileJsonResult(
                tilejson,
                name,
                description,
                version,
                attribution,
                template,
                legend,
                scheme,
                tiles?.ToList(),
                grids?.ToList(),
                data?.ToList(),
                minzoom,
                maxzoom,
                bounds?.ToList(),
                center?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.TitilerCoreModelsResponsesPoint"/>. </summary>
        /// <param name="coordinates"> Geographic coordinates [longitude, latitude] of the queried point. </param>
        /// <param name="values"> Array of pixel values at the queried point for each band. </param>
        /// <param name="bandNames"> Names of each band in the raster data. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TitilerCoreModelsResponsesPoint"/> instance for mocking. </returns>
        public static TitilerCoreModelsResponsesPoint TitilerCoreModelsResponsesPoint(IEnumerable<float> coordinates = null, IEnumerable<float> values = null, IEnumerable<string> bandNames = null)
        {
            coordinates ??= new List<float>();
            values ??= new List<float>();
            bandNames ??= new List<string>();

            return new TitilerCoreModelsResponsesPoint(coordinates?.ToList(), values?.ToList(), bandNames?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.ClassmapLegendResult"/>. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ClassmapLegendResult"/> instance for mocking. </returns>
        public static ClassmapLegendResult ClassmapLegendResult(IReadOnlyDictionary<string, IList<long>> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, IList<long>>();

            return new ClassmapLegendResult(additionalProperties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.RegisterResult"/>. </summary>
        /// <param name="searchId"> Unique identifier for the registered search. </param>
        /// <param name="links"> Related links for the registered mosaic. </param>
        /// <returns> A new <see cref="PlanetaryComputer.RegisterResult"/> instance for mocking. </returns>
        public static RegisterResult RegisterResult(string searchId = null, IEnumerable<StacLink> links = null)
        {
            links ??= new List<StacLink>();

            return new RegisterResult(searchId, links?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.TitilerPgstacModelInfo"/>. </summary>
        /// <param name="search">
        /// Details of the saved search query
        ///
        /// See the [PgSTAC Search table definition](https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915).
        /// </param>
        /// <param name="links"> Related links for the search query. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TitilerPgstacModelInfo"/> instance for mocking. </returns>
        public static TitilerPgstacModelInfo TitilerPgstacModelInfo(PgStacSearch search = null, IEnumerable<StacLink> links = null)
        {
            links ??= new List<StacLink>();

            return new TitilerPgstacModelInfo(search, links?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.PgStacSearch"/>. </summary>
        /// <param name="hash"> Unique hash identifier for the search query. </param>
        /// <param name="search"> Search. </param>
        /// <param name="where"> SQL WHERE clause representing the search filters. </param>
        /// <param name="orderby"> SQL ORDER BY clause for sorting results. </param>
        /// <param name="lastused"> Timestamp when the search was last accessed. </param>
        /// <param name="usecount"> Number of times the search has been accessed. </param>
        /// <param name="metadata"> Additional metadata associated with the search. </param>
        /// <returns> A new <see cref="PlanetaryComputer.PgStacSearch"/> instance for mocking. </returns>
        public static PgStacSearch PgStacSearch(string hash = null, CqlFilter search = null, string @where = null, string orderby = null, DateTimeOffset lastused = default, int usecount = default, MosaicMetadata metadata = null)
        {
            return new PgStacSearch(
                hash,
                search,
                @where,
                orderby,
                lastused,
                usecount,
                metadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.TileMatrixSet"/>. </summary>
        /// <param name="title"> Human-readable title of the tile matrix set. </param>
        /// <param name="description">
        /// Brief narrative description of this tile matrix set, normally available for
        /// display to a human
        /// </param>
        /// <param name="keywords">
        /// Unordered list of one or more commonly used or formalized word(s) or phrase(s)
        /// used to describe this tile matrix set
        /// </param>
        /// <param name="id"> Unique identifier for the tile matrix set. </param>
        /// <param name="uri"> URI reference to the official definition. </param>
        /// <param name="orderedAxes"> Names of the coordinate axes in order. </param>
        /// <param name="crs"> Coordinate reference system identifier. </param>
        /// <param name="wellKnownScaleSet"> URL reference to a standardized scale set. </param>
        /// <param name="boundingBox"> Geographic extent of the tile matrix set. </param>
        /// <param name="tileMatrices"> Array of tile matrices at different zoom levels. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TileMatrixSet"/> instance for mocking. </returns>
        public static TileMatrixSet TileMatrixSet(string title = null, string description = null, IEnumerable<string> keywords = null, string id = null, string uri = null, IEnumerable<string> orderedAxes = null, string crs = null, Uri wellKnownScaleSet = null, TileMatrixSetBoundingBox boundingBox = null, IEnumerable<TileMatrix> tileMatrices = null)
        {
            keywords ??= new List<string>();
            orderedAxes ??= new List<string>();
            tileMatrices ??= new List<TileMatrix>();

            return new TileMatrixSet(
                title,
                description,
                keywords?.ToList(),
                id,
                uri,
                orderedAxes?.ToList(),
                crs,
                wellKnownScaleSet,
                boundingBox,
                tileMatrices?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.TileMatrixSetBoundingBox"/>. </summary>
        /// <param name="lowerLeft"> Lower-left corner coordinates [x, y] of bounding box. </param>
        /// <param name="upperRight"> Upper-right corner coordinates [x, y] of bounding box. </param>
        /// <param name="crs"> Coordinate reference system identifier. </param>
        /// <param name="orderedAxes"> Explicit axis order for the CRS coordinates (e.g., ['x', 'y']). </param>
        /// <returns> A new <see cref="PlanetaryComputer.TileMatrixSetBoundingBox"/> instance for mocking. </returns>
        public static TileMatrixSetBoundingBox TileMatrixSetBoundingBox(IEnumerable<string> lowerLeft = null, IEnumerable<string> upperRight = null, string crs = null, IEnumerable<string> orderedAxes = null)
        {
            lowerLeft ??= new List<string>();
            upperRight ??= new List<string>();
            orderedAxes ??= new List<string>();

            return new TileMatrixSetBoundingBox(lowerLeft?.ToList(), upperRight?.ToList(), crs, orderedAxes?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.TileMatrix"/>. </summary>
        /// <param name="title"> Human-readable title of the tile matrix level. </param>
        /// <param name="description"> Human-readable description of this tile matrix level. </param>
        /// <param name="keywords">
        /// Unordered list of one or more commonly used or formalized word(s) or phrase(s)
        /// used to describe this dataset
        /// </param>
        /// <param name="id"> Unique identifier for this tile matrix level, often the zoom level. </param>
        /// <param name="scaleDenominator"> Scale denominator representing the scale of this tile matrix level. </param>
        /// <param name="cellSize"> Size of a pixel in map units at this tile matrix level. </param>
        /// <param name="cornerOfOrigin">
        /// The corner of the tile matrix (_topLeft_ or _bottomLeft_) used as the origin
        /// for numbering tile rows and columns. This corner is also a corner of the (0, 0)
        /// tile.
        /// </param>
        /// <param name="pointOfOrigin">
        /// Precise position in CRS coordinates of the corner of origin (e.g. the top-left
        /// corner) for this tile matrix. This position is also a corner of the (0, 0)
        /// tile. In previous version, this was 'topLeftCorner' and 'cornerOfOrigin' did
        /// not exist.
        /// </param>
        /// <param name="tileWidth"> Pixel width of each tile at this level. </param>
        /// <param name="tileHeight"> Pixel height of each tile at this level. </param>
        /// <param name="matrixWidth"> Number of tiles horizontally at this matrix level. </param>
        /// <param name="matrixHeight"> Number of tiles vertically at this matrix level. </param>
        /// <param name="variableMatrixWidths">
        /// Describes the rows that has variable matrix width
        ///
        /// ref: https://github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/variableMatrixWidth.json
        /// </param>
        /// <returns> A new <see cref="PlanetaryComputer.TileMatrix"/> instance for mocking. </returns>
        public static TileMatrix TileMatrix(string title = null, string description = null, IEnumerable<string> keywords = null, string id = null, float scaleDenominator = default, float cellSize = default, TileMatrixCornerOfOrigin? cornerOfOrigin = null, IEnumerable<double> pointOfOrigin = null, int tileWidth = default, int tileHeight = default, int matrixWidth = default, int matrixHeight = default, IEnumerable<VariableMatrixWidth> variableMatrixWidths = null)
        {
            keywords ??= new List<string>();
            pointOfOrigin ??= new List<double>();
            variableMatrixWidths ??= new List<VariableMatrixWidth>();

            return new TileMatrix(
                title,
                description,
                keywords?.ToList(),
                id,
                scaleDenominator,
                cellSize,
                cornerOfOrigin,
                pointOfOrigin?.ToList(),
                tileWidth,
                tileHeight,
                matrixWidth,
                matrixHeight,
                variableMatrixWidths?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.VariableMatrixWidth"/>. </summary>
        /// <param name="coalesce"> Number of tiles in width that coalesce in a single tile for these rows. </param>
        /// <param name="minTileRow"> First tile row where the coalescence factor applies for this tilematrix. </param>
        /// <param name="maxTileRow"> Last tile row where the coalescence factor applies for this tilematrix. </param>
        /// <returns> A new <see cref="PlanetaryComputer.VariableMatrixWidth"/> instance for mocking. </returns>
        public static VariableMatrixWidth VariableMatrixWidth(int coalesce = default, int minTileRow = default, int maxTileRow = default)
        {
            return new VariableMatrixWidth(coalesce, minTileRow, maxTileRow, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.SasToken"/>. </summary>
        /// <param name="msftExpiry"> The expiration date and time of the SAS token in UTC. </param>
        /// <param name="token"> The SAS token string used for authentication. </param>
        /// <returns> A new <see cref="PlanetaryComputer.SasToken"/> instance for mocking. </returns>
        public static SasToken SasToken(DateTimeOffset msftExpiry = default, string token = null)
        {
            return new SasToken(msftExpiry, token, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputer.UnsignedLink"/>. </summary>
        /// <param name="msftExpiry"> The expiry date of the signed link. This indicates when the link will no longer be valid. </param>
        /// <param name="href"> The URL of the unsigned link. </param>
        /// <returns> A new <see cref="PlanetaryComputer.UnsignedLink"/> instance for mocking. </returns>
        public static UnsignedLink UnsignedLink(DateTimeOffset? msftExpiry = null, string href = null)
        {
            return new UnsignedLink(msftExpiry, href, serializedAdditionalRawData: null);
        }
    }
}
