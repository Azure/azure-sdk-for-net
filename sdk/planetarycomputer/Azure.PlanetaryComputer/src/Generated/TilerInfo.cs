// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

namespace Microsoft.PlanetaryComputer
{
    /// <summary> TilerInfo. </summary>
    public partial class TilerInfo
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="TilerInfo"/>. </summary>
        /// <param name="bounds"> Bounds. </param>
        /// <param name="dtype"> Data type. </param>
        internal TilerInfo(IEnumerable<double> bounds, string dtype)
        {
            Bounds = bounds.ToList();
            BandMetadata = new ChangeTrackingList<IList<BinaryData>>();
            BandDescriptions = new ChangeTrackingList<IList<string>>();
            Dtype = dtype;
            Colorinterp = new ChangeTrackingList<string>();
            Overviews = new ChangeTrackingList<string>();
            Scales = new ChangeTrackingList<long>();
            Offsets = new ChangeTrackingList<long>();
            Colormap = new ChangeTrackingDictionary<string, IList<string>>();
        }

        /// <summary> Initializes a new instance of <see cref="TilerInfo"/>. </summary>
        /// <param name="bounds"> Bounds. </param>
        /// <param name="bandMetadata"> Band Metadata. </param>
        /// <param name="bandDescriptions"> Band Descriptions. </param>
        /// <param name="dtype"> Data type. </param>
        /// <param name="nodataType"> NoData Type. </param>
        /// <param name="colorinterp"> Color interpretation. </param>
        /// <param name="driver"> Driver. </param>
        /// <param name="count"> Count. </param>
        /// <param name="width"> Width. </param>
        /// <param name="height"> Height. </param>
        /// <param name="overviews"> Overviews. </param>
        /// <param name="scales"> Scales. </param>
        /// <param name="offsets"> Offsets. </param>
        /// <param name="colormap"> Colormap. </param>
        /// <param name="minzoom"> Minzoom. </param>
        /// <param name="maxzoom"> Maxzoom. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal TilerInfo(IList<double> bounds, IList<IList<BinaryData>> bandMetadata, IList<IList<string>> bandDescriptions, string dtype, NoDataType? nodataType, IList<string> colorinterp, string driver, int? count, int? width, int? height, IList<string> overviews, IList<long> scales, IList<long> offsets, IDictionary<string, IList<string>> colormap, long? minzoom, long? maxzoom, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Bounds = bounds;
            BandMetadata = bandMetadata;
            BandDescriptions = bandDescriptions;
            Dtype = dtype;
            NodataType = nodataType;
            Colorinterp = colorinterp;
            Driver = driver;
            Count = count;
            Width = width;
            Height = height;
            Overviews = overviews;
            Scales = scales;
            Offsets = offsets;
            Colormap = colormap;
            Minzoom = minzoom;
            Maxzoom = maxzoom;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Bounds. </summary>
        public IList<double> Bounds { get; }

        /// <summary>
        /// Band Metadata
        /// <para> To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> <see cref="string"/>. </description>
        /// </item>
        /// <item>
        /// <description> <see cref="IDictionary{TKey,TValue}"/> where <c>TKey</c> is of type <see cref="string"/>, where <c>TValue</c> is of type <see cref="string"/>. </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IList<IList<BinaryData>> BandMetadata { get; }

        /// <summary> Band Descriptions. </summary>
        public IList<IList<string>> BandDescriptions { get; }

        /// <summary> Data type. </summary>
        public string Dtype { get; }

        /// <summary> NoData Type. </summary>
        public NoDataType? NodataType { get; }

        /// <summary> Color interpretation. </summary>
        public IList<string> Colorinterp { get; }

        /// <summary> Driver. </summary>
        public string Driver { get; }

        /// <summary> Count. </summary>
        public int? Count { get; }

        /// <summary> Width. </summary>
        public int? Width { get; }

        /// <summary> Height. </summary>
        public int? Height { get; }

        /// <summary> Overviews. </summary>
        public IList<string> Overviews { get; }

        /// <summary> Scales. </summary>
        public IList<long> Scales { get; }

        /// <summary> Offsets. </summary>
        public IList<long> Offsets { get; }

        /// <summary> Colormap. </summary>
        public IDictionary<string, IList<string>> Colormap { get; }

        /// <summary> Minzoom. </summary>
        public long? Minzoom { get; }

        /// <summary> Maxzoom. </summary>
        public long? Maxzoom { get; }
    }
}
