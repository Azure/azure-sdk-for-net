// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.PlanetaryComputer
{
    // Data plane generated client.
    /// <summary> The Geocatalog service client. </summary>
    public partial class GeocatalogClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://geocatalog.spatio.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of GeocatalogClient for mocking. </summary>
        protected GeocatalogClient()
        {
        }

        /// <summary> Initializes a new instance of GeocatalogClient. </summary>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public GeocatalogClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new AzurePlanetaryComputerClientOptions())
        {
        }

        /// <summary> Initializes a new instance of GeocatalogClient. </summary>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public GeocatalogClient(Uri endpoint, TokenCredential credential, AzurePlanetaryComputerClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AzurePlanetaryComputerClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get Auth Config. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Get the app id and tenant id information to make a MSAL request for this
        /// GeoCatalog instance.
        /// </remarks>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAuthConfigAsync(CancellationToken)']/*" />
        public virtual async Task<Response<AuthConfig>> GetAuthConfigAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetAuthConfigAsync(context).ConfigureAwait(false);
            return Response.FromValue(AuthConfig.FromResponse(response), response);
        }

        /// <summary> Get Auth Config. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Get the app id and tenant id information to make a MSAL request for this
        /// GeoCatalog instance.
        /// </remarks>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAuthConfig(CancellationToken)']/*" />
        public virtual Response<AuthConfig> GetAuthConfig(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetAuthConfig(context);
            return Response.FromValue(AuthConfig.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get Auth Config
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAuthConfigAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAuthConfigAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetAuthConfigAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAuthConfig");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAuthConfigRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Auth Config
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAuthConfig(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAuthConfig(RequestContext)']/*" />
        public virtual Response GetAuthConfig(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAuthConfig");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAuthConfigRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Azmaps Client Id. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Fetch the client id for the Azure Maps API service based on the current
        /// on the current identity. This client id is used for the Explorer to
        /// authenticate with the Azure Maps API service.
        /// </remarks>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAzmapsClientIdAsync(CancellationToken)']/*" />
        public virtual async Task<Response<AzMapsClientId>> GetAzmapsClientIdAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetAzmapsClientIdAsync(context).ConfigureAwait(false);
            return Response.FromValue(AzMapsClientId.FromResponse(response), response);
        }

        /// <summary> Get Azmaps Client Id. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Fetch the client id for the Azure Maps API service based on the current
        /// on the current identity. This client id is used for the Explorer to
        /// authenticate with the Azure Maps API service.
        /// </remarks>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAzmapsClientId(CancellationToken)']/*" />
        public virtual Response<AzMapsClientId> GetAzmapsClientId(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetAzmapsClientId(context);
            return Response.FromValue(AzMapsClientId.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get Azmaps Client Id
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAzmapsClientIdAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAzmapsClientIdAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetAzmapsClientIdAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAzmapsClientId");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAzmapsClientIdRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Azmaps Client Id
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAzmapsClientId(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAzmapsClientId(RequestContext)']/*" />
        public virtual Response GetAzmapsClientId(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAzmapsClientId");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAzmapsClientIdRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Azmaps Token. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Fetch a token for the Azure Maps API service based on the current
        /// service identity. This token is used for the Explorer to authenticate
        /// with the Azure Maps API service.
        /// </remarks>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAzmapsTokenAsync(CancellationToken)']/*" />
        public virtual async Task<Response<AzMapsToken>> GetAzmapsTokenAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetAzmapsTokenAsync(context).ConfigureAwait(false);
            return Response.FromValue(AzMapsToken.FromResponse(response), response);
        }

        /// <summary> Get Azmaps Token. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Fetch a token for the Azure Maps API service based on the current
        /// service identity. This token is used for the Explorer to authenticate
        /// with the Azure Maps API service.
        /// </remarks>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAzmapsToken(CancellationToken)']/*" />
        public virtual Response<AzMapsToken> GetAzmapsToken(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetAzmapsToken(context);
            return Response.FromValue(AzMapsToken.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get Azmaps Token
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAzmapsTokenAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAzmapsTokenAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetAzmapsTokenAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAzmapsToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAzmapsTokenRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Azmaps Token
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAzmapsToken(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GeocatalogClient.xml" path="doc/members/member[@name='GetAzmapsToken(RequestContext)']/*" />
        public virtual Response GetAzmapsToken(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAzmapsToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAzmapsTokenRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetAuthConfigRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/geocatalog/auth", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAzmapsClientIdRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/geocatalog/map/id", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAzmapsTokenRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/geocatalog/map/token", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
