// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PlanetaryComputer;

namespace Customizations
{
    /// <summary> The GeocatalogClient. </summary>
    public partial class GeocatalogClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://geocatalog.spatio.azure.com/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of GeocatalogClient for mocking. </summary>
        protected GeocatalogClient()
        {
        }

        /// <summary> Initializes a new instance of GeocatalogClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public GeocatalogClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new GeocatalogClientOptions())
        {
        }

        /// <summary> Initializes a new instance of GeocatalogClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public GeocatalogClient(Uri endpoint, TokenCredential credential, GeocatalogClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new GeocatalogClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Get the app id and tenant id information to make a MSAL request for this
        /// GeoCatalog instance.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetAuthConfig(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAuthConfig");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAuthConfigRequest(context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the app id and tenant id information to make a MSAL request for this
        /// GeoCatalog instance.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAuthConfigAsync(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAuthConfig");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAuthConfigRequest(context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the app id and tenant id information to make a MSAL request for this
        /// GeoCatalog instance.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<AuthConfig> GetAuthConfig(CancellationToken cancellationToken = default)
        {
            Response result = GetAuthConfig(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((AuthConfig)result, result);
        }

        /// <summary>
        /// Get the app id and tenant id information to make a MSAL request for this
        /// GeoCatalog instance.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<AuthConfig>> GetAuthConfigAsync(CancellationToken cancellationToken = default)
        {
            Response result = await GetAuthConfigAsync(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((AuthConfig)result, result);
        }

        /// <summary>
        /// [Protocol Method] Fetch the client id for the Azure Maps API service based on the current
        /// on the current identity. This client id is used for the Explorer to
        /// authenticate with the Azure Maps API service.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetAzmapsClientId(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAzmapsClientId");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAzmapsClientIdRequest(context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Fetch the client id for the Azure Maps API service based on the current
        /// on the current identity. This client id is used for the Explorer to
        /// authenticate with the Azure Maps API service.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAzmapsClientIdAsync(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAzmapsClientId");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAzmapsClientIdRequest(context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Fetch the client id for the Azure Maps API service based on the current
        /// on the current identity. This client id is used for the Explorer to
        /// authenticate with the Azure Maps API service.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<AzMapsClientId> GetAzmapsClientId(CancellationToken cancellationToken = default)
        {
            Response result = GetAzmapsClientId(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((AzMapsClientId)result, result);
        }

        /// <summary>
        /// Fetch the client id for the Azure Maps API service based on the current
        /// on the current identity. This client id is used for the Explorer to
        /// authenticate with the Azure Maps API service.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<AzMapsClientId>> GetAzmapsClientIdAsync(CancellationToken cancellationToken = default)
        {
            Response result = await GetAzmapsClientIdAsync(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((AzMapsClientId)result, result);
        }

        /// <summary>
        /// [Protocol Method] Fetch a token for the Azure Maps API service based on the current
        /// service identity. This token is used for the Explorer to authenticate
        /// with the Azure Maps API service.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetAzmapsToken(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAzmapsToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAzmapsTokenRequest(context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Fetch a token for the Azure Maps API service based on the current
        /// service identity. This token is used for the Explorer to authenticate
        /// with the Azure Maps API service.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAzmapsTokenAsync(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("GeocatalogClient.GetAzmapsToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAzmapsTokenRequest(context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Fetch a token for the Azure Maps API service based on the current
        /// service identity. This token is used for the Explorer to authenticate
        /// with the Azure Maps API service.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<AzMapsToken> GetAzmapsToken(CancellationToken cancellationToken = default)
        {
            Response result = GetAzmapsToken(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((AzMapsToken)result, result);
        }

        /// <summary>
        /// Fetch a token for the Azure Maps API service based on the current
        /// service identity. This token is used for the Explorer to authenticate
        /// with the Azure Maps API service.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<AzMapsToken>> GetAzmapsTokenAsync(CancellationToken cancellationToken = default)
        {
            Response result = await GetAzmapsTokenAsync(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((AzMapsToken)result, result);
        }
    }
}
