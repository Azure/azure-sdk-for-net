// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PlanetaryComputer;
using Microsoft.PlanetaryComputer.IngestionSources;

namespace Customizations
{
    /// <summary> The IngestionSourcesClient. </summary>
    public partial class IngestionSourcesClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://geocatalog.spatio.azure.com/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of IngestionSourcesClient for mocking. </summary>
        protected IngestionSourcesClient()
        {
        }

        /// <summary> Initializes a new instance of IngestionSourcesClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public IngestionSourcesClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new IngestionSourcesClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IngestionSourcesClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public IngestionSourcesClient(Uri endpoint, TokenCredential credential, IngestionSourcesClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new IngestionSourcesClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Get ingestion sources in a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetIngestionSources(long? top, long? skip, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.GetIngestionSources");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIngestionSourcesRequest(top, skip, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get ingestion sources in a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetIngestionSourcesAsync(long? top, long? skip, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.GetIngestionSources");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIngestionSourcesRequest(top, skip, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get ingestion sources in a geo-catalog. </summary>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IngestionSourcesPagedResult> GetIngestionSources(long? top = default, long? skip = default, CancellationToken cancellationToken = default)
        {
            Response result = GetIngestionSources(top, skip, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((IngestionSourcesPagedResult)result, result);
        }

        /// <summary> Get ingestion sources in a geo-catalog. </summary>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IngestionSourcesPagedResult>> GetIngestionSourcesAsync(long? top = default, long? skip = default, CancellationToken cancellationToken = default)
        {
            Response result = await GetIngestionSourcesAsync(top, skip, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((IngestionSourcesPagedResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Create a new ingestion source in a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreateIngestionSource(RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.CreateIngestionSource");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateIngestionSourceRequest(content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create a new ingestion source in a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateIngestionSourceAsync(RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.CreateIngestionSource");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateIngestionSourceRequest(content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new ingestion source in a geo-catalog. </summary>
        /// <param name="ingestionSource"> Definition of the ingestion source. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ingestionSource"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IngestionSource> CreateIngestionSource(IngestionSource ingestionSource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(ingestionSource, nameof(ingestionSource));

            Response result = CreateIngestionSource(ingestionSource, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((IngestionSource)result, result);
        }

        /// <summary> Create a new ingestion source in a geo-catalog. </summary>
        /// <param name="ingestionSource"> Definition of the ingestion source. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ingestionSource"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IngestionSource>> CreateIngestionSourceAsync(IngestionSource ingestionSource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(ingestionSource, nameof(ingestionSource));

            Response result = await CreateIngestionSourceAsync(ingestionSource, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((IngestionSource)result, result);
        }

        /// <summary>
        /// [Protocol Method] Get an ingestion source in a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetIngestionSource(Guid id, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.GetIngestionSource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIngestionSourceRequest(id, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get an ingestion source in a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetIngestionSourceAsync(Guid id, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.GetIngestionSource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIngestionSourceRequest(id, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an ingestion source in a geo-catalog. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IngestionSource> GetIngestionSource(Guid id, CancellationToken cancellationToken = default)
        {
            Response result = GetIngestionSource(id, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((IngestionSource)result, result);
        }

        /// <summary> Get an ingestion source in a geo-catalog. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IngestionSource>> GetIngestionSourceAsync(Guid id, CancellationToken cancellationToken = default)
        {
            Response result = await GetIngestionSourceAsync(id, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((IngestionSource)result, result);
        }

        /// <summary>
        /// [Protocol Method] Update an existing ingestion source in a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreateOrReplaceIngestionSource(string id, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.CreateOrReplaceIngestionSource");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(id, nameof(id));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateOrReplaceIngestionSourceRequest(id, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Update an existing ingestion source in a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateOrReplaceIngestionSourceAsync(string id, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.CreateOrReplaceIngestionSource");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(id, nameof(id));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateOrReplaceIngestionSourceRequest(id, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update an existing ingestion source in a geo-catalog. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="ingestionSource"> Definition of the ingestion source. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="ingestionSource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IngestionSource> CreateOrReplaceIngestionSource(string id, IngestionSource ingestionSource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNull(ingestionSource, nameof(ingestionSource));

            Response result = CreateOrReplaceIngestionSource(id, ingestionSource, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((IngestionSource)result, result);
        }

        /// <summary> Update an existing ingestion source in a geo-catalog. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="ingestionSource"> Definition of the ingestion source. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="ingestionSource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IngestionSource>> CreateOrReplaceIngestionSourceAsync(string id, IngestionSource ingestionSource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNull(ingestionSource, nameof(ingestionSource));

            Response result = await CreateOrReplaceIngestionSourceAsync(id, ingestionSource, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((IngestionSource)result, result);
        }

        /// <summary>
        /// [Protocol Method] Delete an ingestion source from a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteIngestionSource(string id, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.DeleteIngestionSource");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(id, nameof(id));

                using HttpMessage message = CreateDeleteIngestionSourceRequest(id, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Delete an ingestion source from a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteIngestionSourceAsync(string id, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.DeleteIngestionSource");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(id, nameof(id));

                using HttpMessage message = CreateDeleteIngestionSourceRequest(id, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an ingestion source from a geo-catalog. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteIngestionSource(string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return DeleteIngestionSource(id, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Delete an ingestion source from a geo-catalog. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteIngestionSourceAsync(string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return await DeleteIngestionSourceAsync(id, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Get all managed identities with access to storage accounts configured for a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetManagedIdentities(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.GetManagedIdentities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetManagedIdentitiesRequest(context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get all managed identities with access to storage accounts configured for a geo-catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetManagedIdentitiesAsync(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionSourcesClient.GetManagedIdentities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetManagedIdentitiesRequest(context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all managed identities with access to storage accounts configured for a geo-catalog. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<ManagedIdentitiesPagedResult> GetManagedIdentities(CancellationToken cancellationToken = default)
        {
            Response result = GetManagedIdentities(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((ManagedIdentitiesPagedResult)result, result);
        }

        /// <summary> Get all managed identities with access to storage accounts configured for a geo-catalog. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<ManagedIdentitiesPagedResult>> GetManagedIdentitiesAsync(CancellationToken cancellationToken = default)
        {
            Response result = await GetManagedIdentitiesAsync(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((ManagedIdentitiesPagedResult)result, result);
        }
    }
}
