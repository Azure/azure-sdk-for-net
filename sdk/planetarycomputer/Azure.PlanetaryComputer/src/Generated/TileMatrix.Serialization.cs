// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.PlanetaryComputer
{
    public partial class TileMatrix : IUtf8JsonSerializable, IJsonModel<TileMatrix>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TileMatrix>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TileMatrix>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TileMatrix>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TileMatrix)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Keywords))
            {
                writer.WritePropertyName("keywords"u8);
                writer.WriteStartArray();
                foreach (var item in Keywords)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            writer.WritePropertyName("scaleDenominator"u8);
            writer.WriteNumberValue(ScaleDenominator);
            writer.WritePropertyName("cellSize"u8);
            writer.WriteNumberValue(CellSize);
            if (Optional.IsDefined(CornerOfOrigin))
            {
                writer.WritePropertyName("cornerOfOrigin"u8);
                writer.WriteStringValue(CornerOfOrigin.Value.ToString());
            }
            writer.WritePropertyName("pointOfOrigin"u8);
            writer.WriteStartArray();
            foreach (var item in PointOfOrigin)
            {
                writer.WriteNumberValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("tileWidth"u8);
            writer.WriteNumberValue(TileWidth);
            writer.WritePropertyName("tileHeight"u8);
            writer.WriteNumberValue(TileHeight);
            writer.WritePropertyName("matrixWidth"u8);
            writer.WriteNumberValue(MatrixWidth);
            writer.WritePropertyName("matrixHeight"u8);
            writer.WriteNumberValue(MatrixHeight);
            if (Optional.IsCollectionDefined(VariableMatrixWidths))
            {
                writer.WritePropertyName("variableMatrixWidths"u8);
                writer.WriteStartArray();
                foreach (var item in VariableMatrixWidths)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        TileMatrix IJsonModel<TileMatrix>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TileMatrix>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TileMatrix)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTileMatrix(document.RootElement, options);
        }

        internal static TileMatrix DeserializeTileMatrix(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string title = default;
            string description = default;
            IReadOnlyList<string> keywords = default;
            string id = default;
            float scaleDenominator = default;
            float cellSize = default;
            TileMatrixCornerOfOrigin? cornerOfOrigin = default;
            IReadOnlyList<double> pointOfOrigin = default;
            int tileWidth = default;
            int tileHeight = default;
            int matrixWidth = default;
            int matrixHeight = default;
            IReadOnlyList<VariableMatrixWidth> variableMatrixWidths = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keywords"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    keywords = array;
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scaleDenominator"u8))
                {
                    scaleDenominator = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("cellSize"u8))
                {
                    cellSize = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("cornerOfOrigin"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cornerOfOrigin = new TileMatrixCornerOfOrigin(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("pointOfOrigin"u8))
                {
                    List<double> array = new List<double>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    pointOfOrigin = array;
                    continue;
                }
                if (property.NameEquals("tileWidth"u8))
                {
                    tileWidth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("tileHeight"u8))
                {
                    tileHeight = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("matrixWidth"u8))
                {
                    matrixWidth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("matrixHeight"u8))
                {
                    matrixHeight = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("variableMatrixWidths"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VariableMatrixWidth> array = new List<VariableMatrixWidth>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VariableMatrixWidth.DeserializeVariableMatrixWidth(item, options));
                    }
                    variableMatrixWidths = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TileMatrix(
                title,
                description,
                keywords ?? new ChangeTrackingList<string>(),
                id,
                scaleDenominator,
                cellSize,
                cornerOfOrigin,
                pointOfOrigin,
                tileWidth,
                tileHeight,
                matrixWidth,
                matrixHeight,
                variableMatrixWidths ?? new ChangeTrackingList<VariableMatrixWidth>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TileMatrix>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TileMatrix>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzurePlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(TileMatrix)} does not support writing '{options.Format}' format.");
            }
        }

        TileMatrix IPersistableModel<TileMatrix>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TileMatrix>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeTileMatrix(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TileMatrix)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TileMatrix>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TileMatrix FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeTileMatrix(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
