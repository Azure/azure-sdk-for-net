// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.PlanetaryComputer
{
    public partial class ItemCollectionModel : IUtf8JsonSerializable, IJsonModel<ItemCollectionModel>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ItemCollectionModel>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ItemCollectionModel>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemCollectionModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ItemCollectionModel)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("features"u8);
            writer.WriteStartArray();
            foreach (var item in Features)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Bbox))
            {
                writer.WritePropertyName("bbox"u8);
                writer.WriteStartArray();
                foreach (var item in Bbox)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Context))
            {
                writer.WritePropertyName("context"u8);
                writer.WriteObjectValue(Context, options);
            }
        }

        ItemCollectionModel IJsonModel<ItemCollectionModel>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemCollectionModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ItemCollectionModel)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeItemCollectionModel(document.RootElement, options);
        }

        internal static ItemCollectionModel DeserializeItemCollectionModel(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<StacItemModel> features = default;
            IList<double> bbox = default;
            ContextExtension context = default;
            StacModelType type = default;
            string stacVersion = default;
            IList<StacLink> links = default;
            string msftCreated = default;
            string msftUpdated = default;
            string msftShortDescription = default;
            IList<string> stacExtensions = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("features"u8))
                {
                    List<StacItemModel> array = new List<StacItemModel>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(StacItemModel.DeserializeStacItemModel(item, options));
                    }
                    features = array;
                    continue;
                }
                if (property.NameEquals("bbox"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<double> array = new List<double>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    bbox = array;
                    continue;
                }
                if (property.NameEquals("context"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    context = ContextExtension.DeserializeContextExtension(property.Value, options);
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new StacModelType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("stac_version"u8))
                {
                    stacVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("links"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<StacLink> array = new List<StacLink>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(StacLink.DeserializeStacLink(item, options));
                    }
                    links = array;
                    continue;
                }
                if (property.NameEquals("msft:_created"u8))
                {
                    msftCreated = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("msft:_updated"u8))
                {
                    msftUpdated = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("msft:short_description"u8))
                {
                    msftShortDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stac_extensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    stacExtensions = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ItemCollectionModel(
                type,
                stacVersion,
                links ?? new ChangeTrackingList<StacLink>(),
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacExtensions ?? new ChangeTrackingList<string>(),
                serializedAdditionalRawData,
                features,
                bbox ?? new ChangeTrackingList<double>(),
                context);
        }

        BinaryData IPersistableModel<ItemCollectionModel>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemCollectionModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzurePlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ItemCollectionModel)} does not support writing '{options.Format}' format.");
            }
        }

        ItemCollectionModel IPersistableModel<ItemCollectionModel>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemCollectionModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeItemCollectionModel(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ItemCollectionModel)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ItemCollectionModel>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new ItemCollectionModel FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeItemCollectionModel(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
