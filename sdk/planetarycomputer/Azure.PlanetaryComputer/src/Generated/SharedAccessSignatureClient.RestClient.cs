// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure;
using Azure.Core;
using Microsoft.PlanetaryComputer;

namespace Customizations
{
    /// <summary></summary>
    public partial class SharedAccessSignatureClient
    {
        private static ResponseClassifier _pipelineMessageClassifier200;

        private static ResponseClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 = new StatusCodeClassifier(stackalloc ushort[] { 200 });

        internal HttpMessage CreateGetTokenRequest(string collectionId, long? duration, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/sas/token/", false);
            uri.AppendPath(collectionId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (duration != null)
            {
                uri.AppendQuery("duration", Microsoft.PlanetaryComputer.TypeFormatters.ConvertToString(duration, null), true);
            }
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRevokeTokenRequest(long? duration, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/sas/token/revoke", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (duration != null)
            {
                uri.AppendQuery("duration", Microsoft.PlanetaryComputer.TypeFormatters.ConvertToString(duration, null), true);
            }
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSignRequest(string href, long? duration, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/sas/sign", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            uri.AppendQuery("href", href, true);
            if (duration != null)
            {
                uri.AppendQuery("duration", Microsoft.PlanetaryComputer.TypeFormatters.ConvertToString(duration, null), true);
            }
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }
    }
}
