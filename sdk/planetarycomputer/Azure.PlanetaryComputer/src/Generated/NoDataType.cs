// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.PlanetaryComputer
{
    /// <summary> NoDataType. </summary>
    public readonly partial struct NoDataType : IEquatable<NoDataType>
    {
        private readonly string _value;
        /// <summary> Nodata represented by alpha channel. </summary>
        private const string AlphaValue = "Alpha";
        /// <summary> Nodata represented by a mask. </summary>
        private const string MaskValue = "Mask";
        /// <summary> Nodata represented internally in the dataset. </summary>
        private const string InternalValue = "Internal";
        /// <summary> Explicit nodata value defined in the dataset. </summary>
        private const string NodataValue = "Nodata";
        /// <summary> No nodata value defined. </summary>
        private const string NoneValue = "None";

        /// <summary> Initializes a new instance of <see cref="NoDataType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NoDataType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Nodata represented by alpha channel. </summary>
        public static NoDataType Alpha { get; } = new NoDataType(AlphaValue);

        /// <summary> Nodata represented by a mask. </summary>
        public static NoDataType Mask { get; } = new NoDataType(MaskValue);

        /// <summary> Nodata represented internally in the dataset. </summary>
        public static NoDataType Internal { get; } = new NoDataType(InternalValue);

        /// <summary> Explicit nodata value defined in the dataset. </summary>
        public static NoDataType Nodata { get; } = new NoDataType(NodataValue);

        /// <summary> No nodata value defined. </summary>
        public static NoDataType None { get; } = new NoDataType(NoneValue);

        /// <summary> Determines if two <see cref="NoDataType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(NoDataType left, NoDataType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="NoDataType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(NoDataType left, NoDataType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="NoDataType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator NoDataType(string value) => new NoDataType(value);

        /// <summary> Converts a string to a <see cref="NoDataType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator NoDataType?(string value) => value == null ? null : new NoDataType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NoDataType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(NoDataType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
