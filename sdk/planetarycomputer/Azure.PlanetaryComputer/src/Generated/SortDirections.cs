// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.PlanetaryComputer
{
    /// <summary> Defines the sorting directions for query results in STAC API. </summary>
    public readonly partial struct SortDirections : IEquatable<SortDirections>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SortDirections"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SortDirections(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AscValue = "asc";
        private const string DescValue = "desc";

        /// <summary> Sort results in ascending order. </summary>
        public static SortDirections Asc { get; } = new SortDirections(AscValue);
        /// <summary> Sort results in descending order. </summary>
        public static SortDirections Desc { get; } = new SortDirections(DescValue);
        /// <summary> Determines if two <see cref="SortDirections"/> values are the same. </summary>
        public static bool operator ==(SortDirections left, SortDirections right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SortDirections"/> values are not the same. </summary>
        public static bool operator !=(SortDirections left, SortDirections right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SortDirections"/>. </summary>
        public static implicit operator SortDirections(string value) => new SortDirections(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SortDirections other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SortDirections other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
