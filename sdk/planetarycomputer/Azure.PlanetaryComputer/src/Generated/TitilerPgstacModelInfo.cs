// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.PlanetaryComputer
{
    /// <summary> Information about a registered STAC search query. </summary>
    public partial class TitilerPgstacModelInfo
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TitilerPgstacModelInfo"/>. </summary>
        /// <param name="search">
        /// Details of the saved search query
        ///
        /// See the [PgSTAC Search table definition](https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915).
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="search"/> is null. </exception>
        internal TitilerPgstacModelInfo(PgStacSearch search)
        {
            Argument.AssertNotNull(search, nameof(search));

            Search = search;
            Links = new ChangeTrackingList<StacLink>();
        }

        /// <summary> Initializes a new instance of <see cref="TitilerPgstacModelInfo"/>. </summary>
        /// <param name="search">
        /// Details of the saved search query
        ///
        /// See the [PgSTAC Search table definition](https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915).
        /// </param>
        /// <param name="links"> Related links for the search query. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TitilerPgstacModelInfo(PgStacSearch search, IReadOnlyList<StacLink> links, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Search = search;
            Links = links;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TitilerPgstacModelInfo"/> for deserialization. </summary>
        internal TitilerPgstacModelInfo()
        {
        }

        /// <summary>
        /// Details of the saved search query
        ///
        /// See the [PgSTAC Search table definition](https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915).
        /// </summary>
        public PgStacSearch Search { get; }
        /// <summary> Related links for the search query. </summary>
        public IReadOnlyList<StacLink> Links { get; }
    }
}
