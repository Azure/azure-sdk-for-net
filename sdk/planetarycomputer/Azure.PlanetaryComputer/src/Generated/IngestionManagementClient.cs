// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PlanetaryComputer;
using Microsoft.PlanetaryComputer.Ingestions;
using Microsoft.PlanetaryComputer.Ingestions.IngestionRuns;

namespace Customizations
{
    /// <summary> The IngestionManagementClient. </summary>
    public partial class IngestionManagementClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://geocatalog.spatio.azure.com/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of IngestionManagementClient for mocking. </summary>
        protected IngestionManagementClient()
        {
        }

        /// <summary> Initializes a new instance of IngestionManagementClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public IngestionManagementClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new IngestionManagementClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IngestionManagementClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public IngestionManagementClient(Uri endpoint, TokenCredential credential, IngestionManagementClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new IngestionManagementClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Get ingestions of a catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetIngestions(string collectionId, long? top, long? skip, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

                using HttpMessage message = CreateGetIngestionsRequest(collectionId, top, skip, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get ingestions of a catalog
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetIngestionsAsync(string collectionId, long? top, long? skip, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

                using HttpMessage message = CreateGetIngestionsRequest(collectionId, top, skip, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get ingestions of a catalog. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IngestionDefinitionsPagedResult> GetIngestions(string collectionId, long? top = default, long? skip = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

            Response result = GetIngestions(collectionId, top, skip, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((IngestionDefinitionsPagedResult)result, result);
        }

        /// <summary> Get ingestions of a catalog. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IngestionDefinitionsPagedResult>> GetIngestionsAsync(string collectionId, long? top = default, long? skip = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

            Response result = await GetIngestionsAsync(collectionId, top, skip, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((IngestionDefinitionsPagedResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Create a new ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreateIngestion(string collectionId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.CreateIngestion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateIngestionRequest(collectionId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create a new ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateIngestionAsync(string collectionId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.CreateIngestion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateIngestionRequest(collectionId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new ingestion. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="definition"> Definition of the ingestion. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="definition"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IngestionConfiguration> CreateIngestion(string collectionId, IngestionConfiguration definition, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNull(definition, nameof(definition));

            Response result = CreateIngestion(collectionId, definition, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((IngestionConfiguration)result, result);
        }

        /// <summary> Create a new ingestion. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="definition"> Definition of the ingestion. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="definition"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IngestionConfiguration>> CreateIngestionAsync(string collectionId, IngestionConfiguration definition, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNull(definition, nameof(definition));

            Response result = await CreateIngestionAsync(collectionId, definition, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((IngestionConfiguration)result, result);
        }

        /// <summary>
        /// [Protocol Method] Get the definition of an ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetIngestion(string collectionId, string ingestionId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

                using HttpMessage message = CreateGetIngestionRequest(collectionId, ingestionId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the definition of an ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetIngestionAsync(string collectionId, string ingestionId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

                using HttpMessage message = CreateGetIngestionRequest(collectionId, ingestionId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the definition of an ingestion. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IngestionConfiguration> GetIngestion(string collectionId, string ingestionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

            Response result = GetIngestion(collectionId, ingestionId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((IngestionConfiguration)result, result);
        }

        /// <summary> Get the definition of an ingestion. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IngestionConfiguration>> GetIngestionAsync(string collectionId, string ingestionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

            Response result = await GetIngestionAsync(collectionId, ingestionId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((IngestionConfiguration)result, result);
        }

        /// <summary>
        /// [Protocol Method] Update an existing ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="ingestionId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response UpdateIngestion(string collectionId, string ingestionId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.UpdateIngestion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateIngestionRequest(collectionId, ingestionId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Update an existing ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="ingestionId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UpdateIngestionAsync(string collectionId, string ingestionId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.UpdateIngestion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateIngestionRequest(collectionId, ingestionId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs in progress or queued. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Operation DeleteIngestion(WaitUntil waitUntil, string collectionId, string ingestionId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.DeleteIngestion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

                using HttpMessage message = CreateDeleteIngestionRequest(collectionId, ingestionId, context);
                return ProtocolOperationHelpers.ProcessMessage(Pipeline, message, ClientDiagnostics, "IngestionManagementClient.DeleteIngestion", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs in progress or queued. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Operation> DeleteIngestionAsync(WaitUntil waitUntil, string collectionId, string ingestionId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.DeleteIngestion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

                using HttpMessage message = CreateDeleteIngestionRequest(collectionId, ingestionId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(Pipeline, message, ClientDiagnostics, "IngestionManagementClient.DeleteIngestionAsync", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs in progress or queued. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Operation DeleteIngestion(WaitUntil waitUntil, string collectionId, string ingestionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

            return DeleteIngestion(waitUntil, collectionId, ingestionId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Delete an ingestion from a catalog. All runs of the ingestion will be deleted. Ingestion must not have any runs in progress or queued. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Operation> DeleteIngestionAsync(WaitUntil waitUntil, string collectionId, string ingestionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

            return await DeleteIngestionAsync(waitUntil, collectionId, ingestionId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Get the runs of an ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetIngestionRuns(string collectionId, string ingestionId, long? top, long? skip, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestionRuns");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

                using HttpMessage message = CreateGetIngestionRunsRequest(collectionId, ingestionId, top, skip, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the runs of an ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetIngestionRunsAsync(string collectionId, string ingestionId, long? top, long? skip, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestionRuns");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

                using HttpMessage message = CreateGetIngestionRunsRequest(collectionId, ingestionId, top, skip, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the runs of an ingestion. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IngestionRunsPagedResult> GetIngestionRuns(string collectionId, string ingestionId, long? top = default, long? skip = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

            Response result = GetIngestionRuns(collectionId, ingestionId, top, skip, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((IngestionRunsPagedResult)result, result);
        }

        /// <summary> Get the runs of an ingestion. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IngestionRunsPagedResult>> GetIngestionRunsAsync(string collectionId, string ingestionId, long? top = default, long? skip = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

            Response result = await GetIngestionRunsAsync(collectionId, ingestionId, top, skip, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((IngestionRunsPagedResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Create a new run of an ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreateIngestionRun(string collectionId, string ingestionId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.CreateIngestionRun");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

                using HttpMessage message = CreateCreateIngestionRunRequest(collectionId, ingestionId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create a new run of an ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateIngestionRunAsync(string collectionId, string ingestionId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.CreateIngestionRun");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

                using HttpMessage message = CreateCreateIngestionRunRequest(collectionId, ingestionId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new run of an ingestion. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IngestionRun> CreateIngestionRun(string collectionId, string ingestionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

            Response result = CreateIngestionRun(collectionId, ingestionId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((IngestionRun)result, result);
        }

        /// <summary> Create a new run of an ingestion. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IngestionRun>> CreateIngestionRunAsync(string collectionId, string ingestionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

            Response result = await CreateIngestionRunAsync(collectionId, ingestionId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((IngestionRun)result, result);
        }

        /// <summary>
        /// [Protocol Method] Get a run of an ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="runId"> Run id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetIngestionRun(string collectionId, string ingestionId, Guid runId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestionRun");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

                using HttpMessage message = CreateGetIngestionRunRequest(collectionId, ingestionId, runId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get a run of an ingestion
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="runId"> Run id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetIngestionRunAsync(string collectionId, string ingestionId, Guid runId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestionRun");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

                using HttpMessage message = CreateGetIngestionRunRequest(collectionId, ingestionId, runId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a run of an ingestion. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="runId"> Run id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IngestionRun> GetIngestionRun(string collectionId, string ingestionId, Guid runId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

            Response result = GetIngestionRun(collectionId, ingestionId, runId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((IngestionRun)result, result);
        }

        /// <summary> Get a run of an ingestion. </summary>
        /// <param name="collectionId"> Catalog collection id. </param>
        /// <param name="ingestionId"> Ingestion id. </param>
        /// <param name="runId"> Run id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="ingestionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IngestionRun>> GetIngestionRunAsync(string collectionId, string ingestionId, Guid runId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(ingestionId, nameof(ingestionId));

            Response result = await GetIngestionRunAsync(collectionId, ingestionId, runId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((IngestionRun)result, result);
        }

        /// <summary>
        /// [Protocol Method] Get operations of a geo-catalog collection
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="collectionId"> Operation id used to filter the results. </param>
        /// <param name="status"> Operation status used to filter the results. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetIngestionOperations(long? top, long? skip, string collectionId, string status, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestionOperations");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIngestionOperationsRequest(top, skip, collectionId, status, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get operations of a geo-catalog collection
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="collectionId"> Operation id used to filter the results. </param>
        /// <param name="status"> Operation status used to filter the results. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetIngestionOperationsAsync(long? top, long? skip, string collectionId, string status, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestionOperations");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIngestionOperationsRequest(top, skip, collectionId, status, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get operations of a geo-catalog collection. </summary>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="collectionId"> Operation id used to filter the results. </param>
        /// <param name="status"> Operation status used to filter the results. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<OperationsPagedResult> GetIngestionOperations(long? top = default, long? skip = default, string collectionId = default, OperationStatus? status = default, CancellationToken cancellationToken = default)
        {
            Response result = GetIngestionOperations(top, skip, collectionId, status?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((OperationsPagedResult)result, result);
        }

        /// <summary> Get operations of a geo-catalog collection. </summary>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="collectionId"> Operation id used to filter the results. </param>
        /// <param name="status"> Operation status used to filter the results. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<OperationsPagedResult>> GetIngestionOperationsAsync(long? top = default, long? skip = default, string collectionId = default, OperationStatus? status = default, CancellationToken cancellationToken = default)
        {
            Response result = await GetIngestionOperationsAsync(top, skip, collectionId, status?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((OperationsPagedResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Cancel all running operations of a geo-catalog collection
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteAllIngestionOperations(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.DeleteAllIngestionOperations");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteAllIngestionOperationsRequest(context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Cancel all running operations of a geo-catalog collection
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteAllIngestionOperationsAsync(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.DeleteAllIngestionOperations");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteAllIngestionOperationsRequest(context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel all running operations of a geo-catalog collection. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteAllIngestionOperations(CancellationToken cancellationToken = default)
        {
            return DeleteAllIngestionOperations(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Cancel all running operations of a geo-catalog collection. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteAllIngestionOperationsAsync(CancellationToken cancellationToken = default)
        {
            return await DeleteAllIngestionOperationsAsync(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Get an operation of a geo-catalog collection
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> Operation id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetIngestionOperation(Guid operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestionOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIngestionOperationRequest(operationId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get an operation of a geo-catalog collection
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> Operation id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetIngestionOperationAsync(Guid operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.GetIngestionOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIngestionOperationRequest(operationId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an operation of a geo-catalog collection. </summary>
        /// <param name="operationId"> Operation id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<OperationInfo> GetIngestionOperation(Guid operationId, CancellationToken cancellationToken = default)
        {
            Response result = GetIngestionOperation(operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((OperationInfo)result, result);
        }

        /// <summary> Get an operation of a geo-catalog collection. </summary>
        /// <param name="operationId"> Operation id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<OperationInfo>> GetIngestionOperationAsync(Guid operationId, CancellationToken cancellationToken = default)
        {
            Response result = await GetIngestionOperationAsync(operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((OperationInfo)result, result);
        }

        /// <summary>
        /// [Protocol Method] Cancel a running operation of a geo-catalog collection
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> Operation id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteIngestionOperation(Guid operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.DeleteIngestionOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteIngestionOperationRequest(operationId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Cancel a running operation of a geo-catalog collection
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> Operation id. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteIngestionOperationAsync(Guid operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("IngestionManagementClient.DeleteIngestionOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteIngestionOperationRequest(operationId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel a running operation of a geo-catalog collection. </summary>
        /// <param name="operationId"> Operation id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteIngestionOperation(Guid operationId, CancellationToken cancellationToken = default)
        {
            return DeleteIngestionOperation(operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Cancel a running operation of a geo-catalog collection. </summary>
        /// <param name="operationId"> Operation id. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteIngestionOperationAsync(Guid operationId, CancellationToken cancellationToken = default)
        {
            return await DeleteIngestionOperationAsync(operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }
    }
}
