// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.PlanetaryComputer
{
    /// <summary>
    /// Base type for STAC items and collections with discriminator.
    /// Please note <see cref="StacItemOrItemCollection"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="StacItemModel"/> and <see cref="ItemCollectionModel"/>.
    /// </summary>
    public abstract partial class StacItemOrItemCollection
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StacItemOrItemCollection"/>. </summary>
        protected StacItemOrItemCollection()
        {
            Links = new ChangeTrackingList<StacLink>();
            StacExtensions = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="StacItemOrItemCollection"/>. </summary>
        /// <param name="type"> The type discriminator for STAC resources. </param>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="links"> Links to related resources and endpoints. </param>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacExtensions"> URLs to STAC extensions implemented by this STAC resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StacItemOrItemCollection(StacModelType type, string stacVersion, IList<StacLink> links, string msftCreated, string msftUpdated, string msftShortDescription, IList<string> stacExtensions, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            StacVersion = stacVersion;
            Links = links;
            MsftCreated = msftCreated;
            MsftUpdated = msftUpdated;
            MsftShortDescription = msftShortDescription;
            StacExtensions = stacExtensions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The type discriminator for STAC resources. </summary>
        internal StacModelType Type { get; set; }
        /// <summary> Stac Version. </summary>
        public string StacVersion { get; set; }
        /// <summary> Links to related resources and endpoints. </summary>
        public IList<StacLink> Links { get; }
        /// <summary> MSFT Created. </summary>
        public string MsftCreated { get; set; }
        /// <summary> MSFT Updated. </summary>
        public string MsftUpdated { get; set; }
        /// <summary> MSFT Short Description. </summary>
        public string MsftShortDescription { get; set; }
        /// <summary> URLs to STAC extensions implemented by this STAC resource. </summary>
        public IList<string> StacExtensions { get; }
    }
}
