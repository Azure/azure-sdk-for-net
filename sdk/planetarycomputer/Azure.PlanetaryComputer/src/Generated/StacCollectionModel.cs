// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.PlanetaryComputer
{
    /// <summary>
    /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
    /// 
    /// Represents a STAC collection.
    /// </summary>
    public partial class StacCollectionModel
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="StacCollectionModel"/>. </summary>
        /// <param name="id"> Unique identifier for the collection. </param>
        /// <param name="description"> Detailed description of the collection. </param>
        /// <param name="links"> Links to related resources and endpoints. </param>
        /// <param name="license"> License identifier for the collection data. </param>
        /// <param name="extent"> Spatial and temporal extent of the collection. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="description"/>, <paramref name="links"/>, <paramref name="license"/> or <paramref name="extent"/> is null. </exception>
        public StacCollectionModel(string id, string description, IEnumerable<StacLink> links, string license, StacExtent extent)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(description, nameof(description));
            Argument.AssertNotNull(links, nameof(links));
            Argument.AssertNotNull(license, nameof(license));
            Argument.AssertNotNull(extent, nameof(extent));

            StacExtensions = new ChangeTrackingList<string>();
            Id = id;
            Description = description;
            Links = links.ToList();
            Assets = new ChangeTrackingDictionary<string, StacAsset>();
            License = license;
            Extent = extent;
            Keywords = new ChangeTrackingList<string>();
            Providers = new ChangeTrackingList<StacProvider>();
        }

        /// <summary> Initializes a new instance of <see cref="StacCollectionModel"/>. </summary>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacExtensions"> URLs to STAC extensions implemented by this STAC resource. </param>
        /// <param name="id"> Unique identifier for the collection. </param>
        /// <param name="description"> Detailed description of the collection. </param>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="links"> Links to related resources and endpoints. </param>
        /// <param name="title"> Human-readable title for the collection. </param>
        /// <param name="type"> Type. </param>
        /// <param name="assets"> Assets. </param>
        /// <param name="license"> License identifier for the collection data. </param>
        /// <param name="extent"> Spatial and temporal extent of the collection. </param>
        /// <param name="keywords"> Keywords describing the collection. </param>
        /// <param name="providers"> Organizations or individuals who provide the collection data. </param>
        /// <param name="summaries">
        /// Summaries
        /// 
        /// See the [STAC Collection Spec](https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#spatial-extent-object).
        /// </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal StacCollectionModel(string msftCreated, string msftUpdated, string msftShortDescription, IList<string> stacExtensions, string id, string description, string stacVersion, IList<StacLink> links, string title, string @type, IDictionary<string, StacAsset> assets, string license, StacExtent extent, IList<string> keywords, IList<StacProvider> providers, StacCollectionSummaries summaries, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            MsftCreated = msftCreated;
            MsftUpdated = msftUpdated;
            MsftShortDescription = msftShortDescription;
            StacExtensions = stacExtensions;
            Id = id;
            Description = description;
            StacVersion = stacVersion;
            Links = links;
            Title = title;
            Type = @type;
            Assets = assets;
            License = license;
            Extent = extent;
            Keywords = keywords;
            Providers = providers;
            Summaries = summaries;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> MSFT Created. </summary>
        public string MsftCreated { get; set; }

        /// <summary> MSFT Updated. </summary>
        public string MsftUpdated { get; set; }

        /// <summary> MSFT Short Description. </summary>
        public string MsftShortDescription { get; set; }

        /// <summary> URLs to STAC extensions implemented by this STAC resource. </summary>
        public IList<string> StacExtensions { get; }

        /// <summary> Unique identifier for the collection. </summary>
        public string Id { get; set; }

        /// <summary> Detailed description of the collection. </summary>
        public string Description { get; set; }

        /// <summary> Stac Version. </summary>
        public string StacVersion { get; set; }

        /// <summary> Links to related resources and endpoints. </summary>
        public IList<StacLink> Links { get; }

        /// <summary> Human-readable title for the collection. </summary>
        public string Title { get; set; }

        /// <summary> Type. </summary>
        public string Type { get; set; }

        /// <summary> Assets. </summary>
        public IDictionary<string, StacAsset> Assets { get; }

        /// <summary> License identifier for the collection data. </summary>
        public string License { get; set; }

        /// <summary> Spatial and temporal extent of the collection. </summary>
        public StacExtent Extent { get; set; }

        /// <summary> Keywords describing the collection. </summary>
        public IList<string> Keywords { get; }

        /// <summary> Organizations or individuals who provide the collection data. </summary>
        public IList<StacProvider> Providers { get; }

        /// <summary>
        /// Summaries
        /// 
        /// See the [STAC Collection Spec](https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#spatial-extent-object).
        /// </summary>
        public StacCollectionSummaries Summaries { get; set; }
    }
}
