// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.PlanetaryComputer
{
    /// <summary> Resampling algorithm to use when reading source raster data at different resolutions. </summary>
    public readonly partial struct ResamplingMethod : IEquatable<ResamplingMethod>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResamplingMethod"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResamplingMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NearestValue = "nearest";
        private const string BilinearValue = "bilinear";
        private const string CubicValue = "cubic";
        private const string CubicSplineValue = "cubic_spline";
        private const string LanczosValue = "lanczos";
        private const string AverageValue = "average";
        private const string ModeValue = "mode";
        private const string GaussValue = "gauss";
        private const string RmsValue = "rms";

        /// <summary> Nearest neighbor - fastest method that selects the closest pixel value. </summary>
        public static ResamplingMethod Nearest { get; } = new ResamplingMethod(NearestValue);
        /// <summary> Bilinear interpolation - calculates output values using a weighted average of 2x2 input cells. </summary>
        public static ResamplingMethod Bilinear { get; } = new ResamplingMethod(BilinearValue);
        /// <summary> Cubic interpolation - uses a weighted average of 4x4 input cells for smoother results. </summary>
        public static ResamplingMethod Cubic { get; } = new ResamplingMethod(CubicValue);
        /// <summary> Cubic spline interpolation - similar to cubic but preserves edges better. </summary>
        public static ResamplingMethod CubicSpline { get; } = new ResamplingMethod(CubicSplineValue);
        /// <summary> Lanczos windowed sinc resampling - high-quality with minimal artifacts. </summary>
        public static ResamplingMethod Lanczos { get; } = new ResamplingMethod(LanczosValue);
        /// <summary> Average resampling - calculates the mean of all contributing pixels. </summary>
        public static ResamplingMethod Average { get; } = new ResamplingMethod(AverageValue);
        /// <summary> Mode resampling - selects the most common value from contributing pixels. </summary>
        public static ResamplingMethod Mode { get; } = new ResamplingMethod(ModeValue);
        /// <summary> Gaussian weighted resampling - applies a gaussian weighting to contributing pixels. </summary>
        public static ResamplingMethod Gauss { get; } = new ResamplingMethod(GaussValue);
        /// <summary> Root mean square resampling - useful for resampling error or deviation grids. </summary>
        public static ResamplingMethod Rms { get; } = new ResamplingMethod(RmsValue);
        /// <summary> Determines if two <see cref="ResamplingMethod"/> values are the same. </summary>
        public static bool operator ==(ResamplingMethod left, ResamplingMethod right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResamplingMethod"/> values are not the same. </summary>
        public static bool operator !=(ResamplingMethod left, ResamplingMethod right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ResamplingMethod"/>. </summary>
        public static implicit operator ResamplingMethod(string value) => new ResamplingMethod(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResamplingMethod other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResamplingMethod other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
