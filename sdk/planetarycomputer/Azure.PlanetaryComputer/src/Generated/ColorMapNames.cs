// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.PlanetaryComputer
{
    /// <summary> Available color maps for data visualization. </summary>
    public readonly partial struct ColorMapNames : IEquatable<ColorMapNames>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ColorMapNames"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ColorMapNames(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AccentValue = "accent";
        private const string AccentRValue = "accent_r";
        private const string AfmhotValue = "afmhot";
        private const string AfmhotRValue = "afmhot_r";
        private const string Ai4gLulcValue = "ai4g-lulc";
        private const string AlosFnfValue = "alos-fnf";
        private const string AlosPalsarMaskValue = "alos-palsar-mask";
        private const string AutumnValue = "autumn";
        private const string AutumnRValue = "autumn_r";
        private const string BinaryValue = "binary";
        private const string BinaryRValue = "binary_r";
        private const string BluesValue = "blues";
        private const string BluesRValue = "blues_r";
        private const string BoneValue = "bone";
        private const string BoneRValue = "bone_r";
        private const string BrbgValue = "brbg";
        private const string BrbgRValue = "brbg_r";
        private const string BrgValue = "brg";
        private const string BrgRValue = "brg_r";
        private const string BugnValue = "bugn";
        private const string BugnRValue = "bugn_r";
        private const string BupuValue = "bupu";
        private const string BupuRValue = "bupu_r";
        private const string BwrValue = "bwr";
        private const string BwrRValue = "bwr_r";
        private const string CCapValue = "c-cap";
        private const string CfastieValue = "cfastie";
        private const string ChesapeakeLc13Value = "chesapeake-lc-13";
        private const string ChesapeakeLc7Value = "chesapeake-lc-7";
        private const string ChesapeakeLuValue = "chesapeake-lu";
        private const string ChlorisBiomassValue = "chloris-biomass";
        private const string CividisValue = "cividis";
        private const string CividisRValue = "cividis_r";
        private const string CmrmapValue = "cmrmap";
        private const string CmrmapRValue = "cmrmap_r";
        private const string CoolValue = "cool";
        private const string CoolRValue = "cool_r";
        private const string CoolwarmValue = "coolwarm";
        private const string CoolwarmRValue = "coolwarm_r";
        private const string CopperValue = "copper";
        private const string CopperRValue = "copper_r";
        private const string CubehelixValue = "cubehelix";
        private const string CubehelixRValue = "cubehelix_r";
        private const string Dark2Value = "dark2";
        private const string Dark2RValue = "dark2_r";
        private const string DrcogLulcValue = "drcog-lulc";
        private const string EsaCciLcValue = "esa-cci-lc";
        private const string EsaWorldcoverValue = "esa-worldcover";
        private const string FlagValue = "flag";
        private const string FlagRValue = "flag_r";
        private const string GapLulcValue = "gap-lulc";
        private const string GistEarthValue = "gist_earth";
        private const string GistEarthRValue = "gist_earth_r";
        private const string GistGrayValue = "gist_gray";
        private const string GistGrayRValue = "gist_gray_r";
        private const string GistHeatValue = "gist_heat";
        private const string GistHeatRValue = "gist_heat_r";
        private const string GistNcarValue = "gist_ncar";
        private const string GistNcarRValue = "gist_ncar_r";
        private const string GistRainbowValue = "gist_rainbow";
        private const string GistRainbowRValue = "gist_rainbow_r";
        private const string GistSternValue = "gist_stern";
        private const string GistSternRValue = "gist_stern_r";
        private const string GistYargValue = "gist_yarg";
        private const string GistYargRValue = "gist_yarg_r";
        private const string GnbuValue = "gnbu";
        private const string GnbuRValue = "gnbu_r";
        private const string GnuplotValue = "gnuplot";
        private const string Gnuplot2Value = "gnuplot2";
        private const string Gnuplot2RValue = "gnuplot2_r";
        private const string GnuplotRValue = "gnuplot_r";
        private const string GrayValue = "gray";
        private const string GrayRValue = "gray_r";
        private const string GreensValue = "greens";
        private const string GreensRValue = "greens_r";
        private const string GreysValue = "greys";
        private const string GreysRValue = "greys_r";
        private const string HotValue = "hot";
        private const string HotRValue = "hot_r";
        private const string HsvValue = "hsv";
        private const string HsvRValue = "hsv_r";
        private const string InfernoValue = "inferno";
        private const string InfernoRValue = "inferno_r";
        private const string IoBiiValue = "io-bii";
        private const string IoLulcValue = "io-lulc";
        private const string IoLulc9ClassValue = "io-lulc-9-class";
        private const string JetValue = "jet";
        private const string JetRValue = "jet_r";
        private const string JrcChangeValue = "jrc-change";
        private const string JrcExtentValue = "jrc-extent";
        private const string JrcOccurrenceValue = "jrc-occurrence";
        private const string JrcRecurrenceValue = "jrc-recurrence";
        private const string JrcSeasonalityValue = "jrc-seasonality";
        private const string JrcTransitionsValue = "jrc-transitions";
        private const string LidarClassificationValue = "lidar-classification";
        private const string LidarHagValue = "lidar-hag";
        private const string LidarHagAlternativeValue = "lidar-hag-alternative";
        private const string LidarIntensityValue = "lidar-intensity";
        private const string LidarReturnsValue = "lidar-returns";
        private const string MagmaValue = "magma";
        private const string MagmaRValue = "magma_r";
        private const string Modis10A1Value = "modis-10A1";
        private const string Modis10A2Value = "modis-10A2";
        private const string Modis13A1Q1Value = "modis-13A1|Q1";
        private const string Modis14A1A2Value = "modis-14A1|A2";
        private const string Modis15A2HA3HValue = "modis-15A2H|A3H";
        private const string Modis16A3GFETValue = "modis-16A3GF-ET";
        private const string Modis16A3GFPETValue = "modis-16A3GF-PET";
        private const string Modis17A2HA2HGFValue = "modis-17A2H|A2HGF";
        private const string Modis17A3HGFValue = "modis-17A3HGF";
        private const string Modis64A1Value = "modis-64A1";
        private const string MtbsSeverityValue = "mtbs-severity";
        private const string NipySpectralValue = "nipy_spectral";
        private const string NipySpectralRValue = "nipy_spectral_r";
        private const string NrcanLulcValue = "nrcan-lulc";
        private const string OceanValue = "ocean";
        private const string OceanRValue = "ocean_r";
        private const string OrangesValue = "oranges";
        private const string OrangesRValue = "oranges_r";
        private const string OrrdValue = "orrd";
        private const string OrrdRValue = "orrd_r";
        private const string PairedValue = "paired";
        private const string PairedRValue = "paired_r";
        private const string Pastel1Value = "pastel1";
        private const string Pastel1RValue = "pastel1_r";
        private const string Pastel2Value = "pastel2";
        private const string Pastel2RValue = "pastel2_r";
        private const string PinkValue = "pink";
        private const string PinkRValue = "pink_r";
        private const string PiygValue = "piyg";
        private const string PiygRValue = "piyg_r";
        private const string PlasmaValue = "plasma";
        private const string PlasmaRValue = "plasma_r";
        private const string PrgnValue = "prgn";
        private const string PrgnRValue = "prgn_r";
        private const string PrismValue = "prism";
        private const string PrismRValue = "prism_r";
        private const string PubuValue = "pubu";
        private const string PubuRValue = "pubu_r";
        private const string PubugnValue = "pubugn";
        private const string PubugnRValue = "pubugn_r";
        private const string PuorValue = "puor";
        private const string PuorRValue = "puor_r";
        private const string PurdValue = "purd";
        private const string PurdRValue = "purd_r";
        private const string PurplesValue = "purples";
        private const string PurplesRValue = "purples_r";
        private const string QpeValue = "qpe";
        private const string RainbowValue = "rainbow";
        private const string RainbowRValue = "rainbow_r";
        private const string RdbuValue = "rdbu";
        private const string RdbuRValue = "rdbu_r";
        private const string RdgyValue = "rdgy";
        private const string RdgyRValue = "rdgy_r";
        private const string RdpuValue = "rdpu";
        private const string RdpuRValue = "rdpu_r";
        private const string RdylbuValue = "rdylbu";
        private const string RdylbuRValue = "rdylbu_r";
        private const string RdylgnValue = "rdylgn";
        private const string RdylgnRValue = "rdylgn_r";
        private const string RedsValue = "reds";
        private const string RedsRValue = "reds_r";
        private const string RplumboValue = "rplumbo";
        private const string SchwarzwaldValue = "schwarzwald";
        private const string SeismicValue = "seismic";
        private const string SeismicRValue = "seismic_r";
        private const string Set1Value = "set1";
        private const string Set1RValue = "set1_r";
        private const string Set2Value = "set2";
        private const string Set2RValue = "set2_r";
        private const string Set3Value = "set3";
        private const string Set3RValue = "set3_r";
        private const string SpectralValue = "spectral";
        private const string SpectralRValue = "spectral_r";
        private const string SpringValue = "spring";
        private const string SpringRValue = "spring_r";
        private const string SummerValue = "summer";
        private const string SummerRValue = "summer_r";
        private const string Tab10Value = "tab10";
        private const string Tab10RValue = "tab10_r";
        private const string Tab20Value = "tab20";
        private const string Tab20RValue = "tab20_r";
        private const string Tab20bValue = "tab20b";
        private const string Tab20bRValue = "tab20b_r";
        private const string Tab20cValue = "tab20c";
        private const string Tab20cRValue = "tab20c_r";
        private const string TerrainValue = "terrain";
        private const string TerrainRValue = "terrain_r";
        private const string TwilightValue = "twilight";
        private const string TwilightRValue = "twilight_r";
        private const string TwilightShiftedValue = "twilight_shifted";
        private const string TwilightShiftedRValue = "twilight_shifted_r";
        private const string UsdaCdlValue = "usda-cdl";
        private const string UsdaCdlCornValue = "usda-cdl-corn";
        private const string UsdaCdlCottonValue = "usda-cdl-cotton";
        private const string UsdaCdlSoybeansValue = "usda-cdl-soybeans";
        private const string UsdaCdlWheatValue = "usda-cdl-wheat";
        private const string UsgsLcmapValue = "usgs-lcmap";
        private const string Viirs10a1Value = "viirs-10a1";
        private const string Viirs13a1Value = "viirs-13a1";
        private const string Viirs14a1Value = "viirs-14a1";
        private const string Viirs15a2HValue = "viirs-15a2H";
        private const string ViridisValue = "viridis";
        private const string ViridisRValue = "viridis_r";
        private const string WinterValue = "winter";
        private const string WinterRValue = "winter_r";
        private const string WistiaValue = "wistia";
        private const string WistiaRValue = "wistia_r";
        private const string YlgnValue = "ylgn";
        private const string YlgnRValue = "ylgn_r";
        private const string YlgnbuValue = "ylgnbu";
        private const string YlgnbuRValue = "ylgnbu_r";
        private const string YlorbrValue = "ylorbr";
        private const string YlorbrRValue = "ylorbr_r";
        private const string YlorrdValue = "ylorrd";
        private const string YlorrdRValue = "ylorrd_r";

        /// <summary> Accent colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Accent { get; } = new ColorMapNames(AccentValue);
        /// <summary> Reversed accent colormap. </summary>
        public static ColorMapNames AccentR { get; } = new ColorMapNames(AccentRValue);
        /// <summary> Afmhot colormap - sequential black-red-yellow-white colormap. </summary>
        public static ColorMapNames Afmhot { get; } = new ColorMapNames(AfmhotValue);
        /// <summary> Reversed afmhot colormap. </summary>
        public static ColorMapNames AfmhotR { get; } = new ColorMapNames(AfmhotRValue);
        /// <summary> AI for Good land use/land cover colormap. </summary>
        public static ColorMapNames Ai4gLulc { get; } = new ColorMapNames(Ai4gLulcValue);
        /// <summary> ALOS forest/non-forest colormap. </summary>
        public static ColorMapNames AlosFnf { get; } = new ColorMapNames(AlosFnfValue);
        /// <summary> ALOS PALSAR mask colormap. </summary>
        public static ColorMapNames AlosPalsarMask { get; } = new ColorMapNames(AlosPalsarMaskValue);
        /// <summary> Autumn colormap - sequential red-orange-yellow colormap. </summary>
        public static ColorMapNames Autumn { get; } = new ColorMapNames(AutumnValue);
        /// <summary> Reversed autumn colormap. </summary>
        public static ColorMapNames AutumnR { get; } = new ColorMapNames(AutumnRValue);
        /// <summary> Binary colormap - simple black and white colormap. </summary>
        public static ColorMapNames Binary { get; } = new ColorMapNames(BinaryValue);
        /// <summary> Reversed binary colormap. </summary>
        public static ColorMapNames BinaryR { get; } = new ColorMapNames(BinaryRValue);
        /// <summary> Blues colormap - sequential white to dark blue. </summary>
        public static ColorMapNames Blues { get; } = new ColorMapNames(BluesValue);
        /// <summary> Reversed blues colormap. </summary>
        public static ColorMapNames BluesR { get; } = new ColorMapNames(BluesRValue);
        /// <summary> Bone colormap - grayscale with slight blue tint. </summary>
        public static ColorMapNames Bone { get; } = new ColorMapNames(BoneValue);
        /// <summary> Reversed bone colormap. </summary>
        public static ColorMapNames BoneR { get; } = new ColorMapNames(BoneRValue);
        /// <summary> BrBG colormap - diverging brown to blue-green. </summary>
        public static ColorMapNames Brbg { get; } = new ColorMapNames(BrbgValue);
        /// <summary> Reversed BrBG colormap. </summary>
        public static ColorMapNames BrbgR { get; } = new ColorMapNames(BrbgRValue);
        /// <summary> BrG colormap - diverging brown to green. </summary>
        public static ColorMapNames Brg { get; } = new ColorMapNames(BrgValue);
        /// <summary> Reversed BrG colormap. </summary>
        public static ColorMapNames BrgR { get; } = new ColorMapNames(BrgRValue);
        /// <summary> BuGn colormap - sequential white to dark green. </summary>
        public static ColorMapNames Bugn { get; } = new ColorMapNames(BugnValue);
        /// <summary> Reversed BuGn colormap. </summary>
        public static ColorMapNames BugnR { get; } = new ColorMapNames(BugnRValue);
        /// <summary> BuPu colormap - sequential white to dark purple. </summary>
        public static ColorMapNames Bupu { get; } = new ColorMapNames(BupuValue);
        /// <summary> Reversed BuPu colormap. </summary>
        public static ColorMapNames BupuR { get; } = new ColorMapNames(BupuRValue);
        /// <summary> BWR colormap - diverging blue to red. </summary>
        public static ColorMapNames Bwr { get; } = new ColorMapNames(BwrValue);
        /// <summary> Reversed BWR colormap. </summary>
        public static ColorMapNames BwrR { get; } = new ColorMapNames(BwrRValue);
        /// <summary> C-CAP colormap - land cover classification. </summary>
        public static ColorMapNames CCap { get; } = new ColorMapNames(CCapValue);
        /// <summary> Cfastie colormap - high contrast colormap. </summary>
        public static ColorMapNames Cfastie { get; } = new ColorMapNames(CfastieValue);
        /// <summary> Chesapeake land cover 13-class colormap. </summary>
        public static ColorMapNames ChesapeakeLc13 { get; } = new ColorMapNames(ChesapeakeLc13Value);
        /// <summary> Chesapeake land cover 7-class colormap. </summary>
        public static ColorMapNames ChesapeakeLc7 { get; } = new ColorMapNames(ChesapeakeLc7Value);
        /// <summary> Chesapeake land use colormap. </summary>
        public static ColorMapNames ChesapeakeLu { get; } = new ColorMapNames(ChesapeakeLuValue);
        /// <summary> Chloris biomass colormap. </summary>
        public static ColorMapNames ChlorisBiomass { get; } = new ColorMapNames(ChlorisBiomassValue);
        /// <summary> Cividis colormap - sequential yellow to blue. </summary>
        public static ColorMapNames Cividis { get; } = new ColorMapNames(CividisValue);
        /// <summary> Reversed cividis colormap. </summary>
        public static ColorMapNames CividisR { get; } = new ColorMapNames(CividisRValue);
        /// <summary> CMRmap colormap - perceptually uniform colormap. </summary>
        public static ColorMapNames Cmrmap { get; } = new ColorMapNames(CmrmapValue);
        /// <summary> Reversed CMRmap colormap. </summary>
        public static ColorMapNames CmrmapR { get; } = new ColorMapNames(CmrmapRValue);
        /// <summary> Cool colormap - sequential cyan to magenta. </summary>
        public static ColorMapNames Cool { get; } = new ColorMapNames(CoolValue);
        /// <summary> Reversed cool colormap. </summary>
        public static ColorMapNames CoolR { get; } = new ColorMapNames(CoolRValue);
        /// <summary> Coolwarm colormap - diverging blue to red. </summary>
        public static ColorMapNames Coolwarm { get; } = new ColorMapNames(CoolwarmValue);
        /// <summary> Reversed coolwarm colormap. </summary>
        public static ColorMapNames CoolwarmR { get; } = new ColorMapNames(CoolwarmRValue);
        /// <summary> Copper colormap - sequential black to copper. </summary>
        public static ColorMapNames Copper { get; } = new ColorMapNames(CopperValue);
        /// <summary> Reversed copper colormap. </summary>
        public static ColorMapNames CopperR { get; } = new ColorMapNames(CopperRValue);
        /// <summary> Cubehelix colormap - sequential black to white with hue rotation. </summary>
        public static ColorMapNames Cubehelix { get; } = new ColorMapNames(CubehelixValue);
        /// <summary> Reversed cubehelix colormap. </summary>
        public static ColorMapNames CubehelixR { get; } = new ColorMapNames(CubehelixRValue);
        /// <summary> Dark2 colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Dark2 { get; } = new ColorMapNames(Dark2Value);
        /// <summary> Reversed dark2 colormap. </summary>
        public static ColorMapNames Dark2R { get; } = new ColorMapNames(Dark2RValue);
        /// <summary> DRCog land use/land cover colormap. </summary>
        public static ColorMapNames DrcogLulc { get; } = new ColorMapNames(DrcogLulcValue);
        /// <summary> ESA CCI land cover colormap. </summary>
        public static ColorMapNames EsaCciLc { get; } = new ColorMapNames(EsaCciLcValue);
        /// <summary> ESA WorldCover colormap. </summary>
        public static ColorMapNames EsaWorldcover { get; } = new ColorMapNames(EsaWorldcoverValue);
        /// <summary> Flag colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Flag { get; } = new ColorMapNames(FlagValue);
        /// <summary> Reversed flag colormap. </summary>
        public static ColorMapNames FlagR { get; } = new ColorMapNames(FlagRValue);
        /// <summary> GAP land use/land cover colormap. </summary>
        public static ColorMapNames GapLulc { get; } = new ColorMapNames(GapLulcValue);
        /// <summary> Gist_earth colormap - perceptually uniform colormap. </summary>
        public static ColorMapNames GistEarth { get; } = new ColorMapNames(GistEarthValue);
        /// <summary> Reversed gist_earth colormap. </summary>
        public static ColorMapNames GistEarthR { get; } = new ColorMapNames(GistEarthRValue);
        /// <summary> Gist_gray colormap - grayscale colormap. </summary>
        public static ColorMapNames GistGray { get; } = new ColorMapNames(GistGrayValue);
        /// <summary> Reversed gist_gray colormap. </summary>
        public static ColorMapNames GistGrayR { get; } = new ColorMapNames(GistGrayRValue);
        /// <summary> Gist_heat colormap - sequential black-red-yellow-white colormap. </summary>
        public static ColorMapNames GistHeat { get; } = new ColorMapNames(GistHeatValue);
        /// <summary> Reversed gist_heat colormap. </summary>
        public static ColorMapNames GistHeatR { get; } = new ColorMapNames(GistHeatRValue);
        /// <summary> Gist_ncar colormap - perceptually uniform colormap. </summary>
        public static ColorMapNames GistNcar { get; } = new ColorMapNames(GistNcarValue);
        /// <summary> Reversed gist_ncar colormap. </summary>
        public static ColorMapNames GistNcarR { get; } = new ColorMapNames(GistNcarRValue);
        /// <summary> Gist_rainbow colormap - perceptually uniform colormap. </summary>
        public static ColorMapNames GistRainbow { get; } = new ColorMapNames(GistRainbowValue);
        /// <summary> Reversed gist_rainbow colormap. </summary>
        public static ColorMapNames GistRainbowR { get; } = new ColorMapNames(GistRainbowRValue);
        /// <summary> Gist_stern colormap - perceptually uniform colormap. </summary>
        public static ColorMapNames GistStern { get; } = new ColorMapNames(GistSternValue);
        /// <summary> Reversed gist_stern colormap. </summary>
        public static ColorMapNames GistSternR { get; } = new ColorMapNames(GistSternRValue);
        /// <summary> Gist_yarg colormap - grayscale colormap. </summary>
        public static ColorMapNames GistYarg { get; } = new ColorMapNames(GistYargValue);
        /// <summary> Reversed gist_yarg colormap. </summary>
        public static ColorMapNames GistYargR { get; } = new ColorMapNames(GistYargRValue);
        /// <summary> GnBu colormap - sequential white to dark blue-green. </summary>
        public static ColorMapNames Gnbu { get; } = new ColorMapNames(GnbuValue);
        /// <summary> Reversed GnBu colormap. </summary>
        public static ColorMapNames GnbuR { get; } = new ColorMapNames(GnbuRValue);
        /// <summary> Gnuplot colormap - sequential black to white with hue rotation. </summary>
        public static ColorMapNames Gnuplot { get; } = new ColorMapNames(GnuplotValue);
        /// <summary> Gnuplot2 colormap - sequential black to white with hue rotation. </summary>
        public static ColorMapNames Gnuplot2 { get; } = new ColorMapNames(Gnuplot2Value);
        /// <summary> Reversed gnuplot2 colormap. </summary>
        public static ColorMapNames Gnuplot2R { get; } = new ColorMapNames(Gnuplot2RValue);
        /// <summary> Reversed gnuplot colormap. </summary>
        public static ColorMapNames GnuplotR { get; } = new ColorMapNames(GnuplotRValue);
        /// <summary> Gray colormap - grayscale colormap. </summary>
        public static ColorMapNames Gray { get; } = new ColorMapNames(GrayValue);
        /// <summary> Reversed gray colormap. </summary>
        public static ColorMapNames GrayR { get; } = new ColorMapNames(GrayRValue);
        /// <summary> Greens colormap - sequential white to dark green. </summary>
        public static ColorMapNames Greens { get; } = new ColorMapNames(GreensValue);
        /// <summary> Reversed greens colormap. </summary>
        public static ColorMapNames GreensR { get; } = new ColorMapNames(GreensRValue);
        /// <summary> Greys colormap - sequential white to dark gray. </summary>
        public static ColorMapNames Greys { get; } = new ColorMapNames(GreysValue);
        /// <summary> Reversed greys colormap. </summary>
        public static ColorMapNames GreysR { get; } = new ColorMapNames(GreysRValue);
        /// <summary> Hot colormap - sequential black-red-yellow-white colormap. </summary>
        public static ColorMapNames Hot { get; } = new ColorMapNames(HotValue);
        /// <summary> Reversed hot colormap. </summary>
        public static ColorMapNames HotR { get; } = new ColorMapNames(HotRValue);
        /// <summary> HSV colormap - hue-saturation-value colormap. </summary>
        public static ColorMapNames Hsv { get; } = new ColorMapNames(HsvValue);
        /// <summary> Reversed HSV colormap. </summary>
        public static ColorMapNames HsvR { get; } = new ColorMapNames(HsvRValue);
        /// <summary> Inferno colormap - sequential black to yellow colormap. </summary>
        public static ColorMapNames Inferno { get; } = new ColorMapNames(InfernoValue);
        /// <summary> Reversed inferno colormap. </summary>
        public static ColorMapNames InfernoR { get; } = new ColorMapNames(InfernoRValue);
        /// <summary> IO-BII colormap - biodiversity index colormap. </summary>
        public static ColorMapNames IoBii { get; } = new ColorMapNames(IoBiiValue);
        /// <summary> IO-LULC colormap - land use/land cover colormap. </summary>
        public static ColorMapNames IoLulc { get; } = new ColorMapNames(IoLulcValue);
        /// <summary> IO-LULC 9-class colormap. </summary>
        public static ColorMapNames IoLulc9Class { get; } = new ColorMapNames(IoLulc9ClassValue);
        /// <summary> Jet colormap - sequential blue-green-yellow-red colormap. </summary>
        public static ColorMapNames Jet { get; } = new ColorMapNames(JetValue);
        /// <summary> Reversed jet colormap. </summary>
        public static ColorMapNames JetR { get; } = new ColorMapNames(JetRValue);
        /// <summary> JRC change colormap. </summary>
        public static ColorMapNames JrcChange { get; } = new ColorMapNames(JrcChangeValue);
        /// <summary> JRC extent colormap. </summary>
        public static ColorMapNames JrcExtent { get; } = new ColorMapNames(JrcExtentValue);
        /// <summary> JRC occurrence colormap. </summary>
        public static ColorMapNames JrcOccurrence { get; } = new ColorMapNames(JrcOccurrenceValue);
        /// <summary> JRC recurrence colormap. </summary>
        public static ColorMapNames JrcRecurrence { get; } = new ColorMapNames(JrcRecurrenceValue);
        /// <summary> JRC seasonality colormap. </summary>
        public static ColorMapNames JrcSeasonality { get; } = new ColorMapNames(JrcSeasonalityValue);
        /// <summary> JRC transitions colormap. </summary>
        public static ColorMapNames JrcTransitions { get; } = new ColorMapNames(JrcTransitionsValue);
        /// <summary> Lidar classification colormap. </summary>
        public static ColorMapNames LidarClassification { get; } = new ColorMapNames(LidarClassificationValue);
        /// <summary> Lidar height above ground colormap. </summary>
        public static ColorMapNames LidarHag { get; } = new ColorMapNames(LidarHagValue);
        /// <summary> Alternative lidar height above ground colormap. </summary>
        public static ColorMapNames LidarHagAlternative { get; } = new ColorMapNames(LidarHagAlternativeValue);
        /// <summary> Lidar intensity colormap. </summary>
        public static ColorMapNames LidarIntensity { get; } = new ColorMapNames(LidarIntensityValue);
        /// <summary> Lidar returns colormap. </summary>
        public static ColorMapNames LidarReturns { get; } = new ColorMapNames(LidarReturnsValue);
        /// <summary> Magma colormap - sequential black to yellow colormap. </summary>
        public static ColorMapNames Magma { get; } = new ColorMapNames(MagmaValue);
        /// <summary> Reversed magma colormap. </summary>
        public static ColorMapNames MagmaR { get; } = new ColorMapNames(MagmaRValue);
        /// <summary> MODIS 10A1 colormap. </summary>
        public static ColorMapNames Modis10A1 { get; } = new ColorMapNames(Modis10A1Value);
        /// <summary> MODIS 10A2 colormap. </summary>
        public static ColorMapNames Modis10A2 { get; } = new ColorMapNames(Modis10A2Value);
        /// <summary> MODIS 13A1|Q1 colormap. </summary>
        public static ColorMapNames Modis13A1Q1 { get; } = new ColorMapNames(Modis13A1Q1Value);
        /// <summary> MODIS 14A1|A2 colormap. </summary>
        public static ColorMapNames Modis14A1A2 { get; } = new ColorMapNames(Modis14A1A2Value);
        /// <summary> MODIS 15A2H|A3H colormap. </summary>
        public static ColorMapNames Modis15A2HA3H { get; } = new ColorMapNames(Modis15A2HA3HValue);
        /// <summary> MODIS 16A3GF-ET colormap. </summary>
        public static ColorMapNames Modis16A3GFET { get; } = new ColorMapNames(Modis16A3GFETValue);
        /// <summary> MODIS 16A3GF-PET colormap. </summary>
        public static ColorMapNames Modis16A3GFPET { get; } = new ColorMapNames(Modis16A3GFPETValue);
        /// <summary> MODIS 17A2H|A2HGF colormap. </summary>
        public static ColorMapNames Modis17A2HA2HGF { get; } = new ColorMapNames(Modis17A2HA2HGFValue);
        /// <summary> MODIS 17A3HGF colormap. </summary>
        public static ColorMapNames Modis17A3HGF { get; } = new ColorMapNames(Modis17A3HGFValue);
        /// <summary> MODIS 64A1 colormap. </summary>
        public static ColorMapNames Modis64A1 { get; } = new ColorMapNames(Modis64A1Value);
        /// <summary> MTBS severity colormap. </summary>
        public static ColorMapNames MtbsSeverity { get; } = new ColorMapNames(MtbsSeverityValue);
        /// <summary> Nipy_spectral colormap - perceptually uniform colormap. </summary>
        public static ColorMapNames NipySpectral { get; } = new ColorMapNames(NipySpectralValue);
        /// <summary> Reversed nipy_spectral colormap. </summary>
        public static ColorMapNames NipySpectralR { get; } = new ColorMapNames(NipySpectralRValue);
        /// <summary> NRCAN land use/land cover colormap. </summary>
        public static ColorMapNames NrcanLulc { get; } = new ColorMapNames(NrcanLulcValue);
        /// <summary> Ocean colormap - sequential blue to white colormap. </summary>
        public static ColorMapNames Ocean { get; } = new ColorMapNames(OceanValue);
        /// <summary> Reversed ocean colormap. </summary>
        public static ColorMapNames OceanR { get; } = new ColorMapNames(OceanRValue);
        /// <summary> Oranges colormap - sequential white to dark orange. </summary>
        public static ColorMapNames Oranges { get; } = new ColorMapNames(OrangesValue);
        /// <summary> Reversed oranges colormap. </summary>
        public static ColorMapNames OrangesR { get; } = new ColorMapNames(OrangesRValue);
        /// <summary> OrRd colormap - sequential white to dark red-orange. </summary>
        public static ColorMapNames Orrd { get; } = new ColorMapNames(OrrdValue);
        /// <summary> Reversed OrRd colormap. </summary>
        public static ColorMapNames OrrdR { get; } = new ColorMapNames(OrrdRValue);
        /// <summary> Paired colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Paired { get; } = new ColorMapNames(PairedValue);
        /// <summary> Reversed paired colormap. </summary>
        public static ColorMapNames PairedR { get; } = new ColorMapNames(PairedRValue);
        /// <summary> Pastel1 colormap - qualitative colormap with pastel colors. </summary>
        public static ColorMapNames Pastel1 { get; } = new ColorMapNames(Pastel1Value);
        /// <summary> Reversed pastel1 colormap. </summary>
        public static ColorMapNames Pastel1R { get; } = new ColorMapNames(Pastel1RValue);
        /// <summary> Pastel2 colormap - qualitative colormap with pastel colors. </summary>
        public static ColorMapNames Pastel2 { get; } = new ColorMapNames(Pastel2Value);
        /// <summary> Reversed pastel2 colormap. </summary>
        public static ColorMapNames Pastel2R { get; } = new ColorMapNames(Pastel2RValue);
        /// <summary> Pink colormap - sequential white to dark pink. </summary>
        public static ColorMapNames Pink { get; } = new ColorMapNames(PinkValue);
        /// <summary> Reversed pink colormap. </summary>
        public static ColorMapNames PinkR { get; } = new ColorMapNames(PinkRValue);
        /// <summary> PiYG colormap - diverging pink to green. </summary>
        public static ColorMapNames Piyg { get; } = new ColorMapNames(PiygValue);
        /// <summary> Reversed PiYG colormap. </summary>
        public static ColorMapNames PiygR { get; } = new ColorMapNames(PiygRValue);
        /// <summary> Plasma colormap - sequential black to yellow colormap. </summary>
        public static ColorMapNames Plasma { get; } = new ColorMapNames(PlasmaValue);
        /// <summary> Reversed plasma colormap. </summary>
        public static ColorMapNames PlasmaR { get; } = new ColorMapNames(PlasmaRValue);
        /// <summary> PRGn colormap - diverging purple to green. </summary>
        public static ColorMapNames Prgn { get; } = new ColorMapNames(PrgnValue);
        /// <summary> Reversed PRGn colormap. </summary>
        public static ColorMapNames PrgnR { get; } = new ColorMapNames(PrgnRValue);
        /// <summary> Prism colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Prism { get; } = new ColorMapNames(PrismValue);
        /// <summary> Reversed prism colormap. </summary>
        public static ColorMapNames PrismR { get; } = new ColorMapNames(PrismRValue);
        /// <summary> PuBu colormap - sequential white to dark blue. </summary>
        public static ColorMapNames Pubu { get; } = new ColorMapNames(PubuValue);
        /// <summary> Reversed PuBu colormap. </summary>
        public static ColorMapNames PubuR { get; } = new ColorMapNames(PubuRValue);
        /// <summary> PuBuGn colormap - sequential white to dark blue-green. </summary>
        public static ColorMapNames Pubugn { get; } = new ColorMapNames(PubugnValue);
        /// <summary> Reversed PuBuGn colormap. </summary>
        public static ColorMapNames PubugnR { get; } = new ColorMapNames(PubugnRValue);
        /// <summary> PuOr colormap - diverging purple to orange. </summary>
        public static ColorMapNames Puor { get; } = new ColorMapNames(PuorValue);
        /// <summary> Reversed PuOr colormap. </summary>
        public static ColorMapNames PuorR { get; } = new ColorMapNames(PuorRValue);
        /// <summary> PuRd colormap - sequential white to dark purple-red. </summary>
        public static ColorMapNames Purd { get; } = new ColorMapNames(PurdValue);
        /// <summary> Reversed PuRd colormap. </summary>
        public static ColorMapNames PurdR { get; } = new ColorMapNames(PurdRValue);
        /// <summary> Purples colormap - sequential white to dark purple. </summary>
        public static ColorMapNames Purples { get; } = new ColorMapNames(PurplesValue);
        /// <summary> Reversed purples colormap. </summary>
        public static ColorMapNames PurplesR { get; } = new ColorMapNames(PurplesRValue);
        /// <summary> QPE colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Qpe { get; } = new ColorMapNames(QpeValue);
        /// <summary> Rainbow colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Rainbow { get; } = new ColorMapNames(RainbowValue);
        /// <summary> Reversed rainbow colormap. </summary>
        public static ColorMapNames RainbowR { get; } = new ColorMapNames(RainbowRValue);
        /// <summary> RdBu colormap - diverging red to blue. </summary>
        public static ColorMapNames Rdbu { get; } = new ColorMapNames(RdbuValue);
        /// <summary> Reversed RdBu colormap. </summary>
        public static ColorMapNames RdbuR { get; } = new ColorMapNames(RdbuRValue);
        /// <summary> RdGy colormap - diverging red to gray. </summary>
        public static ColorMapNames Rdgy { get; } = new ColorMapNames(RdgyValue);
        /// <summary> Reversed RdGy colormap. </summary>
        public static ColorMapNames RdgyR { get; } = new ColorMapNames(RdgyRValue);
        /// <summary> RdPu colormap - sequential white to dark red-purple. </summary>
        public static ColorMapNames Rdpu { get; } = new ColorMapNames(RdpuValue);
        /// <summary> Reversed RdPu colormap. </summary>
        public static ColorMapNames RdpuR { get; } = new ColorMapNames(RdpuRValue);
        /// <summary> RdYlBu colormap - diverging red to yellow to blue. </summary>
        public static ColorMapNames Rdylbu { get; } = new ColorMapNames(RdylbuValue);
        /// <summary> Reversed RdYlBu colormap. </summary>
        public static ColorMapNames RdylbuR { get; } = new ColorMapNames(RdylbuRValue);
        /// <summary> RdYlGn colormap - diverging red to yellow to green. </summary>
        public static ColorMapNames Rdylgn { get; } = new ColorMapNames(RdylgnValue);
        /// <summary> Reversed RdYlGn colormap. </summary>
        public static ColorMapNames RdylgnR { get; } = new ColorMapNames(RdylgnRValue);
        /// <summary> Reds colormap - sequential white to dark red. </summary>
        public static ColorMapNames Reds { get; } = new ColorMapNames(RedsValue);
        /// <summary> Reversed reds colormap. </summary>
        public static ColorMapNames RedsR { get; } = new ColorMapNames(RedsRValue);
        /// <summary> Rplumbo colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Rplumbo { get; } = new ColorMapNames(RplumboValue);
        /// <summary> Schwarzwald colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Schwarzwald { get; } = new ColorMapNames(SchwarzwaldValue);
        /// <summary> Seismic colormap - diverging blue to red. </summary>
        public static ColorMapNames Seismic { get; } = new ColorMapNames(SeismicValue);
        /// <summary> Reversed seismic colormap. </summary>
        public static ColorMapNames SeismicR { get; } = new ColorMapNames(SeismicRValue);
        /// <summary> Set1 colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Set1 { get; } = new ColorMapNames(Set1Value);
        /// <summary> Reversed set1 colormap. </summary>
        public static ColorMapNames Set1R { get; } = new ColorMapNames(Set1RValue);
        /// <summary> Set2 colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Set2 { get; } = new ColorMapNames(Set2Value);
        /// <summary> Reversed set2 colormap. </summary>
        public static ColorMapNames Set2R { get; } = new ColorMapNames(Set2RValue);
        /// <summary> Set3 colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Set3 { get; } = new ColorMapNames(Set3Value);
        /// <summary> Reversed set3 colormap. </summary>
        public static ColorMapNames Set3R { get; } = new ColorMapNames(Set3RValue);
        /// <summary> Spectral colormap - diverging red to yellow to blue. </summary>
        public static ColorMapNames Spectral { get; } = new ColorMapNames(SpectralValue);
        /// <summary> Reversed spectral colormap. </summary>
        public static ColorMapNames SpectralR { get; } = new ColorMapNames(SpectralRValue);
        /// <summary> Spring colormap - sequential magenta to yellow. </summary>
        public static ColorMapNames Spring { get; } = new ColorMapNames(SpringValue);
        /// <summary> Reversed spring colormap. </summary>
        public static ColorMapNames SpringR { get; } = new ColorMapNames(SpringRValue);
        /// <summary> Summer colormap - sequential green to yellow. </summary>
        public static ColorMapNames Summer { get; } = new ColorMapNames(SummerValue);
        /// <summary> Reversed summer colormap. </summary>
        public static ColorMapNames SummerR { get; } = new ColorMapNames(SummerRValue);
        /// <summary> Tab10 colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Tab10 { get; } = new ColorMapNames(Tab10Value);
        /// <summary> Reversed tab10 colormap. </summary>
        public static ColorMapNames Tab10R { get; } = new ColorMapNames(Tab10RValue);
        /// <summary> Tab20 colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Tab20 { get; } = new ColorMapNames(Tab20Value);
        /// <summary> Reversed tab20 colormap. </summary>
        public static ColorMapNames Tab20R { get; } = new ColorMapNames(Tab20RValue);
        /// <summary> Tab20b colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Tab20b { get; } = new ColorMapNames(Tab20bValue);
        /// <summary> Reversed tab20b colormap. </summary>
        public static ColorMapNames Tab20bR { get; } = new ColorMapNames(Tab20bRValue);
        /// <summary> Tab20c colormap - qualitative colormap with distinct colors. </summary>
        public static ColorMapNames Tab20c { get; } = new ColorMapNames(Tab20cValue);
        /// <summary> Reversed tab20c colormap. </summary>
        public static ColorMapNames Tab20cR { get; } = new ColorMapNames(Tab20cRValue);
        /// <summary> Terrain colormap - sequential black to white with hue rotation. </summary>
        public static ColorMapNames Terrain { get; } = new ColorMapNames(TerrainValue);
        /// <summary> Reversed terrain colormap. </summary>
        public static ColorMapNames TerrainR { get; } = new ColorMapNames(TerrainRValue);
        /// <summary> Twilight colormap - diverging blue to red. </summary>
        public static ColorMapNames Twilight { get; } = new ColorMapNames(TwilightValue);
        /// <summary> Reversed twilight colormap. </summary>
        public static ColorMapNames TwilightR { get; } = new ColorMapNames(TwilightRValue);
        /// <summary> Twilight shifted colormap - diverging blue to red. </summary>
        public static ColorMapNames TwilightShifted { get; } = new ColorMapNames(TwilightShiftedValue);
        /// <summary> Reversed twilight shifted colormap. </summary>
        public static ColorMapNames TwilightShiftedR { get; } = new ColorMapNames(TwilightShiftedRValue);
        /// <summary> USDA CDL colormap - land cover classification. </summary>
        public static ColorMapNames UsdaCdl { get; } = new ColorMapNames(UsdaCdlValue);
        /// <summary> USDA CDL corn colormap. </summary>
        public static ColorMapNames UsdaCdlCorn { get; } = new ColorMapNames(UsdaCdlCornValue);
        /// <summary> USDA CDL cotton colormap. </summary>
        public static ColorMapNames UsdaCdlCotton { get; } = new ColorMapNames(UsdaCdlCottonValue);
        /// <summary> USDA CDL soybeans colormap. </summary>
        public static ColorMapNames UsdaCdlSoybeans { get; } = new ColorMapNames(UsdaCdlSoybeansValue);
        /// <summary> USDA CDL wheat colormap. </summary>
        public static ColorMapNames UsdaCdlWheat { get; } = new ColorMapNames(UsdaCdlWheatValue);
        /// <summary> USGS LCMAP colormap. </summary>
        public static ColorMapNames UsgsLcmap { get; } = new ColorMapNames(UsgsLcmapValue);
        /// <summary> VIIRS 10A1 colormap. </summary>
        public static ColorMapNames Viirs10a1 { get; } = new ColorMapNames(Viirs10a1Value);
        /// <summary> VIIRS 13A1 colormap. </summary>
        public static ColorMapNames Viirs13a1 { get; } = new ColorMapNames(Viirs13a1Value);
        /// <summary> VIIRS 14A1 colormap. </summary>
        public static ColorMapNames Viirs14a1 { get; } = new ColorMapNames(Viirs14a1Value);
        /// <summary> VIIRS 15A2H colormap. </summary>
        public static ColorMapNames Viirs15a2H { get; } = new ColorMapNames(Viirs15a2HValue);
        /// <summary> Viridis colormap - sequential black to yellow colormap. </summary>
        public static ColorMapNames Viridis { get; } = new ColorMapNames(ViridisValue);
        /// <summary> Reversed viridis colormap. </summary>
        public static ColorMapNames ViridisR { get; } = new ColorMapNames(ViridisRValue);
        /// <summary> Winter colormap - sequential blue to green. </summary>
        public static ColorMapNames Winter { get; } = new ColorMapNames(WinterValue);
        /// <summary> Reversed winter colormap. </summary>
        public static ColorMapNames WinterR { get; } = new ColorMapNames(WinterRValue);
        /// <summary> Wistia colormap - sequential white to yellow. </summary>
        public static ColorMapNames Wistia { get; } = new ColorMapNames(WistiaValue);
        /// <summary> Reversed wistia colormap. </summary>
        public static ColorMapNames WistiaR { get; } = new ColorMapNames(WistiaRValue);
        /// <summary> YlGn colormap - sequential white to dark green. </summary>
        public static ColorMapNames Ylgn { get; } = new ColorMapNames(YlgnValue);
        /// <summary> Reversed YlGn colormap. </summary>
        public static ColorMapNames YlgnR { get; } = new ColorMapNames(YlgnRValue);
        /// <summary> YlGnBu colormap - sequential white to dark blue-green. </summary>
        public static ColorMapNames Ylgnbu { get; } = new ColorMapNames(YlgnbuValue);
        /// <summary> Reversed YlGnBu colormap. </summary>
        public static ColorMapNames YlgnbuR { get; } = new ColorMapNames(YlgnbuRValue);
        /// <summary> YlOrBr colormap - sequential white to dark orange-brown. </summary>
        public static ColorMapNames Ylorbr { get; } = new ColorMapNames(YlorbrValue);
        /// <summary> Reversed YlOrBr colormap. </summary>
        public static ColorMapNames YlorbrR { get; } = new ColorMapNames(YlorbrRValue);
        /// <summary> YlOrRd colormap - sequential white to dark red-orange. </summary>
        public static ColorMapNames Ylorrd { get; } = new ColorMapNames(YlorrdValue);
        /// <summary> Reversed YlOrRd colormap. </summary>
        public static ColorMapNames YlorrdR { get; } = new ColorMapNames(YlorrdRValue);
        /// <summary> Determines if two <see cref="ColorMapNames"/> values are the same. </summary>
        public static bool operator ==(ColorMapNames left, ColorMapNames right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ColorMapNames"/> values are not the same. </summary>
        public static bool operator !=(ColorMapNames left, ColorMapNames right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ColorMapNames"/>. </summary>
        public static implicit operator ColorMapNames(string value) => new ColorMapNames(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ColorMapNames other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ColorMapNames other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
