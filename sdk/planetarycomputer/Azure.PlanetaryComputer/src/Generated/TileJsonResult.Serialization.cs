// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;

namespace Microsoft.PlanetaryComputer
{
    /// <summary>
    /// TileJSON model.
    /// 
    /// Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set according to the TileJSON specification
    /// </summary>
    public partial class TileJsonResult : IJsonModel<TileJsonResult>
    {
        /// <summary> Initializes a new instance of <see cref="TileJsonResult"/> for deserialization. </summary>
        internal TileJsonResult()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<TileJsonResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TileJsonResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TileJsonResult)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Tilejson))
            {
                writer.WritePropertyName("tilejson"u8);
                writer.WriteStringValue(Tilejson);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(Attribution))
            {
                writer.WritePropertyName("attribution"u8);
                writer.WriteStringValue(Attribution);
            }
            if (Optional.IsDefined(Template))
            {
                writer.WritePropertyName("template"u8);
                writer.WriteStringValue(Template);
            }
            if (Optional.IsDefined(Legend))
            {
                writer.WritePropertyName("legend"u8);
                writer.WriteStringValue(Legend);
            }
            if (Optional.IsDefined(Scheme))
            {
                writer.WritePropertyName("scheme"u8);
                writer.WriteStringValue(Scheme.Value.ToString());
            }
            writer.WritePropertyName("tiles"u8);
            writer.WriteStartArray();
            foreach (string item in Tiles)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Grids))
            {
                writer.WritePropertyName("grids"u8);
                writer.WriteStartArray();
                foreach (string item in Grids)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Data))
            {
                writer.WritePropertyName("data"u8);
                writer.WriteStartArray();
                foreach (string item in Data)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Minzoom))
            {
                writer.WritePropertyName("minzoom"u8);
                writer.WriteNumberValue(Minzoom.Value);
            }
            if (Optional.IsDefined(Maxzoom))
            {
                writer.WritePropertyName("maxzoom"u8);
                writer.WriteNumberValue(Maxzoom.Value);
            }
            if (Optional.IsCollectionDefined(Bounds))
            {
                writer.WritePropertyName("bounds"u8);
                writer.WriteStartArray();
                foreach (float item in Bounds)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Center))
            {
                writer.WritePropertyName("center"u8);
                writer.WriteStartArray();
                foreach (float item in Center)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        TileJsonResult IJsonModel<TileJsonResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual TileJsonResult JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TileJsonResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TileJsonResult)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTileJsonResult(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static TileJsonResult DeserializeTileJsonResult(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string tilejson = default;
            string name = default;
            string description = default;
            string version = default;
            string attribution = default;
            string template = default;
            string legend = default;
            TileJsonScheme? scheme = default;
            IList<string> tiles = default;
            IList<string> grids = default;
            IList<string> data = default;
            int? minzoom = default;
            int? maxzoom = default;
            IList<float> bounds = default;
            IList<float> center = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("tilejson"u8))
                {
                    tilejson = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("name"u8))
                {
                    name = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("description"u8))
                {
                    description = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("version"u8))
                {
                    version = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("attribution"u8))
                {
                    attribution = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("template"u8))
                {
                    template = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("legend"u8))
                {
                    legend = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("scheme"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scheme = new TileJsonScheme(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("tiles"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    tiles = array;
                    continue;
                }
                if (prop.NameEquals("grids"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    grids = array;
                    continue;
                }
                if (prop.NameEquals("data"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    data = array;
                    continue;
                }
                if (prop.NameEquals("minzoom"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minzoom = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("maxzoom"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxzoom = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("bounds"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<float> array = new List<float>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetSingle());
                    }
                    bounds = array;
                    continue;
                }
                if (prop.NameEquals("center"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<float> array = new List<float>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetSingle());
                    }
                    center = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new TileJsonResult(
                tilejson,
                name,
                description,
                version,
                attribution,
                template,
                legend,
                scheme,
                tiles,
                grids ?? new ChangeTrackingList<string>(),
                data ?? new ChangeTrackingList<string>(),
                minzoom,
                maxzoom,
                bounds ?? new ChangeTrackingList<float>(),
                center ?? new ChangeTrackingList<float>(),
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<TileJsonResult>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TileJsonResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, MicrosoftPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(TileJsonResult)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        TileJsonResult IPersistableModel<TileJsonResult>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual TileJsonResult PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TileJsonResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeTileJsonResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TileJsonResult)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<TileJsonResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="result"> The <see cref="Response"/> to deserialize the <see cref="TileJsonResult"/> from. </param>
        public static explicit operator TileJsonResult(Response result)
        {
            using Response response = result;
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeTileJsonResult(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
