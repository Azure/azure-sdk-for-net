// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.PlanetaryComputer
{
    public partial class ItemProperties : IUtf8JsonSerializable, IJsonModel<ItemProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ItemProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ItemProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ItemProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Platform))
            {
                writer.WritePropertyName("platform"u8);
                writer.WriteStringValue(Platform);
            }
            if (Optional.IsCollectionDefined(Instruments))
            {
                writer.WritePropertyName("instruments"u8);
                writer.WriteStartArray();
                foreach (var item in Instruments)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Constellation))
            {
                writer.WritePropertyName("constellation"u8);
                writer.WriteStringValue(Constellation);
            }
            if (Optional.IsDefined(Mission))
            {
                writer.WritePropertyName("mission"u8);
                writer.WriteStringValue(Mission);
            }
            if (Optional.IsCollectionDefined(Providers))
            {
                writer.WritePropertyName("providers"u8);
                writer.WriteStartArray();
                foreach (var item in Providers)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Gsd))
            {
                writer.WritePropertyName("gsd"u8);
                writer.WriteNumberValue(Gsd.Value);
            }
            if (Optional.IsDefined(Created))
            {
                writer.WritePropertyName("created"u8);
                writer.WriteStringValue(Created.Value, "O");
            }
            if (Optional.IsDefined(Updated))
            {
                writer.WritePropertyName("updated"u8);
                writer.WriteStringValue(Updated.Value, "O");
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("datetime"u8);
            writer.WriteStringValue(Datetime);
            if (Optional.IsDefined(StartDatetime))
            {
                writer.WritePropertyName("start_datetime"u8);
                writer.WriteStringValue(StartDatetime.Value, "O");
            }
            if (Optional.IsDefined(EndDatetime))
            {
                writer.WritePropertyName("end_datetime"u8);
                writer.WriteStringValue(EndDatetime.Value, "O");
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
        }

        ItemProperties IJsonModel<ItemProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ItemProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeItemProperties(document.RootElement, options);
        }

        internal static ItemProperties DeserializeItemProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string platform = default;
            IList<string> instruments = default;
            string constellation = default;
            string mission = default;
            IList<StacProvider> providers = default;
            float? gsd = default;
            DateTimeOffset? created = default;
            DateTimeOffset? updated = default;
            string title = default;
            string description = default;
            string datetime = default;
            DateTimeOffset? startDatetime = default;
            DateTimeOffset? endDatetime = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("platform"u8))
                {
                    platform = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instruments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    instruments = array;
                    continue;
                }
                if (property.NameEquals("constellation"u8))
                {
                    constellation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mission"u8))
                {
                    mission = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("providers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<StacProvider> array = new List<StacProvider>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(StacProvider.DeserializeStacProvider(item, options));
                    }
                    providers = array;
                    continue;
                }
                if (property.NameEquals("gsd"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gsd = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("created"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    created = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("updated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updated = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("datetime"u8))
                {
                    datetime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("start_datetime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startDatetime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("end_datetime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endDatetime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new ItemProperties(
                platform,
                instruments ?? new ChangeTrackingList<string>(),
                constellation,
                mission,
                providers ?? new ChangeTrackingList<StacProvider>(),
                gsd,
                created,
                updated,
                title,
                description,
                datetime,
                startDatetime,
                endDatetime,
                additionalProperties);
        }

        BinaryData IPersistableModel<ItemProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzurePlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ItemProperties)} does not support writing '{options.Format}' format.");
            }
        }

        ItemProperties IPersistableModel<ItemProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeItemProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ItemProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ItemProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ItemProperties FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeItemProperties(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
