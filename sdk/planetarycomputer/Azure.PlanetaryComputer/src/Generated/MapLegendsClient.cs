// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PlanetaryComputer;

namespace Customizations
{
    /// <summary> The MapLegendsClient. </summary>
    public partial class MapLegendsClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://geocatalog.spatio.azure.com/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of MapLegendsClient for mocking. </summary>
        protected MapLegendsClient()
        {
        }

        /// <summary> Initializes a new instance of MapLegendsClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public MapLegendsClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new MapLegendsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of MapLegendsClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public MapLegendsClient(Uri endpoint, TokenCredential credential, MapLegendsClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new MapLegendsClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Generate values and color swatches mapping for a given classmap.
        /// 
        /// Args:
        /// trim_start (int, optional): Number of items to trim
        /// from the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetClassmapLegend(string classmapName, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MapLegendsClient.GetClassmapLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

                using HttpMessage message = CreateGetClassmapLegendRequest(classmapName, trimStart, trimEnd, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Generate values and color swatches mapping for a given classmap.
        /// 
        /// Args:
        /// trim_start (int, optional): Number of items to trim
        /// from the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetClassmapLegendAsync(string classmapName, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MapLegendsClient.GetClassmapLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

                using HttpMessage message = CreateGetClassmapLegendRequest(classmapName, trimStart, trimEnd, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generate values and color swatches mapping for a given classmap.
        /// 
        /// Args:
        /// trim_start (int, optional): Number of items to trim
        /// from the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<ClassmapLegendResult> GetClassmapLegend(string classmapName, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

            Response result = GetClassmapLegend(classmapName, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((ClassmapLegendResult)result, result);
        }

        /// <summary>
        /// Generate values and color swatches mapping for a given classmap.
        /// 
        /// Args:
        /// trim_start (int, optional): Number of items to trim
        /// from the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<ClassmapLegendResult>> GetClassmapLegendAsync(string classmapName, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

            Response result = await GetClassmapLegendAsync(classmapName, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((ClassmapLegendResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Generate a legend image for a given colormap.
        /// 
        /// If the colormap has non-contiguous values at the beginning or end,
        /// which aren't desired in the output image, they can be trimmed by specifying
        /// the number of values to trim.
        /// 
        /// Args:
        /// cmap_name (string): The name of the registered colormap to generate
        /// a legend for
        /// height (float, optional): The output height of the legend image
        /// width (float, optional): The output width of the legend image
        /// trim_start (int, optional): Number of items to trim from
        /// the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// 
        /// Returns:
        /// HTTP response with jpeg encoded image data
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cmapName"> The name of the registered colormap to generate a legend for. </param>
        /// <param name="height"> The output height of the legend image. </param>
        /// <param name="width"> The output width of the legend image. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetLegend(string cmapName, double? height, double? width, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MapLegendsClient.GetLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(cmapName, nameof(cmapName));

                using HttpMessage message = CreateGetLegendRequest(cmapName, height, width, trimStart, trimEnd, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Generate a legend image for a given colormap.
        /// 
        /// If the colormap has non-contiguous values at the beginning or end,
        /// which aren't desired in the output image, they can be trimmed by specifying
        /// the number of values to trim.
        /// 
        /// Args:
        /// cmap_name (string): The name of the registered colormap to generate
        /// a legend for
        /// height (float, optional): The output height of the legend image
        /// width (float, optional): The output width of the legend image
        /// trim_start (int, optional): Number of items to trim from
        /// the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// 
        /// Returns:
        /// HTTP response with jpeg encoded image data
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cmapName"> The name of the registered colormap to generate a legend for. </param>
        /// <param name="height"> The output height of the legend image. </param>
        /// <param name="width"> The output width of the legend image. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetLegendAsync(string cmapName, double? height, double? width, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MapLegendsClient.GetLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(cmapName, nameof(cmapName));

                using HttpMessage message = CreateGetLegendRequest(cmapName, height, width, trimStart, trimEnd, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generate a legend image for a given colormap.
        /// 
        /// If the colormap has non-contiguous values at the beginning or end,
        /// which aren't desired in the output image, they can be trimmed by specifying
        /// the number of values to trim.
        /// 
        /// Args:
        /// cmap_name (string): The name of the registered colormap to generate
        /// a legend for
        /// height (float, optional): The output height of the legend image
        /// width (float, optional): The output width of the legend image
        /// trim_start (int, optional): Number of items to trim from
        /// the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// 
        /// Returns:
        /// HTTP response with jpeg encoded image data
        /// </summary>
        /// <param name="cmapName"> The name of the registered colormap to generate a legend for. </param>
        /// <param name="height"> The output height of the legend image. </param>
        /// <param name="width"> The output width of the legend image. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetLegend(string cmapName, double? height = default, double? width = default, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cmapName, nameof(cmapName));

            Response result = GetLegend(cmapName, height, width, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// Generate a legend image for a given colormap.
        /// 
        /// If the colormap has non-contiguous values at the beginning or end,
        /// which aren't desired in the output image, they can be trimmed by specifying
        /// the number of values to trim.
        /// 
        /// Args:
        /// cmap_name (string): The name of the registered colormap to generate
        /// a legend for
        /// height (float, optional): The output height of the legend image
        /// width (float, optional): The output width of the legend image
        /// trim_start (int, optional): Number of items to trim from
        /// the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// 
        /// Returns:
        /// HTTP response with jpeg encoded image data
        /// </summary>
        /// <param name="cmapName"> The name of the registered colormap to generate a legend for. </param>
        /// <param name="height"> The output height of the legend image. </param>
        /// <param name="width"> The output width of the legend image. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetLegendAsync(string cmapName, double? height = default, double? width = default, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cmapName, nameof(cmapName));

            Response result = await GetLegendAsync(cmapName, height, width, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Generate values and color swatches mapping for a given interval classmap.
        /// 
        /// Args:
        /// trim_start (int, optional): Number of items to trim from
        /// the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetIntervalLegend(string classmapName, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MapLegendsClient.GetIntervalLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

                using HttpMessage message = CreateGetIntervalLegendRequest(classmapName, trimStart, trimEnd, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Generate values and color swatches mapping for a given interval classmap.
        /// 
        /// Args:
        /// trim_start (int, optional): Number of items to trim from
        /// the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetIntervalLegendAsync(string classmapName, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MapLegendsClient.GetIntervalLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

                using HttpMessage message = CreateGetIntervalLegendRequest(classmapName, trimStart, trimEnd, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generate values and color swatches mapping for a given interval classmap.
        /// 
        /// Args:
        /// trim_start (int, optional): Number of items to trim from
        /// the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IReadOnlyList<IList<BinaryData>>> GetIntervalLegend(string classmapName, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

            Response result = GetIntervalLegend(classmapName, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content.ToObjectFromJson<IReadOnlyList<IList<BinaryData>>>(), result);
        }

        /// <summary>
        /// Generate values and color swatches mapping for a given interval classmap.
        /// 
        /// Args:
        /// trim_start (int, optional): Number of items to trim from
        /// the start of the cmap
        /// trim_end (int, optional): Number of items to trim from the end of the cmap
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IReadOnlyList<IList<BinaryData>>>> GetIntervalLegendAsync(string classmapName, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

            Response result = await GetIntervalLegendAsync(classmapName, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content.ToObjectFromJson<IReadOnlyList<IList<BinaryData>>>(), result);
        }
    }
}
