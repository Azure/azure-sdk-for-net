// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.PlanetaryComputer
{
    /// <summary>
    /// Legend type to make, one of: `continuous`, `classmap`, `interval` or `none`
    /// (note, `none` is a string literal).Defines the legend configuration types for data visualization.
    /// </summary>
    public readonly partial struct LegendConfigType : IEquatable<LegendConfigType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LegendConfigType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LegendConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ContinuousValue = "continuous";
        private const string ClassmapValue = "classmap";
        private const string IntervalValue = "interval";
        private const string NoneValue = "none";

        /// <summary> Continuous color ramp legend. </summary>
        public static LegendConfigType Continuous { get; } = new LegendConfigType(ContinuousValue);
        /// <summary> Classified map with discrete colors for classes. </summary>
        public static LegendConfigType Classmap { get; } = new LegendConfigType(ClassmapValue);
        /// <summary> Interval-based legend with discrete ranges. </summary>
        public static LegendConfigType Interval { get; } = new LegendConfigType(IntervalValue);
        /// <summary> No legend. </summary>
        public static LegendConfigType None { get; } = new LegendConfigType(NoneValue);
        /// <summary> Determines if two <see cref="LegendConfigType"/> values are the same. </summary>
        public static bool operator ==(LegendConfigType left, LegendConfigType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LegendConfigType"/> values are not the same. </summary>
        public static bool operator !=(LegendConfigType left, LegendConfigType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LegendConfigType"/>. </summary>
        public static implicit operator LegendConfigType(string value) => new LegendConfigType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LegendConfigType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LegendConfigType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
