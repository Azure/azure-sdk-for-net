<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetBoundsAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetBoundsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BoundsResult> response = await client.GetBoundsAsync("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetBounds(string,string,CancellationToken)">
      <example>
This sample shows how to call GetBounds.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BoundsResult> response = client.GetBounds("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetBoundsAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetBoundsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetBoundsAsync("{{collectionId}}", "{{itemId}}", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("bounds")[0].ToString());
]]></code></example>
    </member>
    <member name="GetBounds(string,string,RequestContext)">
      <example>
This sample shows how to call GetBounds and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetBounds("{{collectionId}}", "{{itemId}}", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("bounds")[0].ToString());
]]></code></example>
    </member>
    <member name="GetInfoAsync(string,string,IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call GetInfoAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<InfoOperationResult> response = await client.GetInfoAsync("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetInfo(string,string,IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call GetInfo.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<InfoOperationResult> response = client.GetInfo("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetInfoAsync(string,string,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetInfoAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetInfoAsync("{{collectionId}}", "{{itemId}}", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("bounds")[0].ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("dtype").ToString());
]]></code></example>
    </member>
    <member name="GetInfo(string,string,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetInfo and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetInfo("{{collectionId}}", "{{itemId}}", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("bounds")[0].ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("dtype").ToString());
]]></code></example>
    </member>
    <member name="GetInfoGeoJsonAsync(string,string,IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call GetInfoGeoJsonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<TilerInfoGeoJsonFeature> response = await client.GetInfoGeoJsonAsync("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetInfoGeoJson(string,string,IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call GetInfoGeoJson.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<TilerInfoGeoJsonFeature> response = client.GetInfoGeoJson("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetInfoGeoJsonAsync(string,string,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetInfoGeoJsonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetInfoGeoJsonAsync("{{collectionId}}", "{{itemId}}", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").GetProperty("bounds")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").GetProperty("dtype").ToString());
]]></code></example>
    </member>
    <member name="GetInfoGeoJson(string,string,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetInfoGeoJson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetInfoGeoJson("{{collectionId}}", "{{itemId}}", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").GetProperty("bounds")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").GetProperty("dtype").ToString());
]]></code></example>
    </member>
    <member name="GetAvailableAssetsAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetAvailableAssetsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<IReadOnlyList<string>> response = await client.GetAvailableAssetsAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
]]></code></example>
    </member>
    <member name="GetAvailableAssets(string,string,CancellationToken)">
      <example>
This sample shows how to call GetAvailableAssets.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<IReadOnlyList<string>> response = client.GetAvailableAssets("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
]]></code></example>
    </member>
    <member name="GetAvailableAssetsAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetAvailableAssetsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetAvailableAssetsAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
    </member>
    <member name="GetAvailableAssets(string,string,RequestContext)">
      <example>
This sample shows how to call GetAvailableAssets and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetAvailableAssets("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
    </member>
    <member name="GetAssetStatisticsAsync(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,ResamplingMethod?,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,CancellationToken)">
      <example>
This sample shows how to call GetAssetStatisticsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<AssetStatisticsResult> response = await client.GetAssetStatisticsAsync("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetAssetStatistics(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,ResamplingMethod?,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,CancellationToken)">
      <example>
This sample shows how to call GetAssetStatistics.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<AssetStatisticsResult> response = client.GetAssetStatistics("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetAssetStatisticsAsync(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call GetAssetStatisticsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetAssetStatisticsAsync("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("min").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("max").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("mean").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("sum").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("std").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("median").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("majority").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("minority").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("unique").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("histogram")[0][0].ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("valid_percent").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("masked_pixels").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("valid_pixels").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("percentile_2").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("percentile_98").ToString());
]]></code></example>
    </member>
    <member name="GetAssetStatistics(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call GetAssetStatistics and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetAssetStatistics("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("min").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("max").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("mean").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("sum").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("std").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("median").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("majority").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("minority").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("unique").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("histogram")[0][0].ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("valid_percent").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("masked_pixels").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("valid_pixels").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("percentile_2").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("percentile_98").ToString());
]]></code></example>
    </member>
    <member name="GetStatisticsAsync(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,ResamplingMethod?,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,CancellationToken)">
      <example>
This sample shows how to call GetStatisticsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<StatisticsResult> response = await client.GetStatisticsAsync("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetStatistics(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,ResamplingMethod?,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,CancellationToken)">
      <example>
This sample shows how to call GetStatistics.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<StatisticsResult> response = client.GetStatistics("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetStatisticsAsync(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call GetStatisticsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetStatisticsAsync("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetStatistics(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call GetStatistics and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetStatistics("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetGeoJsonStatisticsAsync(string,string,ItemCollectionModel,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,ResamplingMethod?,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,CancellationToken)">
      <example>
This sample shows how to call GetGeoJsonStatisticsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

ItemCollectionModel body = new ItemCollectionModel(new StacItemModel[]
{
    new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
    {
        new IList<double>[]
        {
            new double[]{-65.75386020444417, 18.252659831448764},
            new double[]{-65.75385878091376, 18.252569552371305},
            new double[]{-65.75376429311993, 18.252570912467043},
            new double[]{-65.75376571660163, 18.252661191551685},
            new double[]{-65.75386020444417, 18.252659831448764}
        }
    }), new double[]{-65.75386020444417, 18.252569552371305, -65.75376429311993, 18.252661191551685}, "test-item-0df36a74d7ed", new ItemProperties("2024-11-06T22:49:19.098983Z"), new Dictionary<string, StacAsset>
    {
        ["data"] = new StacAsset("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif")
        {
            Title = "Test data",
            Type = "image/tiff; application=geotiff",
            Roles = {"data"},
        }
    })
    {
        Collection = "test-collection-0df36a74d7ed",
        StacVersion = "1.0.0",
        Links = {new StacLink("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json")
        {
            Rel = "self",
            Type = LinkType.ApplicationJson,
        }},
        StacExtensions = {"https://stac-extensions.github.io/projection/v1.0.0/schema.json"},
    }
});
Response<GeoJsonStatisticsItemCollectionResult> response = await client.GetGeoJsonStatisticsAsync("{{collectionId}}", "{{itemId}}", body);
]]></code></example>
    </member>
    <member name="GetGeoJsonStatistics(string,string,ItemCollectionModel,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,ResamplingMethod?,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,CancellationToken)">
      <example>
This sample shows how to call GetGeoJsonStatistics.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

ItemCollectionModel body = new ItemCollectionModel(new StacItemModel[]
{
    new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
    {
        new IList<double>[]
        {
            new double[]{-65.75386020444417, 18.252659831448764},
            new double[]{-65.75385878091376, 18.252569552371305},
            new double[]{-65.75376429311993, 18.252570912467043},
            new double[]{-65.75376571660163, 18.252661191551685},
            new double[]{-65.75386020444417, 18.252659831448764}
        }
    }), new double[]{-65.75386020444417, 18.252569552371305, -65.75376429311993, 18.252661191551685}, "test-item-0df36a74d7ed", new ItemProperties("2024-11-06T22:49:19.098983Z"), new Dictionary<string, StacAsset>
    {
        ["data"] = new StacAsset("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif")
        {
            Title = "Test data",
            Type = "image/tiff; application=geotiff",
            Roles = {"data"},
        }
    })
    {
        Collection = "test-collection-0df36a74d7ed",
        StacVersion = "1.0.0",
        Links = {new StacLink("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json")
        {
            Rel = "self",
            Type = LinkType.ApplicationJson,
        }},
        StacExtensions = {"https://stac-extensions.github.io/projection/v1.0.0/schema.json"},
    }
});
Response<GeoJsonStatisticsItemCollectionResult> response = client.GetGeoJsonStatistics("{{collectionId}}", "{{itemId}}", body);
]]></code></example>
    </member>
    <member name="GetGeoJsonStatisticsAsync(string,string,RequestContent,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call GetGeoJsonStatisticsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    type = "FeatureCollection",
    features = new object[]
    {
        new
        {
            type = "Feature",
            stac_version = "1.0.0",
            stac_extensions = new object[]
            {
                "https://stac-extensions.github.io/projection/v1.0.0/schema.json"
            },
            id = "test-item-0df36a74d7ed",
            geometry = new
            {
                type = "Polygon",
                coordinates = new object[]
                {
                    new object[]
                    {
                        new object[]
                        {
                            -65.75386020444417,
                            18.252659831448764
                        },
                        new object[]
                        {
                            -65.75385878091376,
                            18.252569552371305
                        },
                        new object[]
                        {
                            -65.75376429311993,
                            18.252570912467043
                        },
                        new object[]
                        {
                            -65.75376571660163,
                            18.252661191551685
                        },
                        new object[]
                        {
                            -65.75386020444417,
                            18.252659831448764
                        }
                    }
                },
            },
            bbox = new object[]
            {
                -65.75386020444417,
                18.252569552371305,
                -65.75376429311993,
                18.252661191551685
            },
            properties = new
            {
                datetime = "2024-11-06T22:49:19.098983Z",
            },
            links = new object[]
            {
                new
                {
                    rel = "self",
                    href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json",
                    type = "application/json",
                }
            },
            assets = new
            {
                data = new
                {
                    href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif",
                    type = "image/tiff; application=geotiff",
                    title = "Test data",
                    roles = new object[]
                    {
                        "data"
                    },
                },
            },
            collection = "test-collection-0df36a74d7ed",
        }
    },
});
Response response = await client.GetGeoJsonStatisticsAsync("{{collectionId}}", "{{itemId}}", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
]]></code></example>
    </member>
    <member name="GetGeoJsonStatistics(string,string,RequestContent,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,int?,bool?,IEnumerable{string},IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call GetGeoJsonStatistics and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    type = "FeatureCollection",
    features = new object[]
    {
        new
        {
            type = "Feature",
            stac_version = "1.0.0",
            stac_extensions = new object[]
            {
                "https://stac-extensions.github.io/projection/v1.0.0/schema.json"
            },
            id = "test-item-0df36a74d7ed",
            geometry = new
            {
                type = "Polygon",
                coordinates = new object[]
                {
                    new object[]
                    {
                        new object[]
                        {
                            -65.75386020444417,
                            18.252659831448764
                        },
                        new object[]
                        {
                            -65.75385878091376,
                            18.252569552371305
                        },
                        new object[]
                        {
                            -65.75376429311993,
                            18.252570912467043
                        },
                        new object[]
                        {
                            -65.75376571660163,
                            18.252661191551685
                        },
                        new object[]
                        {
                            -65.75386020444417,
                            18.252659831448764
                        }
                    }
                },
            },
            bbox = new object[]
            {
                -65.75386020444417,
                18.252569552371305,
                -65.75376429311993,
                18.252661191551685
            },
            properties = new
            {
                datetime = "2024-11-06T22:49:19.098983Z",
            },
            links = new object[]
            {
                new
                {
                    rel = "self",
                    href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json",
                    type = "application/json",
                }
            },
            assets = new
            {
                data = new
                {
                    href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif",
                    type = "image/tiff; application=geotiff",
                    title = "Test data",
                    roles = new object[]
                    {
                        "data"
                    },
                },
            },
            collection = "test-collection-0df36a74d7ed",
        }
    },
});
Response response = client.GetGeoJsonStatistics("{{collectionId}}", "{{itemId}}", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
]]></code></example>
    </member>
    <member name="GetTileAsync(string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,TileMatrixSetId?,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,string,IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call GetTileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = await client.GetTileAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 12F, 47.6062F, 17F, 1F, "png", null);
]]></code></example>
    </member>
    <member name="GetTile(string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,TileMatrixSetId?,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,string,IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call GetTile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = client.GetTile("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 12F, 47.6062F, 17F, 1F, "png", null);
]]></code></example>
    </member>
    <member name="GetTileAsync(string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,string,IEnumerable{string},string,string,bool?,string,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetTileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetTileAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 12F, 47.6062F, 17F, 1F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetTile(string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,string,IEnumerable{string},string,string,bool?,string,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetTile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetTile("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 12F, 47.6062F, 17F, 1F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetTileWithMatrixSetAsync(string,string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,string,IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call GetTileWithMatrixSetAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = await client.GetTileWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", 12F, 47.6062F, 17F, 1F, "png", null);
]]></code></example>
    </member>
    <member name="GetTileWithMatrixSet(string,string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,string,IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call GetTileWithMatrixSet.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = client.GetTileWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", 12F, 47.6062F, 17F, 1F, "png", null);
]]></code></example>
    </member>
    <member name="GetTileWithMatrixSetAsync(string,string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,IEnumerable{string},string,string,bool?,string,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetTileWithMatrixSetAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetTileWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", 12F, 47.6062F, 17F, 1F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetTileWithMatrixSet(string,string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,IEnumerable{string},string,string,bool?,string,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetTileWithMatrixSet and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetTileWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", 12F, 47.6062F, 17F, 1F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetTileJsonAsync(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,TileMatrixSetId?,ImageType?,int?,int?,int?,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetTileJsonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<TileJsonResult> response = await client.GetTileJsonAsync("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetTileJson(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,TileMatrixSetId?,ImageType?,int?,int?,int?,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetTileJson.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<TileJsonResult> response = client.GetTileJson("{{collectionId}}", "{{itemId}}");
]]></code></example>
    </member>
    <member name="GetTileJsonAsync(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,int?,int?,int?,string,string,string,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetTileJsonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetTileJsonAsync("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("tiles")[0].ToString());
]]></code></example>
    </member>
    <member name="GetTileJson(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,int?,int?,int?,string,string,string,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetTileJson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetTileJson("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("tiles")[0].ToString());
]]></code></example>
    </member>
    <member name="GetTileJsonWithMatrixSetAsync(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,ImageType?,int?,int?,int?,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetTileJsonWithMatrixSetAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<TileJsonResult> response = await client.GetTileJsonWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad");
]]></code></example>
    </member>
    <member name="GetTileJsonWithMatrixSet(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,ImageType?,int?,int?,int?,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetTileJsonWithMatrixSet.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<TileJsonResult> response = client.GetTileJsonWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad");
]]></code></example>
    </member>
    <member name="GetTileJsonWithMatrixSetAsync(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,int?,int?,int?,string,string,string,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetTileJsonWithMatrixSetAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetTileJsonWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("tiles")[0].ToString());
]]></code></example>
    </member>
    <member name="GetTileJsonWithMatrixSet(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,int?,int?,int?,string,string,string,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetTileJsonWithMatrixSet and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetTileJsonWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("tiles")[0].ToString());
]]></code></example>
    </member>
    <member name="GetWmtsCapabilitiesAsync(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,TileMatrixSetId?,ImageType?,int?,int?,int?,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetWmtsCapabilitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<string> response = await client.GetWmtsCapabilitiesAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed");
]]></code></example>
    </member>
    <member name="GetWmtsCapabilities(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,TileMatrixSetId?,ImageType?,int?,int?,int?,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetWmtsCapabilities.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<string> response = client.GetWmtsCapabilities("collectionId-0df36a74d7ed", "item-0df36a74d7ed");
]]></code></example>
    </member>
    <member name="GetWmtsCapabilitiesAsync(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,int?,int?,int?,string,string,string,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetWmtsCapabilitiesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetWmtsCapabilitiesAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetWmtsCapabilities(string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,int?,int?,int?,string,string,string,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetWmtsCapabilities and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetWmtsCapabilities("collectionId-0df36a74d7ed", "item-0df36a74d7ed", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetWmtsCapabilitiesWithMatrixSetAsync(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,ImageType?,int?,int?,int?,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetWmtsCapabilitiesWithMatrixSetAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<string> response = await client.GetWmtsCapabilitiesWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad");
]]></code></example>
    </member>
    <member name="GetWmtsCapabilitiesWithMatrixSet(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,ImageType?,int?,int?,int?,string,string,ResamplingMethod?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetWmtsCapabilitiesWithMatrixSet.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<string> response = client.GetWmtsCapabilitiesWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad");
]]></code></example>
    </member>
    <member name="GetWmtsCapabilitiesWithMatrixSetAsync(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,int?,int?,int?,string,string,string,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetWmtsCapabilitiesWithMatrixSetAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetWmtsCapabilitiesWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetWmtsCapabilitiesWithMatrixSet(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,int?,int?,int?,string,string,string,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetWmtsCapabilitiesWithMatrixSet and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetWmtsCapabilitiesWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetPointAsync(string,string,double,float,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,ResamplingMethod?,CancellationToken)">
      <example>
This sample shows how to call GetPointAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<TitilerCoreModelsResponsesPoint> response = await client.GetPointAsync("{{collectionId}}", "{{itemId}}", -65.75381224878205, 18.252615F);
]]></code></example>
    </member>
    <member name="GetPoint(string,string,double,float,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,ResamplingMethod?,CancellationToken)">
      <example>
This sample shows how to call GetPoint.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<TitilerCoreModelsResponsesPoint> response = client.GetPoint("{{collectionId}}", "{{itemId}}", -65.75381224878205, 18.252615F);
]]></code></example>
    </member>
    <member name="GetPointAsync(string,string,double,float,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,RequestContext)">
      <example>
This sample shows how to call GetPointAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetPointAsync("{{collectionId}}", "{{itemId}}", -65.75381224878205, 18.252615F, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("coordinates")[0].ToString());
Console.WriteLine(result.GetProperty("values")[0].ToString());
Console.WriteLine(result.GetProperty("band_names")[0].ToString());
]]></code></example>
    </member>
    <member name="GetPoint(string,string,double,float,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,RequestContext)">
      <example>
This sample shows how to call GetPoint and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetPoint("{{collectionId}}", "{{itemId}}", -65.75381224878205, 18.252615F, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("coordinates")[0].ToString());
Console.WriteLine(result.GetProperty("values")[0].ToString());
Console.WriteLine(result.GetProperty("band_names")[0].ToString());
]]></code></example>
    </member>
    <member name="GetPreviewAsync(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,ImageType?,string,string,ResamplingMethod?,int?,int?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPreviewAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = await client.GetPreviewAsync("ESP-collection", "18S-2022", null);
]]></code></example>
    </member>
    <member name="GetPreview(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,ImageType?,string,string,ResamplingMethod?,int?,int?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPreview.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = client.GetPreview("ESP-collection", "18S-2022", null);
]]></code></example>
    </member>
    <member name="GetPreviewAsync(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,string,int?,int?,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetPreviewAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetPreviewAsync("ESP-collection", "18S-2022", null, new string[] { "data" }, null, new string[] { "image|1,2,3" }, null, null, null, null, null, null, null, null, null, 400, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetPreview(string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,string,int?,int?,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetPreview and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetPreview("ESP-collection", "18S-2022", null, new string[] { "data" }, null, new string[] { "image|1,2,3" }, null, null, null, null, null, null, null, null, null, 400, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetPreviewWithFormatAsync(string,string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,ResamplingMethod?,int?,int?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPreviewWithFormatAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = await client.GetPreviewWithFormatAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622", "png", null);
]]></code></example>
    </member>
    <member name="GetPreviewWithFormat(string,string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,ResamplingMethod?,int?,int?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPreviewWithFormat.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = client.GetPreviewWithFormat("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622", "png", null);
]]></code></example>
    </member>
    <member name="GetPreviewWithFormatAsync(string,string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,int?,int?,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetPreviewWithFormatAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetPreviewWithFormatAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622", "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetPreviewWithFormat(string,string,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,int?,int?,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetPreviewWithFormat and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetPreviewWithFormat("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622", "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetPartAsync(string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,string,ResamplingMethod?,int?,int?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPartAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = await client.GetPartAsync("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, "png", null);
]]></code></example>
    </member>
    <member name="GetPart(string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,string,ResamplingMethod?,int?,int?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPart.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = client.GetPart("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, "png", null);
]]></code></example>
    </member>
    <member name="GetPartAsync(string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,string,int?,int?,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetPartAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetPartAsync("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetPart(string,string,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,string,int?,int?,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetPart and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetPart("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetPartWithDimensionsAsync(string,string,float,float,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,string,ResamplingMethod?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPartWithDimensionsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = await client.GetPartWithDimensionsAsync("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, 4.1F, 0.08F, "png", null);
]]></code></example>
    </member>
    <member name="GetPartWithDimensions(string,string,float,float,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,string,ResamplingMethod?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPartWithDimensions.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response<BinaryData> response = client.GetPartWithDimensions("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, 4.1F, 0.08F, "png", null);
]]></code></example>
    </member>
    <member name="GetPartWithDimensionsAsync(string,string,float,float,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,string,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetPartWithDimensionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = await client.GetPartWithDimensionsAsync("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, 4.1F, 0.08F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetPartWithDimensions(string,string,float,float,float,float,float,float,string,string,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,string,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetPartWithDimensions and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

Response response = client.GetPartWithDimensions("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, 4.1F, 0.08F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="CropGeoJsonAsync(string,string,string,string,GeoJsonGeometry,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,ResamplingMethod?,int?,int?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call CropGeoJsonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

GeoJsonGeometry body = new GeoJsonPolygon(new IList<IList<double>>[]
{
    new IList<double>[]
    {
        new double[]{-65.75386020444417, 18.252659831448764},
        new double[]{-65.75385878091376, 18.252569552371305},
        new double[]{-65.75376429311993, 18.252570912467043},
        new double[]{-65.75376571660163, 18.252661191551685},
        new double[]{-65.75386020444417, 18.252659831448764}
    }
});
Response<BinaryData> response = await client.CropGeoJsonAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "png", null, body);
]]></code></example>
    </member>
    <member name="CropGeoJson(string,string,string,string,GeoJsonGeometry,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,ResamplingMethod?,int?,int?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call CropGeoJson.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

GeoJsonGeometry body = new GeoJsonPolygon(new IList<IList<double>>[]
{
    new IList<double>[]
    {
        new double[]{-65.75386020444417, 18.252659831448764},
        new double[]{-65.75385878091376, 18.252569552371305},
        new double[]{-65.75376429311993, 18.252570912467043},
        new double[]{-65.75376571660163, 18.252661191551685},
        new double[]{-65.75386020444417, 18.252659831448764}
    }
});
Response<BinaryData> response = client.CropGeoJson("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "png", null, body);
]]></code></example>
    </member>
    <member name="CropGeoJsonAsync(string,string,string,string,RequestContent,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,int?,int?,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call CropGeoJsonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    type = "Polygon",
    coordinates = new object[]
    {
        new object[]
        {
            new object[]
            {
                -65.75386020444417,
                18.252659831448764
            },
            new object[]
            {
                -65.75385878091376,
                18.252569552371305
            },
            new object[]
            {
                -65.75376429311993,
                18.252570912467043
            },
            new object[]
            {
                -65.75376571660163,
                18.252661191551685
            },
            new object[]
            {
                -65.75386020444417,
                18.252659831448764
            }
        }
    },
});
Response response = await client.CropGeoJsonAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "png", null, content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="CropGeoJson(string,string,string,string,RequestContent,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,int?,int?,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call CropGeoJson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    type = "Polygon",
    coordinates = new object[]
    {
        new object[]
        {
            new object[]
            {
                -65.75386020444417,
                18.252659831448764
            },
            new object[]
            {
                -65.75385878091376,
                18.252569552371305
            },
            new object[]
            {
                -65.75376429311993,
                18.252570912467043
            },
            new object[]
            {
                -65.75376571660163,
                18.252661191551685
            },
            new object[]
            {
                -65.75386020444417,
                18.252659831448764
            }
        }
    },
});
Response response = client.CropGeoJson("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "png", null, content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="CropGeoJsonWithDimensionsAsync(string,string,float,float,string,string,StacItemModel,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,ResamplingMethod?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call CropGeoJsonWithDimensionsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

StacItemModel body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
{
    new IList<double>[]
    {
        new double[]{-65.75386020444417, 18.252659831448764},
        new double[]{-65.75385878091376, 18.252569552371305},
        new double[]{-65.75376429311993, 18.252570912467043},
        new double[]{-65.75376571660163, 18.252661191551685},
        new double[]{-65.75386020444417, 18.252659831448764}
    }
}), new double[] { -65.75386020444417, 18.252569552371305, -65.75376429311993, 18.252661191551685 }, "test-item-0df36a74d7ed", new ItemProperties("2024-11-06T22:49:19.098983Z"), new Dictionary<string, StacAsset>
{
    ["data"] = new StacAsset("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif")
    {
        Title = "Test data",
        Type = "image/tiff; application=geotiff",
        Roles = { "data" },
    }
})
{
    Collection = "test-collection-0df36a74d7ed",
    StacVersion = "1.0.0",
    Links = {new StacLink("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json")
    {
        Rel = "self",
        Type = LinkType.ApplicationJson,
    }},
    StacExtensions = { "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
};
Response<BinaryData> response = await client.CropGeoJsonWithDimensionsAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 4.1F, 0.08F, "png", null, body);
]]></code></example>
    </member>
    <member name="CropGeoJsonWithDimensions(string,string,float,float,string,string,StacItemModel,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,AlgorithmInfo?,string,string,string,ResamplingMethod?,int?,IEnumerable{string},ColorMapNames?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call CropGeoJsonWithDimensions.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

StacItemModel body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
{
    new IList<double>[]
    {
        new double[]{-65.75386020444417, 18.252659831448764},
        new double[]{-65.75385878091376, 18.252569552371305},
        new double[]{-65.75376429311993, 18.252570912467043},
        new double[]{-65.75376571660163, 18.252661191551685},
        new double[]{-65.75386020444417, 18.252659831448764}
    }
}), new double[] { -65.75386020444417, 18.252569552371305, -65.75376429311993, 18.252661191551685 }, "test-item-0df36a74d7ed", new ItemProperties("2024-11-06T22:49:19.098983Z"), new Dictionary<string, StacAsset>
{
    ["data"] = new StacAsset("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif")
    {
        Title = "Test data",
        Type = "image/tiff; application=geotiff",
        Roles = { "data" },
    }
})
{
    Collection = "test-collection-0df36a74d7ed",
    StacVersion = "1.0.0",
    Links = {new StacLink("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json")
    {
        Rel = "self",
        Type = LinkType.ApplicationJson,
    }},
    StacExtensions = { "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
};
Response<BinaryData> response = client.CropGeoJsonWithDimensions("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 4.1F, 0.08F, "png", null, body);
]]></code></example>
    </member>
    <member name="CropGeoJsonWithDimensionsAsync(string,string,float,float,string,string,RequestContent,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call CropGeoJsonWithDimensionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    type = "Feature",
    stac_version = "1.0.0",
    stac_extensions = new object[]
    {
        "https://stac-extensions.github.io/projection/v1.0.0/schema.json"
    },
    id = "test-item-0df36a74d7ed",
    geometry = new
    {
        type = "Polygon",
        coordinates = new object[]
        {
            new object[]
            {
                new object[]
                {
                    -65.75386020444417,
                    18.252659831448764
                },
                new object[]
                {
                    -65.75385878091376,
                    18.252569552371305
                },
                new object[]
                {
                    -65.75376429311993,
                    18.252570912467043
                },
                new object[]
                {
                    -65.75376571660163,
                    18.252661191551685
                },
                new object[]
                {
                    -65.75386020444417,
                    18.252659831448764
                }
            }
        },
    },
    bbox = new object[]
    {
        -65.75386020444417,
        18.252569552371305,
        -65.75376429311993,
        18.252661191551685
    },
    properties = new
    {
        datetime = "2024-11-06T22:49:19.098983Z",
    },
    links = new object[]
    {
        new
        {
            rel = "self",
            href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json",
            type = "application/json",
        }
    },
    assets = new
    {
        data = new
        {
            href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif",
            type = "image/tiff; application=geotiff",
            title = "Test data",
            roles = new object[]
            {
                "data"
            },
        },
    },
    collection = "test-collection-0df36a74d7ed",
});
Response response = await client.CropGeoJsonWithDimensionsAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 4.1F, 0.08F, "png", null, content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="CropGeoJsonWithDimensions(string,string,float,float,string,string,RequestContent,IEnumerable{string},string,IEnumerable{string},bool?,float?,bool?,string,string,string,string,string,int?,IEnumerable{string},string,string,bool?,RequestContext)">
      <example>
This sample shows how to call CropGeoJsonWithDimensions and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    type = "Feature",
    stac_version = "1.0.0",
    stac_extensions = new object[]
    {
        "https://stac-extensions.github.io/projection/v1.0.0/schema.json"
    },
    id = "test-item-0df36a74d7ed",
    geometry = new
    {
        type = "Polygon",
        coordinates = new object[]
        {
            new object[]
            {
                new object[]
                {
                    -65.75386020444417,
                    18.252659831448764
                },
                new object[]
                {
                    -65.75385878091376,
                    18.252569552371305
                },
                new object[]
                {
                    -65.75376429311993,
                    18.252570912467043
                },
                new object[]
                {
                    -65.75376571660163,
                    18.252661191551685
                },
                new object[]
                {
                    -65.75386020444417,
                    18.252659831448764
                }
            }
        },
    },
    bbox = new object[]
    {
        -65.75386020444417,
        18.252569552371305,
        -65.75376429311993,
        18.252661191551685
    },
    properties = new
    {
        datetime = "2024-11-06T22:49:19.098983Z",
    },
    links = new object[]
    {
        new
        {
            rel = "self",
            href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json",
            type = "application/json",
        }
    },
    assets = new
    {
        data = new
        {
            href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif",
            type = "image/tiff; application=geotiff",
            title = "Test data",
            roles = new object[]
            {
                "data"
            },
        },
    },
    collection = "test-collection-0df36a74d7ed",
});
Response response = client.CropGeoJsonWithDimensions("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 4.1F, 0.08F, "png", null, content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
  </members>
</doc>