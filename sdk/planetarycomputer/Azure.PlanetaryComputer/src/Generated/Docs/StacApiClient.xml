<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetStacLandingPageAsync(CancellationToken)">
      <example>
This sample shows how to call GetStacLandingPageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<LandingPage> response = await client.GetStacLandingPageAsync();
]]></code></example>
    </member>
    <member name="GetStacLandingPage(CancellationToken)">
      <example>
This sample shows how to call GetStacLandingPage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<LandingPage> response = client.GetStacLandingPage();
]]></code></example>
    </member>
    <member name="GetStacLandingPageAsync(RequestContext)">
      <example>
This sample shows how to call GetStacLandingPageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = await client.GetStacLandingPageAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("conformsTo")[0].ToString());
Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
]]></code></example>
    </member>
    <member name="GetStacLandingPage(RequestContext)">
      <example>
This sample shows how to call GetStacLandingPage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = client.GetStacLandingPage(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("conformsTo")[0].ToString());
Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
]]></code></example>
    </member>
    <member name="GetAllCollectionsAsync(SignType?,int?,CancellationToken)">
      <example>
This sample shows how to call GetAllCollectionsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<FeatureCollections> response = await client.GetAllCollectionsAsync();
]]></code></example>
    </member>
    <member name="GetAllCollections(SignType?,int?,CancellationToken)">
      <example>
This sample shows how to call GetAllCollections.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<FeatureCollections> response = client.GetAllCollections();
]]></code></example>
    </member>
    <member name="GetAllCollectionsAsync(string,int?,RequestContext)">
      <example>
This sample shows how to call GetAllCollectionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = await client.GetAllCollectionsAsync(null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("links")[0].GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("license").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("extent").GetProperty("spatial").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
]]></code></example>
    </member>
    <member name="GetAllCollections(string,int?,RequestContext)">
      <example>
This sample shows how to call GetAllCollections and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = client.GetAllCollections(null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("links")[0].GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("license").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("extent").GetProperty("spatial").ToString());
Console.WriteLine(result.GetProperty("collections")[0].GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
]]></code></example>
    </member>
    <member name="GetCollectionAsync(string,SignType?,int?,CancellationToken)">
      <example>
This sample shows how to call GetCollectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<StacCollectionModel> response = await client.GetCollectionAsync("test-collection-568725878606");
]]></code></example>
    </member>
    <member name="GetCollection(string,SignType?,int?,CancellationToken)">
      <example>
This sample shows how to call GetCollection.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<StacCollectionModel> response = client.GetCollection("test-collection-568725878606");
]]></code></example>
    </member>
    <member name="GetCollectionAsync(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetCollectionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = await client.GetCollectionAsync("test-collection-568725878606", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("license").ToString());
Console.WriteLine(result.GetProperty("extent").GetProperty("spatial").ToString());
Console.WriteLine(result.GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
]]></code></example>
    </member>
    <member name="GetCollection(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetCollection and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = client.GetCollection("test-collection-568725878606", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("license").ToString());
Console.WriteLine(result.GetProperty("extent").GetProperty("spatial").ToString());
Console.WriteLine(result.GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
]]></code></example>
    </member>
    <member name="GetItemsAsFeaturesAsync(string,long?,IEnumerable{string},string,CancellationToken)">
      <example>
This sample shows how to call GetItemsAsFeaturesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<ItemCollectionModel> response = await client.GetItemsAsFeaturesAsync("example-collection");
]]></code></example>
    </member>
    <member name="GetItemsAsFeatures(string,long?,IEnumerable{string},string,CancellationToken)">
      <example>
This sample shows how to call GetItemsAsFeatures.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<ItemCollectionModel> response = client.GetItemsAsFeatures("example-collection");
]]></code></example>
    </member>
    <member name="GetItemsAsFeaturesAsync(string,long?,IEnumerable{string},string,RequestContext)">
      <example>
This sample shows how to call GetItemsAsFeaturesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = await client.GetItemsAsFeaturesAsync("example-collection", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetItemsAsFeatures(string,long?,IEnumerable{string},string,RequestContext)">
      <example>
This sample shows how to call GetItemsAsFeatures and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = client.GetItemsAsFeatures("example-collection", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetItemAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetItemAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<StacItemModel> response = await client.GetItemAsync("example-collection", "S2A_MSIL2A_20231017T013651_R117_T53SPA_20231017T053413");
]]></code></example>
    </member>
    <member name="GetItem(string,string,CancellationToken)">
      <example>
This sample shows how to call GetItem.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<StacItemModel> response = client.GetItem("example-collection", "S2A_MSIL2A_20231017T013651_R117_T53SPA_20231017T053413");
]]></code></example>
    </member>
    <member name="GetItemAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetItemAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = await client.GetItemAsync("example-collection", "S2A_MSIL2A_20231017T013651_R117_T53SPA_20231017T053413", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("bbox")[0].ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("datetime").ToString());
Console.WriteLine(result.GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetItem(string,string,RequestContext)">
      <example>
This sample shows how to call GetItem and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = client.GetItem("example-collection", "S2A_MSIL2A_20231017T013651_R117_T53SPA_20231017T053413", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("bbox")[0].ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("datetime").ToString());
Console.WriteLine(result.GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetAllQueryablesAsync(CancellationToken)">
      <example>
This sample shows how to call GetAllQueryablesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<JsonSchema> response = await client.GetAllQueryablesAsync();
]]></code></example>
    </member>
    <member name="GetAllQueryables(CancellationToken)">
      <example>
This sample shows how to call GetAllQueryables.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<JsonSchema> response = client.GetAllQueryables();
]]></code></example>
    </member>
    <member name="GetAllQueryablesAsync(RequestContext)">
      <example>
This sample shows how to call GetAllQueryablesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = await client.GetAllQueryablesAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetAllQueryables(RequestContext)">
      <example>
This sample shows how to call GetAllQueryables and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = client.GetAllQueryables(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetAllQueryablesByCollectionAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetAllQueryablesByCollectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<JsonSchema> response = await client.GetAllQueryablesByCollectionAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
]]></code></example>
    </member>
    <member name="GetAllQueryablesByCollection(string,CancellationToken)">
      <example>
This sample shows how to call GetAllQueryablesByCollection.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<JsonSchema> response = client.GetAllQueryablesByCollection("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
]]></code></example>
    </member>
    <member name="GetAllQueryablesByCollectionAsync(string,RequestContext)">
      <example>
This sample shows how to call GetAllQueryablesByCollectionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = await client.GetAllQueryablesByCollectionAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetAllQueryablesByCollection(string,RequestContext)">
      <example>
This sample shows how to call GetAllQueryablesByCollection and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = client.GetAllQueryablesByCollection("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="CreateQueryablesAsync(string,IEnumerable{QueryableProperty},CancellationToken)">
      <example>
This sample shows how to call CreateQueryablesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<IReadOnlyList<QueryableProperty>> response = await client.CreateQueryablesAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", new QueryableProperty[]
{
    new QueryableProperty("eo:clown_cover", new QueryableDefinitionType())
});
]]></code></example>
    </member>
    <member name="CreateQueryables(string,IEnumerable{QueryableProperty},CancellationToken)">
      <example>
This sample shows how to call CreateQueryables.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<IReadOnlyList<QueryableProperty>> response = client.CreateQueryables("36fcb8da-9b15-49e0-b400-0d2e751e2061", new QueryableProperty[]
{
    new QueryableProperty("eo:clown_cover", new QueryableDefinitionType())
});
]]></code></example>
    </member>
    <member name="CreateQueryablesAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateQueryablesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        name = "eo:clown_cover",
        definition = new object(),
    }
});
Response response = await client.CreateQueryablesAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("definition").ToString());
]]></code></example>
    </member>
    <member name="CreateQueryables(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateQueryables and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        name = "eo:clown_cover",
        definition = new object(),
    }
});
Response response = client.CreateQueryables("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("definition").ToString());
]]></code></example>
    </member>
    <member name="GetConformanceClassAsync(CancellationToken)">
      <example>
This sample shows how to call GetConformanceClassAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<ConformanceClasses> response = await client.GetConformanceClassAsync();
]]></code></example>
    </member>
    <member name="GetConformanceClass(CancellationToken)">
      <example>
This sample shows how to call GetConformanceClass.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<ConformanceClasses> response = client.GetConformanceClass();
]]></code></example>
    </member>
    <member name="GetConformanceClassAsync(RequestContext)">
      <example>
This sample shows how to call GetConformanceClassAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = await client.GetConformanceClassAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("conformsTo")[0].ToString());
]]></code></example>
    </member>
    <member name="GetConformanceClass(RequestContext)">
      <example>
This sample shows how to call GetConformanceClass and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = client.GetConformanceClass(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("conformsTo")[0].ToString());
]]></code></example>
    </member>
    <member name="GetSearchOperationsAsync(IEnumerable{string},IEnumerable{string},IEnumerable{double},string,string,int?,SignType?,int?,string,string,string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetSearchOperationsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<ItemCollectionModel> response = await client.GetSearchOperationsAsync();
]]></code></example>
    </member>
    <member name="GetSearchOperations(IEnumerable{string},IEnumerable{string},IEnumerable{double},string,string,int?,SignType?,int?,string,string,string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetSearchOperations.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response<ItemCollectionModel> response = client.GetSearchOperations();
]]></code></example>
    </member>
    <member name="GetSearchOperationsAsync(IEnumerable{string},IEnumerable{string},IEnumerable{double},string,string,int?,string,int?,string,string,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetSearchOperationsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = await client.GetSearchOperationsAsync(null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetSearchOperations(IEnumerable{string},IEnumerable{string},IEnumerable{double},string,string,int?,string,int?,string,string,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetSearchOperations and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Response response = client.GetSearchOperations(null, null, null, null, null, null, null, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="CreateSearchOperationsAsync(SearchPostContent,CancellationToken)">
      <example>
This sample shows how to call CreateSearchOperationsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

SearchPostContent body = new SearchPostContent
{
    Limit = 1,
    SortBy = { new SortExtension("datetime", SortDirections.Desc) },
    FilterLang = FilterLang.Cql2Json,
};
Response<ItemCollectionModel> response = await client.CreateSearchOperationsAsync(body);
]]></code></example>
    </member>
    <member name="CreateSearchOperations(SearchPostContent,CancellationToken)">
      <example>
This sample shows how to call CreateSearchOperations.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

SearchPostContent body = new SearchPostContent
{
    Limit = 1,
    SortBy = { new SortExtension("datetime", SortDirections.Desc) },
    FilterLang = FilterLang.Cql2Json,
};
Response<ItemCollectionModel> response = client.CreateSearchOperations(body);
]]></code></example>
    </member>
    <member name="CreateSearchOperationsAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateSearchOperationsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new Dictionary<string, object>
{
    ["filter-lang"] = "cql2-json",
    ["sortby"] = new object[]
    {
        new
        {
            field = "datetime",
            direction = "desc",
        }
    },
    ["limit"] = 1
});
Response response = await client.CreateSearchOperationsAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="CreateSearchOperations(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateSearchOperations and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new Dictionary<string, object>
{
    ["filter-lang"] = "cql2-json",
    ["sortby"] = new object[]
    {
        new
        {
            field = "datetime",
            direction = "desc",
        }
    },
    ["limit"] = 1
});
Response response = client.CreateSearchOperations(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="CreateCollectionAsync(WaitUntil,StacCollectionModel,CancellationToken)">
      <example>
This sample shows how to call CreateCollectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

StacCollectionModel body = new StacCollectionModel("test-collection-d45537668d06", "A collection for integration tests purposes", Array.Empty<StacLink>(), "CC-BY-4.0", new StacExtent(new SpatialExtent
{
    Bbox = { new double[] { -180, -90, 180, 90 } },
}, new TimeInterval(new IList<string>[]
{
    new string[]{"2020-01-01T00:00:00Z"}
})))
{
    StacVersion = "1.0.0",
    Title = "Test Collection d45537668d06",
    Type = "Collection",
};
Operation operation = await client.CreateCollectionAsync(WaitUntil.Completed, body);
]]></code></example>
    </member>
    <member name="CreateCollection(WaitUntil,StacCollectionModel,CancellationToken)">
      <example>
This sample shows how to call CreateCollection.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

StacCollectionModel body = new StacCollectionModel("test-collection-d45537668d06", "A collection for integration tests purposes", Array.Empty<StacLink>(), "CC-BY-4.0", new StacExtent(new SpatialExtent
{
    Bbox = { new double[] { -180, -90, 180, 90 } },
}, new TimeInterval(new IList<string>[]
{
    new string[]{"2020-01-01T00:00:00Z"}
})))
{
    StacVersion = "1.0.0",
    Title = "Test Collection d45537668d06",
    Type = "Collection",
};
Operation operation = client.CreateCollection(WaitUntil.Completed, body);
]]></code></example>
    </member>
    <member name="CreateCollectionAsync(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateCollectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    type = "Collection",
    id = "test-collection-d45537668d06",
    stac_version = "1.0.0",
    description = "A collection for integration tests purposes",
    links = Array.Empty<object>(),
    title = "Test Collection d45537668d06",
    extent = new
    {
        spatial = new
        {
            bbox = new object[]
            {
                new object[]
                {
                    -180,
                    -90,
                    180,
                    90
                }
            },
        },
        temporal = new
        {
            interval = new object[]
            {
                new object[]
                {
                    "2020-01-01T00:00:00Z"
                }
            },
        },
    },
    license = "CC-BY-4.0",
});
Operation operation = await client.CreateCollectionAsync(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="CreateCollection(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateCollection.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    type = "Collection",
    id = "test-collection-d45537668d06",
    stac_version = "1.0.0",
    description = "A collection for integration tests purposes",
    links = Array.Empty<object>(),
    title = "Test Collection d45537668d06",
    extent = new
    {
        spatial = new
        {
            bbox = new object[]
            {
                new object[]
                {
                    -180,
                    -90,
                    180,
                    90
                }
            },
        },
        temporal = new
        {
            interval = new object[]
            {
                new object[]
                {
                    "2020-01-01T00:00:00Z"
                }
            },
        },
    },
    license = "CC-BY-4.0",
});
Operation operation = client.CreateCollection(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="CreateOrReplaceCollectionAsync(WaitUntil,string,StacCollectionModel,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceCollectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

StacCollectionModel body = new StacCollectionModel("test-collection-d45537668d06", "A collection for integration tests purposes", Array.Empty<StacLink>(), "CC-BY-4.0", new StacExtent(new SpatialExtent
{
    Bbox = { new double[] { -180, -90, 180, 90 } },
}, new TimeInterval(new IList<string>[]
{
    new string[]{"2020-01-01T00:00:00Z"}
})))
{
    StacVersion = "1.0.0",
    Title = "Test Collection d45537668d06",
    Type = "Collection",
};
Operation operation = await client.CreateOrReplaceCollectionAsync(WaitUntil.Completed, "test-collection-568725878606", body);
]]></code></example>
    </member>
    <member name="CreateOrReplaceCollection(WaitUntil,string,StacCollectionModel,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceCollection.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

StacCollectionModel body = new StacCollectionModel("test-collection-d45537668d06", "A collection for integration tests purposes", Array.Empty<StacLink>(), "CC-BY-4.0", new StacExtent(new SpatialExtent
{
    Bbox = { new double[] { -180, -90, 180, 90 } },
}, new TimeInterval(new IList<string>[]
{
    new string[]{"2020-01-01T00:00:00Z"}
})))
{
    StacVersion = "1.0.0",
    Title = "Test Collection d45537668d06",
    Type = "Collection",
};
Operation operation = client.CreateOrReplaceCollection(WaitUntil.Completed, "test-collection-568725878606", body);
]]></code></example>
    </member>
    <member name="CreateOrReplaceCollectionAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceCollectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    type = "Collection",
    id = "test-collection-d45537668d06",
    stac_version = "1.0.0",
    description = "A collection for integration tests purposes",
    links = Array.Empty<object>(),
    title = "Test Collection d45537668d06",
    extent = new
    {
        spatial = new
        {
            bbox = new object[]
            {
                new object[]
                {
                    -180,
                    -90,
                    180,
                    90
                }
            },
        },
        temporal = new
        {
            interval = new object[]
            {
                new object[]
                {
                    "2020-01-01T00:00:00Z"
                }
            },
        },
    },
    license = "CC-BY-4.0",
});
Operation operation = await client.CreateOrReplaceCollectionAsync(WaitUntil.Completed, "test-collection-568725878606", content);
]]></code></example>
    </member>
    <member name="CreateOrReplaceCollection(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceCollection.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    type = "Collection",
    id = "test-collection-d45537668d06",
    stac_version = "1.0.0",
    description = "A collection for integration tests purposes",
    links = Array.Empty<object>(),
    title = "Test Collection d45537668d06",
    extent = new
    {
        spatial = new
        {
            bbox = new object[]
            {
                new object[]
                {
                    -180,
                    -90,
                    180,
                    90
                }
            },
        },
        temporal = new
        {
            interval = new object[]
            {
                new object[]
                {
                    "2020-01-01T00:00:00Z"
                }
            },
        },
    },
    license = "CC-BY-4.0",
});
Operation operation = client.CreateOrReplaceCollection(WaitUntil.Completed, "test-collection-568725878606", content);
]]></code></example>
    </member>
    <member name="DeleteCollectionAsync(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call DeleteCollectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Operation operation = await client.DeleteCollectionAsync(WaitUntil.Completed, "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
]]></code></example>
    </member>
    <member name="DeleteCollection(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call DeleteCollection.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Operation operation = client.DeleteCollection(WaitUntil.Completed, "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
]]></code></example>
    </member>
    <member name="CreateItemAsync(WaitUntil,string,StacItemOrItemCollection,CancellationToken)">
      <example>
This sample shows how to call CreateItemAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

StacItemOrItemCollection body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
{
    new IList<double>[]
    {
        new double[]{-80.560478, 27.997976},
        new double[]{-80.560208, 28.064325},
        new double[]{-80.627067, 28.064522},
        new double[]{-80.627296, 27.998174},
        new double[]{-80.560478, 27.997976}
    }
}), new double[] { -80.627296, 27.997976, -80.560208, 28.064522 }, "{{itemId}}", new ItemProperties("2019-12-15T00:00:00Z")
{
    Gsd = 0.6F,
}, new Dictionary<string, StacAsset>
{
    ["sample_external"] = new StacAsset("https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png")
    {
        Title = "Sample external image",
        Type = "image/png",
        Roles = { "tiles" },
    }
})
{
    Collection = "{{collectionId}}",
    StacVersion = "1.0.0",
    Links = { },
    StacExtensions = { "https://stac-extensions.github.io/eo/v1.0.0/schema.json", "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
};
Operation operation = await client.CreateItemAsync(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", body);
]]></code></example>
    </member>
    <member name="CreateItem(WaitUntil,string,StacItemOrItemCollection,CancellationToken)">
      <example>
This sample shows how to call CreateItem.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

StacItemOrItemCollection body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
{
    new IList<double>[]
    {
        new double[]{-80.560478, 27.997976},
        new double[]{-80.560208, 28.064325},
        new double[]{-80.627067, 28.064522},
        new double[]{-80.627296, 27.998174},
        new double[]{-80.560478, 27.997976}
    }
}), new double[] { -80.627296, 27.997976, -80.560208, 28.064522 }, "{{itemId}}", new ItemProperties("2019-12-15T00:00:00Z")
{
    Gsd = 0.6F,
}, new Dictionary<string, StacAsset>
{
    ["sample_external"] = new StacAsset("https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png")
    {
        Title = "Sample external image",
        Type = "image/png",
        Roles = { "tiles" },
    }
})
{
    Collection = "{{collectionId}}",
    StacVersion = "1.0.0",
    Links = { },
    StacExtensions = { "https://stac-extensions.github.io/eo/v1.0.0/schema.json", "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
};
Operation operation = client.CreateItem(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", body);
]]></code></example>
    </member>
    <member name="CreateItemAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateItemAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "{{itemId}}",
    bbox = new object[]
    {
        -80.627296,
        27.997976,
        -80.560208,
        28.064522
    },
    type = "Feature",
    links = Array.Empty<object>(),
    assets = new
    {
        sample_external = new
        {
            title = "Sample external image",
            href = "https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png",
            type = "image/png",
            roles = new object[]
            {
                "tiles"
            },
        },
    },
    geometry = new
    {
        type = "Polygon",
        coordinates = new object[]
        {
            new object[]
            {
                new object[]
                {
                    -80.560478,
                    27.997976
                },
                new object[]
                {
                    -80.560208,
                    28.064325
                },
                new object[]
                {
                    -80.627067,
                    28.064522
                },
                new object[]
                {
                    -80.627296,
                    27.998174
                },
                new object[]
                {
                    -80.560478,
                    27.997976
                }
            }
        },
    },
    collection = "{{collectionId}}",
    properties = new
    {
        gsd = 0.6F,
        datetime = "2019-12-15T00:00:00Z",
    },
    stac_version = "1.0.0",
    stac_extensions = new object[]
    {
        "https://stac-extensions.github.io/eo/v1.0.0/schema.json",
        "https://stac-extensions.github.io/projection/v1.0.0/schema.json"
    },
});
Operation operation = await client.CreateItemAsync(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", content);
]]></code></example>
    </member>
    <member name="CreateItem(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateItem.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "{{itemId}}",
    bbox = new object[]
    {
        -80.627296,
        27.997976,
        -80.560208,
        28.064522
    },
    type = "Feature",
    links = Array.Empty<object>(),
    assets = new
    {
        sample_external = new
        {
            title = "Sample external image",
            href = "https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png",
            type = "image/png",
            roles = new object[]
            {
                "tiles"
            },
        },
    },
    geometry = new
    {
        type = "Polygon",
        coordinates = new object[]
        {
            new object[]
            {
                new object[]
                {
                    -80.560478,
                    27.997976
                },
                new object[]
                {
                    -80.560208,
                    28.064325
                },
                new object[]
                {
                    -80.627067,
                    28.064522
                },
                new object[]
                {
                    -80.627296,
                    27.998174
                },
                new object[]
                {
                    -80.560478,
                    27.997976
                }
            }
        },
    },
    collection = "{{collectionId}}",
    properties = new
    {
        gsd = 0.6F,
        datetime = "2019-12-15T00:00:00Z",
    },
    stac_version = "1.0.0",
    stac_extensions = new object[]
    {
        "https://stac-extensions.github.io/eo/v1.0.0/schema.json",
        "https://stac-extensions.github.io/projection/v1.0.0/schema.json"
    },
});
Operation operation = client.CreateItem(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", content);
]]></code></example>
    </member>
    <member name="CreateOrReplaceItemAsync(WaitUntil,string,string,StacItemModel,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceItemAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

StacItemModel body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
{
    new IList<double>[]
    {
        new double[]{-80.560478, 27.997976},
        new double[]{-80.560208, 28.064325},
        new double[]{-80.627067, 28.064522},
        new double[]{-80.627296, 27.998174},
        new double[]{-80.560478, 27.997976}
    }
}), new double[] { -80.627296, 27.997976, -80.560208, 28.064522 }, "{{itemId}}", new ItemProperties("2023-12-15T00:00:00Z")
{
    Gsd = 0.6F,
}, new Dictionary<string, StacAsset>
{
    ["sample_external"] = new StacAsset("https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png")
    {
        Title = "Sample external image",
        Type = "image/png",
        Roles = { "tiles" },
    },
    ["sample_user"] = new StacAsset("https://sample.blob.core.windows.net/samples/4MB.jp2")
    {
        Title = "Sample storage account Image (4MB)",
        Type = "image/jp2",
        Roles = { "data" },
    }
})
{
    Collection = "{{collectionId}}",
    StacVersion = "1.0.0",
    Links = { },
    StacExtensions = { "https://stac-extensions.github.io/eo/v1.0.0/schema.json", "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
};
Operation operation = await client.CreateOrReplaceItemAsync(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", body);
]]></code></example>
    </member>
    <member name="CreateOrReplaceItem(WaitUntil,string,string,StacItemModel,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceItem.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

StacItemModel body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
{
    new IList<double>[]
    {
        new double[]{-80.560478, 27.997976},
        new double[]{-80.560208, 28.064325},
        new double[]{-80.627067, 28.064522},
        new double[]{-80.627296, 27.998174},
        new double[]{-80.560478, 27.997976}
    }
}), new double[] { -80.627296, 27.997976, -80.560208, 28.064522 }, "{{itemId}}", new ItemProperties("2023-12-15T00:00:00Z")
{
    Gsd = 0.6F,
}, new Dictionary<string, StacAsset>
{
    ["sample_external"] = new StacAsset("https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png")
    {
        Title = "Sample external image",
        Type = "image/png",
        Roles = { "tiles" },
    },
    ["sample_user"] = new StacAsset("https://sample.blob.core.windows.net/samples/4MB.jp2")
    {
        Title = "Sample storage account Image (4MB)",
        Type = "image/jp2",
        Roles = { "data" },
    }
})
{
    Collection = "{{collectionId}}",
    StacVersion = "1.0.0",
    Links = { },
    StacExtensions = { "https://stac-extensions.github.io/eo/v1.0.0/schema.json", "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
};
Operation operation = client.CreateOrReplaceItem(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", body);
]]></code></example>
    </member>
    <member name="CreateOrReplaceItemAsync(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceItemAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "{{itemId}}",
    bbox = new object[]
    {
        -80.627296,
        27.997976,
        -80.560208,
        28.064522
    },
    type = "Feature",
    links = Array.Empty<object>(),
    assets = new
    {
        sample_external = new
        {
            title = "Sample external image",
            href = "https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png",
            type = "image/png",
            roles = new object[]
            {
                "tiles"
            },
        },
        sample_user = new
        {
            href = "https://sample.blob.core.windows.net/samples/4MB.jp2",
            title = "Sample storage account Image (4MB)",
            type = "image/jp2",
            roles = new object[]
            {
                "data"
            },
        },
    },
    geometry = new
    {
        type = "Polygon",
        coordinates = new object[]
        {
            new object[]
            {
                new object[]
                {
                    -80.560478,
                    27.997976
                },
                new object[]
                {
                    -80.560208,
                    28.064325
                },
                new object[]
                {
                    -80.627067,
                    28.064522
                },
                new object[]
                {
                    -80.627296,
                    27.998174
                },
                new object[]
                {
                    -80.560478,
                    27.997976
                }
            }
        },
    },
    collection = "{{collectionId}}",
    properties = new
    {
        gsd = 0.6F,
        datetime = "2023-12-15T00:00:00Z",
    },
    stac_version = "1.0.0",
    stac_extensions = new object[]
    {
        "https://stac-extensions.github.io/eo/v1.0.0/schema.json",
        "https://stac-extensions.github.io/projection/v1.0.0/schema.json"
    },
});
Operation operation = await client.CreateOrReplaceItemAsync(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", content);
]]></code></example>
    </member>
    <member name="CreateOrReplaceItem(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceItem.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "{{itemId}}",
    bbox = new object[]
    {
        -80.627296,
        27.997976,
        -80.560208,
        28.064522
    },
    type = "Feature",
    links = Array.Empty<object>(),
    assets = new
    {
        sample_external = new
        {
            title = "Sample external image",
            href = "https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png",
            type = "image/png",
            roles = new object[]
            {
                "tiles"
            },
        },
        sample_user = new
        {
            href = "https://sample.blob.core.windows.net/samples/4MB.jp2",
            title = "Sample storage account Image (4MB)",
            type = "image/jp2",
            roles = new object[]
            {
                "data"
            },
        },
    },
    geometry = new
    {
        type = "Polygon",
        coordinates = new object[]
        {
            new object[]
            {
                new object[]
                {
                    -80.560478,
                    27.997976
                },
                new object[]
                {
                    -80.560208,
                    28.064325
                },
                new object[]
                {
                    -80.627067,
                    28.064522
                },
                new object[]
                {
                    -80.627296,
                    27.998174
                },
                new object[]
                {
                    -80.560478,
                    27.997976
                }
            }
        },
    },
    collection = "{{collectionId}}",
    properties = new
    {
        gsd = 0.6F,
        datetime = "2023-12-15T00:00:00Z",
    },
    stac_version = "1.0.0",
    stac_extensions = new object[]
    {
        "https://stac-extensions.github.io/eo/v1.0.0/schema.json",
        "https://stac-extensions.github.io/projection/v1.0.0/schema.json"
    },
});
Operation operation = client.CreateOrReplaceItem(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", content);
]]></code></example>
    </member>
    <member name="UpdateItemAsync(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateItemAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "{{itemId}}",
    collection = "{{collectionId}}",
    type = "Feature",
    assets = new
    {
        sample_user = new
        {
            href = "https://sample.blob.core.windows.net/samples/4MB.jp2",
            title = "Sample storage account Image (4MB)",
            type = "image/jp2",
            roles = new object[]
            {
                "data"
            },
        },
    },
    properties = new
    {
        datetime = "2021-12-15T00:00:00Z",
    },
});
Operation operation = await client.UpdateItemAsync(WaitUntil.Completed, "{{collectionId}}", "{{itemId}}", content);
]]></code></example>
    </member>
    <member name="UpdateItem(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateItem.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "{{itemId}}",
    collection = "{{collectionId}}",
    type = "Feature",
    assets = new
    {
        sample_user = new
        {
            href = "https://sample.blob.core.windows.net/samples/4MB.jp2",
            title = "Sample storage account Image (4MB)",
            type = "image/jp2",
            roles = new object[]
            {
                "data"
            },
        },
    },
    properties = new
    {
        datetime = "2021-12-15T00:00:00Z",
    },
});
Operation operation = client.UpdateItem(WaitUntil.Completed, "{{collectionId}}", "{{itemId}}", content);
]]></code></example>
    </member>
    <member name="DeleteItemAsync(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteItemAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Operation operation = await client.DeleteItemAsync(WaitUntil.Completed, "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622");
]]></code></example>
    </member>
    <member name="DeleteItem(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteItem.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
StacApiClient client = new StacApiClient(endpoint, credential);

Operation operation = client.DeleteItem(WaitUntil.Completed, "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622");
]]></code></example>
    </member>
  </members>
</doc>