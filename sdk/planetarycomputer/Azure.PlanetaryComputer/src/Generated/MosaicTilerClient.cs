// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PlanetaryComputer;

namespace Customizations
{
    /// <summary> The MosaicTilerClient. </summary>
    public partial class MosaicTilerClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://geocatalog.spatio.azure.com/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of MosaicTilerClient for mocking. </summary>
        protected MosaicTilerClient()
        {
        }

        /// <summary> Initializes a new instance of MosaicTilerClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public MosaicTilerClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new MosaicTilerClientOptions())
        {
        }

        /// <summary> Initializes a new instance of MosaicTilerClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public MosaicTilerClient(Uri endpoint, TokenCredential credential, MosaicTilerClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new MosaicTilerClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Create map tile.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTile(string searchId, float z, float x, float y, float scale, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string algorithm, string algorithmParams, string tileMatrixSetId, string buffer, string colorFormula, string collection, string resampling, string pixelSelection, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetTileRequest(searchId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm, algorithmParams, tileMatrixSetId, buffer, colorFormula, collection, resampling, pixelSelection, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create map tile.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileAsync(string searchId, float z, float x, float y, float scale, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string algorithm, string algorithmParams, string tileMatrixSetId, string buffer, string colorFormula, string collection, string resampling, string pixelSelection, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetTileRequest(searchId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm, algorithmParams, tileMatrixSetId, buffer, colorFormula, collection, resampling, pixelSelection, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create map tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetTile(string searchId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, TileMatrixSetId? tileMatrixSetId = default, string buffer = default, string colorFormula = default, string collection = default, ResamplingMethod? resampling = default, PixelSelection? pixelSelection = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = GetTile(searchId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm?.ToString(), algorithmParams, tileMatrixSetId?.ToString(), buffer, colorFormula, collection, resampling?.ToString(), pixelSelection?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create map tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetTileAsync(string searchId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, TileMatrixSetId? tileMatrixSetId = default, string buffer = default, string colorFormula = default, string collection = default, ResamplingMethod? resampling = default, PixelSelection? pixelSelection = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = await GetTileAsync(searchId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm?.ToString(), algorithmParams, tileMatrixSetId?.ToString(), buffer, colorFormula, collection, resampling?.ToString(), pixelSelection?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Create map tile.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTileWithMatrixSet(string searchId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string algorithm, string algorithmParams, string buffer, string colorFormula, string collection, string resampling, string pixelSelection, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetTileWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetTileWithMatrixSetRequest(searchId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm, algorithmParams, buffer, colorFormula, collection, resampling, pixelSelection, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create map tile.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileWithMatrixSetAsync(string searchId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string algorithm, string algorithmParams, string buffer, string colorFormula, string collection, string resampling, string pixelSelection, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetTileWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetTileWithMatrixSetRequest(searchId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm, algorithmParams, buffer, colorFormula, collection, resampling, pixelSelection, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create map tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetTileWithMatrixSet(string searchId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string buffer = default, string colorFormula = default, string collection = default, ResamplingMethod? resampling = default, PixelSelection? pixelSelection = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = GetTileWithMatrixSet(searchId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm?.ToString(), algorithmParams, buffer, colorFormula, collection, resampling?.ToString(), pixelSelection?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create map tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetTileWithMatrixSetAsync(string searchId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string buffer = default, string colorFormula = default, string collection = default, ResamplingMethod? resampling = default, PixelSelection? pixelSelection = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = await GetTileWithMatrixSetAsync(searchId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm?.ToString(), algorithmParams, buffer, colorFormula, collection, resampling?.ToString(), pixelSelection?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Return TileJSON document for a searchId.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported (default: 'WebMercatorQuad'). </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTileJson(string searchId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string tileMatrixSetId, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, double? buffer, string colorFormula, string collection, string resampling, string pixelSelection, string algorithm, string algorithmParams, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetTileJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetTileJsonRequest(searchId, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, tileMatrixSetId, tileFormat, tileScale, minzoom, maxzoom, buffer, colorFormula, collection, resampling, pixelSelection, algorithm, algorithmParams, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return TileJSON document for a searchId.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported (default: 'WebMercatorQuad'). </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileJsonAsync(string searchId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string tileMatrixSetId, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, double? buffer, string colorFormula, string collection, string resampling, string pixelSelection, string algorithm, string algorithmParams, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetTileJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetTileJsonRequest(searchId, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, tileMatrixSetId, tileFormat, tileScale, minzoom, maxzoom, buffer, colorFormula, collection, resampling, pixelSelection, algorithm, algorithmParams, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return TileJSON document for a searchId. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported (default: 'WebMercatorQuad'). </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TileJsonResult> GetTileJson(string searchId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, TileMatrixSetId? tileMatrixSetId = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, double? buffer = default, string colorFormula = default, string collection = default, ResamplingMethod? resampling = default, PixelSelection? pixelSelection = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = GetTileJson(searchId, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, tileMatrixSetId?.ToString(), tileFormat?.ToString(), tileScale, minzoom, maxzoom, buffer, colorFormula, collection, resampling?.ToString(), pixelSelection?.ToString(), algorithm?.ToString(), algorithmParams, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TileJsonResult)result, result);
        }

        /// <summary> Return TileJSON document for a searchId. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported (default: 'WebMercatorQuad'). </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TileJsonResult>> GetTileJsonAsync(string searchId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, TileMatrixSetId? tileMatrixSetId = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, double? buffer = default, string colorFormula = default, string collection = default, ResamplingMethod? resampling = default, PixelSelection? pixelSelection = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = await GetTileJsonAsync(searchId, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, tileMatrixSetId?.ToString(), tileFormat?.ToString(), tileScale, minzoom, maxzoom, buffer, colorFormula, collection, resampling?.ToString(), pixelSelection?.ToString(), algorithm?.ToString(), algorithmParams, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TileJsonResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return TileJSON document for a searchId.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTileJsonWithMatrixSet(string searchId, string tileMatrixSetId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string algorithm, string algorithmParams, int? minzoom, int? maxzoom, string tileFormat, int? tileScale, string buffer, string colorFormula, string collection, string resampling, string pixelSelection, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetTileJsonWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetTileJsonWithMatrixSetRequest(searchId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm, algorithmParams, minzoom, maxzoom, tileFormat, tileScale, buffer, colorFormula, collection, resampling, pixelSelection, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return TileJSON document for a searchId.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileJsonWithMatrixSetAsync(string searchId, string tileMatrixSetId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string algorithm, string algorithmParams, int? minzoom, int? maxzoom, string tileFormat, int? tileScale, string buffer, string colorFormula, string collection, string resampling, string pixelSelection, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetTileJsonWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetTileJsonWithMatrixSetRequest(searchId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm, algorithmParams, minzoom, maxzoom, tileFormat, tileScale, buffer, colorFormula, collection, resampling, pixelSelection, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return TileJSON document for a searchId. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TileJsonResult> GetTileJsonWithMatrixSet(string searchId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, int? minzoom = default, int? maxzoom = default, ImageType? tileFormat = default, int? tileScale = default, string buffer = default, string colorFormula = default, string collection = default, ResamplingMethod? resampling = default, PixelSelection? pixelSelection = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = GetTileJsonWithMatrixSet(searchId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm?.ToString(), algorithmParams, minzoom, maxzoom, tileFormat?.ToString(), tileScale, buffer, colorFormula, collection, resampling?.ToString(), pixelSelection?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TileJsonResult)result, result);
        }

        /// <summary> Return TileJSON document for a searchId. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TileJsonResult>> GetTileJsonWithMatrixSetAsync(string searchId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, int? minzoom = default, int? maxzoom = default, ImageType? tileFormat = default, int? tileScale = default, string buffer = default, string colorFormula = default, string collection = default, ResamplingMethod? resampling = default, PixelSelection? pixelSelection = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = await GetTileJsonWithMatrixSetAsync(searchId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, algorithm?.ToString(), algorithmParams, minzoom, maxzoom, tileFormat?.ToString(), tileScale, buffer, colorFormula, collection, resampling?.ToString(), pixelSelection?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TileJsonResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetWmtsCapabilities(string searchId, string tileMatrixSetId, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetWmtsCapabilities");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetWmtsCapabilitiesRequest(searchId, tileMatrixSetId, tileFormat, tileScale, minzoom, maxzoom, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetWmtsCapabilitiesAsync(string searchId, string tileMatrixSetId, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetWmtsCapabilities");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetWmtsCapabilitiesRequest(searchId, tileMatrixSetId, tileFormat, tileScale, minzoom, maxzoom, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<string> GetWmtsCapabilities(string searchId, TileMatrixSetId? tileMatrixSetId = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = GetWmtsCapabilities(searchId, tileMatrixSetId?.ToString(), tileFormat?.ToString(), tileScale, minzoom, maxzoom, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content.ToObjectFromJson<string>(), result);
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<string>> GetWmtsCapabilitiesAsync(string searchId, TileMatrixSetId? tileMatrixSetId = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = await GetWmtsCapabilitiesAsync(searchId, tileMatrixSetId?.ToString(), tileFormat?.ToString(), tileScale, minzoom, maxzoom, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content.ToObjectFromJson<string>(), result);
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetWmtsCapabilitiesWithMatrixSet(string searchId, string tileMatrixSetId, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetWmtsCapabilitiesWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetWmtsCapabilitiesWithMatrixSetRequest(searchId, tileMatrixSetId, tileFormat, tileScale, minzoom, maxzoom, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetWmtsCapabilitiesWithMatrixSetAsync(string searchId, string tileMatrixSetId, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetWmtsCapabilitiesWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetWmtsCapabilitiesWithMatrixSetRequest(searchId, tileMatrixSetId, tileFormat, tileScale, minzoom, maxzoom, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<string> GetWmtsCapabilitiesWithMatrixSet(string searchId, string tileMatrixSetId, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = GetWmtsCapabilitiesWithMatrixSet(searchId, tileMatrixSetId, tileFormat?.ToString(), tileScale, minzoom, maxzoom, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content.ToObjectFromJson<string>(), result);
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<string>> GetWmtsCapabilitiesWithMatrixSetAsync(string searchId, string tileMatrixSetId, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = await GetWmtsCapabilitiesWithMatrixSetAsync(searchId, tileMatrixSetId, tileFormat?.ToString(), tileScale, minzoom, maxzoom, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content.ToObjectFromJson<string>(), result);
        }

        /// <summary>
        /// [Protocol Method] Register a Search query
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response RegisterSearch(RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.RegisterSearch");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateRegisterSearchRequest(content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Register a Search query
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> RegisterSearchAsync(RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.RegisterSearch");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateRegisterSearchRequest(content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Register a Search query. </summary>
        /// <param name="collections"> List of STAC collection IDs to include in the mosaic. </param>
        /// <param name="ids"> List of specific STAC item IDs to include in the mosaic. </param>
        /// <param name="bbox"> Geographic bounding box to filter items [west, south, east, north]. </param>
        /// <param name="intersects"> GeoJSON geometry to spatially filter items by intersection. </param>
        /// <param name="query"> Query. </param>
        /// <param name="filter"> Filter. </param>
        /// <param name="datetime"> Temporal filter in RFC 3339 format or interval. </param>
        /// <param name="sortBy"> Criteria for ordering items in the mosaic. </param>
        /// <param name="filterLang"> Query language format used in the filter parameter. </param>
        /// <param name="metadata"> Additional metadata to associate with the mosaic. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<RegisterResult> RegisterSearch(IEnumerable<string> collections = default, IEnumerable<string> ids = default, double? bbox = default, GeoJsonGeometry intersects = default, StacQuery query = default, string filter = default, string datetime = default, IEnumerable<SortExtension> sortBy = default, FilterLang? filterLang = default, MosaicMetadata metadata = default, CancellationToken cancellationToken = default)
        {
            RegisterSearchRequest spreadModel = new RegisterSearchRequest(
                collections?.ToList() as IList<string> ?? new ChangeTrackingList<string>(),
                ids?.ToList() as IList<string> ?? new ChangeTrackingList<string>(),
                bbox,
                intersects,
                query,
                filter,
                datetime,
                sortBy?.ToList() as IList<SortExtension> ?? new ChangeTrackingList<SortExtension>(),
                filterLang,
                metadata,
                null);
            Response result = RegisterSearch(spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((RegisterResult)result, result);
        }

        /// <summary> Register a Search query. </summary>
        /// <param name="collections"> List of STAC collection IDs to include in the mosaic. </param>
        /// <param name="ids"> List of specific STAC item IDs to include in the mosaic. </param>
        /// <param name="bbox"> Geographic bounding box to filter items [west, south, east, north]. </param>
        /// <param name="intersects"> GeoJSON geometry to spatially filter items by intersection. </param>
        /// <param name="query"> Query. </param>
        /// <param name="filter"> Filter. </param>
        /// <param name="datetime"> Temporal filter in RFC 3339 format or interval. </param>
        /// <param name="sortBy"> Criteria for ordering items in the mosaic. </param>
        /// <param name="filterLang"> Query language format used in the filter parameter. </param>
        /// <param name="metadata"> Additional metadata to associate with the mosaic. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<RegisterResult>> RegisterSearchAsync(IEnumerable<string> collections = default, IEnumerable<string> ids = default, double? bbox = default, GeoJsonGeometry intersects = default, StacQuery query = default, string filter = default, string datetime = default, IEnumerable<SortExtension> sortBy = default, FilterLang? filterLang = default, MosaicMetadata metadata = default, CancellationToken cancellationToken = default)
        {
            RegisterSearchRequest spreadModel = new RegisterSearchRequest(
                collections?.ToList() as IList<string> ?? new ChangeTrackingList<string>(),
                ids?.ToList() as IList<string> ?? new ChangeTrackingList<string>(),
                bbox,
                intersects,
                query,
                filter,
                datetime,
                sortBy?.ToList() as IList<SortExtension> ?? new ChangeTrackingList<SortExtension>(),
                filterLang,
                metadata,
                null);
            Response result = await RegisterSearchAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((RegisterResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Get Search query metadata.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetSearchInfo(string searchId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetSearchInfo");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetSearchInfoRequest(searchId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Search query metadata.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetSearchInfoAsync(string searchId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetSearchInfo");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetSearchInfoRequest(searchId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Search query metadata. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TitilerPgstacModelInfo> GetSearchInfo(string searchId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = GetSearchInfo(searchId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TitilerPgstacModelInfo)result, result);
        }

        /// <summary> Get Search query metadata. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TitilerPgstacModelInfo>> GetSearchInfoAsync(string searchId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = await GetSearchInfoAsync(searchId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TitilerPgstacModelInfo)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return a list of assets which overlap a given tile
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetAssetsForTile(string searchId, float z, float x, float y, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string tileMatrixSetId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetAssetsForTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetAssetsForTileRequest(searchId, z, x, y, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, tileMatrixSetId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return a list of assets which overlap a given tile
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAssetsForTileAsync(string searchId, float z, float x, float y, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string tileMatrixSetId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetAssetsForTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetAssetsForTileRequest(searchId, z, x, y, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, tileMatrixSetId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return a list of assets which overlap a given tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IReadOnlyList<BinaryData>> GetAssetsForTile(string searchId, float z, float x, float y, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, TileMatrixSetId? tileMatrixSetId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = GetAssetsForTile(searchId, z, x, y, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, tileMatrixSetId?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            IList<BinaryData> value = new List<BinaryData>();
            using JsonDocument document = JsonDocument.Parse(result.ContentStream);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                if (item.ValueKind == JsonValueKind.Null)
                {
                    value.Add(null);
                }
                else
                {
                    value.Add(BinaryData.FromString(item.GetRawText()));
                }
            }
            return Response.FromValue((IReadOnlyList<BinaryData>)value, result);
        }

        /// <summary> Return a list of assets which overlap a given tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IReadOnlyList<BinaryData>>> GetAssetsForTileAsync(string searchId, float z, float x, float y, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, TileMatrixSetId? tileMatrixSetId = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = await GetAssetsForTileAsync(searchId, z, x, y, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, tileMatrixSetId?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            IList<BinaryData> value = new List<BinaryData>();
            using JsonDocument document = await JsonDocument.ParseAsync(result.ContentStream, default, default).ConfigureAwait(false);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                if (item.ValueKind == JsonValueKind.Null)
                {
                    value.Add(null);
                }
                else
                {
                    value.Add(BinaryData.FromString(item.GetRawText()));
                }
            }
            return Response.FromValue((IReadOnlyList<BinaryData>)value, result);
        }

        /// <summary>
        /// [Protocol Method] Return a list of assets which overlap a given tile
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetAssetsForTileWithMatrixSet(string searchId, string tileMatrixSetId, float z, float x, float y, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetAssetsForTileWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetAssetsForTileWithMatrixSetRequest(searchId, tileMatrixSetId, z, x, y, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return a list of assets which overlap a given tile
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAssetsForTileWithMatrixSetAsync(string searchId, string tileMatrixSetId, float z, float x, float y, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetAssetsForTileWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetAssetsForTileWithMatrixSetRequest(searchId, tileMatrixSetId, z, x, y, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return a list of assets which overlap a given tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IReadOnlyList<BinaryData>> GetAssetsForTileWithMatrixSet(string searchId, string tileMatrixSetId, float z, float x, float y, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = GetAssetsForTileWithMatrixSet(searchId, tileMatrixSetId, z, x, y, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            IList<BinaryData> value = new List<BinaryData>();
            using JsonDocument document = JsonDocument.Parse(result.ContentStream);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                if (item.ValueKind == JsonValueKind.Null)
                {
                    value.Add(null);
                }
                else
                {
                    value.Add(BinaryData.FromString(item.GetRawText()));
                }
            }
            return Response.FromValue((IReadOnlyList<BinaryData>)value, result);
        }

        /// <summary> Return a list of assets which overlap a given tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IReadOnlyList<BinaryData>>> GetAssetsForTileWithMatrixSetAsync(string searchId, string tileMatrixSetId, float z, float x, float y, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = await GetAssetsForTileWithMatrixSetAsync(searchId, tileMatrixSetId, z, x, y, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            IList<BinaryData> value = new List<BinaryData>();
            using JsonDocument document = await JsonDocument.ParseAsync(result.ContentStream, default, default).ConfigureAwait(false);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                if (item.ValueKind == JsonValueKind.Null)
                {
                    value.Add(null);
                }
                else
                {
                    value.Add(BinaryData.FromString(item.GetRawText()));
                }
            }
            return Response.FromValue((IReadOnlyList<BinaryData>)value, result);
        }

        /// <summary>
        /// [Protocol Method] Return a list of assets for a given point.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="lon"> Longitude. </param>
        /// <param name="lat"> Latitude. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetAssetsForPoint(string searchId, float lon, float lat, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string coordCrs, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetAssetsForPoint");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetAssetsForPointRequest(searchId, lon, lat, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, coordCrs, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return a list of assets for a given point.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="lon"> Longitude. </param>
        /// <param name="lat"> Latitude. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAssetsForPointAsync(string searchId, float lon, float lat, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitwhenfull, bool? skipcovered, string coordCrs, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MosaicTilerClient.GetAssetsForPoint");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetAssetsForPointRequest(searchId, lon, lat, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, coordCrs, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return a list of assets for a given point. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="lon"> Longitude. </param>
        /// <param name="lat"> Latitude. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IReadOnlyList<BinaryData>> GetAssetsForPoint(string searchId, float lon, float lat, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, string coordCrs = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = GetAssetsForPoint(searchId, lon, lat, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, coordCrs, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            IList<BinaryData> value = new List<BinaryData>();
            using JsonDocument document = JsonDocument.Parse(result.ContentStream);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                if (item.ValueKind == JsonValueKind.Null)
                {
                    value.Add(null);
                }
                else
                {
                    value.Add(BinaryData.FromString(item.GetRawText()));
                }
            }
            return Response.FromValue((IReadOnlyList<BinaryData>)value, result);
        }

        /// <summary> Return a list of assets for a given point. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="lon"> Longitude. </param>
        /// <param name="lat"> Latitude. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitwhenfull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipcovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IReadOnlyList<BinaryData>>> GetAssetsForPointAsync(string searchId, float lon, float lat, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitwhenfull = default, bool? skipcovered = default, string coordCrs = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = await GetAssetsForPointAsync(searchId, lon, lat, scanLimit, itemsLimit, timeLimit, exitwhenfull, skipcovered, coordCrs, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            IList<BinaryData> value = new List<BinaryData>();
            using JsonDocument document = await JsonDocument.ParseAsync(result.ContentStream, default, default).ConfigureAwait(false);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                if (item.ValueKind == JsonValueKind.Null)
                {
                    value.Add(null);
                }
                else
                {
                    value.Add(BinaryData.FromString(item.GetRawText()));
                }
            }
            return Response.FromValue((IReadOnlyList<BinaryData>)value, result);
        }
    }
}
