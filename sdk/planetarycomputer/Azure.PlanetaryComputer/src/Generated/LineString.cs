// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.PlanetaryComputer
{
    /// <summary> Represents a LineString. </summary>
    public partial class LineString : GeoJsonGeometry
    {
        /// <summary> Initializes a new instance of <see cref="LineString"/>. </summary>
        /// <param name="coordinates"> The coordinates of the linestring. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="coordinates"/> is null. </exception>
        public LineString(IEnumerable<double> coordinates)
        {
            Argument.AssertNotNull(coordinates, nameof(coordinates));

            Type = GeometryType.LineString;
            Coordinates = coordinates.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="LineString"/>. </summary>
        /// <param name="type"> The type of the geometry. </param>
        /// <param name="bbox"> Optional bounding box of the geometry. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="coordinates"> The coordinates of the linestring. </param>
        internal LineString(GeometryType type, IList<double> bbox, IDictionary<string, BinaryData> serializedAdditionalRawData, IList<double> coordinates) : base(type, bbox, serializedAdditionalRawData)
        {
            Coordinates = coordinates;
        }

        /// <summary> Initializes a new instance of <see cref="LineString"/> for deserialization. </summary>
        internal LineString()
        {
        }

        /// <summary> The coordinates of the linestring. </summary>
        public IList<double> Coordinates { get; }
    }
}
