// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.PlanetaryComputer
{
    /// <summary> Ingestion status. </summary>
    public readonly partial struct IngestionStatus : IEquatable<IngestionStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IngestionStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IngestionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReadyValue = "Ready";
        private const string DeletingValue = "Deleting";

        /// <summary> Ingestion accepted and ready to be run. </summary>
        public static IngestionStatus Ready { get; } = new IngestionStatus(ReadyValue);
        /// <summary> Ingestion is being deleting in the background. </summary>
        public static IngestionStatus Deleting { get; } = new IngestionStatus(DeletingValue);
        /// <summary> Determines if two <see cref="IngestionStatus"/> values are the same. </summary>
        public static bool operator ==(IngestionStatus left, IngestionStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IngestionStatus"/> values are not the same. </summary>
        public static bool operator !=(IngestionStatus left, IngestionStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="IngestionStatus"/>. </summary>
        public static implicit operator IngestionStatus(string value) => new IngestionStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IngestionStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IngestionStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
