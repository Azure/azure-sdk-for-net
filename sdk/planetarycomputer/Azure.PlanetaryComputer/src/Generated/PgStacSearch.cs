// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Microsoft.PlanetaryComputer
{
    /// <summary>
    /// PgSTAC Search entry.
    /// 
    /// ref:
    /// https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915Stored search query in the PgSTAC database
    /// </summary>
    public partial class PgStacSearch
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="PgStacSearch"/>. </summary>
        /// <param name="hash"> Unique hash identifier for the search query. </param>
        /// <param name="search"> Search. </param>
        /// <param name="where"> SQL WHERE clause representing the search filters. </param>
        /// <param name="orderby"> SQL ORDER BY clause for sorting results. </param>
        /// <param name="lastused"> Timestamp when the search was last accessed. </param>
        /// <param name="usecount"> Number of times the search has been accessed. </param>
        /// <param name="metadata"> Additional metadata associated with the search. </param>
        internal PgStacSearch(string hash, CqlFilter search, string @where, string @orderby, DateTimeOffset lastused, int usecount, MosaicMetadata metadata)
        {
            Hash = hash;
            Search = search;
            Where = @where;
            Orderby = @orderby;
            Lastused = lastused;
            Usecount = usecount;
            Metadata = metadata;
        }

        /// <summary> Initializes a new instance of <see cref="PgStacSearch"/>. </summary>
        /// <param name="hash"> Unique hash identifier for the search query. </param>
        /// <param name="search"> Search. </param>
        /// <param name="where"> SQL WHERE clause representing the search filters. </param>
        /// <param name="orderby"> SQL ORDER BY clause for sorting results. </param>
        /// <param name="lastused"> Timestamp when the search was last accessed. </param>
        /// <param name="usecount"> Number of times the search has been accessed. </param>
        /// <param name="metadata"> Additional metadata associated with the search. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal PgStacSearch(string hash, CqlFilter search, string @where, string @orderby, DateTimeOffset lastused, int usecount, MosaicMetadata metadata, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Hash = hash;
            Search = search;
            Where = @where;
            Orderby = @orderby;
            Lastused = lastused;
            Usecount = usecount;
            Metadata = metadata;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Unique hash identifier for the search query. </summary>
        public string Hash { get; }

        /// <summary> Search. </summary>
        public CqlFilter Search { get; }

        /// <summary> SQL WHERE clause representing the search filters. </summary>
        public string Where { get; }

        /// <summary> SQL ORDER BY clause for sorting results. </summary>
        public string Orderby { get; }

        /// <summary> Timestamp when the search was last accessed. </summary>
        public DateTimeOffset Lastused { get; }

        /// <summary> Number of times the search has been accessed. </summary>
        public int Usecount { get; }

        /// <summary> Additional metadata associated with the search. </summary>
        public MosaicMetadata Metadata { get; }
    }
}
