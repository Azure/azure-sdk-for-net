// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.PlanetaryComputer
{
    /// <summary>
    /// PgSTAC Search entry.
    ///
    /// ref:
    /// https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915Stored search query in the PgSTAC database
    /// </summary>
    public partial class PgStacSearch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PgStacSearch"/>. </summary>
        /// <param name="hash"> Unique hash identifier for the search query. </param>
        /// <param name="search"> Search. </param>
        /// <param name="where"> SQL WHERE clause representing the search filters. </param>
        /// <param name="orderby"> SQL ORDER BY clause for sorting results. </param>
        /// <param name="lastused"> Timestamp when the search was last accessed. </param>
        /// <param name="usecount"> Number of times the search has been accessed. </param>
        /// <param name="metadata"> Additional metadata associated with the search. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hash"/>, <paramref name="search"/>, <paramref name="where"/>, <paramref name="orderby"/> or <paramref name="metadata"/> is null. </exception>
        internal PgStacSearch(string hash, CqlFilter search, string @where, string orderby, DateTimeOffset lastused, int usecount, MosaicMetadata metadata)
        {
            Argument.AssertNotNull(hash, nameof(hash));
            Argument.AssertNotNull(search, nameof(search));
            Argument.AssertNotNull(@where, nameof(@where));
            Argument.AssertNotNull(orderby, nameof(orderby));
            Argument.AssertNotNull(metadata, nameof(metadata));

            Hash = hash;
            Search = search;
            Where = @where;
            Orderby = orderby;
            Lastused = lastused;
            Usecount = usecount;
            Metadata = metadata;
        }

        /// <summary> Initializes a new instance of <see cref="PgStacSearch"/>. </summary>
        /// <param name="hash"> Unique hash identifier for the search query. </param>
        /// <param name="search"> Search. </param>
        /// <param name="where"> SQL WHERE clause representing the search filters. </param>
        /// <param name="orderby"> SQL ORDER BY clause for sorting results. </param>
        /// <param name="lastused"> Timestamp when the search was last accessed. </param>
        /// <param name="usecount"> Number of times the search has been accessed. </param>
        /// <param name="metadata"> Additional metadata associated with the search. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PgStacSearch(string hash, CqlFilter search, string @where, string orderby, DateTimeOffset lastused, int usecount, MosaicMetadata metadata, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Hash = hash;
            Search = search;
            Where = @where;
            Orderby = orderby;
            Lastused = lastused;
            Usecount = usecount;
            Metadata = metadata;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PgStacSearch"/> for deserialization. </summary>
        internal PgStacSearch()
        {
        }

        /// <summary> Unique hash identifier for the search query. </summary>
        public string Hash { get; }
        /// <summary> Search. </summary>
        public CqlFilter Search { get; }
        /// <summary> SQL WHERE clause representing the search filters. </summary>
        public string Where { get; }
        /// <summary> SQL ORDER BY clause for sorting results. </summary>
        public string Orderby { get; }
        /// <summary> Timestamp when the search was last accessed. </summary>
        public DateTimeOffset Lastused { get; }
        /// <summary> Number of times the search has been accessed. </summary>
        public int Usecount { get; }
        /// <summary> Additional metadata associated with the search. </summary>
        public MosaicMetadata Metadata { get; }
    }
}
