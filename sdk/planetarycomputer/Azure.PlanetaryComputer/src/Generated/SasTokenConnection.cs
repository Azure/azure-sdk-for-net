// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.PlanetaryComputer
{
    /// <summary> SAS Token connection information. </summary>
    public partial class SasTokenConnection
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SasTokenConnection"/>. </summary>
        /// <param name="containerUrl"> Azure Blob Storage container URL. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="containerUrl"/> is null. </exception>
        public SasTokenConnection(Uri containerUrl)
        {
            Argument.AssertNotNull(containerUrl, nameof(containerUrl));

            ContainerUrl = containerUrl;
        }

        /// <summary> Initializes a new instance of <see cref="SasTokenConnection"/>. </summary>
        /// <param name="containerUrl"> Azure Blob Storage container URL. </param>
        /// <param name="sasToken"> SAS token. </param>
        /// <param name="expiration"> Azure Blob Storage SAS token expiration in UTC format. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SasTokenConnection(Uri containerUrl, string sasToken, DateTimeOffset? expiration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ContainerUrl = containerUrl;
            SasToken = sasToken;
            Expiration = expiration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SasTokenConnection"/> for deserialization. </summary>
        internal SasTokenConnection()
        {
        }

        /// <summary> Azure Blob Storage container URL. </summary>
        public Uri ContainerUrl { get; set; }
        /// <summary> SAS token. </summary>
        public string SasToken { get; set; }
        /// <summary> Azure Blob Storage SAS token expiration in UTC format. </summary>
        public DateTimeOffset? Expiration { get; }
    }
}
