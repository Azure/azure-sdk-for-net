// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PlanetaryComputer;

namespace Customizations
{
    /// <summary> The SharedAccessSignatureClient. </summary>
    public partial class SharedAccessSignatureClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://geocatalog.spatio.azure.com/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of SharedAccessSignatureClient for mocking. </summary>
        protected SharedAccessSignatureClient()
        {
        }

        /// <summary> Initializes a new instance of SharedAccessSignatureClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public SharedAccessSignatureClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new SharedAccessSignatureClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SharedAccessSignatureClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public SharedAccessSignatureClient(Uri endpoint, TokenCredential credential, SharedAccessSignatureClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new SharedAccessSignatureClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Generate a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for the given storage account and container. The storage account and container
        /// must be associated with a Planetary Computer dataset indexed by the STAC API.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> The name of the Collection that the SAS token will be issued for. </param>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetToken(string collectionId, long? duration, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.GetToken");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

                using HttpMessage message = CreateGetTokenRequest(collectionId, duration, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Generate a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for the given storage account and container. The storage account and container
        /// must be associated with a Planetary Computer dataset indexed by the STAC API.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> The name of the Collection that the SAS token will be issued for. </param>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTokenAsync(string collectionId, long? duration, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.GetToken");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

                using HttpMessage message = CreateGetTokenRequest(collectionId, duration, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generate a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for the given storage account and container. The storage account and container
        /// must be associated with a Planetary Computer dataset indexed by the STAC API.
        /// </summary>
        /// <param name="collectionId"> The name of the Collection that the SAS token will be issued for. </param>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<SasToken> GetToken(string collectionId, long? duration = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

            Response result = GetToken(collectionId, duration, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((SasToken)result, result);
        }

        /// <summary>
        /// Generate a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for the given storage account and container. The storage account and container
        /// must be associated with a Planetary Computer dataset indexed by the STAC API.
        /// </summary>
        /// <param name="collectionId"> The name of the Collection that the SAS token will be issued for. </param>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<SasToken>> GetTokenAsync(string collectionId, long? duration = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

            Response result = await GetTokenAsync(collectionId, duration, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((SasToken)result, result);
        }

        /// <summary>
        /// [Protocol Method] Revoke a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for managed storage account of this GeoCatalog.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response RevokeToken(long? duration, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.RevokeToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRevokeTokenRequest(duration, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Revoke a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for managed storage account of this GeoCatalog.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> RevokeTokenAsync(long? duration, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.RevokeToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRevokeTokenRequest(duration, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Revoke a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for managed storage account of this GeoCatalog.
        /// </summary>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response RevokeToken(long? duration = default, CancellationToken cancellationToken = default)
        {
            return RevokeToken(duration, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// Revoke a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for managed storage account of this GeoCatalog.
        /// </summary>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> RevokeTokenAsync(long? duration = default, CancellationToken cancellationToken = default)
        {
            return await RevokeTokenAsync(duration, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Signs a HREF (a link URL) by appending a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
        /// If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="href"> HREF (URL) to sign. </param>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="href"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="href"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetSign(string href, long? duration, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.GetSign");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(href, nameof(href));

                using HttpMessage message = CreateGetSignRequest(href, duration, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Signs a HREF (a link URL) by appending a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
        /// If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="href"> HREF (URL) to sign. </param>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="href"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="href"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetSignAsync(string href, long? duration, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.GetSign");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(href, nameof(href));

                using HttpMessage message = CreateGetSignRequest(href, duration, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Signs a HREF (a link URL) by appending a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
        /// If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
        /// </summary>
        /// <param name="href"> HREF (URL) to sign. </param>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="href"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="href"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<UnsignedLink> GetSign(string href, long? duration = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(href, nameof(href));

            Response result = GetSign(href, duration, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((UnsignedLink)result, result);
        }

        /// <summary>
        /// Signs a HREF (a link URL) by appending a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
        /// If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
        /// </summary>
        /// <param name="href"> HREF (URL) to sign. </param>
        /// <param name="duration"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="href"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="href"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<UnsignedLink>> GetSignAsync(string href, long? duration = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(href, nameof(href));

            Response result = await GetSignAsync(href, duration, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((UnsignedLink)result, result);
        }
    }
}
