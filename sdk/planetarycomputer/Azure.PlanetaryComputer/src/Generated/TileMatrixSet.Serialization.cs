// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.PlanetaryComputer
{
    public partial class TileMatrixSet : IUtf8JsonSerializable, IJsonModel<TileMatrixSet>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TileMatrixSet>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TileMatrixSet>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TileMatrixSet>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TileMatrixSet)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Keywords))
            {
                writer.WritePropertyName("keywords"u8);
                writer.WriteStartArray();
                foreach (var item in Keywords)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(Uri))
            {
                writer.WritePropertyName("uri"u8);
                writer.WriteStringValue(Uri);
            }
            if (Optional.IsCollectionDefined(OrderedAxes))
            {
                writer.WritePropertyName("orderedAxes"u8);
                writer.WriteStartArray();
                foreach (var item in OrderedAxes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("crs"u8);
            writer.WriteStringValue(Crs);
            if (Optional.IsDefined(WellKnownScaleSet))
            {
                writer.WritePropertyName("wellKnownScaleSet"u8);
                writer.WriteStringValue(WellKnownScaleSet.AbsoluteUri);
            }
            if (Optional.IsDefined(BoundingBox))
            {
                writer.WritePropertyName("boundingBox"u8);
                writer.WriteObjectValue(BoundingBox, options);
            }
            writer.WritePropertyName("tileMatrices"u8);
            writer.WriteStartArray();
            foreach (var item in TileMatrices)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        TileMatrixSet IJsonModel<TileMatrixSet>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TileMatrixSet>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TileMatrixSet)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTileMatrixSet(document.RootElement, options);
        }

        internal static TileMatrixSet DeserializeTileMatrixSet(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string title = default;
            string description = default;
            IReadOnlyList<string> keywords = default;
            string id = default;
            string uri = default;
            IReadOnlyList<string> orderedAxes = default;
            string crs = default;
            Uri wellKnownScaleSet = default;
            TileMatrixSetBoundingBox boundingBox = default;
            IReadOnlyList<TileMatrix> tileMatrices = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keywords"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    keywords = array;
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("uri"u8))
                {
                    uri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("orderedAxes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    orderedAxes = array;
                    continue;
                }
                if (property.NameEquals("crs"u8))
                {
                    crs = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("wellKnownScaleSet"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    wellKnownScaleSet = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("boundingBox"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    boundingBox = TileMatrixSetBoundingBox.DeserializeTileMatrixSetBoundingBox(property.Value, options);
                    continue;
                }
                if (property.NameEquals("tileMatrices"u8))
                {
                    List<TileMatrix> array = new List<TileMatrix>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TileMatrix.DeserializeTileMatrix(item, options));
                    }
                    tileMatrices = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TileMatrixSet(
                title,
                description,
                keywords ?? new ChangeTrackingList<string>(),
                id,
                uri,
                orderedAxes ?? new ChangeTrackingList<string>(),
                crs,
                wellKnownScaleSet,
                boundingBox,
                tileMatrices,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TileMatrixSet>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TileMatrixSet>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzurePlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(TileMatrixSet)} does not support writing '{options.Format}' format.");
            }
        }

        TileMatrixSet IPersistableModel<TileMatrixSet>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TileMatrixSet>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeTileMatrixSet(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TileMatrixSet)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TileMatrixSet>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TileMatrixSet FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeTileMatrixSet(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
