// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.PlanetaryComputer
{
    internal partial class RegisterSearchRequest : IUtf8JsonSerializable, IJsonModel<RegisterSearchRequest>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RegisterSearchRequest>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<RegisterSearchRequest>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RegisterSearchRequest>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RegisterSearchRequest)} does not support writing '{format}' format.");
            }

            if (Optional.IsCollectionDefined(Collections))
            {
                writer.WritePropertyName("collections"u8);
                writer.WriteStartArray();
                foreach (var item in Collections)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Ids))
            {
                writer.WritePropertyName("ids"u8);
                writer.WriteStartArray();
                foreach (var item in Ids)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Bbox))
            {
                writer.WritePropertyName("bbox"u8);
                writer.WriteNumberValue(Bbox.Value);
            }
            if (Optional.IsDefined(Intersects))
            {
                writer.WritePropertyName("intersects"u8);
                writer.WriteObjectValue(Intersects, options);
            }
            if (Optional.IsDefined(Query))
            {
                writer.WritePropertyName("query"u8);
                writer.WriteObjectValue(Query, options);
            }
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter"u8);
                writer.WriteStringValue(Filter);
            }
            if (Optional.IsDefined(Datetime))
            {
                writer.WritePropertyName("datetime"u8);
                writer.WriteStringValue(Datetime);
            }
            if (Optional.IsCollectionDefined(SortBy))
            {
                writer.WritePropertyName("sortby"u8);
                writer.WriteStartArray();
                foreach (var item in SortBy)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(FilterLang))
            {
                writer.WritePropertyName("filter-lang"u8);
                writer.WriteStringValue(FilterLang.Value.ToString());
            }
            if (Optional.IsDefined(Metadata))
            {
                writer.WritePropertyName("metadata"u8);
                writer.WriteObjectValue(Metadata, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        RegisterSearchRequest IJsonModel<RegisterSearchRequest>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RegisterSearchRequest>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RegisterSearchRequest)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRegisterSearchRequest(document.RootElement, options);
        }

        internal static RegisterSearchRequest DeserializeRegisterSearchRequest(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<string> collections = default;
            IReadOnlyList<string> ids = default;
            double? bbox = default;
            GeoJsonGeometry intersects = default;
            StacQuery query = default;
            string filter = default;
            string datetime = default;
            IReadOnlyList<SortExtension> sortby = default;
            FilterLang? filterLang = default;
            MosaicMetadata metadata = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("collections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    collections = array;
                    continue;
                }
                if (property.NameEquals("ids"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ids = array;
                    continue;
                }
                if (property.NameEquals("bbox"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bbox = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("intersects"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    intersects = GeoJsonGeometry.DeserializeGeoJsonGeometry(property.Value, options);
                    continue;
                }
                if (property.NameEquals("query"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    query = StacQuery.DeserializeStacQuery(property.Value, options);
                    continue;
                }
                if (property.NameEquals("filter"u8))
                {
                    filter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("datetime"u8))
                {
                    datetime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sortby"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SortExtension> array = new List<SortExtension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SortExtension.DeserializeSortExtension(item, options));
                    }
                    sortby = array;
                    continue;
                }
                if (property.NameEquals("filter-lang"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    filterLang = new FilterLang(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("metadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    metadata = MosaicMetadata.DeserializeMosaicMetadata(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new RegisterSearchRequest(
                collections ?? new ChangeTrackingList<string>(),
                ids ?? new ChangeTrackingList<string>(),
                bbox,
                intersects,
                query,
                filter,
                datetime,
                sortby ?? new ChangeTrackingList<SortExtension>(),
                filterLang,
                metadata,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<RegisterSearchRequest>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RegisterSearchRequest>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzurePlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(RegisterSearchRequest)} does not support writing '{options.Format}' format.");
            }
        }

        RegisterSearchRequest IPersistableModel<RegisterSearchRequest>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RegisterSearchRequest>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeRegisterSearchRequest(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RegisterSearchRequest)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<RegisterSearchRequest>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static RegisterSearchRequest FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeRegisterSearchRequest(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
