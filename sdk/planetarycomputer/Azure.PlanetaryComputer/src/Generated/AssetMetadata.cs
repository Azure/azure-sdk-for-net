// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.PlanetaryComputer
{
    /// <summary> Asset metadata model. </summary>
    public partial class AssetMetadata
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AssetMetadata"/>. </summary>
        /// <param name="key"> The key of the asset. </param>
        /// <param name="type"> The type of the asset. </param>
        /// <param name="roles"> The roles of the asset. </param>
        /// <param name="title"> The title of the asset. </param>
        /// <param name="description"> The description of the asset. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/>, <paramref name="type"/>, <paramref name="roles"/>, <paramref name="title"/> or <paramref name="description"/> is null. </exception>
        public AssetMetadata(string key, string type, IEnumerable<string> roles, string title, string description)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(roles, nameof(roles));
            Argument.AssertNotNull(title, nameof(title));
            Argument.AssertNotNull(description, nameof(description));

            Key = key;
            Type = type;
            Roles = roles.ToList();
            Title = title;
            Description = description;
        }

        /// <summary> Initializes a new instance of <see cref="AssetMetadata"/>. </summary>
        /// <param name="key"> The key of the asset. </param>
        /// <param name="type"> The type of the asset. </param>
        /// <param name="roles"> The roles of the asset. </param>
        /// <param name="title"> The title of the asset. </param>
        /// <param name="description"> The description of the asset. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AssetMetadata(string key, string type, IList<string> roles, string title, string description, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Key = key;
            Type = type;
            Roles = roles;
            Title = title;
            Description = description;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AssetMetadata"/> for deserialization. </summary>
        internal AssetMetadata()
        {
        }

        /// <summary> The key of the asset. </summary>
        public string Key { get; }
        /// <summary> The type of the asset. </summary>
        public string Type { get; }
        /// <summary> The roles of the asset. </summary>
        public IList<string> Roles { get; }
        /// <summary> The title of the asset. </summary>
        public string Title { get; }
        /// <summary> The description of the asset. </summary>
        public string Description { get; }
    }
}
