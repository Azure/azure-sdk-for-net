// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.PlanetaryComputer
{
    /// <summary>
    /// Search model.
    ///
    /// Overrides the validation for datetime from the base request model.
    ///
    /// Defines parameters for a STAC search POST request.
    /// </summary>
    public partial class SearchPostContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SearchPostContent"/>. </summary>
        public SearchPostContent()
        {
            Collections = new ChangeTrackingList<string>();
            Ids = new ChangeTrackingList<string>();
            Bbox = new ChangeTrackingList<double>();
            Conf = new ChangeTrackingDictionary<string, BinaryData>();
            SortBy = new ChangeTrackingList<SortExtension>();
            Fields = new ChangeTrackingList<SearchPostRequestFields>();
        }

        /// <summary> Initializes a new instance of <see cref="SearchPostContent"/>. </summary>
        /// <param name="collections"> List of collection IDs to search within. </param>
        /// <param name="ids"> List of specific item IDs to return. </param>
        /// <param name="bbox"> Bounding box for spatial filtering in format [west, south, east, north]. </param>
        /// <param name="intersects">
        /// GeoJSON geometry for spatial filtering.
        /// Please note <see cref="GeoJsonGeometry"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LineString"/>, <see cref="MultiLineString"/>, <see cref="MultiPoint"/>, <see cref="MultiPolygon"/>, <see cref="GeoJsonPoint"/> and <see cref="GeoJsonPolygon"/>.
        /// </param>
        /// <param name="datetime"> Temporal filter in RFC 3339 format, can be a single time or range. </param>
        /// <param name="limit"> Maximum number of results to return. </param>
        /// <param name="conf">
        /// Conf
        ///
        /// Overrides datetime validation from the base request model.
        /// </param>
        /// <param name="sign"> Whether to sign asset URLs in the response. </param>
        /// <param name="duration"> URL signature duration in seconds. </param>
        /// <param name="query">
        /// STAC Query
        ///
        /// See the [STAC Query Extension](https://github.com/stac-api-extensions/query).
        /// </param>
        /// <param name="sortBy">
        /// Sort criteria for the search results.
        ///
        /// See the [STAC Sort Extension](https://github.com/stac-api-extensions/sort).
        /// </param>
        /// <param name="fields">
        /// Specifies which fields to include or exclude in the STAC search results.
        ///
        /// See the [STAC Fields Extension](https://github.com/stac-api-extensions/fields).
        /// </param>
        /// <param name="filter">
        /// CQL2 Filter
        ///
        /// See the [STAC Filter Extension](https://github.com/stac-api-extensions/filter).
        /// </param>
        /// <param name="filterCrs"> Coordinate reference system for the filter. </param>
        /// <param name="filterLang"> Filter language to use for the filter expression. </param>
        /// <param name="token"> Pagination token for fetching the next set of results. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SearchPostContent(IList<string> collections, IList<string> ids, IList<double> bbox, GeoJsonGeometry intersects, string datetime, int? limit, IDictionary<string, BinaryData> conf, SignType? sign, int? duration, StacQuery query, IList<SortExtension> sortBy, IList<SearchPostRequestFields> fields, string filter, string filterCrs, FilterLang? filterLang, string token, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Collections = collections;
            Ids = ids;
            Bbox = bbox;
            Intersects = intersects;
            Datetime = datetime;
            Limit = limit;
            Conf = conf;
            Sign = sign;
            Duration = duration;
            Query = query;
            SortBy = sortBy;
            Fields = fields;
            Filter = filter;
            FilterCrs = filterCrs;
            FilterLang = filterLang;
            Token = token;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> List of collection IDs to search within. </summary>
        public IList<string> Collections { get; }
        /// <summary> List of specific item IDs to return. </summary>
        public IList<string> Ids { get; }
        /// <summary> Bounding box for spatial filtering in format [west, south, east, north]. </summary>
        public IList<double> Bbox { get; }
        /// <summary>
        /// GeoJSON geometry for spatial filtering.
        /// Please note <see cref="GeoJsonGeometry"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LineString"/>, <see cref="MultiLineString"/>, <see cref="MultiPoint"/>, <see cref="MultiPolygon"/>, <see cref="GeoJsonPoint"/> and <see cref="GeoJsonPolygon"/>.
        /// </summary>
        public GeoJsonGeometry Intersects { get; set; }
        /// <summary> Temporal filter in RFC 3339 format, can be a single time or range. </summary>
        public string Datetime { get; set; }
        /// <summary> Maximum number of results to return. </summary>
        public int? Limit { get; set; }
        /// <summary>
        /// Conf
        ///
        /// Overrides datetime validation from the base request model.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Conf { get; }
        /// <summary> Whether to sign asset URLs in the response. </summary>
        public SignType? Sign { get; set; }
        /// <summary> URL signature duration in seconds. </summary>
        public int? Duration { get; set; }
        /// <summary>
        /// STAC Query
        ///
        /// See the [STAC Query Extension](https://github.com/stac-api-extensions/query).
        /// </summary>
        public StacQuery Query { get; set; }
        /// <summary>
        /// Sort criteria for the search results.
        ///
        /// See the [STAC Sort Extension](https://github.com/stac-api-extensions/sort).
        /// </summary>
        public IList<SortExtension> SortBy { get; }
        /// <summary>
        /// Specifies which fields to include or exclude in the STAC search results.
        ///
        /// See the [STAC Fields Extension](https://github.com/stac-api-extensions/fields).
        /// </summary>
        public IList<SearchPostRequestFields> Fields { get; }
        /// <summary>
        /// CQL2 Filter
        ///
        /// See the [STAC Filter Extension](https://github.com/stac-api-extensions/filter).
        /// </summary>
        public string Filter { get; set; }
        /// <summary> Coordinate reference system for the filter. </summary>
        public string FilterCrs { get; set; }
        /// <summary> Filter language to use for the filter expression. </summary>
        public FilterLang? FilterLang { get; set; }
        /// <summary> Pagination token for fetching the next set of results. </summary>
        public string Token { get; set; }
    }
}
