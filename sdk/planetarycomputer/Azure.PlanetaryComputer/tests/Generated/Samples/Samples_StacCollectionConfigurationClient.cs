// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.PlanetaryComputer.Samples
{
    public partial class Samples_StacCollectionConfigurationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateCollectionAsset_StacCollectionAssetsCreate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = null;
            Response response = client.CreateCollectionAsset("test-collection-d45537668d06", content, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("license").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("spatial").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateCollectionAsset_StacCollectionAssetsCreate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.CreateCollectionAssetAsync("test-collection-d45537668d06", content, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("license").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("spatial").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateCollectionAsset_StacCollectionAssetsCreate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            FormContent body = null;
            Response<StacCollectionModel> response = client.CreateCollectionAsset("test-collection-d45537668d06", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateCollectionAsset_StacCollectionAssetsCreate_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            FormContent body = null;
            Response<StacCollectionModel> response = await client.CreateCollectionAssetAsync("test-collection-d45537668d06", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateOrReplaceCollectionAsset_StacCollectionAssetsCreateOrReplace()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = null;
            Response response = client.CreateOrReplaceCollectionAsset("test-collection-d45537668d06", "visual", content, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("license").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("spatial").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateOrReplaceCollectionAsset_StacCollectionAssetsCreateOrReplace_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.CreateOrReplaceCollectionAssetAsync("test-collection-d45537668d06", "visual", content, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("license").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("spatial").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateOrReplaceCollectionAsset_StacCollectionAssetsCreateOrReplace_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            FormContent body = null;
            Response<StacCollectionModel> response = client.CreateOrReplaceCollectionAsset("test-collection-d45537668d06", "visual", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateOrReplaceCollectionAsset_StacCollectionAssetsCreateOrReplace_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            FormContent body = null;
            Response<StacCollectionModel> response = await client.CreateOrReplaceCollectionAssetAsync("test-collection-d45537668d06", "visual", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_DeleteCollectionAsset_StacCollectionAssetsDelete()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.DeleteCollectionAsset("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "a1007ec2-3ddc-4335-9edd-b1c26b1b4c92");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_DeleteCollectionAsset_StacCollectionAssetsDelete_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.DeleteCollectionAssetAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "a1007ec2-3ddc-4335-9edd-b1c26b1b4c92");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetCollectionConfig_StacCollectionConfigGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.GetCollectionConfig("sentinel-2-l2a-tutorial-7", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("tileSettings").GetProperty("minZoom").ToString());
            Console.WriteLine(result.GetProperty("tileSettings").GetProperty("maxItemsPerTile").ToString());
            Console.WriteLine(result.GetProperty("mosaicInfo").GetProperty("mosaics")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("mosaicInfo").GetProperty("mosaics")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("mosaicInfo").GetProperty("mosaics")[0].GetProperty("cql")[0].ToString());
            Console.WriteLine(result.GetProperty("mosaicInfo").GetProperty("renderOptions")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("mosaicInfo").GetProperty("renderOptions")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetCollectionConfig_StacCollectionConfigGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.GetCollectionConfigAsync("sentinel-2-l2a-tutorial-7", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("tileSettings").GetProperty("minZoom").ToString());
            Console.WriteLine(result.GetProperty("tileSettings").GetProperty("maxItemsPerTile").ToString());
            Console.WriteLine(result.GetProperty("mosaicInfo").GetProperty("mosaics")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("mosaicInfo").GetProperty("mosaics")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("mosaicInfo").GetProperty("mosaics")[0].GetProperty("cql")[0].ToString());
            Console.WriteLine(result.GetProperty("mosaicInfo").GetProperty("renderOptions")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("mosaicInfo").GetProperty("renderOptions")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetCollectionConfig_StacCollectionConfigGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<UserCollectionSettings> response = client.GetCollectionConfig("sentinel-2-l2a-tutorial-7");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetCollectionConfig_StacCollectionConfigGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<UserCollectionSettings> response = await client.GetCollectionConfigAsync("sentinel-2-l2a-tutorial-7");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetAllMosaics_StacCollectionMosaicsGetAll()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.GetAllMosaics("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("cql")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetAllMosaics_StacCollectionMosaicsGetAll_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.GetAllMosaicsAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("cql")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetAllMosaics_StacCollectionMosaicsGetAll_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<IReadOnlyList<StacMosaic>> response = client.GetAllMosaics("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetAllMosaics_StacCollectionMosaicsGetAll_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<IReadOnlyList<StacMosaic>> response = await client.GetAllMosaicsAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_AddMosaic_StacCollectionMosaicsAdd()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "mos1",
                name = "Most recent available",
                description = "Most recent available imagery in this collection",
                cql = Array.Empty<object>(),
            });
            Response response = client.AddMosaic("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("cql")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_AddMosaic_StacCollectionMosaicsAdd_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "mos1",
                name = "Most recent available",
                description = "Most recent available imagery in this collection",
                cql = Array.Empty<object>(),
            });
            Response response = await client.AddMosaicAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("cql")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_AddMosaic_StacCollectionMosaicsAdd_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            StacMosaic body = new StacMosaic("mos1", "Most recent available", Array.Empty<CqlFilter>())
            {
                Description = "Most recent available imagery in this collection",
            };
            Response<StacMosaic> response = client.AddMosaic("36fcb8da-9b15-49e0-b400-0d2e751e2061", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_AddMosaic_StacCollectionMosaicsAdd_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            StacMosaic body = new StacMosaic("mos1", "Most recent available", Array.Empty<CqlFilter>())
            {
                Description = "Most recent available imagery in this collection",
            };
            Response<StacMosaic> response = await client.AddMosaicAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetMosaic_StacCollectionMosaicsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.GetMosaic("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "mos1", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("cql")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetMosaic_StacCollectionMosaicsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.GetMosaicAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "mos1", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("cql")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetMosaic_StacCollectionMosaicsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<StacMosaic> response = client.GetMosaic("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "mos1");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetMosaic_StacCollectionMosaicsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<StacMosaic> response = await client.GetMosaicAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "mos1");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateOrReplaceMosaic_StacCollectionMosaicsCreateOrReplace()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "mosaic-default",
                name = "Imagery",
                description = "Updated description",
                cql = Array.Empty<object>(),
            });
            Response response = client.CreateOrReplaceMosaic("36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("cql")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateOrReplaceMosaic_StacCollectionMosaicsCreateOrReplace_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "mosaic-default",
                name = "Imagery",
                description = "Updated description",
                cql = Array.Empty<object>(),
            });
            Response response = await client.CreateOrReplaceMosaicAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("cql")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateOrReplaceMosaic_StacCollectionMosaicsCreateOrReplace_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            StacMosaic body = new StacMosaic("mosaic-default", "Imagery", Array.Empty<CqlFilter>())
            {
                Description = "Updated description",
            };
            Response<StacMosaic> response = client.CreateOrReplaceMosaic("36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateOrReplaceMosaic_StacCollectionMosaicsCreateOrReplace_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            StacMosaic body = new StacMosaic("mosaic-default", "Imagery", Array.Empty<CqlFilter>())
            {
                Description = "Updated description",
            };
            Response<StacMosaic> response = await client.CreateOrReplaceMosaicAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_DeleteMosaic_StacCollectionMosaicsDelete()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.DeleteMosaic("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "a1007ec2-3ddc-4335-9edd-b1c26b1b4c92");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_DeleteMosaic_StacCollectionMosaicsDelete_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.DeleteMosaicAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "a1007ec2-3ddc-4335-9edd-b1c26b1b4c92");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetPartitionType_StacCollectionPartitionTypesGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.GetPartitionType("naip", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetPartitionType_StacCollectionPartitionTypesGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.GetPartitionTypeAsync("naip", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetPartitionType_StacCollectionPartitionTypesGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<PartitionType> response = client.GetPartitionType("naip");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetPartitionType_StacCollectionPartitionTypesGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<PartitionType> response = await client.GetPartitionTypeAsync("naip");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_ReplacePartitionType_StacCollectionPartitionTypesReplace()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                scheme = "none",
            });
            Response response = client.ReplacePartitionType("naip", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_ReplacePartitionType_StacCollectionPartitionTypesReplace_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                scheme = "none",
            });
            Response response = await client.ReplacePartitionTypeAsync("naip", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_ReplacePartitionType_StacCollectionPartitionTypesReplace_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            PartitionType body = new PartitionType
            {
                Scheme = PartitionTypeScheme.None,
            };
            Response<PartitionType> response = client.ReplacePartitionType("naip", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_ReplacePartitionType_StacCollectionPartitionTypesReplace_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            PartitionType body = new PartitionType
            {
                Scheme = PartitionTypeScheme.None,
            };
            Response<PartitionType> response = await client.ReplacePartitionTypeAsync("naip", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetAllRenderOptions_StacCollectionRenderOptionsGetAll()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.GetAllRenderOptions("sentinel-2-l2a-tutorial-7", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetAllRenderOptions_StacCollectionRenderOptionsGetAll_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.GetAllRenderOptionsAsync("sentinel-2-l2a-tutorial-7", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetAllRenderOptions_StacCollectionRenderOptionsGetAll_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<IReadOnlyList<RenderOptionModel>> response = client.GetAllRenderOptions("sentinel-2-l2a-tutorial-7");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetAllRenderOptions_StacCollectionRenderOptionsGetAll_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<IReadOnlyList<RenderOptionModel>> response = await client.GetAllRenderOptionsAsync("sentinel-2-l2a-tutorial-7");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateRenderOption_StacCollectionRenderOptionsCreate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "Atmospheric penetration",
                description = "False color rendering with non-visible bands to reduce effects of atmospheric particles (B12, B11, B8A).",
                type = "raster-tile",
                options = "nodata=0&assets=B12&assets=B11&assets=B8A&color_formula=Gamma RGB 3.7 Saturation 1.5 Sigmoidal RGB 15 0.35",
                minZoom = 9,
                id = "atmospheric-penetration",
            });
            Response response = client.CreateRenderOption("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateRenderOption_StacCollectionRenderOptionsCreate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "Atmospheric penetration",
                description = "False color rendering with non-visible bands to reduce effects of atmospheric particles (B12, B11, B8A).",
                type = "raster-tile",
                options = "nodata=0&assets=B12&assets=B11&assets=B8A&color_formula=Gamma RGB 3.7 Saturation 1.5 Sigmoidal RGB 15 0.35",
                minZoom = 9,
                id = "atmospheric-penetration",
            });
            Response response = await client.CreateRenderOptionAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateRenderOption_StacCollectionRenderOptionsCreate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            RenderOptionModel body = new RenderOptionModel("atmospheric-penetration", "Atmospheric penetration")
            {
                Description = "False color rendering with non-visible bands to reduce effects of atmospheric particles (B12, B11, B8A).",
                Type = RenderOptionType.RasterTile,
                Options = "nodata=0&assets=B12&assets=B11&assets=B8A&color_formula=Gamma RGB 3.7 Saturation 1.5 Sigmoidal RGB 15 0.35",
                MinZoom = 9,
            };
            Response<RenderOptionModel> response = client.CreateRenderOption("36fcb8da-9b15-49e0-b400-0d2e751e2061", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateRenderOption_StacCollectionRenderOptionsCreate_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            RenderOptionModel body = new RenderOptionModel("atmospheric-penetration", "Atmospheric penetration")
            {
                Description = "False color rendering with non-visible bands to reduce effects of atmospheric particles (B12, B11, B8A).",
                Type = RenderOptionType.RasterTile,
                Options = "nodata=0&assets=B12&assets=B11&assets=B8A&color_formula=Gamma RGB 3.7 Saturation 1.5 Sigmoidal RGB 15 0.35",
                MinZoom = 9,
            };
            Response<RenderOptionModel> response = await client.CreateRenderOptionAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetRenderOption_StacCollectionRenderOptionsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.GetRenderOption("sentinel-2-l2a-tutorial-7", "a1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetRenderOption_StacCollectionRenderOptionsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.GetRenderOptionAsync("sentinel-2-l2a-tutorial-7", "a1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetRenderOption_StacCollectionRenderOptionsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<IReadOnlyList<RenderOptionModel>> response = client.GetRenderOption("sentinel-2-l2a-tutorial-7", "a1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetRenderOption_StacCollectionRenderOptionsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<IReadOnlyList<RenderOptionModel>> response = await client.GetRenderOptionAsync("sentinel-2-l2a-tutorial-7", "a1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateOrReplaceRenderOption_StacCollectionRenderOptionsCreateOrReplace()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "Atmospheric penetration",
                description = "False color rendering with non-visible bands to reduce effects of atmospheric particles (B12, B11, B8A).",
                type = "raster-tile",
                options = "nodata=0&assets=B12&assets=B11&assets=B8A&color_formula=Gamma RGB 3.7 Saturation 1.5 Sigmoidal RGB 15 0.35",
                minZoom = 9,
                id = "atmospheric-penetration",
            });
            Response response = client.CreateOrReplaceRenderOption("36fcb8da-9b15-49e0-b400-0d2e751e2061", "atmospheric-penetration", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateOrReplaceRenderOption_StacCollectionRenderOptionsCreateOrReplace_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "Atmospheric penetration",
                description = "False color rendering with non-visible bands to reduce effects of atmospheric particles (B12, B11, B8A).",
                type = "raster-tile",
                options = "nodata=0&assets=B12&assets=B11&assets=B8A&color_formula=Gamma RGB 3.7 Saturation 1.5 Sigmoidal RGB 15 0.35",
                minZoom = 9,
                id = "atmospheric-penetration",
            });
            Response response = await client.CreateOrReplaceRenderOptionAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", "atmospheric-penetration", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateOrReplaceRenderOption_StacCollectionRenderOptionsCreateOrReplace_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            RenderOptionModel body = new RenderOptionModel("atmospheric-penetration", "Atmospheric penetration")
            {
                Description = "False color rendering with non-visible bands to reduce effects of atmospheric particles (B12, B11, B8A).",
                Type = RenderOptionType.RasterTile,
                Options = "nodata=0&assets=B12&assets=B11&assets=B8A&color_formula=Gamma RGB 3.7 Saturation 1.5 Sigmoidal RGB 15 0.35",
                MinZoom = 9,
            };
            Response<RenderOptionModel> response = client.CreateOrReplaceRenderOption("36fcb8da-9b15-49e0-b400-0d2e751e2061", "atmospheric-penetration", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateOrReplaceRenderOption_StacCollectionRenderOptionsCreateOrReplace_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            RenderOptionModel body = new RenderOptionModel("atmospheric-penetration", "Atmospheric penetration")
            {
                Description = "False color rendering with non-visible bands to reduce effects of atmospheric particles (B12, B11, B8A).",
                Type = RenderOptionType.RasterTile,
                Options = "nodata=0&assets=B12&assets=B11&assets=B8A&color_formula=Gamma RGB 3.7 Saturation 1.5 Sigmoidal RGB 15 0.35",
                MinZoom = 9,
            };
            Response<RenderOptionModel> response = await client.CreateOrReplaceRenderOptionAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", "atmospheric-penetration", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_DeleteRenderOption_StacCollectionRenderOptionsDelete()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.DeleteRenderOption("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "a1007ec2-3ddc-4335-9edd-b1c26b1b4c92");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_DeleteRenderOption_StacCollectionRenderOptionsDelete_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.DeleteRenderOptionAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "a1007ec2-3ddc-4335-9edd-b1c26b1b4c92");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetTileSettings_StacCollectionTileSettingsGetAll()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.GetTileSettings("36fcb8da-9b15-49e0-b400-0d2e751e2061", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("minZoom").ToString());
            Console.WriteLine(result.GetProperty("maxItemsPerTile").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetTileSettings_StacCollectionTileSettingsGetAll_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.GetTileSettingsAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("minZoom").ToString());
            Console.WriteLine(result.GetProperty("maxItemsPerTile").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetTileSettings_StacCollectionTileSettingsGetAll_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<TileSettings> response = client.GetTileSettings("36fcb8da-9b15-49e0-b400-0d2e751e2061");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetTileSettings_StacCollectionTileSettingsGetAll_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<TileSettings> response = await client.GetTileSettingsAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_ReplaceTileSettings_StacCollectionTileSettingsReplace()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                minZoom = 13,
                maxItemsPerTile = 10,
                defaultLocation = new
                {
                    zoom = 10,
                    coordinates = new object[]
            {
0F,
0F
            },
                },
            });
            Response response = client.ReplaceTileSettings("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("minZoom").ToString());
            Console.WriteLine(result.GetProperty("maxItemsPerTile").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_ReplaceTileSettings_StacCollectionTileSettingsReplace_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                minZoom = 13,
                maxItemsPerTile = 10,
                defaultLocation = new
                {
                    zoom = 10,
                    coordinates = new object[]
            {
0F,
0F
            },
                },
            });
            Response response = await client.ReplaceTileSettingsAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("minZoom").ToString());
            Console.WriteLine(result.GetProperty("maxItemsPerTile").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_ReplaceTileSettings_StacCollectionTileSettingsReplace_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            TileSettings body = new TileSettings(13, 10)
            {
                DefaultLocation = new DefaultLocation(10, new float[] { 0F, 0F }),
            };
            Response<TileSettings> response = client.ReplaceTileSettings("36fcb8da-9b15-49e0-b400-0d2e751e2061", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_ReplaceTileSettings_StacCollectionTileSettingsReplace_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            TileSettings body = new TileSettings(13, 10)
            {
                DefaultLocation = new DefaultLocation(10, new float[] { 0F, 0F }),
            };
            Response<TileSettings> response = await client.ReplaceTileSettingsAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateOrReplaceQueryable_StacQueryablesCreateOrReplace()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "naip:state",
                definition = new object(),
            });
            Response response = client.CreateOrReplaceQueryable("36fcb8da-9b15-49e0-b400-0d2e751e2061", "naip:state", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("definition").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateOrReplaceQueryable_StacQueryablesCreateOrReplace_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "naip:state",
                definition = new object(),
            });
            Response response = await client.CreateOrReplaceQueryableAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", "naip:state", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("definition").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_CreateOrReplaceQueryable_StacQueryablesCreateOrReplace_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            QueryableProperty body = new QueryableProperty("naip:state", new QueryableDefinitionType());
            Response<QueryableProperty> response = client.CreateOrReplaceQueryable("36fcb8da-9b15-49e0-b400-0d2e751e2061", "naip:state", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_CreateOrReplaceQueryable_StacQueryablesCreateOrReplace_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            QueryableProperty body = new QueryableProperty("naip:state", new QueryableDefinitionType());
            Response<QueryableProperty> response = await client.CreateOrReplaceQueryableAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", "naip:state", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_DeleteQueryable_StacQueryablesDelete()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.DeleteQueryable("36fcb8da-9b15-49e0-b400-0d2e751e2061", "queryableName");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_DeleteQueryable_StacQueryablesDelete_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.DeleteQueryableAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", "queryableName");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetCollectionThumbnail_StacCollectionThumbnailsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = client.GetCollectionThumbnail("sentinel-2-l2a-tutorial-7", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetCollectionThumbnail_StacCollectionThumbnailsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response response = await client.GetCollectionThumbnailAsync("sentinel-2-l2a-tutorial-7", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionConfigurationClient_GetCollectionThumbnail_StacCollectionThumbnailsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<BinaryData> response = client.GetCollectionThumbnail("sentinel-2-l2a-tutorial-7", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionConfigurationClient_GetCollectionThumbnail_StacCollectionThumbnailsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacCollectionConfigurationClient client = new StacCollectionConfigurationClient(endpoint, credential);

            Response<BinaryData> response = await client.GetCollectionThumbnailAsync("sentinel-2-l2a-tutorial-7", null);
        }
    }
}
