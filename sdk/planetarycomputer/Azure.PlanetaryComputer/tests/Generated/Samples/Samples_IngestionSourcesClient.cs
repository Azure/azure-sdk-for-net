// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.PlanetaryComputer.Samples
{
    public partial class Samples_IngestionSourcesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_IngestionSourcesClient_GetIngestionSources_IngestionSourcesListAll()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response response = client.GetIngestionSources(10L, 0L, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("created").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_IngestionSourcesClient_GetIngestionSources_IngestionSourcesListAll_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response response = await client.GetIngestionSourcesAsync(10L, 0L, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("created").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_IngestionSourcesClient_GetIngestionSources_IngestionSourcesListAll_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response<IngestionSourcesPagedResult> response = client.GetIngestionSources();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_IngestionSourcesClient_GetIngestionSources_IngestionSourcesListAll_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response<IngestionSourcesPagedResult> response = await client.GetIngestionSourcesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_IngestionSourcesClient_CreateIngestionSource_IngestionSourcesCreate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "36fcb8da-9b15-49e0-b400-0d2e751e2061",
                kind = "SasToken",
                connectionInfo = new
                {
                    containerUrl = "https://sample.blob.core.windows.net/sample",
                    sasToken = "sp=r&st=2024-03-26T10:20:15Z&se=2025-08-29T17:20:15Z&spr=https&sv=2022-11-02&sr=c&sig=EVICTED",
                },
            });
            Response response = client.CreateIngestionSource(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_IngestionSourcesClient_CreateIngestionSource_IngestionSourcesCreate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "36fcb8da-9b15-49e0-b400-0d2e751e2061",
                kind = "SasToken",
                connectionInfo = new
                {
                    containerUrl = "https://sample.blob.core.windows.net/sample",
                    sasToken = "sp=r&st=2024-03-26T10:20:15Z&se=2025-08-29T17:20:15Z&spr=https&sv=2022-11-02&sr=c&sig=EVICTED",
                },
            });
            Response response = await client.CreateIngestionSourceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_IngestionSourcesClient_CreateIngestionSource_IngestionSourcesCreate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            IngestionSource ingestionSource = new SasTokenIngestionSource(Guid.Parse("36fcb8da-9b15-49e0-b400-0d2e751e2061"), new SasTokenConnection(new Uri("https://sample.blob.core.windows.net/sample"))
            {
                SasToken = "sp=r&st=2024-03-26T10:20:15Z&se=2025-08-29T17:20:15Z&spr=https&sv=2022-11-02&sr=c&sig=EVICTED",
            });
            Response<IngestionSource> response = client.CreateIngestionSource(ingestionSource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_IngestionSourcesClient_CreateIngestionSource_IngestionSourcesCreate_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            IngestionSource ingestionSource = new SasTokenIngestionSource(Guid.Parse("36fcb8da-9b15-49e0-b400-0d2e751e2061"), new SasTokenConnection(new Uri("https://sample.blob.core.windows.net/sample"))
            {
                SasToken = "sp=r&st=2024-03-26T10:20:15Z&se=2025-08-29T17:20:15Z&spr=https&sv=2022-11-02&sr=c&sig=EVICTED",
            });
            Response<IngestionSource> response = await client.CreateIngestionSourceAsync(ingestionSource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_IngestionSourcesClient_GetIngestionSource_IngestionSourcesGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response response = client.GetIngestionSource(Guid.Parse("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_IngestionSourcesClient_GetIngestionSource_IngestionSourcesGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response response = await client.GetIngestionSourceAsync(Guid.Parse("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_IngestionSourcesClient_GetIngestionSource_IngestionSourcesGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response<IngestionSource> response = client.GetIngestionSource(Guid.Parse("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_IngestionSourcesClient_GetIngestionSource_IngestionSourcesGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response<IngestionSource> response = await client.GetIngestionSourceAsync(Guid.Parse("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_IngestionSourcesClient_CreateOrReplaceIngestionSource_IngestionSourcesCreateOrReplace()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "36fcb8da-9b15-49e0-b400-0d2e751e2061",
                kind = "SasToken",
                connectionInfo = new
                {
                    containerUrl = "https://sample.blob.core.windows.net/sample2",
                    sasToken = "sp=r&st=2024-03-26T10:20:15Z&se=2025-08-29T17:20:15Z&spr=https&sv=2022-11-02&sr=c&sig=EVICTED",
                },
            });
            Response response = client.CreateOrReplaceIngestionSource("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_IngestionSourcesClient_CreateOrReplaceIngestionSource_IngestionSourcesCreateOrReplace_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "36fcb8da-9b15-49e0-b400-0d2e751e2061",
                kind = "SasToken",
                connectionInfo = new
                {
                    containerUrl = "https://sample.blob.core.windows.net/sample2",
                    sasToken = "sp=r&st=2024-03-26T10:20:15Z&se=2025-08-29T17:20:15Z&spr=https&sv=2022-11-02&sr=c&sig=EVICTED",
                },
            });
            Response response = await client.CreateOrReplaceIngestionSourceAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("created").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_IngestionSourcesClient_CreateOrReplaceIngestionSource_IngestionSourcesCreateOrReplace_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            IngestionSource ingestionSource = new SasTokenIngestionSource(Guid.Parse("36fcb8da-9b15-49e0-b400-0d2e751e2061"), new SasTokenConnection(new Uri("https://sample.blob.core.windows.net/sample2"))
            {
                SasToken = "sp=r&st=2024-03-26T10:20:15Z&se=2025-08-29T17:20:15Z&spr=https&sv=2022-11-02&sr=c&sig=EVICTED",
            });
            Response<IngestionSource> response = client.CreateOrReplaceIngestionSource("36fcb8da-9b15-49e0-b400-0d2e751e2061", ingestionSource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_IngestionSourcesClient_CreateOrReplaceIngestionSource_IngestionSourcesCreateOrReplace_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            IngestionSource ingestionSource = new SasTokenIngestionSource(Guid.Parse("36fcb8da-9b15-49e0-b400-0d2e751e2061"), new SasTokenConnection(new Uri("https://sample.blob.core.windows.net/sample2"))
            {
                SasToken = "sp=r&st=2024-03-26T10:20:15Z&se=2025-08-29T17:20:15Z&spr=https&sv=2022-11-02&sr=c&sig=EVICTED",
            });
            Response<IngestionSource> response = await client.CreateOrReplaceIngestionSourceAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", ingestionSource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_IngestionSourcesClient_DeleteIngestionSource_IngestionSourcesDelete()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response response = client.DeleteIngestionSource("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_IngestionSourcesClient_DeleteIngestionSource_IngestionSourcesDelete_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response response = await client.DeleteIngestionSourceAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_IngestionSourcesClient_GetManagedIdentities_IngestionSourcesListManagedIdentities()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response response = client.GetManagedIdentities(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("objectId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("resourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_IngestionSourcesClient_GetManagedIdentities_IngestionSourcesListManagedIdentities_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response response = await client.GetManagedIdentitiesAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("objectId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("resourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_IngestionSourcesClient_GetManagedIdentities_IngestionSourcesListManagedIdentities_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response<ManagedIdentitiesPagedResult> response = client.GetManagedIdentities();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_IngestionSourcesClient_GetManagedIdentities_IngestionSourcesListManagedIdentities_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            IngestionSourcesClient client = new IngestionSourcesClient(endpoint, credential);

            Response<ManagedIdentitiesPagedResult> response = await client.GetManagedIdentitiesAsync();
        }
    }
}
