// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.PlanetaryComputer.Samples
{
    public partial class Samples_GeocatalogClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GeocatalogClient_GetAuthConfig_GeoCatalogAuthConfigOperationsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response response = client.GetAuthConfig(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("authn_app_id").ToString());
            Console.WriteLine(result.GetProperty("tenant_id").ToString());
            Console.WriteLine(result.GetProperty("instance").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GeocatalogClient_GetAuthConfig_GeoCatalogAuthConfigOperationsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response response = await client.GetAuthConfigAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("authn_app_id").ToString());
            Console.WriteLine(result.GetProperty("tenant_id").ToString());
            Console.WriteLine(result.GetProperty("instance").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GeocatalogClient_GetAuthConfig_GeoCatalogAuthConfigOperationsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response<AuthConfig> response = client.GetAuthConfig();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GeocatalogClient_GetAuthConfig_GeoCatalogAuthConfigOperationsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response<AuthConfig> response = await client.GetAuthConfigAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GeocatalogClient_GetAzmapsClientId_GeoCatalogAzmapsClientGetId()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response response = client.GetAzmapsClientId(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("client_id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GeocatalogClient_GetAzmapsClientId_GeoCatalogAzmapsClientGetId_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response response = await client.GetAzmapsClientIdAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("client_id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GeocatalogClient_GetAzmapsClientId_GeoCatalogAzmapsClientGetId_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response<AzMapsClientId> response = client.GetAzmapsClientId();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GeocatalogClient_GetAzmapsClientId_GeoCatalogAzmapsClientGetId_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response<AzMapsClientId> response = await client.GetAzmapsClientIdAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GeocatalogClient_GetAzmapsToken_GeoCatalogAzmapsTokenGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response response = client.GetAzmapsToken(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
            Console.WriteLine(result.GetProperty("expires_on").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GeocatalogClient_GetAzmapsToken_GeoCatalogAzmapsTokenGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response response = await client.GetAzmapsTokenAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
            Console.WriteLine(result.GetProperty("expires_on").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GeocatalogClient_GetAzmapsToken_GeoCatalogAzmapsTokenGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response<AzMapsToken> response = client.GetAzmapsToken();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GeocatalogClient_GetAzmapsToken_GeoCatalogAzmapsTokenGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            GeocatalogClient client = new GeocatalogClient(endpoint, credential);

            Response<AzMapsToken> response = await client.GetAzmapsTokenAsync();
        }
    }
}
