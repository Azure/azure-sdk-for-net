// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.PlanetaryComputer.Samples
{
    public partial class Samples_StacApiClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetStacLandingPage_StacLandingPagesGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = client.GetStacLandingPage(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("conformsTo")[0].ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetStacLandingPage_StacLandingPagesGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = await client.GetStacLandingPageAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("conformsTo")[0].ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetStacLandingPage_StacLandingPagesGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<LandingPage> response = client.GetStacLandingPage();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetStacLandingPage_StacLandingPagesGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<LandingPage> response = await client.GetStacLandingPageAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetAllCollections_StacCollectionOperationsGetAll()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = client.GetAllCollections(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("license").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("extent").GetProperty("spatial").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetAllCollections_StacCollectionOperationsGetAll_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = await client.GetAllCollectionsAsync(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("license").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("extent").GetProperty("spatial").ToString());
            Console.WriteLine(result.GetProperty("collections")[0].GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetAllCollections_StacCollectionOperationsGetAll_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<FeatureCollections> response = client.GetAllCollections();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetAllCollections_StacCollectionOperationsGetAll_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<FeatureCollections> response = await client.GetAllCollectionsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionModel_GetCollection_StacCollectionOperationsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = client.GetCollection("test-collection-568725878606", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("license").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("spatial").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionModel_GetCollection_StacCollectionOperationsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = await client.GetCollectionAsync("test-collection-568725878606", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("license").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("spatial").ToString());
            Console.WriteLine(result.GetProperty("extent").GetProperty("temporal").GetProperty("interval")[0][0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacCollectionModel_GetCollection_StacCollectionOperationsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<StacCollectionModel> response = client.GetCollection("test-collection-568725878606");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacCollectionModel_GetCollection_StacCollectionOperationsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<StacCollectionModel> response = await client.GetCollectionAsync("test-collection-568725878606");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetItemsAsFeatures_StacItemsGetFeatures()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = client.GetItemsAsFeatures("example-collection", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetItemsAsFeatures_StacItemsGetFeatures_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = await client.GetItemsAsFeaturesAsync("example-collection", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetItemsAsFeatures_StacItemsGetFeatures_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<ItemCollectionModel> response = client.GetItemsAsFeatures("example-collection");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetItemsAsFeatures_StacItemsGetFeatures_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<ItemCollectionModel> response = await client.GetItemsAsFeaturesAsync("example-collection");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetItem_StacItemsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = client.GetItem("example-collection", "S2A_MSIL2A_20231017T013651_R117_T53SPA_20231017T053413", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("datetime").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetItem_StacItemsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = await client.GetItemAsync("example-collection", "S2A_MSIL2A_20231017T013651_R117_T53SPA_20231017T053413", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("datetime").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetItem_StacItemsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<StacItemModel> response = client.GetItem("example-collection", "S2A_MSIL2A_20231017T013651_R117_T53SPA_20231017T053413");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetItem_StacItemsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<StacItemModel> response = await client.GetItemAsync("example-collection", "S2A_MSIL2A_20231017T013651_R117_T53SPA_20231017T053413");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetAllQueryables_StacQueryablesGetAll()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = client.GetAllQueryables(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetAllQueryables_StacQueryablesGetAll_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = await client.GetAllQueryablesAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetAllQueryables_StacQueryablesGetAll_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<JsonSchema> response = client.GetAllQueryables();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetAllQueryables_StacQueryablesGetAll_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<JsonSchema> response = await client.GetAllQueryablesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetAllQueryablesByCollection_StacQueryablesGetAllByCollection()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = client.GetAllQueryablesByCollection("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetAllQueryablesByCollection_StacQueryablesGetAllByCollection_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = await client.GetAllQueryablesByCollectionAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetAllQueryablesByCollection_StacQueryablesGetAllByCollection_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<JsonSchema> response = client.GetAllQueryablesByCollection("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetAllQueryablesByCollection_StacQueryablesGetAllByCollection_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<JsonSchema> response = await client.GetAllQueryablesByCollectionAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateQueryables_StacQueryablesCreate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
name = "eo:clown_cover",
definition = new object(),
}
            });
            Response response = client.CreateQueryables("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("definition").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateQueryables_StacQueryablesCreate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
name = "eo:clown_cover",
definition = new object(),
}
            });
            Response response = await client.CreateQueryablesAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("definition").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateQueryables_StacQueryablesCreate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<IReadOnlyList<QueryableProperty>> response = client.CreateQueryables("36fcb8da-9b15-49e0-b400-0d2e751e2061", new QueryableProperty[]
            {
new QueryableProperty("eo:clown_cover", new QueryableDefinitionType())
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateQueryables_StacQueryablesCreate_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<IReadOnlyList<QueryableProperty>> response = await client.CreateQueryablesAsync("36fcb8da-9b15-49e0-b400-0d2e751e2061", new QueryableProperty[]
            {
new QueryableProperty("eo:clown_cover", new QueryableDefinitionType())
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetConformanceClass_StacConformanceClassGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = client.GetConformanceClass(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conformsTo")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetConformanceClass_StacConformanceClassGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = await client.GetConformanceClassAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conformsTo")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetConformanceClass_StacConformanceClassGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<ConformanceClasses> response = client.GetConformanceClass();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetConformanceClass_StacConformanceClassGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<ConformanceClasses> response = await client.GetConformanceClassAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetSearchOperations_StacSearchOperationsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = client.GetSearchOperations(null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetSearchOperations_StacSearchOperationsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response response = await client.GetSearchOperationsAsync(null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_GetSearchOperations_StacSearchOperationsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<ItemCollectionModel> response = client.GetSearchOperations();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_GetSearchOperations_StacSearchOperationsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Response<ItemCollectionModel> response = await client.GetSearchOperationsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateSearchOperations_StacSearchOperationsCreate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["filter-lang"] = "cql2-json",
                ["sortby"] = new object[]
            {
new
{
field = "datetime",
direction = "desc",
}
            },
                ["limit"] = 1
            });
            Response response = client.CreateSearchOperations(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateSearchOperations_StacSearchOperationsCreate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["filter-lang"] = "cql2-json",
                ["sortby"] = new object[]
            {
new
{
field = "datetime",
direction = "desc",
}
            },
                ["limit"] = 1
            });
            Response response = await client.CreateSearchOperationsAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<key>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateSearchOperations_StacSearchOperationsCreate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            SearchPostContent body = new SearchPostContent
            {
                Limit = 1,
                SortBy = { new SortExtension("datetime", SortDirections.Desc) },
                FilterLang = FilterLang.Cql2Json,
            };
            Response<ItemCollectionModel> response = client.CreateSearchOperations(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateSearchOperations_StacSearchOperationsCreate_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            SearchPostContent body = new SearchPostContent
            {
                Limit = 1,
                SortBy = { new SortExtension("datetime", SortDirections.Desc) },
                FilterLang = FilterLang.Cql2Json,
            };
            Response<ItemCollectionModel> response = await client.CreateSearchOperationsAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateCollection_StacCollectionOperationsCreate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                type = "Collection",
                id = "test-collection-d45537668d06",
                stac_version = "1.0.0",
                description = "A collection for integration tests purposes",
                links = Array.Empty<object>(),
                title = "Test Collection d45537668d06",
                extent = new
                {
                    spatial = new
                    {
                        bbox = new object[]
            {
new object[]
{
-180,
-90,
180,
90
}
            },
                    },
                    temporal = new
                    {
                        interval = new object[]
            {
new object[]
{
"2020-01-01T00:00:00Z"
}
            },
                    },
                },
                license = "CC-BY-4.0",
            });
            Operation operation = client.CreateCollection(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateCollection_StacCollectionOperationsCreate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                type = "Collection",
                id = "test-collection-d45537668d06",
                stac_version = "1.0.0",
                description = "A collection for integration tests purposes",
                links = Array.Empty<object>(),
                title = "Test Collection d45537668d06",
                extent = new
                {
                    spatial = new
                    {
                        bbox = new object[]
            {
new object[]
{
-180,
-90,
180,
90
}
            },
                    },
                    temporal = new
                    {
                        interval = new object[]
            {
new object[]
{
"2020-01-01T00:00:00Z"
}
            },
                    },
                },
                license = "CC-BY-4.0",
            });
            Operation operation = await client.CreateCollectionAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateCollection_StacCollectionOperationsCreate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            StacCollectionModel body = new StacCollectionModel("test-collection-d45537668d06", "A collection for integration tests purposes", Array.Empty<StacLink>(), "CC-BY-4.0", new StacExtent(new SpatialExtent
            {
                Bbox = { new double[] { -180, -90, 180, 90 } },
            }, new TimeInterval(new IList<string>[]
            {
new string[]{"2020-01-01T00:00:00Z"}
            })))
            {
                StacVersion = "1.0.0",
                Title = "Test Collection d45537668d06",
                Type = "Collection",
            };
            Operation operation = client.CreateCollection(WaitUntil.Completed, body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateCollection_StacCollectionOperationsCreate_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            StacCollectionModel body = new StacCollectionModel("test-collection-d45537668d06", "A collection for integration tests purposes", Array.Empty<StacLink>(), "CC-BY-4.0", new StacExtent(new SpatialExtent
            {
                Bbox = { new double[] { -180, -90, 180, 90 } },
            }, new TimeInterval(new IList<string>[]
            {
new string[]{"2020-01-01T00:00:00Z"}
            })))
            {
                StacVersion = "1.0.0",
                Title = "Test Collection d45537668d06",
                Type = "Collection",
            };
            Operation operation = await client.CreateCollectionAsync(WaitUntil.Completed, body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateOrReplaceCollection_StacCollectionOperationsCreateOrReplace()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                type = "Collection",
                id = "test-collection-d45537668d06",
                stac_version = "1.0.0",
                description = "A collection for integration tests purposes",
                links = Array.Empty<object>(),
                title = "Test Collection d45537668d06",
                extent = new
                {
                    spatial = new
                    {
                        bbox = new object[]
            {
new object[]
{
-180,
-90,
180,
90
}
            },
                    },
                    temporal = new
                    {
                        interval = new object[]
            {
new object[]
{
"2020-01-01T00:00:00Z"
}
            },
                    },
                },
                license = "CC-BY-4.0",
            });
            Operation operation = client.CreateOrReplaceCollection(WaitUntil.Completed, "test-collection-568725878606", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateOrReplaceCollection_StacCollectionOperationsCreateOrReplace_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                type = "Collection",
                id = "test-collection-d45537668d06",
                stac_version = "1.0.0",
                description = "A collection for integration tests purposes",
                links = Array.Empty<object>(),
                title = "Test Collection d45537668d06",
                extent = new
                {
                    spatial = new
                    {
                        bbox = new object[]
            {
new object[]
{
-180,
-90,
180,
90
}
            },
                    },
                    temporal = new
                    {
                        interval = new object[]
            {
new object[]
{
"2020-01-01T00:00:00Z"
}
            },
                    },
                },
                license = "CC-BY-4.0",
            });
            Operation operation = await client.CreateOrReplaceCollectionAsync(WaitUntil.Completed, "test-collection-568725878606", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateOrReplaceCollection_StacCollectionOperationsCreateOrReplace_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            StacCollectionModel body = new StacCollectionModel("test-collection-d45537668d06", "A collection for integration tests purposes", Array.Empty<StacLink>(), "CC-BY-4.0", new StacExtent(new SpatialExtent
            {
                Bbox = { new double[] { -180, -90, 180, 90 } },
            }, new TimeInterval(new IList<string>[]
            {
new string[]{"2020-01-01T00:00:00Z"}
            })))
            {
                StacVersion = "1.0.0",
                Title = "Test Collection d45537668d06",
                Type = "Collection",
            };
            Operation operation = client.CreateOrReplaceCollection(WaitUntil.Completed, "test-collection-568725878606", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateOrReplaceCollection_StacCollectionOperationsCreateOrReplace_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            StacCollectionModel body = new StacCollectionModel("test-collection-d45537668d06", "A collection for integration tests purposes", Array.Empty<StacLink>(), "CC-BY-4.0", new StacExtent(new SpatialExtent
            {
                Bbox = { new double[] { -180, -90, 180, 90 } },
            }, new TimeInterval(new IList<string>[]
            {
new string[]{"2020-01-01T00:00:00Z"}
            })))
            {
                StacVersion = "1.0.0",
                Title = "Test Collection d45537668d06",
                Type = "Collection",
            };
            Operation operation = await client.CreateOrReplaceCollectionAsync(WaitUntil.Completed, "test-collection-568725878606", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_DeleteCollection_StacCollectionOperationsDelete()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Operation operation = client.DeleteCollection(WaitUntil.Completed, "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_DeleteCollection_StacCollectionOperationsDelete_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Operation operation = await client.DeleteCollectionAsync(WaitUntil.Completed, "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateItem_StacItemsCreate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "{{itemId}}",
                bbox = new object[]
            {
-80.627296,
27.997976,
-80.560208,
28.064522
            },
                type = "Feature",
                links = Array.Empty<object>(),
                assets = new
                {
                    sample_external = new
                    {
                        title = "Sample external image",
                        href = "https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png",
                        type = "image/png",
                        roles = new object[]
            {
"tiles"
            },
                    },
                },
                geometry = new
                {
                    type = "Polygon",
                    coordinates = new object[]
            {
new object[]
{
new object[]
{
-80.560478,
27.997976
},
new object[]
{
-80.560208,
28.064325
},
new object[]
{
-80.627067,
28.064522
},
new object[]
{
-80.627296,
27.998174
},
new object[]
{
-80.560478,
27.997976
}
}
            },
                },
                collection = "{{collectionId}}",
                properties = new
                {
                    gsd = 0.6F,
                    datetime = "2019-12-15T00:00:00Z",
                },
                stac_version = "1.0.0",
                stac_extensions = new object[]
            {
"https://stac-extensions.github.io/eo/v1.0.0/schema.json",
"https://stac-extensions.github.io/projection/v1.0.0/schema.json"
            },
            });
            Operation operation = client.CreateItem(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateItem_StacItemsCreate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "{{itemId}}",
                bbox = new object[]
            {
-80.627296,
27.997976,
-80.560208,
28.064522
            },
                type = "Feature",
                links = Array.Empty<object>(),
                assets = new
                {
                    sample_external = new
                    {
                        title = "Sample external image",
                        href = "https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png",
                        type = "image/png",
                        roles = new object[]
            {
"tiles"
            },
                    },
                },
                geometry = new
                {
                    type = "Polygon",
                    coordinates = new object[]
            {
new object[]
{
new object[]
{
-80.560478,
27.997976
},
new object[]
{
-80.560208,
28.064325
},
new object[]
{
-80.627067,
28.064522
},
new object[]
{
-80.627296,
27.998174
},
new object[]
{
-80.560478,
27.997976
}
}
            },
                },
                collection = "{{collectionId}}",
                properties = new
                {
                    gsd = 0.6F,
                    datetime = "2019-12-15T00:00:00Z",
                },
                stac_version = "1.0.0",
                stac_extensions = new object[]
            {
"https://stac-extensions.github.io/eo/v1.0.0/schema.json",
"https://stac-extensions.github.io/projection/v1.0.0/schema.json"
            },
            });
            Operation operation = await client.CreateItemAsync(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateItem_StacItemsCreate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            StacItemOrItemCollection body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
            {
new IList<double>[]
{
new double[]{-80.560478, 27.997976},
new double[]{-80.560208, 28.064325},
new double[]{-80.627067, 28.064522},
new double[]{-80.627296, 27.998174},
new double[]{-80.560478, 27.997976}
}
            }), new double[] { -80.627296, 27.997976, -80.560208, 28.064522 }, "{{itemId}}", new ItemProperties("2019-12-15T00:00:00Z")
            {
                Gsd = 0.6F,
            }, new Dictionary<string, StacAsset>
            {
                ["sample_external"] = new StacAsset("https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png")
                {
                    Title = "Sample external image",
                    Type = "image/png",
                    Roles = { "tiles" },
                }
            })
            {
                Collection = "{{collectionId}}",
                StacVersion = "1.0.0",
                Links = { },
                StacExtensions = { "https://stac-extensions.github.io/eo/v1.0.0/schema.json", "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
            };
            Operation operation = client.CreateItem(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateItem_StacItemsCreate_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            StacItemOrItemCollection body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
            {
new IList<double>[]
{
new double[]{-80.560478, 27.997976},
new double[]{-80.560208, 28.064325},
new double[]{-80.627067, 28.064522},
new double[]{-80.627296, 27.998174},
new double[]{-80.560478, 27.997976}
}
            }), new double[] { -80.627296, 27.997976, -80.560208, 28.064522 }, "{{itemId}}", new ItemProperties("2019-12-15T00:00:00Z")
            {
                Gsd = 0.6F,
            }, new Dictionary<string, StacAsset>
            {
                ["sample_external"] = new StacAsset("https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png")
                {
                    Title = "Sample external image",
                    Type = "image/png",
                    Roles = { "tiles" },
                }
            })
            {
                Collection = "{{collectionId}}",
                StacVersion = "1.0.0",
                Links = { },
                StacExtensions = { "https://stac-extensions.github.io/eo/v1.0.0/schema.json", "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
            };
            Operation operation = await client.CreateItemAsync(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateOrReplaceItem_StacItemsCreateOrReplace()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "{{itemId}}",
                bbox = new object[]
            {
-80.627296,
27.997976,
-80.560208,
28.064522
            },
                type = "Feature",
                links = Array.Empty<object>(),
                assets = new
                {
                    sample_external = new
                    {
                        title = "Sample external image",
                        href = "https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png",
                        type = "image/png",
                        roles = new object[]
            {
"tiles"
            },
                    },
                    sample_user = new
                    {
                        href = "https://sample.blob.core.windows.net/samples/4MB.jp2",
                        title = "Sample storage account Image (4MB)",
                        type = "image/jp2",
                        roles = new object[]
            {
"data"
            },
                    },
                },
                geometry = new
                {
                    type = "Polygon",
                    coordinates = new object[]
            {
new object[]
{
new object[]
{
-80.560478,
27.997976
},
new object[]
{
-80.560208,
28.064325
},
new object[]
{
-80.627067,
28.064522
},
new object[]
{
-80.627296,
27.998174
},
new object[]
{
-80.560478,
27.997976
}
}
            },
                },
                collection = "{{collectionId}}",
                properties = new
                {
                    gsd = 0.6F,
                    datetime = "2023-12-15T00:00:00Z",
                },
                stac_version = "1.0.0",
                stac_extensions = new object[]
            {
"https://stac-extensions.github.io/eo/v1.0.0/schema.json",
"https://stac-extensions.github.io/projection/v1.0.0/schema.json"
            },
            });
            Operation operation = client.CreateOrReplaceItem(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateOrReplaceItem_StacItemsCreateOrReplace_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "{{itemId}}",
                bbox = new object[]
            {
-80.627296,
27.997976,
-80.560208,
28.064522
            },
                type = "Feature",
                links = Array.Empty<object>(),
                assets = new
                {
                    sample_external = new
                    {
                        title = "Sample external image",
                        href = "https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png",
                        type = "image/png",
                        roles = new object[]
            {
"tiles"
            },
                    },
                    sample_user = new
                    {
                        href = "https://sample.blob.core.windows.net/samples/4MB.jp2",
                        title = "Sample storage account Image (4MB)",
                        type = "image/jp2",
                        roles = new object[]
            {
"data"
            },
                    },
                },
                geometry = new
                {
                    type = "Polygon",
                    coordinates = new object[]
            {
new object[]
{
new object[]
{
-80.560478,
27.997976
},
new object[]
{
-80.560208,
28.064325
},
new object[]
{
-80.627067,
28.064522
},
new object[]
{
-80.627296,
27.998174
},
new object[]
{
-80.560478,
27.997976
}
}
            },
                },
                collection = "{{collectionId}}",
                properties = new
                {
                    gsd = 0.6F,
                    datetime = "2023-12-15T00:00:00Z",
                },
                stac_version = "1.0.0",
                stac_extensions = new object[]
            {
"https://stac-extensions.github.io/eo/v1.0.0/schema.json",
"https://stac-extensions.github.io/projection/v1.0.0/schema.json"
            },
            });
            Operation operation = await client.CreateOrReplaceItemAsync(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_CreateOrReplaceItem_StacItemsCreateOrReplace_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            StacItemModel body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
            {
new IList<double>[]
{
new double[]{-80.560478, 27.997976},
new double[]{-80.560208, 28.064325},
new double[]{-80.627067, 28.064522},
new double[]{-80.627296, 27.998174},
new double[]{-80.560478, 27.997976}
}
            }), new double[] { -80.627296, 27.997976, -80.560208, 28.064522 }, "{{itemId}}", new ItemProperties("2023-12-15T00:00:00Z")
            {
                Gsd = 0.6F,
            }, new Dictionary<string, StacAsset>
            {
                ["sample_external"] = new StacAsset("https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png")
                {
                    Title = "Sample external image",
                    Type = "image/png",
                    Roles = { "tiles" },
                },
                ["sample_user"] = new StacAsset("https://sample.blob.core.windows.net/samples/4MB.jp2")
                {
                    Title = "Sample storage account Image (4MB)",
                    Type = "image/jp2",
                    Roles = { "data" },
                }
            })
            {
                Collection = "{{collectionId}}",
                StacVersion = "1.0.0",
                Links = { },
                StacExtensions = { "https://stac-extensions.github.io/eo/v1.0.0/schema.json", "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
            };
            Operation operation = client.CreateOrReplaceItem(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_CreateOrReplaceItem_StacItemsCreateOrReplace_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            StacItemModel body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
            {
new IList<double>[]
{
new double[]{-80.560478, 27.997976},
new double[]{-80.560208, 28.064325},
new double[]{-80.627067, 28.064522},
new double[]{-80.627296, 27.998174},
new double[]{-80.560478, 27.997976}
}
            }), new double[] { -80.627296, 27.997976, -80.560208, 28.064522 }, "{{itemId}}", new ItemProperties("2023-12-15T00:00:00Z")
            {
                Gsd = 0.6F,
            }, new Dictionary<string, StacAsset>
            {
                ["sample_external"] = new StacAsset("https://learn.microsoft.com/en-us/azure/remote-rendering/samples/media/sample-model.png")
                {
                    Title = "Sample external image",
                    Type = "image/png",
                    Roles = { "tiles" },
                },
                ["sample_user"] = new StacAsset("https://sample.blob.core.windows.net/samples/4MB.jp2")
                {
                    Title = "Sample storage account Image (4MB)",
                    Type = "image/jp2",
                    Roles = { "data" },
                }
            })
            {
                Collection = "{{collectionId}}",
                StacVersion = "1.0.0",
                Links = { },
                StacExtensions = { "https://stac-extensions.github.io/eo/v1.0.0/schema.json", "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
            };
            Operation operation = await client.CreateOrReplaceItemAsync(WaitUntil.Completed, "36fcb8da-9b15-49e0-b400-0d2e751e2061", "f1b3b3b3-0b3b-4b3b-8b3b-3b3b3b3b3b3b", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_UpdateItem_StacItemsUpdate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "{{itemId}}",
                collection = "{{collectionId}}",
                type = "Feature",
                assets = new
                {
                    sample_user = new
                    {
                        href = "https://sample.blob.core.windows.net/samples/4MB.jp2",
                        title = "Sample storage account Image (4MB)",
                        type = "image/jp2",
                        roles = new object[]
            {
"data"
            },
                    },
                },
                properties = new
                {
                    datetime = "2021-12-15T00:00:00Z",
                },
            });
            Operation operation = client.UpdateItem(WaitUntil.Completed, "{{collectionId}}", "{{itemId}}", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_UpdateItem_StacItemsUpdate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "{{itemId}}",
                collection = "{{collectionId}}",
                type = "Feature",
                assets = new
                {
                    sample_user = new
                    {
                        href = "https://sample.blob.core.windows.net/samples/4MB.jp2",
                        title = "Sample storage account Image (4MB)",
                        type = "image/jp2",
                        roles = new object[]
            {
"data"
            },
                    },
                },
                properties = new
                {
                    datetime = "2021-12-15T00:00:00Z",
                },
            });
            Operation operation = await client.UpdateItemAsync(WaitUntil.Completed, "{{collectionId}}", "{{itemId}}", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacApiClient_DeleteItem_StacItemsDelete()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Operation operation = client.DeleteItem(WaitUntil.Completed, "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacApiClient_DeleteItem_StacItemsDelete_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacApiClient client = new StacApiClient(endpoint, credential);

            Operation operation = await client.DeleteItemAsync(WaitUntil.Completed, "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622");
        }
    }
}
