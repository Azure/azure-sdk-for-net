// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.PlanetaryComputer.Samples
{
    public partial class Samples_StacItemTilerClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetBounds_TilerBoundGetAll()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetBounds("{{collectionId}}", "{{itemId}}", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("bounds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetBounds_TilerBoundGetAll_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetBoundsAsync("{{collectionId}}", "{{itemId}}", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("bounds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetBounds_TilerBoundGetAll_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BoundsResult> response = client.GetBounds("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetBounds_TilerBoundGetAll_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BoundsResult> response = await client.GetBoundsAsync("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetInfo_TilerInfoOperationsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetInfo("{{collectionId}}", "{{itemId}}", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("bounds")[0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("dtype").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetInfo_TilerInfoOperationsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetInfoAsync("{{collectionId}}", "{{itemId}}", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("bounds")[0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("dtype").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetInfo_TilerInfoOperationsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<InfoOperationResult> response = client.GetInfo("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetInfo_TilerInfoOperationsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<InfoOperationResult> response = await client.GetInfoAsync("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetInfoGeoJson_TilerInfoGeoJsonOperationsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetInfoGeoJson("{{collectionId}}", "{{itemId}}", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").GetProperty("bounds")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").GetProperty("dtype").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetInfoGeoJson_TilerInfoGeoJsonOperationsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetInfoGeoJsonAsync("{{collectionId}}", "{{itemId}}", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").GetProperty("bounds")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").GetProperty("dtype").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetInfoGeoJson_TilerInfoGeoJsonOperationsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<TilerInfoGeoJsonFeature> response = client.GetInfoGeoJson("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetInfoGeoJson_TilerInfoGeoJsonOperationsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<TilerInfoGeoJsonFeature> response = await client.GetInfoGeoJsonAsync("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetAvailableAssets_TilerAvailableAssetsGetAll()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetAvailableAssets("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetAvailableAssets_TilerAvailableAssetsGetAll_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetAvailableAssetsAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetAvailableAssets_TilerAvailableAssetsGetAll_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<IReadOnlyList<string>> response = client.GetAvailableAssets("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetAvailableAssets_TilerAvailableAssetsGetAll_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<IReadOnlyList<string>> response = await client.GetAvailableAssetsAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "c1007ec2-3ddc-4335-9edd-b1c26b1b4c92");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetAssetStatistics_TilerAssetStatisticsGetAll()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetAssetStatistics("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("mean").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("sum").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("std").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("median").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("majority").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("minority").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("unique").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("histogram")[0][0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("valid_percent").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("masked_pixels").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("valid_pixels").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("percentile_2").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("percentile_98").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetAssetStatistics_TilerAssetStatisticsGetAll_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetAssetStatisticsAsync("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("mean").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("sum").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("std").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("median").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("majority").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("minority").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("unique").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("histogram")[0][0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("valid_percent").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("masked_pixels").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("valid_pixels").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("percentile_2").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").GetProperty("percentile_98").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetAssetStatistics_TilerAssetStatisticsGetAll_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<AssetStatisticsResult> response = client.GetAssetStatistics("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetAssetStatistics_TilerAssetStatisticsGetAll_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<AssetStatisticsResult> response = await client.GetAssetStatisticsAsync("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetStatistics_TilerStatisticsGetAll()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetStatistics("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetStatistics_TilerStatisticsGetAll_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetStatisticsAsync("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetStatistics_TilerStatisticsGetAll_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<StatisticsResult> response = client.GetStatistics("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetStatistics_TilerStatisticsGetAll_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<StatisticsResult> response = await client.GetStatisticsAsync("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetGeoJsonStatistics_TilerGeoJsonStatisticsGetAll()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                type = "FeatureCollection",
                features = new object[]
            {
new
{
type = "Feature",
stac_version = "1.0.0",
stac_extensions = new object[]
{
"https://stac-extensions.github.io/projection/v1.0.0/schema.json"
},
id = "test-item-0df36a74d7ed",
geometry = new
{
type = "Polygon",
coordinates = new object[]
{
new object[]
{
new object[]
{
-65.75386020444417,
18.252659831448764
},
new object[]
{
-65.75385878091376,
18.252569552371305
},
new object[]
{
-65.75376429311993,
18.252570912467043
},
new object[]
{
-65.75376571660163,
18.252661191551685
},
new object[]
{
-65.75386020444417,
18.252659831448764
}
}
},
},
bbox = new object[]
{
-65.75386020444417,
18.252569552371305,
-65.75376429311993,
18.252661191551685
},
properties = new
{
datetime = "2024-11-06T22:49:19.098983Z",
},
links = new object[]
{
new
{
rel = "self",
href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json",
type = "application/json",
}
},
assets = new
{
data = new
{
href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif",
type = "image/tiff; application=geotiff",
title = "Test data",
roles = new object[]
{
"data"
},
},
},
collection = "test-collection-0df36a74d7ed",
}
            },
            });
            Response response = client.GetGeoJsonStatistics("{{collectionId}}", "{{itemId}}", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetGeoJsonStatistics_TilerGeoJsonStatisticsGetAll_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                type = "FeatureCollection",
                features = new object[]
            {
new
{
type = "Feature",
stac_version = "1.0.0",
stac_extensions = new object[]
{
"https://stac-extensions.github.io/projection/v1.0.0/schema.json"
},
id = "test-item-0df36a74d7ed",
geometry = new
{
type = "Polygon",
coordinates = new object[]
{
new object[]
{
new object[]
{
-65.75386020444417,
18.252659831448764
},
new object[]
{
-65.75385878091376,
18.252569552371305
},
new object[]
{
-65.75376429311993,
18.252570912467043
},
new object[]
{
-65.75376571660163,
18.252661191551685
},
new object[]
{
-65.75386020444417,
18.252659831448764
}
}
},
},
bbox = new object[]
{
-65.75386020444417,
18.252569552371305,
-65.75376429311993,
18.252661191551685
},
properties = new
{
datetime = "2024-11-06T22:49:19.098983Z",
},
links = new object[]
{
new
{
rel = "self",
href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json",
type = "application/json",
}
},
assets = new
{
data = new
{
href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif",
type = "image/tiff; application=geotiff",
title = "Test data",
roles = new object[]
{
"data"
},
},
},
collection = "test-collection-0df36a74d7ed",
}
            },
            });
            Response response = await client.GetGeoJsonStatisticsAsync("{{collectionId}}", "{{itemId}}", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").GetProperty("datetime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetGeoJsonStatistics_TilerGeoJsonStatisticsGetAll_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            ItemCollectionModel body = new ItemCollectionModel(new StacItemModel[]
            {
new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
{
new IList<double>[]
{
new double[]{-65.75386020444417, 18.252659831448764},
new double[]{-65.75385878091376, 18.252569552371305},
new double[]{-65.75376429311993, 18.252570912467043},
new double[]{-65.75376571660163, 18.252661191551685},
new double[]{-65.75386020444417, 18.252659831448764}
}
}), new double[]{-65.75386020444417, 18.252569552371305, -65.75376429311993, 18.252661191551685}, "test-item-0df36a74d7ed", new ItemProperties("2024-11-06T22:49:19.098983Z"), new Dictionary<string, StacAsset>
{
["data"] = new StacAsset("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif")
{
Title = "Test data",
Type = "image/tiff; application=geotiff",
Roles = {"data"},
}
})
{
Collection = "test-collection-0df36a74d7ed",
StacVersion = "1.0.0",
Links = {new StacLink("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json")
{
Rel = "self",
Type = LinkType.ApplicationJson,
}},
StacExtensions = {"https://stac-extensions.github.io/projection/v1.0.0/schema.json"},
}
            });
            Response<GeoJsonStatisticsItemCollectionResult> response = client.GetGeoJsonStatistics("{{collectionId}}", "{{itemId}}", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetGeoJsonStatistics_TilerGeoJsonStatisticsGetAll_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            ItemCollectionModel body = new ItemCollectionModel(new StacItemModel[]
            {
new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
{
new IList<double>[]
{
new double[]{-65.75386020444417, 18.252659831448764},
new double[]{-65.75385878091376, 18.252569552371305},
new double[]{-65.75376429311993, 18.252570912467043},
new double[]{-65.75376571660163, 18.252661191551685},
new double[]{-65.75386020444417, 18.252659831448764}
}
}), new double[]{-65.75386020444417, 18.252569552371305, -65.75376429311993, 18.252661191551685}, "test-item-0df36a74d7ed", new ItemProperties("2024-11-06T22:49:19.098983Z"), new Dictionary<string, StacAsset>
{
["data"] = new StacAsset("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif")
{
Title = "Test data",
Type = "image/tiff; application=geotiff",
Roles = {"data"},
}
})
{
Collection = "test-collection-0df36a74d7ed",
StacVersion = "1.0.0",
Links = {new StacLink("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json")
{
Rel = "self",
Type = LinkType.ApplicationJson,
}},
StacExtensions = {"https://stac-extensions.github.io/projection/v1.0.0/schema.json"},
}
            });
            Response<GeoJsonStatisticsItemCollectionResult> response = await client.GetGeoJsonStatisticsAsync("{{collectionId}}", "{{itemId}}", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetTile_TilerTilesGetZxyScalexFormat()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetTile("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 12F, 47.6062F, 17F, 1F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetTile_TilerTilesGetZxyScalexFormat_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetTileAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 12F, 47.6062F, 17F, 1F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetTile_TilerTilesGetZxyScalexFormat_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = client.GetTile("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 12F, 47.6062F, 17F, 1F, "png", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetTile_TilerTilesGetZxyScalexFormat_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = await client.GetTileAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 12F, 47.6062F, 17F, 1F, "png", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetTileWithMatrixSet_TilerTileMatrixSetsGetZxyScalexFormat()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetTileWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", 12F, 47.6062F, 17F, 1F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetTileWithMatrixSet_TilerTileMatrixSetsGetZxyScalexFormat_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetTileWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", 12F, 47.6062F, 17F, 1F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetTileWithMatrixSet_TilerTileMatrixSetsGetZxyScalexFormat_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = client.GetTileWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", 12F, 47.6062F, 17F, 1F, "png", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetTileWithMatrixSet_TilerTileMatrixSetsGetZxyScalexFormat_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = await client.GetTileWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", 12F, 47.6062F, 17F, 1F, "png", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetTileJson_TilerTileJsonOperationsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetTileJson("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("tiles")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetTileJson_TilerTileJsonOperationsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetTileJsonAsync("{{collectionId}}", "{{itemId}}", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("tiles")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetTileJson_TilerTileJsonOperationsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<TileJsonResult> response = client.GetTileJson("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetTileJson_TilerTileJsonOperationsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<TileJsonResult> response = await client.GetTileJsonAsync("{{collectionId}}", "{{itemId}}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetTileJsonWithMatrixSet_TilerTileJsonTileMatrixSetsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetTileJsonWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("tiles")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetTileJsonWithMatrixSet_TilerTileJsonTileMatrixSetsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetTileJsonWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("tiles")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetTileJsonWithMatrixSet_TilerTileJsonTileMatrixSetsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<TileJsonResult> response = client.GetTileJsonWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetTileJsonWithMatrixSet_TilerTileJsonTileMatrixSetsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<TileJsonResult> response = await client.GetTileJsonWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetWmtsCapabilities_TilerWmtsGetCapabilitiesXml()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetWmtsCapabilities("collectionId-0df36a74d7ed", "item-0df36a74d7ed", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetWmtsCapabilities_TilerWmtsGetCapabilitiesXml_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetWmtsCapabilitiesAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetWmtsCapabilities_TilerWmtsGetCapabilitiesXml_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<string> response = client.GetWmtsCapabilities("collectionId-0df36a74d7ed", "item-0df36a74d7ed");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetWmtsCapabilities_TilerWmtsGetCapabilitiesXml_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<string> response = await client.GetWmtsCapabilitiesAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetWmtsCapabilitiesWithMatrixSet_TilerWmtsTileMatrixSetsGetCapabilitiesXml()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetWmtsCapabilitiesWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetWmtsCapabilitiesWithMatrixSet_TilerWmtsTileMatrixSetsGetCapabilitiesXml_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetWmtsCapabilitiesWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetWmtsCapabilitiesWithMatrixSet_TilerWmtsTileMatrixSetsGetCapabilitiesXml_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<string> response = client.GetWmtsCapabilitiesWithMatrixSet("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetWmtsCapabilitiesWithMatrixSet_TilerWmtsTileMatrixSetsGetCapabilitiesXml_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<string> response = await client.GetWmtsCapabilitiesWithMatrixSetAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "WebMercatorQuad");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetPoint_TilerPointsGetLonLat()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetPoint("{{collectionId}}", "{{itemId}}", -65.75381224878205, 18.252615F, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("coordinates")[0].ToString());
            Console.WriteLine(result.GetProperty("values")[0].ToString());
            Console.WriteLine(result.GetProperty("band_names")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetPoint_TilerPointsGetLonLat_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetPointAsync("{{collectionId}}", "{{itemId}}", -65.75381224878205, 18.252615F, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("coordinates")[0].ToString());
            Console.WriteLine(result.GetProperty("values")[0].ToString());
            Console.WriteLine(result.GetProperty("band_names")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetPoint_TilerPointsGetLonLat_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<TitilerCoreModelsResponsesPoint> response = client.GetPoint("{{collectionId}}", "{{itemId}}", -65.75381224878205, 18.252615F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetPoint_TilerPointsGetLonLat_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<TitilerCoreModelsResponsesPoint> response = await client.GetPointAsync("{{collectionId}}", "{{itemId}}", -65.75381224878205, 18.252615F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetPreview_TilerPreviewsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetPreview("ESP-collection", "18S-2022", null, new string[] { "data" }, null, new string[] { "image|1,2,3" }, null, null, null, null, null, null, null, null, null, 400, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetPreview_TilerPreviewsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetPreviewAsync("ESP-collection", "18S-2022", null, new string[] { "data" }, null, new string[] { "image|1,2,3" }, null, null, null, null, null, null, null, null, null, 400, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetPreview_TilerPreviewsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = client.GetPreview("ESP-collection", "18S-2022", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetPreview_TilerPreviewsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = await client.GetPreviewAsync("ESP-collection", "18S-2022", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetPreviewWithFormat_TilerPreviewsGetFormat()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetPreviewWithFormat("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622", "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetPreviewWithFormat_TilerPreviewsGetFormat_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetPreviewWithFormatAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622", "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetPreviewWithFormat_TilerPreviewsGetFormat_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = client.GetPreviewWithFormat("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622", "png", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetPreviewWithFormat_TilerPreviewsGetFormat_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = await client.GetPreviewWithFormatAsync("c1007ec2-3ddc-4335-9edd-b1c26b1b4c92", "9bb31abd-91d6-4649-9c6f-beadbec7c622", "png", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetPart_TilerPartsGetMinxMinyMaxxMaxyFormat()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetPart("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetPart_TilerPartsGetMinxMinyMaxxMaxyFormat_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetPartAsync("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetPart_TilerPartsGetMinxMinyMaxxMaxyFormat_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = client.GetPart("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, "png", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetPart_TilerPartsGetMinxMinyMaxxMaxyFormat_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = await client.GetPartAsync("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, "png", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetPartWithDimensions_TilerPartsGetMinxMinyMaxxMaxyWidthxHeightFormat()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = client.GetPartWithDimensions("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, 4.1F, 0.08F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetPartWithDimensions_TilerPartsGetMinxMinyMaxxMaxyWidthxHeightFormat_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response response = await client.GetPartWithDimensionsAsync("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, 4.1F, 0.08F, "png", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_GetPartWithDimensions_TilerPartsGetMinxMinyMaxxMaxyWidthxHeightFormat_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = client.GetPartWithDimensions("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, 4.1F, 0.08F, "png", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_GetPartWithDimensions_TilerPartsGetMinxMinyMaxxMaxyWidthxHeightFormat_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            Response<BinaryData> response = await client.GetPartWithDimensionsAsync("naip", "naip_1m_2019_3857", -80.6273F, 27.997976F, -80.56021F, 28.064522F, 4.1F, 0.08F, "png", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_CropGeoJson_TilerGeoJsonsCropFormat()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                type = "Polygon",
                coordinates = new object[]
            {
new object[]
{
new object[]
{
-65.75386020444417,
18.252659831448764
},
new object[]
{
-65.75385878091376,
18.252569552371305
},
new object[]
{
-65.75376429311993,
18.252570912467043
},
new object[]
{
-65.75376571660163,
18.252661191551685
},
new object[]
{
-65.75386020444417,
18.252659831448764
}
}
            },
            });
            Response response = client.CropGeoJson("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "png", null, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_CropGeoJson_TilerGeoJsonsCropFormat_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                type = "Polygon",
                coordinates = new object[]
            {
new object[]
{
new object[]
{
-65.75386020444417,
18.252659831448764
},
new object[]
{
-65.75385878091376,
18.252569552371305
},
new object[]
{
-65.75376429311993,
18.252570912467043
},
new object[]
{
-65.75376571660163,
18.252661191551685
},
new object[]
{
-65.75386020444417,
18.252659831448764
}
}
            },
            });
            Response response = await client.CropGeoJsonAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "png", null, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_CropGeoJson_TilerGeoJsonsCropFormat_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            GeoJsonGeometry body = new GeoJsonPolygon(new IList<IList<double>>[]
            {
new IList<double>[]
{
new double[]{-65.75386020444417, 18.252659831448764},
new double[]{-65.75385878091376, 18.252569552371305},
new double[]{-65.75376429311993, 18.252570912467043},
new double[]{-65.75376571660163, 18.252661191551685},
new double[]{-65.75386020444417, 18.252659831448764}
}
            });
            Response<BinaryData> response = client.CropGeoJson("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "png", null, body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_CropGeoJson_TilerGeoJsonsCropFormat_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            GeoJsonGeometry body = new GeoJsonPolygon(new IList<IList<double>>[]
            {
new IList<double>[]
{
new double[]{-65.75386020444417, 18.252659831448764},
new double[]{-65.75385878091376, 18.252569552371305},
new double[]{-65.75376429311993, 18.252570912467043},
new double[]{-65.75376571660163, 18.252661191551685},
new double[]{-65.75386020444417, 18.252659831448764}
}
            });
            Response<BinaryData> response = await client.CropGeoJsonAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", "png", null, body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_CropGeoJsonWithDimensions_TilerGeoJsonsCropWidthxHeightFormat()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                type = "Feature",
                stac_version = "1.0.0",
                stac_extensions = new object[]
            {
"https://stac-extensions.github.io/projection/v1.0.0/schema.json"
            },
                id = "test-item-0df36a74d7ed",
                geometry = new
                {
                    type = "Polygon",
                    coordinates = new object[]
            {
new object[]
{
new object[]
{
-65.75386020444417,
18.252659831448764
},
new object[]
{
-65.75385878091376,
18.252569552371305
},
new object[]
{
-65.75376429311993,
18.252570912467043
},
new object[]
{
-65.75376571660163,
18.252661191551685
},
new object[]
{
-65.75386020444417,
18.252659831448764
}
}
            },
                },
                bbox = new object[]
            {
-65.75386020444417,
18.252569552371305,
-65.75376429311993,
18.252661191551685
            },
                properties = new
                {
                    datetime = "2024-11-06T22:49:19.098983Z",
                },
                links = new object[]
            {
new
{
rel = "self",
href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json",
type = "application/json",
}
            },
                assets = new
                {
                    data = new
                    {
                        href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif",
                        type = "image/tiff; application=geotiff",
                        title = "Test data",
                        roles = new object[]
            {
"data"
            },
                    },
                },
                collection = "test-collection-0df36a74d7ed",
            });
            Response response = client.CropGeoJsonWithDimensions("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 4.1F, 0.08F, "png", null, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_CropGeoJsonWithDimensions_TilerGeoJsonsCropWidthxHeightFormat_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                type = "Feature",
                stac_version = "1.0.0",
                stac_extensions = new object[]
            {
"https://stac-extensions.github.io/projection/v1.0.0/schema.json"
            },
                id = "test-item-0df36a74d7ed",
                geometry = new
                {
                    type = "Polygon",
                    coordinates = new object[]
            {
new object[]
{
new object[]
{
-65.75386020444417,
18.252659831448764
},
new object[]
{
-65.75385878091376,
18.252569552371305
},
new object[]
{
-65.75376429311993,
18.252570912467043
},
new object[]
{
-65.75376571660163,
18.252661191551685
},
new object[]
{
-65.75386020444417,
18.252659831448764
}
}
            },
                },
                bbox = new object[]
            {
-65.75386020444417,
18.252569552371305,
-65.75376429311993,
18.252661191551685
            },
                properties = new
                {
                    datetime = "2024-11-06T22:49:19.098983Z",
                },
                links = new object[]
            {
new
{
rel = "self",
href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json",
type = "application/json",
}
            },
                assets = new
                {
                    data = new
                    {
                        href = "https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif",
                        type = "image/tiff; application=geotiff",
                        title = "Test data",
                        roles = new object[]
            {
"data"
            },
                    },
                },
                collection = "test-collection-0df36a74d7ed",
            });
            Response response = await client.CropGeoJsonWithDimensionsAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 4.1F, 0.08F, "png", null, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StacItemTilerClient_CropGeoJsonWithDimensions_TilerGeoJsonsCropWidthxHeightFormat_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            StacItemModel body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
            {
new IList<double>[]
{
new double[]{-65.75386020444417, 18.252659831448764},
new double[]{-65.75385878091376, 18.252569552371305},
new double[]{-65.75376429311993, 18.252570912467043},
new double[]{-65.75376571660163, 18.252661191551685},
new double[]{-65.75386020444417, 18.252659831448764}
}
            }), new double[] { -65.75386020444417, 18.252569552371305, -65.75376429311993, 18.252661191551685 }, "test-item-0df36a74d7ed", new ItemProperties("2024-11-06T22:49:19.098983Z"), new Dictionary<string, StacAsset>
            {
                ["data"] = new StacAsset("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif")
                {
                    Title = "Test data",
                    Type = "image/tiff; application=geotiff",
                    Roles = { "data" },
                }
            })
            {
                Collection = "test-collection-0df36a74d7ed",
                StacVersion = "1.0.0",
                Links = {new StacLink("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json")
{
Rel = "self",
Type = LinkType.ApplicationJson,
}},
                StacExtensions = { "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
            };
            Response<BinaryData> response = client.CropGeoJsonWithDimensions("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 4.1F, 0.08F, "png", null, body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StacItemTilerClient_CropGeoJsonWithDimensions_TilerGeoJsonsCropWidthxHeightFormat_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            StacItemTilerClient client = new StacItemTilerClient(endpoint, credential);

            StacItemModel body = new StacItemModel(new GeoJsonPolygon(new IList<IList<double>>[]
            {
new IList<double>[]
{
new double[]{-65.75386020444417, 18.252659831448764},
new double[]{-65.75385878091376, 18.252569552371305},
new double[]{-65.75376429311993, 18.252570912467043},
new double[]{-65.75376571660163, 18.252661191551685},
new double[]{-65.75386020444417, 18.252659831448764}
}
            }), new double[] { -65.75386020444417, 18.252569552371305, -65.75376429311993, 18.252661191551685 }, "test-item-0df36a74d7ed", new ItemProperties("2024-11-06T22:49:19.098983Z"), new Dictionary<string, StacAsset>
            {
                ["data"] = new StacAsset("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/asset.tif")
                {
                    Title = "Test data",
                    Type = "image/tiff; application=geotiff",
                    Roles = { "data" },
                }
            })
            {
                Collection = "test-collection-0df36a74d7ed",
                StacVersion = "1.0.0",
                Links = {new StacLink("https://spatiocitest.blob.core.windows.net/test-data-0df36a74d7ed/test-item.json")
{
Rel = "self",
Type = LinkType.ApplicationJson,
}},
                StacExtensions = { "https://stac-extensions.github.io/projection/v1.0.0/schema.json" },
            };
            Response<BinaryData> response = await client.CropGeoJsonWithDimensionsAsync("collectionId-0df36a74d7ed", "item-0df36a74d7ed", 4.1F, 0.08F, "png", null, body);
        }
    }
}
