// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.PlanetaryComputer.Samples
{
    public partial class Samples_MapLegendsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_MapLegendsClient_GetClassmapLegend_MapsClassmapLegendsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response response = client.GetClassmapLegend("mtbs-severity", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_MapLegendsClient_GetClassmapLegend_MapsClassmapLegendsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response response = await client.GetClassmapLegendAsync("mtbs-severity", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_MapLegendsClient_GetClassmapLegend_MapsClassmapLegendsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response<ClassmapLegendResult> response = client.GetClassmapLegend("mtbs-severity");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_MapLegendsClient_GetClassmapLegend_MapsClassmapLegendsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response<ClassmapLegendResult> response = await client.GetClassmapLegendAsync("mtbs-severity");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_MapLegendsClient_GetLegend_MapsLegendsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response response = client.GetLegend("rdylgn", 0.08, 4.1, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_MapLegendsClient_GetLegend_MapsLegendsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response response = await client.GetLegendAsync("rdylgn", 0.08, 4.1, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_MapLegendsClient_GetLegend_MapsLegendsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response<BinaryData> response = client.GetLegend("rdylgn");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_MapLegendsClient_GetLegend_MapsLegendsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response<BinaryData> response = await client.GetLegendAsync("rdylgn");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_MapLegendsClient_GetIntervalLegend_MapsIntervalLegendsGetByClassmapName()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response response = client.GetIntervalLegend("modis-64A1", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0][0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_MapLegendsClient_GetIntervalLegend_MapsIntervalLegendsGetByClassmapName_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response response = await client.GetIntervalLegendAsync("modis-64A1", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0][0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_MapLegendsClient_GetIntervalLegend_MapsIntervalLegendsGetByClassmapName_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response<IReadOnlyList<IList<BinaryData>>> response = client.GetIntervalLegend("modis-64A1");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_MapLegendsClient_GetIntervalLegend_MapsIntervalLegendsGetByClassmapName_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            MapLegendsClient client = new MapLegendsClient(endpoint, credential);

            Response<IReadOnlyList<IList<BinaryData>>> response = await client.GetIntervalLegendAsync("modis-64A1");
        }
    }
}
