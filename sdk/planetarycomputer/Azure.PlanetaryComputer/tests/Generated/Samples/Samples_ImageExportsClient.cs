// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.PlanetaryComputer.Samples
{
    public partial class Samples_ImageExportsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImageExportsClient_CreateStaticImage_TilerStaticImagesCreate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ImageExportsClient client = new ImageExportsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                geometry = new
                {
                    type = "Polygon",
                    coordinates = new object[]
            {
new object[]
{
new object[]
{
-79.09062791441062,
43.08554661560049
},
new object[]
{
-79.0629876337021,
43.08554661560049
},
new object[]
{
-79.0629876337021,
43.067969831431895
},
new object[]
{
-79.09062791441062,
43.067969831431895
},
new object[]
{
-79.09062791441062,
43.08554661560049
}
}
            },
                },
                cql = new object(),
                render_params = "assets=image&asset_bidx=image|1,2,3&collection=naip",
                cols = 1080,
                rows = 1080,
                showBranding = true,
            });
            Response response = client.CreateStaticImage("collectionId-23", null, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImageExportsClient_CreateStaticImage_TilerStaticImagesCreate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ImageExportsClient client = new ImageExportsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                geometry = new
                {
                    type = "Polygon",
                    coordinates = new object[]
            {
new object[]
{
new object[]
{
-79.09062791441062,
43.08554661560049
},
new object[]
{
-79.0629876337021,
43.08554661560049
},
new object[]
{
-79.0629876337021,
43.067969831431895
},
new object[]
{
-79.09062791441062,
43.067969831431895
},
new object[]
{
-79.09062791441062,
43.08554661560049
}
}
            },
                },
                cql = new object(),
                render_params = "assets=image&asset_bidx=image|1,2,3&collection=naip",
                cols = 1080,
                rows = 1080,
                showBranding = true,
            });
            Response response = await client.CreateStaticImageAsync("collectionId-23", null, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImageExportsClient_CreateStaticImage_TilerStaticImagesCreate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ImageExportsClient client = new ImageExportsClient(endpoint, credential);

            ImageContent body = new ImageContent(new CqlFilter(), "assets=image&asset_bidx=image|1,2,3&collection=naip", 1080, 1080)
            {
                Geometry = new GeoJsonPolygon(new IList<IList<double>>[]
            {
new IList<double>[]
{
new double[]{-79.09062791441062, 43.08554661560049},
new double[]{-79.0629876337021, 43.08554661560049},
new double[]{-79.0629876337021, 43.067969831431895},
new double[]{-79.09062791441062, 43.067969831431895},
new double[]{-79.09062791441062, 43.08554661560049}
}
            }),
                ShowBranding = true,
            };
            Response<BinaryData> response = client.CreateStaticImage("collectionId-23", null, body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImageExportsClient_CreateStaticImage_TilerStaticImagesCreate_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ImageExportsClient client = new ImageExportsClient(endpoint, credential);

            ImageContent body = new ImageContent(new CqlFilter(), "assets=image&asset_bidx=image|1,2,3&collection=naip", 1080, 1080)
            {
                Geometry = new GeoJsonPolygon(new IList<IList<double>>[]
            {
new IList<double>[]
{
new double[]{-79.09062791441062, 43.08554661560049},
new double[]{-79.0629876337021, 43.08554661560049},
new double[]{-79.0629876337021, 43.067969831431895},
new double[]{-79.09062791441062, 43.067969831431895},
new double[]{-79.09062791441062, 43.08554661560049}
}
            }),
                ShowBranding = true,
            };
            Response<BinaryData> response = await client.CreateStaticImageAsync("collectionId-23", null, body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImageExportsClient_GetStaticImage_TilerStaticImagesGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ImageExportsClient client = new ImageExportsClient(endpoint, credential);

            Response response = client.GetStaticImage("collectionId-23", "id-23", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImageExportsClient_GetStaticImage_TilerStaticImagesGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ImageExportsClient client = new ImageExportsClient(endpoint, credential);

            Response response = await client.GetStaticImageAsync("collectionId-23", "id-23", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImageExportsClient_GetStaticImage_TilerStaticImagesGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ImageExportsClient client = new ImageExportsClient(endpoint, credential);

            Response<BinaryData> response = client.GetStaticImage("collectionId-23", "id-23");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImageExportsClient_GetStaticImage_TilerStaticImagesGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ImageExportsClient client = new ImageExportsClient(endpoint, credential);

            Response<BinaryData> response = await client.GetStaticImageAsync("collectionId-23", "id-23");
        }
    }
}
