// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.PlanetaryComputer.Samples
{
    public partial class Samples_SharedAccessSignatureClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SharedAccessSignatureClient_GetToken_SasGetToken()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SharedAccessSignatureClient client = new SharedAccessSignatureClient(endpoint, credential);

            Response response = client.GetToken("weather-sample", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("msft:expiry").ToString());
            Console.WriteLine(result.GetProperty("token").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SharedAccessSignatureClient_GetToken_SasGetToken_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SharedAccessSignatureClient client = new SharedAccessSignatureClient(endpoint, credential);

            Response response = await client.GetTokenAsync("weather-sample", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("msft:expiry").ToString());
            Console.WriteLine(result.GetProperty("token").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SharedAccessSignatureClient_GetToken_SasGetToken_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SharedAccessSignatureClient client = new SharedAccessSignatureClient(endpoint, credential);

            Response<SasToken> response = client.GetToken("weather-sample");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SharedAccessSignatureClient_GetToken_SasGetToken_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SharedAccessSignatureClient client = new SharedAccessSignatureClient(endpoint, credential);

            Response<SasToken> response = await client.GetTokenAsync("weather-sample");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SharedAccessSignatureClient_RevokeToken_SasRevokeToken()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SharedAccessSignatureClient client = new SharedAccessSignatureClient(endpoint, credential);

            Response response = client.RevokeToken();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SharedAccessSignatureClient_RevokeToken_SasRevokeToken_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SharedAccessSignatureClient client = new SharedAccessSignatureClient(endpoint, credential);

            Response response = await client.RevokeTokenAsync();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SharedAccessSignatureClient_GetSign_SasGetSign()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SharedAccessSignatureClient client = new SharedAccessSignatureClient(endpoint, credential);

            Response response = client.GetSign("https://contoso.com", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("href").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SharedAccessSignatureClient_GetSign_SasGetSign_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SharedAccessSignatureClient client = new SharedAccessSignatureClient(endpoint, credential);

            Response response = await client.GetSignAsync("https://contoso.com", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("href").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SharedAccessSignatureClient_GetSign_SasGetSign_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SharedAccessSignatureClient client = new SharedAccessSignatureClient(endpoint, credential);

            Response<UnsignedLink> response = client.GetSign("https://contoso.com");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SharedAccessSignatureClient_GetSign_SasGetSign_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SharedAccessSignatureClient client = new SharedAccessSignatureClient(endpoint, credential);

            Response<UnsignedLink> response = await client.GetSignAsync("https://contoso.com");
        }
    }
}
