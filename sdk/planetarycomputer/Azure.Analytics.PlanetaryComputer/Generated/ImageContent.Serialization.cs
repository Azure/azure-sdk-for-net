// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Parameters for requesting a rendered image from a collection. </summary>
    public partial class ImageContent : IJsonModel<ImageContent>
    {
        /// <summary> Initializes a new instance of <see cref="ImageContent"/> for deserialization. </summary>
        internal ImageContent()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ImageContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageContent)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("cql"u8);
            writer.WriteStartObject();
            foreach (var item in Cql)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
#if NET6_0_OR_GREATER
                writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
            if (Optional.IsDefined(Zoom))
            {
                writer.WritePropertyName("zoom"u8);
                writer.WriteNumberValue(Zoom.Value);
            }
            if (Optional.IsDefined(Geometry))
            {
                writer.WritePropertyName("geometry"u8);
                writer.WriteObjectValue(Geometry, options);
            }
            writer.WritePropertyName("render_params"u8);
            writer.WriteStringValue(RenderParameters);
            writer.WritePropertyName("cols"u8);
            writer.WriteNumberValue(Columns);
            writer.WritePropertyName("rows"u8);
            writer.WriteNumberValue(Rows);
            if (Optional.IsDefined(ShowBranding))
            {
                writer.WritePropertyName("showBranding"u8);
                writer.WriteBooleanValue(ShowBranding.Value);
            }
            if (Optional.IsDefined(ImageSize))
            {
                writer.WritePropertyName("imageSize"u8);
                writer.WriteStringValue(ImageSize);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ImageContent IJsonModel<ImageContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ImageContent JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageContent)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeImageContent(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static ImageContent DeserializeImageContent(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, BinaryData> cql = default;
            float? zoom = default;
            GeoJsonGeometry geometry = default;
            string renderParameters = default;
            int columns = default;
            int rows = default;
            bool? showBranding = default;
            string imageSize = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("cql"u8))
                {
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, BinaryData.FromString(prop0.Value.GetRawText()));
                        }
                    }
                    cql = dictionary;
                    continue;
                }
                if (prop.NameEquals("zoom"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    zoom = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("geometry"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    geometry = GeoJsonGeometry.DeserializeGeoJsonGeometry(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("render_params"u8))
                {
                    renderParameters = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("cols"u8))
                {
                    columns = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("rows"u8))
                {
                    rows = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("showBranding"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    showBranding = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("imageSize"u8))
                {
                    imageSize = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new ImageContent(
                cql,
                zoom,
                geometry,
                renderParameters,
                columns,
                rows,
                showBranding,
                imageSize,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ImageContent>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageContent>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ImageContent)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ImageContent IPersistableModel<ImageContent>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ImageContent PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageContent>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeImageContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ImageContent)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ImageContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="imageContent"> The <see cref="ImageContent"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(ImageContent imageContent)
        {
            if (imageContent == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(imageContent, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
