// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Supported algorithms for terrain and index-based analysis. </summary>
    public readonly partial struct TerrainAlgorithm : IEquatable<TerrainAlgorithm>
    {
        private readonly string _value;
        /// <summary> Creates hillshade visualization from elevation data. </summary>
        private const string HillshadeValue = "hillshade";
        /// <summary> Generates elevation contour lines. </summary>
        private const string ContoursValue = "contours";
        /// <summary> Calculates normalized difference index between bands. </summary>
        private const string NormalizedIndexValue = "normalizedIndex";
        /// <summary> Encodes elevation data in Mapbox Terrarium RGB format. </summary>
        private const string TerrariumValue = "terrarium";
        /// <summary> Encodes elevation data in Mapbox TerrainRGB format. </summary>
        private const string TerrainrgbValue = "terrainrgb";

        /// <summary> Initializes a new instance of <see cref="TerrainAlgorithm"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TerrainAlgorithm(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Creates hillshade visualization from elevation data. </summary>
        public static TerrainAlgorithm Hillshade { get; } = new TerrainAlgorithm(HillshadeValue);

        /// <summary> Generates elevation contour lines. </summary>
        public static TerrainAlgorithm Contours { get; } = new TerrainAlgorithm(ContoursValue);

        /// <summary> Calculates normalized difference index between bands. </summary>
        public static TerrainAlgorithm NormalizedIndex { get; } = new TerrainAlgorithm(NormalizedIndexValue);

        /// <summary> Encodes elevation data in Mapbox Terrarium RGB format. </summary>
        public static TerrainAlgorithm Terrarium { get; } = new TerrainAlgorithm(TerrariumValue);

        /// <summary> Encodes elevation data in Mapbox TerrainRGB format. </summary>
        public static TerrainAlgorithm Terrainrgb { get; } = new TerrainAlgorithm(TerrainrgbValue);

        /// <summary> Determines if two <see cref="TerrainAlgorithm"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(TerrainAlgorithm left, TerrainAlgorithm right) => left.Equals(right);

        /// <summary> Determines if two <see cref="TerrainAlgorithm"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(TerrainAlgorithm left, TerrainAlgorithm right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="TerrainAlgorithm"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator TerrainAlgorithm(string value) => new TerrainAlgorithm(value);

        /// <summary> Converts a string to a <see cref="TerrainAlgorithm"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator TerrainAlgorithm?(string value) => value == null ? null : new TerrainAlgorithm(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TerrainAlgorithm other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(TerrainAlgorithm other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
