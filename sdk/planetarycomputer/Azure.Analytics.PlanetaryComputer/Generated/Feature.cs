// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> GeoJSON Feature object representing a geographic entity. </summary>
    public partial class Feature
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="Feature"/>. </summary>
        /// <param name="geometry"> Geometry object defining the feature's shape. </param>
        /// <param name="type"> GeoJSON type identifier for Feature. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="geometry"/> is null. </exception>
        public Feature(GeoJsonGeometry geometry, FeatureType @type)
        {
            Argument.AssertNotNull(geometry, nameof(geometry));

            Geometry = geometry;
            Type = @type;
            Properties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="Feature"/>. </summary>
        /// <param name="geometry"> Geometry object defining the feature's shape. </param>
        /// <param name="type"> GeoJSON type identifier for Feature. </param>
        /// <param name="properties"> Feature properties. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal Feature(GeoJsonGeometry geometry, FeatureType @type, IDictionary<string, BinaryData> properties, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Geometry = geometry;
            Type = @type;
            Properties = properties;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Geometry object defining the feature's shape. </summary>
        public GeoJsonGeometry Geometry { get; }

        /// <summary> GeoJSON type identifier for Feature. </summary>
        public FeatureType Type { get; }

        /// <summary>
        /// Feature properties
        /// <para> To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Properties { get; }
    }
}
