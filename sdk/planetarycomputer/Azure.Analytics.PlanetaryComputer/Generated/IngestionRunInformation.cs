// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Microsoft Planetary Computer Pro geo-catalog ingestion run operation. </summary>
    public partial class IngestionRunInformation
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="IngestionRunInformation"/>. </summary>
        /// <param name="id"> Operation id. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="creationTime"> The UTC time at which the operation was created. </param>
        /// <param name="statusHistory"> The history of the operation status in time. </param>
        /// <param name="totalItems"> The number of total items to be processed. </param>
        /// <param name="totalPendingItems"> The number of items pending to be processed. </param>
        /// <param name="totalSuccessfulItems"> The number of items successfully processed. </param>
        /// <param name="totalFailedItems"> The number of items that have failed to be processed. </param>
        internal IngestionRunInformation(Guid id, OperationStatus status, DateTimeOffset creationTime, IEnumerable<OperationStatusHistoryItem> statusHistory, int totalItems, int totalPendingItems, int totalSuccessfulItems, int totalFailedItems)
        {
            Id = id;
            Status = status;
            CreationTime = creationTime;
            StatusHistory = statusHistory.ToList();
            TotalItems = totalItems;
            TotalPendingItems = totalPendingItems;
            TotalSuccessfulItems = totalSuccessfulItems;
            TotalFailedItems = totalFailedItems;
        }

        /// <summary> Initializes a new instance of <see cref="IngestionRunInformation"/>. </summary>
        /// <param name="id"> Operation id. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="creationTime"> The UTC time at which the operation was created. </param>
        /// <param name="statusHistory"> The history of the operation status in time. </param>
        /// <param name="startTime"> The UTC time at which the operation was started. </param>
        /// <param name="finishTime"> The UTC time at which the operation finished its execution. </param>
        /// <param name="totalItems"> The number of total items to be processed. </param>
        /// <param name="totalPendingItems"> The number of items pending to be processed. </param>
        /// <param name="totalSuccessfulItems"> The number of items successfully processed. </param>
        /// <param name="totalFailedItems"> The number of items that have failed to be processed. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal IngestionRunInformation(Guid id, OperationStatus status, DateTimeOffset creationTime, IList<OperationStatusHistoryItem> statusHistory, DateTimeOffset? startTime, DateTimeOffset? finishTime, int totalItems, int totalPendingItems, int totalSuccessfulItems, int totalFailedItems, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Id = id;
            Status = status;
            CreationTime = creationTime;
            StatusHistory = statusHistory;
            StartTime = startTime;
            FinishTime = finishTime;
            TotalItems = totalItems;
            TotalPendingItems = totalPendingItems;
            TotalSuccessfulItems = totalSuccessfulItems;
            TotalFailedItems = totalFailedItems;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Operation id. </summary>
        public Guid Id { get; }

        /// <summary> Operation status. </summary>
        public OperationStatus Status { get; }

        /// <summary> The UTC time at which the operation was created. </summary>
        public DateTimeOffset CreationTime { get; }

        /// <summary> The history of the operation status in time. </summary>
        public IList<OperationStatusHistoryItem> StatusHistory { get; }

        /// <summary> The UTC time at which the operation was started. </summary>
        public DateTimeOffset? StartTime { get; }

        /// <summary> The UTC time at which the operation finished its execution. </summary>
        public DateTimeOffset? FinishTime { get; }

        /// <summary> The number of total items to be processed. </summary>
        public int TotalItems { get; }

        /// <summary> The number of items pending to be processed. </summary>
        public int TotalPendingItems { get; }

        /// <summary> The number of items successfully processed. </summary>
        public int TotalSuccessfulItems { get; }

        /// <summary> The number of items that have failed to be processed. </summary>
        public int TotalFailedItems { get; }
    }
}
