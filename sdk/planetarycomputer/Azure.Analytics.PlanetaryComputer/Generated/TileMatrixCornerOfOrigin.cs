// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary>
    /// The corner of the tile matrix (_topLeft_ or _bottomLeft_) used as the origin
    /// for numbering tile rows and columns. This corner is also a corner of the (0, 0)
    /// tile.
    /// </summary>
    public readonly partial struct TileMatrixCornerOfOrigin : IEquatable<TileMatrixCornerOfOrigin>
    {
        private readonly string _value;
        /// <summary> Origin at the top-left corner (Y increases downward). </summary>
        private const string TopLeftValue = "topLeft";
        /// <summary> Origin at the bottom-left corner (Y increases upward). </summary>
        private const string BottomLeftValue = "bottomLeft";

        /// <summary> Initializes a new instance of <see cref="TileMatrixCornerOfOrigin"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TileMatrixCornerOfOrigin(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Origin at the top-left corner (Y increases downward). </summary>
        public static TileMatrixCornerOfOrigin TopLeft { get; } = new TileMatrixCornerOfOrigin(TopLeftValue);

        /// <summary> Origin at the bottom-left corner (Y increases upward). </summary>
        public static TileMatrixCornerOfOrigin BottomLeft { get; } = new TileMatrixCornerOfOrigin(BottomLeftValue);

        /// <summary> Determines if two <see cref="TileMatrixCornerOfOrigin"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(TileMatrixCornerOfOrigin left, TileMatrixCornerOfOrigin right) => left.Equals(right);

        /// <summary> Determines if two <see cref="TileMatrixCornerOfOrigin"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(TileMatrixCornerOfOrigin left, TileMatrixCornerOfOrigin right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="TileMatrixCornerOfOrigin"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator TileMatrixCornerOfOrigin(string value) => new TileMatrixCornerOfOrigin(value);

        /// <summary> Converts a string to a <see cref="TileMatrixCornerOfOrigin"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator TileMatrixCornerOfOrigin?(string value) => value == null ? null : new TileMatrixCornerOfOrigin(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TileMatrixCornerOfOrigin other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(TileMatrixCornerOfOrigin other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
