// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary>
    /// Choices for filter-lang value in a POST request.
    /// 
    /// Based on
    /// https://github.com/stac-api-extensions/filter#queryables
    /// 
    /// Note the addition of cql2-json, which is used by the pgstac backend,
    /// but is not included in the spec above.
    /// 
    /// Defines the supported filter languages for STAC API queries.
    /// </summary>
    public readonly partial struct FilterLanguage : IEquatable<FilterLanguage>
    {
        private readonly string _value;
        /// <summary> Common Query Language in JSON format. </summary>
        private const string CqlJsonValue = "cql-json";
        /// <summary> Common Query Language 2 in JSON format. </summary>
        private const string Cql2JsonValue = "cql2-json";
        /// <summary> Common Query Language 2 in text format. </summary>
        private const string Cql2TextValue = "cql2-text";

        /// <summary> Initializes a new instance of <see cref="FilterLanguage"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FilterLanguage(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Common Query Language in JSON format. </summary>
        public static FilterLanguage CqlJson { get; } = new FilterLanguage(CqlJsonValue);

        /// <summary> Common Query Language 2 in JSON format. </summary>
        public static FilterLanguage Cql2Json { get; } = new FilterLanguage(Cql2JsonValue);

        /// <summary> Common Query Language 2 in text format. </summary>
        public static FilterLanguage Cql2Text { get; } = new FilterLanguage(Cql2TextValue);

        /// <summary> Determines if two <see cref="FilterLanguage"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(FilterLanguage left, FilterLanguage right) => left.Equals(right);

        /// <summary> Determines if two <see cref="FilterLanguage"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(FilterLanguage left, FilterLanguage right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="FilterLanguage"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator FilterLanguage(string value) => new FilterLanguage(value);

        /// <summary> Converts a string to a <see cref="FilterLanguage"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator FilterLanguage?(string value) => value == null ? null : new FilterLanguage(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FilterLanguage other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(FilterLanguage other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
