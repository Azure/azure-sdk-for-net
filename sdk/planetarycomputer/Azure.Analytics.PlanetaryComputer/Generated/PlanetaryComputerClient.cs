// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> The PlanetaryComputerClient. </summary>
    public partial class PlanetaryComputerClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://geocatalog.spatio.azure.com/.default" };
        private readonly string _apiVersion;
        private IngestionClient _cachedIngestionClient;
        private StacClient _cachedStacClient;
        private TilerClient _cachedTilerClient;
        private SharedAccessSignatureClient _cachedSharedAccessSignatureClient;

        /// <summary> Initializes a new instance of PlanetaryComputerClient for mocking. </summary>
        protected PlanetaryComputerClient()
        {
        }

        /// <summary> Initializes a new instance of PlanetaryComputerClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PlanetaryComputerClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new PlanetaryComputerClientOptions())
        {
        }

        /// <summary> Initializes a new instance of PlanetaryComputerClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PlanetaryComputerClient(Uri endpoint, TokenCredential credential, PlanetaryComputerClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new PlanetaryComputerClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of IngestionClient. </summary>
        public virtual IngestionClient GetIngestionClient()
        {
            return Volatile.Read(ref _cachedIngestionClient) ?? Interlocked.CompareExchange(ref _cachedIngestionClient, new IngestionClient(ClientDiagnostics, Pipeline, _endpoint, _apiVersion), null) ?? _cachedIngestionClient;
        }

        /// <summary> Initializes a new instance of StacClient. </summary>
        public virtual StacClient GetStacClient()
        {
            return Volatile.Read(ref _cachedStacClient) ?? Interlocked.CompareExchange(ref _cachedStacClient, new StacClient(ClientDiagnostics, Pipeline, _endpoint, _apiVersion), null) ?? _cachedStacClient;
        }

        /// <summary> Initializes a new instance of TilerClient. </summary>
        public virtual TilerClient GetTilerClient()
        {
            return Volatile.Read(ref _cachedTilerClient) ?? Interlocked.CompareExchange(ref _cachedTilerClient, new TilerClient(ClientDiagnostics, Pipeline, _endpoint, _apiVersion), null) ?? _cachedTilerClient;
        }

        /// <summary> Initializes a new instance of SharedAccessSignatureClient. </summary>
        public virtual SharedAccessSignatureClient GetSharedAccessSignatureClient()
        {
            return Volatile.Read(ref _cachedSharedAccessSignatureClient) ?? Interlocked.CompareExchange(ref _cachedSharedAccessSignatureClient, new SharedAccessSignatureClient(ClientDiagnostics, Pipeline, _endpoint, _apiVersion), null) ?? _cachedSharedAccessSignatureClient;
        }
    }
}
