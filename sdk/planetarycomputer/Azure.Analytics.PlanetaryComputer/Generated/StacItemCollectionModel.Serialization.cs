// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary>
    /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
    /// 
    /// Represents a collection of STAC Items as a GeoJSON FeatureCollection.
    /// </summary>
    public partial class StacItemCollectionModel : StacItemOrStacItemCollection, IJsonModel<StacItemCollectionModel>
    {
        /// <summary> Initializes a new instance of <see cref="StacItemCollectionModel"/> for deserialization. </summary>
        internal StacItemCollectionModel()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<StacItemCollectionModel>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemCollectionModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(StacItemCollectionModel)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("features"u8);
            writer.WriteStartArray();
            foreach (StacItemModel item in Features)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(BoundingBox))
            {
                writer.WritePropertyName("bbox"u8);
                writer.WriteStartArray();
                foreach (double item in BoundingBox)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Context))
            {
                writer.WritePropertyName("context"u8);
                writer.WriteObjectValue(Context, options);
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        StacItemCollectionModel IJsonModel<StacItemCollectionModel>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (StacItemCollectionModel)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override StacItemOrStacItemCollection JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemCollectionModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(StacItemCollectionModel)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeStacItemCollectionModel(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static StacItemCollectionModel DeserializeStacItemCollectionModel(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            StacModelType @type = default;
            string stacVersion = default;
            IList<StacLink> links = default;
            string createdOn = default;
            string updatedOn = default;
            string shortDescription = default;
            IList<string> stacExtensions = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            IList<StacItemModel> features = default;
            IList<double> boundingBox = default;
            StacContextExtension context = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    @type = new StacModelType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("stac_version"u8))
                {
                    stacVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("links"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<StacLink> array = new List<StacLink>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(StacLink.DeserializeStacLink(item, options));
                    }
                    links = array;
                    continue;
                }
                if (prop.NameEquals("msft:_created"u8))
                {
                    createdOn = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("msft:_updated"u8))
                {
                    updatedOn = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("msft:short_description"u8))
                {
                    shortDescription = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("stac_extensions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    stacExtensions = array;
                    continue;
                }
                if (prop.NameEquals("features"u8))
                {
                    List<StacItemModel> array = new List<StacItemModel>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(StacItemModel.DeserializeStacItemModel(item, options));
                    }
                    features = array;
                    continue;
                }
                if (prop.NameEquals("bbox"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<double> array = new List<double>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    boundingBox = array;
                    continue;
                }
                if (prop.NameEquals("context"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    context = StacContextExtension.DeserializeStacContextExtension(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new StacItemCollectionModel(
                @type,
                stacVersion,
                links ?? new ChangeTrackingList<StacLink>(),
                createdOn,
                updatedOn,
                shortDescription,
                stacExtensions ?? new ChangeTrackingList<string>(),
                additionalBinaryDataProperties,
                features,
                boundingBox ?? new ChangeTrackingList<double>(),
                context);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<StacItemCollectionModel>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemCollectionModel>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(StacItemCollectionModel)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        StacItemCollectionModel IPersistableModel<StacItemCollectionModel>.Create(BinaryData data, ModelReaderWriterOptions options) => (StacItemCollectionModel)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override StacItemOrStacItemCollection PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemCollectionModel>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeStacItemCollectionModel(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(StacItemCollectionModel)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<StacItemCollectionModel>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="stacItemCollectionModel"> The <see cref="StacItemCollectionModel"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(StacItemCollectionModel stacItemCollectionModel)
        {
            if (stacItemCollectionModel == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(stacItemCollectionModel, ModelSerializationExtensions.WireOptions);
            return content;
        }

        /// <param name="result"> The <see cref="Response"/> to deserialize the <see cref="StacItemCollectionModel"/> from. </param>
        public static explicit operator StacItemCollectionModel(Response result)
        {
            using Response response = result;
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeStacItemCollectionModel(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
