// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Image format specifier for tile and image requests. </summary>
    public readonly partial struct TilerImageFormat : IEquatable<TilerImageFormat>
    {
        private readonly string _value;
        /// <summary> Portable Network Graphics format - supports transparency. </summary>
        private const string PngValue = "png";
        /// <summary> NumPy array format for raw data access. </summary>
        private const string NpyValue = "npy";
        /// <summary> GeoTIFF format for georeferenced raster data. </summary>
        private const string TifValue = "tif";
        /// <summary> JPEG format - smaller file size but lossy compression. </summary>
        private const string JpegValue = "jpeg";
        /// <summary> Alternate extension for JPEG format. </summary>
        private const string JpgValue = "jpg";
        /// <summary> JPEG 2000 format - supports both lossy and lossless compression. </summary>
        private const string Jp2Value = "jp2";
        /// <summary> WebP format - modern image format with good compression. </summary>
        private const string WebpValue = "webp";
        /// <summary> Raw PNG format for access to unprocessed data. </summary>
        private const string PngrawValue = "pngraw";

        /// <summary> Initializes a new instance of <see cref="TilerImageFormat"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TilerImageFormat(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Portable Network Graphics format - supports transparency. </summary>
        public static TilerImageFormat Png { get; } = new TilerImageFormat(PngValue);

        /// <summary> NumPy array format for raw data access. </summary>
        public static TilerImageFormat Npy { get; } = new TilerImageFormat(NpyValue);

        /// <summary> GeoTIFF format for georeferenced raster data. </summary>
        public static TilerImageFormat Tif { get; } = new TilerImageFormat(TifValue);

        /// <summary> JPEG format - smaller file size but lossy compression. </summary>
        public static TilerImageFormat Jpeg { get; } = new TilerImageFormat(JpegValue);

        /// <summary> Alternate extension for JPEG format. </summary>
        public static TilerImageFormat Jpg { get; } = new TilerImageFormat(JpgValue);

        /// <summary> JPEG 2000 format - supports both lossy and lossless compression. </summary>
        public static TilerImageFormat Jp2 { get; } = new TilerImageFormat(Jp2Value);

        /// <summary> WebP format - modern image format with good compression. </summary>
        public static TilerImageFormat Webp { get; } = new TilerImageFormat(WebpValue);

        /// <summary> Raw PNG format for access to unprocessed data. </summary>
        public static TilerImageFormat Pngraw { get; } = new TilerImageFormat(PngrawValue);

        /// <summary> Determines if two <see cref="TilerImageFormat"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(TilerImageFormat left, TilerImageFormat right) => left.Equals(right);

        /// <summary> Determines if two <see cref="TilerImageFormat"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(TilerImageFormat left, TilerImageFormat right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="TilerImageFormat"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator TilerImageFormat(string value) => new TilerImageFormat(value);

        /// <summary> Converts a string to a <see cref="TilerImageFormat"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator TilerImageFormat?(string value) => value == null ? null : new TilerImageFormat(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TilerImageFormat other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(TilerImageFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
