// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary>
    /// Identifier selecting one of the TileMatrixSetId supported (default:
    /// 'WebMercatorQuad')Identifier selecting one of the TileMatrixSetId supported (default:
    /// 'WebMercatorQuad')Method used to select or compute pixels when creating composites from multiple sources
    /// </summary>
    public readonly partial struct PixelSelection : IEquatable<PixelSelection>
    {
        private readonly string _value;
        /// <summary> Select pixel from the first available image. </summary>
        private const string FirstValue = "first";
        /// <summary> Select pixel with the highest value. </summary>
        private const string HighestValue = "highest";
        /// <summary> Select pixel with the lowest value. </summary>
        private const string LowestValue = "lowest";
        /// <summary> Calculate mean of available pixels. </summary>
        private const string MeanValue = "mean";
        /// <summary> Calculate median of available pixels. </summary>
        private const string MedianValue = "median";
        /// <summary> Calculate standard deviation of available pixels. </summary>
        private const string StandardDeviationValue = "stdev";
        /// <summary> Select image with lowest value in the last band. </summary>
        private const string LastBandLowValue = "lastbandlow";
        /// <summary> Select image with highest value in the last band. </summary>
        private const string LastBandHighValue = "lastbandhigh";

        /// <summary> Initializes a new instance of <see cref="PixelSelection"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PixelSelection(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Select pixel from the first available image. </summary>
        public static PixelSelection First { get; } = new PixelSelection(FirstValue);

        /// <summary> Select pixel with the highest value. </summary>
        public static PixelSelection Highest { get; } = new PixelSelection(HighestValue);

        /// <summary> Select pixel with the lowest value. </summary>
        public static PixelSelection Lowest { get; } = new PixelSelection(LowestValue);

        /// <summary> Calculate mean of available pixels. </summary>
        public static PixelSelection Mean { get; } = new PixelSelection(MeanValue);

        /// <summary> Calculate median of available pixels. </summary>
        public static PixelSelection Median { get; } = new PixelSelection(MedianValue);

        /// <summary> Calculate standard deviation of available pixels. </summary>
        public static PixelSelection StandardDeviation { get; } = new PixelSelection(StandardDeviationValue);

        /// <summary> Select image with lowest value in the last band. </summary>
        public static PixelSelection LastBandLow { get; } = new PixelSelection(LastBandLowValue);

        /// <summary> Select image with highest value in the last band. </summary>
        public static PixelSelection LastBandHigh { get; } = new PixelSelection(LastBandHighValue);

        /// <summary> Determines if two <see cref="PixelSelection"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(PixelSelection left, PixelSelection right) => left.Equals(right);

        /// <summary> Determines if two <see cref="PixelSelection"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(PixelSelection left, PixelSelection right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="PixelSelection"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator PixelSelection(string value) => new PixelSelection(value);

        /// <summary> Converts a string to a <see cref="PixelSelection"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator PixelSelection?(string value) => value == null ? null : new PixelSelection(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PixelSelection other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(PixelSelection other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
