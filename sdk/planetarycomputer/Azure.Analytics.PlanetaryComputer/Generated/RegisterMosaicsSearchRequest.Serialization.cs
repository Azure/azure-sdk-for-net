// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> The RegisterMosaicsSearchRequest. </summary>
    internal partial class RegisterMosaicsSearchRequest : IJsonModel<RegisterMosaicsSearchRequest>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<RegisterMosaicsSearchRequest>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<RegisterMosaicsSearchRequest>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RegisterMosaicsSearchRequest)} does not support writing '{format}' format.");
            }
            if (Optional.IsCollectionDefined(Collections))
            {
                writer.WritePropertyName("collections"u8);
                writer.WriteStartArray();
                foreach (string item in Collections)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Ids))
            {
                writer.WritePropertyName("ids"u8);
                writer.WriteStartArray();
                foreach (string item in Ids)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(BoundingBox))
            {
                writer.WritePropertyName("bbox"u8);
                writer.WriteNumberValue(BoundingBox.Value);
            }
            if (Optional.IsDefined(Intersects))
            {
                writer.WritePropertyName("intersects"u8);
                writer.WriteObjectValue(Intersects, options);
            }
            if (Optional.IsCollectionDefined(Query))
            {
                writer.WritePropertyName("query"u8);
                writer.WriteStartObject();
                foreach (var item in Query)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter"u8);
                writer.WriteStringValue(Filter);
            }
            if (Optional.IsDefined(Datetime))
            {
                writer.WritePropertyName("datetime"u8);
                writer.WriteStringValue(Datetime);
            }
            if (Optional.IsCollectionDefined(SortBy))
            {
                writer.WritePropertyName("sortby"u8);
                writer.WriteStartArray();
                foreach (StacSortExtension item in SortBy)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(FilterLanguage))
            {
                writer.WritePropertyName("filter-lang"u8);
                writer.WriteStringValue(FilterLanguage.Value.ToString());
            }
            if (Optional.IsDefined(Metadata))
            {
                writer.WritePropertyName("metadata"u8);
                writer.WriteObjectValue(Metadata, options);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        RegisterMosaicsSearchRequest IJsonModel<RegisterMosaicsSearchRequest>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual RegisterMosaicsSearchRequest JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<RegisterMosaicsSearchRequest>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RegisterMosaicsSearchRequest)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRegisterMosaicsSearchRequest(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static RegisterMosaicsSearchRequest DeserializeRegisterMosaicsSearchRequest(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<string> collections = default;
            IList<string> ids = default;
            float? boundingBox = default;
            GeoJsonGeometry intersects = default;
            IDictionary<string, BinaryData> query = default;
            string filter = default;
            string datetime = default;
            IList<StacSortExtension> sortBy = default;
            FilterLanguage? filterLanguage = default;
            MosaicMetadata metadata = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("collections"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    collections = array;
                    continue;
                }
                if (prop.NameEquals("ids"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    ids = array;
                    continue;
                }
                if (prop.NameEquals("bbox"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    boundingBox = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("intersects"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    intersects = GeoJsonGeometry.DeserializeGeoJsonGeometry(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("query"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, BinaryData.FromString(prop0.Value.GetRawText()));
                        }
                    }
                    query = dictionary;
                    continue;
                }
                if (prop.NameEquals("filter"u8))
                {
                    filter = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("datetime"u8))
                {
                    datetime = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sortby"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<StacSortExtension> array = new List<StacSortExtension>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(StacSortExtension.DeserializeStacSortExtension(item, options));
                    }
                    sortBy = array;
                    continue;
                }
                if (prop.NameEquals("filter-lang"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    filterLanguage = new FilterLanguage(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("metadata"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    metadata = MosaicMetadata.DeserializeMosaicMetadata(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new RegisterMosaicsSearchRequest(
                collections ?? new ChangeTrackingList<string>(),
                ids ?? new ChangeTrackingList<string>(),
                boundingBox,
                intersects,
                query ?? new ChangeTrackingDictionary<string, BinaryData>(),
                filter,
                datetime,
                sortBy ?? new ChangeTrackingList<StacSortExtension>(),
                filterLanguage,
                metadata,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<RegisterMosaicsSearchRequest>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<RegisterMosaicsSearchRequest>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(RegisterMosaicsSearchRequest)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        RegisterMosaicsSearchRequest IPersistableModel<RegisterMosaicsSearchRequest>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual RegisterMosaicsSearchRequest PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<RegisterMosaicsSearchRequest>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeRegisterMosaicsSearchRequest(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RegisterMosaicsSearchRequest)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<RegisterMosaicsSearchRequest>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="registerMosaicsSearchRequest"> The <see cref="RegisterMosaicsSearchRequest"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(RegisterMosaicsSearchRequest registerMosaicsSearchRequest)
        {
            if (registerMosaicsSearchRequest == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(registerMosaicsSearchRequest, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
