// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary>
    /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
    /// 
    /// Represents a STAC collection.
    /// </summary>
    public partial class StacCollectionModel : IJsonModel<StacCollectionModel>
    {
        /// <summary> Initializes a new instance of <see cref="StacCollectionModel"/> for deserialization. </summary>
        internal StacCollectionModel()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<StacCollectionModel>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacCollectionModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(StacCollectionModel)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("msft:_created"u8);
                writer.WriteStringValue(CreatedOn);
            }
            if (Optional.IsDefined(UpdatedOn))
            {
                writer.WritePropertyName("msft:_updated"u8);
                writer.WriteStringValue(UpdatedOn);
            }
            if (Optional.IsDefined(ShortDescription))
            {
                writer.WritePropertyName("msft:short_description"u8);
                writer.WriteStringValue(ShortDescription);
            }
            if (Optional.IsCollectionDefined(StacExtensions))
            {
                writer.WritePropertyName("stac_extensions"u8);
                writer.WriteStartArray();
                foreach (string item in StacExtensions)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            writer.WritePropertyName("description"u8);
            writer.WriteStringValue(Description);
            if (Optional.IsDefined(StacVersion))
            {
                writer.WritePropertyName("stac_version"u8);
                writer.WriteStringValue(StacVersion);
            }
            writer.WritePropertyName("links"u8);
            writer.WriteStartArray();
            foreach (StacLink item in Links)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(Type);
            }
            if (Optional.IsCollectionDefined(Assets))
            {
                writer.WritePropertyName("assets"u8);
                writer.WriteStartObject();
                foreach (var item in Assets)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value, options);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("license"u8);
            writer.WriteStringValue(License);
            writer.WritePropertyName("extent"u8);
            writer.WriteObjectValue(Extent, options);
            if (Optional.IsCollectionDefined(Keywords))
            {
                writer.WritePropertyName("keywords"u8);
                writer.WriteStartArray();
                foreach (string item in Keywords)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Providers))
            {
                writer.WritePropertyName("providers"u8);
                writer.WriteStartArray();
                foreach (StacProvider item in Providers)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Summaries))
            {
                writer.WritePropertyName("summaries"u8);
                writer.WriteStartObject();
                foreach (var item in Summaries)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        StacCollectionModel IJsonModel<StacCollectionModel>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual StacCollectionModel JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacCollectionModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(StacCollectionModel)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeStacCollectionModel(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static StacCollectionModel DeserializeStacCollectionModel(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string createdOn = default;
            string updatedOn = default;
            string shortDescription = default;
            IList<string> stacExtensions = default;
            string id = default;
            string description = default;
            string stacVersion = default;
            IList<StacLink> links = default;
            string title = default;
            string @type = default;
            IDictionary<string, StacAsset> assets = default;
            string license = default;
            StacExtensionExtent extent = default;
            IList<string> keywords = default;
            IList<StacProvider> providers = default;
            IDictionary<string, BinaryData> summaries = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("msft:_created"u8))
                {
                    createdOn = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("msft:_updated"u8))
                {
                    updatedOn = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("msft:short_description"u8))
                {
                    shortDescription = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("stac_extensions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    stacExtensions = array;
                    continue;
                }
                if (prop.NameEquals("id"u8))
                {
                    id = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("description"u8))
                {
                    description = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("stac_version"u8))
                {
                    stacVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("links"u8))
                {
                    List<StacLink> array = new List<StacLink>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(StacLink.DeserializeStacLink(item, options));
                    }
                    links = array;
                    continue;
                }
                if (prop.NameEquals("title"u8))
                {
                    title = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("type"u8))
                {
                    @type = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("assets"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, StacAsset> dictionary = new Dictionary<string, StacAsset>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        dictionary.Add(prop0.Name, StacAsset.DeserializeStacAsset(prop0.Value, options));
                    }
                    assets = dictionary;
                    continue;
                }
                if (prop.NameEquals("license"u8))
                {
                    license = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("extent"u8))
                {
                    extent = StacExtensionExtent.DeserializeStacExtensionExtent(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("keywords"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    keywords = array;
                    continue;
                }
                if (prop.NameEquals("providers"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<StacProvider> array = new List<StacProvider>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(StacProvider.DeserializeStacProvider(item, options));
                    }
                    providers = array;
                    continue;
                }
                if (prop.NameEquals("summaries"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, BinaryData.FromString(prop0.Value.GetRawText()));
                        }
                    }
                    summaries = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new StacCollectionModel(
                createdOn,
                updatedOn,
                shortDescription,
                stacExtensions ?? new ChangeTrackingList<string>(),
                id,
                description,
                stacVersion,
                links,
                title,
                @type,
                assets ?? new ChangeTrackingDictionary<string, StacAsset>(),
                license,
                extent,
                keywords ?? new ChangeTrackingList<string>(),
                providers ?? new ChangeTrackingList<StacProvider>(),
                summaries ?? new ChangeTrackingDictionary<string, BinaryData>(),
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<StacCollectionModel>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacCollectionModel>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(StacCollectionModel)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        StacCollectionModel IPersistableModel<StacCollectionModel>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual StacCollectionModel PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacCollectionModel>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeStacCollectionModel(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(StacCollectionModel)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<StacCollectionModel>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="stacCollectionModel"> The <see cref="StacCollectionModel"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(StacCollectionModel stacCollectionModel)
        {
            if (stacCollectionModel == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(stacCollectionModel, ModelSerializationExtensions.WireOptions);
            return content;
        }

        /// <param name="result"> The <see cref="Response"/> to deserialize the <see cref="StacCollectionModel"/> from. </param>
        public static explicit operator StacCollectionModel(Response result)
        {
            using Response response = result;
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeStacCollectionModel(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
