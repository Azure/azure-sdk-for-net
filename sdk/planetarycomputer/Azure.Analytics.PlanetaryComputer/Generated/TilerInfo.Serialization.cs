// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> TilerInfo. </summary>
    public partial class TilerInfo : IJsonModel<TilerInfo>
    {
        /// <summary> Initializes a new instance of <see cref="TilerInfo"/> for deserialization. </summary>
        internal TilerInfo()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<TilerInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TilerInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TilerInfo)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("bounds"u8);
            writer.WriteStartArray();
            foreach (double item in Bounds)
            {
                writer.WriteNumberValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(BandMetadata))
            {
                writer.WritePropertyName("band_metadata"u8);
                writer.WriteStartArray();
                foreach (IList<BinaryData> item in BandMetadata)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStartArray();
                    foreach (BinaryData item0 in item)
                    {
                        if (item0 == null)
                        {
                            writer.WriteNullValue();
                            continue;
                        }
#if NET6_0_OR_GREATER
                        writer.WriteRawValue(item0);
#else
                        using (JsonDocument document = JsonDocument.Parse(item0))
                        {
                            JsonSerializer.Serialize(writer, document.RootElement);
                        }
#endif
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(BandDescriptions))
            {
                writer.WritePropertyName("band_descriptions"u8);
                writer.WriteStartArray();
                foreach (IList<string> item in BandDescriptions)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStartArray();
                    foreach (string item0 in item)
                    {
                        if (item0 == null)
                        {
                            writer.WriteNullValue();
                            continue;
                        }
                        writer.WriteStringValue(item0);
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("dtype"u8);
            writer.WriteStringValue(Dtype);
            if (Optional.IsDefined(NoDataType))
            {
                writer.WritePropertyName("nodata_type"u8);
                writer.WriteStringValue(NoDataType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Colorinterp))
            {
                writer.WritePropertyName("colorinterp"u8);
                writer.WriteStartArray();
                foreach (string item in Colorinterp)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Driver))
            {
                writer.WritePropertyName("driver"u8);
                writer.WriteStringValue(Driver);
            }
            if (Optional.IsDefined(Count))
            {
                writer.WritePropertyName("count"u8);
                writer.WriteNumberValue(Count.Value);
            }
            if (Optional.IsDefined(Width))
            {
                writer.WritePropertyName("width"u8);
                writer.WriteNumberValue(Width.Value);
            }
            if (Optional.IsDefined(Height))
            {
                writer.WritePropertyName("height"u8);
                writer.WriteNumberValue(Height.Value);
            }
            if (Optional.IsCollectionDefined(Overviews))
            {
                writer.WritePropertyName("overviews"u8);
                writer.WriteStartArray();
                foreach (string item in Overviews)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Scales))
            {
                writer.WritePropertyName("scales"u8);
                writer.WriteStartArray();
                foreach (long item in Scales)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Offsets))
            {
                writer.WritePropertyName("offsets"u8);
                writer.WriteStartArray();
                foreach (long item in Offsets)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Colormap))
            {
                writer.WritePropertyName("colormap"u8);
                writer.WriteStartObject();
                foreach (var item in Colormap)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStartArray();
                    foreach (string item0 in item.Value)
                    {
                        if (item0 == null)
                        {
                            writer.WriteNullValue();
                            continue;
                        }
                        writer.WriteStringValue(item0);
                    }
                    writer.WriteEndArray();
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(MinZoom))
            {
                writer.WritePropertyName("minzoom"u8);
                writer.WriteNumberValue(MinZoom.Value);
            }
            if (Optional.IsDefined(MaxZoom))
            {
                writer.WritePropertyName("maxzoom"u8);
                writer.WriteNumberValue(MaxZoom.Value);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        TilerInfo IJsonModel<TilerInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual TilerInfo JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TilerInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TilerInfo)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTilerInfo(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static TilerInfo DeserializeTilerInfo(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<double> bounds = default;
            IList<IList<BinaryData>> bandMetadata = default;
            IList<IList<string>> bandDescriptions = default;
            string dtype = default;
            NoDataType? noDataType = default;
            IList<string> colorinterp = default;
            string driver = default;
            int? count = default;
            int? width = default;
            int? height = default;
            IList<string> overviews = default;
            IList<long> scales = default;
            IList<long> offsets = default;
            IDictionary<string, IList<string>> colormap = default;
            long? minZoom = default;
            long? maxZoom = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("bounds"u8))
                {
                    List<double> array = new List<double>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    bounds = array;
                    continue;
                }
                if (prop.NameEquals("band_metadata"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IList<BinaryData>> array = new List<IList<BinaryData>>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            List<BinaryData> array0 = new List<BinaryData>();
                            foreach (var item0 in item.EnumerateArray())
                            {
                                if (item0.ValueKind == JsonValueKind.Null)
                                {
                                    array0.Add(null);
                                }
                                else
                                {
                                    array0.Add(BinaryData.FromString(item0.GetRawText()));
                                }
                            }
                            array.Add(array0);
                        }
                    }
                    bandMetadata = array;
                    continue;
                }
                if (prop.NameEquals("band_descriptions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IList<string>> array = new List<IList<string>>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            List<string> array0 = new List<string>();
                            foreach (var item0 in item.EnumerateArray())
                            {
                                if (item0.ValueKind == JsonValueKind.Null)
                                {
                                    array0.Add(null);
                                }
                                else
                                {
                                    array0.Add(item0.GetString());
                                }
                            }
                            array.Add(array0);
                        }
                    }
                    bandDescriptions = array;
                    continue;
                }
                if (prop.NameEquals("dtype"u8))
                {
                    dtype = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("nodata_type"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    noDataType = new NoDataType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("colorinterp"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    colorinterp = array;
                    continue;
                }
                if (prop.NameEquals("driver"u8))
                {
                    driver = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("count"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    count = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("width"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    width = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("height"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    height = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("overviews"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    overviews = array;
                    continue;
                }
                if (prop.NameEquals("scales"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<long> array = new List<long>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt64());
                    }
                    scales = array;
                    continue;
                }
                if (prop.NameEquals("offsets"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<long> array = new List<long>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt64());
                    }
                    offsets = array;
                    continue;
                }
                if (prop.NameEquals("colormap"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, IList<string>> dictionary = new Dictionary<string, IList<string>>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            List<string> array = new List<string>();
                            foreach (var item in prop0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(item.GetString());
                                }
                            }
                            dictionary.Add(prop0.Name, array);
                        }
                    }
                    colormap = dictionary;
                    continue;
                }
                if (prop.NameEquals("minzoom"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minZoom = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("maxzoom"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxZoom = prop.Value.GetInt64();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new TilerInfo(
                bounds,
                bandMetadata ?? new ChangeTrackingList<IList<BinaryData>>(),
                bandDescriptions ?? new ChangeTrackingList<IList<string>>(),
                dtype,
                noDataType,
                colorinterp ?? new ChangeTrackingList<string>(),
                driver,
                count,
                width,
                height,
                overviews ?? new ChangeTrackingList<string>(),
                scales ?? new ChangeTrackingList<long>(),
                offsets ?? new ChangeTrackingList<long>(),
                colormap ?? new ChangeTrackingDictionary<string, IList<string>>(),
                minZoom,
                maxZoom,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<TilerInfo>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TilerInfo>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(TilerInfo)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        TilerInfo IPersistableModel<TilerInfo>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual TilerInfo PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TilerInfo>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeTilerInfo(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TilerInfo)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<TilerInfo>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
