// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary>
    /// Search model.
    /// *
    /// Defines parameters for a STAC search POST request.
    /// </summary>
    public partial class StacSearchParameters
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="StacSearchParameters"/>. </summary>
        public StacSearchParameters()
        {
            Collections = new ChangeTrackingList<string>();
            Ids = new ChangeTrackingList<string>();
            BoundingBox = new ChangeTrackingList<float>();
            ConformanceClass = new ChangeTrackingDictionary<string, BinaryData>();
            Query = new ChangeTrackingDictionary<string, BinaryData>();
            SortBy = new ChangeTrackingList<StacSortExtension>();
            Fields = new ChangeTrackingList<SearchOptionsFields>();
        }

        /// <summary> Initializes a new instance of <see cref="StacSearchParameters"/>. </summary>
        /// <param name="collections"> List of collection IDs to search within. </param>
        /// <param name="ids"> List of specific item IDs to return. </param>
        /// <param name="boundingBox"> Bounding box for spatial filtering in format [west, south, east, north]. </param>
        /// <param name="intersects"> GeoJSON geometry for spatial filtering. </param>
        /// <param name="datetime"> Temporal filter in RFC 3339 format, can be a single time or range. </param>
        /// <param name="limit"> Maximum number of results to return. </param>
        /// <param name="conformanceClass">
        /// Conf
        /// 
        /// Overrides datetime validation from the base request model.
        /// </param>
        /// <param name="sign"> Whether to sign asset URLs in the response. </param>
        /// <param name="durationInMinutes"> URL signature duration in minutes. </param>
        /// <param name="query">
        /// STAC Query
        /// 
        /// See the [STAC Query Extension](https://github.com/stac-api-extensions/query).
        /// </param>
        /// <param name="sortBy">
        /// Sort criteria for the search results.
        /// 
        /// See the [STAC Sort Extension](https://github.com/stac-api-extensions/sort).
        /// </param>
        /// <param name="fields">
        /// Specifies which fields to include or exclude in the STAC search results.
        /// 
        /// See the [STAC Fields Extension](https://github.com/stac-api-extensions/fields).
        /// </param>
        /// <param name="filter">
        /// CQL2 Filter
        /// 
        /// See the [STAC Filter Extension](https://github.com/stac-api-extensions/filter).
        /// </param>
        /// <param name="filterCoordinateReferenceSystem"> Coordinate reference system for the filter. </param>
        /// <param name="filterLang"> Filter language to use for the filter expression. </param>
        /// <param name="token"> Pagination token for fetching the next set of results. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal StacSearchParameters(IList<string> collections, IList<string> ids, IList<float> boundingBox, GeoJsonGeometry intersects, string datetime, int? limit, IDictionary<string, BinaryData> conformanceClass, StacAssetUrlSigningMode? sign, int? durationInMinutes, IDictionary<string, BinaryData> query, IList<StacSortExtension> sortBy, IList<SearchOptionsFields> fields, string filter, string filterCoordinateReferenceSystem, FilterLanguage? filterLang, string token, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Collections = collections;
            Ids = ids;
            BoundingBox = boundingBox;
            Intersects = intersects;
            Datetime = datetime;
            Limit = limit;
            ConformanceClass = conformanceClass;
            Sign = sign;
            DurationInMinutes = durationInMinutes;
            Query = query;
            SortBy = sortBy;
            Fields = fields;
            Filter = filter;
            FilterCoordinateReferenceSystem = filterCoordinateReferenceSystem;
            FilterLang = filterLang;
            Token = token;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> List of collection IDs to search within. </summary>
        public IList<string> Collections { get; }

        /// <summary> List of specific item IDs to return. </summary>
        public IList<string> Ids { get; }

        /// <summary> Bounding box for spatial filtering in format [west, south, east, north]. </summary>
        public IList<float> BoundingBox { get; }

        /// <summary> GeoJSON geometry for spatial filtering. </summary>
        public GeoJsonGeometry Intersects { get; set; }

        /// <summary> Temporal filter in RFC 3339 format, can be a single time or range. </summary>
        public string Datetime { get; set; }

        /// <summary> Maximum number of results to return. </summary>
        public int? Limit { get; set; }

        /// <summary>
        /// Conf
        /// 
        /// Overrides datetime validation from the base request model.
        /// <para> To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> ConformanceClass { get; }

        /// <summary> Whether to sign asset URLs in the response. </summary>
        public StacAssetUrlSigningMode? Sign { get; set; }

        /// <summary> URL signature duration in minutes. </summary>
        public int? DurationInMinutes { get; set; }

        /// <summary>
        /// STAC Query
        /// 
        /// See the [STAC Query Extension](https://github.com/stac-api-extensions/query).
        /// <para> To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Query { get; }

        /// <summary>
        /// Sort criteria for the search results.
        /// 
        /// See the [STAC Sort Extension](https://github.com/stac-api-extensions/sort).
        /// </summary>
        public IList<StacSortExtension> SortBy { get; }

        /// <summary>
        /// Specifies which fields to include or exclude in the STAC search results.
        /// 
        /// See the [STAC Fields Extension](https://github.com/stac-api-extensions/fields).
        /// </summary>
        public IList<SearchOptionsFields> Fields { get; }

        /// <summary>
        /// CQL2 Filter
        /// 
        /// See the [STAC Filter Extension](https://github.com/stac-api-extensions/filter).
        /// </summary>
        public string Filter { get; set; }

        /// <summary> Coordinate reference system for the filter. </summary>
        public string FilterCoordinateReferenceSystem { get; set; }

        /// <summary> Filter language to use for the filter expression. </summary>
        public FilterLanguage? FilterLang { get; set; }

        /// <summary> Pagination token for fetching the next set of results. </summary>
        public string Token { get; set; }
    }
}
