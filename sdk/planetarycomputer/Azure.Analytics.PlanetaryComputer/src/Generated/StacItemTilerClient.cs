// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> The StacItemTilerClient. </summary>
    public partial class StacItemTilerClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://geocatalog.spatio.azure.com/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of StacItemTilerClient for mocking. </summary>
        protected StacItemTilerClient()
        {
        }

        /// <summary> Initializes a new instance of StacItemTilerClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public StacItemTilerClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new StacItemTilerClientOptions())
        {
        }

        /// <summary> Initializes a new instance of StacItemTilerClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public StacItemTilerClient(Uri endpoint, TokenCredential credential, StacItemTilerClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new StacItemTilerClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Return all Bounds
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetBounds(string collectionId, string itemId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetBounds");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetBoundsRequest(collectionId, itemId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return all Bounds
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetBoundsAsync(string collectionId, string itemId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetBounds");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetBoundsRequest(collectionId, itemId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return all Bounds. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BoundsResult> GetBounds(string collectionId, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetBounds(collectionId, itemId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BoundsResult)result, result);
        }

        /// <summary> Return all Bounds. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BoundsResult>> GetBoundsAsync(string collectionId, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetBoundsAsync(collectionId, itemId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BoundsResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return dataset's basic info.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetInfo(string collectionId, string itemId, IEnumerable<string> assets, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetInfo");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetInfoRequest(collectionId, itemId, assets, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return dataset's basic info.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetInfoAsync(string collectionId, string itemId, IEnumerable<string> assets, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetInfo");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetInfoRequest(collectionId, itemId, assets, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return dataset's basic info. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<InfoOperationResult> GetInfo(string collectionId, string itemId, IEnumerable<string> assets = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetInfo(collectionId, itemId, assets, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((InfoOperationResult)result, result);
        }

        /// <summary> Return dataset's basic info. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<InfoOperationResult>> GetInfoAsync(string collectionId, string itemId, IEnumerable<string> assets = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetInfoAsync(collectionId, itemId, assets, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((InfoOperationResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return Info Geojson
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetInfoGeoJson(string collectionId, string itemId, IEnumerable<string> assets, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetInfoGeoJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetInfoGeoJsonRequest(collectionId, itemId, assets, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return Info Geojson
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetInfoGeoJsonAsync(string collectionId, string itemId, IEnumerable<string> assets, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetInfoGeoJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetInfoGeoJsonRequest(collectionId, itemId, assets, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return Info Geojson. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TilerInfoGeoJsonFeature> GetInfoGeoJson(string collectionId, string itemId, IEnumerable<string> assets = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetInfoGeoJson(collectionId, itemId, assets, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TilerInfoGeoJsonFeature)result, result);
        }

        /// <summary> Return Info Geojson. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TilerInfoGeoJsonFeature>> GetInfoGeoJsonAsync(string collectionId, string itemId, IEnumerable<string> assets = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetInfoGeoJsonAsync(collectionId, itemId, assets, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TilerInfoGeoJsonFeature)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return a list of supported assets.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetAvailableAssets(string collectionId, string itemId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetAvailableAssets");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetAvailableAssetsRequest(collectionId, itemId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return a list of supported assets.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAvailableAssetsAsync(string collectionId, string itemId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetAvailableAssets");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetAvailableAssetsRequest(collectionId, itemId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return a list of supported assets. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IReadOnlyList<string>> GetAvailableAssets(string collectionId, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetAvailableAssets(collectionId, itemId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content.ToObjectFromJson<IReadOnlyList<string>>(), result);
        }

        /// <summary> Return a list of supported assets. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IReadOnlyList<string>>> GetAvailableAssetsAsync(string collectionId, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetAvailableAssetsAsync(collectionId, itemId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content.ToObjectFromJson<IReadOnlyList<string>>(), result);
        }

        /// <summary>
        /// [Protocol Method] Per Asset statistics
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetAssetStatistics(string collectionId, string itemId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string resampling, int? maxSize, bool? categorical, IEnumerable<string> c, IEnumerable<int> p, string histogramBins, string histogramRange, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetAssetStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetAssetStatisticsRequest(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, resampling, maxSize, categorical, c, p, histogramBins, histogramRange, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Per Asset statistics
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAssetStatisticsAsync(string collectionId, string itemId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string resampling, int? maxSize, bool? categorical, IEnumerable<string> c, IEnumerable<int> p, string histogramBins, string histogramRange, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetAssetStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetAssetStatisticsRequest(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, resampling, maxSize, categorical, c, p, histogramBins, histogramRange, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Per Asset statistics. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<AssetStatisticsResult> GetAssetStatistics(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, ResamplingMethod? resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> c = default, IEnumerable<int> p = default, string histogramBins = default, string histogramRange = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetAssetStatistics(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, resampling?.ToString(), maxSize, categorical, c, p, histogramBins, histogramRange, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((AssetStatisticsResult)result, result);
        }

        /// <summary> Per Asset statistics. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<AssetStatisticsResult>> GetAssetStatisticsAsync(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, ResamplingMethod? resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> c = default, IEnumerable<int> p = default, string histogramBins = default, string histogramRange = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetAssetStatisticsAsync(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, resampling?.ToString(), maxSize, categorical, c, p, histogramBins, histogramRange, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((AssetStatisticsResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Merged assets statistics.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetStatistics(string collectionId, string itemId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string resampling, int? maxSize, bool? categorical, IEnumerable<string> c, IEnumerable<int> p, string histogramBins, string histogramRange, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetStatisticsRequest(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, resampling, maxSize, categorical, c, p, histogramBins, histogramRange, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Merged assets statistics.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetStatisticsAsync(string collectionId, string itemId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string resampling, int? maxSize, bool? categorical, IEnumerable<string> c, IEnumerable<int> p, string histogramBins, string histogramRange, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetStatisticsRequest(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, resampling, maxSize, categorical, c, p, histogramBins, histogramRange, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Merged assets statistics. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<StatisticsResult> GetStatistics(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, ResamplingMethod? resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> c = default, IEnumerable<int> p = default, string histogramBins = default, string histogramRange = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetStatistics(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, resampling?.ToString(), maxSize, categorical, c, p, histogramBins, histogramRange, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((StatisticsResult)result, result);
        }

        /// <summary> Merged assets statistics. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<StatisticsResult>> GetStatisticsAsync(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, ResamplingMethod? resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> c = default, IEnumerable<int> p = default, string histogramBins = default, string histogramRange = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetStatisticsAsync(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, resampling?.ToString(), maxSize, categorical, c, p, histogramBins, histogramRange, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((StatisticsResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Get Statistics from a geojson feature or featureCollection.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetGeoJsonStatistics(string collectionId, string itemId, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, string coordCrs = default, string resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> c = default, IEnumerable<int> p = default, string histogramBins = default, string histogramRange = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetGeoJsonStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateGetGeoJsonStatisticsRequest(collectionId, itemId, content, assets, expression, assetBidx, assetAsBand, nodata, unscale, coordCrs, resampling, maxSize, categorical, c, p, histogramBins, histogramRange, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Statistics from a geojson feature or featureCollection.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetGeoJsonStatisticsAsync(string collectionId, string itemId, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, string coordCrs = default, string resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> c = default, IEnumerable<int> p = default, string histogramBins = default, string histogramRange = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetGeoJsonStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateGetGeoJsonStatisticsRequest(collectionId, itemId, content, assets, expression, assetBidx, assetAsBand, nodata, unscale, coordCrs, resampling, maxSize, categorical, c, p, histogramBins, histogramRange, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Statistics from a geojson feature or featureCollection. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<GeoJsonStatisticsItemCollectionResult> GetGeoJsonStatistics(string collectionId, string itemId, ItemCollectionModel body, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, string coordCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> c = default, IEnumerable<int> p = default, string histogramBins = default, string histogramRange = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(body, nameof(body));

            Response result = GetGeoJsonStatistics(collectionId, itemId, body, assets, expression, assetBidx, assetAsBand, nodata, unscale, coordCrs, resampling?.ToString(), maxSize, categorical, c, p, histogramBins, histogramRange, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((GeoJsonStatisticsItemCollectionResult)result, result);
        }

        /// <summary> Get Statistics from a geojson feature or featureCollection. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="c"> List of values for which to report counts. </param>
        /// <param name="p"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<GeoJsonStatisticsItemCollectionResult>> GetGeoJsonStatisticsAsync(string collectionId, string itemId, ItemCollectionModel body, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, string coordCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> c = default, IEnumerable<int> p = default, string histogramBins = default, string histogramRange = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(body, nameof(body));

            Response result = await GetGeoJsonStatisticsAsync(collectionId, itemId, body, assets, expression, assetBidx, assetAsBand, nodata, unscale, coordCrs, resampling?.ToString(), maxSize, categorical, c, p, histogramBins, histogramRange, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((GeoJsonStatisticsItemCollectionResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Create map tile from a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="subdatasetName"> The name of a subdataset within the asset. </param>
        /// <param name="subdatasetBands"> The index of a subdataset band within the asset. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTile(string collectionId, string itemId, float z, float x, float y, float scale, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string tileMatrixSetId, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, string subdatasetName, IEnumerable<string> subdatasetBands, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetTileRequest(collectionId, itemId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, tileMatrixSetId, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, subdatasetName, subdatasetBands, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create map tile from a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="subdatasetName"> The name of a subdataset within the asset. </param>
        /// <param name="subdatasetBands"> The index of a subdataset band within the asset. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileAsync(string collectionId, string itemId, float z, float x, float y, float scale, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string tileMatrixSetId, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, string subdatasetName, IEnumerable<string> subdatasetBands, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetTileRequest(collectionId, itemId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, tileMatrixSetId, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, subdatasetName, subdatasetBands, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create map tile from a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="subdatasetName"> The name of a subdataset within the asset. </param>
        /// <param name="subdatasetBands"> The index of a subdataset band within the asset. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetTile(string collectionId, string itemId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, TileMatrixSetId? tileMatrixSetId = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, string subdatasetName = default, IEnumerable<string> subdatasetBands = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = GetTile(collectionId, itemId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, tileMatrixSetId?.ToString(), buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, subdatasetName, subdatasetBands, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create map tile from a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="subdatasetName"> The name of a subdataset within the asset. </param>
        /// <param name="subdatasetBands"> The index of a subdataset band within the asset. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetTileAsync(string collectionId, string itemId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, TileMatrixSetId? tileMatrixSetId = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, string subdatasetName = default, IEnumerable<string> subdatasetBands = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = await GetTileAsync(collectionId, itemId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, tileMatrixSetId?.ToString(), buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, subdatasetName, subdatasetBands, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Create map tile from a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="subdatasetName"> The name of a subdataset within the asset. </param>
        /// <param name="subdatasetBands"> The index of a subdataset band within the asset. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTileWithMatrixSet(string collectionId, string itemId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, string subdatasetName, IEnumerable<string> subdatasetBands, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetTileWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetTileWithMatrixSetRequest(collectionId, itemId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, subdatasetName, subdatasetBands, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create map tile from a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="subdatasetName"> The name of a subdataset within the asset. </param>
        /// <param name="subdatasetBands"> The index of a subdataset band within the asset. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileWithMatrixSetAsync(string collectionId, string itemId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, string subdatasetName, IEnumerable<string> subdatasetBands, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetTileWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetTileWithMatrixSetRequest(collectionId, itemId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, subdatasetName, subdatasetBands, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create map tile from a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="subdatasetName"> The name of a subdataset within the asset. </param>
        /// <param name="subdatasetBands"> The index of a subdataset band within the asset. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetTileWithMatrixSet(string collectionId, string itemId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, string subdatasetName = default, IEnumerable<string> subdatasetBands = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = GetTileWithMatrixSet(collectionId, itemId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, subdatasetName, subdatasetBands, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create map tile from a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="subdatasetName"> The name of a subdataset within the asset. </param>
        /// <param name="subdatasetBands"> The index of a subdataset band within the asset. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetTileWithMatrixSetAsync(string collectionId, string itemId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, string subdatasetName = default, IEnumerable<string> subdatasetBands = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = await GetTileWithMatrixSetAsync(collectionId, itemId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, subdatasetName, subdatasetBands, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Return Tilejson
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTileJson(string collectionId, string itemId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string tileMatrixSetId, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetTileJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetTileJsonRequest(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, tileMatrixSetId, tileFormat, tileScale, minzoom, maxzoom, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return Tilejson
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileJsonAsync(string collectionId, string itemId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string tileMatrixSetId, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetTileJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetTileJsonRequest(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, tileMatrixSetId, tileFormat, tileScale, minzoom, maxzoom, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return Tilejson. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TileJsonResult> GetTileJson(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, TileMatrixSetId? tileMatrixSetId = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetTileJson(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, tileMatrixSetId?.ToString(), tileFormat?.ToString(), tileScale, minzoom, maxzoom, buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TileJsonResult)result, result);
        }

        /// <summary> Return Tilejson. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TileJsonResult>> GetTileJsonAsync(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, TileMatrixSetId? tileMatrixSetId = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetTileJsonAsync(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, tileMatrixSetId?.ToString(), tileFormat?.ToString(), tileScale, minzoom, maxzoom, buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TileJsonResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return the Tilejson Tilematrixsetid As a path
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTileJsonWithMatrixSet(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetTileJsonWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetTileJsonWithMatrixSetRequest(collectionId, itemId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, tileFormat, tileScale, minzoom, maxzoom, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return the Tilejson Tilematrixsetid As a path
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileJsonWithMatrixSetAsync(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetTileJsonWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetTileJsonWithMatrixSetRequest(collectionId, itemId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, tileFormat, tileScale, minzoom, maxzoom, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return the Tilejson Tilematrixsetid As a path. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TileJsonResult> GetTileJsonWithMatrixSet(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = GetTileJsonWithMatrixSet(collectionId, itemId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, tileFormat?.ToString(), tileScale, minzoom, maxzoom, buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TileJsonResult)result, result);
        }

        /// <summary> Return the Tilejson Tilematrixsetid As a path. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TileJsonResult>> GetTileJsonWithMatrixSetAsync(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = await GetTileJsonWithMatrixSetAsync(collectionId, itemId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, tileFormat?.ToString(), tileScale, minzoom, maxzoom, buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TileJsonResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetWmtsCapabilities(string collectionId, string itemId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string tileMatrixSetId, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetWmtsCapabilities");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetWmtsCapabilitiesRequest(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, tileMatrixSetId, tileFormat, tileScale, minzoom, maxzoom, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetWmtsCapabilitiesAsync(string collectionId, string itemId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string tileMatrixSetId, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetWmtsCapabilities");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetWmtsCapabilitiesRequest(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, tileMatrixSetId, tileFormat, tileScale, minzoom, maxzoom, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<string> GetWmtsCapabilities(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, TileMatrixSetId? tileMatrixSetId = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetWmtsCapabilities(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, tileMatrixSetId?.ToString(), tileFormat?.ToString(), tileScale, minzoom, maxzoom, buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content.ToObjectFromJson<string>(), result);
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileMatrixSetId">
        /// Identifier selecting one of the TileMatrixSetId supported (default:
        /// 'WebMercatorQuad')
        /// </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<string>> GetWmtsCapabilitiesAsync(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, TileMatrixSetId? tileMatrixSetId = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetWmtsCapabilitiesAsync(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, tileMatrixSetId?.ToString(), tileFormat?.ToString(), tileScale, minzoom, maxzoom, buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content.ToObjectFromJson<string>(), result);
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetWmtsCapabilitiesWithMatrixSet(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetWmtsCapabilitiesWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetWmtsCapabilitiesWithMatrixSetRequest(collectionId, itemId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, tileFormat, tileScale, minzoom, maxzoom, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetWmtsCapabilitiesWithMatrixSetAsync(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string tileFormat, int? tileScale, int? minzoom, int? maxzoom, string buffer, string colorFormula, string resampling, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetWmtsCapabilitiesWithMatrixSet");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetWmtsCapabilitiesWithMatrixSetRequest(collectionId, itemId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, tileFormat, tileScale, minzoom, maxzoom, buffer, colorFormula, resampling, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<string> GetWmtsCapabilitiesWithMatrixSet(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = GetWmtsCapabilitiesWithMatrixSet(collectionId, itemId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, tileFormat?.ToString(), tileScale, minzoom, maxzoom, buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content.ToObjectFromJson<string>(), result);
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minzoom"> Overwrite default minzoom. </param>
        /// <param name="maxzoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<string>> GetWmtsCapabilitiesWithMatrixSetAsync(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, ImageType? tileFormat = default, int? tileScale = default, int? minzoom = default, int? maxzoom = default, string buffer = default, string colorFormula = default, ResamplingMethod? resampling = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = await GetWmtsCapabilitiesWithMatrixSetAsync(collectionId, itemId, tileMatrixSetId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, tileFormat?.ToString(), tileScale, minzoom, maxzoom, buffer, colorFormula, resampling?.ToString(), rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content.ToObjectFromJson<string>(), result);
        }

        /// <summary>
        /// [Protocol Method] Get Point value for a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="lon"> Longitude. </param>
        /// <param name="lat"> Latitude. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPoint(string collectionId, string itemId, double lon, float lat, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string coordCrs, string resampling, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetPoint");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetPointRequest(collectionId, itemId, lon, lat, assets, expression, assetBidx, assetAsBand, nodata, unscale, coordCrs, resampling, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Point value for a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="lon"> Longitude. </param>
        /// <param name="lat"> Latitude. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPointAsync(string collectionId, string itemId, double lon, float lat, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string coordCrs, string resampling, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetPoint");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetPointRequest(collectionId, itemId, lon, lat, assets, expression, assetBidx, assetAsBand, nodata, unscale, coordCrs, resampling, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Point value for a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="lon"> Longitude. </param>
        /// <param name="lat"> Latitude. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TitilerCoreModelsResponsesPoint> GetPoint(string collectionId, string itemId, double lon, float lat, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, string coordCrs = default, ResamplingMethod? resampling = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetPoint(collectionId, itemId, lon, lat, assets, expression, assetBidx, assetAsBand, nodata, unscale, coordCrs, resampling?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TitilerCoreModelsResponsesPoint)result, result);
        }

        /// <summary> Get Point value for a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="lon"> Longitude. </param>
        /// <param name="lat"> Latitude. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TitilerCoreModelsResponsesPoint>> GetPointAsync(string collectionId, string itemId, double lon, float lat, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, string coordCrs = default, ResamplingMethod? resampling = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetPointAsync(collectionId, itemId, lon, lat, assets, expression, assetBidx, assetAsBand, nodata, unscale, coordCrs, resampling?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TitilerCoreModelsResponsesPoint)result, result);
        }

        /// <summary>
        /// [Protocol Method] Create preview of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPreview(string collectionId, string itemId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string format, string colorFormula, string dstCrs, string resampling, int? maxSize, int? height, int? width, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetPreview");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetPreviewRequest(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, format, colorFormula, dstCrs, resampling, maxSize, height, width, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create preview of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPreviewAsync(string collectionId, string itemId, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string format, string colorFormula, string dstCrs, string resampling, int? maxSize, int? height, int? width, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetPreview");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetPreviewRequest(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, format, colorFormula, dstCrs, resampling, maxSize, height, width, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create preview of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetPreview(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, ImageType? format = default, string colorFormula = default, string dstCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetPreview(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, format?.ToString(), colorFormula, dstCrs, resampling?.ToString(), maxSize, height, width, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create preview of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetPreviewAsync(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, ImageType? format = default, string colorFormula = default, string dstCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetPreviewAsync(collectionId, itemId, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, format?.ToString(), colorFormula, dstCrs, resampling?.ToString(), maxSize, height, width, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Create preview of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPreviewWithFormat(string collectionId, string itemId, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string colorFormula, string dstCrs, string resampling, int? maxSize, int? height, int? width, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetPreviewWithFormat");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPreviewWithFormatRequest(collectionId, itemId, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, colorFormula, dstCrs, resampling, maxSize, height, width, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create preview of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPreviewWithFormatAsync(string collectionId, string itemId, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string colorFormula, string dstCrs, string resampling, int? maxSize, int? height, int? width, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetPreviewWithFormat");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPreviewWithFormatRequest(collectionId, itemId, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, colorFormula, dstCrs, resampling, maxSize, height, width, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create preview of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetPreviewWithFormat(string collectionId, string itemId, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = GetPreviewWithFormat(collectionId, itemId, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, colorFormula, dstCrs, resampling?.ToString(), maxSize, height, width, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create preview of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetPreviewWithFormatAsync(string collectionId, string itemId, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = await GetPreviewWithFormatAsync(collectionId, itemId, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, colorFormula, dstCrs, resampling?.ToString(), maxSize, height, width, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Create image from part of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPart(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string colorFormula, string dstCrs, string coordCrs, string resampling, int? maxSize, int? height, int? width, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetPart");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPartRequest(collectionId, itemId, minx, miny, maxx, maxy, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, colorFormula, dstCrs, coordCrs, resampling, maxSize, height, width, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create image from part of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPartAsync(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string colorFormula, string dstCrs, string coordCrs, string resampling, int? maxSize, int? height, int? width, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetPart");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPartRequest(collectionId, itemId, minx, miny, maxx, maxy, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, colorFormula, dstCrs, coordCrs, resampling, maxSize, height, width, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create image from part of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetPart(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, string coordCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = GetPart(collectionId, itemId, minx, miny, maxx, maxy, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, colorFormula, dstCrs, coordCrs, resampling?.ToString(), maxSize, height, width, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create image from part of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetPartAsync(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, string coordCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = await GetPartAsync(collectionId, itemId, minx, miny, maxx, maxy, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, colorFormula, dstCrs, coordCrs, resampling?.ToString(), maxSize, height, width, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Create image from part of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPartWithDimensions(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, float width, float height, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string colorFormula, string dstCrs, string coordCrs, string resampling, int? maxSize, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetPartWithDimensions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPartWithDimensionsRequest(collectionId, itemId, minx, miny, maxx, maxy, width, height, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, colorFormula, dstCrs, coordCrs, resampling, maxSize, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create image from part of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPartWithDimensionsAsync(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, float width, float height, string format, IEnumerable<string> assets, string expression, IEnumerable<string> assetBidx, bool? assetAsBand, float? nodata, bool? unscale, string algorithm, string algorithmParams, string colorFormula, string dstCrs, string coordCrs, string resampling, int? maxSize, IEnumerable<string> rescale, string colormapName, string colormap, bool? returnMask, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.GetPartWithDimensions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPartWithDimensionsRequest(collectionId, itemId, minx, miny, maxx, maxy, width, height, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, colorFormula, dstCrs, coordCrs, resampling, maxSize, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create image from part of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetPartWithDimensions(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, float width, float height, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, string coordCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = GetPartWithDimensions(collectionId, itemId, minx, miny, maxx, maxy, width, height, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, colorFormula, dstCrs, coordCrs, resampling?.ToString(), maxSize, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create image from part of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetPartWithDimensionsAsync(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, float width, float height, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, string coordCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));

            Response result = await GetPartWithDimensionsAsync(collectionId, itemId, minx, miny, maxx, maxy, width, height, format, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, colorFormula, dstCrs, coordCrs, resampling?.ToString(), maxSize, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Create image from a geojson feature.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CropGeoJson(string collectionId, string itemId, string format, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string coordCrs = default, string resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, string colormapName = default, string colormap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.CropGeoJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCropGeoJsonRequest(collectionId, itemId, format, content, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, colorFormula, coordCrs, resampling, maxSize, height, width, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create image from a geojson feature.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CropGeoJsonAsync(string collectionId, string itemId, string format, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string coordCrs = default, string resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, string colormapName = default, string colormap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.CropGeoJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCropGeoJsonRequest(collectionId, itemId, format, content, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, colorFormula, coordCrs, resampling, maxSize, height, width, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create image from a geojson feature. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> CropGeoJson(string collectionId, string itemId, string format, GeoJsonGeometry body, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string colorFormula = default, string coordCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(body, nameof(body));

            Response result = CropGeoJson(collectionId, itemId, format, body, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, colorFormula, coordCrs, resampling?.ToString(), maxSize, height, width, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create image from a geojson feature. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> CropGeoJsonAsync(string collectionId, string itemId, string format, GeoJsonGeometry body, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string colorFormula = default, string coordCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(body, nameof(body));

            Response result = await CropGeoJsonAsync(collectionId, itemId, format, body, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, colorFormula, coordCrs, resampling?.ToString(), maxSize, height, width, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Create image from a geojson feature.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CropGeoJsonWithDimensions(string collectionId, string itemId, float width, float height, string format, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string coordCrs = default, string resampling = default, int? maxSize = default, IEnumerable<string> rescale = default, string colormapName = default, string colormap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.CropGeoJsonWithDimensions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCropGeoJsonWithDimensionsRequest(collectionId, itemId, width, height, format, content, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, colorFormula, coordCrs, resampling, maxSize, rescale, colormapName, colormap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create image from a geojson feature.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CropGeoJsonWithDimensionsAsync(string collectionId, string itemId, float width, float height, string format, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string coordCrs = default, string resampling = default, int? maxSize = default, IEnumerable<string> rescale = default, string colormapName = default, string colormap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("StacItemTilerClient.CropGeoJsonWithDimensions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCropGeoJsonWithDimensionsRequest(collectionId, itemId, width, height, format, content, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm, algorithmParams, colorFormula, coordCrs, resampling, maxSize, rescale, colormapName, colormap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create image from a geojson feature. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> CropGeoJsonWithDimensions(string collectionId, string itemId, float width, float height, string format, StacItemModel body, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string colorFormula = default, string coordCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(body, nameof(body));

            Response result = CropGeoJsonWithDimensions(collectionId, itemId, width, height, format, body, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, colorFormula, coordCrs, resampling?.ToString(), maxSize, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create image from a geojson feature. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBidx"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="nodata"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Algorithm name. </param>
        /// <param name="algorithmParams"> Algorithm parameter. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordCrs"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colormapName"> Colormap name. </param>
        /// <param name="colormap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> CropGeoJsonWithDimensionsAsync(string collectionId, string itemId, float width, float height, string format, StacItemModel body, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBidx = default, bool? assetAsBand = default, float? nodata = default, bool? unscale = default, AlgorithmInfo? algorithm = default, string algorithmParams = default, string colorFormula = default, string coordCrs = default, ResamplingMethod? resampling = default, int? maxSize = default, IEnumerable<string> rescale = default, ColorMapNames? colormapName = default, string colormap = default, bool? returnMask = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(body, nameof(body));

            Response result = await CropGeoJsonWithDimensionsAsync(collectionId, itemId, width, height, format, body, assets, expression, assetBidx, assetAsBand, nodata, unscale, algorithm?.ToString(), algorithmParams, colorFormula, coordCrs, resampling?.ToString(), maxSize, rescale, colormapName?.ToString(), colormap, returnMask, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }
    }
}
