// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class PlanetaryComputerModelFactory
    {
        /// <summary> Ingestions Definitions paged response. </summary>
        /// <param name="value"> Ingestion Definitions. </param>
        /// <param name="nextLink"> Next page. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionDefinitionsPagedResult"/> instance for mocking. </returns>
        public static IngestionDefinitionsPagedResult IngestionDefinitionsPagedResult(IEnumerable<IngestionConfiguration> value = default, Uri nextLink = default)
        {
            value ??= new ChangeTrackingList<IngestionConfiguration>();

            return new IngestionDefinitionsPagedResult(value.ToList(), nextLink, additionalBinaryDataProperties: null);
        }

        /// <summary> Microsoft Planetary Computer Pro geo-catalog ingestion creation model. </summary>
        /// <param name="id"> Ingestion id. </param>
        /// <param name="importType"> Ingestion type. </param>
        /// <param name="displayName"> Ingestion name. </param>
        /// <param name="sourceCatalogUrl"> Source catalog URL. Required for StaticCatalog ingestion type. </param>
        /// <param name="skipExistingItems"> Skip processing existing items in the catalog. </param>
        /// <param name="keepOriginalAssets"> Keep original source assets. </param>
        /// <param name="creationTime"> Ingestion creation time. </param>
        /// <param name="status"> Ingestion status. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionConfiguration"/> instance for mocking. </returns>
        public static IngestionConfiguration IngestionConfiguration(Guid id = default, IngestionType importType = default, string displayName = default, Uri sourceCatalogUrl = default, bool? skipExistingItems = default, bool? keepOriginalAssets = default, DateTimeOffset creationTime = default, IngestionStatus status = default)
        {
            return new IngestionConfiguration(
                id,
                importType,
                displayName,
                sourceCatalogUrl,
                skipExistingItems,
                keepOriginalAssets,
                creationTime,
                status,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Microsoft Planetary Computer Pro geo-catalog operation. </summary>
        /// <param name="id"> Operation id. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="type"> Operation type. </param>
        /// <param name="creationTime"> The UTC time at which the operation was created. </param>
        /// <param name="collectionId"> Collection ID. </param>
        /// <param name="statusHistory"> The history of the operation status in time. </param>
        /// <param name="startTime"> The UTC time at which the operation was started. </param>
        /// <param name="finishTime"> The UTC time at which the operation finished its execution. </param>
        /// <param name="additionalInformation"> Additional information elements about the particular operation type. </param>
        /// <param name="error"> Error information. </param>
        /// <returns> A new <see cref="PlanetaryComputer.OperationInfo"/> instance for mocking. </returns>
        public static OperationInfo OperationInfo(Guid id = default, OperationStatus status = default, string @type = default, DateTimeOffset creationTime = default, string collectionId = default, IEnumerable<OperationStatusHistoryItem> statusHistory = default, DateTimeOffset? startTime = default, DateTimeOffset? finishTime = default, IDictionary<string, string> additionalInformation = default, ResponseError error = default)
        {
            statusHistory ??= new ChangeTrackingList<OperationStatusHistoryItem>();
            additionalInformation ??= new ChangeTrackingDictionary<string, string>();

            return new OperationInfo(
                id,
                status,
                @type,
                creationTime,
                collectionId,
                statusHistory.ToList(),
                startTime,
                finishTime,
                additionalInformation,
                error,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Operation status history item. </summary>
        /// <param name="timestamp"> The UTC time at which the status was set. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="errorCode"> If the status is failed, the error code. </param>
        /// <param name="errorMessage"> If the status is failed, the error message. </param>
        /// <returns> A new <see cref="PlanetaryComputer.OperationStatusHistoryItem"/> instance for mocking. </returns>
        public static OperationStatusHistoryItem OperationStatusHistoryItem(DateTimeOffset timestamp = default, OperationStatus status = default, string errorCode = default, string errorMessage = default)
        {
            return new OperationStatusHistoryItem(timestamp, status, errorCode, errorMessage, additionalBinaryDataProperties: null);
        }

        /// <summary> Ingestion Runs paged response. </summary>
        /// <param name="value"> Ingestion Runs. </param>
        /// <param name="nextLink"> Next page. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionRunsPagedResult"/> instance for mocking. </returns>
        public static IngestionRunsPagedResult IngestionRunsPagedResult(IEnumerable<IngestionRun> value = default, Uri nextLink = default)
        {
            value ??= new ChangeTrackingList<IngestionRun>();

            return new IngestionRunsPagedResult(value.ToList(), nextLink, additionalBinaryDataProperties: null);
        }

        /// <summary> Microsoft Planetary Computer Pro geo-catalog ingestion run. </summary>
        /// <param name="id"> Run id. </param>
        /// <param name="parentRunId"> Run id which this run is associated to because it has been retried or rerun. </param>
        /// <param name="operation"> Operation. </param>
        /// <param name="creationTime"> Creation time. </param>
        /// <param name="sourceCatalogUrl"> URL of the source catalog. </param>
        /// <param name="skipExistingItems"> Skip any item that already exist in the GeoCatalog. </param>
        /// <param name="keepOriginalAssets"> Keep original source assets. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionRun"/> instance for mocking. </returns>
        public static IngestionRun IngestionRun(Guid id = default, Guid? parentRunId = default, IngestionRunInfo operation = default, DateTimeOffset creationTime = default, Uri sourceCatalogUrl = default, bool? skipExistingItems = default, bool? keepOriginalAssets = default)
        {
            return new IngestionRun(
                id,
                parentRunId,
                operation,
                creationTime,
                sourceCatalogUrl,
                skipExistingItems,
                keepOriginalAssets,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Microsoft Planetary Computer Pro geo-catalog ingestion run operation. </summary>
        /// <param name="id"> Operation id. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="creationTime"> The UTC time at which the operation was created. </param>
        /// <param name="statusHistory"> The history of the operation status in time. </param>
        /// <param name="startTime"> The UTC time at which the operation was started. </param>
        /// <param name="finishTime"> The UTC time at which the operation finished its execution. </param>
        /// <param name="totalItems"> The number of total items to be processed. </param>
        /// <param name="totalPendingItems"> The number of items pending to be processed. </param>
        /// <param name="totalSuccessfulItems"> The number of items successfully processed. </param>
        /// <param name="totalFailedItems"> The number of items that have failed to be processed. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionRunInfo"/> instance for mocking. </returns>
        public static IngestionRunInfo IngestionRunInfo(Guid id = default, OperationStatus status = default, DateTimeOffset creationTime = default, IEnumerable<OperationStatusHistoryItem> statusHistory = default, DateTimeOffset? startTime = default, DateTimeOffset? finishTime = default, int totalItems = default, int totalPendingItems = default, int totalSuccessfulItems = default, int totalFailedItems = default)
        {
            statusHistory ??= new ChangeTrackingList<OperationStatusHistoryItem>();

            return new IngestionRunInfo(
                id,
                status,
                creationTime,
                statusHistory.ToList(),
                startTime,
                finishTime,
                totalItems,
                totalPendingItems,
                totalSuccessfulItems,
                totalFailedItems,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Operations paged response. </summary>
        /// <param name="value"> Operations. </param>
        /// <param name="nextLink"> Next page. </param>
        /// <returns> A new <see cref="PlanetaryComputer.OperationsPagedResult"/> instance for mocking. </returns>
        public static OperationsPagedResult OperationsPagedResult(IEnumerable<OperationInfo> value = default, Uri nextLink = default)
        {
            value ??= new ChangeTrackingList<OperationInfo>();

            return new OperationsPagedResult(value.ToList(), nextLink, additionalBinaryDataProperties: null);
        }

        /// <summary> Ingestion Sources paged response. </summary>
        /// <param name="value"> Ingestion sources. </param>
        /// <param name="nextLink"> Next page. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionSourcesPagedResult"/> instance for mocking. </returns>
        public static IngestionSourcesPagedResult IngestionSourcesPagedResult(IEnumerable<IngestionSourceSummary> value = default, Uri nextLink = default)
        {
            value ??= new ChangeTrackingList<IngestionSourceSummary>();

            return new IngestionSourcesPagedResult(value.ToList(), nextLink, additionalBinaryDataProperties: null);
        }

        /// <summary> Ingestion source summary. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="kind"> Ingestion source type. </param>
        /// <param name="created"> Created time in UTC format. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionSourceSummary"/> instance for mocking. </returns>
        public static IngestionSourceSummary IngestionSourceSummary(Guid id = default, IngestionSourceType kind = default, DateTimeOffset created = default)
        {
            return new IngestionSourceSummary(id, kind, created, additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// Ingestion Source
        /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="SasTokenIngestionSource"/> and <see cref="ManagedIdentityIngestionSource"/>.
        /// </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="created"> Created time in UTC format. </param>
        /// <param name="kind"> Discriminator for the ingestion source. </param>
        /// <returns> A new <see cref="PlanetaryComputer.IngestionSource"/> instance for mocking. </returns>
        public static IngestionSource IngestionSource(Guid id = default, DateTimeOffset created = default, string kind = default)
        {
            return new UnknownIngestionSource(id, created, new IngestionSourceType(kind), additionalBinaryDataProperties: null);
        }

        /// <summary> SAS Token ingestion source. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="created"> Created time in UTC format. </param>
        /// <param name="connectionInfo"> SAS token connection information. </param>
        /// <returns> A new <see cref="PlanetaryComputer.SasTokenIngestionSource"/> instance for mocking. </returns>
        public static SasTokenIngestionSource SasTokenIngestionSource(Guid id = default, DateTimeOffset created = default, SasTokenConnection connectionInfo = default)
        {
            return new SasTokenIngestionSource(id, created, IngestionSourceType.SasToken, additionalBinaryDataProperties: null, connectionInfo);
        }

        /// <summary> SAS Token connection information. </summary>
        /// <param name="containerUrl"> Azure Blob Storage container URL. </param>
        /// <param name="sasToken"> SAS token. </param>
        /// <param name="expiration"> Azure Blob Storage SAS token expiration in UTC format. </param>
        /// <returns> A new <see cref="PlanetaryComputer.SasTokenConnection"/> instance for mocking. </returns>
        public static SasTokenConnection SasTokenConnection(Uri containerUrl = default, string sasToken = default, DateTimeOffset? expiration = default)
        {
            return new SasTokenConnection(containerUrl, sasToken, expiration, additionalBinaryDataProperties: null);
        }

        /// <summary> Managed Identity ingestion source. </summary>
        /// <param name="id"> Ingestion source id. </param>
        /// <param name="created"> Created time in UTC format. </param>
        /// <param name="connectionInfo"> Managed identity connection information. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ManagedIdentityIngestionSource"/> instance for mocking. </returns>
        public static ManagedIdentityIngestionSource ManagedIdentityIngestionSource(Guid id = default, DateTimeOffset created = default, ManagedIdentityConnection connectionInfo = default)
        {
            return new ManagedIdentityIngestionSource(id, created, IngestionSourceType.BlobManagedIdentity, additionalBinaryDataProperties: null, connectionInfo);
        }

        /// <summary> Managed Identity connection information. </summary>
        /// <param name="containerUrl"> Azure Blob Storage container URL. </param>
        /// <param name="objectId"> Azure Managed Identity configured in the Geo-Catalog with access to the container. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ManagedIdentityConnection"/> instance for mocking. </returns>
        public static ManagedIdentityConnection ManagedIdentityConnection(Uri containerUrl = default, Guid objectId = default)
        {
            return new ManagedIdentityConnection(containerUrl, objectId, additionalBinaryDataProperties: null);
        }

        /// <summary> Managed Identities paged response. </summary>
        /// <param name="value"> Managed Identities. </param>
        /// <param name="nextLink"> Next page. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ManagedIdentitiesPagedResult"/> instance for mocking. </returns>
        public static ManagedIdentitiesPagedResult ManagedIdentitiesPagedResult(IEnumerable<ManagedIdentityMetadata> value = default, Uri nextLink = default)
        {
            value ??= new ChangeTrackingList<ManagedIdentityMetadata>();

            return new ManagedIdentitiesPagedResult(value.ToList(), nextLink, additionalBinaryDataProperties: null);
        }

        /// <summary> Managed Identity metadata. </summary>
        /// <param name="objectId"> Object id of the managed identity. </param>
        /// <param name="resourceId"> ARM path or resource id of the managed identity. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ManagedIdentityMetadata"/> instance for mocking. </returns>
        public static ManagedIdentityMetadata ManagedIdentityMetadata(Guid objectId = default, string resourceId = default)
        {
            return new ManagedIdentityMetadata(objectId, resourceId, additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
        /// 
        /// Represents the STAC API landing page with links to available resources.
        /// </summary>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacExtensions"> URLs to STAC extensions implemented by this STAC resource. </param>
        /// <param name="id"> Unique identifier for the STAC catalog. </param>
        /// <param name="description"> Detailed description of the STAC catalog. </param>
        /// <param name="title"> Human-readable title for the STAC catalog. </param>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="conformsTo"> List of OGC API conformance classes implemented by this API. </param>
        /// <param name="links"> Links to related resources and endpoints. </param>
        /// <param name="type"> Type. </param>
        /// <returns> A new <see cref="PlanetaryComputer.LandingPage"/> instance for mocking. </returns>
        public static LandingPage LandingPage(string msftCreated = default, string msftUpdated = default, string msftShortDescription = default, IEnumerable<string> stacExtensions = default, string id = default, string description = default, string title = default, string stacVersion = default, IEnumerable<Uri> conformsTo = default, IEnumerable<StacLink> links = default, string @type = default)
        {
            stacExtensions ??= new ChangeTrackingList<string>();
            conformsTo ??= new ChangeTrackingList<Uri>();
            links ??= new ChangeTrackingList<StacLink>();

            return new LandingPage(
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacExtensions.ToList(),
                id,
                description,
                title,
                stacVersion,
                conformsTo.ToList(),
                links.ToList(),
                @type,
                additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// Link model.
        /// 
        /// Ref:
        /// http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/link.yaml
        /// 
        /// Represents a link.
        /// </summary>
        /// <param name="rel"> The relationship type of the link. </param>
        /// <param name="title"> The title of the link. </param>
        /// <param name="type"> The MIME type of the linked resource. </param>
        /// <param name="href"> The URL of the link. </param>
        /// <param name="hreflang"> The language of the linked resource. </param>
        /// <param name="length"> The length of the linked resource. </param>
        /// <param name="method">
        /// Specifies the HTTP method that the resource expects.
        /// Default: GET.
        /// </param>
        /// <param name="headers">
        /// Object key-value pairs that map to headers.
        /// Example: { "Accept": "application/json" }.
        /// </param>
        /// <param name="body"> For POST requests, the resource can specify the HTTP body as a JSON object. </param>
        /// <param name="merge">
        /// Indicates whether the client is expected to merge the body value into the current request body before following the link.
        /// This is only valid when the server is responding to a POST request.
        /// Default: false.
        /// </param>
        /// <returns> A new <see cref="PlanetaryComputer.StacLink"/> instance for mocking. </returns>
        public static StacLink StacLink(string rel = default, string title = default, LinkType? @type = default, string href = default, string hreflang = default, int? length = default, LinkMethod? @method = default, IDictionary<string, string> headers = default, IDictionary<string, BinaryData> body = default, bool? merge = default)
        {
            headers ??= new ChangeTrackingDictionary<string, string>();
            body ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new StacLink(
                rel,
                title,
                @type,
                href,
                hreflang,
                length,
                @method,
                headers,
                body,
                merge,
                additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// http://docs.opengeospatial.org/is/17-069r3/17-069r3.html#_feature_collections_rootcollections
        /// 
        /// Represents a collection of STAC collections with links.
        /// </summary>
        /// <param name="links"> Links to related resources and endpoints. </param>
        /// <param name="collections"> Array of STAC collections available in the catalog. </param>
        /// <returns> A new <see cref="PlanetaryComputer.FeatureCollections"/> instance for mocking. </returns>
        public static FeatureCollections FeatureCollections(IEnumerable<StacLink> links = default, IEnumerable<StacCollectionModel> collections = default)
        {
            links ??= new ChangeTrackingList<StacLink>();
            collections ??= new ChangeTrackingList<StacCollectionModel>();

            return new FeatureCollections(links.ToList(), collections.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md
        /// 
        /// Represents a STAC collection.
        /// </summary>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacExtensions"> URLs to STAC extensions implemented by this STAC resource. </param>
        /// <param name="id"> Unique identifier for the collection. </param>
        /// <param name="description"> Detailed description of the collection. </param>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="links"> Links to related resources and endpoints. </param>
        /// <param name="title"> Human-readable title for the collection. </param>
        /// <param name="type"> Type. </param>
        /// <param name="assets"> Assets. </param>
        /// <param name="license"> License identifier for the collection data. </param>
        /// <param name="extent"> Spatial and temporal extent of the collection. </param>
        /// <param name="keywords"> Keywords describing the collection. </param>
        /// <param name="providers"> Organizations or individuals who provide the collection data. </param>
        /// <param name="summaries">
        /// Summaries
        /// 
        /// See the [STAC Collection Spec](https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#spatial-extent-object).
        /// </param>
        /// <returns> A new <see cref="PlanetaryComputer.StacCollectionModel"/> instance for mocking. </returns>
        public static StacCollectionModel StacCollectionModel(string msftCreated = default, string msftUpdated = default, string msftShortDescription = default, IEnumerable<string> stacExtensions = default, string id = default, string description = default, string stacVersion = default, IEnumerable<StacLink> links = default, string title = default, string @type = default, IDictionary<string, StacAsset> assets = default, string license = default, StacExtent extent = default, IEnumerable<string> keywords = default, IEnumerable<StacProvider> providers = default, StacCollectionSummaries summaries = default)
        {
            stacExtensions ??= new ChangeTrackingList<string>();
            links ??= new ChangeTrackingList<StacLink>();
            assets ??= new ChangeTrackingDictionary<string, StacAsset>();
            keywords ??= new ChangeTrackingList<string>();
            providers ??= new ChangeTrackingList<StacProvider>();

            return new StacCollectionModel(
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacExtensions.ToList(),
                id,
                description,
                stacVersion,
                links.ToList(),
                title,
                @type,
                assets,
                license,
                extent,
                keywords.ToList(),
                providers.ToList(),
                summaries,
                additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/item-spec.md#asset-object
        /// 
        /// Represents a STAC asset, which is a file or resource associated with a STAC item.
        /// </summary>
        /// <param name="platform"> Platform that acquired the data. </param>
        /// <param name="instruments"> Instruments that acquired the data. </param>
        /// <param name="constellation"> Constellation of satellites that acquired the data. </param>
        /// <param name="mission"> Mission associated with the data. </param>
        /// <param name="providers"> Organizations or individuals who provide the data. </param>
        /// <param name="gsd"> Ground sample distance in meters. </param>
        /// <param name="created"> Creation timestamp of the data. </param>
        /// <param name="updated"> Last update timestamp of the data. </param>
        /// <param name="title"> Human-readable title for the asset. </param>
        /// <param name="description"> Detailed description of the asset. </param>
        /// <param name="href"> URL to the asset file. </param>
        /// <param name="type"> Media type of the asset. </param>
        /// <param name="roles"> Roles of the asset within the item. </param>
        /// <param name="additionalProperties"></param>
        /// <returns> A new <see cref="PlanetaryComputer.StacAsset"/> instance for mocking. </returns>
        public static StacAsset StacAsset(string platform = default, IEnumerable<string> instruments = default, string constellation = default, string mission = default, IEnumerable<StacProvider> providers = default, float? gsd = default, DateTimeOffset? created = default, DateTimeOffset? updated = default, string title = default, string description = default, string href = default, string @type = default, IEnumerable<string> roles = default, IDictionary<string, BinaryData> additionalProperties = default)
        {
            instruments ??= new ChangeTrackingList<string>();
            providers ??= new ChangeTrackingList<StacProvider>();
            roles ??= new ChangeTrackingList<string>();
            additionalProperties ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new StacAsset(
                platform,
                instruments.ToList(),
                constellation,
                mission,
                providers.ToList(),
                gsd,
                created,
                updated,
                title,
                description,
                href,
                @type,
                roles.ToList(),
                additionalProperties);
        }

        /// <summary>
        /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#provider-object
        /// 
        /// Represents information about a data provider for STAC collections and items.
        /// </summary>
        /// <param name="name"> Name of the provider organization or individual. </param>
        /// <param name="description"> Description of the provider. </param>
        /// <param name="roles"> Roles played by the provider (e.g., producer, processor, host). </param>
        /// <param name="url"> URL to the provider's website. </param>
        /// <returns> A new <see cref="PlanetaryComputer.StacProvider"/> instance for mocking. </returns>
        public static StacProvider StacProvider(string name = default, string description = default, IEnumerable<string> roles = default, string url = default)
        {
            roles ??= new ChangeTrackingList<string>();

            return new StacProvider(name, description, roles.ToList(), url, additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#extent-object
        /// 
        /// Represents the spatial and temporal extent of a STAC collection.
        /// </summary>
        /// <param name="spatial">
        /// Spatial extent defined by bounding boxes.
        /// 
        /// See the [STAC Collection Spec](https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#spatial-extent-object).
        /// </param>
        /// <param name="temporal">
        /// Temporal extent defined by time intervals.
        /// 
        /// See the [STAC Collection Spec](https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#spatial-extent-object).
        /// </param>
        /// <returns> A new <see cref="PlanetaryComputer.StacExtent"/> instance for mocking. </returns>
        public static StacExtent StacExtent(SpatialExtent spatial = default, TimeInterval temporal = default)
        {
            return new StacExtent(spatial, temporal, additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#spatial-extent-object
        /// 
        /// Represents the spatial extent of a STAC collection with bounding boxes.
        /// </summary>
        /// <param name="bbox"> Array of bounding boxes defining the spatial extent, in format [[west, south, east, north]]. </param>
        /// <returns> A new <see cref="PlanetaryComputer.SpatialExtent"/> instance for mocking. </returns>
        public static SpatialExtent SpatialExtent(IEnumerable<IList<double>> bbox = default)
        {
            bbox ??= new ChangeTrackingList<IList<double>>();

            return new SpatialExtent(bbox.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/collection-spec/collection-spec.md#temporal-extent-object
        /// 
        /// Represents the temporal extent of a STAC collection with time intervals.
        /// </summary>
        /// <param name="interval"> Array of time intervals in format [[start_datetime, end_datetime]]. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TimeInterval"/> instance for mocking. </returns>
        public static TimeInterval TimeInterval(IEnumerable<IList<string>> interval = default)
        {
            interval ??= new ChangeTrackingList<IList<string>>();

            return new TimeInterval(interval.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Represents a collection summary. </summary>
        /// <param name="additionalProperties"></param>
        /// <returns> A new <see cref="PlanetaryComputer.StacCollectionSummaries"/> instance for mocking. </returns>
        public static StacCollectionSummaries StacCollectionSummaries(IDictionary<string, BinaryData> additionalProperties = default)
        {
            additionalProperties ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new StacCollectionSummaries(additionalProperties);
        }

        /// <summary>
        /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.md
        /// 
        /// Represents a collection of STAC Items as a GeoJSON FeatureCollection.
        /// </summary>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="links"> Links to related resources and endpoints. </param>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacExtensions"> URLs to STAC extensions implemented by this STAC resource. </param>
        /// <param name="features"> Array of STAC Items in the collection. </param>
        /// <param name="bbox"> Bounding box of all items in format [west, south, east, north]. </param>
        /// <param name="context"> Context information for the search response. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ItemCollectionModel"/> instance for mocking. </returns>
        public static ItemCollectionModel ItemCollectionModel(string stacVersion = default, IEnumerable<StacLink> links = default, string msftCreated = default, string msftUpdated = default, string msftShortDescription = default, IEnumerable<string> stacExtensions = default, IEnumerable<StacItemModel> features = default, IEnumerable<double> bbox = default, ContextExtension context = default)
        {
            links ??= new ChangeTrackingList<StacLink>();
            stacExtensions ??= new ChangeTrackingList<string>();
            features ??= new ChangeTrackingList<StacItemModel>();
            bbox ??= new ChangeTrackingList<double>();

            return new ItemCollectionModel(
                StacModelType.FeatureCollection,
                stacVersion,
                links.ToList(),
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacExtensions.ToList(),
                additionalBinaryDataProperties: null,
                features.ToList(),
                bbox.ToList(),
                context);
        }

        /// <summary> Represents a STAC Item, which is a GeoJSON Feature with additional metadata. </summary>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="links"> Links to related resources and endpoints. </param>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacExtensions"> URLs to STAC extensions implemented by this STAC resource. </param>
        /// <param name="geometry"> Geometry object defining the feature's shape. </param>
        /// <param name="bbox"> Bounding box coordinates for the feature. </param>
        /// <param name="id"> Unique identifier for the feature. </param>
        /// <param name="collection"> ID of the STAC collection this item belongs to. </param>
        /// <param name="properties"> Attributes associated with the feature. </param>
        /// <param name="assets"> Assets. </param>
        /// <param name="msftTimestamp"> MSFT Timestamp. </param>
        /// <param name="msftEtag"> MSFT ETag. </param>
        /// <returns> A new <see cref="PlanetaryComputer.StacItemModel"/> instance for mocking. </returns>
        public static StacItemModel StacItemModel(string stacVersion = default, IEnumerable<StacLink> links = default, string msftCreated = default, string msftUpdated = default, string msftShortDescription = default, IEnumerable<string> stacExtensions = default, GeoJsonGeometry geometry = default, IEnumerable<double> bbox = default, string id = default, string collection = default, ItemProperties properties = default, IDictionary<string, StacAsset> assets = default, string msftTimestamp = default, string msftEtag = default)
        {
            links ??= new ChangeTrackingList<StacLink>();
            stacExtensions ??= new ChangeTrackingList<string>();
            bbox ??= new ChangeTrackingList<double>();
            assets ??= new ChangeTrackingDictionary<string, StacAsset>();

            return new StacItemModel(
                StacModelType.Feature,
                stacVersion,
                links.ToList(),
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacExtensions.ToList(),
                additionalBinaryDataProperties: null,
                geometry,
                bbox.ToList(),
                id,
                collection,
                properties,
                assets,
                msftTimestamp,
                msftEtag);
        }

        /// <summary>
        /// Represents a GeoJSON geometry object as defined by RFC 7946.
        /// 
        /// Supported geometry types include:
        /// - **Point**: A single geographic coordinate.
        /// - **LineString**: A sequence of geographic coordinates forming a line.
        /// - **Polygon**: A closed shape defined by linear rings.
        /// - **MultiPoint**: A collection of Points.
        /// - **MultiLineString**: A collection of LineStrings.
        /// - **MultiPolygon**: A collection of Polygons.
        /// 
        /// Used for spatial filtering in STAC.
        /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="GeoJsonPoint"/>, <see cref="GeoJsonPolygon"/>, <see cref="MultiPolygon"/>, <see cref="MultiLineString"/>, <see cref="LineString"/>, and <see cref="MultiPoint"/>.
        /// </summary>
        /// <param name="type"> The type of the geometry. </param>
        /// <param name="bbox"> Optional bounding box of the geometry. </param>
        /// <returns> A new <see cref="PlanetaryComputer.GeoJsonGeometry"/> instance for mocking. </returns>
        public static GeoJsonGeometry GeoJsonGeometry(string @type = default, IEnumerable<double> bbox = default)
        {
            bbox ??= new ChangeTrackingList<double>();

            return new UnknownGeoJsonGeometry(new GeometryType(@type), bbox.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Represents a GeoJSON Point geometry. </summary>
        /// <param name="bbox"> Optional bounding box of the geometry. </param>
        /// <param name="coordinates"> The coordinates of the point as [longitude, latitude]. </param>
        /// <returns> A new <see cref="PlanetaryComputer.GeoJsonPoint"/> instance for mocking. </returns>
        public static GeoJsonPoint GeoJsonPoint(IEnumerable<double> bbox = default, string coordinates = default)
        {
            bbox ??= new ChangeTrackingList<double>();

            return new GeoJsonPoint(GeometryType.Point, bbox.ToList(), additionalBinaryDataProperties: null, coordinates);
        }

        /// <summary> Represents a Polygon. </summary>
        /// <param name="bbox"> Optional bounding box of the geometry. </param>
        /// <param name="coordinates"> The coordinates of the polygon. </param>
        /// <returns> A new <see cref="PlanetaryComputer.GeoJsonPolygon"/> instance for mocking. </returns>
        public static GeoJsonPolygon GeoJsonPolygon(IEnumerable<double> bbox = default, IEnumerable<IList<IList<double>>> coordinates = default)
        {
            bbox ??= new ChangeTrackingList<double>();
            coordinates ??= new ChangeTrackingList<IList<IList<double>>>();

            return new GeoJsonPolygon(GeometryType.Polygon, bbox.ToList(), additionalBinaryDataProperties: null, coordinates.ToList());
        }

        /// <summary> Represents a MultiPolygon. </summary>
        /// <param name="bbox"> Optional bounding box of the geometry. </param>
        /// <param name="coordinates"> The coordinates of the multipolygon. </param>
        /// <returns> A new <see cref="PlanetaryComputer.MultiPolygon"/> instance for mocking. </returns>
        public static MultiPolygon MultiPolygon(IEnumerable<double> bbox = default, IEnumerable<IList<IList<double>>> coordinates = default)
        {
            bbox ??= new ChangeTrackingList<double>();
            coordinates ??= new ChangeTrackingList<IList<IList<double>>>();

            return new MultiPolygon(GeometryType.MultiPolygon, bbox.ToList(), additionalBinaryDataProperties: null, coordinates.ToList());
        }

        /// <summary> Represents a MultiLineString. </summary>
        /// <param name="bbox"> Optional bounding box of the geometry. </param>
        /// <param name="coordinates"> The coordinates of the multilinestring. </param>
        /// <returns> A new <see cref="PlanetaryComputer.MultiLineString"/> instance for mocking. </returns>
        public static MultiLineString MultiLineString(IEnumerable<double> bbox = default, IEnumerable<IList<double>> coordinates = default)
        {
            bbox ??= new ChangeTrackingList<double>();
            coordinates ??= new ChangeTrackingList<IList<double>>();

            return new MultiLineString(GeometryType.MultiLineString, bbox.ToList(), additionalBinaryDataProperties: null, coordinates.ToList());
        }

        /// <summary> Represents a LineString. </summary>
        /// <param name="bbox"> Optional bounding box of the geometry. </param>
        /// <param name="coordinates"> The coordinates of the linestring. </param>
        /// <returns> A new <see cref="PlanetaryComputer.LineString"/> instance for mocking. </returns>
        public static LineString LineString(IEnumerable<double> bbox = default, IEnumerable<double> coordinates = default)
        {
            bbox ??= new ChangeTrackingList<double>();
            coordinates ??= new ChangeTrackingList<double>();

            return new LineString(GeometryType.LineString, bbox.ToList(), additionalBinaryDataProperties: null, coordinates.ToList());
        }

        /// <summary> Represents a MultiPoint. </summary>
        /// <param name="bbox"> Optional bounding box of the geometry. </param>
        /// <param name="coordinates"> The coordinates of the multipoint. </param>
        /// <returns> A new <see cref="PlanetaryComputer.MultiPoint"/> instance for mocking. </returns>
        public static MultiPoint MultiPoint(IEnumerable<double> bbox = default, IEnumerable<double> coordinates = default)
        {
            bbox ??= new ChangeTrackingList<double>();
            coordinates ??= new ChangeTrackingList<double>();

            return new MultiPoint(GeometryType.MultiPoint, bbox.ToList(), additionalBinaryDataProperties: null, coordinates.ToList());
        }

        /// <summary>
        /// Properties of a STAC Item containing metadata about the asset.
        /// 
        /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/item-spec.md#properties-object
        /// </summary>
        /// <param name="platform"> Platform that acquired the data. </param>
        /// <param name="instruments"> Instruments that acquired the data. </param>
        /// <param name="constellation"> Constellation of satellites that acquired the data. </param>
        /// <param name="mission"> Mission associated with the data. </param>
        /// <param name="providers"> Organizations or individuals who provide the data. </param>
        /// <param name="gsd"> Ground sample distance in meters. </param>
        /// <param name="created"> Creation timestamp of the data. </param>
        /// <param name="updated"> Last update timestamp of the data. </param>
        /// <param name="title"> Human-readable title for the item. </param>
        /// <param name="description"> Detailed description of the item. </param>
        /// <param name="datetime"> Datetime the asset represents in RFC 3339 format. </param>
        /// <param name="startDatetime"> Start time of the item observation period. </param>
        /// <param name="endDatetime"> End time of the item observation period. </param>
        /// <param name="additionalProperties"></param>
        /// <returns> A new <see cref="PlanetaryComputer.ItemProperties"/> instance for mocking. </returns>
        public static ItemProperties ItemProperties(string platform = default, IEnumerable<string> instruments = default, string constellation = default, string mission = default, IEnumerable<StacProvider> providers = default, float? gsd = default, DateTimeOffset? created = default, DateTimeOffset? updated = default, string title = default, string description = default, string datetime = default, DateTimeOffset? startDatetime = default, DateTimeOffset? endDatetime = default, IDictionary<string, BinaryData> additionalProperties = default)
        {
            instruments ??= new ChangeTrackingList<string>();
            providers ??= new ChangeTrackingList<StacProvider>();
            additionalProperties ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new ItemProperties(
                platform,
                instruments.ToList(),
                constellation,
                mission,
                providers.ToList(),
                gsd,
                created,
                updated,
                title,
                description,
                datetime,
                startDatetime,
                endDatetime,
                additionalProperties);
        }

        /// <summary>
        /// Base type for STAC items and collections with discriminator.
        /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="ItemCollectionModel"/> and <see cref="StacItemModel"/>.
        /// </summary>
        /// <param name="type"> The type discriminator for STAC resources. </param>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="links"> Links to related resources and endpoints. </param>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacExtensions"> URLs to STAC extensions implemented by this STAC resource. </param>
        /// <returns> A new <see cref="PlanetaryComputer.StacItemOrItemCollection"/> instance for mocking. </returns>
        public static StacItemOrItemCollection StacItemOrItemCollection(string @type = default, string stacVersion = default, IEnumerable<StacLink> links = default, string msftCreated = default, string msftUpdated = default, string msftShortDescription = default, IEnumerable<string> stacExtensions = default)
        {
            links ??= new ChangeTrackingList<StacLink>();
            stacExtensions ??= new ChangeTrackingList<string>();

            return new UnknownStacItemOrItemCollection(
                new StacModelType(@type),
                stacVersion,
                links.ToList(),
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacExtensions.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// https://github.com/radiantearth/stac-api-spec/tree/master/extensions/context#context-extension-specification
        /// 
        /// Context information for a search response including pagination details.
        /// </summary>
        /// <param name="returned"> Number of items returned in the response. </param>
        /// <param name="limit"> Maximum number of items requested. </param>
        /// <param name="matched"> Total number of items matching the query. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ContextExtension"/> instance for mocking. </returns>
        public static ContextExtension ContextExtension(int returned = default, int? limit = default, int? matched = default)
        {
            return new ContextExtension(returned, limit, matched, additionalBinaryDataProperties: null);
        }

        /// <summary> JSON Schema structure for STAC Queryables. </summary>
        /// <param name="additionalProperties"></param>
        /// <returns> A new <see cref="PlanetaryComputer.JsonSchema"/> instance for mocking. </returns>
        public static JsonSchema JsonSchema(IReadOnlyDictionary<string, BinaryData> additionalProperties = default)
        {
            additionalProperties ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new JsonSchema(additionalProperties);
        }

        /// <summary> Definition of a queryable field for STAC API filtering. </summary>
        /// <param name="name"> Name of the queryable field. </param>
        /// <param name="definition"> Metadata for the queryable field. </param>
        /// <param name="createIndex"> Whether to create a database index for this field. </param>
        /// <param name="dataType"> Data type of the queryable field. </param>
        /// <returns> A new <see cref="PlanetaryComputer.QueryableProperty"/> instance for mocking. </returns>
        public static QueryableProperty QueryableProperty(string name = default, QueryableDefinitionType definition = default, bool? createIndex = default, QueryableDefinitionDataType? dataType = default)
        {
            return new QueryableProperty(name, definition, createIndex, dataType, additionalBinaryDataProperties: null);
        }

        /// <summary> QueryableDefinitionType. </summary>
        /// <param name="additionalProperties"></param>
        /// <returns> A new <see cref="PlanetaryComputer.QueryableDefinitionType"/> instance for mocking. </returns>
        public static QueryableDefinitionType QueryableDefinitionType(IDictionary<string, BinaryData> additionalProperties = default)
        {
            additionalProperties ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new QueryableDefinitionType(additionalProperties);
        }

        /// <summary>
        /// https://github.com/radiantearth/stac-api-spec/blob/master/api-spec.md#ogc-api---features-endpoints
        /// 
        /// Represents the OGC API conformance declaration.
        /// </summary>
        /// <param name="conformsTo"> List of OGC API conformance classes implemented by this API. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ConformanceClasses"/> instance for mocking. </returns>
        public static ConformanceClasses ConformanceClasses(IEnumerable<Uri> conformsTo = default)
        {
            conformsTo ??= new ChangeTrackingList<Uri>();

            return new ConformanceClasses(conformsTo.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// Search model.
        /// 
        /// Overrides the validation for datetime from the base request model.
        /// 
        /// Defines parameters for a STAC search POST request.
        /// </summary>
        /// <param name="collections"> List of collection IDs to search within. </param>
        /// <param name="ids"> List of specific item IDs to return. </param>
        /// <param name="bbox"> Bounding box for spatial filtering in format [west, south, east, north]. </param>
        /// <param name="intersects"> GeoJSON geometry for spatial filtering. </param>
        /// <param name="datetime"> Temporal filter in RFC 3339 format, can be a single time or range. </param>
        /// <param name="limit"> Maximum number of results to return. </param>
        /// <param name="conf">
        /// Conf
        /// 
        /// Overrides datetime validation from the base request model.
        /// </param>
        /// <param name="sign"> Whether to sign asset URLs in the response. </param>
        /// <param name="duration"> URL signature duration in seconds. </param>
        /// <param name="query">
        /// STAC Query
        /// 
        /// See the [STAC Query Extension](https://github.com/stac-api-extensions/query).
        /// </param>
        /// <param name="sortBy">
        /// Sort criteria for the search results.
        /// 
        /// See the [STAC Sort Extension](https://github.com/stac-api-extensions/sort).
        /// </param>
        /// <param name="fields">
        /// Specifies which fields to include or exclude in the STAC search results.
        /// 
        /// See the [STAC Fields Extension](https://github.com/stac-api-extensions/fields).
        /// </param>
        /// <param name="filter">
        /// CQL2 Filter
        /// 
        /// See the [STAC Filter Extension](https://github.com/stac-api-extensions/filter).
        /// </param>
        /// <param name="filterCrs"> Coordinate reference system for the filter. </param>
        /// <param name="filterLang"> Filter language to use for the filter expression. </param>
        /// <param name="token"> Pagination token for fetching the next set of results. </param>
        /// <returns> A new <see cref="PlanetaryComputer.SearchPostContent"/> instance for mocking. </returns>
        public static SearchPostContent SearchPostContent(IEnumerable<string> collections = default, IEnumerable<string> ids = default, IEnumerable<double> bbox = default, GeoJsonGeometry intersects = default, string datetime = default, int? limit = default, IDictionary<string, BinaryData> conf = default, SignType? sign = default, int? duration = default, StacQuery query = default, IEnumerable<SortExtension> sortBy = default, IEnumerable<SearchPostRequestFields> fields = default, string filter = default, string filterCrs = default, FilterLang? filterLang = default, string token = default)
        {
            collections ??= new ChangeTrackingList<string>();
            ids ??= new ChangeTrackingList<string>();
            bbox ??= new ChangeTrackingList<double>();
            conf ??= new ChangeTrackingDictionary<string, BinaryData>();
            sortBy ??= new ChangeTrackingList<SortExtension>();
            fields ??= new ChangeTrackingList<SearchPostRequestFields>();

            return new SearchPostContent(
                collections.ToList(),
                ids.ToList(),
                bbox.ToList(),
                intersects,
                datetime,
                limit,
                conf,
                sign,
                duration,
                query,
                sortBy.ToList(),
                fields.ToList(),
                filter,
                filterCrs,
                filterLang,
                token,
                additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// Represent a STAC query
        /// 
        /// https://github.com/stac-api-extensions/query
        /// </summary>
        /// <param name="additionalProperties"></param>
        /// <returns> A new <see cref="PlanetaryComputer.StacQuery"/> instance for mocking. </returns>
        public static StacQuery StacQuery(IDictionary<string, BinaryData> additionalProperties = default)
        {
            additionalProperties ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new StacQuery(additionalProperties);
        }

        /// <summary>
        /// https://github.com/radiantearth/stac-api-spec/tree/master/extensions/sort#sort-api-extension
        /// 
        /// Represents a sort specification for STAC API queries.
        /// </summary>
        /// <param name="field"> The field name to sort by. </param>
        /// <param name="direction"> The sort direction (ascending or descending). </param>
        /// <returns> A new <see cref="PlanetaryComputer.SortExtension"/> instance for mocking. </returns>
        public static SortExtension SortExtension(string @field = default, SortDirections direction = default)
        {
            return new SortExtension(@field, direction, additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// FieldsExtension.
        /// 
        /// Attributes:
        /// include: set of fields to include.
        /// exclude: set of fields to exclude.
        /// 
        /// Controls which fields to include or exclude from the response.
        /// </summary>
        /// <param name="include"> Array of field names to include in the response. </param>
        /// <param name="exclude"> Array of field names to exclude from the response. </param>
        /// <returns> A new <see cref="PlanetaryComputer.SearchPostRequestFields"/> instance for mocking. </returns>
        public static SearchPostRequestFields SearchPostRequestFields(IEnumerable<string> include = default, IEnumerable<string> exclude = default)
        {
            include ??= new ChangeTrackingList<string>();
            exclude ??= new ChangeTrackingList<string>();

            return new SearchPostRequestFields(include.ToList(), exclude.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> User-specific collection settings for visualization. </summary>
        /// <param name="tileSettings"> Settings for map tile visualization. </param>
        /// <param name="mosaicInfo"> Settings for data mosaic visualization. </param>
        /// <returns> A new <see cref="PlanetaryComputer.UserCollectionSettings"/> instance for mocking. </returns>
        public static UserCollectionSettings UserCollectionSettings(TileSettings tileSettings = default, MosaicInfo mosaicInfo = default)
        {
            return new UserCollectionSettings(tileSettings, mosaicInfo, additionalBinaryDataProperties: null);
        }

        /// <summary> Configuration for map tile visualization. </summary>
        /// <param name="minZoom">
        /// The minimum zoom level that can be requested for this collection. Provides a
        /// hard limit for the tile servers to ensure they don't get requests for low zoom
        /// levels, which would cause many files to be fetched and the tile servers to
        /// hang.
        /// </param>
        /// <param name="maxItemsPerTile"> Maximum number of items to include in a single tile. </param>
        /// <param name="defaultLocation"> Default map location when displaying this collection. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TileSettings"/> instance for mocking. </returns>
        public static TileSettings TileSettings(int minZoom = default, int maxItemsPerTile = default, DefaultLocation defaultLocation = default)
        {
            return new TileSettings(minZoom, maxItemsPerTile, defaultLocation, additionalBinaryDataProperties: null);
        }

        /// <summary> Defines a default geographic location for map visualization. </summary>
        /// <param name="zoom"> Default zoom level for the map. </param>
        /// <param name="coordinates"> Default center coordinates [latitude, longitude] for the map. </param>
        /// <returns> A new <see cref="PlanetaryComputer.DefaultLocation"/> instance for mocking. </returns>
        public static DefaultLocation DefaultLocation(int zoom = default, IEnumerable<float> coordinates = default)
        {
            coordinates ??= new ChangeTrackingList<float>();

            return new DefaultLocation(zoom, coordinates.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Configuration for data mosaic visualization. </summary>
        /// <param name="mosaics"> Predefined data mosaics available for this collection. </param>
        /// <param name="renderOptions"> Available render options for visualizing the data. </param>
        /// <param name="defaultLocation"> Default map location when displaying this collection. </param>
        /// <param name="defaultCustomQuery"> A list of CQL-JSON expressions to use as the default for  this collection. </param>
        /// <returns> A new <see cref="PlanetaryComputer.MosaicInfo"/> instance for mocking. </returns>
        public static MosaicInfo MosaicInfo(IEnumerable<StacMosaic> mosaics = default, IEnumerable<RenderOptionModel> renderOptions = default, DefaultLocation defaultLocation = default, CqlFilter defaultCustomQuery = default)
        {
            mosaics ??= new ChangeTrackingList<StacMosaic>();
            renderOptions ??= new ChangeTrackingList<RenderOptionModel>();

            return new MosaicInfo(mosaics.ToList(), renderOptions.ToList(), defaultLocation, defaultCustomQuery, additionalBinaryDataProperties: null);
        }

        /// <summary> Defines a named mosaic with filtering criteria. </summary>
        /// <param name="id"> Unique identifier for the mosaic. </param>
        /// <param name="name"> Short descriptive name for the mosaic. </param>
        /// <param name="description"> Detailed description of the mosaic. </param>
        /// <param name="cql"> A list of valid CQL2-JSON expressions used to filter the collection to moasic. </param>
        /// <returns> A new <see cref="PlanetaryComputer.StacMosaic"/> instance for mocking. </returns>
        public static StacMosaic StacMosaic(string id = default, string name = default, string description = default, IEnumerable<CqlFilter> cql = default)
        {
            cql ??= new ChangeTrackingList<CqlFilter>();

            return new StacMosaic(id, name, description, cql.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// Represent a CQL2 query
        /// 
        /// https://github.com/stac-api-extensions/filter
        /// </summary>
        /// <param name="additionalProperties"></param>
        /// <returns> A new <see cref="PlanetaryComputer.CqlFilter"/> instance for mocking. </returns>
        public static CqlFilter CqlFilter(IDictionary<string, BinaryData> additionalProperties = default)
        {
            additionalProperties ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new CqlFilter(additionalProperties);
        }

        /// <summary> Defines visualization parameters for rendering data on a map. </summary>
        /// <param name="id"> Unique identifier for the render option. </param>
        /// <param name="name"> Short descriptive name for the render option. </param>
        /// <param name="description">
        /// A longer description of the render option that can be used to explain its
        /// content.
        /// </param>
        /// <param name="type"> The type of rendering to apply (raster or vector). </param>
        /// <param name="options">
        /// A URL query-string encoded string of TiTiler rendering options. Valid only for
        /// `raster-tile` types.
        /// 
        /// See [Query Parameters](https://developmentseed.org/titiler/endpoints/cog/#description).
        /// </param>
        /// <param name="vectorOptions">
        /// Options for rendering vector tiles. Valid only for `vt-polygon`  and `vt-line`
        /// types.
        /// </param>
        /// <param name="minZoom"> Minimum zoom level at which to display this layer. </param>
        /// <param name="legend"> Legend configuration for this render option. </param>
        /// <param name="conditions">
        /// A list of property/value conditions that must be in the active mosaic CQL for
        /// this render option to be enabled
        /// </param>
        /// <returns> A new <see cref="PlanetaryComputer.RenderOptionModel"/> instance for mocking. </returns>
        public static RenderOptionModel RenderOptionModel(string id = default, string name = default, string description = default, RenderOptionType? @type = default, string options = default, RenderOptionVectorOptions vectorOptions = default, int? minZoom = default, RenderOptionLegend legend = default, IEnumerable<RenderOptionCondition> conditions = default)
        {
            conditions ??= new ChangeTrackingList<RenderOptionCondition>();

            return new RenderOptionModel(
                id,
                name,
                description,
                @type,
                options,
                vectorOptions,
                minZoom,
                legend,
                conditions.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Defines parameters for vector tile rendering. </summary>
        /// <param name="tilejsonKey"> Asset key containing the TileJSON URL. </param>
        /// <param name="sourceLayer"> Name of the source layer in the vector tiles. </param>
        /// <param name="fillColor"> Fill color for polygon features. </param>
        /// <param name="strokeColor"> Stroke color for line features. </param>
        /// <param name="strokeWidth"> Width of line strokes in pixels. </param>
        /// <param name="filter"> MapBox GL filter expression to filter features. </param>
        /// <returns> A new <see cref="PlanetaryComputer.RenderOptionVectorOptions"/> instance for mocking. </returns>
        public static RenderOptionVectorOptions RenderOptionVectorOptions(string tilejsonKey = default, string sourceLayer = default, string fillColor = default, string strokeColor = default, int? strokeWidth = default, IEnumerable<string> filter = default)
        {
            filter ??= new ChangeTrackingList<string>();

            return new RenderOptionVectorOptions(
                tilejsonKey,
                sourceLayer,
                fillColor,
                strokeColor,
                strokeWidth,
                filter.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Configuration for generating a data legend. </summary>
        /// <param name="type">
        /// Legend type to make,
        /// one of: `continuous`,
        /// `classmap`,
        /// `interval` or `none`
        /// (note, `none` is a string literal).
        /// </param>
        /// <param name="labels"> Text labels to display on the legend. </param>
        /// <param name="trimStart">
        /// The number of items to trim from the start of the legend definition. Used if
        /// there are values important for rendering (e.g. nodata) that aren't desirable in
        /// the legend.
        /// </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the legend. </param>
        /// <param name="scaleFactor">
        /// A factor to multiply interval legend labels by. Useful for scaled rasters whose
        /// colormap definitions map to unscaled values, effectively showing legend labels
        /// as scaled values.
        /// </param>
        /// <returns> A new <see cref="PlanetaryComputer.RenderOptionLegend"/> instance for mocking. </returns>
        public static RenderOptionLegend RenderOptionLegend(LegendConfigType? @type = default, IEnumerable<string> labels = default, int? trimStart = default, int? trimEnd = default, float? scaleFactor = default)
        {
            labels ??= new ChangeTrackingList<string>();

            return new RenderOptionLegend(
                @type,
                labels.ToList(),
                trimStart,
                trimEnd,
                scaleFactor,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Defines a condition for enabling a render option. </summary>
        /// <param name="property"> Property name to check in the active CQL filter. </param>
        /// <param name="value"> Value that the property must equal. </param>
        /// <returns> A new <see cref="PlanetaryComputer.RenderOptionCondition"/> instance for mocking. </returns>
        public static RenderOptionCondition RenderOptionCondition(string @property = default, string value = default)
        {
            return new RenderOptionCondition(@property, value, additionalBinaryDataProperties: null);
        }

        /// <summary> Defines how data is partitioned for efficient storage and retrieval. </summary>
        /// <param name="scheme"> Partitioning scheme to use for data organization. </param>
        /// <returns> A new <see cref="PlanetaryComputer.PartitionType"/> instance for mocking. </returns>
        public static PartitionType PartitionType(PartitionTypeScheme? scheme = default)
        {
            return new PartitionType(scheme, additionalBinaryDataProperties: null);
        }

        /// <summary> Microsoft Authentication Library (MSAL) configuration for frontend authentication. </summary>
        /// <param name="authnAppId"> Application ID for authentication. </param>
        /// <param name="tenantId"> Azure Active Directory tenant ID. </param>
        /// <param name="instance"> Azure AD instance URL. </param>
        /// <param name="redirectUri"> Redirect URI after authentication. </param>
        /// <returns> A new <see cref="PlanetaryComputer.AuthConfig"/> instance for mocking. </returns>
        public static AuthConfig AuthConfig(string authnAppId = default, string tenantId = default, Uri instance = default, Uri redirectUri = default)
        {
            return new AuthConfig(authnAppId, tenantId, instance, redirectUri, additionalBinaryDataProperties: null);
        }

        /// <summary> Represents an Azure Maps client ID for authentication. </summary>
        /// <param name="clientId"> The client ID for Azure Maps authentication. </param>
        /// <returns> A new <see cref="PlanetaryComputer.AzMapsClientId"/> instance for mocking. </returns>
        public static AzMapsClientId AzMapsClientId(string clientId = default)
        {
            return new AzMapsClientId(clientId, additionalBinaryDataProperties: null);
        }

        /// <summary> Represents an Azure Maps token for map visualization. </summary>
        /// <param name="token"> The authentication token for Azure Maps. </param>
        /// <param name="expiresOn"> Expiration timestamp of the token in Unix time. </param>
        /// <returns> A new <see cref="PlanetaryComputer.AzMapsToken"/> instance for mocking. </returns>
        public static AzMapsToken AzMapsToken(string token = default, int expiresOn = default)
        {
            return new AzMapsToken(token, expiresOn, additionalBinaryDataProperties: null);
        }

        /// <summary> Parameters for requesting a rendered image from a collection. </summary>
        /// <param name="cql"> Cql. </param>
        /// <param name="geometry"> Geometry. </param>
        /// <param name="renderParams"> JSON-encoded visualization parameters. </param>
        /// <param name="cols"> Width of the output image in pixels. </param>
        /// <param name="rows"> Height of the output image in pixels. </param>
        /// <param name="format"> Output format for the generated image. </param>
        /// <param name="showBranding"> Whether to include branding on the output image. </param>
        /// <param name="mask"> Whether to apply masking to invalid or no-data areas. </param>
        /// <returns> A new <see cref="PlanetaryComputer.ImageContent"/> instance for mocking. </returns>
        public static ImageContent ImageContent(CqlFilter cql = default, GeoJsonGeometry geometry = default, string renderParams = default, int cols = default, int rows = default, ImageRequestFormat? format = default, bool? showBranding = default, bool? mask = default)
        {
            return new ImageContent(
                cql,
                geometry,
                renderParams,
                cols,
                rows,
                format,
                showBranding,
                mask,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Geographic extent of a dataset expressed as a bounding box. </summary>
        /// <param name="bounds"> Array of coordinates defining the bounding box [west, south, east, north]. </param>
        /// <returns> A new <see cref="PlanetaryComputer.BoundsResult"/> instance for mocking. </returns>
        public static BoundsResult BoundsResult(IEnumerable<double> bounds = default)
        {
            bounds ??= new ChangeTrackingList<double>();

            return new BoundsResult(bounds.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Return dataset's basic info or the list of available assets. </summary>
        /// <param name="data"> body for info operation response. </param>
        /// <returns> A new <see cref="PlanetaryComputer.InfoOperationResult"/> instance for mocking. </returns>
        public static InfoOperationResult InfoOperationResult(TilerInfo data = default)
        {
            return new InfoOperationResult(data, additionalBinaryDataProperties: null);
        }

        /// <summary> TilerInfo. </summary>
        /// <param name="bounds"> Bounds. </param>
        /// <param name="bandMetadata"> Band Metadata. </param>
        /// <param name="bandDescriptions"> Band Descriptions. </param>
        /// <param name="dtype"> Data type. </param>
        /// <param name="nodataType"> NoData Type. </param>
        /// <param name="colorinterp"> Color interpretation. </param>
        /// <param name="driver"> Driver. </param>
        /// <param name="count"> Count. </param>
        /// <param name="width"> Width. </param>
        /// <param name="height"> Height. </param>
        /// <param name="overviews"> Overviews. </param>
        /// <param name="scales"> Scales. </param>
        /// <param name="offsets"> Offsets. </param>
        /// <param name="colormap"> Colormap. </param>
        /// <param name="minzoom"> Minzoom. </param>
        /// <param name="maxzoom"> Maxzoom. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TilerInfo"/> instance for mocking. </returns>
        public static TilerInfo TilerInfo(IEnumerable<double> bounds = default, IEnumerable<IList<BinaryData>> bandMetadata = default, IEnumerable<IList<string>> bandDescriptions = default, string dtype = default, NoDataType? nodataType = default, IEnumerable<string> colorinterp = default, string driver = default, int? count = default, int? width = default, int? height = default, IEnumerable<string> overviews = default, IEnumerable<long> scales = default, IEnumerable<long> offsets = default, IDictionary<string, IList<string>> colormap = default, long? minzoom = default, long? maxzoom = default)
        {
            bounds ??= new ChangeTrackingList<double>();
            bandMetadata ??= new ChangeTrackingList<IList<BinaryData>>();
            bandDescriptions ??= new ChangeTrackingList<IList<string>>();
            colorinterp ??= new ChangeTrackingList<string>();
            overviews ??= new ChangeTrackingList<string>();
            scales ??= new ChangeTrackingList<long>();
            offsets ??= new ChangeTrackingList<long>();
            colormap ??= new ChangeTrackingDictionary<string, IList<string>>();

            return new TilerInfo(
                bounds.ToList(),
                bandMetadata.ToList(),
                bandDescriptions.ToList(),
                dtype,
                nodataType,
                colorinterp.ToList(),
                driver,
                count,
                width,
                height,
                overviews.ToList(),
                scales.ToList(),
                offsets.ToList(),
                colormap,
                minzoom,
                maxzoom,
                additionalBinaryDataProperties: null);
        }

        /// <summary> GeoJSON Feature object containing rio-tiler model information. </summary>
        /// <param name="type"> GeoJSON type identifier. </param>
        /// <param name="geometry"> Geometry object defining the feature's shape. </param>
        /// <param name="properties"> Properties. </param>
        /// <param name="id"> Unique identifier for the feature. </param>
        /// <param name="bbox"> Bounding box coordinates for the feature. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TilerInfoGeoJsonFeature"/> instance for mocking. </returns>
        public static TilerInfoGeoJsonFeature TilerInfoGeoJsonFeature(FeatureType @type = default, GeoJsonGeometry geometry = default, IDictionary<string, TilerInfo> properties = default, string id = default, double? bbox = default)
        {
            properties ??= new ChangeTrackingDictionary<string, TilerInfo>();

            return new TilerInfoGeoJsonFeature(
                @type,
                geometry,
                properties,
                id,
                bbox,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Return dataset's statistics. </summary>
        /// <param name="data"> Response Asset Statistics Api Collections  Collection Id  Items  Item Id  Asset Statistics Get. </param>
        /// <returns> A new <see cref="PlanetaryComputer.AssetStatisticsResult"/> instance for mocking. </returns>
        public static AssetStatisticsResult AssetStatisticsResult(IDictionary<string, BandStatistics> data = default)
        {
            data ??= new ChangeTrackingDictionary<string, BandStatistics>();

            return new AssetStatisticsResult(data, additionalBinaryDataProperties: null);
        }

        /// <summary> Statistical information about a data band. </summary>
        /// <param name="min"> Minimum value in the band. </param>
        /// <param name="max"> Maximum value in the band. </param>
        /// <param name="mean"> Mean value of the band. </param>
        /// <param name="count"> Count of pixels in the band. </param>
        /// <param name="sum"> Sum of all pixel values in the band. </param>
        /// <param name="std"> Standard deviation of pixel values in the band. </param>
        /// <param name="median"> Median value of the band. </param>
        /// <param name="majority"> Most common value in the band. </param>
        /// <param name="minority"> Least common value in the band. </param>
        /// <param name="unique"> Count of unique values in the band. </param>
        /// <param name="histogram"> Histogram of pixel values in the band. </param>
        /// <param name="validPercent"> Percentage of valid (non-masked) pixels. </param>
        /// <param name="maskedPixels"> Count of masked pixels in the band. </param>
        /// <param name="validPixels"> Count of valid (non-masked) pixels in the band. </param>
        /// <param name="percentile2">
        /// Percentile 2
        /// The 2nd percentile value.
        /// </param>
        /// <param name="percentile98">
        /// Percentile 98
        /// The 98th percentile value.
        /// </param>
        /// <returns> A new <see cref="PlanetaryComputer.BandStatistics"/> instance for mocking. </returns>
        public static BandStatistics BandStatistics(float min = default, float max = default, float mean = default, float count = default, float sum = default, float std = default, float median = default, float majority = default, float minority = default, float unique = default, IEnumerable<IList<float>> histogram = default, float validPercent = default, float maskedPixels = default, float validPixels = default, float percentile2 = default, float percentile98 = default)
        {
            histogram ??= new ChangeTrackingList<IList<float>>();

            return new BandStatistics(
                min,
                max,
                mean,
                count,
                sum,
                std,
                median,
                majority,
                minority,
                unique,
                histogram.ToList(),
                validPercent,
                maskedPixels,
                validPixels,
                percentile2,
                percentile98,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Return dataset's statistics. </summary>
        /// <param name="additionalProperties"></param>
        /// <returns> A new <see cref="PlanetaryComputer.StatisticsResult"/> instance for mocking. </returns>
        public static StatisticsResult StatisticsResult(IReadOnlyDictionary<string, BinaryData> additionalProperties = default)
        {
            additionalProperties ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new StatisticsResult(additionalProperties);
        }

        /// <summary> https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/itemcollection-spec.mdCollection of STAC items with statistical information. </summary>
        /// <param name="type"> GeoJSON type identifier for ItemCollection. </param>
        /// <param name="features"> Array of STAC items with statistics. </param>
        /// <param name="bbox"> Bounding box coordinates [west, south, east, north]. </param>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacExtensions"> List of STAC extension URLs used by this item collection. </param>
        /// <param name="links"> Related links for the item collection. </param>
        /// <param name="context">
        /// Pagination context for the response
        /// 
        /// See the [STAC Context Extension](https://github.com/radiantearth/stac-api-spec/tree/master/extensions/context#context-extension-specification)
        /// </param>
        /// <returns> A new <see cref="PlanetaryComputer.GeoJsonStatisticsItemCollectionResult"/> instance for mocking. </returns>
        public static GeoJsonStatisticsItemCollectionResult GeoJsonStatisticsItemCollectionResult(ItemCollectionType @type = default, IEnumerable<GeoJsonStatisticsItemResult> features = default, IEnumerable<double> bbox = default, string stacVersion = default, string msftCreated = default, string msftUpdated = default, string msftShortDescription = default, IEnumerable<Uri> stacExtensions = default, IEnumerable<StacLink> links = default, ContextExtension context = default)
        {
            features ??= new ChangeTrackingList<GeoJsonStatisticsItemResult>();
            bbox ??= new ChangeTrackingList<double>();
            stacExtensions ??= new ChangeTrackingList<Uri>();
            links ??= new ChangeTrackingList<StacLink>();

            return new GeoJsonStatisticsItemCollectionResult(
                @type,
                features.ToList(),
                bbox.ToList(),
                stacVersion,
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacExtensions.ToList(),
                links.ToList(),
                context,
                additionalBinaryDataProperties: null);
        }

        /// <summary> STAC Item representing a spatiotemporal asset with statistical information. </summary>
        /// <param name="geometry"> Geometry object defining the feature's shape. </param>
        /// <param name="bbox"> Bounding box coordinates for the feature. </param>
        /// <param name="id"> Unique identifier for the feature. </param>
        /// <param name="type"> GeoJSON type identifier for Feature. </param>
        /// <param name="msftCreated"> MSFT Created. </param>
        /// <param name="msftUpdated"> MSFT Updated. </param>
        /// <param name="msftShortDescription"> MSFT Short Description. </param>
        /// <param name="stacVersion"> Stac Version. </param>
        /// <param name="collection"> ID of the STAC collection this item belongs to. </param>
        /// <param name="properties"> Properties. </param>
        /// <param name="msftTimestamp"> MSFT Timestamp. </param>
        /// <param name="msftEtag"> MSFT ETag. </param>
        /// <param name="stacExtensions"> List of STAC extension URLs used by this item. </param>
        /// <returns> A new <see cref="PlanetaryComputer.GeoJsonStatisticsItemResult"/> instance for mocking. </returns>
        public static GeoJsonStatisticsItemResult GeoJsonStatisticsItemResult(GeoJsonGeometry geometry = default, IEnumerable<double> bbox = default, string id = default, FeatureType @type = default, string msftCreated = default, string msftUpdated = default, string msftShortDescription = default, string stacVersion = default, string collection = default, ItemProperties properties = default, string msftTimestamp = default, string msftEtag = default, IEnumerable<Uri> stacExtensions = default)
        {
            bbox ??= new ChangeTrackingList<double>();
            stacExtensions ??= new ChangeTrackingList<Uri>();

            return new GeoJsonStatisticsItemResult(
                geometry,
                bbox.ToList(),
                id,
                @type,
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacVersion,
                collection,
                properties,
                msftTimestamp,
                msftEtag,
                stacExtensions.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// TileJSON model.
        /// 
        /// Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0TileJSON metadata describing a tile set according to the TileJSON specification
        /// </summary>
        /// <param name="tilejson"> Tilejson. </param>
        /// <param name="name"> Human-readable name of the tile set. </param>
        /// <param name="description"> Human-readable description of the tile set. </param>
        /// <param name="version"> Version. </param>
        /// <param name="attribution"> Attribution text for the data sources. </param>
        /// <param name="template"> URL template for feature info queries. </param>
        /// <param name="legend"> URL to legend content for the tile set. </param>
        /// <param name="scheme"> Tile addressing scheme (xyz or tms). </param>
        /// <param name="tiles"> Array of tile URL templates. </param>
        /// <param name="grids"> Array of UTFGrid URL templates. </param>
        /// <param name="data"> Array of data file URL templates. </param>
        /// <param name="minzoom"> Minimum zoom level available in the tile set. </param>
        /// <param name="maxzoom"> Maximum zoom level available in the tile set. </param>
        /// <param name="bounds"> Bounds. </param>
        /// <param name="center"> Default center point [longitude, latitude, zoom] for the tile set. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TileJsonResult"/> instance for mocking. </returns>
        public static TileJsonResult TileJsonResult(string tilejson = default, string name = default, string description = default, string version = default, string attribution = default, string template = default, string legend = default, TileJsonScheme? scheme = default, IEnumerable<string> tiles = default, IEnumerable<string> grids = default, IEnumerable<string> data = default, int? minzoom = default, int? maxzoom = default, IEnumerable<float> bounds = default, IEnumerable<float> center = default)
        {
            tiles ??= new ChangeTrackingList<string>();
            grids ??= new ChangeTrackingList<string>();
            data ??= new ChangeTrackingList<string>();
            bounds ??= new ChangeTrackingList<float>();
            center ??= new ChangeTrackingList<float>();

            return new TileJsonResult(
                tilejson,
                name,
                description,
                version,
                attribution,
                template,
                legend,
                scheme,
                tiles.ToList(),
                grids.ToList(),
                data.ToList(),
                minzoom,
                maxzoom,
                bounds.ToList(),
                center.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// Point model.
        /// 
        /// response model for `/point` endpointsResponse model for point query operations providing values at a specific location
        /// </summary>
        /// <param name="coordinates"> Geographic coordinates [longitude, latitude] of the queried point. </param>
        /// <param name="values"> Array of pixel values at the queried point for each band. </param>
        /// <param name="bandNames"> Names of each band in the raster data. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TitilerCoreModelsResponsesPoint"/> instance for mocking. </returns>
        public static TitilerCoreModelsResponsesPoint TitilerCoreModelsResponsesPoint(IEnumerable<float> coordinates = default, IEnumerable<float> values = default, IEnumerable<string> bandNames = default)
        {
            coordinates ??= new ChangeTrackingList<float>();
            values ??= new ChangeTrackingList<float>();
            bandNames ??= new ChangeTrackingList<string>();

            return new TitilerCoreModelsResponsesPoint(coordinates.ToList(), values.ToList(), bandNames.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Classmap legend response model. </summary>
        /// <param name="additionalProperties"></param>
        /// <returns> A new <see cref="PlanetaryComputer.ClassmapLegendResult"/> instance for mocking. </returns>
        public static ClassmapLegendResult ClassmapLegendResult(IReadOnlyDictionary<string, IList<long>> additionalProperties = default)
        {
            additionalProperties ??= new ChangeTrackingDictionary<string, IList<long>>();

            return new ClassmapLegendResult(additionalProperties, additionalBinaryDataProperties: null);
        }

        /// <summary> Metadata information for mosaic or search results. </summary>
        /// <param name="type"> Type of metadata resource. </param>
        /// <param name="bounds"> Geographic bounding box in [west, south, east, north] format. </param>
        /// <param name="minzoom"> Minimum zoom level supported. </param>
        /// <param name="maxzoom"> Maximum zoom level supported. </param>
        /// <param name="name"> Human-readable name for the resource. </param>
        /// <param name="assets"> List of asset identifiers included in the resource. </param>
        /// <param name="defaults"> Defaults. </param>
        /// <returns> A new <see cref="PlanetaryComputer.MosaicMetadata"/> instance for mocking. </returns>
        public static MosaicMetadata MosaicMetadata(MetadataType? @type = default, string bounds = default, int? minzoom = default, int? maxzoom = default, string name = default, IEnumerable<string> assets = default, IDictionary<string, string> defaults = default)
        {
            assets ??= new ChangeTrackingList<string>();
            defaults ??= new ChangeTrackingDictionary<string, string>();

            return new MosaicMetadata(
                @type,
                bounds,
                minzoom,
                maxzoom,
                name,
                assets.ToList(),
                defaults,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Response from a successful mosaic registration with search ID and related links. </summary>
        /// <param name="searchId"> Unique identifier for the registered search. </param>
        /// <param name="links"> Related links for the registered mosaic. </param>
        /// <returns> A new <see cref="PlanetaryComputer.RegisterResult"/> instance for mocking. </returns>
        public static RegisterResult RegisterResult(string searchId = default, IEnumerable<StacLink> links = default)
        {
            links ??= new ChangeTrackingList<StacLink>();

            return new RegisterResult(searchId, links.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Information about a registered STAC search query. </summary>
        /// <param name="search">
        /// Details of the saved search query
        /// 
        /// See the [PgSTAC Search table definition](https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915).
        /// </param>
        /// <param name="links"> Related links for the search query. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TitilerPgstacModelInfo"/> instance for mocking. </returns>
        public static TitilerPgstacModelInfo TitilerPgstacModelInfo(PgStacSearch search = default, IEnumerable<StacLink> links = default)
        {
            links ??= new ChangeTrackingList<StacLink>();

            return new TitilerPgstacModelInfo(search, links.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// PgSTAC Search entry.
        /// 
        /// ref:
        /// https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915Stored search query in the PgSTAC database
        /// </summary>
        /// <param name="hash"> Unique hash identifier for the search query. </param>
        /// <param name="search"> Search. </param>
        /// <param name="where"> SQL WHERE clause representing the search filters. </param>
        /// <param name="orderby"> SQL ORDER BY clause for sorting results. </param>
        /// <param name="lastused"> Timestamp when the search was last accessed. </param>
        /// <param name="usecount"> Number of times the search has been accessed. </param>
        /// <param name="metadata"> Additional metadata associated with the search. </param>
        /// <returns> A new <see cref="PlanetaryComputer.PgStacSearch"/> instance for mocking. </returns>
        public static PgStacSearch PgStacSearch(string hash = default, CqlFilter search = default, string @where = default, string @orderby = default, DateTimeOffset lastused = default, int usecount = default, MosaicMetadata metadata = default)
        {
            return new PgStacSearch(
                hash,
                search,
                @where,
                @orderby,
                lastused,
                usecount,
                metadata,
                additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// https://github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/tileMatrixSet.json
        /// 
        /// A definition of a tile matrix set following the Tile Matrix Set standard.
        /// For tileset metadata, such a description (in `tileMatrixSet` property) is only
        /// required for offline use,
        /// as an alternative to a link with a
        /// `http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme` relation type.
        /// </summary>
        /// <param name="title"> Human-readable title of the tile matrix set. </param>
        /// <param name="description">
        /// Brief narrative description of this tile matrix set, normally available for
        /// display to a human
        /// </param>
        /// <param name="keywords">
        /// Unordered list of one or more commonly used or formalized word(s) or phrase(s)
        /// used to describe this tile matrix set
        /// </param>
        /// <param name="id"> Unique identifier for the tile matrix set. </param>
        /// <param name="uri"> URI reference to the official definition. </param>
        /// <param name="orderedAxes"> Names of the coordinate axes in order. </param>
        /// <param name="crs"> Coordinate reference system identifier. </param>
        /// <param name="wellKnownScaleSet"> URL reference to a standardized scale set. </param>
        /// <param name="boundingBox"> Geographic extent of the tile matrix set. </param>
        /// <param name="tileMatrices"> Array of tile matrices at different zoom levels. </param>
        /// <returns> A new <see cref="PlanetaryComputer.TileMatrixSet"/> instance for mocking. </returns>
        public static TileMatrixSet TileMatrixSet(string title = default, string description = default, IEnumerable<string> keywords = default, string id = default, string uri = default, IEnumerable<string> orderedAxes = default, string crs = default, Uri wellKnownScaleSet = default, TileMatrixSetBoundingBox boundingBox = default, IEnumerable<TileMatrix> tileMatrices = default)
        {
            keywords ??= new ChangeTrackingList<string>();
            orderedAxes ??= new ChangeTrackingList<string>();
            tileMatrices ??= new ChangeTrackingList<TileMatrix>();

            return new TileMatrixSet(
                title,
                description,
                keywords.ToList(),
                id,
                uri,
                orderedAxes.ToList(),
                crs,
                wellKnownScaleSet,
                boundingBox,
                tileMatrices.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Geographic extent of the tile matrix set expressed in the specified coordinate reference system. </summary>
        /// <param name="lowerLeft"> Lower-left corner coordinates [x, y] of bounding box. </param>
        /// <param name="upperRight"> Upper-right corner coordinates [x, y] of bounding box. </param>
        /// <param name="crs"> Coordinate reference system identifier. </param>
        /// <param name="orderedAxes"> Explicit axis order for the CRS coordinates (e.g., ['x', 'y']). </param>
        /// <returns> A new <see cref="PlanetaryComputer.TileMatrixSetBoundingBox"/> instance for mocking. </returns>
        public static TileMatrixSetBoundingBox TileMatrixSetBoundingBox(IEnumerable<string> lowerLeft = default, IEnumerable<string> upperRight = default, string crs = default, IEnumerable<string> orderedAxes = default)
        {
            lowerLeft ??= new ChangeTrackingList<string>();
            upperRight ??= new ChangeTrackingList<string>();
            orderedAxes ??= new ChangeTrackingList<string>();

            return new TileMatrixSetBoundingBox(lowerLeft.ToList(), upperRight.ToList(), crs, orderedAxes.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// Tile Matrix Definition
        /// 
        /// A tile matrix, usually corresponding to a particular zoom level of a
        /// TileMatrixSet.
        /// 
        /// ref:
        /// https://github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/tileMatrix.json
        /// 
        /// Definition of a tile matrix at a specific zoom level within a tile matrix set
        /// </summary>
        /// <param name="title"> Human-readable title of the tile matrix level. </param>
        /// <param name="description"> Human-readable description of this tile matrix level. </param>
        /// <param name="keywords">
        /// Unordered list of one or more commonly used or formalized word(s) or phrase(s)
        /// used to describe this dataset
        /// </param>
        /// <param name="id"> Unique identifier for this tile matrix level, often the zoom level. </param>
        /// <param name="scaleDenominator"> Scale denominator representing the scale of this tile matrix level. </param>
        /// <param name="cellSize"> Size of a pixel in map units at this tile matrix level. </param>
        /// <param name="cornerOfOrigin">
        /// The corner of the tile matrix (_topLeft_ or _bottomLeft_) used as the origin
        /// for numbering tile rows and columns. This corner is also a corner of the (0, 0)
        /// tile.
        /// </param>
        /// <param name="pointOfOrigin">
        /// Precise position in CRS coordinates of the corner of origin (e.g. the top-left
        /// corner) for this tile matrix. This position is also a corner of the (0, 0)
        /// tile. In previous version, this was 'topLeftCorner' and 'cornerOfOrigin' did
        /// not exist.
        /// </param>
        /// <param name="tileWidth"> Pixel width of each tile at this level. </param>
        /// <param name="tileHeight"> Pixel height of each tile at this level. </param>
        /// <param name="matrixWidth"> Number of tiles horizontally at this matrix level. </param>
        /// <param name="matrixHeight"> Number of tiles vertically at this matrix level. </param>
        /// <param name="variableMatrixWidths">
        /// Describes the rows that has variable matrix width
        /// 
        /// ref: https://github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/variableMatrixWidth.json
        /// </param>
        /// <returns> A new <see cref="PlanetaryComputer.TileMatrix"/> instance for mocking. </returns>
        public static TileMatrix TileMatrix(string title = default, string description = default, IEnumerable<string> keywords = default, string id = default, float scaleDenominator = default, float cellSize = default, TileMatrixCornerOfOrigin? cornerOfOrigin = default, IEnumerable<double> pointOfOrigin = default, int tileWidth = default, int tileHeight = default, int matrixWidth = default, int matrixHeight = default, IEnumerable<VariableMatrixWidth> variableMatrixWidths = default)
        {
            keywords ??= new ChangeTrackingList<string>();
            pointOfOrigin ??= new ChangeTrackingList<double>();
            variableMatrixWidths ??= new ChangeTrackingList<VariableMatrixWidth>();

            return new TileMatrix(
                title,
                description,
                keywords.ToList(),
                id,
                scaleDenominator,
                cellSize,
                cornerOfOrigin,
                pointOfOrigin.ToList(),
                tileWidth,
                tileHeight,
                matrixWidth,
                matrixHeight,
                variableMatrixWidths.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Model for variableMatrixWidth. </summary>
        /// <param name="coalesce"> Number of tiles in width that coalesce in a single tile for these rows. </param>
        /// <param name="minTileRow"> First tile row where the coalescence factor applies for this tilematrix. </param>
        /// <param name="maxTileRow"> Last tile row where the coalescence factor applies for this tilematrix. </param>
        /// <returns> A new <see cref="PlanetaryComputer.VariableMatrixWidth"/> instance for mocking. </returns>
        public static VariableMatrixWidth VariableMatrixWidth(int coalesce = default, int minTileRow = default, int maxTileRow = default)
        {
            return new VariableMatrixWidth(coalesce, minTileRow, maxTileRow, additionalBinaryDataProperties: null);
        }

        /// <summary> SasToken. </summary>
        /// <param name="msftExpiry"> The expiration date and time of the SAS token in UTC. </param>
        /// <param name="token"> The SAS token string used for authentication. </param>
        /// <returns> A new <see cref="PlanetaryComputer.SasToken"/> instance for mocking. </returns>
        public static SasToken SasToken(DateTimeOffset msftExpiry = default, string token = default)
        {
            return new SasToken(msftExpiry, token, additionalBinaryDataProperties: null);
        }

        /// <summary> UnsignedLink. </summary>
        /// <param name="msftExpiry"> The expiry date of the signed link. This indicates when the link will no longer be valid. </param>
        /// <param name="href"> The URL of the unsigned link. </param>
        /// <returns> A new <see cref="PlanetaryComputer.UnsignedLink"/> instance for mocking. </returns>
        public static UnsignedLink UnsignedLink(DateTimeOffset? msftExpiry = default, string href = default)
        {
            return new UnsignedLink(msftExpiry, href, additionalBinaryDataProperties: null);
        }
    }
}
