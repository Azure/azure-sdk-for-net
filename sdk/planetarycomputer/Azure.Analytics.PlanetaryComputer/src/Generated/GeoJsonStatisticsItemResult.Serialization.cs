// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> STAC Item representing a spatiotemporal asset with statistical information. </summary>
    public partial class GeoJsonStatisticsItemResult : IJsonModel<GeoJsonStatisticsItemResult>
    {
        /// <summary> Initializes a new instance of <see cref="GeoJsonStatisticsItemResult"/> for deserialization. </summary>
        internal GeoJsonStatisticsItemResult()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<GeoJsonStatisticsItemResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<GeoJsonStatisticsItemResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(GeoJsonStatisticsItemResult)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("geometry"u8);
            writer.WriteObjectValue(Geometry, options);
            writer.WritePropertyName("bbox"u8);
            writer.WriteStartArray();
            foreach (double item in Bbox)
            {
                writer.WriteNumberValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            if (Optional.IsDefined(MsftCreated))
            {
                writer.WritePropertyName("msft:_created"u8);
                writer.WriteStringValue(MsftCreated);
            }
            if (Optional.IsDefined(MsftUpdated))
            {
                writer.WritePropertyName("msft:_updated"u8);
                writer.WriteStringValue(MsftUpdated);
            }
            if (Optional.IsDefined(MsftShortDescription))
            {
                writer.WritePropertyName("msft:short_description"u8);
                writer.WriteStringValue(MsftShortDescription);
            }
            if (Optional.IsDefined(StacVersion))
            {
                writer.WritePropertyName("stac_version"u8);
                writer.WriteStringValue(StacVersion);
            }
            if (Optional.IsDefined(Collection))
            {
                writer.WritePropertyName("collection"u8);
                writer.WriteStringValue(Collection);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteObjectValue(Properties, options);
            if (Optional.IsDefined(MsftTimestamp))
            {
                writer.WritePropertyName("_msft:ts"u8);
                writer.WriteStringValue(MsftTimestamp);
            }
            if (Optional.IsDefined(MsftEtag))
            {
                writer.WritePropertyName("_msft:etag"u8);
                writer.WriteStringValue(MsftEtag);
            }
            if (Optional.IsCollectionDefined(StacExtensions))
            {
                writer.WritePropertyName("stac_extensions"u8);
                writer.WriteStartArray();
                foreach (Uri item in StacExtensions)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item.AbsoluteUri);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        GeoJsonStatisticsItemResult IJsonModel<GeoJsonStatisticsItemResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual GeoJsonStatisticsItemResult JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<GeoJsonStatisticsItemResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(GeoJsonStatisticsItemResult)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeGeoJsonStatisticsItemResult(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static GeoJsonStatisticsItemResult DeserializeGeoJsonStatisticsItemResult(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            GeoJsonGeometry geometry = default;
            IList<double> bbox = default;
            string id = default;
            FeatureType @type = default;
            string msftCreated = default;
            string msftUpdated = default;
            string msftShortDescription = default;
            string stacVersion = default;
            string collection = default;
            ItemProperties properties = default;
            string msftTimestamp = default;
            string msftEtag = default;
            IList<Uri> stacExtensions = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("geometry"u8))
                {
                    geometry = GeoJsonGeometry.DeserializeGeoJsonGeometry(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("bbox"u8))
                {
                    List<double> array = new List<double>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    bbox = array;
                    continue;
                }
                if (prop.NameEquals("id"u8))
                {
                    id = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("type"u8))
                {
                    @type = new FeatureType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("msft:_created"u8))
                {
                    msftCreated = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("msft:_updated"u8))
                {
                    msftUpdated = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("msft:short_description"u8))
                {
                    msftShortDescription = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("stac_version"u8))
                {
                    stacVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("collection"u8))
                {
                    collection = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("properties"u8))
                {
                    properties = ItemProperties.DeserializeItemProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("_msft:ts"u8))
                {
                    msftTimestamp = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("_msft:etag"u8))
                {
                    msftEtag = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("stac_extensions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Uri> array = new List<Uri>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(new Uri(item.GetString()));
                        }
                    }
                    stacExtensions = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new GeoJsonStatisticsItemResult(
                geometry,
                bbox,
                id,
                @type,
                msftCreated,
                msftUpdated,
                msftShortDescription,
                stacVersion,
                collection,
                properties,
                msftTimestamp,
                msftEtag,
                stacExtensions ?? new ChangeTrackingList<Uri>(),
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<GeoJsonStatisticsItemResult>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<GeoJsonStatisticsItemResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(GeoJsonStatisticsItemResult)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        GeoJsonStatisticsItemResult IPersistableModel<GeoJsonStatisticsItemResult>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual GeoJsonStatisticsItemResult PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<GeoJsonStatisticsItemResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeGeoJsonStatisticsItemResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(GeoJsonStatisticsItemResult)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<GeoJsonStatisticsItemResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
