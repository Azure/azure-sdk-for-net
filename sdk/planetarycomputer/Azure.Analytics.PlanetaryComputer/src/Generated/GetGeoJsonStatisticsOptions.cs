// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Options for getting GeoJSON statistics. </summary>
    public partial class GetGeoJsonStatisticsOptions
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="GetGeoJsonStatisticsOptions"/>. </summary>
        public GetGeoJsonStatisticsOptions()
        {
            Assets = new ChangeTrackingList<string>();
            AssetBandIndices = new ChangeTrackingList<string>();
            CategoriesPixels = new ChangeTrackingList<string>();
            Percentiles = new ChangeTrackingList<int>();
        }

        /// <summary> Initializes a new instance of <see cref="GetGeoJsonStatisticsOptions"/>. </summary>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="categoriesPixels"> List of pixel categorical values for which to report counts. </param>
        /// <param name="percentiles"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal GetGeoJsonStatisticsOptions(IList<string> assets, string expression, IList<string> assetBandIndices, bool? assetAsBand, float? noData, bool? unscale, ResamplingMethod? resampling, int? maxSize, bool? categorical, IList<string> categoriesPixels, IList<int> percentiles, string histogramBins, string histogramRange, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Assets = assets;
            Expression = expression;
            AssetBandIndices = assetBandIndices;
            AssetAsBand = assetAsBand;
            NoData = noData;
            Unscale = unscale;
            Resampling = resampling;
            MaxSize = maxSize;
            Categorical = categorical;
            CategoriesPixels = categoriesPixels;
            Percentiles = percentiles;
            HistogramBins = histogramBins;
            HistogramRange = histogramRange;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Asset's names. </summary>
        public IList<string> Assets { get; }

        /// <summary> Band math expression between assets. </summary>
        public string Expression { get; set; }

        /// <summary> Per asset band indexes (coma separated indexes). </summary>
        public IList<string> AssetBandIndices { get; }

        /// <summary> Asset as Band. </summary>
        public bool? AssetAsBand { get; set; }

        /// <summary> Overwrite internal Nodata value. </summary>
        public float? NoData { get; set; }

        /// <summary> Apply internal Scale or Offset. </summary>
        public bool? Unscale { get; set; }

        /// <summary> Resampling method. </summary>
        public ResamplingMethod? Resampling { get; set; }

        /// <summary> Maximum dimension in pixels for the source data used to calculate statistics. </summary>
        public int? MaxSize { get; set; }

        /// <summary> Return statistics for categorical dataset. </summary>
        public bool? Categorical { get; set; }

        /// <summary> List of pixel categorical values for which to report counts. </summary>
        public IList<string> CategoriesPixels { get; }

        /// <summary> List of percentile values (default to [2, 98]). </summary>
        public IList<int> Percentiles { get; }

        /// <summary>
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </summary>
        public string HistogramBins { get; set; }

        /// <summary>
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </summary>
        public string HistogramRange { get; set; }
    }
}
