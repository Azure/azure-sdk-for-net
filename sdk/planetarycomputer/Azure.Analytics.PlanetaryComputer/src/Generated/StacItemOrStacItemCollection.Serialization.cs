// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary>
    /// Base type for STAC items and collections with discriminator.
    /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="StacItemCollectionModel"/> and <see cref="StacItemModel"/>.
    /// </summary>
    [PersistableModelProxy(typeof(UnknownStacItemOrStacItemCollection))]
    public abstract partial class StacItemOrStacItemCollection : IJsonModel<StacItemOrStacItemCollection>
    {
        /// <summary> Initializes a new instance of <see cref="StacItemOrStacItemCollection"/> for deserialization. </summary>
        internal StacItemOrStacItemCollection()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<StacItemOrStacItemCollection>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemOrStacItemCollection>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(StacItemOrStacItemCollection)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            if (Optional.IsDefined(StacVersion))
            {
                writer.WritePropertyName("stac_version"u8);
                writer.WriteStringValue(StacVersion);
            }
            if (Optional.IsCollectionDefined(Links))
            {
                writer.WritePropertyName("links"u8);
                writer.WriteStartArray();
                foreach (StacLink item in Links)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("msft:_created"u8);
                writer.WriteStringValue(CreatedOn);
            }
            if (Optional.IsDefined(UpdatedOn))
            {
                writer.WritePropertyName("msft:_updated"u8);
                writer.WriteStringValue(UpdatedOn);
            }
            if (Optional.IsDefined(ShortDescription))
            {
                writer.WritePropertyName("msft:short_description"u8);
                writer.WriteStringValue(ShortDescription);
            }
            if (Optional.IsCollectionDefined(StacExtensions))
            {
                writer.WritePropertyName("stac_extensions"u8);
                writer.WriteStartArray();
                foreach (string item in StacExtensions)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        StacItemOrStacItemCollection IJsonModel<StacItemOrStacItemCollection>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual StacItemOrStacItemCollection JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemOrStacItemCollection>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(StacItemOrStacItemCollection)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeStacItemOrStacItemCollection(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static StacItemOrStacItemCollection DeserializeStacItemOrStacItemCollection(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type"u8, out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "FeatureCollection":
                        return StacItemCollectionModel.DeserializeStacItemCollectionModel(element, options);
                    case "Feature":
                        return StacItemModel.DeserializeStacItemModel(element, options);
                }
            }
            return UnknownStacItemOrStacItemCollection.DeserializeUnknownStacItemOrStacItemCollection(element, options);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<StacItemOrStacItemCollection>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemOrStacItemCollection>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(StacItemOrStacItemCollection)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        StacItemOrStacItemCollection IPersistableModel<StacItemOrStacItemCollection>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual StacItemOrStacItemCollection PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemOrStacItemCollection>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeStacItemOrStacItemCollection(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(StacItemOrStacItemCollection)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<StacItemOrStacItemCollection>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="stacItemOrStacItemCollection"> The <see cref="StacItemOrStacItemCollection"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(StacItemOrStacItemCollection stacItemOrStacItemCollection)
        {
            if (stacItemOrStacItemCollection == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(stacItemOrStacItemCollection, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
