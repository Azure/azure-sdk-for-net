// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Parameters for requesting a rendered image from a collection. </summary>
    public partial class ImageContent
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ImageContent"/>. </summary>
        /// <param name="cql"> Cql. </param>
        /// <param name="renderParameters"> JSON-encoded visualization parameters. </param>
        /// <param name="columns"> Width of the output image in pixels. </param>
        /// <param name="rows"> Height of the output image in pixels. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cql"/> or <paramref name="renderParameters"/> is null. </exception>
        public ImageContent(IDictionary<string, BinaryData> cql, string renderParameters, int columns, int rows)
        {
            Argument.AssertNotNull(cql, nameof(cql));
            Argument.AssertNotNull(renderParameters, nameof(renderParameters));

            Cql = cql;
            RenderParameters = renderParameters;
            Columns = columns;
            Rows = rows;
        }

        /// <summary> Initializes a new instance of <see cref="ImageContent"/>. </summary>
        /// <param name="cql"> Cql. </param>
        /// <param name="zoom"> Zoom. </param>
        /// <param name="geometry"> Geometry. </param>
        /// <param name="renderParameters"> JSON-encoded visualization parameters. </param>
        /// <param name="columns"> Width of the output image in pixels. </param>
        /// <param name="rows"> Height of the output image in pixels. </param>
        /// <param name="showBranding"> Whether to include branding on the output image. </param>
        /// <param name="imageSize"> Image size. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ImageContent(IDictionary<string, BinaryData> cql, float? zoom, GeoJsonGeometry geometry, string renderParameters, int columns, int rows, bool? showBranding, string imageSize, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Cql = cql;
            Zoom = zoom;
            Geometry = geometry;
            RenderParameters = renderParameters;
            Columns = columns;
            Rows = rows;
            ShowBranding = showBranding;
            ImageSize = imageSize;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary>
        /// Cql
        /// <para> To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Cql { get; }

        /// <summary> Zoom. </summary>
        public float? Zoom { get; set; }

        /// <summary> Geometry. </summary>
        public GeoJsonGeometry Geometry { get; set; }

        /// <summary> JSON-encoded visualization parameters. </summary>
        public string RenderParameters { get; }

        /// <summary> Width of the output image in pixels. </summary>
        public int Columns { get; }

        /// <summary> Height of the output image in pixels. </summary>
        public int Rows { get; }

        /// <summary> Whether to include branding on the output image. </summary>
        public bool? ShowBranding { get; set; }

        /// <summary> Image size. </summary>
        public string ImageSize { get; set; }
    }
}
