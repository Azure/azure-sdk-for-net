// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Statistical information about a data band. </summary>
    public partial class BandStatistics : IJsonModel<BandStatistics>
    {
        /// <summary> Initializes a new instance of <see cref="BandStatistics"/> for deserialization. </summary>
        internal BandStatistics()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<BandStatistics>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BandStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BandStatistics)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("min"u8);
            writer.WriteNumberValue(Min);
            writer.WritePropertyName("max"u8);
            writer.WriteNumberValue(Max);
            writer.WritePropertyName("mean"u8);
            writer.WriteNumberValue(Mean);
            writer.WritePropertyName("count"u8);
            writer.WriteNumberValue(Count);
            writer.WritePropertyName("sum"u8);
            writer.WriteNumberValue(Sum);
            writer.WritePropertyName("std"u8);
            writer.WriteNumberValue(Std);
            writer.WritePropertyName("median"u8);
            writer.WriteNumberValue(Median);
            writer.WritePropertyName("majority"u8);
            writer.WriteNumberValue(Majority);
            writer.WritePropertyName("minority"u8);
            writer.WriteNumberValue(Minority);
            writer.WritePropertyName("unique"u8);
            writer.WriteNumberValue(Unique);
            writer.WritePropertyName("histogram"u8);
            writer.WriteStartArray();
            foreach (IList<float> item in Histogram)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStartArray();
                foreach (float item0 in item)
                {
                    writer.WriteNumberValue(item0);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndArray();
            writer.WritePropertyName("valid_percent"u8);
            writer.WriteNumberValue(ValidPercent);
            writer.WritePropertyName("masked_pixels"u8);
            writer.WriteNumberValue(MaskedPixels);
            writer.WritePropertyName("valid_pixels"u8);
            writer.WriteNumberValue(ValidPixels);
            writer.WritePropertyName("percentile_2"u8);
            writer.WriteNumberValue(Percentile2);
            writer.WritePropertyName("percentile_98"u8);
            writer.WriteNumberValue(Percentile98);
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BandStatistics IJsonModel<BandStatistics>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BandStatistics JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BandStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BandStatistics)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBandStatistics(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static BandStatistics DeserializeBandStatistics(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            float min = default;
            float max = default;
            float mean = default;
            float count = default;
            float sum = default;
            float std = default;
            float median = default;
            float majority = default;
            float minority = default;
            float unique = default;
            IList<IList<float>> histogram = default;
            float validPercent = default;
            float maskedPixels = default;
            float validPixels = default;
            float percentile2 = default;
            float percentile98 = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("min"u8))
                {
                    min = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("max"u8))
                {
                    max = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("mean"u8))
                {
                    mean = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("count"u8))
                {
                    count = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("sum"u8))
                {
                    sum = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("std"u8))
                {
                    std = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("median"u8))
                {
                    median = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("majority"u8))
                {
                    majority = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("minority"u8))
                {
                    minority = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("unique"u8))
                {
                    unique = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("histogram"u8))
                {
                    List<IList<float>> array = new List<IList<float>>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            List<float> array0 = new List<float>();
                            foreach (var item0 in item.EnumerateArray())
                            {
                                array0.Add(item0.GetSingle());
                            }
                            array.Add(array0);
                        }
                    }
                    histogram = array;
                    continue;
                }
                if (prop.NameEquals("valid_percent"u8))
                {
                    validPercent = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("masked_pixels"u8))
                {
                    maskedPixels = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("valid_pixels"u8))
                {
                    validPixels = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("percentile_2"u8))
                {
                    percentile2 = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("percentile_98"u8))
                {
                    percentile98 = prop.Value.GetSingle();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new BandStatistics(
                min,
                max,
                mean,
                count,
                sum,
                std,
                median,
                majority,
                minority,
                unique,
                histogram,
                validPercent,
                maskedPixels,
                validPixels,
                percentile2,
                percentile98,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<BandStatistics>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BandStatistics>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BandStatistics)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BandStatistics IPersistableModel<BandStatistics>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BandStatistics PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BandStatistics>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeBandStatistics(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BandStatistics)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<BandStatistics>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
