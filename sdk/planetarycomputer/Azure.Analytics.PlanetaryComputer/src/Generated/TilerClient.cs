// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> The TilerClient sub-client. </summary>
    public partial class TilerClient
    {
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of TilerClient for mocking. </summary>
        protected TilerClient()
        {
        }

        /// <summary> Initializes a new instance of TilerClient. </summary>
        /// <param name="clientDiagnostics"> The ClientDiagnostics is used to provide tracing support for the client library. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="apiVersion"></param>
        internal TilerClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _endpoint = endpoint;
            Pipeline = pipeline;
            _apiVersion = apiVersion;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Return Matrix Definition
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTileMatrixDefinitions(string tileMatrixSetId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetTileMatrixDefinitions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetTileMatrixDefinitionsRequest(tileMatrixSetId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return Matrix Definition
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileMatrixDefinitionsAsync(string tileMatrixSetId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetTileMatrixDefinitions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetTileMatrixDefinitionsRequest(tileMatrixSetId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return Matrix Definition. </summary>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TileMatrixSet> GetTileMatrixDefinitions(string tileMatrixSetId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = GetTileMatrixDefinitions(tileMatrixSetId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TileMatrixSet)result, result);
        }

        /// <summary> Return Matrix Definition. </summary>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TileMatrixSet>> GetTileMatrixDefinitionsAsync(string tileMatrixSetId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = await GetTileMatrixDefinitionsAsync(tileMatrixSetId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TileMatrixSet)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return Matrix List
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTileMatrices(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetTileMatrices");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTileMatricesRequest(context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return Matrix List
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileMatricesAsync(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetTileMatrices");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTileMatricesRequest(context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return Matrix List. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IReadOnlyList<string>> GetTileMatrices(CancellationToken cancellationToken = default)
        {
            Response result = GetTileMatrices(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content.ToObjectFromJson<IReadOnlyList<string>>(), result);
        }

        /// <summary> Return Matrix List. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IReadOnlyList<string>>> GetTileMatricesAsync(CancellationToken cancellationToken = default)
        {
            Response result = await GetTileMatricesAsync(cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content.ToObjectFromJson<IReadOnlyList<string>>(), result);
        }

        /// <summary>
        /// [Protocol Method] Per Asset statistics
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="categoriesPixels"> List of pixel categorical values for which to report counts. </param>
        /// <param name="percentiles"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetAssetStatistics(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> categoriesPixels = default, IEnumerable<int> percentiles = default, string histogramBins = default, string histogramRange = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetAssetStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetAssetStatisticsRequest(collectionId, itemId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, resampling, maxSize, categorical, categoriesPixels, percentiles, histogramBins, histogramRange, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Per Asset statistics
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="categoriesPixels"> List of pixel categorical values for which to report counts. </param>
        /// <param name="percentiles"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAssetStatisticsAsync(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> categoriesPixels = default, IEnumerable<int> percentiles = default, string histogramBins = default, string histogramRange = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetAssetStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetAssetStatisticsRequest(collectionId, itemId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, resampling, maxSize, categorical, categoriesPixels, percentiles, histogramBins, histogramRange, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Per Asset statistics. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="options"> Options for asset statistics including asset selection and statistical calculation parameters. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<AssetStatisticsResult> GetAssetStatistics(string collectionId, string itemId, GetAssetStatisticsOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetAssetStatistics(collectionId, itemId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((AssetStatisticsResult)result, result);
        }

        /// <summary> Per Asset statistics. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="options"> Options for asset statistics including asset selection and statistical calculation parameters. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<AssetStatisticsResult>> GetAssetStatisticsAsync(string collectionId, string itemId, GetAssetStatisticsOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetAssetStatisticsAsync(collectionId, itemId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((AssetStatisticsResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return a list of supported assets.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetAvailableAssets(string collectionId, string itemId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetAvailableAssets");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetAvailableAssetsRequest(collectionId, itemId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return a list of supported assets.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAvailableAssetsAsync(string collectionId, string itemId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetAvailableAssets");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetAvailableAssetsRequest(collectionId, itemId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return a list of supported assets. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IReadOnlyList<string>> GetAvailableAssets(string collectionId, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetAvailableAssets(collectionId, itemId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content.ToObjectFromJson<IReadOnlyList<string>>(), result);
        }

        /// <summary> Return a list of supported assets. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IReadOnlyList<string>>> GetAvailableAssetsAsync(string collectionId, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetAvailableAssetsAsync(collectionId, itemId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content.ToObjectFromJson<IReadOnlyList<string>>(), result);
        }

        /// <summary>
        /// [Protocol Method] Return all Bounds
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetBounds(string collectionId, string itemId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetBounds");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetBoundsRequest(collectionId, itemId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return all Bounds
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetBoundsAsync(string collectionId, string itemId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetBounds");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetBoundsRequest(collectionId, itemId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return all Bounds. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<StacItemBounds> GetBounds(string collectionId, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetBounds(collectionId, itemId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((StacItemBounds)result, result);
        }

        /// <summary> Return all Bounds. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<StacItemBounds>> GetBoundsAsync(string collectionId, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetBoundsAsync(collectionId, itemId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((StacItemBounds)result, result);
        }

        /// <summary>
        /// [Protocol Method] Create image from a geojson feature.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CropGeoJson(string collectionId, string itemId, string format, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string coordinateReferenceSystem = default, string resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.CropGeoJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCropGeoJsonRequest(collectionId, itemId, format, content, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, colorFormula, coordinateReferenceSystem, resampling, maxSize, height, width, rescale, colorMapName, colorMap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create image from a geojson feature.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CropGeoJsonAsync(string collectionId, string itemId, string format, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string coordinateReferenceSystem = default, string resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.CropGeoJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCropGeoJsonRequest(collectionId, itemId, format, content, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, colorFormula, coordinateReferenceSystem, resampling, maxSize, height, width, rescale, colorMapName, colorMap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create image from a geojson feature. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="options"> Options for GeoJSON cropping including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/>, <paramref name="body"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> CropGeoJson(string collectionId, string itemId, string format, StacItemModel body, CropGeoJsonOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(body, nameof(body));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.CropGeoJson(collectionId, itemId, format, body, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create image from a geojson feature. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="options"> Options for GeoJSON cropping including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/>, <paramref name="body"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> CropGeoJsonAsync(string collectionId, string itemId, string format, StacItemModel body, CropGeoJsonOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(body, nameof(body));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.CropGeoJsonAsync(collectionId, itemId, format, body, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Create image from a geojson feature.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CropGeoJsonWithDimensions(string collectionId, string itemId, float width, float height, string format, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string coordinateReferenceSystem = default, string resampling = default, int? maxSize = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.CropGeoJsonWithDimensions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCropGeoJsonWithDimensionsRequest(collectionId, itemId, width, height, format, content, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, colorFormula, coordinateReferenceSystem, resampling, maxSize, rescale, colorMapName, colorMap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create image from a geojson feature.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CropGeoJsonWithDimensionsAsync(string collectionId, string itemId, float width, float height, string format, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string coordinateReferenceSystem = default, string resampling = default, int? maxSize = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.CropGeoJsonWithDimensions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCropGeoJsonWithDimensionsRequest(collectionId, itemId, width, height, format, content, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, colorFormula, coordinateReferenceSystem, resampling, maxSize, rescale, colorMapName, colorMap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create image from a geojson feature. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="options"> Options for GeoJSON cropping including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/>, <paramref name="body"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> CropGeoJsonWithDimensions(string collectionId, string itemId, float width, float height, string format, StacItemModel body, CropGeoJsonOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(body, nameof(body));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.CropGeoJsonWithDimensions(collectionId, itemId, width, height, format, body, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create image from a geojson feature. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="options"> Options for GeoJSON cropping including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/>, <paramref name="body"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> CropGeoJsonWithDimensionsAsync(string collectionId, string itemId, float width, float height, string format, StacItemModel body, CropGeoJsonOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(body, nameof(body));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.CropGeoJsonWithDimensionsAsync(collectionId, itemId, width, height, format, body, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Get Statistics from a geojson feature or featureCollection.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="categoriesPixels"> List of pixel categorical values for which to report counts. </param>
        /// <param name="percentiles"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetGeoJsonStatistics(string collectionId, string itemId, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string coordinateReferenceSystem = default, string resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> categoriesPixels = default, IEnumerable<int> percentiles = default, string histogramBins = default, string histogramRange = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetGeoJsonStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateGetGeoJsonStatisticsRequest(collectionId, itemId, content, assets, expression, assetBandIndices, assetAsBand, noData, unscale, coordinateReferenceSystem, resampling, maxSize, categorical, categoriesPixels, percentiles, histogramBins, histogramRange, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Statistics from a geojson feature or featureCollection.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="categoriesPixels"> List of pixel categorical values for which to report counts. </param>
        /// <param name="percentiles"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetGeoJsonStatisticsAsync(string collectionId, string itemId, RequestContent content, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string coordinateReferenceSystem = default, string resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> categoriesPixels = default, IEnumerable<int> percentiles = default, string histogramBins = default, string histogramRange = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetGeoJsonStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateGetGeoJsonStatisticsRequest(collectionId, itemId, content, assets, expression, assetBandIndices, assetAsBand, noData, unscale, coordinateReferenceSystem, resampling, maxSize, categorical, categoriesPixels, percentiles, histogramBins, histogramRange, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Statistics from a geojson feature or featureCollection. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="options"> Options for GeoJSON statistics including asset selection and statistical calculation parameters. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="body"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<GeoJsonStatisticsForStacItemCollection> GetGeoJsonStatistics(string collectionId, string itemId, StacItemCollectionModel body, GetGeoJsonStatisticsOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(body, nameof(body));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetGeoJsonStatistics(collectionId, itemId, body, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((GeoJsonStatisticsForStacItemCollection)result, result);
        }

        /// <summary> Get Statistics from a geojson feature or featureCollection. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="body"> Request GeoJson body. </param>
        /// <param name="options"> Options for GeoJSON statistics including asset selection and statistical calculation parameters. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="body"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<GeoJsonStatisticsForStacItemCollection>> GetGeoJsonStatisticsAsync(string collectionId, string itemId, StacItemCollectionModel body, GetGeoJsonStatisticsOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(body, nameof(body));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetGeoJsonStatisticsAsync(collectionId, itemId, body, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((GeoJsonStatisticsForStacItemCollection)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return Info Geojson
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetInfoGeoJson(string collectionId, string itemId, IEnumerable<string> assets, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetInfoGeoJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetInfoGeoJsonRequest(collectionId, itemId, assets, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return Info Geojson
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetInfoGeoJsonAsync(string collectionId, string itemId, IEnumerable<string> assets, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetInfoGeoJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetInfoGeoJsonRequest(collectionId, itemId, assets, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return Info Geojson. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TilerInfoGeoJsonFeature> GetInfoGeoJson(string collectionId, string itemId, IEnumerable<string> assets = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetInfoGeoJson(collectionId, itemId, assets, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TilerInfoGeoJsonFeature)result, result);
        }

        /// <summary> Return Info Geojson. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TilerInfoGeoJsonFeature>> GetInfoGeoJsonAsync(string collectionId, string itemId, IEnumerable<string> assets = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetInfoGeoJsonAsync(collectionId, itemId, assets, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TilerInfoGeoJsonFeature)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return dataset's basic info.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetAssetsInfo(string collectionId, string itemId, IEnumerable<string> assets, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetAssetsInfo");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetAssetsInfoRequest(collectionId, itemId, assets, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return dataset's basic info.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAssetsInfoAsync(string collectionId, string itemId, IEnumerable<string> assets, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetAssetsInfo");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetAssetsInfoRequest(collectionId, itemId, assets, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return dataset's basic info. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<InfoOperationResult> GetAssetsInfo(string collectionId, string itemId, IEnumerable<string> assets = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetAssetsInfo(collectionId, itemId, assets, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((InfoOperationResult)result, result);
        }

        /// <summary> Return dataset's basic info. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<InfoOperationResult>> GetAssetsInfoAsync(string collectionId, string itemId, IEnumerable<string> assets = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetAssetsInfoAsync(collectionId, itemId, assets, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((InfoOperationResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Create image from part of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPart(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, string coordinateReferenceSystem = default, string resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetPart");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPartRequest(collectionId, itemId, minx, miny, maxx, maxy, format, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, colorFormula, dstCrs, coordinateReferenceSystem, resampling, maxSize, height, width, rescale, colorMapName, colorMap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create image from part of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPartAsync(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, string coordinateReferenceSystem = default, string resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetPart");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPartRequest(collectionId, itemId, minx, miny, maxx, maxy, format, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, colorFormula, dstCrs, coordinateReferenceSystem, resampling, maxSize, height, width, rescale, colorMapName, colorMap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create image from part of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box minimum X coordinate. </param>
        /// <param name="miny"> Bounding box minimum Y coordinate. </param>
        /// <param name="maxx"> Bounding box maximum X coordinate. </param>
        /// <param name="maxy"> Bounding box maximum Y coordinate. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="options"> Options for part generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetPart(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, string format, GetPartOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetPart(collectionId, itemId, minx, miny, maxx, maxy, format, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create image from part of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box minimum X coordinate. </param>
        /// <param name="miny"> Bounding box minimum Y coordinate. </param>
        /// <param name="maxx"> Bounding box maximum X coordinate. </param>
        /// <param name="maxy"> Bounding box maximum Y coordinate. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="options"> Options for part generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetPartAsync(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, string format, GetPartOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetPartAsync(collectionId, itemId, minx, miny, maxx, maxy, format, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Create image from part of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPartWithDimensions(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, float width, float height, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, string coordinateReferenceSystem = default, string resampling = default, int? maxSize = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetPartWithDimensions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPartWithDimensionsRequest(collectionId, itemId, minx, miny, maxx, maxy, width, height, format, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, colorFormula, dstCrs, coordinateReferenceSystem, resampling, maxSize, rescale, colorMapName, colorMap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create image from part of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box min X. </param>
        /// <param name="miny"> Bounding box min Y. </param>
        /// <param name="maxx"> Bounding box max X. </param>
        /// <param name="maxy"> Bounding box max Y. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPartWithDimensionsAsync(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, float width, float height, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, string coordinateReferenceSystem = default, string resampling = default, int? maxSize = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetPartWithDimensions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPartWithDimensionsRequest(collectionId, itemId, minx, miny, maxx, maxy, width, height, format, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, colorFormula, dstCrs, coordinateReferenceSystem, resampling, maxSize, rescale, colorMapName, colorMap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create image from part of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box minimum X coordinate. </param>
        /// <param name="miny"> Bounding box minimum Y coordinate. </param>
        /// <param name="maxx"> Bounding box maximum X coordinate. </param>
        /// <param name="maxy"> Bounding box maximum Y coordinate. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="options"> Options for part generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetPartWithDimensions(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, float width, float height, string format, GetPartOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetPartWithDimensions(collectionId, itemId, minx, miny, maxx, maxy, width, height, format, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create image from part of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="minx"> Bounding box minimum X coordinate. </param>
        /// <param name="miny"> Bounding box minimum Y coordinate. </param>
        /// <param name="maxx"> Bounding box maximum X coordinate. </param>
        /// <param name="maxy"> Bounding box maximum Y coordinate. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="options"> Options for part generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetPartWithDimensionsAsync(string collectionId, string itemId, float minx, float miny, float maxx, float maxy, float width, float height, string format, GetPartOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetPartWithDimensionsAsync(collectionId, itemId, minx, miny, maxx, maxy, width, height, format, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Get Point value for a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="longitude"> Longitude. </param>
        /// <param name="latitude"> Latitude. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPoint(string collectionId, string itemId, float longitude, float latitude, IEnumerable<string> assets, string expression, IEnumerable<string> assetBandIndices, bool? assetAsBand, float? noData, bool? unscale, string coordinateReferenceSystem, string resampling, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetPoint");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetPointRequest(collectionId, itemId, longitude, latitude, assets, expression, assetBandIndices, assetAsBand, noData, unscale, coordinateReferenceSystem, resampling, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Point value for a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="longitude"> Longitude. </param>
        /// <param name="latitude"> Latitude. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPointAsync(string collectionId, string itemId, float longitude, float latitude, IEnumerable<string> assets, string expression, IEnumerable<string> assetBandIndices, bool? assetAsBand, float? noData, bool? unscale, string coordinateReferenceSystem, string resampling, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetPoint");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetPointRequest(collectionId, itemId, longitude, latitude, assets, expression, assetBandIndices, assetAsBand, noData, unscale, coordinateReferenceSystem, resampling, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Point value for a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="longitude"> Longitude. </param>
        /// <param name="latitude"> Latitude. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TilerCoreModelsResponsesPoint> GetPoint(string collectionId, string itemId, float longitude, float latitude, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string coordinateReferenceSystem = default, ResamplingMethod? resampling = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = GetPoint(collectionId, itemId, longitude, latitude, assets, expression, assetBandIndices, assetAsBand, noData, unscale, coordinateReferenceSystem, resampling?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TilerCoreModelsResponsesPoint)result, result);
        }

        /// <summary> Get Point value for a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="longitude"> Longitude. </param>
        /// <param name="latitude"> Latitude. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TilerCoreModelsResponsesPoint>> GetPointAsync(string collectionId, string itemId, float longitude, float latitude, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string coordinateReferenceSystem = default, ResamplingMethod? resampling = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            Response result = await GetPointAsync(collectionId, itemId, longitude, latitude, assets, expression, assetBandIndices, assetAsBand, noData, unscale, coordinateReferenceSystem, resampling?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TilerCoreModelsResponsesPoint)result, result);
        }

        /// <summary>
        /// [Protocol Method] Create preview of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPreview(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string format = default, string colorFormula = default, string dstCrs = default, string resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetPreview");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetPreviewRequest(collectionId, itemId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, format, colorFormula, dstCrs, resampling, maxSize, height, width, rescale, colorMapName, colorMap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create preview of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPreviewAsync(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string format = default, string colorFormula = default, string dstCrs = default, string resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetPreview");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetPreviewRequest(collectionId, itemId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, format, colorFormula, dstCrs, resampling, maxSize, height, width, rescale, colorMapName, colorMap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create preview of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="options"> Options for preview generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetPreview(string collectionId, string itemId, GetPreviewOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetPreview(collectionId, itemId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create preview of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="options"> Options for preview generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetPreviewAsync(string collectionId, string itemId, GetPreviewOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetPreviewAsync(collectionId, itemId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Create preview of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPreviewWithFormat(string collectionId, string itemId, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, string resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetPreviewWithFormat");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPreviewWithFormatRequest(collectionId, itemId, format, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, colorFormula, dstCrs, resampling, maxSize, height, width, rescale, colorMapName, colorMap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create preview of a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPreviewWithFormatAsync(string collectionId, string itemId, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string colorFormula = default, string dstCrs = default, string resampling = default, int? maxSize = default, int? height = default, int? width = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetPreviewWithFormat");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetPreviewWithFormatRequest(collectionId, itemId, format, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, colorFormula, dstCrs, resampling, maxSize, height, width, rescale, colorMapName, colorMap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create preview of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="options"> Options for preview generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetPreviewWithFormat(string collectionId, string itemId, string format, GetPreviewOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetPreviewWithFormat(collectionId, itemId, format, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create preview of a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="options"> Options for preview generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="format"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetPreviewWithFormatAsync(string collectionId, string itemId, string format, GetPreviewOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetPreviewWithFormatAsync(collectionId, itemId, format, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Create a new image export.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreateStaticImage(string collectionId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.CreateStaticImage");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateStaticImageRequest(collectionId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create a new image export.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateStaticImageAsync(string collectionId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.CreateStaticImage");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateStaticImageRequest(collectionId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new image export. </summary>
        /// <param name="collectionId"> STAC Collection ID. </param>
        /// <param name="body"> Image request body. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<ImageResponse> CreateStaticImage(string collectionId, ImageContent body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNull(body, nameof(body));

            Response result = CreateStaticImage(collectionId, body, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((ImageResponse)result, result);
        }

        /// <summary> Create a new image export. </summary>
        /// <param name="collectionId"> STAC Collection ID. </param>
        /// <param name="body"> Image request body. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<ImageResponse>> CreateStaticImageAsync(string collectionId, ImageContent body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNull(body, nameof(body));

            Response result = await CreateStaticImageAsync(collectionId, body, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((ImageResponse)result, result);
        }

        /// <summary>
        /// [Protocol Method] Fetch an existing image export by ID
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection ID. </param>
        /// <param name="id"> Image export ID. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetStaticImage(string collectionId, string id, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetStaticImage");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(id, nameof(id));

                using HttpMessage message = CreateGetStaticImageRequest(collectionId, id, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Fetch an existing image export by ID
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection ID. </param>
        /// <param name="id"> Image export ID. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetStaticImageAsync(string collectionId, string id, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetStaticImage");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(id, nameof(id));

                using HttpMessage message = CreateGetStaticImageRequest(collectionId, id, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Fetch an existing image export by ID. </summary>
        /// <param name="collectionId"> STAC Collection ID. </param>
        /// <param name="id"> Image export ID. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetStaticImage(string collectionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            Response result = GetStaticImage(collectionId, id, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Fetch an existing image export by ID. </summary>
        /// <param name="collectionId"> STAC Collection ID. </param>
        /// <param name="id"> Image export ID. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetStaticImageAsync(string collectionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            Response result = await GetStaticImageAsync(collectionId, id, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Merged assets statistics.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="categoriesPixels"> List of pixel categorical values for which to report counts. </param>
        /// <param name="percentiles"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetStatistics(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> categoriesPixels = default, IEnumerable<int> percentiles = default, string histogramBins = default, string histogramRange = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetStatisticsRequest(collectionId, itemId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, resampling, maxSize, categorical, categoriesPixels, percentiles, histogramBins, histogramRange, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Merged assets statistics.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Maximum dimension in pixels for the source data used to calculate statistics. </param>
        /// <param name="categorical"> Return statistics for categorical dataset. </param>
        /// <param name="categoriesPixels"> List of pixel categorical values for which to report counts. </param>
        /// <param name="percentiles"> List of percentile values (default to [2, 98]). </param>
        /// <param name="histogramBins">
        /// Defines the number of equal-width bins in the given range (10, by default).
        /// 
        /// If bins is a sequence (comma `,` delimited values), it defines a monotonically
        /// increasing array of bin edges, including the rightmost edge, allowing for
        /// non-uniform bin widths.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="histogramRange">
        /// Comma `,` delimited range of the bins.
        /// 
        /// The lower and upper range of the bins. If not provided, range is simply
        /// (a.min(), a.max()).
        /// 
        /// Values outside the range are ignored. The first element of the range must be
        /// less than or equal to the second.
        /// range affects the automatic bin computation as well.
        /// 
        /// link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetStatisticsAsync(string collectionId, string itemId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string resampling = default, int? maxSize = default, bool? categorical = default, IEnumerable<string> categoriesPixels = default, IEnumerable<int> percentiles = default, string histogramBins = default, string histogramRange = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetStatistics");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

                using HttpMessage message = CreateGetStatisticsRequest(collectionId, itemId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, resampling, maxSize, categorical, categoriesPixels, percentiles, histogramBins, histogramRange, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Merged assets statistics. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="options"> Options for statistics including asset selection and statistical calculation parameters. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<StatisticsResult> GetStatistics(string collectionId, string itemId, GetStatisticsOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetStatistics(collectionId, itemId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((StatisticsResult)result, result);
        }

        /// <summary> Merged assets statistics. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="options"> Options for statistics including asset selection and statistical calculation parameters. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<StatisticsResult>> GetStatisticsAsync(string collectionId, string itemId, GetStatisticsOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetStatisticsAsync(collectionId, itemId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((StatisticsResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return the TileJson Tilematrixsetid As a path
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minZoom"> Overwrite default minzoom. </param>
        /// <param name="maxZoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTileJson(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string tileFormat = default, int? tileScale = default, int? minZoom = default, int? maxZoom = default, string buffer = default, string colorFormula = default, string resampling = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetTileJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetTileJsonRequest(collectionId, itemId, tileMatrixSetId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, tileFormat, tileScale, minZoom, maxZoom, buffer, colorFormula, resampling, rescale, colorMapName, colorMap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return the TileJson Tilematrixsetid As a path
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minZoom"> Overwrite default minzoom. </param>
        /// <param name="maxZoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileJsonAsync(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string tileFormat = default, int? tileScale = default, int? minZoom = default, int? maxZoom = default, string buffer = default, string colorFormula = default, string resampling = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetTileJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetTileJsonRequest(collectionId, itemId, tileMatrixSetId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, tileFormat, tileScale, minZoom, maxZoom, buffer, colorFormula, resampling, rescale, colorMapName, colorMap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return the TileJson Tilematrixsetid As a path. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="options"> Options for TileJSON generation including asset selection, terrain algorithms, and tile formatting. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TileJsonMetaData> GetTileJson(string collectionId, string itemId, string tileMatrixSetId, GetTileJsonOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetTileJson(collectionId, itemId, tileMatrixSetId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TileJsonMetaData)result, result);
        }

        /// <summary> Return the TileJson Tilematrixsetid As a path. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="options"> Options for TileJSON generation including asset selection, terrain algorithms, and tile formatting. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TileJsonMetaData>> GetTileJsonAsync(string collectionId, string itemId, string tileMatrixSetId, GetTileJsonOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetTileJsonAsync(collectionId, itemId, tileMatrixSetId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TileJsonMetaData)result, result);
        }

        /// <summary>
        /// [Protocol Method] Create map tile from a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="subdatasetName"> The name of a subdataset within the asset. </param>
        /// <param name="subdatasetBands"> The index of a subdataset band within the asset. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTile(string collectionId, string itemId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string buffer = default, string colorFormula = default, string resampling = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, string subdatasetName = default, IEnumerable<string> subdatasetBands = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetTileRequest(collectionId, itemId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, buffer, colorFormula, resampling, rescale, colorMapName, colorMap, returnMask, subdatasetName, subdatasetBands, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create map tile from a dataset.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="subdatasetName"> The name of a subdataset within the asset. </param>
        /// <param name="subdatasetBands"> The index of a subdataset band within the asset. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTileAsync(string collectionId, string itemId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string buffer = default, string colorFormula = default, string resampling = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, string subdatasetName = default, IEnumerable<string> subdatasetBands = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetTileRequest(collectionId, itemId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, buffer, colorFormula, resampling, rescale, colorMapName, colorMap, returnMask, subdatasetName, subdatasetBands, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create map tile from a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z"> Identifier (Z) selecting one of the scales defined in the TileMatrixSet. </param>
        /// <param name="x"> Column (X) index of the tile on the selected TileMatrix. </param>
        /// <param name="y"> Row (Y) index of the tile on the selected TileMatrix. </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="options"> Options for tile generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/>, <paramref name="format"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetTile(string collectionId, string itemId, string tileMatrixSetId, float z, float x, float y, float scale, string format, GetTileOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetTile(collectionId, itemId, tileMatrixSetId, z, x, y, scale, format, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create map tile from a dataset. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z"> Identifier (Z) selecting one of the scales defined in the TileMatrixSet. </param>
        /// <param name="x"> Column (X) index of the tile on the selected TileMatrix. </param>
        /// <param name="y"> Row (Y) index of the tile on the selected TileMatrix. </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="options"> Options for tile generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/>, <paramref name="format"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetTileAsync(string collectionId, string itemId, string tileMatrixSetId, float z, float x, float y, float scale, string format, GetTileOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetTileAsync(collectionId, itemId, tileMatrixSetId, z, x, y, scale, format, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minZoom"> Overwrite default minzoom. </param>
        /// <param name="maxZoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetWmtsCapabilities(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string tileFormat = default, int? tileScale = default, int? minZoom = default, int? maxZoom = default, string buffer = default, string colorFormula = default, string resampling = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetWmtsCapabilities");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetWmtsCapabilitiesRequest(collectionId, itemId, tileMatrixSetId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, tileFormat, tileScale, minZoom, maxZoom, buffer, colorFormula, resampling, rescale, colorMapName, colorMap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minZoom"> Overwrite default minzoom. </param>
        /// <param name="maxZoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetWmtsCapabilitiesAsync(string collectionId, string itemId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string tileFormat = default, int? tileScale = default, int? minZoom = default, int? maxZoom = default, string buffer = default, string colorFormula = default, string resampling = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetWmtsCapabilities");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
                Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetWmtsCapabilitiesRequest(collectionId, itemId, tileMatrixSetId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, tileFormat, tileScale, minZoom, maxZoom, buffer, colorFormula, resampling, rescale, colorMapName, colorMap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="options"> Options for WMTS capabilities including asset selection, terrain algorithms, and tile formatting. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetWmtsCapabilities(string collectionId, string itemId, string tileMatrixSetId, GetWmtsCapabilitiesOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetWmtsCapabilities(collectionId, itemId, tileMatrixSetId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="collectionId"> STAC Collection Identifier. </param>
        /// <param name="itemId"> STAC Item Identifier. </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="options"> Options for WMTS capabilities including asset selection, terrain algorithms, and tile formatting. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/>, <paramref name="itemId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetWmtsCapabilitiesAsync(string collectionId, string itemId, string tileMatrixSetId, GetWmtsCapabilitiesOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetWmtsCapabilitiesAsync(collectionId, itemId, tileMatrixSetId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Generate values and color swatches mapping for a given classmap.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetClassMapLegend(string classmapName, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetClassMapLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

                using HttpMessage message = CreateGetClassMapLegendRequest(classmapName, trimStart, trimEnd, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Generate values and color swatches mapping for a given classmap.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetClassMapLegendAsync(string classmapName, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetClassMapLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

                using HttpMessage message = CreateGetClassMapLegendRequest(classmapName, trimStart, trimEnd, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generate values and color swatches mapping for a given classmap. </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IReadOnlyDictionary<string, BinaryData>> GetClassMapLegend(string classmapName, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

            Response result = GetClassMapLegend(classmapName, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            IDictionary<string, BinaryData> value = new Dictionary<string, BinaryData>();
            BinaryData data = result.Content;
            using JsonDocument document = JsonDocument.Parse(data);
            foreach (var item in document.RootElement.EnumerateObject())
            {
                if (item.Value.ValueKind == JsonValueKind.Null)
                {
                    value.Add(item.Name, null);
                }
                else
                {
                    value.Add(item.Name, BinaryData.FromString(item.Value.GetRawText()));
                }
            }
            return Response.FromValue((IReadOnlyDictionary<string, BinaryData>)value, result);
        }

        /// <summary> Generate values and color swatches mapping for a given classmap. </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IReadOnlyDictionary<string, BinaryData>>> GetClassMapLegendAsync(string classmapName, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

            Response result = await GetClassMapLegendAsync(classmapName, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            IDictionary<string, BinaryData> value = new Dictionary<string, BinaryData>();
            BinaryData data = result.Content;
            using JsonDocument document = JsonDocument.Parse(data);
            foreach (var item in document.RootElement.EnumerateObject())
            {
                if (item.Value.ValueKind == JsonValueKind.Null)
                {
                    value.Add(item.Name, null);
                }
                else
                {
                    value.Add(item.Name, BinaryData.FromString(item.Value.GetRawText()));
                }
            }
            return Response.FromValue((IReadOnlyDictionary<string, BinaryData>)value, result);
        }

        /// <summary>
        /// [Protocol Method] Generate values and color swatches mapping for a given interval classmap.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetIntervalLegend(string classmapName, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetIntervalLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

                using HttpMessage message = CreateGetIntervalLegendRequest(classmapName, trimStart, trimEnd, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Generate values and color swatches mapping for a given interval classmap.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetIntervalLegendAsync(string classmapName, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetIntervalLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

                using HttpMessage message = CreateGetIntervalLegendRequest(classmapName, trimStart, trimEnd, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generate values and color swatches mapping for a given interval classmap. </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IReadOnlyList<IList<BinaryData>>> GetIntervalLegend(string classmapName, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

            Response result = GetIntervalLegend(classmapName, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content.ToObjectFromJson<IReadOnlyList<IList<BinaryData>>>(), result);
        }

        /// <summary> Generate values and color swatches mapping for a given interval classmap. </summary>
        /// <param name="classmapName"> classmap name. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classmapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classmapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IReadOnlyList<IList<BinaryData>>>> GetIntervalLegendAsync(string classmapName, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classmapName, nameof(classmapName));

            Response result = await GetIntervalLegendAsync(classmapName, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content.ToObjectFromJson<IReadOnlyList<IList<BinaryData>>>(), result);
        }

        /// <summary>
        /// [Protocol Method] Generate a legend image for a given colormap.
        /// 
        /// If the colormap has non-contiguous values at the beginning or end,
        /// which aren't desired in the output image, they can be trimmed by specifying
        /// the number of values to trim.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="colorMapName"> The name of the registered colormap to generate a legend for. </param>
        /// <param name="height"> The output height of the legend image. </param>
        /// <param name="width"> The output width of the legend image. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colorMapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="colorMapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetLegend(string colorMapName, float? height, float? width, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(colorMapName, nameof(colorMapName));

                using HttpMessage message = CreateGetLegendRequest(colorMapName, height, width, trimStart, trimEnd, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Generate a legend image for a given colormap.
        /// 
        /// If the colormap has non-contiguous values at the beginning or end,
        /// which aren't desired in the output image, they can be trimmed by specifying
        /// the number of values to trim.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="colorMapName"> The name of the registered colormap to generate a legend for. </param>
        /// <param name="height"> The output height of the legend image. </param>
        /// <param name="width"> The output width of the legend image. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colorMapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="colorMapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetLegendAsync(string colorMapName, float? height, float? width, int? trimStart, int? trimEnd, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetLegend");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(colorMapName, nameof(colorMapName));

                using HttpMessage message = CreateGetLegendRequest(colorMapName, height, width, trimStart, trimEnd, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generate a legend image for a given colormap.
        /// 
        /// If the colormap has non-contiguous values at the beginning or end,
        /// which aren't desired in the output image, they can be trimmed by specifying
        /// the number of values to trim.
        /// </summary>
        /// <param name="colorMapName"> The name of the registered colormap to generate a legend for. </param>
        /// <param name="height"> The output height of the legend image. </param>
        /// <param name="width"> The output width of the legend image. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colorMapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="colorMapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetLegend(string colorMapName, float? height = default, float? width = default, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(colorMapName, nameof(colorMapName));

            Response result = GetLegend(colorMapName, height, width, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// Generate a legend image for a given colormap.
        /// 
        /// If the colormap has non-contiguous values at the beginning or end,
        /// which aren't desired in the output image, they can be trimmed by specifying
        /// the number of values to trim.
        /// </summary>
        /// <param name="colorMapName"> The name of the registered colormap to generate a legend for. </param>
        /// <param name="height"> The output height of the legend image. </param>
        /// <param name="width"> The output width of the legend image. </param>
        /// <param name="trimStart"> Number of items to trim from the start of the cmap. </param>
        /// <param name="trimEnd"> Number of items to trim from the end of the cmap. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colorMapName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="colorMapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetLegendAsync(string colorMapName, float? height = default, float? width = default, int? trimStart = default, int? trimEnd = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(colorMapName, nameof(colorMapName));

            Response result = await GetLegendAsync(colorMapName, height, width, trimStart, trimEnd, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Return a list of assets for a given point.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="longitude"> Longitude. </param>
        /// <param name="latitude"> Latitude. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetMosaicsAssetsForPoint(string searchId, float longitude, float latitude, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitWhenFull, bool? skipCovered, string coordinateReferenceSystem, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsAssetsForPoint");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetMosaicsAssetsForPointRequest(searchId, longitude, latitude, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, coordinateReferenceSystem, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return a list of assets for a given point.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="longitude"> Longitude. </param>
        /// <param name="latitude"> Latitude. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetMosaicsAssetsForPointAsync(string searchId, float longitude, float latitude, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitWhenFull, bool? skipCovered, string coordinateReferenceSystem, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsAssetsForPoint");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetMosaicsAssetsForPointRequest(searchId, longitude, latitude, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, coordinateReferenceSystem, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return a list of assets for a given point. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="longitude"> Longitude. </param>
        /// <param name="latitude"> Latitude. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IReadOnlyList<StacAsset>> GetMosaicsAssetsForPoint(string searchId, float longitude, float latitude, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitWhenFull = default, bool? skipCovered = default, string coordinateReferenceSystem = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = GetMosaicsAssetsForPoint(searchId, longitude, latitude, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, coordinateReferenceSystem, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            IList<StacAsset> value = new List<StacAsset>();
            BinaryData data = result.Content;
            using JsonDocument document = JsonDocument.Parse(data);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                value.Add(StacAsset.DeserializeStacAsset(item, ModelSerializationExtensions.WireOptions));
            }
            return Response.FromValue((IReadOnlyList<StacAsset>)value, result);
        }

        /// <summary> Return a list of assets for a given point. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="longitude"> Longitude. </param>
        /// <param name="latitude"> Latitude. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="coordinateReferenceSystem"> Coordinate Reference System of the input coords. Default to `epsg:4326`. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IReadOnlyList<StacAsset>>> GetMosaicsAssetsForPointAsync(string searchId, float longitude, float latitude, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitWhenFull = default, bool? skipCovered = default, string coordinateReferenceSystem = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = await GetMosaicsAssetsForPointAsync(searchId, longitude, latitude, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, coordinateReferenceSystem, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            IList<StacAsset> value = new List<StacAsset>();
            BinaryData data = result.Content;
            using JsonDocument document = JsonDocument.Parse(data);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                value.Add(StacAsset.DeserializeStacAsset(item, ModelSerializationExtensions.WireOptions));
            }
            return Response.FromValue((IReadOnlyList<StacAsset>)value, result);
        }

        /// <summary>
        /// [Protocol Method] Return a list of assets which overlap a given tile
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetMosaicsAssetsForTile(string searchId, string tileMatrixSetId, float z, float x, float y, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitWhenFull, bool? skipCovered, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsAssetsForTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetMosaicsAssetsForTileRequest(searchId, tileMatrixSetId, z, x, y, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return a list of assets which overlap a given tile
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetMosaicsAssetsForTileAsync(string searchId, string tileMatrixSetId, float z, float x, float y, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitWhenFull, bool? skipCovered, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsAssetsForTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetMosaicsAssetsForTileRequest(searchId, tileMatrixSetId, z, x, y, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return a list of assets which overlap a given tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IReadOnlyList<BinaryData>> GetMosaicsAssetsForTile(string searchId, string tileMatrixSetId, float z, float x, float y, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitWhenFull = default, bool? skipCovered = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = GetMosaicsAssetsForTile(searchId, tileMatrixSetId, z, x, y, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            IList<BinaryData> value = new List<BinaryData>();
            BinaryData data = result.Content;
            using JsonDocument document = JsonDocument.Parse(data);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                if (item.ValueKind == JsonValueKind.Null)
                {
                    value.Add(null);
                }
                else
                {
                    value.Add(BinaryData.FromString(item.GetRawText()));
                }
            }
            return Response.FromValue((IReadOnlyList<BinaryData>)value, result);
        }

        /// <summary> Return a list of assets which overlap a given tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IReadOnlyList<BinaryData>>> GetMosaicsAssetsForTileAsync(string searchId, string tileMatrixSetId, float z, float x, float y, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitWhenFull = default, bool? skipCovered = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

            Response result = await GetMosaicsAssetsForTileAsync(searchId, tileMatrixSetId, z, x, y, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            IList<BinaryData> value = new List<BinaryData>();
            BinaryData data = result.Content;
            using JsonDocument document = JsonDocument.Parse(data);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                if (item.ValueKind == JsonValueKind.Null)
                {
                    value.Add(null);
                }
                else
                {
                    value.Add(BinaryData.FromString(item.GetRawText()));
                }
            }
            return Response.FromValue((IReadOnlyList<BinaryData>)value, result);
        }

        /// <summary>
        /// [Protocol Method] Get Search query metadata.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetMosaicsSearchInfo(string searchId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsSearchInfo");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetMosaicsSearchInfoRequest(searchId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Search query metadata.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetMosaicsSearchInfoAsync(string searchId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsSearchInfo");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

                using HttpMessage message = CreateGetMosaicsSearchInfoRequest(searchId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Search query metadata. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TilerStacSearchRegistration> GetMosaicsSearchInfo(string searchId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = GetMosaicsSearchInfo(searchId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TilerStacSearchRegistration)result, result);
        }

        /// <summary> Get Search query metadata. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TilerStacSearchRegistration>> GetMosaicsSearchInfoAsync(string searchId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));

            Response result = await GetMosaicsSearchInfoAsync(searchId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TilerStacSearchRegistration)result, result);
        }

        /// <summary>
        /// [Protocol Method] Register a Search query
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response RegisterMosaicsSearch(RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.RegisterMosaicsSearch");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateRegisterMosaicsSearchRequest(content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Register a Search query
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> RegisterMosaicsSearchAsync(RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.RegisterMosaicsSearch");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateRegisterMosaicsSearchRequest(content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Register a Search query. </summary>
        /// <param name="collections"> List of STAC collection IDs to include in the mosaic. </param>
        /// <param name="ids"> List of specific STAC item IDs to include in the mosaic. </param>
        /// <param name="boundingBox"> Geographic bounding box to filter items [west, south, east, north]. </param>
        /// <param name="intersects"> GeoJSON geometry to spatially filter items by intersection. </param>
        /// <param name="query"> Query. </param>
        /// <param name="filter"> Filter. </param>
        /// <param name="datetime"> Temporal filter in RFC 3339 format or interval. </param>
        /// <param name="sortBy"> Criteria for ordering items in the mosaic. </param>
        /// <param name="filterLanguage"> Query language format used in the filter parameter. </param>
        /// <param name="metadata"> Additional metadata to associate with the mosaic. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TilerMosaicSearchRegistrationResult> RegisterMosaicsSearch(IEnumerable<string> collections = default, IEnumerable<string> ids = default, float? boundingBox = default, GeoJsonGeometry intersects = default, IDictionary<string, BinaryData> query = default, string filter = default, string datetime = default, IEnumerable<StacSortExtension> sortBy = default, FilterLanguage? filterLanguage = default, MosaicMetadata metadata = default, CancellationToken cancellationToken = default)
        {
            RegisterMosaicsSearchRequest spreadModel = new RegisterMosaicsSearchRequest(
                collections?.ToList() as IList<string> ?? new ChangeTrackingList<string>(),
                ids?.ToList() as IList<string> ?? new ChangeTrackingList<string>(),
                boundingBox,
                intersects,
                query,
                filter,
                datetime,
                sortBy?.ToList() as IList<StacSortExtension> ?? new ChangeTrackingList<StacSortExtension>(),
                filterLanguage,
                metadata,
                default);
            Response result = RegisterMosaicsSearch(spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TilerMosaicSearchRegistrationResult)result, result);
        }

        /// <summary> Register a Search query. </summary>
        /// <param name="collections"> List of STAC collection IDs to include in the mosaic. </param>
        /// <param name="ids"> List of specific STAC item IDs to include in the mosaic. </param>
        /// <param name="boundingBox"> Geographic bounding box to filter items [west, south, east, north]. </param>
        /// <param name="intersects"> GeoJSON geometry to spatially filter items by intersection. </param>
        /// <param name="query"> Query. </param>
        /// <param name="filter"> Filter. </param>
        /// <param name="datetime"> Temporal filter in RFC 3339 format or interval. </param>
        /// <param name="sortBy"> Criteria for ordering items in the mosaic. </param>
        /// <param name="filterLanguage"> Query language format used in the filter parameter. </param>
        /// <param name="metadata"> Additional metadata to associate with the mosaic. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TilerMosaicSearchRegistrationResult>> RegisterMosaicsSearchAsync(IEnumerable<string> collections = default, IEnumerable<string> ids = default, float? boundingBox = default, GeoJsonGeometry intersects = default, IDictionary<string, BinaryData> query = default, string filter = default, string datetime = default, IEnumerable<StacSortExtension> sortBy = default, FilterLanguage? filterLanguage = default, MosaicMetadata metadata = default, CancellationToken cancellationToken = default)
        {
            RegisterMosaicsSearchRequest spreadModel = new RegisterMosaicsSearchRequest(
                collections?.ToList() as IList<string> ?? new ChangeTrackingList<string>(),
                ids?.ToList() as IList<string> ?? new ChangeTrackingList<string>(),
                boundingBox,
                intersects,
                query,
                filter,
                datetime,
                sortBy?.ToList() as IList<StacSortExtension> ?? new ChangeTrackingList<StacSortExtension>(),
                filterLanguage,
                metadata,
                default);
            Response result = await RegisterMosaicsSearchAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TilerMosaicSearchRegistrationResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Return TileJSON document for a searchId.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="minZoom"> Overwrite default minzoom. </param>
        /// <param name="maxZoom"> Overwrite default maxzoom. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetMosaicsTileJson(string searchId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitWhenFull = default, bool? skipCovered = default, string algorithm = default, string algorithmParams = default, int? minZoom = default, int? maxZoom = default, string tileFormat = default, int? tileScale = default, string buffer = default, string colorFormula = default, string collection = default, string resampling = default, string pixelSelection = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsTileJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetMosaicsTileJsonRequest(searchId, tileMatrixSetId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, algorithm, algorithmParams, minZoom, maxZoom, tileFormat, tileScale, buffer, colorFormula, collection, resampling, pixelSelection, rescale, colorMapName, colorMap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Return TileJSON document for a searchId.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="minZoom"> Overwrite default minzoom. </param>
        /// <param name="maxZoom"> Overwrite default maxzoom. </param>
        /// <param name="tileFormat">
        /// Default will be automatically defined if the output image needs a mask (png) or
        /// not (jpeg).
        /// </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetMosaicsTileJsonAsync(string searchId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitWhenFull = default, bool? skipCovered = default, string algorithm = default, string algorithmParams = default, int? minZoom = default, int? maxZoom = default, string tileFormat = default, int? tileScale = default, string buffer = default, string colorFormula = default, string collection = default, string resampling = default, string pixelSelection = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsTileJson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetMosaicsTileJsonRequest(searchId, tileMatrixSetId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, algorithm, algorithmParams, minZoom, maxZoom, tileFormat, tileScale, buffer, colorFormula, collection, resampling, pixelSelection, rescale, colorMapName, colorMap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return TileJSON document for a searchId. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="options"> Options for mosaic TileJSON generation including asset selection, terrain algorithms, and tile formatting. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<TileJsonMetaData> GetMosaicsTileJson(string searchId, string tileMatrixSetId, GetMosaicTileJsonOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetMosaicsTileJson(searchId, tileMatrixSetId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((TileJsonMetaData)result, result);
        }

        /// <summary> Return TileJSON document for a searchId. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="options"> Options for mosaic TileJSON generation including asset selection, terrain algorithms, and tile formatting. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<TileJsonMetaData>> GetMosaicsTileJsonAsync(string searchId, string tileMatrixSetId, GetMosaicTileJsonOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetMosaicsTileJsonAsync(searchId, tileMatrixSetId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((TileJsonMetaData)result, result);
        }

        /// <summary>
        /// [Protocol Method] Create map tile.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetMosaicsTile(string searchId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitWhenFull = default, bool? skipCovered = default, string algorithm = default, string algorithmParams = default, string buffer = default, string colorFormula = default, string collection = default, string resampling = default, string pixelSelection = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetMosaicsTileRequest(searchId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBandIndices, assetAsBand, noData, unscale, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, algorithm, algorithmParams, buffer, colorFormula, collection, resampling, pixelSelection, rescale, colorMapName, colorMap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create map tile.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z">
        /// Identifier (Z) selecting one of the scales defined in the TileMatrixSet and
        /// representing the scaleDenominator the tile.
        /// </param>
        /// <param name="x">
        /// Column (X) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixHeight-1 for the selected TileMatrix.
        /// </param>
        /// <param name="y">
        /// Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the
        /// MatrixWidth-1 for the selected TileMatrix.
        /// </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles (default: "1"). </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp) (default: "png"). </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetMosaicsTileAsync(string searchId, string tileMatrixSetId, float z, float x, float y, float scale, string format, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, int? scanLimit = default, int? itemsLimit = default, int? timeLimit = default, bool? exitWhenFull = default, bool? skipCovered = default, string algorithm = default, string algorithmParams = default, string buffer = default, string colorFormula = default, string collection = default, string resampling = default, string pixelSelection = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsTile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
                Argument.AssertNotNullOrEmpty(format, nameof(format));

                using HttpMessage message = CreateGetMosaicsTileRequest(searchId, tileMatrixSetId, z, x, y, scale, format, assets, expression, assetBandIndices, assetAsBand, noData, unscale, scanLimit, itemsLimit, timeLimit, exitWhenFull, skipCovered, algorithm, algorithmParams, buffer, colorFormula, collection, resampling, pixelSelection, rescale, colorMapName, colorMap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create map tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z"> Identifier (Z) selecting one of the scales defined in the TileMatrixSet. </param>
        /// <param name="x"> Column (X) index of the tile on the selected TileMatrix. </param>
        /// <param name="y"> Row (Y) index of the tile on the selected TileMatrix. </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="options"> Options for mosaic tile generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/>, <paramref name="format"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetMosaicsTile(string searchId, string tileMatrixSetId, float z, float x, float y, float scale, string format, GetMosaicTileOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetMosaicsTile(searchId, tileMatrixSetId, z, x, y, scale, format, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Create map tile. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="z"> Identifier (Z) selecting one of the scales defined in the TileMatrixSet. </param>
        /// <param name="x"> Column (X) index of the tile on the selected TileMatrix. </param>
        /// <param name="y"> Row (Y) index of the tile on the selected TileMatrix. </param>
        /// <param name="scale"> Numeric scale factor for the tile. Higher values produce larger tiles. </param>
        /// <param name="format"> Output format for the tile or image (e.g., png, jpeg, webp). </param>
        /// <param name="options"> Options for mosaic tile generation including asset selection, terrain algorithms, and visual rendering. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/>, <paramref name="format"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="format"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetMosaicsTileAsync(string searchId, string tileMatrixSetId, float z, float x, float y, float scale, string format, GetMosaicTileOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNullOrEmpty(format, nameof(format));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetMosaicsTileAsync(searchId, tileMatrixSetId, z, x, y, scale, format, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minZoom"> Overwrite default minzoom. </param>
        /// <param name="maxZoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetMosaicsWmtsCapabilities(string searchId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string tileFormat = default, int? tileScale = default, int? minZoom = default, int? maxZoom = default, string buffer = default, string colorFormula = default, string resampling = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsWmtsCapabilities");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetMosaicsWmtsCapabilitiesRequest(searchId, tileMatrixSetId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, tileFormat, tileScale, minZoom, maxZoom, buffer, colorFormula, resampling, rescale, colorMapName, colorMap, returnMask, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] OGC WMTS endpoint.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="tileFormat"> Output image type. Default is png. </param>
        /// <param name="tileScale"> Tile scale factor affecting output size. Values &gt; 1 produce larger tiles (e.g., 1=256x256, 2=512x512). </param>
        /// <param name="minZoom"> Overwrite default minzoom. </param>
        /// <param name="maxZoom"> Overwrite default maxzoom. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetMosaicsWmtsCapabilitiesAsync(string searchId, string tileMatrixSetId, IEnumerable<string> assets = default, string expression = default, IEnumerable<string> assetBandIndices = default, bool? assetAsBand = default, float? noData = default, bool? unscale = default, string algorithm = default, string algorithmParams = default, string tileFormat = default, int? tileScale = default, int? minZoom = default, int? maxZoom = default, string buffer = default, string colorFormula = default, string resampling = default, IEnumerable<string> rescale = default, string colorMapName = default, string colorMap = default, bool? returnMask = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("TilerClient.GetMosaicsWmtsCapabilities");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
                Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));

                using HttpMessage message = CreateGetMosaicsWmtsCapabilitiesRequest(searchId, tileMatrixSetId, assets, expression, assetBandIndices, assetAsBand, noData, unscale, algorithm, algorithmParams, tileFormat, tileScale, minZoom, maxZoom, buffer, colorFormula, resampling, rescale, colorMapName, colorMap, returnMask, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="options"> Options for mosaic WMTS capabilities including asset selection, terrain algorithms, and tile formatting. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetMosaicsWmtsCapabilities(string searchId, string tileMatrixSetId, GetMosaicWmtsCapabilitiesOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = this.GetMosaicsWmtsCapabilities(searchId, tileMatrixSetId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> OGC WMTS endpoint. </summary>
        /// <param name="searchId"> Search Id (pgSTAC Search Hash). </param>
        /// <param name="tileMatrixSetId"> Identifier selecting one of the TileMatrixSetId supported. </param>
        /// <param name="options"> Options for mosaic WMTS capabilities including asset selection, terrain algorithms, and tile formatting. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchId"/>, <paramref name="tileMatrixSetId"/> or <paramref name="options"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="searchId"/> or <paramref name="tileMatrixSetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetMosaicsWmtsCapabilitiesAsync(string searchId, string tileMatrixSetId, GetMosaicWmtsCapabilitiesOptions options, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(searchId, nameof(searchId));
            Argument.AssertNotNullOrEmpty(tileMatrixSetId, nameof(tileMatrixSetId));
            Argument.AssertNotNull(options, nameof(options));

            Response result = await this.GetMosaicsWmtsCapabilitiesAsync(searchId, tileMatrixSetId, options, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }
    }
}
