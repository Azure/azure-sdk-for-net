// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.PlanetaryComputer
{
    internal partial class IngestionClientGetSourcesCollectionResultOfT : Pageable<IngestionSourceSummary>
    {
        private readonly IngestionClient _client;
        private readonly int? _top;
        private readonly int? _skip;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of IngestionClientGetSourcesCollectionResultOfT, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The IngestionClient client used to send requests. </param>
        /// <param name="top"> The number of items to return. </param>
        /// <param name="skip"> The number of items to skip. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        public IngestionClientGetSourcesCollectionResultOfT(IngestionClient client, int? top, int? skip, RequestContext context) : base(context?.CancellationToken ?? default)
        {
            _client = client;
            _top = top;
            _skip = skip;
            _context = context;
        }

        /// <summary> Gets the pages of IngestionClientGetSourcesCollectionResultOfT as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of IngestionClientGetSourcesCollectionResultOfT as an enumerable collection. </returns>
        public override IEnumerable<Page<IngestionSourceSummary>> AsPages(string continuationToken, int? pageSizeHint)
        {
            Uri nextPage = continuationToken != null ? new Uri(continuationToken) : null;
            while (true)
            {
                Response response = GetNextResponse(pageSizeHint, nextPage);
                if (response is null)
                {
                    yield break;
                }
                PageIngestionSourceSummary result = (PageIngestionSourceSummary)response;
                yield return Page<IngestionSourceSummary>.FromValues((IReadOnlyList<IngestionSourceSummary>)result.Value, nextPage?.AbsoluteUri, response);
                nextPage = result.NextLink;
                if (nextPage == null)
                {
                    yield break;
                }
            }
        }

        /// <summary> Get next page. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="nextLink"> The next link to use for the next page of results. </param>
        private Response GetNextResponse(int? pageSizeHint, Uri nextLink)
        {
            HttpMessage message = nextLink != null ? _client.CreateNextGetSourcesRequest(nextLink, _top, _skip, _context) : _client.CreateGetSourcesRequest(_top, _skip, _context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("IngestionClient.GetSources");
            scope.Start();
            try
            {
                return _client.Pipeline.ProcessMessage(message, _context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
