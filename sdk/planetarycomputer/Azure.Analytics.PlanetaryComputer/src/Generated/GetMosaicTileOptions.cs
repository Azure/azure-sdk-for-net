// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Options for mosaic tiles. </summary>
    public partial class GetMosaicTileOptions
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="GetMosaicTileOptions"/>. </summary>
        public GetMosaicTileOptions()
        {
            Assets = new ChangeTrackingList<string>();
            AssetBandIndices = new ChangeTrackingList<string>();
            Rescale = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="GetMosaicTileOptions"/>. </summary>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="scanLimit"> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </param>
        /// <param name="itemsLimit"> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </param>
        /// <param name="timeLimit"> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </param>
        /// <param name="exitWhenFull"> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </param>
        /// <param name="skipCovered">
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="buffer">
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="collection"> STAC Collection ID. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="pixelSelection"> Pixel selection method. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal GetMosaicTileOptions(IList<string> assets, string expression, IList<string> assetBandIndices, bool? assetAsBand, float? noData, bool? unscale, int? scanLimit, int? itemsLimit, int? timeLimit, bool? exitWhenFull, bool? skipCovered, TerrainAlgorithm? algorithm, string algorithmParams, string buffer, string colorFormula, string collection, ResamplingMethod? resampling, PixelSelection? pixelSelection, IList<string> rescale, ColorMapNames? colorMapName, string colorMap, bool? returnMask, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Assets = assets;
            Expression = expression;
            AssetBandIndices = assetBandIndices;
            AssetAsBand = assetAsBand;
            NoData = noData;
            Unscale = unscale;
            ScanLimit = scanLimit;
            ItemsLimit = itemsLimit;
            TimeLimit = timeLimit;
            ExitWhenFull = exitWhenFull;
            SkipCovered = skipCovered;
            Algorithm = algorithm;
            AlgorithmParams = algorithmParams;
            Buffer = buffer;
            ColorFormula = colorFormula;
            Collection = collection;
            Resampling = resampling;
            PixelSelection = pixelSelection;
            Rescale = rescale;
            ColorMapName = colorMapName;
            ColorMap = colorMap;
            ReturnMask = returnMask;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Asset's names. </summary>
        public IList<string> Assets { get; }

        /// <summary> Band math expression between assets. </summary>
        public string Expression { get; set; }

        /// <summary> Per asset band indexes (coma separated indexes). </summary>
        public IList<string> AssetBandIndices { get; }

        /// <summary> Asset as Band. </summary>
        public bool? AssetAsBand { get; set; }

        /// <summary> Overwrite internal Nodata value. </summary>
        public float? NoData { get; set; }

        /// <summary> Apply internal Scale or Offset. </summary>
        public bool? Unscale { get; set; }

        /// <summary> Return as soon as we scan N items (defaults to 10000 in PgSTAC). </summary>
        public int? ScanLimit { get; set; }

        /// <summary> Return as soon as we have N items per geometry (defaults to 100 in PgSTAC). </summary>
        public int? ItemsLimit { get; set; }

        /// <summary> Return after N seconds to avoid long requests (defaults to 5 in PgSTAC). </summary>
        public int? TimeLimit { get; set; }

        /// <summary> Return as soon as the geometry is fully covered (defaults to True in PgSTAC). </summary>
        public bool? ExitWhenFull { get; set; }

        /// <summary>
        /// Skip any items that would show up completely under the previous items (defaults
        /// to True in PgSTAC).
        /// </summary>
        public bool? SkipCovered { get; set; }

        /// <summary> Terrain algorithm name. </summary>
        public TerrainAlgorithm? Algorithm { get; set; }

        /// <summary> Terrain algorithm parameters. </summary>
        public string AlgorithmParams { get; set; }

        /// <summary>
        /// Buffer on each side of the given tile. It must be a multiple of `0.5`. Output
        /// **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257,
        /// 1.0 = 258x258).
        /// </summary>
        public string Buffer { get; set; }

        /// <summary> rio-color formula (info: https://github.com/mapbox/rio-color). </summary>
        public string ColorFormula { get; set; }

        /// <summary> STAC Collection ID. </summary>
        public string Collection { get; set; }

        /// <summary> Resampling method. </summary>
        public ResamplingMethod? Resampling { get; set; }

        /// <summary> Pixel selection method. </summary>
        public PixelSelection? PixelSelection { get; set; }

        /// <summary> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </summary>
        public IList<string> Rescale { get; }

        /// <summary> Colormap name. </summary>
        public ColorMapNames? ColorMapName { get; set; }

        /// <summary> JSON encoded custom Colormap. </summary>
        public string ColorMap { get; set; }

        /// <summary> Add mask to the output data. </summary>
        public bool? ReturnMask { get; set; }
    }
}
