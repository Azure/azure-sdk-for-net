// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Operation status. </summary>
    public readonly partial struct OperationStatus : IEquatable<OperationStatus>
    {
        private readonly string _value;
        /// <summary> Operation accepted and ready to be run. </summary>
        private const string PendingValue = "Pending";
        /// <summary> Operation is running. </summary>
        private const string RunningValue = "Running";
        /// <summary> Operation has already finished its execution. </summary>
        private const string SucceededValue = "Succeeded";
        /// <summary> Operation canceled by the user. </summary>
        private const string CanceledValue = "Canceled";
        /// <summary> Operation is being canceling. </summary>
        private const string CancelingValue = "Canceling";
        /// <summary> Operation failed. </summary>
        private const string FailedValue = "Failed";

        /// <summary> Initializes a new instance of <see cref="OperationStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OperationStatus(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Operation accepted and ready to be run. </summary>
        public static OperationStatus Pending { get; } = new OperationStatus(PendingValue);

        /// <summary> Operation is running. </summary>
        public static OperationStatus Running { get; } = new OperationStatus(RunningValue);

        /// <summary> Operation has already finished its execution. </summary>
        public static OperationStatus Succeeded { get; } = new OperationStatus(SucceededValue);

        /// <summary> Operation canceled by the user. </summary>
        public static OperationStatus Canceled { get; } = new OperationStatus(CanceledValue);

        /// <summary> Operation is being canceling. </summary>
        public static OperationStatus Canceling { get; } = new OperationStatus(CancelingValue);

        /// <summary> Operation failed. </summary>
        public static OperationStatus Failed { get; } = new OperationStatus(FailedValue);

        /// <summary> Determines if two <see cref="OperationStatus"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(OperationStatus left, OperationStatus right) => left.Equals(right);

        /// <summary> Determines if two <see cref="OperationStatus"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(OperationStatus left, OperationStatus right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="OperationStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator OperationStatus(string value) => new OperationStatus(value);

        /// <summary> Converts a string to a <see cref="OperationStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator OperationStatus?(string value) => value == null ? null : new OperationStatus(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OperationStatus other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(OperationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
