// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Options for getting previews. </summary>
    public partial class GetPreviewOptions
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="GetPreviewOptions"/>. </summary>
        public GetPreviewOptions()
        {
            Assets = new ChangeTrackingList<string>();
            AssetBandIndices = new ChangeTrackingList<string>();
            Rescale = new ChangeTrackingList<string>();
            SubdatasetBands = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="GetPreviewOptions"/>. </summary>
        /// <param name="assets"> Asset's names. </param>
        /// <param name="expression"> Band math expression between assets. </param>
        /// <param name="assetBandIndices"> Per asset band indexes (coma separated indexes). </param>
        /// <param name="assetAsBand"> Asset as Band. </param>
        /// <param name="noData"> Overwrite internal Nodata value. </param>
        /// <param name="unscale"> Apply internal Scale or Offset. </param>
        /// <param name="algorithm"> Terrain algorithm name. </param>
        /// <param name="algorithmParams"> Terrain algorithm parameters. </param>
        /// <param name="colorFormula"> rio-color formula (info: https://github.com/mapbox/rio-color). </param>
        /// <param name="dstCrs"> Output Coordinate Reference System. </param>
        /// <param name="resampling"> Resampling method. </param>
        /// <param name="maxSize"> Image output size limit if width and height limits are not set. </param>
        /// <param name="height"> Height in pixels for the output image. </param>
        /// <param name="width"> Width in pixels for the output image. </param>
        /// <param name="rescale"> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </param>
        /// <param name="colorMapName"> Colormap name. </param>
        /// <param name="colorMap"> JSON encoded custom Colormap. </param>
        /// <param name="returnMask"> Add mask to the output data. </param>
        /// <param name="subdatasetName"> The name of a subdataset within the asset. </param>
        /// <param name="subdatasetBands"> The index of a subdataset band within the asset. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal GetPreviewOptions(IList<string> assets, string expression, IList<string> assetBandIndices, bool? assetAsBand, float? noData, bool? unscale, TerrainAlgorithm? algorithm, string algorithmParams, string colorFormula, string dstCrs, ResamplingMethod? resampling, int? maxSize, int? height, int? width, IList<string> rescale, ColorMapNames? colorMapName, string colorMap, bool? returnMask, string subdatasetName, IList<string> subdatasetBands, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Assets = assets;
            Expression = expression;
            AssetBandIndices = assetBandIndices;
            AssetAsBand = assetAsBand;
            NoData = noData;
            Unscale = unscale;
            Algorithm = algorithm;
            AlgorithmParams = algorithmParams;
            ColorFormula = colorFormula;
            DstCrs = dstCrs;
            Resampling = resampling;
            MaxSize = maxSize;
            Height = height;
            Width = width;
            Rescale = rescale;
            ColorMapName = colorMapName;
            ColorMap = colorMap;
            ReturnMask = returnMask;
            SubdatasetName = subdatasetName;
            SubdatasetBands = subdatasetBands;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Asset's names. </summary>
        public IList<string> Assets { get; }

        /// <summary> Band math expression between assets. </summary>
        public string Expression { get; set; }

        /// <summary> Per asset band indexes (coma separated indexes). </summary>
        public IList<string> AssetBandIndices { get; }

        /// <summary> Asset as Band. </summary>
        public bool? AssetAsBand { get; set; }

        /// <summary> Overwrite internal Nodata value. </summary>
        public float? NoData { get; set; }

        /// <summary> Apply internal Scale or Offset. </summary>
        public bool? Unscale { get; set; }

        /// <summary> Terrain algorithm name. </summary>
        public TerrainAlgorithm? Algorithm { get; set; }

        /// <summary> Terrain algorithm parameters. </summary>
        public string AlgorithmParams { get; set; }

        /// <summary> rio-color formula (info: https://github.com/mapbox/rio-color). </summary>
        public string ColorFormula { get; set; }

        /// <summary> Output Coordinate Reference System. </summary>
        public string DstCrs { get; set; }

        /// <summary> Resampling method. </summary>
        public ResamplingMethod? Resampling { get; set; }

        /// <summary> Image output size limit if width and height limits are not set. </summary>
        public int? MaxSize { get; set; }

        /// <summary> Height in pixels for the output image. </summary>
        public int? Height { get; set; }

        /// <summary> Width in pixels for the output image. </summary>
        public int? Width { get; set; }

        /// <summary> comma (',') delimited Min,Max range. Can set multiple time for multiple bands. </summary>
        public IList<string> Rescale { get; }

        /// <summary> Colormap name. </summary>
        public ColorMapNames? ColorMapName { get; set; }

        /// <summary> JSON encoded custom Colormap. </summary>
        public string ColorMap { get; set; }

        /// <summary> Add mask to the output data. </summary>
        public bool? ReturnMask { get; set; }

        /// <summary> The name of a subdataset within the asset. </summary>
        public string SubdatasetName { get; set; }

        /// <summary> The index of a subdataset band within the asset. </summary>
        public IList<string> SubdatasetBands { get; }
    }
}
