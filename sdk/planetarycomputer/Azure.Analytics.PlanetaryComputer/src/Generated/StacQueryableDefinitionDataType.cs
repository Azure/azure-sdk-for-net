// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary>
    /// Queryable data types for the queryables extension.
    /// These are the data types supported by Basic CQL2.
    /// </summary>
    public readonly partial struct StacQueryableDefinitionDataType : IEquatable<StacQueryableDefinitionDataType>
    {
        private readonly string _value;
        /// <summary>
        /// Character strings.
        /// Example: 'This is a literal string.'
        /// </summary>
        private const string StringValue = "string";
        /// <summary>
        /// Numbers including integers and floating point values.
        /// Examples: -100, 3.14159
        /// </summary>
        private const string NumberValue = "number";
        /// <summary>
        /// Booleans.
        /// Examples: true, false
        /// </summary>
        private const string BooleanValue = "boolean";
        /// <summary>
        /// An instant with a granularity of a second or smaller.
        /// Example (JSON): { "timestamp": "1969-07-20T20:17:40Z" }
        /// </summary>
        private const string TimestampValue = "timestamp";
        /// <summary>
        /// An instant with a granularity of a day.
        /// Example (JSON): { "date": "1969-07-20" }
        /// </summary>
        private const string DateValue = "date";

        /// <summary> Initializes a new instance of <see cref="StacQueryableDefinitionDataType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StacQueryableDefinitionDataType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary>
        /// Character strings.
        /// Example: 'This is a literal string.'
        /// </summary>
        public static StacQueryableDefinitionDataType String { get; } = new StacQueryableDefinitionDataType(StringValue);

        /// <summary>
        /// Numbers including integers and floating point values.
        /// Examples: -100, 3.14159
        /// </summary>
        public static StacQueryableDefinitionDataType Number { get; } = new StacQueryableDefinitionDataType(NumberValue);

        /// <summary>
        /// Booleans.
        /// Examples: true, false
        /// </summary>
        public static StacQueryableDefinitionDataType Boolean { get; } = new StacQueryableDefinitionDataType(BooleanValue);

        /// <summary>
        /// An instant with a granularity of a second or smaller.
        /// Example (JSON): { "timestamp": "1969-07-20T20:17:40Z" }
        /// </summary>
        public static StacQueryableDefinitionDataType Timestamp { get; } = new StacQueryableDefinitionDataType(TimestampValue);

        /// <summary>
        /// An instant with a granularity of a day.
        /// Example (JSON): { "date": "1969-07-20" }
        /// </summary>
        public static StacQueryableDefinitionDataType Date { get; } = new StacQueryableDefinitionDataType(DateValue);

        /// <summary> Determines if two <see cref="StacQueryableDefinitionDataType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(StacQueryableDefinitionDataType left, StacQueryableDefinitionDataType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="StacQueryableDefinitionDataType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(StacQueryableDefinitionDataType left, StacQueryableDefinitionDataType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="StacQueryableDefinitionDataType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator StacQueryableDefinitionDataType(string value) => new StacQueryableDefinitionDataType(value);

        /// <summary> Converts a string to a <see cref="StacQueryableDefinitionDataType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator StacQueryableDefinitionDataType?(string value) => value == null ? null : new StacQueryableDefinitionDataType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StacQueryableDefinitionDataType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(StacQueryableDefinitionDataType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
