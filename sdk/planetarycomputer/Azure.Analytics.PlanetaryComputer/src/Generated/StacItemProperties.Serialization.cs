// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary>
    /// Properties of a STAC Item containing metadata about the asset.
    /// 
    /// https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/item-spec.md#properties-object
    /// </summary>
    public partial class StacItemProperties : IJsonModel<StacItemProperties>
    {
        /// <summary> Initializes a new instance of <see cref="StacItemProperties"/> for deserialization. </summary>
        internal StacItemProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<StacItemProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(StacItemProperties)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Platform))
            {
                writer.WritePropertyName("platform"u8);
                writer.WriteStringValue(Platform);
            }
            if (Optional.IsCollectionDefined(Instruments))
            {
                writer.WritePropertyName("instruments"u8);
                writer.WriteStartArray();
                foreach (string item in Instruments)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Constellation))
            {
                writer.WritePropertyName("constellation"u8);
                writer.WriteStringValue(Constellation);
            }
            if (Optional.IsDefined(Mission))
            {
                writer.WritePropertyName("mission"u8);
                writer.WriteStringValue(Mission);
            }
            if (Optional.IsCollectionDefined(Providers))
            {
                writer.WritePropertyName("providers"u8);
                writer.WriteStartArray();
                foreach (StacProvider item in Providers)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Gsd))
            {
                writer.WritePropertyName("gsd"u8);
                writer.WriteNumberValue(Gsd.Value);
            }
            if (Optional.IsDefined(Created))
            {
                writer.WritePropertyName("created"u8);
                writer.WriteStringValue(Created.Value, "O");
            }
            if (Optional.IsDefined(Updated))
            {
                writer.WritePropertyName("updated"u8);
                writer.WriteStringValue(Updated.Value, "O");
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("datetime"u8);
            writer.WriteStringValue(Datetime);
            if (Optional.IsDefined(StartDatetime))
            {
                writer.WritePropertyName("start_datetime"u8);
                writer.WriteStringValue(StartDatetime.Value, "O");
            }
            if (Optional.IsDefined(EndDatetime))
            {
                writer.WritePropertyName("end_datetime"u8);
                writer.WriteStringValue(EndDatetime.Value, "O");
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        StacItemProperties IJsonModel<StacItemProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual StacItemProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(StacItemProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeStacItemProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static StacItemProperties DeserializeStacItemProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string platform = default;
            IList<string> instruments = default;
            string constellation = default;
            string mission = default;
            IList<StacProvider> providers = default;
            float? gsd = default;
            DateTimeOffset? created = default;
            DateTimeOffset? updated = default;
            string title = default;
            string description = default;
            string datetime = default;
            DateTimeOffset? startDatetime = default;
            DateTimeOffset? endDatetime = default;
            IDictionary<string, BinaryData> additionalProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("platform"u8))
                {
                    platform = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("instruments"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    instruments = array;
                    continue;
                }
                if (prop.NameEquals("constellation"u8))
                {
                    constellation = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("mission"u8))
                {
                    mission = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("providers"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<StacProvider> array = new List<StacProvider>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(StacProvider.DeserializeStacProvider(item, options));
                    }
                    providers = array;
                    continue;
                }
                if (prop.NameEquals("gsd"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gsd = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("created"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    created = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("updated"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updated = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("title"u8))
                {
                    title = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("description"u8))
                {
                    description = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("datetime"u8))
                {
                    datetime = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("start_datetime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startDatetime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("end_datetime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endDatetime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                additionalProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
            }
            return new StacItemProperties(
                platform,
                instruments ?? new ChangeTrackingList<string>(),
                constellation,
                mission,
                providers ?? new ChangeTrackingList<StacProvider>(),
                gsd,
                created,
                updated,
                title,
                description,
                datetime,
                startDatetime,
                endDatetime,
                additionalProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<StacItemProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(StacItemProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        StacItemProperties IPersistableModel<StacItemProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual StacItemProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<StacItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeStacItemProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(StacItemProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<StacItemProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
