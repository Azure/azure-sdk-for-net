// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary>
    /// Tile Matrix Definition
    /// 
    /// A tile matrix, usually corresponding to a particular zoom level of a
    /// TileMatrixSet.
    /// 
    /// ref:
    /// https://github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/tileMatrix.json
    /// 
    /// Definition of a tile matrix at a specific zoom level within a tile matrix set
    /// </summary>
    public partial class TileMatrix : IJsonModel<TileMatrix>
    {
        /// <summary> Initializes a new instance of <see cref="TileMatrix"/> for deserialization. </summary>
        internal TileMatrix()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<TileMatrix>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TileMatrix>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TileMatrix)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Keywords))
            {
                writer.WritePropertyName("keywords"u8);
                writer.WriteStartArray();
                foreach (string item in Keywords)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            writer.WritePropertyName("scaleDenominator"u8);
            writer.WriteNumberValue(ScaleDenominator);
            writer.WritePropertyName("cellSize"u8);
            writer.WriteNumberValue(CellSize);
            if (Optional.IsDefined(CornerOfOrigin))
            {
                writer.WritePropertyName("cornerOfOrigin"u8);
                writer.WriteStringValue(CornerOfOrigin.Value.ToString());
            }
            writer.WritePropertyName("pointOfOrigin"u8);
            writer.WriteStartArray();
            foreach (double item in PointOfOrigin)
            {
                writer.WriteNumberValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("tileWidth"u8);
            writer.WriteNumberValue(TileWidth);
            writer.WritePropertyName("tileHeight"u8);
            writer.WriteNumberValue(TileHeight);
            writer.WritePropertyName("matrixWidth"u8);
            writer.WriteNumberValue(MatrixWidth);
            writer.WritePropertyName("matrixHeight"u8);
            writer.WriteNumberValue(MatrixHeight);
            if (Optional.IsCollectionDefined(VariableMatrixWidths))
            {
                writer.WritePropertyName("variableMatrixWidths"u8);
                writer.WriteStartArray();
                foreach (VariableMatrixWidth item in VariableMatrixWidths)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        TileMatrix IJsonModel<TileMatrix>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual TileMatrix JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TileMatrix>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TileMatrix)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTileMatrix(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static TileMatrix DeserializeTileMatrix(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string title = default;
            string description = default;
            IList<string> keywords = default;
            string id = default;
            float scaleDenominator = default;
            float cellSize = default;
            TileMatrixCornerOfOrigin? cornerOfOrigin = default;
            IList<double> pointOfOrigin = default;
            int tileWidth = default;
            int tileHeight = default;
            int matrixWidth = default;
            int matrixHeight = default;
            IList<VariableMatrixWidth> variableMatrixWidths = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("title"u8))
                {
                    title = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("description"u8))
                {
                    description = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("keywords"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    keywords = array;
                    continue;
                }
                if (prop.NameEquals("id"u8))
                {
                    id = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("scaleDenominator"u8))
                {
                    scaleDenominator = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("cellSize"u8))
                {
                    cellSize = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("cornerOfOrigin"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cornerOfOrigin = new TileMatrixCornerOfOrigin(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("pointOfOrigin"u8))
                {
                    List<double> array = new List<double>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    pointOfOrigin = array;
                    continue;
                }
                if (prop.NameEquals("tileWidth"u8))
                {
                    tileWidth = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("tileHeight"u8))
                {
                    tileHeight = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("matrixWidth"u8))
                {
                    matrixWidth = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("matrixHeight"u8))
                {
                    matrixHeight = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("variableMatrixWidths"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VariableMatrixWidth> array = new List<VariableMatrixWidth>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(VariableMatrixWidth.DeserializeVariableMatrixWidth(item, options));
                    }
                    variableMatrixWidths = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new TileMatrix(
                title,
                description,
                keywords ?? new ChangeTrackingList<string>(),
                id,
                scaleDenominator,
                cellSize,
                cornerOfOrigin,
                pointOfOrigin,
                tileWidth,
                tileHeight,
                matrixWidth,
                matrixHeight,
                variableMatrixWidths ?? new ChangeTrackingList<VariableMatrixWidth>(),
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<TileMatrix>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TileMatrix>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(TileMatrix)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        TileMatrix IPersistableModel<TileMatrix>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual TileMatrix PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TileMatrix>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeTileMatrix(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TileMatrix)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<TileMatrix>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
