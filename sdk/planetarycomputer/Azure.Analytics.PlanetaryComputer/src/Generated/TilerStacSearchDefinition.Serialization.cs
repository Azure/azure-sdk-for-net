// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary>
    /// PgSTAC Search entry.
    /// 
    /// ref:
    /// https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915Stored search query in the PgSTAC database
    /// </summary>
    public partial class TilerStacSearchDefinition : IJsonModel<TilerStacSearchDefinition>
    {
        /// <summary> Initializes a new instance of <see cref="TilerStacSearchDefinition"/> for deserialization. </summary>
        internal TilerStacSearchDefinition()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<TilerStacSearchDefinition>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TilerStacSearchDefinition>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TilerStacSearchDefinition)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("hash"u8);
            writer.WriteStringValue(Hash);
            writer.WritePropertyName("search"u8);
            writer.WriteStartObject();
            foreach (var item in Search)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
#if NET6_0_OR_GREATER
                writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
            writer.WritePropertyName("_where"u8);
            writer.WriteStringValue(Where);
            writer.WritePropertyName("orderby"u8);
            writer.WriteStringValue(OrderBy);
            writer.WritePropertyName("lastused"u8);
            writer.WriteStringValue(LastUsed, "O");
            writer.WritePropertyName("usecount"u8);
            writer.WriteNumberValue(UseCount);
            writer.WritePropertyName("metadata"u8);
            writer.WriteObjectValue(Metadata, options);
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        TilerStacSearchDefinition IJsonModel<TilerStacSearchDefinition>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual TilerStacSearchDefinition JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TilerStacSearchDefinition>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TilerStacSearchDefinition)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTilerStacSearchDefinition(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static TilerStacSearchDefinition DeserializeTilerStacSearchDefinition(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string hash = default;
            IDictionary<string, BinaryData> search = default;
            string @where = default;
            string orderBy = default;
            DateTimeOffset lastUsed = default;
            int useCount = default;
            MosaicMetadata metadata = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("hash"u8))
                {
                    hash = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("search"u8))
                {
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, BinaryData.FromString(prop0.Value.GetRawText()));
                        }
                    }
                    search = dictionary;
                    continue;
                }
                if (prop.NameEquals("_where"u8))
                {
                    @where = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("orderby"u8))
                {
                    orderBy = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("lastused"u8))
                {
                    lastUsed = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("usecount"u8))
                {
                    useCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("metadata"u8))
                {
                    metadata = MosaicMetadata.DeserializeMosaicMetadata(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new TilerStacSearchDefinition(
                hash,
                search,
                @where,
                orderBy,
                lastUsed,
                useCount,
                metadata,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<TilerStacSearchDefinition>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TilerStacSearchDefinition>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(TilerStacSearchDefinition)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        TilerStacSearchDefinition IPersistableModel<TilerStacSearchDefinition>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual TilerStacSearchDefinition PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<TilerStacSearchDefinition>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeTilerStacSearchDefinition(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TilerStacSearchDefinition)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<TilerStacSearchDefinition>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
