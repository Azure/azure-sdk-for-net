// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Microsoft Planetary Computer Pro geo-catalog ingestion creation model. </summary>
    public partial class IngestionDefinition : IJsonModel<IngestionDefinition>
    {
        /// <summary> Initializes a new instance of <see cref="IngestionDefinition"/> for deserialization. </summary>
        internal IngestionDefinition()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<IngestionDefinition>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<IngestionDefinition>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(IngestionDefinition)} does not support writing '{format}' format.");
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            writer.WritePropertyName("importType"u8);
            writer.WriteStringValue(ImportType.ToString());
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(SourceCatalogUrl))
            {
                writer.WritePropertyName("sourceCatalogUrl"u8);
                writer.WriteStringValue(SourceCatalogUrl.AbsoluteUri);
            }
            if (Optional.IsDefined(SkipExistingItems))
            {
                writer.WritePropertyName("skipExistingItems"u8);
                writer.WriteBooleanValue(SkipExistingItems.Value);
            }
            if (Optional.IsDefined(KeepOriginalAssets))
            {
                writer.WritePropertyName("keepOriginalAssets"u8);
                writer.WriteBooleanValue(KeepOriginalAssets.Value);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("creationTime"u8);
                writer.WriteStringValue(CreationTime, "O");
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.ToString());
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        IngestionDefinition IJsonModel<IngestionDefinition>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual IngestionDefinition JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<IngestionDefinition>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(IngestionDefinition)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeIngestionDefinition(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static IngestionDefinition DeserializeIngestionDefinition(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Guid id = default;
            IngestionType importType = default;
            string displayName = default;
            Uri sourceCatalogUrl = default;
            bool? skipExistingItems = default;
            bool? keepOriginalAssets = default;
            DateTimeOffset creationTime = default;
            IngestionStatus status = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("id"u8))
                {
                    id = new Guid(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("importType"u8))
                {
                    importType = new IngestionType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceCatalogUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceCatalogUrl = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("skipExistingItems"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    skipExistingItems = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("keepOriginalAssets"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keepOriginalAssets = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("creationTime"u8))
                {
                    creationTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("status"u8))
                {
                    status = new IngestionStatus(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new IngestionDefinition(
                id,
                importType,
                displayName,
                sourceCatalogUrl,
                skipExistingItems,
                keepOriginalAssets,
                creationTime,
                status,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<IngestionDefinition>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<IngestionDefinition>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAnalyticsPlanetaryComputerContext.Default);
                default:
                    throw new FormatException($"The model {nameof(IngestionDefinition)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        IngestionDefinition IPersistableModel<IngestionDefinition>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual IngestionDefinition PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<IngestionDefinition>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeIngestionDefinition(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(IngestionDefinition)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<IngestionDefinition>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="ingestionDefinition"> The <see cref="IngestionDefinition"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(IngestionDefinition ingestionDefinition)
        {
            if (ingestionDefinition == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(ingestionDefinition, ModelSerializationExtensions.WireOptions);
            return content;
        }

        /// <param name="result"> The <see cref="Response"/> to deserialize the <see cref="IngestionDefinition"/> from. </param>
        public static explicit operator IngestionDefinition(Response result)
        {
            using Response response = result;
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeIngestionDefinition(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
