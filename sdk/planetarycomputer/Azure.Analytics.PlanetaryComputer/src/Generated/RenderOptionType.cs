// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Specifies the types of render options for map visualization. </summary>
    public readonly partial struct RenderOptionType : IEquatable<RenderOptionType>
    {
        private readonly string _value;
        /// <summary> Raster tile rendering type. </summary>
        private const string RasterTileValue = "raster-tile";
        /// <summary> Vector tile polygon rendering type. </summary>
        private const string VtPolygonValue = "vt-polygon";
        /// <summary> Vector tile line rendering type. </summary>
        private const string VtLineValue = "vt-line";

        /// <summary> Initializes a new instance of <see cref="RenderOptionType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RenderOptionType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Raster tile rendering type. </summary>
        public static RenderOptionType RasterTile { get; } = new RenderOptionType(RasterTileValue);

        /// <summary> Vector tile polygon rendering type. </summary>
        public static RenderOptionType VtPolygon { get; } = new RenderOptionType(VtPolygonValue);

        /// <summary> Vector tile line rendering type. </summary>
        public static RenderOptionType VtLine { get; } = new RenderOptionType(VtLineValue);

        /// <summary> Determines if two <see cref="RenderOptionType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(RenderOptionType left, RenderOptionType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="RenderOptionType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(RenderOptionType left, RenderOptionType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="RenderOptionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator RenderOptionType(string value) => new RenderOptionType(value);

        /// <summary> Converts a string to a <see cref="RenderOptionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator RenderOptionType?(string value) => value == null ? null : new RenderOptionType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RenderOptionType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(RenderOptionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
