// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Defines a default geographic location for map visualization. </summary>
    public partial class DefaultLocation
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="DefaultLocation"/>. </summary>
        /// <param name="zoom"> Default zoom level for the map. </param>
        /// <param name="coordinates"> Default center coordinates [latitude, longitude] for the map. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="coordinates"/> is null. </exception>
        public DefaultLocation(int zoom, IEnumerable<float> coordinates)
        {
            Argument.AssertNotNull(coordinates, nameof(coordinates));

            Zoom = zoom;
            Coordinates = coordinates.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DefaultLocation"/>. </summary>
        /// <param name="zoom"> Default zoom level for the map. </param>
        /// <param name="coordinates"> Default center coordinates [latitude, longitude] for the map. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal DefaultLocation(int zoom, IList<float> coordinates, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Zoom = zoom;
            Coordinates = coordinates;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Default zoom level for the map. </summary>
        public int Zoom { get; set; }

        /// <summary> Default center coordinates [latitude, longitude] for the map. </summary>
        public IList<float> Coordinates { get; }
    }
}
