// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> The SharedAccessSignatureClient sub-client. </summary>
    public partial class SharedAccessSignatureClient
    {
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of SharedAccessSignatureClient for mocking. </summary>
        protected SharedAccessSignatureClient()
        {
        }

        /// <summary> Initializes a new instance of SharedAccessSignatureClient. </summary>
        /// <param name="clientDiagnostics"> The ClientDiagnostics is used to provide tracing support for the client library. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="apiVersion"></param>
        internal SharedAccessSignatureClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _endpoint = endpoint;
            Pipeline = pipeline;
            _apiVersion = apiVersion;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Signs a HREF (a link URL) by appending a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
        /// If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="href"> HREF (URL) to sign. </param>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="href"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetSign(Uri href, int? durationInMinutes, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.GetSign");
            scope.Start();
            try
            {
                Argument.AssertNotNull(href, nameof(href));

                using HttpMessage message = CreateGetSignRequest(href, durationInMinutes, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Signs a HREF (a link URL) by appending a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
        /// If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="href"> HREF (URL) to sign. </param>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="href"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetSignAsync(Uri href, int? durationInMinutes, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.GetSign");
            scope.Start();
            try
            {
                Argument.AssertNotNull(href, nameof(href));

                using HttpMessage message = CreateGetSignRequest(href, durationInMinutes, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Signs a HREF (a link URL) by appending a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
        /// If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
        /// </summary>
        /// <param name="href"> HREF (URL) to sign. </param>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="href"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<SharedAccessSignatureSignedLink> GetSign(Uri href, int? durationInMinutes = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(href, nameof(href));

            Response result = GetSign(href, durationInMinutes, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((SharedAccessSignatureSignedLink)result, result);
        }

        /// <summary>
        /// Signs a HREF (a link URL) by appending a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works).
        /// If the HREF is not a Azure Blob Storage HREF, then pass back the HREF unsigned.
        /// </summary>
        /// <param name="href"> HREF (URL) to sign. </param>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="href"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<SharedAccessSignatureSignedLink>> GetSignAsync(Uri href, int? durationInMinutes = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(href, nameof(href));

            Response result = await GetSignAsync(href, durationInMinutes, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((SharedAccessSignatureSignedLink)result, result);
        }

        /// <summary>
        /// [Protocol Method] Generate a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for the given storage account and container. The storage account and container
        /// must be associated with a Planetary Computer dataset indexed by the STAC API.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> The name of the Collection that the SAS token will be issued for. </param>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetToken(string collectionId, int? durationInMinutes, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.GetToken");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

                using HttpMessage message = CreateGetTokenRequest(collectionId, durationInMinutes, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Generate a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for the given storage account and container. The storage account and container
        /// must be associated with a Planetary Computer dataset indexed by the STAC API.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectionId"> The name of the Collection that the SAS token will be issued for. </param>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTokenAsync(string collectionId, int? durationInMinutes, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.GetToken");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

                using HttpMessage message = CreateGetTokenRequest(collectionId, durationInMinutes, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generate a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for the given storage account and container. The storage account and container
        /// must be associated with a Planetary Computer dataset indexed by the STAC API.
        /// </summary>
        /// <param name="collectionId"> The name of the Collection that the SAS token will be issued for. </param>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<SharedAccessSignatureToken> GetToken(string collectionId, int? durationInMinutes = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

            Response result = GetToken(collectionId, durationInMinutes, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((SharedAccessSignatureToken)result, result);
        }

        /// <summary>
        /// Generate a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for the given storage account and container. The storage account and container
        /// must be associated with a Planetary Computer dataset indexed by the STAC API.
        /// </summary>
        /// <param name="collectionId"> The name of the Collection that the SAS token will be issued for. </param>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<SharedAccessSignatureToken>> GetTokenAsync(string collectionId, int? durationInMinutes = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

            Response result = await GetTokenAsync(collectionId, durationInMinutes, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((SharedAccessSignatureToken)result, result);
        }

        /// <summary>
        /// [Protocol Method] Revoke a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for managed storage account of this GeoCatalog.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response RevokeToken(int? durationInMinutes, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.RevokeToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRevokeTokenRequest(durationInMinutes, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Revoke a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for managed storage account of this GeoCatalog.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> RevokeTokenAsync(int? durationInMinutes, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("SharedAccessSignatureClient.RevokeToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRevokeTokenRequest(durationInMinutes, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Revoke a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for managed storage account of this GeoCatalog.
        /// </summary>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response RevokeToken(int? durationInMinutes = default, CancellationToken cancellationToken = default)
        {
            return RevokeToken(durationInMinutes, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// Revoke a [SAS Token](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview#how-a-shared-access-signature-works)
        /// for managed storage account of this GeoCatalog.
        /// </summary>
        /// <param name="durationInMinutes"> The duration, in minutes, that the SAS token will be valid. Only valid for approved users. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> RevokeTokenAsync(int? durationInMinutes = default, CancellationToken cancellationToken = default)
        {
            return await RevokeTokenAsync(durationInMinutes, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }
    }
}
