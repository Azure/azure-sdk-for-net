// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure;
using Azure.Core;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary></summary>
    public partial class MapLegendsClient
    {
        private static ResponseClassifier _pipelineMessageClassifier200204;

        private static ResponseClassifier PipelineMessageClassifier200204 => _pipelineMessageClassifier200204 = new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });

        internal HttpMessage CreateGetClassmapLegendRequest(string classmapName, int? trimStart, int? trimEnd, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/data/legend/classmap/", false);
            uri.AppendPath(classmapName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (trimStart != null)
            {
                uri.AppendQuery("trim_start", TypeFormatters.ConvertToString(trimStart, null), true);
            }
            if (trimEnd != null)
            {
                uri.AppendQuery("trim_end", TypeFormatters.ConvertToString(trimEnd, null), true);
            }
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLegendRequest(string cmapName, double? height, double? width, int? trimStart, int? trimEnd, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/data/legend/colormap/", false);
            uri.AppendPath(cmapName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (height != null)
            {
                uri.AppendQuery("height", TypeFormatters.ConvertToString(height, null), true);
            }
            if (width != null)
            {
                uri.AppendQuery("width", TypeFormatters.ConvertToString(width, null), true);
            }
            if (trimStart != null)
            {
                uri.AppendQuery("trim_start", TypeFormatters.ConvertToString(trimStart, null), true);
            }
            if (trimEnd != null)
            {
                uri.AppendQuery("trim_end", TypeFormatters.ConvertToString(trimEnd, null), true);
            }
            request.Uri = uri;
            request.Headers.SetValue("Accept", "image/png");
            return message;
        }

        internal HttpMessage CreateGetIntervalLegendRequest(string classmapName, int? trimStart, int? trimEnd, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200204);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/data/legend/interval/", false);
            uri.AppendPath(classmapName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (trimStart != null)
            {
                uri.AppendQuery("trim_start", TypeFormatters.ConvertToString(trimStart, null), true);
            }
            if (trimEnd != null)
            {
                uri.AppendQuery("trim_end", TypeFormatters.ConvertToString(trimEnd, null), true);
            }
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }
    }
}
