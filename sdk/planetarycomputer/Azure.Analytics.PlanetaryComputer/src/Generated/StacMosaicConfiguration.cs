// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

namespace Azure.Analytics.PlanetaryComputer
{
    /// <summary> Configuration for data mosaic visualization. </summary>
    public partial class StacMosaicConfiguration
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="StacMosaicConfiguration"/>. </summary>
        /// <param name="mosaics"> Predefined data mosaics available for this collection. </param>
        /// <param name="renderOptions"> Available render options for visualizing the data. </param>
        internal StacMosaicConfiguration(IEnumerable<StacMosaic> mosaics, IEnumerable<RenderOptionModel> renderOptions)
        {
            Mosaics = mosaics.ToList();
            RenderOptions = renderOptions.ToList();
            DefaultCustomQuery = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="StacMosaicConfiguration"/>. </summary>
        /// <param name="mosaics"> Predefined data mosaics available for this collection. </param>
        /// <param name="renderOptions"> Available render options for visualizing the data. </param>
        /// <param name="defaultLocation"> Default map location when displaying this collection. </param>
        /// <param name="defaultCustomQuery"> A list of CQL-JSON expressions to use as the default for  this collection. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal StacMosaicConfiguration(IList<StacMosaic> mosaics, IList<RenderOptionModel> renderOptions, DefaultLocation defaultLocation, IDictionary<string, BinaryData> defaultCustomQuery, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Mosaics = mosaics;
            RenderOptions = renderOptions;
            DefaultLocation = defaultLocation;
            DefaultCustomQuery = defaultCustomQuery;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Predefined data mosaics available for this collection. </summary>
        public IList<StacMosaic> Mosaics { get; }

        /// <summary> Available render options for visualizing the data. </summary>
        public IList<RenderOptionModel> RenderOptions { get; }

        /// <summary> Default map location when displaying this collection. </summary>
        public DefaultLocation DefaultLocation { get; }

        /// <summary>
        /// A list of CQL-JSON expressions to use as the default for  this collection.
        /// <para> To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> DefaultCustomQuery { get; }
    }
}
