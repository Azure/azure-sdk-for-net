// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.PlanetaryComputer.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.PlanetaryComputer.Samples
{
    public partial class Sample_PlanetaryComputerGeoCatalogCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_GeoCatalogsCreate()
        {
            // Generated from example definition: 2025-02-11-preview/GeoCatalogs_Create.json
            // this example is just showing the usage of "GeoCatalog_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "cd9b6cdf-dcf0-4dca-ab19-82be07b74704";
            string resourceGroupName = "MyResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PlanetaryComputerGeoCatalogResource
            PlanetaryComputerGeoCatalogCollection collection = resourceGroupResource.GetPlanetaryComputerGeoCatalogs();

            // invoke the operation
            string catalogName = "MyCatalog";
            PlanetaryComputerGeoCatalogData data = new PlanetaryComputerGeoCatalogData(new AzureLocation("eastus"))
            {
                Properties = new PlanetaryComputerGeoCatalogProperties
                {
                    Tier = PlanetaryComputerGeoCatalogTier.Basic,
                    AutoGeneratedDomainNameLabelScope = AutoGeneratedDomainNameLabelScope.NoReuse,
                },
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/cd9b6cdf-dcf0-4dca-ab19-82be07b74704/resourceGroups/MyResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/MyManagedIdentity")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["MyTag"] = "MyValue"
},
            };
            ArmOperation<PlanetaryComputerGeoCatalogResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, catalogName, data);
            PlanetaryComputerGeoCatalogResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PlanetaryComputerGeoCatalogData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GeoCatalogsGet()
        {
            // Generated from example definition: 2025-02-11-preview/GeoCatalogs_Get.json
            // this example is just showing the usage of "GeoCatalog_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "cd9b6cdf-dcf0-4dca-ab19-82be07b74704";
            string resourceGroupName = "MyResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PlanetaryComputerGeoCatalogResource
            PlanetaryComputerGeoCatalogCollection collection = resourceGroupResource.GetPlanetaryComputerGeoCatalogs();

            // invoke the operation
            string catalogName = "MyCatalog";
            PlanetaryComputerGeoCatalogResource result = await collection.GetAsync(catalogName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PlanetaryComputerGeoCatalogData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_GeoCatalogsListByResourceGroup()
        {
            // Generated from example definition: 2025-02-11-preview/GeoCatalogs_ListByResourceGroup.json
            // this example is just showing the usage of "GeoCatalog_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "cd9b6cdf-dcf0-4dca-ab19-82be07b74704";
            string resourceGroupName = "MyResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PlanetaryComputerGeoCatalogResource
            PlanetaryComputerGeoCatalogCollection collection = resourceGroupResource.GetPlanetaryComputerGeoCatalogs();

            // invoke the operation and iterate over the result
            await foreach (PlanetaryComputerGeoCatalogResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PlanetaryComputerGeoCatalogData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GeoCatalogsGet()
        {
            // Generated from example definition: 2025-02-11-preview/GeoCatalogs_Get.json
            // this example is just showing the usage of "GeoCatalog_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "cd9b6cdf-dcf0-4dca-ab19-82be07b74704";
            string resourceGroupName = "MyResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PlanetaryComputerGeoCatalogResource
            PlanetaryComputerGeoCatalogCollection collection = resourceGroupResource.GetPlanetaryComputerGeoCatalogs();

            // invoke the operation
            string catalogName = "MyCatalog";
            bool result = await collection.ExistsAsync(catalogName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GeoCatalogsGet()
        {
            // Generated from example definition: 2025-02-11-preview/GeoCatalogs_Get.json
            // this example is just showing the usage of "GeoCatalog_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "cd9b6cdf-dcf0-4dca-ab19-82be07b74704";
            string resourceGroupName = "MyResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PlanetaryComputerGeoCatalogResource
            PlanetaryComputerGeoCatalogCollection collection = resourceGroupResource.GetPlanetaryComputerGeoCatalogs();

            // invoke the operation
            string catalogName = "MyCatalog";
            NullableResponse<PlanetaryComputerGeoCatalogResource> response = await collection.GetIfExistsAsync(catalogName);
            PlanetaryComputerGeoCatalogResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PlanetaryComputerGeoCatalogData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
