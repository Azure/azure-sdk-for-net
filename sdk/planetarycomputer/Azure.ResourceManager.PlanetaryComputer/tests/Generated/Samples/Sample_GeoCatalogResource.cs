// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.PlanetaryComputer.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.PlanetaryComputer.Samples
{
    public partial class Sample_GeoCatalogResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GeoCatalogsGet()
        {
            // Generated from example definition: 2025-02-11-preview/GeoCatalogs_Get.json
            // this example is just showing the usage of "GeoCatalog_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GeoCatalogResource created on azure
            // for more information of creating GeoCatalogResource, please refer to the document of GeoCatalogResource
            string subscriptionId = "cd9b6cdf-dcf0-4dca-ab19-82be07b74704";
            string resourceGroupName = "MyResourceGroup";
            string catalogName = "MyCatalog";
            ResourceIdentifier geoCatalogResourceId = GeoCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, catalogName);
            GeoCatalogResource geoCatalog = client.GetGeoCatalogResource(geoCatalogResourceId);

            // invoke the operation
            GeoCatalogResource result = await geoCatalog.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            GeoCatalogData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_GeoCatalogsDelete()
        {
            // Generated from example definition: 2025-02-11-preview/GeoCatalogs_Delete.json
            // this example is just showing the usage of "GeoCatalog_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GeoCatalogResource created on azure
            // for more information of creating GeoCatalogResource, please refer to the document of GeoCatalogResource
            string subscriptionId = "cd9b6cdf-dcf0-4dca-ab19-82be07b74704";
            string resourceGroupName = "MyResourceGroup";
            string catalogName = "MyCatalog";
            ResourceIdentifier geoCatalogResourceId = GeoCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, catalogName);
            GeoCatalogResource geoCatalog = client.GetGeoCatalogResource(geoCatalogResourceId);

            // invoke the operation
            await geoCatalog.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_GeoCatalogsUpdate()
        {
            // Generated from example definition: 2025-02-11-preview/GeoCatalogs_Update.json
            // this example is just showing the usage of "GeoCatalog_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GeoCatalogResource created on azure
            // for more information of creating GeoCatalogResource, please refer to the document of GeoCatalogResource
            string subscriptionId = "cd9b6cdf-dcf0-4dca-ab19-82be07b74704";
            string resourceGroupName = "MyResourceGroup";
            string catalogName = "MyCatalog";
            ResourceIdentifier geoCatalogResourceId = GeoCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, catalogName);
            GeoCatalogResource geoCatalog = client.GetGeoCatalogResource(geoCatalogResourceId);

            // invoke the operation
            GeoCatalogPatch patch = new GeoCatalogPatch
            {
                Tags =
{
["MyTag"] = "MyValue"
},
                Identity = new ManagedServiceIdentityUpdate
                {
                    Type = Models.ManagedServiceIdentityType.UserAssigned,
                    UserAssignedIdentities =
{
["/subscriptions/cd9b6cdf-dcf0-4dca-ab19-82be07b74704/resourceGroups/MyResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/MyManagedIdentity"] = new UserAssignedIdentity()
},
                },
            };
            ArmOperation<GeoCatalogResource> lro = await geoCatalog.UpdateAsync(WaitUntil.Completed, patch);
            GeoCatalogResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            GeoCatalogData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
