// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.PlanetaryComputer
{
    /// <summary>
    /// A class representing a collection of <see cref="PlanetaryComputerGeoCatalogResource"/> and their operations.
    /// Each <see cref="PlanetaryComputerGeoCatalogResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="PlanetaryComputerGeoCatalogCollection"/> instance call the GetPlanetaryComputerGeoCatalogs method from an instance of the parent resource.
    /// </summary>
    public partial class PlanetaryComputerGeoCatalogCollection : ArmCollection, IEnumerable<PlanetaryComputerGeoCatalogResource>, IAsyncEnumerable<PlanetaryComputerGeoCatalogResource>
    {
        private readonly ClientDiagnostics _geoCatalogsClientDiagnostics;
        private readonly GeoCatalogs _geoCatalogsRestClient;

        /// <summary> Initializes a new instance of PlanetaryComputerGeoCatalogCollection for mocking. </summary>
        protected PlanetaryComputerGeoCatalogCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="PlanetaryComputerGeoCatalogCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal PlanetaryComputerGeoCatalogCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(PlanetaryComputerGeoCatalogResource.ResourceType, out string planetaryComputerGeoCatalogApiVersion);
            _geoCatalogsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.PlanetaryComputer", PlanetaryComputerGeoCatalogResource.ResourceType.Namespace, Diagnostics);
            _geoCatalogsRestClient = new GeoCatalogs(_geoCatalogsClientDiagnostics, Pipeline, Endpoint, planetaryComputerGeoCatalogApiVersion ?? "2025-02-11-preview");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), id);
            }
        }

        /// <summary> Create a GeoCatalog. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="catalogName"> The name of the catalog. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ArmOperation<PlanetaryComputerGeoCatalogResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string catalogName, PlanetaryComputerGeoCatalogData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _geoCatalogsClientDiagnostics.CreateScope("PlanetaryComputerGeoCatalogCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _geoCatalogsRestClient.CreateCreateRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, catalogName, PlanetaryComputerGeoCatalogData.ToRequestContent(data), context);
                Response response = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                PlanetaryComputerArmOperation<PlanetaryComputerGeoCatalogResource> operation = new PlanetaryComputerArmOperation<PlanetaryComputerGeoCatalogResource>(
                    new PlanetaryComputerGeoCatalogOperationSource(Client),
                    _geoCatalogsClientDiagnostics,
                    Pipeline,
                    message.Request,
                    response,
                    OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                {
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a GeoCatalog. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="catalogName"> The name of the catalog. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ArmOperation<PlanetaryComputerGeoCatalogResource> CreateOrUpdate(WaitUntil waitUntil, string catalogName, PlanetaryComputerGeoCatalogData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _geoCatalogsClientDiagnostics.CreateScope("PlanetaryComputerGeoCatalogCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _geoCatalogsRestClient.CreateCreateRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, catalogName, PlanetaryComputerGeoCatalogData.ToRequestContent(data), context);
                Response response = Pipeline.ProcessMessage(message, context);
                PlanetaryComputerArmOperation<PlanetaryComputerGeoCatalogResource> operation = new PlanetaryComputerArmOperation<PlanetaryComputerGeoCatalogResource>(
                    new PlanetaryComputerGeoCatalogOperationSource(Client),
                    _geoCatalogsClientDiagnostics,
                    Pipeline,
                    message.Request,
                    response,
                    OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                {
                    operation.WaitForCompletion(cancellationToken);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a GeoCatalog. </summary>
        /// <param name="catalogName"> The name of the catalog. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<PlanetaryComputerGeoCatalogResource>> GetAsync(string catalogName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));

            using DiagnosticScope scope = _geoCatalogsClientDiagnostics.CreateScope("PlanetaryComputerGeoCatalogCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _geoCatalogsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, catalogName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<PlanetaryComputerGeoCatalogData> response = Response.FromValue(PlanetaryComputerGeoCatalogData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new PlanetaryComputerGeoCatalogResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a GeoCatalog. </summary>
        /// <param name="catalogName"> The name of the catalog. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<PlanetaryComputerGeoCatalogResource> Get(string catalogName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));

            using DiagnosticScope scope = _geoCatalogsClientDiagnostics.CreateScope("PlanetaryComputerGeoCatalogCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _geoCatalogsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, catalogName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<PlanetaryComputerGeoCatalogData> response = Response.FromValue(PlanetaryComputerGeoCatalogData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new PlanetaryComputerGeoCatalogResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List GeoCatalog resources by resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PlanetaryComputerGeoCatalogResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PlanetaryComputerGeoCatalogResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<PlanetaryComputerGeoCatalogData, PlanetaryComputerGeoCatalogResource>(new GeoCatalogsGetByResourceGroupAsyncCollectionResultOfT(_geoCatalogsRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, context), data => new PlanetaryComputerGeoCatalogResource(Client, data));
        }

        /// <summary> List GeoCatalog resources by resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PlanetaryComputerGeoCatalogResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PlanetaryComputerGeoCatalogResource> GetAll(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<PlanetaryComputerGeoCatalogData, PlanetaryComputerGeoCatalogResource>(new GeoCatalogsGetByResourceGroupCollectionResultOfT(_geoCatalogsRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, context), data => new PlanetaryComputerGeoCatalogResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="catalogName"> The name of the catalog. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string catalogName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));

            using DiagnosticScope scope = _geoCatalogsClientDiagnostics.CreateScope("PlanetaryComputerGeoCatalogCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _geoCatalogsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, catalogName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<PlanetaryComputerGeoCatalogData> response = Response.FromValue(PlanetaryComputerGeoCatalogData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="catalogName"> The name of the catalog. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string catalogName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));

            using DiagnosticScope scope = _geoCatalogsClientDiagnostics.CreateScope("PlanetaryComputerGeoCatalogCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _geoCatalogsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, catalogName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<PlanetaryComputerGeoCatalogData> response = Response.FromValue(PlanetaryComputerGeoCatalogData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="catalogName"> The name of the catalog. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<PlanetaryComputerGeoCatalogResource>> GetIfExistsAsync(string catalogName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));

            using DiagnosticScope scope = _geoCatalogsClientDiagnostics.CreateScope("PlanetaryComputerGeoCatalogCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _geoCatalogsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, catalogName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<PlanetaryComputerGeoCatalogData> response = Response.FromValue(PlanetaryComputerGeoCatalogData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<PlanetaryComputerGeoCatalogResource>(response.GetRawResponse());
                }
                return Response.FromValue(new PlanetaryComputerGeoCatalogResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="catalogName"> The name of the catalog. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<PlanetaryComputerGeoCatalogResource> GetIfExists(string catalogName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogName, nameof(catalogName));

            using DiagnosticScope scope = _geoCatalogsClientDiagnostics.CreateScope("PlanetaryComputerGeoCatalogCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _geoCatalogsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, catalogName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<PlanetaryComputerGeoCatalogData> response = Response.FromValue(PlanetaryComputerGeoCatalogData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<PlanetaryComputerGeoCatalogResource>(response.GetRawResponse());
                }
                return Response.FromValue(new PlanetaryComputerGeoCatalogResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PlanetaryComputerGeoCatalogResource> IEnumerable<PlanetaryComputerGeoCatalogResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<PlanetaryComputerGeoCatalogResource> IAsyncEnumerable<PlanetaryComputerGeoCatalogResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
