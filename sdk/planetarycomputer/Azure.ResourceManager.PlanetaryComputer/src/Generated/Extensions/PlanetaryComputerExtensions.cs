// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.PlanetaryComputer.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.PlanetaryComputer
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.PlanetaryComputer. </summary>
    public static partial class PlanetaryComputerExtensions
    {
        /// <param name="client"></param>
        private static MockablePlanetaryComputerArmClient GetMockablePlanetaryComputerArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockablePlanetaryComputerArmClient(client0, ResourceIdentifier.Root));
        }

        /// <param name="resourceGroupResource"></param>
        private static MockablePlanetaryComputerResourceGroupResource GetMockablePlanetaryComputerResourceGroupResource(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient(client => new MockablePlanetaryComputerResourceGroupResource(client, resourceGroupResource.Id));
        }

        /// <param name="subscriptionResource"></param>
        private static MockablePlanetaryComputerSubscriptionResource GetMockablePlanetaryComputerSubscriptionResource(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient(client => new MockablePlanetaryComputerSubscriptionResource(client, subscriptionResource.Id));
        }

        /// <summary> Gets an object representing a <see cref="PlanetaryComputerGeoCatalogResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="PlanetaryComputerGeoCatalogResource"/> object. </returns>
        public static PlanetaryComputerGeoCatalogResource GetPlanetaryComputerGeoCatalogResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockablePlanetaryComputerArmClient(client).GetPlanetaryComputerGeoCatalogResource(id);
        }

        /// <summary> Gets a collection of PlanetaryComputerGeoCatalogs in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of PlanetaryComputerGeoCatalogs and their operations over a PlanetaryComputerGeoCatalogResource. </returns>
        public static PlanetaryComputerGeoCatalogCollection GetPlanetaryComputerGeoCatalogs(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockablePlanetaryComputerResourceGroupResource(resourceGroupResource).GetPlanetaryComputerGeoCatalogs();
        }

        /// <summary> Get a GeoCatalog. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="catalogName"> The name of the catalog. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<PlanetaryComputerGeoCatalogResource>> GetPlanetaryComputerGeoCatalogAsync(this ResourceGroupResource resourceGroupResource, string catalogName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockablePlanetaryComputerResourceGroupResource(resourceGroupResource).GetPlanetaryComputerGeoCatalogAsync(catalogName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a GeoCatalog. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="catalogName"> The name of the catalog. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<PlanetaryComputerGeoCatalogResource> GetPlanetaryComputerGeoCatalog(this ResourceGroupResource resourceGroupResource, string catalogName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockablePlanetaryComputerResourceGroupResource(resourceGroupResource).GetPlanetaryComputerGeoCatalog(catalogName, cancellationToken);
        }

        /// <summary> List GeoCatalog resources by subscription ID. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="PlanetaryComputerGeoCatalogResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PlanetaryComputerGeoCatalogResource> GetPlanetaryComputerGeoCatalogsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlanetaryComputerSubscriptionResource(subscriptionResource).GetPlanetaryComputerGeoCatalogsAsync(cancellationToken);
        }

        /// <summary> List GeoCatalog resources by subscription ID. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="PlanetaryComputerGeoCatalogResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PlanetaryComputerGeoCatalogResource> GetPlanetaryComputerGeoCatalogs(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlanetaryComputerSubscriptionResource(subscriptionResource).GetPlanetaryComputerGeoCatalogs(cancellationToken);
        }
    }
}
