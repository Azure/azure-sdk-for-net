// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.PlanetaryComputer;

namespace Azure.ResourceManager.PlanetaryComputer.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class ArmPlanetaryComputerModelFactory
    {
        /// <summary> A Microsoft Planetary Computer Pro GeoCatalog resource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="PlanetaryComputer.PlanetaryComputerGeoCatalogData"/> instance for mocking. </returns>
        public static PlanetaryComputerGeoCatalogData PlanetaryComputerGeoCatalogData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, PlanetaryComputerGeoCatalogProperties properties = default, ManagedServiceIdentity identity = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new PlanetaryComputerGeoCatalogData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                identity);
        }

        /// <summary> The details of the Microsoft Planetary Computer Pro GeoCatalog. </summary>
        /// <param name="tier"> Tier of the catalog. This cannot be changed after the catalog is created. If not provided, defaults to Basic. </param>
        /// <param name="catalogUri"> The URI of the catalog management UI. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="autoGeneratedDomainNameLabelScope"> The scope of the auto-generated domain name label. If not provided, defaults to TenantReuse. </param>
        /// <returns> A new <see cref="Models.PlanetaryComputerGeoCatalogProperties"/> instance for mocking. </returns>
        public static PlanetaryComputerGeoCatalogProperties PlanetaryComputerGeoCatalogProperties(PlanetaryComputerGeoCatalogTier? tier = default, Uri catalogUri = default, PlanetaryComputerProvisioningState? provisioningState = default, AutoGeneratedDomainNameLabelScope? autoGeneratedDomainNameLabelScope = default)
        {
            return new PlanetaryComputerGeoCatalogProperties(tier, catalogUri, provisioningState, autoGeneratedDomainNameLabelScope, additionalBinaryDataProperties: null);
        }

        /// <summary> The properties of a GeoCatalog that can be updated. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="identity"> The managed service identity properties to update. </param>
        /// <returns> A new <see cref="Models.PlanetaryComputerGeoCatalogPatch"/> instance for mocking. </returns>
        public static PlanetaryComputerGeoCatalogPatch PlanetaryComputerGeoCatalogPatch(IDictionary<string, string> tags = default, ManagedServiceIdentity identity = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new PlanetaryComputerGeoCatalogPatch(tags, identity, additionalBinaryDataProperties: null);
        }
    }
}
