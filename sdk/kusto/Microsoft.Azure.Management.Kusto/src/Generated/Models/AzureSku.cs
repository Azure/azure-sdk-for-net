// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Kusto.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Azure SKU definition.
    /// </summary>
    public partial class AzureSku
    {
        /// <summary>
        /// Initializes a new instance of the AzureSku class.
        /// </summary>
        public AzureSku()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureSku class.
        /// </summary>
        /// <param name="name">SKU name. Possible values include:
        /// 'Standard_DS13_v2+1TB_PS', 'Standard_DS13_v2+2TB_PS',
        /// 'Standard_DS14_v2+3TB_PS', 'Standard_DS14_v2+4TB_PS',
        /// 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_L8s',
        /// 'Standard_L16s', 'Standard_L8s_v2', 'Standard_L16s_v2',
        /// 'Standard_D11_v2', 'Standard_D12_v2', 'Standard_L4s', 'Dev(No
        /// SLA)_Standard_D11_v2', 'Standard_E64i_v3', 'Standard_E80ids_v4',
        /// 'Standard_E2a_v4', 'Standard_E4a_v4', 'Standard_E8a_v4',
        /// 'Standard_E16a_v4', 'Standard_E8as_v4+1TB_PS',
        /// 'Standard_E8as_v4+2TB_PS', 'Standard_E16as_v4+3TB_PS',
        /// 'Standard_E16as_v4+4TB_PS', 'Dev(No SLA)_Standard_E2a_v4'</param>
        /// <param name="tier">SKU tier. Possible values include: 'Basic',
        /// 'Standard'</param>
        /// <param name="capacity">The number of instances of the
        /// cluster.</param>
        public AzureSku(string name, string tier, int? capacity = default(int?))
        {
            Name = name;
            Capacity = capacity;
            Tier = tier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets SKU name. Possible values include:
        /// 'Standard_DS13_v2+1TB_PS', 'Standard_DS13_v2+2TB_PS',
        /// 'Standard_DS14_v2+3TB_PS', 'Standard_DS14_v2+4TB_PS',
        /// 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_L8s',
        /// 'Standard_L16s', 'Standard_L8s_v2', 'Standard_L16s_v2',
        /// 'Standard_D11_v2', 'Standard_D12_v2', 'Standard_L4s', 'Dev(No
        /// SLA)_Standard_D11_v2', 'Standard_E64i_v3', 'Standard_E80ids_v4',
        /// 'Standard_E2a_v4', 'Standard_E4a_v4', 'Standard_E8a_v4',
        /// 'Standard_E16a_v4', 'Standard_E8as_v4+1TB_PS',
        /// 'Standard_E8as_v4+2TB_PS', 'Standard_E16as_v4+3TB_PS',
        /// 'Standard_E16as_v4+4TB_PS', 'Dev(No SLA)_Standard_E2a_v4'
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the number of instances of the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "capacity")]
        public int? Capacity { get; set; }

        /// <summary>
        /// Gets or sets SKU tier. Possible values include: 'Basic', 'Standard'
        /// </summary>
        [JsonProperty(PropertyName = "tier")]
        public string Tier { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Tier == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Tier");
            }
        }
    }
}
