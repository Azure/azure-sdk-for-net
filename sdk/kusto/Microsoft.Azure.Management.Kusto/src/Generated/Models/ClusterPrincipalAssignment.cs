// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Kusto.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Class representing a cluster principal assignment.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ClusterPrincipalAssignment : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ClusterPrincipalAssignment class.
        /// </summary>
        public ClusterPrincipalAssignment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterPrincipalAssignment class.
        /// </summary>
        /// <param name="principalId">The principal ID assigned to the cluster
        /// principal. It can be a user email, application ID, or security
        /// group name.</param>
        /// <param name="role">Cluster principal role. Possible values include:
        /// 'AllDatabasesAdmin', 'AllDatabasesViewer'</param>
        /// <param name="principalType">Principal type. Possible values
        /// include: 'App', 'Group', 'User'</param>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="tenantId">The tenant id of the principal</param>
        /// <param name="tenantName">The tenant name of the principal</param>
        /// <param name="principalName">The principal name</param>
        /// <param name="provisioningState">The provisioned state of the
        /// resource. Possible values include: 'Running', 'Creating',
        /// 'Deleting', 'Succeeded', 'Failed', 'Moving'</param>
        public ClusterPrincipalAssignment(string principalId, string role, string principalType, string id = default(string), string name = default(string), string type = default(string), string tenantId = default(string), string tenantName = default(string), string principalName = default(string), string provisioningState = default(string))
            : base(id, name, type)
        {
            PrincipalId = principalId;
            Role = role;
            TenantId = tenantId;
            PrincipalType = principalType;
            TenantName = tenantName;
            PrincipalName = principalName;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the principal ID assigned to the cluster principal. It
        /// can be a user email, application ID, or security group name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.principalId")]
        public string PrincipalId { get; set; }

        /// <summary>
        /// Gets or sets cluster principal role. Possible values include:
        /// 'AllDatabasesAdmin', 'AllDatabasesViewer'
        /// </summary>
        [JsonProperty(PropertyName = "properties.role")]
        public string Role { get; set; }

        /// <summary>
        /// Gets or sets the tenant id of the principal
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or sets principal type. Possible values include: 'App',
        /// 'Group', 'User'
        /// </summary>
        [JsonProperty(PropertyName = "properties.principalType")]
        public string PrincipalType { get; set; }

        /// <summary>
        /// Gets the tenant name of the principal
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantName")]
        public string TenantName { get; private set; }

        /// <summary>
        /// Gets the principal name
        /// </summary>
        [JsonProperty(PropertyName = "properties.principalName")]
        public string PrincipalName { get; private set; }

        /// <summary>
        /// Gets the provisioned state of the resource. Possible values
        /// include: 'Running', 'Creating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Moving'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PrincipalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrincipalId");
            }
            if (Role == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Role");
            }
            if (PrincipalType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrincipalType");
            }
        }
    }
}
