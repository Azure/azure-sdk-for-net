// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Kusto.Models;

namespace Azure.ResourceManager.Kusto
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _clusterClientDiagnostics;
        private ClustersRestOperations _clusterRestClient;
        private ClientDiagnostics _operationsResultsClientDiagnostics;
        private OperationsResultsRestOperations _operationsResultsRestClient;
        private ClientDiagnostics _operationsResultsLocationClientDiagnostics;
        private OperationsResultsLocationRestOperations _operationsResultsLocationRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ClusterClientDiagnostics => _clusterClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Kusto", ClusterResource.ResourceType.Namespace, Diagnostics);
        private ClustersRestOperations ClusterRestClient => _clusterRestClient ??= new ClustersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ClusterResource.ResourceType));
        private ClientDiagnostics OperationsResultsClientDiagnostics => _operationsResultsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Kusto", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private OperationsResultsRestOperations OperationsResultsRestClient => _operationsResultsRestClient ??= new OperationsResultsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics OperationsResultsLocationClientDiagnostics => _operationsResultsLocationClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Kusto", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private OperationsResultsLocationRestOperations OperationsResultsLocationRestClient => _operationsResultsLocationRestClient ??= new OperationsResultsLocationRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Lists all Kusto clusters within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Kusto/clusters
        /// Operation Id: Clusters_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ClusterResource> GetClustersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ClusterResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ClusterClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetClusters");
                scope.Start();
                try
                {
                    var response = await ClusterRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ClusterResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists all Kusto clusters within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Kusto/clusters
        /// Operation Id: Clusters_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ClusterResource> GetClusters(CancellationToken cancellationToken = default)
        {
            Page<ClusterResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ClusterClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetClusters");
                scope.Start();
                try
                {
                    var response = ClusterRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ClusterResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists eligible SKUs for Kusto resource provider.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Kusto/skus
        /// Operation Id: Clusters_ListSkus
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SkuDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SkuDescription> GetSkusClustersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SkuDescription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ClusterClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSkusClusters");
                scope.Start();
                try
                {
                    var response = await ClusterRestClient.ListSkusAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists eligible SKUs for Kusto resource provider.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Kusto/skus
        /// Operation Id: Clusters_ListSkus
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SkuDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SkuDescription> GetSkusClusters(CancellationToken cancellationToken = default)
        {
            Page<SkuDescription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ClusterClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSkusClusters");
                scope.Start();
                try
                {
                    var response = ClusterRestClient.ListSkus(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks that the cluster name is valid and is not already in use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/checkNameAvailability
        /// Operation Id: Clusters_CheckNameAvailability
        /// </summary>
        /// <param name="location"> Azure location (region) name. </param>
        /// <param name="content"> The name of the cluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CheckNameResult>> CheckNameAvailabilityClusterAsync(AzureLocation location, ClusterCheckNameContent content, CancellationToken cancellationToken = default)
        {
            using var scope = ClusterClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityCluster");
            scope.Start();
            try
            {
                var response = await ClusterRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, location, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks that the cluster name is valid and is not already in use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/checkNameAvailability
        /// Operation Id: Clusters_CheckNameAvailability
        /// </summary>
        /// <param name="location"> Azure location (region) name. </param>
        /// <param name="content"> The name of the cluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CheckNameResult> CheckNameAvailabilityCluster(AzureLocation location, ClusterCheckNameContent content, CancellationToken cancellationToken = default)
        {
            using var scope = ClusterClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityCluster");
            scope.Start();
            try
            {
                var response = ClusterRestClient.CheckNameAvailability(Id.SubscriptionId, location, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns operation results.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/operationResults/{operationId}
        /// Operation Id: OperationsResults_Get
        /// </summary>
        /// <param name="location"> Azure location (region) name. </param>
        /// <param name="operationId"> The Guid of the operation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<OperationResult>> GetOperationsResultAsync(AzureLocation location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = OperationsResultsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationsResult");
            scope.Start();
            try
            {
                var response = await OperationsResultsRestClient.GetAsync(Id.SubscriptionId, location, operationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns operation results.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/operationResults/{operationId}
        /// Operation Id: OperationsResults_Get
        /// </summary>
        /// <param name="location"> Azure location (region) name. </param>
        /// <param name="operationId"> The Guid of the operation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OperationResult> GetOperationsResult(AzureLocation location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = OperationsResultsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationsResult");
            scope.Start();
            try
            {
                var response = OperationsResultsRestClient.Get(Id.SubscriptionId, location, operationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns operation results.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/operationResults/{operationId}
        /// Operation Id: OperationsResultsLocation_Get
        /// </summary>
        /// <param name="location"> Azure location (region) name. </param>
        /// <param name="operationId"> The Guid of the operation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetOperationsResultsLocationAsync(AzureLocation location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = OperationsResultsLocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationsResultsLocation");
            scope.Start();
            try
            {
                var response = await OperationsResultsLocationRestClient.GetAsync(Id.SubscriptionId, location, operationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns operation results.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/operationResults/{operationId}
        /// Operation Id: OperationsResultsLocation_Get
        /// </summary>
        /// <param name="location"> Azure location (region) name. </param>
        /// <param name="operationId"> The Guid of the operation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetOperationsResultsLocation(AzureLocation location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = OperationsResultsLocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationsResultsLocation");
            scope.Start();
            try
            {
                var response = OperationsResultsLocationRestClient.Get(Id.SubscriptionId, location, operationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
