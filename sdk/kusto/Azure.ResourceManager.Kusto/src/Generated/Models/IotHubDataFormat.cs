// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Kusto.Models
{
    /// <summary> The data format of the message. Optionally the data format can be added to each message. </summary>
    public readonly partial struct IotHubDataFormat : IEquatable<IotHubDataFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IotHubDataFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IotHubDataFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MultijsonValue = "MULTIJSON";
        private const string JsonValue = "JSON";
        private const string CSVValue = "CSV";
        private const string TSVValue = "TSV";
        private const string ScsvValue = "SCSV";
        private const string SohsvValue = "SOHSV";
        private const string PSVValue = "PSV";
        private const string TXTValue = "TXT";
        private const string RAWValue = "RAW";
        private const string SinglejsonValue = "SINGLEJSON";
        private const string AvroValue = "AVRO";
        private const string TsveValue = "TSVE";
        private const string ParquetValue = "PARQUET";
        private const string ORCValue = "ORC";
        private const string ApacheAvroValue = "APACHEAVRO";
        private const string W3ClogfileValue = "W3CLOGFILE";

        /// <summary> MULTIJSON. </summary>
        public static IotHubDataFormat Multijson { get; } = new IotHubDataFormat(MultijsonValue);
        /// <summary> JSON. </summary>
        public static IotHubDataFormat Json { get; } = new IotHubDataFormat(JsonValue);
        /// <summary> CSV. </summary>
        public static IotHubDataFormat CSV { get; } = new IotHubDataFormat(CSVValue);
        /// <summary> TSV. </summary>
        public static IotHubDataFormat TSV { get; } = new IotHubDataFormat(TSVValue);
        /// <summary> SCSV. </summary>
        public static IotHubDataFormat Scsv { get; } = new IotHubDataFormat(ScsvValue);
        /// <summary> SOHSV. </summary>
        public static IotHubDataFormat Sohsv { get; } = new IotHubDataFormat(SohsvValue);
        /// <summary> PSV. </summary>
        public static IotHubDataFormat PSV { get; } = new IotHubDataFormat(PSVValue);
        /// <summary> TXT. </summary>
        public static IotHubDataFormat TXT { get; } = new IotHubDataFormat(TXTValue);
        /// <summary> RAW. </summary>
        public static IotHubDataFormat RAW { get; } = new IotHubDataFormat(RAWValue);
        /// <summary> SINGLEJSON. </summary>
        public static IotHubDataFormat Singlejson { get; } = new IotHubDataFormat(SinglejsonValue);
        /// <summary> AVRO. </summary>
        public static IotHubDataFormat Avro { get; } = new IotHubDataFormat(AvroValue);
        /// <summary> TSVE. </summary>
        public static IotHubDataFormat Tsve { get; } = new IotHubDataFormat(TsveValue);
        /// <summary> PARQUET. </summary>
        public static IotHubDataFormat Parquet { get; } = new IotHubDataFormat(ParquetValue);
        /// <summary> ORC. </summary>
        public static IotHubDataFormat ORC { get; } = new IotHubDataFormat(ORCValue);
        /// <summary> APACHEAVRO. </summary>
        public static IotHubDataFormat ApacheAvro { get; } = new IotHubDataFormat(ApacheAvroValue);
        /// <summary> W3CLOGFILE. </summary>
        public static IotHubDataFormat W3Clogfile { get; } = new IotHubDataFormat(W3ClogfileValue);
        /// <summary> Determines if two <see cref="IotHubDataFormat"/> values are the same. </summary>
        public static bool operator ==(IotHubDataFormat left, IotHubDataFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IotHubDataFormat"/> values are not the same. </summary>
        public static bool operator !=(IotHubDataFormat left, IotHubDataFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IotHubDataFormat"/>. </summary>
        public static implicit operator IotHubDataFormat(string value) => new IotHubDataFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IotHubDataFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IotHubDataFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
