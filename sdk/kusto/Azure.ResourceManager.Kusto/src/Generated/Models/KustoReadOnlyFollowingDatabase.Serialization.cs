// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Kusto.Models
{
    public partial class KustoReadOnlyFollowingDatabase : IUtf8JsonSerializable, IJsonModel<KustoReadOnlyFollowingDatabase>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<KustoReadOnlyFollowingDatabase>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<KustoReadOnlyFollowingDatabase>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KustoReadOnlyFollowingDatabase>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(KustoReadOnlyFollowingDatabase)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SoftDeletePeriod))
            {
                writer.WritePropertyName("softDeletePeriod"u8);
                writer.WriteStringValue(SoftDeletePeriod.Value, "P");
            }
            if (Optional.IsDefined(HotCachePeriod))
            {
                writer.WritePropertyName("hotCachePeriod"u8);
                writer.WriteStringValue(HotCachePeriod.Value, "P");
            }
            if (options.Format != "W" && Optional.IsDefined(Statistics))
            {
                writer.WritePropertyName("statistics"u8);
                writer.WriteObjectValue(Statistics, options);
            }
            if (options.Format != "W" && Optional.IsDefined(LeaderClusterResourceId))
            {
                writer.WritePropertyName("leaderClusterResourceId"u8);
                writer.WriteStringValue(LeaderClusterResourceId);
            }
            if (options.Format != "W" && Optional.IsDefined(AttachedDatabaseConfigurationName))
            {
                writer.WritePropertyName("attachedDatabaseConfigurationName"u8);
                writer.WriteStringValue(AttachedDatabaseConfigurationName);
            }
            if (options.Format != "W" && Optional.IsDefined(PrincipalsModificationKind))
            {
                writer.WritePropertyName("principalsModificationKind"u8);
                writer.WriteStringValue(PrincipalsModificationKind.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(TableLevelSharingProperties))
            {
                writer.WritePropertyName("tableLevelSharingProperties"u8);
                writer.WriteObjectValue(TableLevelSharingProperties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(OriginalDatabaseName))
            {
                writer.WritePropertyName("originalDatabaseName"u8);
                writer.WriteStringValue(OriginalDatabaseName);
            }
            if (options.Format != "W" && Optional.IsDefined(DatabaseShareOrigin))
            {
                writer.WritePropertyName("databaseShareOrigin"u8);
                writer.WriteStringValue(DatabaseShareOrigin.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SuspensionDetails))
            {
                writer.WritePropertyName("suspensionDetails"u8);
                writer.WriteObjectValue(SuspensionDetails, options);
            }
            writer.WriteEndObject();
        }

        KustoReadOnlyFollowingDatabase IJsonModel<KustoReadOnlyFollowingDatabase>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KustoReadOnlyFollowingDatabase>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(KustoReadOnlyFollowingDatabase)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeKustoReadOnlyFollowingDatabase(document.RootElement, options);
        }

        internal static KustoReadOnlyFollowingDatabase DeserializeKustoReadOnlyFollowingDatabase(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            AzureLocation? location = default;
            KustoKind kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            KustoProvisioningState? provisioningState = default;
            TimeSpan? softDeletePeriod = default;
            TimeSpan? hotCachePeriod = default;
            DatabaseStatistics statistics = default;
            string leaderClusterResourceId = default;
            string attachedDatabaseConfigurationName = default;
            KustoDatabasePrincipalsModificationKind? principalsModificationKind = default;
            KustoDatabaseTableLevelSharingProperties tableLevelSharingProperties = default;
            string originalDatabaseName = default;
            KustoDatabaseShareOrigin? databaseShareOrigin = default;
            SuspensionDetails suspensionDetails = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("location"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    kind = new KustoKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = ModelReaderWriter.Read<SystemData>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), ModelSerializationExtensions.WireOptions, AzureResourceManagerKustoContext.Default);
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new KustoProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("softDeletePeriod"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            softDeletePeriod = property0.Value.GetTimeSpan("P");
                            continue;
                        }
                        if (property0.NameEquals("hotCachePeriod"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            hotCachePeriod = property0.Value.GetTimeSpan("P");
                            continue;
                        }
                        if (property0.NameEquals("statistics"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            statistics = DatabaseStatistics.DeserializeDatabaseStatistics(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("leaderClusterResourceId"u8))
                        {
                            leaderClusterResourceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("attachedDatabaseConfigurationName"u8))
                        {
                            attachedDatabaseConfigurationName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("principalsModificationKind"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            principalsModificationKind = new KustoDatabasePrincipalsModificationKind(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("tableLevelSharingProperties"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            tableLevelSharingProperties = KustoDatabaseTableLevelSharingProperties.DeserializeKustoDatabaseTableLevelSharingProperties(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("originalDatabaseName"u8))
                        {
                            originalDatabaseName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("databaseShareOrigin"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            databaseShareOrigin = new KustoDatabaseShareOrigin(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("suspensionDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            suspensionDetails = SuspensionDetails.DeserializeSuspensionDetails(property0.Value, options);
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new KustoReadOnlyFollowingDatabase(
                id,
                name,
                type,
                systemData,
                location,
                kind,
                serializedAdditionalRawData,
                provisioningState,
                softDeletePeriod,
                hotCachePeriod,
                statistics,
                leaderClusterResourceId,
                attachedDatabaseConfigurationName,
                principalsModificationKind,
                tableLevelSharingProperties,
                originalDatabaseName,
                databaseShareOrigin,
                suspensionDetails);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Name), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  name: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Name))
                {
                    builder.Append("  name: ");
                    if (Name.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Name}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Name}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Location), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  location: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Location))
                {
                    builder.Append("  location: ");
                    builder.AppendLine($"'{Location.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Kind), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  kind: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                builder.Append("  kind: ");
                builder.AppendLine($"'{Kind.ToString()}'");
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Id), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  id: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Id))
                {
                    builder.Append("  id: ");
                    builder.AppendLine($"'{Id.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SystemData), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  systemData: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SystemData))
                {
                    builder.Append("  systemData: ");
                    builder.AppendLine($"'{SystemData.ToString()}'");
                }
            }

            builder.Append("  properties:");
            builder.AppendLine(" {");
            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ProvisioningState), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    provisioningState: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ProvisioningState))
                {
                    builder.Append("    provisioningState: ");
                    builder.AppendLine($"'{ProvisioningState.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SoftDeletePeriod), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    softDeletePeriod: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SoftDeletePeriod))
                {
                    builder.Append("    softDeletePeriod: ");
                    var formattedTimeSpan = TypeFormatters.ToString(SoftDeletePeriod.Value, "P");
                    builder.AppendLine($"'{formattedTimeSpan}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(HotCachePeriod), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    hotCachePeriod: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(HotCachePeriod))
                {
                    builder.Append("    hotCachePeriod: ");
                    var formattedTimeSpan = TypeFormatters.ToString(HotCachePeriod.Value, "P");
                    builder.AppendLine($"'{formattedTimeSpan}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue("StatisticsSize", out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    statistics: ");
                builder.AppendLine("{");
                builder.AppendLine("      statistics: {");
                builder.Append("        size: ");
                builder.AppendLine(propertyOverride);
                builder.AppendLine("      }");
                builder.AppendLine("    }");
            }
            else
            {
                if (Optional.IsDefined(Statistics))
                {
                    builder.Append("    statistics: ");
                    BicepSerializationHelpers.AppendChildObject(builder, Statistics, options, 4, false, "    statistics: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(LeaderClusterResourceId), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    leaderClusterResourceId: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(LeaderClusterResourceId))
                {
                    builder.Append("    leaderClusterResourceId: ");
                    if (LeaderClusterResourceId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{LeaderClusterResourceId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{LeaderClusterResourceId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AttachedDatabaseConfigurationName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    attachedDatabaseConfigurationName: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(AttachedDatabaseConfigurationName))
                {
                    builder.Append("    attachedDatabaseConfigurationName: ");
                    if (AttachedDatabaseConfigurationName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{AttachedDatabaseConfigurationName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{AttachedDatabaseConfigurationName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PrincipalsModificationKind), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    principalsModificationKind: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PrincipalsModificationKind))
                {
                    builder.Append("    principalsModificationKind: ");
                    builder.AppendLine($"'{PrincipalsModificationKind.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(TableLevelSharingProperties), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    tableLevelSharingProperties: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(TableLevelSharingProperties))
                {
                    builder.Append("    tableLevelSharingProperties: ");
                    BicepSerializationHelpers.AppendChildObject(builder, TableLevelSharingProperties, options, 4, false, "    tableLevelSharingProperties: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(OriginalDatabaseName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    originalDatabaseName: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(OriginalDatabaseName))
                {
                    builder.Append("    originalDatabaseName: ");
                    if (OriginalDatabaseName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{OriginalDatabaseName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{OriginalDatabaseName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DatabaseShareOrigin), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    databaseShareOrigin: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(DatabaseShareOrigin))
                {
                    builder.Append("    databaseShareOrigin: ");
                    builder.AppendLine($"'{DatabaseShareOrigin.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue("SuspensionStartOn", out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("    suspensionDetails: ");
                builder.AppendLine("{");
                builder.AppendLine("      suspensionDetails: {");
                builder.Append("        suspensionStartDate: ");
                builder.AppendLine(propertyOverride);
                builder.AppendLine("      }");
                builder.AppendLine("    }");
            }
            else
            {
                if (Optional.IsDefined(SuspensionDetails))
                {
                    builder.Append("    suspensionDetails: ");
                    BicepSerializationHelpers.AppendChildObject(builder, SuspensionDetails, options, 4, false, "    suspensionDetails: ");
                }
            }

            builder.AppendLine("  }");
            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        BinaryData IPersistableModel<KustoReadOnlyFollowingDatabase>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KustoReadOnlyFollowingDatabase>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerKustoContext.Default);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(KustoReadOnlyFollowingDatabase)} does not support writing '{options.Format}' format.");
            }
        }

        KustoReadOnlyFollowingDatabase IPersistableModel<KustoReadOnlyFollowingDatabase>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KustoReadOnlyFollowingDatabase>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeKustoReadOnlyFollowingDatabase(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(KustoReadOnlyFollowingDatabase)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<KustoReadOnlyFollowingDatabase>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
