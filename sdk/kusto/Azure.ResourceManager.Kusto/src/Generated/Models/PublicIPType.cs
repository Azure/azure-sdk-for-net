// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Kusto.Models
{
    /// <summary> Indicates what public IP type to create - IPv4 (default), or DualStack (both IPv4 and IPv6). </summary>
    public readonly partial struct PublicIPType : IEquatable<PublicIPType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PublicIPType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PublicIPType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IPv4Value = "IPv4";
        private const string DualStackValue = "DualStack";

        /// <summary> IPv4. </summary>
        public static PublicIPType IPv4 { get; } = new PublicIPType(IPv4Value);
        /// <summary> DualStack. </summary>
        public static PublicIPType DualStack { get; } = new PublicIPType(DualStackValue);
        /// <summary> Determines if two <see cref="PublicIPType"/> values are the same. </summary>
        public static bool operator ==(PublicIPType left, PublicIPType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PublicIPType"/> values are not the same. </summary>
        public static bool operator !=(PublicIPType left, PublicIPType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PublicIPType"/>. </summary>
        public static implicit operator PublicIPType(string value) => new PublicIPType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PublicIPType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PublicIPType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
