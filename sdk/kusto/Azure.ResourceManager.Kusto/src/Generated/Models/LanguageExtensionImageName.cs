// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Kusto.Models
{
    /// <summary> Language extension image name. </summary>
    public readonly partial struct LanguageExtensionImageName : IEquatable<LanguageExtensionImageName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LanguageExtensionImageName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LanguageExtensionImageName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RValue = "R";
        private const string Python365Value = "Python3_6_5";
        private const string Python3912Value = "Python3_9_12";
        private const string Python3912IncludeDeepLearningValue = "Python3_9_12IncludeDeepLearning";
        private const string Python3108Value = "Python3_10_8";

        /// <summary> R. </summary>
        public static LanguageExtensionImageName R { get; } = new LanguageExtensionImageName(RValue);
        /// <summary> Python3_6_5. </summary>
        public static LanguageExtensionImageName Python365 { get; } = new LanguageExtensionImageName(Python365Value);
        /// <summary> Python3_9_12. </summary>
        public static LanguageExtensionImageName Python3912 { get; } = new LanguageExtensionImageName(Python3912Value);
        /// <summary> Python3_9_12IncludeDeepLearning. </summary>
        public static LanguageExtensionImageName Python3912IncludeDeepLearning { get; } = new LanguageExtensionImageName(Python3912IncludeDeepLearningValue);
        /// <summary> Python3_10_8. </summary>
        public static LanguageExtensionImageName Python3108 { get; } = new LanguageExtensionImageName(Python3108Value);
        /// <summary> Determines if two <see cref="LanguageExtensionImageName"/> values are the same. </summary>
        public static bool operator ==(LanguageExtensionImageName left, LanguageExtensionImageName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LanguageExtensionImageName"/> values are not the same. </summary>
        public static bool operator !=(LanguageExtensionImageName left, LanguageExtensionImageName right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LanguageExtensionImageName"/>. </summary>
        public static implicit operator LanguageExtensionImageName(string value) => new LanguageExtensionImageName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LanguageExtensionImageName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LanguageExtensionImageName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
