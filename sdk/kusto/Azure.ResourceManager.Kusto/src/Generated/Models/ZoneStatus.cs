// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Kusto.Models
{
    /// <summary> Indicates whether the cluster is zonal or non-zonal. </summary>
    public readonly partial struct ZoneStatus : IEquatable<ZoneStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ZoneStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ZoneStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NonZonalValue = "NonZonal";
        private const string ZonalInconsistencyValue = "ZonalInconsistency";
        private const string ZonalValue = "Zonal";

        /// <summary> NonZonal. </summary>
        public static ZoneStatus NonZonal { get; } = new ZoneStatus(NonZonalValue);
        /// <summary> ZonalInconsistency. </summary>
        public static ZoneStatus ZonalInconsistency { get; } = new ZoneStatus(ZonalInconsistencyValue);
        /// <summary> Zonal. </summary>
        public static ZoneStatus Zonal { get; } = new ZoneStatus(ZonalValue);
        /// <summary> Determines if two <see cref="ZoneStatus"/> values are the same. </summary>
        public static bool operator ==(ZoneStatus left, ZoneStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ZoneStatus"/> values are not the same. </summary>
        public static bool operator !=(ZoneStatus left, ZoneStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ZoneStatus"/>. </summary>
        public static implicit operator ZoneStatus(string value) => new ZoneStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ZoneStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ZoneStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
