// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Kusto
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagedPrivateEndpointsOperations.
    /// </summary>
    public static partial class ManagedPrivateEndpointsOperationsExtensions
    {
            /// <summary>
            /// Checks that the managed private endpoints resource name is valid and is not
            /// already in use.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            public static CheckNameResult CheckNameAvailability(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, ManagedPrivateEndpointsCheckNameRequest resourceName)
            {
                return operations.CheckNameAvailabilityAsync(resourceGroupName, clusterName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks that the managed private endpoints resource name is valid and is not
            /// already in use.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameResult> CheckNameAvailabilityAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, ManagedPrivateEndpointsCheckNameRequest resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(resourceGroupName, clusterName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the list of managed private endpoints.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static IEnumerable<ManagedPrivateEndpoint> List(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName)
            {
                return operations.ListAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of managed private endpoints.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<ManagedPrivateEndpoint>> ListAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            public static ManagedPrivateEndpoint Get(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName)
            {
                return operations.GetAsync(resourceGroupName, clusterName, managedPrivateEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedPrivateEndpoint> GetAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, clusterName, managedPrivateEndpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='parameters'>
            /// The managed private endpoint parameters.
            /// </param>
            public static ManagedPrivateEndpoint CreateOrUpdate(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName, ManagedPrivateEndpoint parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, clusterName, managedPrivateEndpointName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='parameters'>
            /// The managed private endpoint parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedPrivateEndpoint> CreateOrUpdateAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName, ManagedPrivateEndpoint parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, managedPrivateEndpointName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='parameters'>
            /// The managed private endpoint parameters.
            /// </param>
            public static ManagedPrivateEndpoint Update(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName, ManagedPrivateEndpoint parameters)
            {
                return operations.UpdateAsync(resourceGroupName, clusterName, managedPrivateEndpointName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='parameters'>
            /// The managed private endpoint parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedPrivateEndpoint> UpdateAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName, ManagedPrivateEndpoint parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, clusterName, managedPrivateEndpointName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            public static void Delete(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName)
            {
                operations.DeleteAsync(resourceGroupName, clusterName, managedPrivateEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, clusterName, managedPrivateEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='parameters'>
            /// The managed private endpoint parameters.
            /// </param>
            public static ManagedPrivateEndpoint BeginCreateOrUpdate(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName, ManagedPrivateEndpoint parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, clusterName, managedPrivateEndpointName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='parameters'>
            /// The managed private endpoint parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedPrivateEndpoint> BeginCreateOrUpdateAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName, ManagedPrivateEndpoint parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, managedPrivateEndpointName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='parameters'>
            /// The managed private endpoint parameters.
            /// </param>
            public static ManagedPrivateEndpoint BeginUpdate(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName, ManagedPrivateEndpoint parameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, clusterName, managedPrivateEndpointName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='parameters'>
            /// The managed private endpoint parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedPrivateEndpoint> BeginUpdateAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName, ManagedPrivateEndpoint parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, managedPrivateEndpointName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            public static void BeginDelete(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName)
            {
                operations.BeginDeleteAsync(resourceGroupName, clusterName, managedPrivateEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a managed private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string clusterName, string managedPrivateEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, clusterName, managedPrivateEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
