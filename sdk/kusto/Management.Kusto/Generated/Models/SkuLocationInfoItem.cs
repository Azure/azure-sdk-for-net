// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Kusto.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The locations and zones info for SKU.
    /// </summary>
    public partial class SkuLocationInfoItem
    {
        /// <summary>
        /// Initializes a new instance of the SkuLocationInfoItem class.
        /// </summary>
        public SkuLocationInfoItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SkuLocationInfoItem class.
        /// </summary>
        /// <param name="location">The available location of the SKU.</param>
        /// <param name="zones">The available zone of the SKU.</param>
        public SkuLocationInfoItem(string location, IList<string> zones = default(IList<string>))
        {
            Location = location;
            Zones = zones;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the available location of the SKU.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the available zone of the SKU.
        /// </summary>
        [JsonProperty(PropertyName = "zones")]
        public IList<string> Zones { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
        }
    }
}
