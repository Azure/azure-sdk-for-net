// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Kusto
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ClustersOperations.
    /// </summary>
    public static partial class ClustersOperationsExtensions
    {
            /// <summary>
            /// Gets a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static Cluster Get(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                return operations.GetAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Cluster> GetAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto cluster parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the cluster. Omit this value to always overwrite the current
            /// cluster. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new cluster to be created, but to prevent updating an
            /// existing cluster. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            public static Cluster CreateOrUpdate(this IClustersOperations operations, string resourceGroupName, string clusterName, Cluster parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, clusterName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto cluster parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the cluster. Omit this value to always overwrite the current
            /// cluster. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new cluster to be created, but to prevent updating an
            /// existing cluster. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Cluster> CreateOrUpdateAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, Cluster parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto cluster parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the cluster. Omit this value to always overwrite the current
            /// cluster. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            public static Cluster Update(this IClustersOperations operations, string resourceGroupName, string clusterName, ClusterUpdate parameters, string ifMatch = default(string))
            {
                return operations.UpdateAsync(resourceGroupName, clusterName, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto cluster parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the cluster. Omit this value to always overwrite the current
            /// cluster. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Cluster> UpdateAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, ClusterUpdate parameters, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, clusterName, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static void Delete(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                operations.DeleteAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static void Stop(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                operations.StopAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Starts a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static void Start(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                operations.StartAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of databases that are owned by this cluster and were
            /// followed by another cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static IEnumerable<FollowerDatabaseDefinition> ListFollowerDatabases(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                return operations.ListFollowerDatabasesAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of databases that are owned by this cluster and were
            /// followed by another cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<FollowerDatabaseDefinition>> ListFollowerDatabasesAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFollowerDatabasesWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Detaches all followers of a database owned by this cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='followerDatabaseToRemove'>
            /// The follower databases properties to remove.
            /// </param>
            public static void DetachFollowerDatabases(this IClustersOperations operations, string resourceGroupName, string clusterName, FollowerDatabaseDefinition followerDatabaseToRemove)
            {
                operations.DetachFollowerDatabasesAsync(resourceGroupName, clusterName, followerDatabaseToRemove).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Detaches all followers of a database owned by this cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='followerDatabaseToRemove'>
            /// The follower databases properties to remove.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DetachFollowerDatabasesAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, FollowerDatabaseDefinition followerDatabaseToRemove, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DetachFollowerDatabasesWithHttpMessagesAsync(resourceGroupName, clusterName, followerDatabaseToRemove, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Diagnoses network connectivity status for external resources on which the
            /// service is dependent on.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static DiagnoseVirtualNetworkResult DiagnoseVirtualNetwork(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                return operations.DiagnoseVirtualNetworkAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Diagnoses network connectivity status for external resources on which the
            /// service is dependent on.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnoseVirtualNetworkResult> DiagnoseVirtualNetworkAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiagnoseVirtualNetworkWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all Kusto clusters within a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            public static IEnumerable<Cluster> ListByResourceGroup(this IClustersOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all Kusto clusters within a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Cluster>> ListByResourceGroupAsync(this IClustersOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all Kusto clusters within a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<Cluster> List(this IClustersOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all Kusto clusters within a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Cluster>> ListAsync(this IClustersOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists eligible SKUs for Kusto resource provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<SkuDescription> ListSkus(this IClustersOperations operations)
            {
                return operations.ListSkusAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists eligible SKUs for Kusto resource provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<SkuDescription>> ListSkusAsync(this IClustersOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSkusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks that the cluster name is valid and is not already in use.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Azure location (region) name.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            public static CheckNameResult CheckNameAvailability(this IClustersOperations operations, string location, ClusterCheckNameRequest clusterName)
            {
                return operations.CheckNameAvailabilityAsync(location, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks that the cluster name is valid and is not already in use.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Azure location (region) name.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameResult> CheckNameAvailabilityAsync(this IClustersOperations operations, string location, ClusterCheckNameRequest clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(location, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the SKUs available for the provided resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static IEnumerable<AzureResourceSku> ListSkusByResource(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                return operations.ListSkusByResourceAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the SKUs available for the provided resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<AzureResourceSku>> ListSkusByResourceAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSkusByResourceWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of language extensions that can run within KQL queries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static IEnumerable<LanguageExtension> ListLanguageExtensions(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                return operations.ListLanguageExtensionsAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of language extensions that can run within KQL queries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<LanguageExtension>> ListLanguageExtensionsAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListLanguageExtensionsWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a list of language extensions that can run within KQL queries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='languageExtensionsToAdd'>
            /// The language extensions to add.
            /// </param>
            public static void AddLanguageExtensions(this IClustersOperations operations, string resourceGroupName, string clusterName, LanguageExtensionsList languageExtensionsToAdd)
            {
                operations.AddLanguageExtensionsAsync(resourceGroupName, clusterName, languageExtensionsToAdd).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a list of language extensions that can run within KQL queries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='languageExtensionsToAdd'>
            /// The language extensions to add.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddLanguageExtensionsAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, LanguageExtensionsList languageExtensionsToAdd, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddLanguageExtensionsWithHttpMessagesAsync(resourceGroupName, clusterName, languageExtensionsToAdd, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove a list of language extensions that can run within KQL queries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='languageExtensionsToRemove'>
            /// The language extensions to remove.
            /// </param>
            public static void RemoveLanguageExtensions(this IClustersOperations operations, string resourceGroupName, string clusterName, LanguageExtensionsList languageExtensionsToRemove)
            {
                operations.RemoveLanguageExtensionsAsync(resourceGroupName, clusterName, languageExtensionsToRemove).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a list of language extensions that can run within KQL queries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='languageExtensionsToRemove'>
            /// The language extensions to remove.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveLanguageExtensionsAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, LanguageExtensionsList languageExtensionsToRemove, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveLanguageExtensionsWithHttpMessagesAsync(resourceGroupName, clusterName, languageExtensionsToRemove, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto cluster parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the cluster. Omit this value to always overwrite the current
            /// cluster. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new cluster to be created, but to prevent updating an
            /// existing cluster. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            public static Cluster BeginCreateOrUpdate(this IClustersOperations operations, string resourceGroupName, string clusterName, Cluster parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, clusterName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto cluster parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the cluster. Omit this value to always overwrite the current
            /// cluster. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new cluster to be created, but to prevent updating an
            /// existing cluster. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Cluster> BeginCreateOrUpdateAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, Cluster parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto cluster parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the cluster. Omit this value to always overwrite the current
            /// cluster. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            public static Cluster BeginUpdate(this IClustersOperations operations, string resourceGroupName, string clusterName, ClusterUpdate parameters, string ifMatch = default(string))
            {
                return operations.BeginUpdateAsync(resourceGroupName, clusterName, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto cluster parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the cluster. Omit this value to always overwrite the current
            /// cluster. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Cluster> BeginUpdateAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, ClusterUpdate parameters, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static void BeginDelete(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                operations.BeginDeleteAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static void BeginStop(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                operations.BeginStopAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Starts a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static void BeginStart(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                operations.BeginStartAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a Kusto cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Detaches all followers of a database owned by this cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='followerDatabaseToRemove'>
            /// The follower databases properties to remove.
            /// </param>
            public static void BeginDetachFollowerDatabases(this IClustersOperations operations, string resourceGroupName, string clusterName, FollowerDatabaseDefinition followerDatabaseToRemove)
            {
                operations.BeginDetachFollowerDatabasesAsync(resourceGroupName, clusterName, followerDatabaseToRemove).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Detaches all followers of a database owned by this cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='followerDatabaseToRemove'>
            /// The follower databases properties to remove.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDetachFollowerDatabasesAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, FollowerDatabaseDefinition followerDatabaseToRemove, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDetachFollowerDatabasesWithHttpMessagesAsync(resourceGroupName, clusterName, followerDatabaseToRemove, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Diagnoses network connectivity status for external resources on which the
            /// service is dependent on.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            public static DiagnoseVirtualNetworkResult BeginDiagnoseVirtualNetwork(this IClustersOperations operations, string resourceGroupName, string clusterName)
            {
                return operations.BeginDiagnoseVirtualNetworkAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Diagnoses network connectivity status for external resources on which the
            /// service is dependent on.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnoseVirtualNetworkResult> BeginDiagnoseVirtualNetworkAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDiagnoseVirtualNetworkWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a list of language extensions that can run within KQL queries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='languageExtensionsToAdd'>
            /// The language extensions to add.
            /// </param>
            public static void BeginAddLanguageExtensions(this IClustersOperations operations, string resourceGroupName, string clusterName, LanguageExtensionsList languageExtensionsToAdd)
            {
                operations.BeginAddLanguageExtensionsAsync(resourceGroupName, clusterName, languageExtensionsToAdd).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a list of language extensions that can run within KQL queries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='languageExtensionsToAdd'>
            /// The language extensions to add.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginAddLanguageExtensionsAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, LanguageExtensionsList languageExtensionsToAdd, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginAddLanguageExtensionsWithHttpMessagesAsync(resourceGroupName, clusterName, languageExtensionsToAdd, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove a list of language extensions that can run within KQL queries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='languageExtensionsToRemove'>
            /// The language extensions to remove.
            /// </param>
            public static void BeginRemoveLanguageExtensions(this IClustersOperations operations, string resourceGroupName, string clusterName, LanguageExtensionsList languageExtensionsToRemove)
            {
                operations.BeginRemoveLanguageExtensionsAsync(resourceGroupName, clusterName, languageExtensionsToRemove).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a list of language extensions that can run within KQL queries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the Kusto cluster.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the Kusto cluster.
            /// </param>
            /// <param name='languageExtensionsToRemove'>
            /// The language extensions to remove.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRemoveLanguageExtensionsAsync(this IClustersOperations operations, string resourceGroupName, string clusterName, LanguageExtensionsList languageExtensionsToRemove, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRemoveLanguageExtensionsWithHttpMessagesAsync(resourceGroupName, clusterName, languageExtensionsToRemove, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
