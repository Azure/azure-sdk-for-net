// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.NetworkFunction;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.NetworkFunction.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class NetworkFunctionModelFactory
    {
        /// <summary> Initializes a new instance of AzureTrafficCollectorData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="collectorPolicies"> Collector Policies for Azure Traffic Collector. </param>
        /// <param name="virtualHubId"> The virtualHub to which the Azure Traffic Collector belongs. </param>
        /// <param name="provisioningState"> The provisioning state of the application rule collection resource. </param>
        /// <returns> A new <see cref="NetworkFunction.AzureTrafficCollectorData"/> instance for mocking. </returns>
        public static AzureTrafficCollectorData AzureTrafficCollectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, IEnumerable<SubResource> collectorPolicies = null, ResourceIdentifier virtualHubId = null, CollectorProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            collectorPolicies ??= new List<SubResource>();

            return new AzureTrafficCollectorData(id, name, resourceType, systemData, tags, location, etag, collectorPolicies?.ToList(), virtualHubId != null ? ResourceManagerModelFactory.SubResource(virtualHubId) : null, provisioningState);
        }

        /// <summary> Initializes a new instance of CollectorPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="ingestionPolicy"> Ingestion policies. </param>
        /// <param name="emissionPolicies"> Emission policies. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <returns> A new <see cref="NetworkFunction.CollectorPolicyData"/> instance for mocking. </returns>
        public static CollectorPolicyData CollectorPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, IngestionPolicyPropertiesFormat ingestionPolicy = null, IEnumerable<EmissionPoliciesPropertiesFormat> emissionPolicies = null, CollectorProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            emissionPolicies ??= new List<EmissionPoliciesPropertiesFormat>();

            return new CollectorPolicyData(id, name, resourceType, systemData, tags, location, etag, ingestionPolicy, emissionPolicies?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of IngestionPolicyPropertiesFormat. </summary>
        /// <param name="ingestionType"> The ingestion type. </param>
        /// <param name="ingestionSources"> Ingestion Sources. </param>
        /// <returns> A new <see cref="Models.IngestionPolicyPropertiesFormat"/> instance for mocking. </returns>
        public static IngestionPolicyPropertiesFormat IngestionPolicyPropertiesFormat(IngestionType? ingestionType = null, IEnumerable<IngestionSourcesPropertiesFormat> ingestionSources = null)
        {
            ingestionSources ??= new List<IngestionSourcesPropertiesFormat>();

            return new IngestionPolicyPropertiesFormat(ingestionType, ingestionSources?.ToList());
        }

        /// <summary> Initializes a new instance of IngestionSourcesPropertiesFormat. </summary>
        /// <param name="sourceType"> Ingestion source type. </param>
        /// <param name="resourceId"> Resource ID. </param>
        /// <returns> A new <see cref="Models.IngestionSourcesPropertiesFormat"/> instance for mocking. </returns>
        public static IngestionSourcesPropertiesFormat IngestionSourcesPropertiesFormat(IngestionSourceType? sourceType = null, string resourceId = null)
        {
            return new IngestionSourcesPropertiesFormat(sourceType, resourceId);
        }

        /// <summary> Initializes a new instance of EmissionPoliciesPropertiesFormat. </summary>
        /// <param name="emissionType"> Emission format type. </param>
        /// <param name="emissionDestinations"> Emission policy destinations. </param>
        /// <returns> A new <see cref="Models.EmissionPoliciesPropertiesFormat"/> instance for mocking. </returns>
        public static EmissionPoliciesPropertiesFormat EmissionPoliciesPropertiesFormat(EmissionType? emissionType = null, IEnumerable<EmissionPolicyDestination> emissionDestinations = null)
        {
            emissionDestinations ??= new List<EmissionPolicyDestination>();

            return new EmissionPoliciesPropertiesFormat(emissionType, emissionDestinations?.ToList());
        }

        /// <summary> Initializes a new instance of EmissionPolicyDestination. </summary>
        /// <param name="destinationType"> Emission destination type. </param>
        /// <returns> A new <see cref="Models.EmissionPolicyDestination"/> instance for mocking. </returns>
        public static EmissionPolicyDestination EmissionPolicyDestination(EmissionDestinationType? destinationType = null)
        {
            return new EmissionPolicyDestination(destinationType);
        }
    }
}
