// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.NetworkFunction.Models;

namespace Azure.ResourceManager.NetworkFunction
{
    public partial class Sample_CollectorPolicyResource
    {
        // Get Collection Policy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetCollectionPolicy()
        {
            // Generated from example definition: specification/networkfunction/resource-manager/Microsoft.NetworkFunction/preview/2021-09-01-preview/examples/CollectorPolicyGet.json
            // this example is just showing the usage of "CollectorPolicies_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this CollectorPolicyResource created on azure
            // for more information of creating CollectorPolicyResource, please refer to the document of CollectorPolicyResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string azureTrafficCollectorName = "atc";
            string collectorPolicyName = "cp1";
            ResourceIdentifier collectorPolicyResourceId = CollectorPolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureTrafficCollectorName, collectorPolicyName);
            CollectorPolicyResource collectorPolicy = client.GetCollectorPolicyResource(collectorPolicyResourceId);

            // invoke the operation
            CollectorPolicyResource result = await collectorPolicy.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CollectorPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a collection policy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateACollectionPolicy()
        {
            // Generated from example definition: specification/networkfunction/resource-manager/Microsoft.NetworkFunction/preview/2021-09-01-preview/examples/CollectorPolicyCreate.json
            // this example is just showing the usage of "CollectorPolicies_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this CollectorPolicyResource created on azure
            // for more information of creating CollectorPolicyResource, please refer to the document of CollectorPolicyResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string azureTrafficCollectorName = "atc";
            string collectorPolicyName = "cp1";
            ResourceIdentifier collectorPolicyResourceId = CollectorPolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureTrafficCollectorName, collectorPolicyName);
            CollectorPolicyResource collectorPolicy = client.GetCollectorPolicyResource(collectorPolicyResourceId);

            // invoke the operation
            CollectorPolicyData data = new CollectorPolicyData()
            {
                IngestionPolicy = new IngestionPolicyPropertiesFormat()
                {
                    IngestionType = IngestionType.Ipfix,
                    IngestionSources =
{
new IngestionSourcesPropertiesFormat()
{
SourceType = IngestionSourceType.Resource,
ResourceId = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRouteCircuits/circuitName",
}
},
                },
                EmissionPolicies =
{
new EmissionPoliciesPropertiesFormat()
{
EmissionType = EmissionType.Ipfix,
EmissionDestinations =
{
new EmissionPolicyDestination()
{
DestinationType = EmissionDestinationType.AzureMonitor,
}
},
}
},
            };
            ArmOperation<CollectorPolicyResource> lro = await collectorPolicy.UpdateAsync(WaitUntil.Completed, data);
            CollectorPolicyResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CollectorPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete Collection Policy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteCollectionPolicy()
        {
            // Generated from example definition: specification/networkfunction/resource-manager/Microsoft.NetworkFunction/preview/2021-09-01-preview/examples/CollectorPolicyDelete.json
            // this example is just showing the usage of "CollectorPolicies_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this CollectorPolicyResource created on azure
            // for more information of creating CollectorPolicyResource, please refer to the document of CollectorPolicyResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string azureTrafficCollectorName = "atc";
            string collectorPolicyName = "cp1";
            ResourceIdentifier collectorPolicyResourceId = CollectorPolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureTrafficCollectorName, collectorPolicyName);
            CollectorPolicyResource collectorPolicy = client.GetCollectorPolicyResource(collectorPolicyResourceId);

            // invoke the operation
            await collectorPolicy.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
