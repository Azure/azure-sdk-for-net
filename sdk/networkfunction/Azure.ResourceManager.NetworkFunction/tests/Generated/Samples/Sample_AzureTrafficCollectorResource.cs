// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.NetworkFunction.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.NetworkFunction
{
    public partial class Sample_AzureTrafficCollectorResource
    {
        // List of Traffic Collectors by Subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAzureTrafficCollectors_ListOfTrafficCollectorsBySubscription()
        {
            // Generated from example definition: specification/networkfunction/resource-manager/Microsoft.NetworkFunction/preview/2021-09-01-preview/examples/AzureTrafficCollectorsBySubscriptionList.json
            // this example is just showing the usage of "AzureTrafficCollectorsBySubscription_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "subid";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (AzureTrafficCollectorResource item in subscriptionResource.GetAzureTrafficCollectorsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AzureTrafficCollectorData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get Traffic Collector
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetTrafficCollector()
        {
            // Generated from example definition: specification/networkfunction/resource-manager/Microsoft.NetworkFunction/preview/2021-09-01-preview/examples/AzureTrafficCollectorGet.json
            // this example is just showing the usage of "AzureTrafficCollectors_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AzureTrafficCollectorResource created on azure
            // for more information of creating AzureTrafficCollectorResource, please refer to the document of AzureTrafficCollectorResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string azureTrafficCollectorName = "atc";
            ResourceIdentifier azureTrafficCollectorResourceId = AzureTrafficCollectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureTrafficCollectorName);
            AzureTrafficCollectorResource azureTrafficCollector = client.GetAzureTrafficCollectorResource(azureTrafficCollectorResourceId);

            // invoke the operation
            AzureTrafficCollectorResource result = await azureTrafficCollector.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AzureTrafficCollectorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete Traffic Collector
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteTrafficCollector()
        {
            // Generated from example definition: specification/networkfunction/resource-manager/Microsoft.NetworkFunction/preview/2021-09-01-preview/examples/AzureTrafficCollectorDelete.json
            // this example is just showing the usage of "AzureTrafficCollectors_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AzureTrafficCollectorResource created on azure
            // for more information of creating AzureTrafficCollectorResource, please refer to the document of AzureTrafficCollectorResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string azureTrafficCollectorName = "atc";
            ResourceIdentifier azureTrafficCollectorResourceId = AzureTrafficCollectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureTrafficCollectorName);
            AzureTrafficCollectorResource azureTrafficCollector = client.GetAzureTrafficCollectorResource(azureTrafficCollectorResourceId);

            // invoke the operation
            await azureTrafficCollector.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Update Traffic Collector tags
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateTrafficCollectorTags()
        {
            // Generated from example definition: specification/networkfunction/resource-manager/Microsoft.NetworkFunction/preview/2021-09-01-preview/examples/AzureTrafficCollectorUpdateTags.json
            // this example is just showing the usage of "AzureTrafficCollectors_UpdateTags" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AzureTrafficCollectorResource created on azure
            // for more information of creating AzureTrafficCollectorResource, please refer to the document of AzureTrafficCollectorResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string azureTrafficCollectorName = "atc";
            ResourceIdentifier azureTrafficCollectorResourceId = AzureTrafficCollectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureTrafficCollectorName);
            AzureTrafficCollectorResource azureTrafficCollector = client.GetAzureTrafficCollectorResource(azureTrafficCollectorResourceId);

            // invoke the operation
            AzureTrafficCollectorPatch patch = new AzureTrafficCollectorPatch()
            {
                Tags =
{
["key1"] = "value1",
["key2"] = "value2",
},
            };
            AzureTrafficCollectorResource result = await azureTrafficCollector.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AzureTrafficCollectorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
