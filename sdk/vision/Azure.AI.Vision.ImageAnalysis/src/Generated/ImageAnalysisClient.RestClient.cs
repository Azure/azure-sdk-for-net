// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure;
using Azure.Core;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary></summary>
    public partial class ImageAnalysisClient
    {
        private static ResponseClassifier _pipelineMessageClassifier200;

        private static ResponseClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 = new StatusCodeClassifier(stackalloc ushort[] { 200 });

        internal HttpMessage CreateAnalyzeFromImageDataRequest(IEnumerable<VisualFeaturesImpl> visualFeatures, RequestContent content, string language, bool? genderNeutralCaption, IEnumerable<float> smartCropsAspectRatios, string modelVersion, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/computervision", false);
            uri.AppendPath("/imageanalysis:analyze", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (visualFeatures != null && !(visualFeatures is ChangeTrackingList<VisualFeaturesImpl> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("features", visualFeatures, ",", null, true);
            }
            if (language != null)
            {
                uri.AppendQuery("language", language, true);
            }
            if (genderNeutralCaption != null)
            {
                uri.AppendQuery("gender-neutral-caption", TypeFormatters.ConvertToString(genderNeutralCaption, null), true);
            }
            if (smartCropsAspectRatios != null && !(smartCropsAspectRatios is ChangeTrackingList<float> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                uri.AppendQueryDelimited("smartcrops-aspect-ratios", smartCropsAspectRatios, ",", null, true);
            }
            if (modelVersion != null)
            {
                uri.AppendQuery("model-version", modelVersion, true);
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Post;
            request.Headers.SetValue("Content-Type", "application/octet-stream");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAnalyzeFromUrlRequest(IEnumerable<VisualFeaturesImpl> visualFeatures, RequestContent content, string language, bool? genderNeutralCaption, IEnumerable<float> smartCropsAspectRatios, string modelVersion, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/computervision", false);
            uri.AppendPath("/imageanalysis:analyze", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (visualFeatures != null && !(visualFeatures is ChangeTrackingList<VisualFeaturesImpl> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("features", visualFeatures, ",", null, true);
            }
            if (language != null)
            {
                uri.AppendQuery("language", language, true);
            }
            if (genderNeutralCaption != null)
            {
                uri.AppendQuery("gender-neutral-caption", TypeFormatters.ConvertToString(genderNeutralCaption, null), true);
            }
            if (smartCropsAspectRatios != null && !(smartCropsAspectRatios is ChangeTrackingList<float> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                uri.AppendQueryDelimited("smartcrops-aspect-ratios", smartCropsAspectRatios, ",", null, true);
            }
            if (modelVersion != null)
            {
                uri.AppendQuery("model-version", modelVersion, true);
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Post;
            request.Headers.SetValue("Content-Type", "application/json");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }
    }
}
