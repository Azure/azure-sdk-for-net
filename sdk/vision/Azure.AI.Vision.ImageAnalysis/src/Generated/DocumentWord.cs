// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary>
    /// A word object consisting of a contiguous sequence of characters. For non-space delimited languages,
    /// such as Chinese, Japanese, and Korean, each character is represented as its own word.
    /// </summary>
    public partial class DocumentWord
    {
        /// <summary> Initializes a new instance of <see cref="DocumentWord"/>. </summary>
        /// <param name="boundingBox"> Bounding box of the word. </param>
        /// <param name="confidence"> Confidence of correctly extracting the word. </param>
        /// <param name="content"> Text content of the word. </param>
        /// <param name="span"> Location of the word in the reading order concatenated content. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="boundingBox"/>, <paramref name="content"/> or <paramref name="span"/> is null. </exception>
        internal DocumentWord(IEnumerable<float> boundingBox, float confidence, string content, DocumentSpan span)
        {
            Argument.AssertNotNull(boundingBox, nameof(boundingBox));
            Argument.AssertNotNull(content, nameof(content));
            Argument.AssertNotNull(span, nameof(span));

            BoundingBox = boundingBox.ToList();
            Confidence = confidence;
            Content = content;
            Span = span;
        }

        /// <summary> Initializes a new instance of <see cref="DocumentWord"/>. </summary>
        /// <param name="boundingBox"> Bounding box of the word. </param>
        /// <param name="confidence"> Confidence of correctly extracting the word. </param>
        /// <param name="content"> Text content of the word. </param>
        /// <param name="span"> Location of the word in the reading order concatenated content. </param>
        internal DocumentWord(IReadOnlyList<float> boundingBox, float confidence, string content, DocumentSpan span)
        {
            BoundingBox = boundingBox;
            Confidence = confidence;
            Content = content;
            Span = span;
        }

        /// <summary> Bounding box of the word. </summary>
        public IReadOnlyList<float> BoundingBox { get; }
        /// <summary> Confidence of correctly extracting the word. </summary>
        public float Confidence { get; }
        /// <summary> Text content of the word. </summary>
        public string Content { get; }
        /// <summary> Location of the word in the reading order concatenated content. </summary>
        public DocumentSpan Span { get; }
    }
}
