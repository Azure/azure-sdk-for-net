// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;

namespace Azure.AI.Vision.ImageAnalysis
{
    public partial class ReadResult
    {
        internal static ReadResult DeserializeReadResult(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string content = default;
            IReadOnlyList<DocumentPage> pages = default;
            string stringIndexType = default;
            IReadOnlyList<DocumentStyle> styles = default;
            string modelVersion = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("content"u8))
                {
                    content = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pages"u8))
                {
                    List<DocumentPage> array = new List<DocumentPage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DocumentPage.DeserializeDocumentPage(item));
                    }
                    pages = array;
                    continue;
                }
                if (property.NameEquals("stringIndexType"u8))
                {
                    stringIndexType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("styles"u8))
                {
                    List<DocumentStyle> array = new List<DocumentStyle>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DocumentStyle.DeserializeDocumentStyle(item));
                    }
                    styles = array;
                    continue;
                }
                if (property.NameEquals("modelVersion"u8))
                {
                    modelVersion = property.Value.GetString();
                    continue;
                }
            }
            return new ReadResult(content, pages, stringIndexType, styles, modelVersion);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ReadResult FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeReadResult(document.RootElement);
        }
    }
}
