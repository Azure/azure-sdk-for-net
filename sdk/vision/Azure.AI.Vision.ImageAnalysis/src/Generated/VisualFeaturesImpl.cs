// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary> The visual features supported by the Image Analysis service. </summary>
    internal readonly partial struct VisualFeaturesImpl : IEquatable<VisualFeaturesImpl>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VisualFeaturesImpl"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VisualFeaturesImpl(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TagsValue = "tags";
        private const string CaptionValue = "caption";
        private const string DenseCaptionsValue = "denseCaptions";
        private const string ObjectsValue = "objects";
        private const string ReadValue = "read";
        private const string SmartCropsValue = "smartCrops";
        private const string PeopleValue = "people";

        /// <summary> Extract content tags for thousands of recognizable objects, living beings, scenery, and actions that appear in the image. </summary>
        public static VisualFeaturesImpl Tags { get; } = new VisualFeaturesImpl(TagsValue);
        /// <summary> Generate a human-readable caption sentence that describes the content of the image. </summary>
        public static VisualFeaturesImpl Caption { get; } = new VisualFeaturesImpl(CaptionValue);
        /// <summary> Generate human-readable caption sentences for up to 10 different regions in the image, including one for the whole image. </summary>
        public static VisualFeaturesImpl DenseCaptions { get; } = new VisualFeaturesImpl(DenseCaptionsValue);
        /// <summary> Object detection. This is similar to tags, but focused on detecting physical objects in the image and returning their location. </summary>
        public static VisualFeaturesImpl Objects { get; } = new VisualFeaturesImpl(ObjectsValue);
        /// <summary> Extract printed or handwritten text from the image. Also known as Optical Character Recognition (OCR). </summary>
        public static VisualFeaturesImpl Read { get; } = new VisualFeaturesImpl(ReadValue);
        /// <summary> Find representative sub-regions of the image for thumbnail generation, at desired aspect ratios, with priority given to detected faces. </summary>
        public static VisualFeaturesImpl SmartCrops { get; } = new VisualFeaturesImpl(SmartCropsValue);
        /// <summary> Detect people in the image and return their location. </summary>
        public static VisualFeaturesImpl People { get; } = new VisualFeaturesImpl(PeopleValue);
        /// <summary> Determines if two <see cref="VisualFeaturesImpl"/> values are the same. </summary>
        public static bool operator ==(VisualFeaturesImpl left, VisualFeaturesImpl right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VisualFeaturesImpl"/> values are not the same. </summary>
        public static bool operator !=(VisualFeaturesImpl left, VisualFeaturesImpl right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VisualFeaturesImpl"/>. </summary>
        public static implicit operator VisualFeaturesImpl(string value) => new VisualFeaturesImpl(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VisualFeaturesImpl other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VisualFeaturesImpl other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
