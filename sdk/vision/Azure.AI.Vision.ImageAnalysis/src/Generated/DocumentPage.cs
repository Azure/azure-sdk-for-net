// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary> The content and layout elements extracted from a page from the input. </summary>
    public partial class DocumentPage
    {
        /// <summary> Initializes a new instance of DocumentPage. </summary>
        /// <param name="angle"> The general orientation of the content in clockwise direction, measured in degrees between (-180, 180]. </param>
        /// <param name="height"> The height of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="lines"> Extracted lines from the page, potentially containing both textual and visual elements. </param>
        /// <param name="pageNumber"> 1-based page number in the input document. </param>
        /// <param name="spans"> Location of the page in the reading order concatenated content. </param>
        /// <param name="width"> The width of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="words"> Extracted words from the page. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="lines"/>, <paramref name="spans"/> or <paramref name="words"/> is null. </exception>
        internal DocumentPage(float angle, float height, IEnumerable<DocumentLine> lines, int pageNumber, IEnumerable<DocumentSpan> spans, float width, IEnumerable<DocumentWord> words)
        {
            Argument.AssertNotNull(lines, nameof(lines));
            Argument.AssertNotNull(spans, nameof(spans));
            Argument.AssertNotNull(words, nameof(words));

            Angle = angle;
            Height = height;
            Lines = lines.ToList();
            PageNumber = pageNumber;
            Spans = spans.ToList();
            Width = width;
            Words = words.ToList();
        }

        /// <summary> Initializes a new instance of DocumentPage. </summary>
        /// <param name="angle"> The general orientation of the content in clockwise direction, measured in degrees between (-180, 180]. </param>
        /// <param name="height"> The height of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="lines"> Extracted lines from the page, potentially containing both textual and visual elements. </param>
        /// <param name="pageNumber"> 1-based page number in the input document. </param>
        /// <param name="spans"> Location of the page in the reading order concatenated content. </param>
        /// <param name="width"> The width of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="words"> Extracted words from the page. </param>
        internal DocumentPage(float angle, float height, IReadOnlyList<DocumentLine> lines, int pageNumber, IReadOnlyList<DocumentSpan> spans, float width, IReadOnlyList<DocumentWord> words)
        {
            Angle = angle;
            Height = height;
            Lines = lines;
            PageNumber = pageNumber;
            Spans = spans;
            Width = width;
            Words = words;
        }

        /// <summary> The general orientation of the content in clockwise direction, measured in degrees between (-180, 180]. </summary>
        public float Angle { get; }
        /// <summary> The height of the image/PDF in pixels/inches, respectively. </summary>
        public float Height { get; }
        /// <summary> Extracted lines from the page, potentially containing both textual and visual elements. </summary>
        public IReadOnlyList<DocumentLine> Lines { get; }
        /// <summary> 1-based page number in the input document. </summary>
        public int PageNumber { get; }
        /// <summary> Location of the page in the reading order concatenated content. </summary>
        public IReadOnlyList<DocumentSpan> Spans { get; }
        /// <summary> The width of the image/PDF in pixels/inches, respectively. </summary>
        public float Width { get; }
        /// <summary> Extracted words from the page. </summary>
        public IReadOnlyList<DocumentWord> Words { get; }
    }
}
