// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary> Describe the combined results of different types of image analysis. </summary>
    public partial class ImageAnalysisResult
    {
        /// <summary> Initializes a new instance of ImageAnalysisResult. </summary>
        /// <param name="metadata"> The model used for the analysis. </param>
        /// <param name="modelVersion"> The model used for the analysis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="metadata"/> or <paramref name="modelVersion"/> is null. </exception>
        internal ImageAnalysisResult(ImageMetadata metadata, string modelVersion)
        {
            Argument.AssertNotNull(metadata, nameof(metadata));
            Argument.AssertNotNull(modelVersion, nameof(modelVersion));

            Metadata = metadata;
            ModelVersion = modelVersion;
        }

        /// <summary> Initializes a new instance of ImageAnalysisResult. </summary>
        /// <param name="captionResult"> A CaptionResult for the image. </param>
        /// <param name="customModelResult"> A list of categories for the image. </param>
        /// <param name="denseCaptionsResult"> A denseCaptionsResult for the image. </param>
        /// <param name="metadata"> The model used for the analysis. </param>
        /// <param name="modelVersion"> The model used for the analysis. </param>
        /// <param name="objectsResult"> A list of objects for the image. </param>
        /// <param name="peopleResult"> A list of people for the image. </param>
        /// <param name="readResult"> A readResult for the image. </param>
        /// <param name="smartCropsResult"> A list of regions for the image. </param>
        /// <param name="tagsResult"> A list of tags for the image. </param>
        internal ImageAnalysisResult(CaptionResult captionResult, CustomModelResult customModelResult, DenseCaptionsResult denseCaptionsResult, ImageMetadata metadata, string modelVersion, ObjectsResult objectsResult, PeopleResult peopleResult, ReadResult readResult, SmartCropsResult smartCropsResult, TagsResult tagsResult)
        {
            CaptionResult = captionResult;
            CustomModelResult = customModelResult;
            DenseCaptionsResult = denseCaptionsResult;
            Metadata = metadata;
            ModelVersion = modelVersion;
            ObjectsResult = objectsResult;
            PeopleResult = peopleResult;
            ReadResult = readResult;
            SmartCropsResult = smartCropsResult;
            TagsResult = tagsResult;
        }

        /// <summary> A CaptionResult for the image. </summary>
        public CaptionResult CaptionResult { get; }
        /// <summary> A list of categories for the image. </summary>
        public CustomModelResult CustomModelResult { get; }
        /// <summary> A denseCaptionsResult for the image. </summary>
        public DenseCaptionsResult DenseCaptionsResult { get; }
        /// <summary> The model used for the analysis. </summary>
        public ImageMetadata Metadata { get; }
        /// <summary> The model used for the analysis. </summary>
        public string ModelVersion { get; }
        /// <summary> A list of objects for the image. </summary>
        public ObjectsResult ObjectsResult { get; }
        /// <summary> A list of people for the image. </summary>
        public PeopleResult PeopleResult { get; }
        /// <summary> A readResult for the image. </summary>
        public ReadResult ReadResult { get; }
        /// <summary> A list of regions for the image. </summary>
        public SmartCropsResult SmartCropsResult { get; }
        /// <summary> A list of tags for the image. </summary>
        public TagsResult TagsResult { get; }
    }
}
