// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary> Represents the outcome of an Image Analysis operation. </summary>
    public partial class ImageAnalysisResult : IJsonModel<ImageAnalysisResult>
    {
        /// <summary> Initializes a new instance of <see cref="ImageAnalysisResult"/> for deserialization. </summary>
        internal ImageAnalysisResult()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ImageAnalysisResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageAnalysisResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageAnalysisResult)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Caption))
            {
                writer.WritePropertyName("captionResult"u8);
                writer.WriteObjectValue(Caption, options);
            }
            if (Optional.IsDefined(DenseCaptions))
            {
                writer.WritePropertyName("denseCaptionsResult"u8);
                writer.WriteObjectValue(DenseCaptions, options);
            }
            writer.WritePropertyName("metadata"u8);
            writer.WriteObjectValue(Metadata, options);
            writer.WritePropertyName("modelVersion"u8);
            writer.WriteStringValue(ModelVersion);
            if (Optional.IsDefined(Objects))
            {
                writer.WritePropertyName("objectsResult"u8);
                writer.WriteObjectValue(Objects, options);
            }
            if (Optional.IsDefined(People))
            {
                writer.WritePropertyName("peopleResult"u8);
                writer.WriteObjectValue(People, options);
            }
            if (Optional.IsDefined(Read))
            {
                writer.WritePropertyName("readResult"u8);
                writer.WriteObjectValue(Read, options);
            }
            if (Optional.IsDefined(SmartCrops))
            {
                writer.WritePropertyName("smartCropsResult"u8);
                writer.WriteObjectValue(SmartCrops, options);
            }
            if (Optional.IsDefined(Tags))
            {
                writer.WritePropertyName("tagsResult"u8);
                writer.WriteObjectValue(Tags, options);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ImageAnalysisResult IJsonModel<ImageAnalysisResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ImageAnalysisResult JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageAnalysisResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageAnalysisResult)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeImageAnalysisResult(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static ImageAnalysisResult DeserializeImageAnalysisResult(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CaptionResult caption = default;
            DenseCaptionsResult denseCaptions = default;
            ImageMetadata metadata = default;
            string modelVersion = default;
            ObjectsResult objects = default;
            PeopleResult people = default;
            ReadResult read = default;
            SmartCropsResult smartCrops = default;
            TagsResult tags = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("captionResult"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    caption = CaptionResult.DeserializeCaptionResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("denseCaptionsResult"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    denseCaptions = DenseCaptionsResult.DeserializeDenseCaptionsResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("metadata"u8))
                {
                    metadata = ImageMetadata.DeserializeImageMetadata(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("modelVersion"u8))
                {
                    modelVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("objectsResult"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    objects = ObjectsResult.DeserializeObjectsResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("peopleResult"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    people = PeopleResult.DeserializePeopleResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("readResult"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    read = ReadResult.DeserializeReadResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("smartCropsResult"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    smartCrops = SmartCropsResult.DeserializeSmartCropsResult(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("tagsResult"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tags = TagsResult.DeserializeTagsResult(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new ImageAnalysisResult(
                caption,
                denseCaptions,
                metadata,
                modelVersion,
                objects,
                people,
                read,
                smartCrops,
                tags,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ImageAnalysisResult>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageAnalysisResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVisionImageAnalysisContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ImageAnalysisResult)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ImageAnalysisResult IPersistableModel<ImageAnalysisResult>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ImageAnalysisResult PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageAnalysisResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeImageAnalysisResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ImageAnalysisResult)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ImageAnalysisResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="result"> The <see cref="Response"/> to deserialize the <see cref="ImageAnalysisResult"/> from. </param>
        public static explicit operator ImageAnalysisResult(Response result)
        {
            using Response response = result;
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeImageAnalysisResult(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
