// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary>
    /// A word object consisting of a contiguous sequence of characters. For non-space delimited languages,
    /// such as Chinese, Japanese, and Korean, each character is represented as its own word.
    /// </summary>
    public partial class DetectedTextWord
    {
        /// <summary> Initializes a new instance of <see cref="DetectedTextWord"/>. </summary>
        /// <param name="text"> Text content of the word. </param>
        /// <param name="boundingPolygon"> A bounding polygon around the word. At the moment only quadrilaterals are supported (represented by 4 image points). </param>
        /// <param name="confidence"> The level of confidence that the word was detected. Confidence scores span the range of 0.0 to 1.0 (inclusive), with higher values indicating a higher confidence of detection. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> or <paramref name="boundingPolygon"/> is null. </exception>
        internal DetectedTextWord(string text, IEnumerable<ImagePoint> boundingPolygon, float confidence)
        {
            Argument.AssertNotNull(text, nameof(text));
            Argument.AssertNotNull(boundingPolygon, nameof(boundingPolygon));

            Text = text;
            BoundingPolygon = boundingPolygon.ToList();
            Confidence = confidence;
        }

        /// <summary> Initializes a new instance of <see cref="DetectedTextWord"/>. </summary>
        /// <param name="text"> Text content of the word. </param>
        /// <param name="boundingPolygon"> A bounding polygon around the word. At the moment only quadrilaterals are supported (represented by 4 image points). </param>
        /// <param name="confidence"> The level of confidence that the word was detected. Confidence scores span the range of 0.0 to 1.0 (inclusive), with higher values indicating a higher confidence of detection. </param>
        internal DetectedTextWord(string text, IReadOnlyList<ImagePoint> boundingPolygon, float confidence)
        {
            Text = text;
            BoundingPolygon = boundingPolygon;
            Confidence = confidence;
        }

        /// <summary> Text content of the word. </summary>
        public string Text { get; }
        /// <summary> A bounding polygon around the word. At the moment only quadrilaterals are supported (represented by 4 image points). </summary>
        public IReadOnlyList<ImagePoint> BoundingPolygon { get; }
        /// <summary> The level of confidence that the word was detected. Confidence scores span the range of 0.0 to 1.0 (inclusive), with higher values indicating a higher confidence of detection. </summary>
        public float Confidence { get; }
    }
}
