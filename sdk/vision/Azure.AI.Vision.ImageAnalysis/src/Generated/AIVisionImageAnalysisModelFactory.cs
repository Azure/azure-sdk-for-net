// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIVisionImageAnalysisModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.ImageAnalysisResult"/>. </summary>
        /// <param name="caption"> The generated phrase that describes the content of the analyzed image. </param>
        /// <param name="denseCaptions">
        /// The up to 10 generated phrases, the first describing the content of the whole image,
        /// and the others describing the content of different regions of the image.
        /// </param>
        /// <param name="metadata"> Metadata associated with the analyzed image. </param>
        /// <param name="modelVersion"> The cloud AI model used for the analysis. </param>
        /// <param name="objects"> A list of detected physical objects in the analyzed image, and their location. </param>
        /// <param name="people"> A list of detected people in the analyzed image, and their location. </param>
        /// <param name="read"> The extracted printed and hand-written text in the analyze image. Also knows as OCR. </param>
        /// <param name="smartCrops">
        /// A list of crop regions at the desired as aspect ratios (if provided) that can be used as image thumbnails.
        /// These regions preserve as much content as possible from the analyzed image, with priority given to detected faces.
        /// </param>
        /// <param name="tags"> A list of content tags in the analyzed image. </param>
        /// <returns> A new <see cref="ImageAnalysis.ImageAnalysisResult"/> instance for mocking. </returns>
        public static ImageAnalysisResult ImageAnalysisResult(CaptionResult caption = null, DenseCaptionsResult denseCaptions = null, ImageMetadata metadata = null, string modelVersion = null, ObjectsResult objects = null, PeopleResult people = null, ReadResult read = null, SmartCropsResult smartCrops = null, TagsResult tags = null)
        {
            return new ImageAnalysisResult(caption, denseCaptions, metadata, modelVersion, objects, people, read, smartCrops, tags);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.CaptionResult"/>. </summary>
        /// <param name="confidence">
        /// A score, in the range of 0 to 1 (inclusive), representing the confidence that this description is accurate.
        /// Higher values indicating higher confidence.
        /// </param>
        /// <param name="text"> The text of the caption. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> is null. </exception>
        /// <returns> A new <see cref="ImageAnalysis.CaptionResult"/> instance for mocking. </returns>
        public static CaptionResult CaptionResult(float confidence = default, string text = null)
        {
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }

            return new CaptionResult(confidence, text);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DenseCaptionsResult"/>. </summary>
        /// <param name="values"> The list of image captions. </param>
        /// <returns> A new <see cref="ImageAnalysis.DenseCaptionsResult"/> instance for mocking. </returns>
        public static DenseCaptionsResult DenseCaptionsResult(IEnumerable<DenseCaption> values = null)
        {
            values ??= new List<DenseCaption>();

            return new DenseCaptionsResult(values?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DenseCaption"/>. </summary>
        /// <param name="confidence">
        /// A score, in the range of 0 to 1 (inclusive), representing the confidence that this description is accurate.
        /// Higher values indicating higher confidence.
        /// </param>
        /// <param name="text"> The text of the caption. </param>
        /// <param name="boundingBox"> The image region of which this caption applies. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> or <paramref name="boundingBox"/> is null. </exception>
        /// <returns> A new <see cref="ImageAnalysis.DenseCaption"/> instance for mocking. </returns>
        public static DenseCaption DenseCaption(float confidence = default, string text = null, ImageBoundingBox boundingBox = null)
        {
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }
            if (boundingBox == null)
            {
                throw new ArgumentNullException(nameof(boundingBox));
            }

            return new DenseCaption(confidence, text, boundingBox);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.ImageBoundingBox"/>. </summary>
        /// <param name="x"> X-coordinate of the top left point of the area, in pixels. </param>
        /// <param name="y"> Y-coordinate of the top left point of the area, in pixels. </param>
        /// <param name="width"> Width of the area, in pixels. </param>
        /// <param name="height"> Height of the area, in pixels. </param>
        /// <returns> A new <see cref="ImageAnalysis.ImageBoundingBox"/> instance for mocking. </returns>
        public static ImageBoundingBox ImageBoundingBox(int x = default, int y = default, int width = default, int height = default)
        {
            return new ImageBoundingBox(x, y, width, height);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.ImageMetadata"/>. </summary>
        /// <param name="height"> The height of the image in pixels. </param>
        /// <param name="width"> The width of the image in pixels. </param>
        /// <returns> A new <see cref="ImageAnalysis.ImageMetadata"/> instance for mocking. </returns>
        public static ImageMetadata ImageMetadata(int height = default, int width = default)
        {
            return new ImageMetadata(height, width);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.ObjectsResult"/>. </summary>
        /// <param name="values"> A list of physical object detected in an image and their location. </param>
        /// <returns> A new <see cref="ImageAnalysis.ObjectsResult"/> instance for mocking. </returns>
        public static ObjectsResult ObjectsResult(IEnumerable<DetectedObject> values = null)
        {
            values ??= new List<DetectedObject>();

            return new ObjectsResult(values?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DetectedObject"/>. </summary>
        /// <param name="boundingBox"> A rectangular boundary where the object was detected. </param>
        /// <param name="tags"> A single-item list containing the object information. </param>
        /// <returns> A new <see cref="ImageAnalysis.DetectedObject"/> instance for mocking. </returns>
        public static DetectedObject DetectedObject(ImageBoundingBox boundingBox = null, IEnumerable<DetectedTag> tags = null)
        {
            tags ??= new List<DetectedTag>();

            return new DetectedObject(boundingBox, tags?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DetectedTag"/>. </summary>
        /// <param name="confidence">
        /// A score, in the range of 0 to 1 (inclusive), representing the confidence that this entity was observed.
        /// Higher values indicating higher confidence.
        /// </param>
        /// <param name="name"> Name of the entity. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="ImageAnalysis.DetectedTag"/> instance for mocking. </returns>
        public static DetectedTag DetectedTag(float confidence = default, string name = null)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new DetectedTag(confidence, name);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.PeopleResult"/>. </summary>
        /// <param name="values"> A list of people detected in an image and their location. </param>
        /// <returns> A new <see cref="ImageAnalysis.PeopleResult"/> instance for mocking. </returns>
        public static PeopleResult PeopleResult(IEnumerable<DetectedPerson> values = null)
        {
            values ??= new List<DetectedPerson>();

            return new PeopleResult(values?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DetectedPerson"/>. </summary>
        /// <param name="boundingBox"> A rectangular boundary where the person was detected. </param>
        /// <param name="confidence">
        /// A score, in the range of 0 to 1 (inclusive), representing the confidence that this detection was accurate.
        /// Higher values indicating higher confidence.
        /// </param>
        /// <returns> A new <see cref="ImageAnalysis.DetectedPerson"/> instance for mocking. </returns>
        public static DetectedPerson DetectedPerson(ImageBoundingBox boundingBox = null, float confidence = default)
        {
            return new DetectedPerson(boundingBox, confidence);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.ReadResult"/>. </summary>
        /// <param name="content"> Concatenate string representation of all textual and visual elements in reading order. </param>
        /// <param name="pages"> A list of analyzed pages. </param>
        /// <param name="stringIndexType"> The method used to compute string offset and length, possible values include: 'textElements', 'unicodeCodePoint', 'utf16CodeUnit' etc. </param>
        /// <param name="styles"> Extracted font styles. </param>
        /// <param name="modelVersion"> The model used to generate the Read result. </param>
        /// <returns> A new <see cref="ImageAnalysis.ReadResult"/> instance for mocking. </returns>
        public static ReadResult ReadResult(string content = null, IEnumerable<DocumentPage> pages = null, string stringIndexType = null, IEnumerable<DocumentStyle> styles = null, string modelVersion = null)
        {
            pages ??= new List<DocumentPage>();
            styles ??= new List<DocumentStyle>();

            return new ReadResult(content, pages?.ToList(), stringIndexType, styles?.ToList(), modelVersion);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DocumentPage"/>. </summary>
        /// <param name="angle"> The general orientation of the content in clockwise direction, measured in degrees between (-180, 180]. </param>
        /// <param name="height"> The height of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="lines"> Extracted lines from the page, potentially containing both textual and visual elements. </param>
        /// <param name="pageNumber"> 1-based page number in the input document. </param>
        /// <param name="spans"> Location of the page in the reading order concatenated content. </param>
        /// <param name="width"> The width of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="words"> Extracted words from the page. </param>
        /// <returns> A new <see cref="ImageAnalysis.DocumentPage"/> instance for mocking. </returns>
        public static DocumentPage DocumentPage(float angle = default, float height = default, IEnumerable<DocumentLine> lines = null, int pageNumber = default, IEnumerable<DocumentSpan> spans = null, float width = default, IEnumerable<DocumentWord> words = null)
        {
            lines ??= new List<DocumentLine>();
            spans ??= new List<DocumentSpan>();
            words ??= new List<DocumentWord>();

            return new DocumentPage(angle, height, lines?.ToList(), pageNumber, spans?.ToList(), width, words?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DocumentLine"/>. </summary>
        /// <param name="boundingBox"> The bounding box of the line. </param>
        /// <param name="content"> Concatenated content of the contained elements in reading order. </param>
        /// <param name="spans"> Location of the line in the reading order concatenated content. </param>
        /// <returns> A new <see cref="ImageAnalysis.DocumentLine"/> instance for mocking. </returns>
        public static DocumentLine DocumentLine(IEnumerable<float> boundingBox = null, string content = null, IEnumerable<DocumentSpan> spans = null)
        {
            boundingBox ??= new List<float>();
            spans ??= new List<DocumentSpan>();

            return new DocumentLine(boundingBox?.ToList(), content, spans?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DocumentSpan"/>. </summary>
        /// <param name="length"> Number of characters in the content represented by the span. </param>
        /// <param name="offset"> Zero-based index of the content represented by the span. </param>
        /// <returns> A new <see cref="ImageAnalysis.DocumentSpan"/> instance for mocking. </returns>
        public static DocumentSpan DocumentSpan(int length = default, int offset = default)
        {
            return new DocumentSpan(length, offset);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DocumentWord"/>. </summary>
        /// <param name="boundingBox"> Bounding box of the word. </param>
        /// <param name="confidence"> Confidence of correctly extracting the word. </param>
        /// <param name="content"> Text content of the word. </param>
        /// <param name="span"> Location of the word in the reading order concatenated content. </param>
        /// <returns> A new <see cref="ImageAnalysis.DocumentWord"/> instance for mocking. </returns>
        public static DocumentWord DocumentWord(IEnumerable<float> boundingBox = null, float confidence = default, string content = null, DocumentSpan span = null)
        {
            boundingBox ??= new List<float>();

            return new DocumentWord(boundingBox?.ToList(), confidence, content, span);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.DocumentStyle"/>. </summary>
        /// <param name="confidence"> Confidence of correctly identifying the style. </param>
        /// <param name="isHandwritten"> Is content handwritten or not. </param>
        /// <param name="spans"> Location of the text elements in the concatenated content the style applies to. </param>
        /// <returns> A new <see cref="ImageAnalysis.DocumentStyle"/> instance for mocking. </returns>
        public static DocumentStyle DocumentStyle(float confidence = default, bool isHandwritten = default, IEnumerable<DocumentSpan> spans = null)
        {
            spans ??= new List<DocumentSpan>();

            return new DocumentStyle(confidence, isHandwritten, spans?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.SmartCropsResult"/>. </summary>
        /// <param name="values"> A list of crop regions. </param>
        /// <returns> A new <see cref="ImageAnalysis.SmartCropsResult"/> instance for mocking. </returns>
        public static SmartCropsResult SmartCropsResult(IEnumerable<CropRegion> values = null)
        {
            values ??= new List<CropRegion>();

            return new SmartCropsResult(values?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.CropRegion"/>. </summary>
        /// <param name="aspectRatio">
        /// The aspect ratio of the crop region.
        /// Aspect ratio is calculated by dividing the width of the region in pixels by its height in pixels.
        /// The aspect ratio will be in the range 0.75 to 1.8 (inclusive) if provided by the developer during the analyze call.
        /// Otherwise, it will be in the range 0.5 to 2.0 (inclusive).
        /// </param>
        /// <param name="boundingBox"> The bounding box of the region. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="boundingBox"/> is null. </exception>
        /// <returns> A new <see cref="ImageAnalysis.CropRegion"/> instance for mocking. </returns>
        public static CropRegion CropRegion(float aspectRatio = default, ImageBoundingBox boundingBox = null)
        {
            if (boundingBox == null)
            {
                throw new ArgumentNullException(nameof(boundingBox));
            }

            return new CropRegion(aspectRatio, boundingBox);
        }

        /// <summary> Initializes a new instance of <see cref="ImageAnalysis.TagsResult"/>. </summary>
        /// <param name="values"> A list of tags. </param>
        /// <returns> A new <see cref="ImageAnalysis.TagsResult"/> instance for mocking. </returns>
        public static TagsResult TagsResult(IEnumerable<DetectedTag> values = null)
        {
            values ??= new List<DetectedTag>();

            return new TagsResult(values?.ToList());
        }
    }
}
