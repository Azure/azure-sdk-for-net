// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary> The visual features requested: tags, objects, caption, denseCaptions, read, smartCrops, people. This parameter needs to be specified if the parameter "model-name" is not specified. </summary>
    public readonly partial struct VisualFeatures : IEquatable<VisualFeatures>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VisualFeatures"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VisualFeatures(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TagsValue = "tags";
        private const string CaptionValue = "caption";
        private const string DenseCaptionsValue = "denseCaptions";
        private const string ObjectsValue = "objects";
        private const string ReadValue = "read";
        private const string SmartCropsValue = "smartCrops";
        private const string PeopleValue = "people";

        /// <summary> Tags. </summary>
        public static VisualFeatures Tags { get; } = new VisualFeatures(TagsValue);
        /// <summary> Caption. </summary>
        public static VisualFeatures Caption { get; } = new VisualFeatures(CaptionValue);
        /// <summary> DenseCaptions. </summary>
        public static VisualFeatures DenseCaptions { get; } = new VisualFeatures(DenseCaptionsValue);
        /// <summary> Objects. </summary>
        public static VisualFeatures Objects { get; } = new VisualFeatures(ObjectsValue);
        /// <summary> Read. </summary>
        public static VisualFeatures Read { get; } = new VisualFeatures(ReadValue);
        /// <summary> SmartCrops. </summary>
        public static VisualFeatures SmartCrops { get; } = new VisualFeatures(SmartCropsValue);
        /// <summary> People. </summary>
        public static VisualFeatures People { get; } = new VisualFeatures(PeopleValue);
        /// <summary> Determines if two <see cref="VisualFeatures"/> values are the same. </summary>
        public static bool operator ==(VisualFeatures left, VisualFeatures right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VisualFeatures"/> values are not the same. </summary>
        public static bool operator !=(VisualFeatures left, VisualFeatures right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VisualFeatures"/>. </summary>
        public static implicit operator VisualFeatures(string value) => new VisualFeatures(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VisualFeatures other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VisualFeatures other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
