// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.EdgeMarketplace
{
    /// <summary>
    /// A class representing a collection of <see cref="OfferResource"/> and their operations.
    /// Each <see cref="OfferResource"/> in the collection will belong to the same instance of <see cref="ArmResource"/>.
    /// To get an <see cref="OfferCollection"/> instance call the GetOffers method from an instance of <see cref="ArmResource"/>.
    /// </summary>
    public partial class OfferCollection : ArmCollection, IEnumerable<OfferResource>, IAsyncEnumerable<OfferResource>
    {
        private readonly ClientDiagnostics _offerClientDiagnostics;
        private readonly OffersRestOperations _offerRestClient;

        /// <summary> Initializes a new instance of the <see cref="OfferCollection"/> class for mocking. </summary>
        protected OfferCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="OfferCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal OfferCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _offerClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.EdgeMarketplace", OfferResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(OfferResource.ResourceType, out string offerApiVersion);
            _offerRestClient = new OffersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, offerApiVersion);
        }

        /// <summary>
        /// Get a Offer
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers/{offerId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="offerId"> Id of the offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        public virtual async Task<Response<OfferResource>> GetAsync(string offerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));

            using var scope = _offerClientDiagnostics.CreateScope("OfferCollection.Get");
            scope.Start();
            try
            {
                var response = await _offerRestClient.GetAsync(Id, offerId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OfferResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Offer
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers/{offerId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="offerId"> Id of the offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        public virtual Response<OfferResource> Get(string offerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));

            using var scope = _offerClientDiagnostics.CreateScope("OfferCollection.Get");
            scope.Start();
            try
            {
                var response = _offerRestClient.Get(Id, offerId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OfferResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Offer resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_List</description>
        /// </item>
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeMarketplace/offers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="skipToken"> Skip over when retrieving results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OfferResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OfferResource> GetAllAsync(int? top = null, int? skip = null, int? maxpagesize = null, string filter = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (Id.ResourceType == "")
            {
                HttpMessage FirstPageRequest(int? pageSizeHint) => _offerRestClient.CreateListRequest(Id, top, skip, pageSizeHint, filter, skipToken);
                HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _offerRestClient.CreateListNextPageRequest(nextLink, Id, top, skip, pageSizeHint, filter, skipToken);
                return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new OfferResource(Client, OfferData.DeserializeOfferData(e)), _offerClientDiagnostics, Pipeline, "OfferCollection.GetAll", "value", "nextLink", cancellationToken);
            }
            else if (Id.ResourceType == SubscriptionResource.ResourceType)
            {
                HttpMessage FirstPageRequest(int? pageSizeHint) => _offerRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, top, skip, pageSizeHint, filter, skipToken);
                HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _offerRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, top, skip, pageSizeHint, filter, skipToken);
                return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new OfferResource(Client, OfferData.DeserializeOfferData(e)), _offerClientDiagnostics, Pipeline, "OfferCollection.GetAll", "value", "nextLink", cancellationToken);
            }
            else
            {
                throw new InvalidOperationException($"{Id.ResourceType} is not supported here");
            }
        }

        /// <summary>
        /// List Offer resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_List</description>
        /// </item>
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.EdgeMarketplace/offers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="skipToken"> Skip over when retrieving results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OfferResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OfferResource> GetAll(int? top = null, int? skip = null, int? maxpagesize = null, string filter = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (Id.ResourceType == "")
            {
                HttpMessage FirstPageRequest(int? pageSizeHint) => _offerRestClient.CreateListRequest(Id, top, skip, pageSizeHint, filter, skipToken);
                HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _offerRestClient.CreateListNextPageRequest(nextLink, Id, top, skip, pageSizeHint, filter, skipToken);
                return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new OfferResource(Client, OfferData.DeserializeOfferData(e)), _offerClientDiagnostics, Pipeline, "OfferCollection.GetAll", "value", "nextLink", cancellationToken);
            }
            else if (Id.ResourceType == SubscriptionResource.ResourceType)
            {
                HttpMessage FirstPageRequest(int? pageSizeHint) => _offerRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, top, skip, pageSizeHint, filter, skipToken);
                HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _offerRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, top, skip, pageSizeHint, filter, skipToken);
                return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new OfferResource(Client, OfferData.DeserializeOfferData(e)), _offerClientDiagnostics, Pipeline, "OfferCollection.GetAll", "value", "nextLink", cancellationToken);
            }
            else
            {
                throw new InvalidOperationException($"{Id.ResourceType} is not supported here");
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers/{offerId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="offerId"> Id of the offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string offerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));

            using var scope = _offerClientDiagnostics.CreateScope("OfferCollection.Exists");
            scope.Start();
            try
            {
                var response = await _offerRestClient.GetAsync(Id, offerId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers/{offerId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="offerId"> Id of the offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        public virtual Response<bool> Exists(string offerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));

            using var scope = _offerClientDiagnostics.CreateScope("OfferCollection.Exists");
            scope.Start();
            try
            {
                var response = _offerRestClient.Get(Id, offerId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers/{offerId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="offerId"> Id of the offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        public virtual async Task<NullableResponse<OfferResource>> GetIfExistsAsync(string offerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));

            using var scope = _offerClientDiagnostics.CreateScope("OfferCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _offerRestClient.GetAsync(Id, offerId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<OfferResource>(response.GetRawResponse());
                return Response.FromValue(new OfferResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers/{offerId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="offerId"> Id of the offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        public virtual NullableResponse<OfferResource> GetIfExists(string offerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));

            using var scope = _offerClientDiagnostics.CreateScope("OfferCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _offerRestClient.Get(Id, offerId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<OfferResource>(response.GetRawResponse());
                return Response.FromValue(new OfferResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<OfferResource> IEnumerable<OfferResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<OfferResource> IAsyncEnumerable<OfferResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
