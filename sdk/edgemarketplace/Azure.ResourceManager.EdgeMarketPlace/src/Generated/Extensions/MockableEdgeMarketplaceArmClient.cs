// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.EdgeMarketplace;

namespace Azure.ResourceManager.EdgeMarketplace.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MockableEdgeMarketplaceArmClient : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableEdgeMarketplaceArmClient"/> class for mocking. </summary>
        protected MockableEdgeMarketplaceArmClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableEdgeMarketplaceArmClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableEdgeMarketplaceArmClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MockableEdgeMarketplaceArmClient(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of PublisherResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of PublisherResources and their operations over a PublisherResource. </returns>
        public virtual PublisherCollection GetPublishers(ResourceIdentifier scope)
        {
            return new PublisherCollection(Client, scope);
        }

        /// <summary>
        /// Get a Publisher
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/publishers/{publisherName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Publishers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="publisherName"> Name of the publisher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="publisherName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<PublisherResource>> GetPublisherAsync(ResourceIdentifier scope, string publisherName, CancellationToken cancellationToken = default)
        {
            return await GetPublishers(scope).GetAsync(publisherName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Publisher
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/publishers/{publisherName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Publishers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="publisherName"> Name of the publisher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="publisherName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<PublisherResource> GetPublisher(ResourceIdentifier scope, string publisherName, CancellationToken cancellationToken = default)
        {
            return GetPublishers(scope).Get(publisherName, cancellationToken);
        }

        /// <summary> Gets a collection of OfferResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of OfferResources and their operations over a OfferResource. </returns>
        public virtual OfferCollection GetOffers(ResourceIdentifier scope)
        {
            return new OfferCollection(Client, scope);
        }

        /// <summary>
        /// Get a Offer
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers/{offerId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="offerId"> Id of the offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<OfferResource>> GetOfferAsync(ResourceIdentifier scope, string offerId, CancellationToken cancellationToken = default)
        {
            return await GetOffers(scope).GetAsync(offerId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Offer
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers/{offerId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Offers_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="offerId"> Id of the offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<OfferResource> GetOffer(ResourceIdentifier scope, string offerId, CancellationToken cancellationToken = default)
        {
            return GetOffers(scope).Get(offerId, cancellationToken);
        }

        /// <summary>
        /// Gets an object representing a <see cref="PublisherResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PublisherResource.CreateResourceIdentifier" /> to create a <see cref="PublisherResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PublisherResource"/> object. </returns>
        public virtual PublisherResource GetPublisherResource(ResourceIdentifier id)
        {
            PublisherResource.ValidateResourceId(id);
            return new PublisherResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="OfferResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="OfferResource.CreateResourceIdentifier" /> to create an <see cref="OfferResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="OfferResource"/> object. </returns>
        public virtual OfferResource GetOfferResource(ResourceIdentifier id)
        {
            OfferResource.ValidateResourceId(id);
            return new OfferResource(Client, id);
        }
    }
}
