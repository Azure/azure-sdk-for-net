// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.EdgeMarketplace;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.EdgeMarketplace.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmEdgeMarketplaceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="EdgeMarketplace.PublisherData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The resource provisioning state. </param>
        /// <returns> A new <see cref="EdgeMarketplace.PublisherData"/> instance for mocking. </returns>
        public static PublisherData PublisherData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceProvisioningState? provisioningState = null)
        {
            return new PublisherData(id, name, resourceType, systemData, provisioningState);
        }

        /// <summary> Initializes a new instance of <see cref="EdgeMarketplace.OfferData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="contentVersion"> The content version. </param>
        /// <param name="contentUri"> The content url. </param>
        /// <param name="offerContent"> The offer content. </param>
        /// <param name="provisioningState"> The resource provisioning state. </param>
        /// <param name="marketplaceSkus"> The marketplace skus. </param>
        /// <returns> A new <see cref="EdgeMarketplace.OfferData"/> instance for mocking. </returns>
        public static OfferData OfferData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string contentVersion = null, Uri contentUri = null, OfferContent offerContent = null, ResourceProvisioningState? provisioningState = null, IEnumerable<MarketplaceSku> marketplaceSkus = null)
        {
            marketplaceSkus ??= new List<MarketplaceSku>();

            return new OfferData(id, name, resourceType, systemData, contentVersion, contentUri, offerContent, provisioningState, marketplaceSkus?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.OfferContent"/>. </summary>
        /// <param name="displayName"> The display name of the offer. </param>
        /// <param name="summary"> The summary. </param>
        /// <param name="longSummary"> The long summary. </param>
        /// <param name="description"> The description. </param>
        /// <param name="offerId"> The offer id. </param>
        /// <param name="offerType"> The offer type. </param>
        /// <param name="supportUri"> The support uri. </param>
        /// <param name="popularity"> The popularity of the offer. </param>
        /// <param name="offerPublisher"> The publisher of the offer. </param>
        /// <param name="availability"> The availability of the offer. </param>
        /// <param name="releaseType"> The release type of the offer. </param>
        /// <param name="iconFileUris"> The icon files. </param>
        /// <param name="termsAndConditions"> The terms and conditions. </param>
        /// <param name="categoryIds"> The category ids. </param>
        /// <param name="operatingSystems"> The operating systems. </param>
        /// <returns> A new <see cref="Models.OfferContent"/> instance for mocking. </returns>
        public static OfferContent OfferContent(string displayName = null, string summary = null, string longSummary = null, string description = null, string offerId = null, string offerType = null, Uri supportUri = null, int? popularity = null, OfferPublisher offerPublisher = null, OfferAvailability? availability = null, OfferReleaseType? releaseType = null, IconFileUris iconFileUris = null, TermsAndConditions termsAndConditions = null, IEnumerable<string> categoryIds = null, IEnumerable<string> operatingSystems = null)
        {
            categoryIds ??= new List<string>();
            operatingSystems ??= new List<string>();

            return new OfferContent(displayName, summary, longSummary, description, offerId, offerType, supportUri, popularity, offerPublisher, availability, releaseType, iconFileUris, termsAndConditions, categoryIds?.ToList(), operatingSystems?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.OfferPublisher"/>. </summary>
        /// <param name="publisherId"> The publisher Id. </param>
        /// <param name="publisherDisplayName"> The publisher name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/> or <paramref name="publisherDisplayName"/> is null. </exception>
        /// <returns> A new <see cref="Models.OfferPublisher"/> instance for mocking. </returns>
        public static OfferPublisher OfferPublisher(string publisherId = null, string publisherDisplayName = null)
        {
            if (publisherId == null)
            {
                throw new ArgumentNullException(nameof(publisherId));
            }
            if (publisherDisplayName == null)
            {
                throw new ArgumentNullException(nameof(publisherDisplayName));
            }

            return new OfferPublisher(publisherId, publisherDisplayName);
        }

        /// <summary> Initializes a new instance of <see cref="Models.IconFileUris"/>. </summary>
        /// <param name="small"> uri of small icon. </param>
        /// <param name="medium"> uri of medium icon. </param>
        /// <param name="wide"> uri of wide icon. </param>
        /// <param name="large"> uri of large icon. </param>
        /// <returns> A new <see cref="Models.IconFileUris"/> instance for mocking. </returns>
        public static IconFileUris IconFileUris(string small = null, string medium = null, string wide = null, string large = null)
        {
            return new IconFileUris(small, medium, wide, large);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TermsAndConditions"/>. </summary>
        /// <param name="legalTermsUri"> The legal terms and conditions uri. </param>
        /// <param name="legalTermsType"> The type of legal terms. </param>
        /// <param name="privacyPolicyUri"> The privacy policy uri. </param>
        /// <returns> A new <see cref="Models.TermsAndConditions"/> instance for mocking. </returns>
        public static TermsAndConditions TermsAndConditions(Uri legalTermsUri = null, string legalTermsType = null, Uri privacyPolicyUri = null)
        {
            return new TermsAndConditions(legalTermsUri, legalTermsType, privacyPolicyUri);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceSku"/>. </summary>
        /// <param name="catalogPlanId"> The catalog plan id. </param>
        /// <param name="marketplaceSkuId"> The marketplace sku id. </param>
        /// <param name="marketplaceSkuType"> The type of marketplace sku. </param>
        /// <param name="displayName"> The display name of marketplace sku. </param>
        /// <param name="summary"> The summary. </param>
        /// <param name="longSummary"> The long summary. </param>
        /// <param name="description"> The description. </param>
        /// <param name="generation"> The generation. </param>
        /// <param name="displayRank"> The display rank of the sku. </param>
        /// <param name="operatingSystem"> The operating system supported. </param>
        /// <param name="marketplaceSkuVersions"> The marketplace sku version. </param>
        /// <returns> A new <see cref="Models.MarketplaceSku"/> instance for mocking. </returns>
        public static MarketplaceSku MarketplaceSku(string catalogPlanId = null, string marketplaceSkuId = null, string marketplaceSkuType = null, string displayName = null, string summary = null, string longSummary = null, string description = null, string generation = null, int? displayRank = null, SkuOperatingSystem operatingSystem = null, IEnumerable<MarketplaceSkuVersion> marketplaceSkuVersions = null)
        {
            marketplaceSkuVersions ??= new List<MarketplaceSkuVersion>();

            return new MarketplaceSku(catalogPlanId, marketplaceSkuId, marketplaceSkuType, displayName, summary, longSummary, description, generation, displayRank, operatingSystem, marketplaceSkuVersions?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.SkuOperatingSystem"/>. </summary>
        /// <param name="family"> The family of the operating system. </param>
        /// <param name="skuOperatingSystemType"> The type of the operating system. </param>
        /// <param name="name"> The name of the operating system. </param>
        /// <returns> A new <see cref="Models.SkuOperatingSystem"/> instance for mocking. </returns>
        public static SkuOperatingSystem SkuOperatingSystem(string family = null, string skuOperatingSystemType = null, string name = null)
        {
            return new SkuOperatingSystem(family, skuOperatingSystemType, name);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceSkuVersion"/>. </summary>
        /// <param name="name"> The name of sku version. </param>
        /// <param name="sizeOnDiskInMb"> The size of the image. </param>
        /// <param name="minimumDownloadSizeInMb"> The size of the download. </param>
        /// <param name="stageName"> The stage name. </param>
        /// <returns> A new <see cref="Models.MarketplaceSkuVersion"/> instance for mocking. </returns>
        public static MarketplaceSkuVersion MarketplaceSkuVersion(string name = null, int? sizeOnDiskInMb = null, int? minimumDownloadSizeInMb = null, string stageName = null)
        {
            return new MarketplaceSkuVersion(name, sizeOnDiskInMb, minimumDownloadSizeInMb, stageName);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DiskAccessToken"/>. </summary>
        /// <param name="diskId"> The disk id. </param>
        /// <param name="status"> The access token creation status. </param>
        /// <param name="accessToken"> The access token. </param>
        /// <returns> A new <see cref="Models.DiskAccessToken"/> instance for mocking. </returns>
        public static DiskAccessToken DiskAccessToken(string diskId = null, string status = null, string accessToken = null)
        {
            return new DiskAccessToken(diskId, status, accessToken);
        }
    }
}
