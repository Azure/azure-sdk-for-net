// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TrafficManager;
using Azure.ResourceManager.TrafficManager.Models;

namespace Azure.ResourceManager.TrafficManager.Samples
{
    public partial class Sample_TrafficManagerProfileCollection
    {
        // ListProfilesByResourceGroup
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListProfilesByResourceGroup()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-GET-ByResourceGroup.json
            // this example is just showing the usage of "Profiles_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager3640";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation and iterate over the result
            await foreach (TrafficManagerProfileResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                TrafficManagerProfileData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Profile-GET-WithEndpoints
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ProfileGETWithEndpoints()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-GET-WithEndpoints.json
            // this example is just showing the usage of "Profiles_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager1323";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager3880";
            TrafficManagerProfileResource result = await collection.GetAsync(profileName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrafficManagerProfileData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Profile-GET-WithEndpoints
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_ProfileGETWithEndpoints()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-GET-WithEndpoints.json
            // this example is just showing the usage of "Profiles_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager1323";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager3880";
            bool result = await collection.ExistsAsync(profileName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Profile-GET-WithEndpoints
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_ProfileGETWithEndpoints()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-GET-WithEndpoints.json
            // this example is just showing the usage of "Profiles_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager1323";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager3880";
            NullableResponse<TrafficManagerProfileResource> response = await collection.GetIfExistsAsync(profileName);
            TrafficManagerProfileResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                TrafficManagerProfileData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Profile-GET-WithTrafficViewDisabled
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ProfileGETWithTrafficViewDisabled()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-GET-WithTrafficViewDisabled.json
            // this example is just showing the usage of "Profiles_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager1323";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager3880";
            TrafficManagerProfileResource result = await collection.GetAsync(profileName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrafficManagerProfileData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Profile-GET-WithTrafficViewDisabled
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_ProfileGETWithTrafficViewDisabled()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-GET-WithTrafficViewDisabled.json
            // this example is just showing the usage of "Profiles_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager1323";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager3880";
            bool result = await collection.ExistsAsync(profileName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Profile-GET-WithTrafficViewDisabled
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_ProfileGETWithTrafficViewDisabled()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-GET-WithTrafficViewDisabled.json
            // this example is just showing the usage of "Profiles_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager1323";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager3880";
            NullableResponse<TrafficManagerProfileResource> response = await collection.GetIfExistsAsync(profileName);
            TrafficManagerProfileResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                TrafficManagerProfileData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Profile-GET-WithTrafficViewEnabled
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ProfileGETWithTrafficViewEnabled()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-GET-WithTrafficViewEnabled.json
            // this example is just showing the usage of "Profiles_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager1323";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager3880";
            TrafficManagerProfileResource result = await collection.GetAsync(profileName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrafficManagerProfileData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Profile-GET-WithTrafficViewEnabled
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_ProfileGETWithTrafficViewEnabled()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-GET-WithTrafficViewEnabled.json
            // this example is just showing the usage of "Profiles_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager1323";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager3880";
            bool result = await collection.ExistsAsync(profileName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Profile-GET-WithTrafficViewEnabled
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_ProfileGETWithTrafficViewEnabled()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-GET-WithTrafficViewEnabled.json
            // this example is just showing the usage of "Profiles_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager1323";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager3880";
            NullableResponse<TrafficManagerProfileResource> response = await collection.GetIfExistsAsync(profileName);
            TrafficManagerProfileResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                TrafficManagerProfileData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Profile-PUT-MultiValue
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_ProfilePUTMultiValue()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-PUT-MultiValue.json
            // this example is just showing the usage of "Profiles_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager1421";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azsmnet6386";
            TrafficManagerProfileData data = new TrafficManagerProfileData()
            {
                ProfileStatus = TrafficManagerProfileStatus.Enabled,
                TrafficRoutingMethod = TrafficRoutingMethod.MultiValue,
                DnsConfig = new TrafficManagerDnsConfig()
                {
                    RelativeName = "azsmnet6386",
                    Ttl = 35,
                },
                MonitorConfig = new TrafficManagerMonitorConfig()
                {
                    Protocol = TrafficManagerMonitorProtocol.Http,
                    Port = 80,
                    Path = "/testpath.aspx",
                },
                TrafficViewEnrollmentStatus = TrafficViewEnrollmentStatus.Disabled,
                MaxReturn = 2,
                Location = new AzureLocation("global"),
            };
            ArmOperation<TrafficManagerProfileResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, profileName, data);
            TrafficManagerProfileResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrafficManagerProfileData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Profile-PUT-NoEndpoints
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_ProfilePUTNoEndpoints()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-PUT-NoEndpoints.json
            // this example is just showing the usage of "Profiles_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager1421";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azsmnet6386";
            TrafficManagerProfileData data = new TrafficManagerProfileData()
            {
                ProfileStatus = TrafficManagerProfileStatus.Enabled,
                TrafficRoutingMethod = TrafficRoutingMethod.Performance,
                DnsConfig = new TrafficManagerDnsConfig()
                {
                    RelativeName = "azsmnet6386",
                    Ttl = 35,
                },
                MonitorConfig = new TrafficManagerMonitorConfig()
                {
                    Protocol = TrafficManagerMonitorProtocol.Http,
                    Port = 80,
                    Path = "/testpath.aspx",
                },
                Location = new AzureLocation("global"),
            };
            ArmOperation<TrafficManagerProfileResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, profileName, data);
            TrafficManagerProfileResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrafficManagerProfileData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Profile-PUT-WithAliasing
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_ProfilePUTWithAliasing()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-PUT-WithAliasing.json
            // this example is just showing the usage of "Profiles_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager2583";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager6192";
            TrafficManagerProfileData data = new TrafficManagerProfileData()
            {
                ProfileStatus = TrafficManagerProfileStatus.Enabled,
                TrafficRoutingMethod = TrafficRoutingMethod.Performance,
                DnsConfig = new TrafficManagerDnsConfig()
                {
                    RelativeName = "azuresdkfornetautoresttrafficmanager6192",
                    Ttl = 35,
                },
                MonitorConfig = new TrafficManagerMonitorConfig()
                {
                    Protocol = TrafficManagerMonitorProtocol.Http,
                    Port = 80,
                    Path = "/testpath.aspx",
                    IntervalInSeconds = 10,
                    TimeoutInSeconds = 5,
                    ToleratedNumberOfFailures = 2,
                },
                Endpoints =
{
new TrafficManagerEndpointData()
{
Target = "foobar.contoso.com",
EndpointStatus = TrafficManagerEndpointStatus.Enabled,
EndpointLocation = "North Europe",
Name = "My external endpoint",
ResourceType = new ResourceType("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
}
},
                AllowedEndpointRecordTypes =
{
AllowedEndpointRecordType.DomainName
},
                Location = new AzureLocation("global"),
            };
            ArmOperation<TrafficManagerProfileResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, profileName, data);
            TrafficManagerProfileResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrafficManagerProfileData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Profile-PUT-WithCustomHeaders
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_ProfilePUTWithCustomHeaders()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-PUT-WithCustomHeaders.json
            // this example is just showing the usage of "Profiles_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager2583";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager6192";
            TrafficManagerProfileData data = new TrafficManagerProfileData()
            {
                ProfileStatus = TrafficManagerProfileStatus.Enabled,
                TrafficRoutingMethod = TrafficRoutingMethod.Performance,
                DnsConfig = new TrafficManagerDnsConfig()
                {
                    RelativeName = "azuresdkfornetautoresttrafficmanager6192",
                    Ttl = 35,
                },
                MonitorConfig = new TrafficManagerMonitorConfig()
                {
                    Protocol = TrafficManagerMonitorProtocol.Http,
                    Port = 80,
                    Path = "/testpath.aspx",
                    IntervalInSeconds = 10,
                    TimeoutInSeconds = 5,
                    ToleratedNumberOfFailures = 2,
                    CustomHeaders =
{
new TrafficManagerMonitorConfigCustomHeaderInfo()
{
Name = "header-1",
Value = "value-1",
},new TrafficManagerMonitorConfigCustomHeaderInfo()
{
Name = "header-2",
Value = "value-2",
}
},
                    ExpectedStatusCodeRanges =
{
new ExpectedStatusCodeRangeInfo()
{
Min = 200,
Max = 205,
},new ExpectedStatusCodeRangeInfo()
{
Min = 400,
Max = 410,
}
},
                },
                Endpoints =
{
new TrafficManagerEndpointData()
{
Target = "foobar.contoso.com",
EndpointStatus = TrafficManagerEndpointStatus.Enabled,
EndpointLocation = "North Europe",
CustomHeaders =
{
new TrafficManagerEndpointCustomHeaderInfo()
{
Name = "header-2",
Value = "value-2-overridden",
}
},
Name = "My external endpoint",
ResourceType = new ResourceType("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
}
},
                TrafficViewEnrollmentStatus = TrafficViewEnrollmentStatus.Disabled,
                Location = new AzureLocation("global"),
            };
            ArmOperation<TrafficManagerProfileResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, profileName, data);
            TrafficManagerProfileResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrafficManagerProfileData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Profile-PUT-WithEndpoints
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_ProfilePUTWithEndpoints()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-PUT-WithEndpoints.json
            // this example is just showing the usage of "Profiles_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "azuresdkfornetautoresttrafficmanager2583";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "azuresdkfornetautoresttrafficmanager6192";
            TrafficManagerProfileData data = new TrafficManagerProfileData()
            {
                ProfileStatus = TrafficManagerProfileStatus.Enabled,
                TrafficRoutingMethod = TrafficRoutingMethod.Performance,
                DnsConfig = new TrafficManagerDnsConfig()
                {
                    RelativeName = "azuresdkfornetautoresttrafficmanager6192",
                    Ttl = 35,
                },
                MonitorConfig = new TrafficManagerMonitorConfig()
                {
                    Protocol = TrafficManagerMonitorProtocol.Http,
                    Port = 80,
                    Path = "/testpath.aspx",
                    IntervalInSeconds = 10,
                    TimeoutInSeconds = 5,
                    ToleratedNumberOfFailures = 2,
                },
                Endpoints =
{
new TrafficManagerEndpointData()
{
Target = "foobar.contoso.com",
EndpointStatus = TrafficManagerEndpointStatus.Enabled,
EndpointLocation = "North Europe",
Name = "My external endpoint",
ResourceType = new ResourceType("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
}
},
                Location = new AzureLocation("global"),
            };
            ArmOperation<TrafficManagerProfileResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, profileName, data);
            TrafficManagerProfileResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrafficManagerProfileData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Profile-PUT-WithNestedEndpoints
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_ProfilePUTWithNestedEndpoints()
        {
            // Generated from example definition: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2022-04-01/examples/Profile-PUT-WithNestedEndpoints.json
            // this example is just showing the usage of "Profiles_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "myresourcegroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this TrafficManagerProfileResource
            TrafficManagerProfileCollection collection = resourceGroupResource.GetTrafficManagerProfiles();

            // invoke the operation
            string profileName = "parentprofile";
            TrafficManagerProfileData data = new TrafficManagerProfileData()
            {
                ProfileStatus = TrafficManagerProfileStatus.Enabled,
                TrafficRoutingMethod = TrafficRoutingMethod.Priority,
                DnsConfig = new TrafficManagerDnsConfig()
                {
                    RelativeName = "parentprofile",
                    Ttl = 35,
                },
                MonitorConfig = new TrafficManagerMonitorConfig()
                {
                    Protocol = TrafficManagerMonitorProtocol.Http,
                    Port = 80,
                    Path = "/testpath.aspx",
                    IntervalInSeconds = 10,
                    TimeoutInSeconds = 5,
                    ToleratedNumberOfFailures = 2,
                },
                Endpoints =
{
new TrafficManagerEndpointData()
{
Target = "firstnestedprofile.tmpreview.watmtest.azure-test.net",
EndpointStatus = TrafficManagerEndpointStatus.Enabled,
Weight = 1,
Priority = 1,
MinChildEndpoints = 2,
MinChildEndpointsIPv4 = 1,
MinChildEndpointsIPv6 = 2,
Name = "MyFirstNestedEndpoint",
ResourceType = new ResourceType("Microsoft.Network/trafficManagerProfiles/nestedEndpoints"),
},new TrafficManagerEndpointData()
{
Target = "secondnestedprofile.tmpreview.watmtest.azure-test.net",
EndpointStatus = TrafficManagerEndpointStatus.Enabled,
Weight = 1,
Priority = 2,
MinChildEndpoints = 2,
MinChildEndpointsIPv4 = 2,
MinChildEndpointsIPv6 = 1,
Name = "MySecondNestedEndpoint",
ResourceType = new ResourceType("Microsoft.Network/trafficManagerProfiles/nestedEndpoints"),
}
},
                Location = new AzureLocation("global"),
            };
            ArmOperation<TrafficManagerProfileResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, profileName, data);
            TrafficManagerProfileResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrafficManagerProfileData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
