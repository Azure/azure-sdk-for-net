// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.TrafficManager.Models;

namespace Azure.ResourceManager.TrafficManager
{
    /// <summary>
    /// A class representing a collection of <see cref="HeatMapModelResource" /> and their operations.
    /// Each <see cref="HeatMapModelResource" /> in the collection will belong to the same instance of <see cref="ProfileResource" />.
    /// To get a <see cref="HeatMapModelCollection" /> instance call the GetHeatMapModels method from an instance of <see cref="ProfileResource" />.
    /// </summary>
    public partial class HeatMapModelCollection : ArmCollection
    {
        private readonly ClientDiagnostics _heatMapModelHeatMapClientDiagnostics;
        private readonly HeatMapRestOperations _heatMapModelHeatMapRestClient;

        /// <summary> Initializes a new instance of the <see cref="HeatMapModelCollection"/> class for mocking. </summary>
        protected HeatMapModelCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="HeatMapModelCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal HeatMapModelCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _heatMapModelHeatMapClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.TrafficManager", HeatMapModelResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(HeatMapModelResource.ResourceType, out string heatMapModelHeatMapApiVersion);
            _heatMapModelHeatMapRestClient = new HeatMapRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, heatMapModelHeatMapApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ProfileResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ProfileResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets latest heatmap for Traffic Manager profile.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
        /// Operation Id: HeatMap_Get
        /// </summary>
        /// <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        /// <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<HeatMapModelResource>> GetAsync(HeatMapType heatMapType, IEnumerable<double> topLeft = null, IEnumerable<double> botRight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _heatMapModelHeatMapClientDiagnostics.CreateScope("HeatMapModelCollection.Get");
            scope.Start();
            try
            {
                var response = await _heatMapModelHeatMapRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, heatMapType, topLeft, botRight, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HeatMapModelResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets latest heatmap for Traffic Manager profile.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
        /// Operation Id: HeatMap_Get
        /// </summary>
        /// <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        /// <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<HeatMapModelResource> Get(HeatMapType heatMapType, IEnumerable<double> topLeft = null, IEnumerable<double> botRight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _heatMapModelHeatMapClientDiagnostics.CreateScope("HeatMapModelCollection.Get");
            scope.Start();
            try
            {
                var response = _heatMapModelHeatMapRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, heatMapType, topLeft, botRight, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HeatMapModelResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
        /// Operation Id: HeatMap_Get
        /// </summary>
        /// <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        /// <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(HeatMapType heatMapType, IEnumerable<double> topLeft = null, IEnumerable<double> botRight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _heatMapModelHeatMapClientDiagnostics.CreateScope("HeatMapModelCollection.Exists");
            scope.Start();
            try
            {
                var response = await _heatMapModelHeatMapRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, heatMapType, topLeft, botRight, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
        /// Operation Id: HeatMap_Get
        /// </summary>
        /// <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        /// <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(HeatMapType heatMapType, IEnumerable<double> topLeft = null, IEnumerable<double> botRight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _heatMapModelHeatMapClientDiagnostics.CreateScope("HeatMapModelCollection.Exists");
            scope.Start();
            try
            {
                var response = _heatMapModelHeatMapRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, heatMapType, topLeft, botRight, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
