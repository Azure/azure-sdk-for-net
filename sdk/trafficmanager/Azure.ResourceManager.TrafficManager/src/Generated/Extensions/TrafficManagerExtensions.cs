// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TrafficManager.Models;

namespace Azure.ResourceManager.TrafficManager
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.TrafficManager. </summary>
    public static partial class TrafficManagerExtensions
    {
        private static TenantResourceExtensionClient GetExtensionClient(TenantResource tenantResource)
        {
            return tenantResource.GetCachedClient((client) =>
            {
                return new TenantResourceExtensionClient(client, tenantResource.Id);
            }
            );
        }

        /// <summary> Gets an object representing a TrafficManagerGeographicHierarchyResource along with the instance operations that can be performed on it in the TenantResource. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="TrafficManagerGeographicHierarchyResource" /> object. </returns>
        public static TrafficManagerGeographicHierarchyResource GetTrafficManagerGeographicHierarchy(this TenantResource tenantResource)
        {
            return GetExtensionClient(tenantResource).GetTrafficManagerGeographicHierarchy();
        }

        /// <summary>
        /// Checks the availability of a Traffic Manager Relative DNS name.
        /// Request Path: /providers/Microsoft.Network/checkTrafficManagerNameAvailability
        /// Operation Id: Profiles_CheckTrafficManagerRelativeDnsNameAvailability
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="content"> The Traffic Manager name parameters supplied to the CheckTrafficManagerNameAvailability operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static async Task<Response<TrafficManagerNameAvailability>> CheckTrafficManagerRelativeDnsNameAvailabilityProfileAsync(this TenantResource tenantResource, CheckTrafficManagerRelativeDnsNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return await GetExtensionClient(tenantResource).CheckTrafficManagerRelativeDnsNameAvailabilityProfileAsync(content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks the availability of a Traffic Manager Relative DNS name.
        /// Request Path: /providers/Microsoft.Network/checkTrafficManagerNameAvailability
        /// Operation Id: Profiles_CheckTrafficManagerRelativeDnsNameAvailability
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="content"> The Traffic Manager name parameters supplied to the CheckTrafficManagerNameAvailability operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static Response<TrafficManagerNameAvailability> CheckTrafficManagerRelativeDnsNameAvailabilityProfile(this TenantResource tenantResource, CheckTrafficManagerRelativeDnsNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return GetExtensionClient(tenantResource).CheckTrafficManagerRelativeDnsNameAvailabilityProfile(content, cancellationToken);
        }

        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary> Gets an object representing a UserMetricsModelResource along with the instance operations that can be performed on it in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="UserMetricsModelResource" /> object. </returns>
        public static UserMetricsModelResource GetUserMetricsModel(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetUserMetricsModel();
        }

        /// <summary>
        /// Lists all Traffic Manager profiles within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles
        /// Operation Id: Profiles_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProfileResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ProfileResource> GetProfilesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetProfilesAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all Traffic Manager profiles within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles
        /// Operation Id: Profiles_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProfileResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ProfileResource> GetProfiles(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetProfiles(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of ProfileResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ProfileResources and their operations over a ProfileResource. </returns>
        public static ProfileCollection GetProfiles(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetProfiles();
        }

        /// <summary>
        /// Gets a Traffic Manager profile.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
        /// Operation Id: Profiles_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="profileName"> The name of the Traffic Manager profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="profileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="profileName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ProfileResource>> GetProfileAsync(this ResourceGroupResource resourceGroupResource, string profileName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetProfiles().GetAsync(profileName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a Traffic Manager profile.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
        /// Operation Id: Profiles_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="profileName"> The name of the Traffic Manager profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="profileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="profileName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ProfileResource> GetProfile(this ResourceGroupResource resourceGroupResource, string profileName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetProfiles().Get(profileName, cancellationToken);
        }

        #region EndpointResource
        /// <summary>
        /// Gets an object representing an <see cref="EndpointResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EndpointResource.CreateResourceIdentifier" /> to create an <see cref="EndpointResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EndpointResource" /> object. </returns>
        public static EndpointResource GetEndpointResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient<EndpointResource>(() =>
            {
                EndpointResource.ValidateResourceId(id);
                return new EndpointResource(client, id);
            }
            );
        }
        #endregion

        #region ProfileResource
        /// <summary>
        /// Gets an object representing a <see cref="ProfileResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ProfileResource.CreateResourceIdentifier" /> to create a <see cref="ProfileResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ProfileResource" /> object. </returns>
        public static ProfileResource GetProfileResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ProfileResource.ValidateResourceId(id);
                return new ProfileResource(client, id);
            }
            );
        }
        #endregion

        #region TrafficManagerGeographicHierarchyResource
        /// <summary>
        /// Gets an object representing a <see cref="TrafficManagerGeographicHierarchyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TrafficManagerGeographicHierarchyResource.CreateResourceIdentifier" /> to create a <see cref="TrafficManagerGeographicHierarchyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TrafficManagerGeographicHierarchyResource" /> object. </returns>
        public static TrafficManagerGeographicHierarchyResource GetTrafficManagerGeographicHierarchyResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                TrafficManagerGeographicHierarchyResource.ValidateResourceId(id);
                return new TrafficManagerGeographicHierarchyResource(client, id);
            }
            );
        }
        #endregion

        #region HeatMapModelResource
        /// <summary>
        /// Gets an object representing a <see cref="HeatMapModelResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HeatMapModelResource.CreateResourceIdentifier" /> to create a <see cref="HeatMapModelResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HeatMapModelResource" /> object. </returns>
        public static HeatMapModelResource GetHeatMapModelResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HeatMapModelResource.ValidateResourceId(id);
                return new HeatMapModelResource(client, id);
            }
            );
        }
        #endregion

        #region UserMetricsModelResource
        /// <summary>
        /// Gets an object representing an <see cref="UserMetricsModelResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="UserMetricsModelResource.CreateResourceIdentifier" /> to create an <see cref="UserMetricsModelResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="UserMetricsModelResource" /> object. </returns>
        public static UserMetricsModelResource GetUserMetricsModelResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                UserMetricsModelResource.ValidateResourceId(id);
                return new UserMetricsModelResource(client, id);
            }
            );
        }
        #endregion
    }
}
