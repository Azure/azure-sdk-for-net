// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.TrafficManager.Models
{
    /// <summary> When record type is set, a traffic manager profile will allow only endpoints that match this type. </summary>
    public readonly partial struct RecordType : IEquatable<RecordType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RecordType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RecordType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AValue = "A";
        private const string AaaaValue = "AAAA";
        private const string CnameValue = "CNAME";

        /// <summary> A. </summary>
        public static RecordType A { get; } = new RecordType(AValue);
        /// <summary> AAAA. </summary>
        public static RecordType Aaaa { get; } = new RecordType(AaaaValue);
        /// <summary> CNAME. </summary>
        public static RecordType Cname { get; } = new RecordType(CnameValue);
        /// <summary> Determines if two <see cref="RecordType"/> values are the same. </summary>
        public static bool operator ==(RecordType left, RecordType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RecordType"/> values are not the same. </summary>
        public static bool operator !=(RecordType left, RecordType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RecordType"/>. </summary>
        public static implicit operator RecordType(string value) => new RecordType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RecordType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RecordType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
