// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.TrafficManager.Models
{
    public partial class MonitorConfig : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ProfileMonitorStatus))
            {
                writer.WritePropertyName("profileMonitorStatus");
                writer.WriteStringValue(ProfileMonitorStatus.Value.ToString());
            }
            if (Optional.IsDefined(Protocol))
            {
                writer.WritePropertyName("protocol");
                writer.WriteStringValue(Protocol.Value.ToString());
            }
            if (Optional.IsDefined(Port))
            {
                writer.WritePropertyName("port");
                writer.WriteNumberValue(Port.Value);
            }
            if (Optional.IsDefined(Path))
            {
                writer.WritePropertyName("path");
                writer.WriteStringValue(Path);
            }
            if (Optional.IsDefined(IntervalInSeconds))
            {
                writer.WritePropertyName("intervalInSeconds");
                writer.WriteNumberValue(IntervalInSeconds.Value);
            }
            if (Optional.IsDefined(TimeoutInSeconds))
            {
                writer.WritePropertyName("timeoutInSeconds");
                writer.WriteNumberValue(TimeoutInSeconds.Value);
            }
            if (Optional.IsDefined(ToleratedNumberOfFailures))
            {
                writer.WritePropertyName("toleratedNumberOfFailures");
                writer.WriteNumberValue(ToleratedNumberOfFailures.Value);
            }
            if (Optional.IsCollectionDefined(CustomHeaders))
            {
                writer.WritePropertyName("customHeaders");
                writer.WriteStartArray();
                foreach (var item in CustomHeaders)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ExpectedStatusCodeRanges))
            {
                writer.WritePropertyName("expectedStatusCodeRanges");
                writer.WriteStartArray();
                foreach (var item in ExpectedStatusCodeRanges)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static MonitorConfig DeserializeMonitorConfig(JsonElement element)
        {
            Optional<ProfileMonitorStatus> profileMonitorStatus = default;
            Optional<MonitorProtocol> protocol = default;
            Optional<long> port = default;
            Optional<string> path = default;
            Optional<long> intervalInSeconds = default;
            Optional<long> timeoutInSeconds = default;
            Optional<long> toleratedNumberOfFailures = default;
            Optional<IList<MonitorConfigCustomHeadersItem>> customHeaders = default;
            Optional<IList<MonitorConfigExpectedStatusCodeRangesItem>> expectedStatusCodeRanges = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("profileMonitorStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    profileMonitorStatus = new ProfileMonitorStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("protocol"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    protocol = new MonitorProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("port"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    port = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("path"))
                {
                    path = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("intervalInSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    intervalInSeconds = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("timeoutInSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timeoutInSeconds = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("toleratedNumberOfFailures"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    toleratedNumberOfFailures = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("customHeaders"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MonitorConfigCustomHeadersItem> array = new List<MonitorConfigCustomHeadersItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MonitorConfigCustomHeadersItem.DeserializeMonitorConfigCustomHeadersItem(item));
                    }
                    customHeaders = array;
                    continue;
                }
                if (property.NameEquals("expectedStatusCodeRanges"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MonitorConfigExpectedStatusCodeRangesItem> array = new List<MonitorConfigExpectedStatusCodeRangesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MonitorConfigExpectedStatusCodeRangesItem.DeserializeMonitorConfigExpectedStatusCodeRangesItem(item));
                    }
                    expectedStatusCodeRanges = array;
                    continue;
                }
            }
            return new MonitorConfig(Optional.ToNullable(profileMonitorStatus), Optional.ToNullable(protocol), Optional.ToNullable(port), path.Value, Optional.ToNullable(intervalInSeconds), Optional.ToNullable(timeoutInSeconds), Optional.ToNullable(toleratedNumberOfFailures), Optional.ToList(customHeaders), Optional.ToList(expectedStatusCodeRanges));
        }
    }
}
