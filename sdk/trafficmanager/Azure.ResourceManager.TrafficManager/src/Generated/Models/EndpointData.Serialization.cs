// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.TrafficManager.Models;

namespace Azure.ResourceManager.TrafficManager
{
    public partial class EndpointData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(ResourceType))
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(ResourceType);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(TargetResourceId))
            {
                writer.WritePropertyName("targetResourceId");
                writer.WriteStringValue(TargetResourceId);
            }
            if (Optional.IsDefined(Target))
            {
                writer.WritePropertyName("target");
                writer.WriteStringValue(Target);
            }
            if (Optional.IsDefined(EndpointStatus))
            {
                writer.WritePropertyName("endpointStatus");
                writer.WriteStringValue(EndpointStatus.Value.ToString());
            }
            if (Optional.IsDefined(Weight))
            {
                writer.WritePropertyName("weight");
                writer.WriteNumberValue(Weight.Value);
            }
            if (Optional.IsDefined(Priority))
            {
                writer.WritePropertyName("priority");
                writer.WriteNumberValue(Priority.Value);
            }
            if (Optional.IsDefined(EndpointLocation))
            {
                writer.WritePropertyName("endpointLocation");
                writer.WriteStringValue(EndpointLocation);
            }
            if (Optional.IsDefined(EndpointMonitorStatus))
            {
                writer.WritePropertyName("endpointMonitorStatus");
                writer.WriteStringValue(EndpointMonitorStatus.Value.ToString());
            }
            if (Optional.IsDefined(MinChildEndpoints))
            {
                if (MinChildEndpoints != null)
                {
                    writer.WritePropertyName("minChildEndpoints");
                    writer.WriteNumberValue(MinChildEndpoints.Value);
                }
                else
                {
                    writer.WriteNull("minChildEndpoints");
                }
            }
            if (Optional.IsDefined(MinChildEndpointsIPv4))
            {
                if (MinChildEndpointsIPv4 != null)
                {
                    writer.WritePropertyName("minChildEndpointsIPv4");
                    writer.WriteNumberValue(MinChildEndpointsIPv4.Value);
                }
                else
                {
                    writer.WriteNull("minChildEndpointsIPv4");
                }
            }
            if (Optional.IsDefined(MinChildEndpointsIPv6))
            {
                if (MinChildEndpointsIPv6 != null)
                {
                    writer.WritePropertyName("minChildEndpointsIPv6");
                    writer.WriteNumberValue(MinChildEndpointsIPv6.Value);
                }
                else
                {
                    writer.WriteNull("minChildEndpointsIPv6");
                }
            }
            if (Optional.IsCollectionDefined(GeoMapping))
            {
                writer.WritePropertyName("geoMapping");
                writer.WriteStartArray();
                foreach (var item in GeoMapping)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Subnets))
            {
                writer.WritePropertyName("subnets");
                writer.WriteStartArray();
                foreach (var item in Subnets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(CustomHeaders))
            {
                writer.WritePropertyName("customHeaders");
                writer.WriteStartArray();
                foreach (var item in CustomHeaders)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static EndpointData DeserializeEndpointData(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<string> targetResourceId = default;
            Optional<string> target = default;
            Optional<EndpointStatus> endpointStatus = default;
            Optional<long> weight = default;
            Optional<long> priority = default;
            Optional<string> endpointLocation = default;
            Optional<EndpointMonitorStatus> endpointMonitorStatus = default;
            Optional<long?> minChildEndpoints = default;
            Optional<long?> minChildEndpointsIPv4 = default;
            Optional<long?> minChildEndpointsIPv6 = default;
            Optional<IList<string>> geoMapping = default;
            Optional<IList<EndpointPropertiesSubnetsItem>> subnets = default;
            Optional<IList<EndpointPropertiesCustomHeadersItem>> customHeaders = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("targetResourceId"))
                        {
                            targetResourceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("target"))
                        {
                            target = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("endpointStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            endpointStatus = new EndpointStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("weight"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            weight = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("priority"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            priority = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("endpointLocation"))
                        {
                            endpointLocation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("endpointMonitorStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            endpointMonitorStatus = new EndpointMonitorStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("minChildEndpoints"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                minChildEndpoints = null;
                                continue;
                            }
                            minChildEndpoints = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("minChildEndpointsIPv4"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                minChildEndpointsIPv4 = null;
                                continue;
                            }
                            minChildEndpointsIPv4 = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("minChildEndpointsIPv6"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                minChildEndpointsIPv6 = null;
                                continue;
                            }
                            minChildEndpointsIPv6 = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("geoMapping"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            geoMapping = array;
                            continue;
                        }
                        if (property0.NameEquals("subnets"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<EndpointPropertiesSubnetsItem> array = new List<EndpointPropertiesSubnetsItem>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(EndpointPropertiesSubnetsItem.DeserializeEndpointPropertiesSubnetsItem(item));
                            }
                            subnets = array;
                            continue;
                        }
                        if (property0.NameEquals("customHeaders"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<EndpointPropertiesCustomHeadersItem> array = new List<EndpointPropertiesCustomHeadersItem>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(EndpointPropertiesCustomHeadersItem.DeserializeEndpointPropertiesCustomHeadersItem(item));
                            }
                            customHeaders = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new EndpointData(id.Value, name.Value, type.Value, targetResourceId.Value, target.Value, Optional.ToNullable(endpointStatus), Optional.ToNullable(weight), Optional.ToNullable(priority), endpointLocation.Value, Optional.ToNullable(endpointMonitorStatus), Optional.ToNullable(minChildEndpoints), Optional.ToNullable(minChildEndpointsIPv4), Optional.ToNullable(minChildEndpointsIPv6), Optional.ToList(geoMapping), Optional.ToList(subnets), Optional.ToList(customHeaders));
        }
    }
}
