// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using Azure.Core;

namespace Azure.ResourceManager.TrafficManager.Models
{
    /// <summary> Class representing a Traffic Manager HeatMap traffic flow properties. </summary>
    public partial class TrafficManagerHeatMapTrafficFlow
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TrafficManagerHeatMapTrafficFlow"/>. </summary>
        public TrafficManagerHeatMapTrafficFlow()
        {
            QueryExperiences = new ChangeTrackingList<TrafficManagerHeatMapQueryExperience>();
        }

        /// <summary> Initializes a new instance of <see cref="TrafficManagerHeatMapTrafficFlow"/>. </summary>
        /// <param name="sourceIP"> The IP address that this query experience originated from. </param>
        /// <param name="latitude"> The approximate latitude that these queries originated from. </param>
        /// <param name="longitude"> The approximate longitude that these queries originated from. </param>
        /// <param name="queryExperiences"> The query experiences produced in this HeatMap calculation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TrafficManagerHeatMapTrafficFlow(IPAddress sourceIP, double? latitude, double? longitude, IList<TrafficManagerHeatMapQueryExperience> queryExperiences, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SourceIP = sourceIP;
            Latitude = latitude;
            Longitude = longitude;
            QueryExperiences = queryExperiences;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The IP address that this query experience originated from. </summary>
        public IPAddress SourceIP { get; set; }
        /// <summary> The approximate latitude that these queries originated from. </summary>
        public double? Latitude { get; set; }
        /// <summary> The approximate longitude that these queries originated from. </summary>
        public double? Longitude { get; set; }
        /// <summary> The query experiences produced in this HeatMap calculation. </summary>
        public IList<TrafficManagerHeatMapQueryExperience> QueryExperiences { get; }
    }
}
