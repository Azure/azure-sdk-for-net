// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.TrafficManager.Models
{
    /// <summary> The allowed type DNS record types for this profile. </summary>
    public readonly partial struct AllowedEndpointRecordType : IEquatable<AllowedEndpointRecordType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AllowedEndpointRecordType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AllowedEndpointRecordType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DomainNameValue = "DomainName";
        private const string IPv4AddressValue = "IPv4Address";
        private const string IPv6AddressValue = "IPv6Address";
        private const string AnyValue = "Any";

        /// <summary> DomainName. </summary>
        public static AllowedEndpointRecordType DomainName { get; } = new AllowedEndpointRecordType(DomainNameValue);
        /// <summary> IPv4Address. </summary>
        public static AllowedEndpointRecordType IPv4Address { get; } = new AllowedEndpointRecordType(IPv4AddressValue);
        /// <summary> IPv6Address. </summary>
        public static AllowedEndpointRecordType IPv6Address { get; } = new AllowedEndpointRecordType(IPv6AddressValue);
        /// <summary> Any. </summary>
        public static AllowedEndpointRecordType Any { get; } = new AllowedEndpointRecordType(AnyValue);
        /// <summary> Determines if two <see cref="AllowedEndpointRecordType"/> values are the same. </summary>
        public static bool operator ==(AllowedEndpointRecordType left, AllowedEndpointRecordType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AllowedEndpointRecordType"/> values are not the same. </summary>
        public static bool operator !=(AllowedEndpointRecordType left, AllowedEndpointRecordType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AllowedEndpointRecordType"/>. </summary>
        public static implicit operator AllowedEndpointRecordType(string value) => new AllowedEndpointRecordType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AllowedEndpointRecordType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AllowedEndpointRecordType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
