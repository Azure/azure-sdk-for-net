// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.TrafficManager.Models
{
    /// <summary> The profile-level monitoring status of the Traffic Manager profile. </summary>
    public readonly partial struct ProfileMonitorStatus : IEquatable<ProfileMonitorStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProfileMonitorStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProfileMonitorStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CheckingEndpointsValue = "CheckingEndpoints";
        private const string OnlineValue = "Online";
        private const string DegradedValue = "Degraded";
        private const string DisabledValue = "Disabled";
        private const string InactiveValue = "Inactive";

        /// <summary> CheckingEndpoints. </summary>
        public static ProfileMonitorStatus CheckingEndpoints { get; } = new ProfileMonitorStatus(CheckingEndpointsValue);
        /// <summary> Online. </summary>
        public static ProfileMonitorStatus Online { get; } = new ProfileMonitorStatus(OnlineValue);
        /// <summary> Degraded. </summary>
        public static ProfileMonitorStatus Degraded { get; } = new ProfileMonitorStatus(DegradedValue);
        /// <summary> Disabled. </summary>
        public static ProfileMonitorStatus Disabled { get; } = new ProfileMonitorStatus(DisabledValue);
        /// <summary> Inactive. </summary>
        public static ProfileMonitorStatus Inactive { get; } = new ProfileMonitorStatus(InactiveValue);
        /// <summary> Determines if two <see cref="ProfileMonitorStatus"/> values are the same. </summary>
        public static bool operator ==(ProfileMonitorStatus left, ProfileMonitorStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProfileMonitorStatus"/> values are not the same. </summary>
        public static bool operator !=(ProfileMonitorStatus left, ProfileMonitorStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProfileMonitorStatus"/>. </summary>
        public static implicit operator ProfileMonitorStatus(string value) => new ProfileMonitorStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProfileMonitorStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProfileMonitorStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
