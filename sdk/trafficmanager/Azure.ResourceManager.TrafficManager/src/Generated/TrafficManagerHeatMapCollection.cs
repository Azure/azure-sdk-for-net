// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.TrafficManager.Models;

namespace Azure.ResourceManager.TrafficManager
{
    /// <summary>
    /// A class representing a collection of <see cref="TrafficManagerHeatMapResource"/> and their operations.
    /// Each <see cref="TrafficManagerHeatMapResource"/> in the collection will belong to the same instance of <see cref="TrafficManagerProfileResource"/>.
    /// To get a <see cref="TrafficManagerHeatMapCollection"/> instance call the GetTrafficManagerHeatMaps method from an instance of <see cref="TrafficManagerProfileResource"/>.
    /// </summary>
    public partial class TrafficManagerHeatMapCollection : ArmCollection
    {
        private readonly ClientDiagnostics _trafficManagerHeatMapHeatMapClientDiagnostics;
        private readonly HeatMapRestOperations _trafficManagerHeatMapHeatMapRestClient;

        /// <summary> Initializes a new instance of the <see cref="TrafficManagerHeatMapCollection"/> class for mocking. </summary>
        protected TrafficManagerHeatMapCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TrafficManagerHeatMapCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal TrafficManagerHeatMapCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _trafficManagerHeatMapHeatMapClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.TrafficManager", TrafficManagerHeatMapResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(TrafficManagerHeatMapResource.ResourceType, out string trafficManagerHeatMapHeatMapApiVersion);
            _trafficManagerHeatMapHeatMapRestClient = new HeatMapRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, trafficManagerHeatMapHeatMapApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != TrafficManagerProfileResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, TrafficManagerProfileResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets latest heatmap for Traffic Manager profile.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HeatMap_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        /// <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TrafficManagerHeatMapResource>> GetAsync(TrafficManagerHeatMapType heatMapType, IEnumerable<double> topLeft = null, IEnumerable<double> botRight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _trafficManagerHeatMapHeatMapClientDiagnostics.CreateScope("TrafficManagerHeatMapCollection.Get");
            scope.Start();
            try
            {
                var response = await _trafficManagerHeatMapHeatMapRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, heatMapType, topLeft, botRight, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TrafficManagerHeatMapResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets latest heatmap for Traffic Manager profile.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HeatMap_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        /// <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TrafficManagerHeatMapResource> Get(TrafficManagerHeatMapType heatMapType, IEnumerable<double> topLeft = null, IEnumerable<double> botRight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _trafficManagerHeatMapHeatMapClientDiagnostics.CreateScope("TrafficManagerHeatMapCollection.Get");
            scope.Start();
            try
            {
                var response = _trafficManagerHeatMapHeatMapRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, heatMapType, topLeft, botRight, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TrafficManagerHeatMapResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HeatMap_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        /// <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(TrafficManagerHeatMapType heatMapType, IEnumerable<double> topLeft = null, IEnumerable<double> botRight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _trafficManagerHeatMapHeatMapClientDiagnostics.CreateScope("TrafficManagerHeatMapCollection.Exists");
            scope.Start();
            try
            {
                var response = await _trafficManagerHeatMapHeatMapRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, heatMapType, topLeft, botRight, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HeatMap_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        /// <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(TrafficManagerHeatMapType heatMapType, IEnumerable<double> topLeft = null, IEnumerable<double> botRight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _trafficManagerHeatMapHeatMapClientDiagnostics.CreateScope("TrafficManagerHeatMapCollection.Exists");
            scope.Start();
            try
            {
                var response = _trafficManagerHeatMapHeatMapRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, heatMapType, topLeft, botRight, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HeatMap_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        /// <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<NullableResponse<TrafficManagerHeatMapResource>> GetIfExistsAsync(TrafficManagerHeatMapType heatMapType, IEnumerable<double> topLeft = null, IEnumerable<double> botRight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _trafficManagerHeatMapHeatMapClientDiagnostics.CreateScope("TrafficManagerHeatMapCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _trafficManagerHeatMapHeatMapRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, heatMapType, topLeft, botRight, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<TrafficManagerHeatMapResource>(response.GetRawResponse());
                return Response.FromValue(new TrafficManagerHeatMapResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HeatMap_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        /// <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NullableResponse<TrafficManagerHeatMapResource> GetIfExists(TrafficManagerHeatMapType heatMapType, IEnumerable<double> topLeft = null, IEnumerable<double> botRight = null, CancellationToken cancellationToken = default)
        {
            using var scope = _trafficManagerHeatMapHeatMapClientDiagnostics.CreateScope("TrafficManagerHeatMapCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _trafficManagerHeatMapHeatMapRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, heatMapType, topLeft, botRight, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<TrafficManagerHeatMapResource>(response.GetRawResponse());
                return Response.FromValue(new TrafficManagerHeatMapResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
