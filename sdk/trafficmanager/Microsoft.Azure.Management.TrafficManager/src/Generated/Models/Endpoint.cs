// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.TrafficManager.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Class representing a Traffic Manager endpoint.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Endpoint : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Endpoint class.
        /// </summary>
        public Endpoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Endpoint class.
        /// </summary>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Network/trafficManagerProfiles.</param>
        /// <param name="targetResourceId">The Azure Resource URI of the of the
        /// endpoint. Not applicable to endpoints of type
        /// 'ExternalEndpoints'.</param>
        /// <param name="target">The fully-qualified DNS name or IP address of
        /// the endpoint. Traffic Manager returns this value in DNS responses
        /// to direct traffic to this endpoint.</param>
        /// <param name="endpointStatus">The status of the endpoint. If the
        /// endpoint is Enabled, it is probed for endpoint health and is
        /// included in the traffic routing method. Possible values include:
        /// 'Enabled', 'Disabled'</param>
        /// <param name="weight">The weight of this endpoint when using the
        /// 'Weighted' traffic routing method. Possible values are from 1 to
        /// 1000.</param>
        /// <param name="priority">The priority of this endpoint when using the
        /// 'Priority' traffic routing method. Possible values are from 1 to
        /// 1000, lower values represent higher priority. This is an optional
        /// parameter.  If specified, it must be specified on all endpoints,
        /// and no two endpoints can share the same priority value.</param>
        /// <param name="endpointLocation">Specifies the location of the
        /// external or nested endpoints when using the 'Performance' traffic
        /// routing method.</param>
        /// <param name="endpointMonitorStatus">The monitoring status of the
        /// endpoint. Possible values include: 'CheckingEndpoint', 'Online',
        /// 'Degraded', 'Disabled', 'Inactive', 'Stopped'</param>
        /// <param name="minChildEndpoints">The minimum number of endpoints
        /// that must be available in the child profile in order for the parent
        /// profile to be considered available. Only applicable to endpoint of
        /// type 'NestedEndpoints'.</param>
        /// <param name="minChildEndpointsIPv4">The minimum number of IPv4 (DNS
        /// record type A) endpoints that must be available in the child
        /// profile in order for the parent profile to be considered available.
        /// Only applicable to endpoint of type 'NestedEndpoints'.</param>
        /// <param name="minChildEndpointsIPv6">The minimum number of IPv6 (DNS
        /// record type AAAA) endpoints that must be available in the child
        /// profile in order for the parent profile to be considered available.
        /// Only applicable to endpoint of type 'NestedEndpoints'.</param>
        /// <param name="geoMapping">The list of countries/regions mapped to
        /// this endpoint when using the 'Geographic' traffic routing method.
        /// Please consult Traffic Manager Geographic documentation for a full
        /// list of accepted values.</param>
        /// <param name="subnets">The list of subnets, IP addresses, and/or
        /// address ranges mapped to this endpoint when using the 'Subnet'
        /// traffic routing method. An empty list will match all ranges not
        /// covered by other endpoints.</param>
        /// <param name="customHeaders">List of custom headers.</param>
        public Endpoint(string id = default(string), string name = default(string), string type = default(string), string targetResourceId = default(string), string target = default(string), EndpointStatus? endpointStatus = default(EndpointStatus?), long? weight = default(long?), long? priority = default(long?), string endpointLocation = default(string), EndpointMonitorStatus? endpointMonitorStatus = default(EndpointMonitorStatus?), long? minChildEndpoints = default(long?), long? minChildEndpointsIPv4 = default(long?), long? minChildEndpointsIPv6 = default(long?), IList<string> geoMapping = default(IList<string>), IList<EndpointPropertiesSubnetsItem> subnets = default(IList<EndpointPropertiesSubnetsItem>), IList<EndpointPropertiesCustomHeadersItem> customHeaders = default(IList<EndpointPropertiesCustomHeadersItem>))
            : base(id, name, type)
        {
            TargetResourceId = targetResourceId;
            Target = target;
            EndpointStatus = endpointStatus;
            Weight = weight;
            Priority = priority;
            EndpointLocation = endpointLocation;
            EndpointMonitorStatus = endpointMonitorStatus;
            MinChildEndpoints = minChildEndpoints;
            MinChildEndpointsIPv4 = minChildEndpointsIPv4;
            MinChildEndpointsIPv6 = minChildEndpointsIPv6;
            GeoMapping = geoMapping;
            Subnets = subnets;
            CustomHeaders = customHeaders;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Azure Resource URI of the of the endpoint. Not
        /// applicable to endpoints of type 'ExternalEndpoints'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetResourceId")]
        public string TargetResourceId { get; set; }

        /// <summary>
        /// Gets or sets the fully-qualified DNS name or IP address of the
        /// endpoint. Traffic Manager returns this value in DNS responses to
        /// direct traffic to this endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "properties.target")]
        public string Target { get; set; }

        /// <summary>
        /// Gets or sets the status of the endpoint. If the endpoint is
        /// Enabled, it is probed for endpoint health and is included in the
        /// traffic routing method. Possible values include: 'Enabled',
        /// 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.endpointStatus")]
        public EndpointStatus? EndpointStatus { get; set; }

        /// <summary>
        /// Gets or sets the weight of this endpoint when using the 'Weighted'
        /// traffic routing method. Possible values are from 1 to 1000.
        /// </summary>
        [JsonProperty(PropertyName = "properties.weight")]
        public long? Weight { get; set; }

        /// <summary>
        /// Gets or sets the priority of this endpoint when using the
        /// 'Priority' traffic routing method. Possible values are from 1 to
        /// 1000, lower values represent higher priority. This is an optional
        /// parameter.  If specified, it must be specified on all endpoints,
        /// and no two endpoints can share the same priority value.
        /// </summary>
        [JsonProperty(PropertyName = "properties.priority")]
        public long? Priority { get; set; }

        /// <summary>
        /// Gets or sets specifies the location of the external or nested
        /// endpoints when using the 'Performance' traffic routing method.
        /// </summary>
        [JsonProperty(PropertyName = "properties.endpointLocation")]
        public string EndpointLocation { get; set; }

        /// <summary>
        /// Gets or sets the monitoring status of the endpoint. Possible values
        /// include: 'CheckingEndpoint', 'Online', 'Degraded', 'Disabled',
        /// 'Inactive', 'Stopped'
        /// </summary>
        [JsonProperty(PropertyName = "properties.endpointMonitorStatus")]
        public EndpointMonitorStatus? EndpointMonitorStatus { get; set; }

        /// <summary>
        /// Gets or sets the minimum number of endpoints that must be available
        /// in the child profile in order for the parent profile to be
        /// considered available. Only applicable to endpoint of type
        /// 'NestedEndpoints'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.minChildEndpoints")]
        public long? MinChildEndpoints { get; set; }

        /// <summary>
        /// Gets or sets the minimum number of IPv4 (DNS record type A)
        /// endpoints that must be available in the child profile in order for
        /// the parent profile to be considered available. Only applicable to
        /// endpoint of type 'NestedEndpoints'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.minChildEndpointsIPv4")]
        public long? MinChildEndpointsIPv4 { get; set; }

        /// <summary>
        /// Gets or sets the minimum number of IPv6 (DNS record type AAAA)
        /// endpoints that must be available in the child profile in order for
        /// the parent profile to be considered available. Only applicable to
        /// endpoint of type 'NestedEndpoints'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.minChildEndpointsIPv6")]
        public long? MinChildEndpointsIPv6 { get; set; }

        /// <summary>
        /// Gets or sets the list of countries/regions mapped to this endpoint
        /// when using the 'Geographic' traffic routing method. Please consult
        /// Traffic Manager Geographic documentation for a full list of
        /// accepted values.
        /// </summary>
        [JsonProperty(PropertyName = "properties.geoMapping")]
        public IList<string> GeoMapping { get; set; }

        /// <summary>
        /// Gets or sets the list of subnets, IP addresses, and/or address
        /// ranges mapped to this endpoint when using the 'Subnet' traffic
        /// routing method. An empty list will match all ranges not covered by
        /// other endpoints.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subnets")]
        public IList<EndpointPropertiesSubnetsItem> Subnets { get; set; }

        /// <summary>
        /// Gets or sets list of custom headers.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customHeaders")]
        public IList<EndpointPropertiesCustomHeadersItem> CustomHeaders { get; set; }

    }
}
