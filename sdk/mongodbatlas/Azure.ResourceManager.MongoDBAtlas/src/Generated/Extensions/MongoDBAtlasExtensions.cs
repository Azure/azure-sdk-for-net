// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.MongoDBAtlas.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.MongoDBAtlas
{
    /// <summary></summary>
    public static partial class MongoDBAtlasExtensions
    {
        /// <param name="client"></param>
        public static MockableMongoDBAtlasArmClient GetMockableMongoDBAtlasArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableMongoDBAtlasArmClient(client0, ResourceIdentifier.Root));
        }

        /// <param name="resourceGroupResource"></param>
        public static MockableMongoDBAtlasResourceGroupResource GetMockableMongoDBAtlasResourceGroupResource(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient(client => new MockableMongoDBAtlasResourceGroupResource(client, resourceGroupResource.Id));
        }

        /// <summary> Gets an object representing a <see cref="MongoDBAtlasOrganizationResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="MongoDBAtlasOrganizationResource"/> object. </returns>
        public static MongoDBAtlasOrganizationResource GetMongoDBAtlasOrganizationResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableMongoDBAtlasArmClient(client).GetMongoDBAtlasOrganizationResource(id);
        }

        /// <summary> Gets a collection of MongoDBAtlasOrganizations in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of MongoDBAtlasOrganizations and their operations over a MongoDBAtlasOrganizationResource. </returns>
        public static MongoDBAtlasOrganizationCollection GetMongoDBAtlasOrganizations(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableMongoDBAtlasResourceGroupResource(resourceGroupResource).GetMongoDBAtlasOrganizations();
        }

        /// <summary> Get a OrganizationResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="organizationName"> Name of the Organization resource. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="organizationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="organizationName"/> is an empty string, and was expected to be non-empty. </exception>
        public static Response<MongoDBAtlasOrganizationResource> GetMongoDBAtlasOrganization(this ResourceGroupResource resourceGroupResource, string organizationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));
            Argument.AssertNotNullOrEmpty(organizationName, nameof(organizationName));

            return GetMockableMongoDBAtlasResourceGroupResource(resourceGroupResource).GetMongoDBAtlasOrganization(organizationName, cancellationToken);
        }

        /// <summary> Get a OrganizationResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="organizationName"> Name of the Organization resource. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="organizationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="organizationName"/> is an empty string, and was expected to be non-empty. </exception>
        public static async Task<Response<MongoDBAtlasOrganizationResource>> GetMongoDBAtlasOrganizationAsync(this ResourceGroupResource resourceGroupResource, string organizationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));
            Argument.AssertNotNullOrEmpty(organizationName, nameof(organizationName));

            return await GetMockableMongoDBAtlasResourceGroupResource(resourceGroupResource).GetMongoDBAtlasOrganizationAsync(organizationName, cancellationToken).ConfigureAwait(false);
        }
    }
}
