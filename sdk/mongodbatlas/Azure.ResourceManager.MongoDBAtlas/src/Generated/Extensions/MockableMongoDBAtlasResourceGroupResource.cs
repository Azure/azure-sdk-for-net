// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.MongoDBAtlas;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.MongoDBAtlas.Mocking
{
    /// <summary> A class to add extension methods to <see cref="ResourceGroupResource"/>. </summary>
    public partial class MockableMongoDBAtlasResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableMongoDBAtlasResourceGroupResource for mocking. </summary>
        protected MockableMongoDBAtlasResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableMongoDBAtlasResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableMongoDBAtlasResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of MongoDBAtlasOrganizations in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of MongoDBAtlasOrganizations and their operations over a MongoDBAtlasOrganizationResource. </returns>
        public virtual MongoDBAtlasOrganizationCollection GetMongoDBAtlasOrganizations()
        {
            return GetCachedClient(client => new MongoDBAtlasOrganizationCollection(client, Id));
        }

        /// <summary> Get a OrganizationResource. </summary>
        /// <param name="organizationName"> Name of the Organization resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="organizationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="organizationName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MongoDBAtlasOrganizationResource>> GetMongoDBAtlasOrganizationAsync(string organizationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(organizationName, nameof(organizationName));

            return await GetMongoDBAtlasOrganizations().GetAsync(organizationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a OrganizationResource. </summary>
        /// <param name="organizationName"> Name of the Organization resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="organizationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="organizationName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MongoDBAtlasOrganizationResource> GetMongoDBAtlasOrganization(string organizationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(organizationName, nameof(organizationName));

            return GetMongoDBAtlasOrganizations().Get(organizationName, cancellationToken);
        }
    }
}
