// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.ResourceManager.StorageDiscovery;

namespace Azure.ResourceManager.StorageDiscovery.Models
{
    /// <summary> Storage Discovery Scope. This had added validations. </summary>
    public partial class StorageDiscoveryScope
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="StorageDiscoveryScope"/>. </summary>
        /// <param name="displayName"> Display name of the collection. </param>
        /// <param name="resourceTypes"> Resource types for the collection. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="displayName"/> or <paramref name="resourceTypes"/> is null. </exception>
        public StorageDiscoveryScope(string displayName, IEnumerable<StorageDiscoveryResourceType> resourceTypes)
        {
            Argument.AssertNotNull(displayName, nameof(displayName));
            Argument.AssertNotNull(resourceTypes, nameof(resourceTypes));

            DisplayName = displayName;
            ResourceTypes = resourceTypes.ToList();
            TagKeysOnly = new ChangeTrackingList<string>();
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="StorageDiscoveryScope"/>. </summary>
        /// <param name="displayName"> Display name of the collection. </param>
        /// <param name="resourceTypes"> Resource types for the collection. </param>
        /// <param name="tagKeysOnly"> The storage account tags keys to filter. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal StorageDiscoveryScope(string displayName, IList<StorageDiscoveryResourceType> resourceTypes, IList<string> tagKeysOnly, IDictionary<string, string> tags, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            DisplayName = displayName;
            ResourceTypes = resourceTypes;
            TagKeysOnly = tagKeysOnly;
            Tags = tags;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Display name of the collection. </summary>
        public string DisplayName { get; set; }

        /// <summary> Resource types for the collection. </summary>
        public IList<StorageDiscoveryResourceType> ResourceTypes { get; }

        /// <summary> The storage account tags keys to filter. </summary>
        public IList<string> TagKeysOnly { get; }

        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
    }
}
