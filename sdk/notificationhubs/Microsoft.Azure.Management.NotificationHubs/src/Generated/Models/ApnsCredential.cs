// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NotificationHubs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Description of a NotificationHub ApnsCredential.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ApnsCredential
    {
        /// <summary>
        /// Initializes a new instance of the ApnsCredential class.
        /// </summary>
        public ApnsCredential()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApnsCredential class.
        /// </summary>
        /// <param name="apnsCertificate">The APNS certificate. Specify if
        /// using Certificate Authentication Mode.</param>
        /// <param name="certificateKey">The APNS certificate password if it
        /// exists.</param>
        /// <param name="endpoint">The APNS endpoint of this credential. If
        /// using Certificate Authentication Mode and Sandbox specify
        /// 'gateway.sandbox.push.apple.com'. If using Certificate
        /// Authentication Mode and Production specify
        /// 'gateway.push.apple.com'. If using Token Authentication Mode and
        /// Sandbox specify
        /// 'https://api.development.push.apple.com:443/3/device'. If using
        /// Token Authentication Mode and Production specify
        /// 'https://api.push.apple.com:443/3/device'.</param>
        /// <param name="thumbprint">The APNS certificate thumbprint. Specify
        /// if using Certificate Authentication Mode.</param>
        /// <param name="keyId">A 10-character key identifier (kid) key,
        /// obtained from your developer account. Specify if using Token
        /// Authentication Mode.</param>
        /// <param name="appName">The name of the application or BundleId.
        /// Specify if using Token Authentication Mode.</param>
        /// <param name="appId">The issuer (iss) registered claim key. The
        /// value is a 10-character TeamId, obtained from your developer
        /// account. Specify if using Token Authentication Mode.</param>
        /// <param name="token">Provider Authentication Token, obtained through
        /// your developer account. Specify if using Token Authentication
        /// Mode.</param>
        public ApnsCredential(string apnsCertificate = default(string), string certificateKey = default(string), string endpoint = default(string), string thumbprint = default(string), string keyId = default(string), string appName = default(string), string appId = default(string), string token = default(string))
        {
            ApnsCertificate = apnsCertificate;
            CertificateKey = certificateKey;
            Endpoint = endpoint;
            Thumbprint = thumbprint;
            KeyId = keyId;
            AppName = appName;
            AppId = appId;
            Token = token;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the APNS certificate. Specify if using Certificate
        /// Authentication Mode.
        /// </summary>
        [JsonProperty(PropertyName = "properties.apnsCertificate")]
        public string ApnsCertificate { get; set; }

        /// <summary>
        /// Gets or sets the APNS certificate password if it exists.
        /// </summary>
        [JsonProperty(PropertyName = "properties.certificateKey")]
        public string CertificateKey { get; set; }

        /// <summary>
        /// Gets or sets the APNS endpoint of this credential. If using
        /// Certificate Authentication Mode and Sandbox specify
        /// 'gateway.sandbox.push.apple.com'. If using Certificate
        /// Authentication Mode and Production specify
        /// 'gateway.push.apple.com'. If using Token Authentication Mode and
        /// Sandbox specify
        /// 'https://api.development.push.apple.com:443/3/device'. If using
        /// Token Authentication Mode and Production specify
        /// 'https://api.push.apple.com:443/3/device'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.endpoint")]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or sets the APNS certificate thumbprint. Specify if using
        /// Certificate Authentication Mode.
        /// </summary>
        [JsonProperty(PropertyName = "properties.thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Gets or sets a 10-character key identifier (kid) key, obtained from
        /// your developer account. Specify if using Token Authentication Mode.
        /// </summary>
        [JsonProperty(PropertyName = "properties.keyId")]
        public string KeyId { get; set; }

        /// <summary>
        /// Gets or sets the name of the application or BundleId. Specify if
        /// using Token Authentication Mode.
        /// </summary>
        [JsonProperty(PropertyName = "properties.appName")]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or sets the issuer (iss) registered claim key. The value is a
        /// 10-character TeamId, obtained from your developer account. Specify
        /// if using Token Authentication Mode.
        /// </summary>
        [JsonProperty(PropertyName = "properties.appId")]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or sets provider Authentication Token, obtained through your
        /// developer account. Specify if using Token Authentication Mode.
        /// </summary>
        [JsonProperty(PropertyName = "properties.token")]
        public string Token { get; set; }

    }
}
