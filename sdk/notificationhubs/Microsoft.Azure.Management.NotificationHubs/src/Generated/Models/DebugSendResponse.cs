// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NotificationHubs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Description of a NotificationHub Resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DebugSendResponse : Resource
    {
        /// <summary>
        /// Initializes a new instance of the DebugSendResponse class.
        /// </summary>
        public DebugSendResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DebugSendResponse class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Resource location</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="sku">The sku of the created namespace</param>
        /// <param name="success">successful send</param>
        /// <param name="failure">send failure</param>
        /// <param name="results">actual failure description</param>
        public DebugSendResponse(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), Sku sku = default(Sku), double? success = default(double?), double? failure = default(double?), object results = default(object))
            : base(id, name, type, location, tags, sku)
        {
            Success = success;
            Failure = failure;
            Results = results;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets successful send
        /// </summary>
        [JsonProperty(PropertyName = "properties.success")]
        public double? Success { get; set; }

        /// <summary>
        /// Gets or sets send failure
        /// </summary>
        [JsonProperty(PropertyName = "properties.failure")]
        public double? Failure { get; set; }

        /// <summary>
        /// Gets or sets actual failure description
        /// </summary>
        [JsonProperty(PropertyName = "properties.results")]
        public object Results { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
