// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NotificationHubs.Models
{
    /// <summary> Allowed replication region. </summary>
    public readonly partial struct ReplicationRegion : IEquatable<ReplicationRegion>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ReplicationRegion"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ReplicationRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string WestUs2Value = "WestUs2";
        private const string NorthEuropeValue = "NorthEurope";
        private const string AustraliaEastValue = "AustraliaEast";
        private const string BrazilSouthValue = "BrazilSouth";
        private const string SouthEastAsiaValue = "SouthEastAsia";
        private const string SouthAfricaNorthValue = "SouthAfricaNorth";
        private const string NoneValue = "None";

        /// <summary> Default. </summary>
        public static ReplicationRegion Default { get; } = new ReplicationRegion(DefaultValue);
        /// <summary> WestUs2. </summary>
        public static ReplicationRegion WestUs2 { get; } = new ReplicationRegion(WestUs2Value);
        /// <summary> NorthEurope. </summary>
        public static ReplicationRegion NorthEurope { get; } = new ReplicationRegion(NorthEuropeValue);
        /// <summary> AustraliaEast. </summary>
        public static ReplicationRegion AustraliaEast { get; } = new ReplicationRegion(AustraliaEastValue);
        /// <summary> BrazilSouth. </summary>
        public static ReplicationRegion BrazilSouth { get; } = new ReplicationRegion(BrazilSouthValue);
        /// <summary> SouthEastAsia. </summary>
        public static ReplicationRegion SouthEastAsia { get; } = new ReplicationRegion(SouthEastAsiaValue);
        /// <summary> SouthAfricaNorth. </summary>
        public static ReplicationRegion SouthAfricaNorth { get; } = new ReplicationRegion(SouthAfricaNorthValue);
        /// <summary> None. </summary>
        public static ReplicationRegion None { get; } = new ReplicationRegion(NoneValue);
        /// <summary> Determines if two <see cref="ReplicationRegion"/> values are the same. </summary>
        public static bool operator ==(ReplicationRegion left, ReplicationRegion right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ReplicationRegion"/> values are not the same. </summary>
        public static bool operator !=(ReplicationRegion left, ReplicationRegion right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ReplicationRegion"/>. </summary>
        public static implicit operator ReplicationRegion(string value) => new ReplicationRegion(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ReplicationRegion other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ReplicationRegion other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
