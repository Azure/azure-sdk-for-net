// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.NotificationHubs;

namespace Azure.ResourceManager.NotificationHubs.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class NotificationHubsModelFactory
    {
        /// <summary> Initializes a new instance of NotificationHubSku. </summary>
        /// <param name="name"> Name of the notification hub sku. </param>
        /// <param name="tier"> The tier of particular sku. </param>
        /// <param name="size"> The Sku size. </param>
        /// <param name="family"> The Sku Family. </param>
        /// <param name="capacity"> The capacity of the resource. </param>
        /// <returns> A new <see cref="Models.NotificationHubSku"/> instance for mocking. </returns>
        public static NotificationHubSku NotificationHubSku(NotificationHubSkuName name = default, string tier = null, string size = null, string family = null, int? capacity = null)
        {
            return new NotificationHubSku(name, tier, size, family, capacity);
        }

        /// <summary> Initializes a new instance of NotificationHubAvailabilityResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="isAvailiable"> True if the name is available and can be used to create new Namespace/NotificationHub. Otherwise false. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <returns> A new <see cref="Models.NotificationHubAvailabilityResult"/> instance for mocking. </returns>
        public static NotificationHubAvailabilityResult NotificationHubAvailabilityResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, bool? isAvailiable = null, NotificationHubSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NotificationHubAvailabilityResult(id, name, resourceType, systemData, tags, location, isAvailiable, sku);
        }

        /// <summary> Initializes a new instance of NotificationHubNamespaceCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="namespaceName"> The name of the namespace. </param>
        /// <param name="provisioningState"> Provisioning state of the Namespace. </param>
        /// <param name="region"> Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe. </param>
        /// <param name="metricId"> Identifier for Azure Insights metrics. </param>
        /// <param name="status"> Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting. </param>
        /// <param name="createdOn"> The time the namespace was created. </param>
        /// <param name="updatedOn"> The time the namespace was updated. </param>
        /// <param name="serviceBusEndpoint"> Endpoint you can use to perform NotificationHub operations. </param>
        /// <param name="subscriptionId"> The Id of the Azure subscription associated with the namespace. </param>
        /// <param name="scaleUnit"> ScaleUnit where the namespace gets created. </param>
        /// <param name="isEnabled"> Whether or not the namespace is currently enabled. </param>
        /// <param name="isCritical"> Whether or not the namespace is set as Critical. </param>
        /// <param name="dataCenter"> Data center for the namespace. </param>
        /// <param name="namespaceType"> The namespace type. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <returns> A new <see cref="Models.NotificationHubNamespaceCreateOrUpdateContent"/> instance for mocking. </returns>
        public static NotificationHubNamespaceCreateOrUpdateContent NotificationHubNamespaceCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string namespaceName = null, string provisioningState = null, string region = null, string metricId = null, string status = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, Uri serviceBusEndpoint = null, string subscriptionId = null, string scaleUnit = null, bool? isEnabled = null, bool? isCritical = null, string dataCenter = null, NotificationHubNamespaceType? namespaceType = null, NotificationHubSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NotificationHubNamespaceCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, namespaceName, provisioningState, region, metricId, status, createdOn, updatedOn, serviceBusEndpoint, subscriptionId, scaleUnit, isEnabled, isCritical, dataCenter, namespaceType, sku);
        }

        /// <summary> Initializes a new instance of NotificationHubNamespaceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="namespaceName"> The name of the namespace. </param>
        /// <param name="provisioningState"> Provisioning state of the Namespace. </param>
        /// <param name="region"> Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe. </param>
        /// <param name="metricId"> Identifier for Azure Insights metrics. </param>
        /// <param name="status"> Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting. </param>
        /// <param name="createdOn"> The time the namespace was created. </param>
        /// <param name="updatedOn"> The time the namespace was updated. </param>
        /// <param name="serviceBusEndpoint"> Endpoint you can use to perform NotificationHub operations. </param>
        /// <param name="subscriptionId"> The Id of the Azure subscription associated with the namespace. </param>
        /// <param name="scaleUnit"> ScaleUnit where the namespace gets created. </param>
        /// <param name="isEnabled"> Whether or not the namespace is currently enabled. </param>
        /// <param name="isCritical"> Whether or not the namespace is set as Critical. </param>
        /// <param name="dataCenter"> Data center for the namespace. </param>
        /// <param name="namespaceType"> The namespace type. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <returns> A new <see cref="NotificationHubs.NotificationHubNamespaceData"/> instance for mocking. </returns>
        public static NotificationHubNamespaceData NotificationHubNamespaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string namespaceName = null, string provisioningState = null, string region = null, string metricId = null, string status = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, Uri serviceBusEndpoint = null, string subscriptionId = null, string scaleUnit = null, bool? isEnabled = null, bool? isCritical = null, string dataCenter = null, NotificationHubNamespaceType? namespaceType = null, NotificationHubSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NotificationHubNamespaceData(id, name, resourceType, systemData, tags, location, namespaceName, provisioningState, region, metricId, status, createdOn, updatedOn, serviceBusEndpoint, subscriptionId, scaleUnit, isEnabled, isCritical, dataCenter, namespaceType, sku);
        }

        /// <summary> Initializes a new instance of SharedAccessAuthorizationRuleProperties. </summary>
        /// <param name="rights"> The rights associated with the rule. </param>
        /// <param name="primaryKey"> A base64-encoded 256-bit primary key for signing and validating the SAS token. </param>
        /// <param name="secondaryKey"> A base64-encoded 256-bit primary key for signing and validating the SAS token. </param>
        /// <param name="keyName"> A string that describes the authorization rule. </param>
        /// <param name="claimType"> A string that describes the claim type. </param>
        /// <param name="claimValue"> A string that describes the claim value. </param>
        /// <param name="modifiedOn"> The last modified time for this rule. </param>
        /// <param name="createdOn"> The created time for this rule. </param>
        /// <param name="revision"> The revision number for the rule. </param>
        /// <returns> A new <see cref="Models.SharedAccessAuthorizationRuleProperties"/> instance for mocking. </returns>
        public static SharedAccessAuthorizationRuleProperties SharedAccessAuthorizationRuleProperties(IEnumerable<AuthorizationRuleAccessRight> rights = null, string primaryKey = null, string secondaryKey = null, string keyName = null, string claimType = null, string claimValue = null, DateTimeOffset? modifiedOn = null, DateTimeOffset? createdOn = null, int? revision = null)
        {
            rights ??= new List<AuthorizationRuleAccessRight>();

            return new SharedAccessAuthorizationRuleProperties(rights?.ToList(), primaryKey, secondaryKey, keyName, claimType, claimValue, modifiedOn, createdOn, revision);
        }

        /// <summary> Initializes a new instance of NotificationHubAuthorizationRuleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="rights"> The rights associated with the rule. </param>
        /// <param name="primaryKey"> A base64-encoded 256-bit primary key for signing and validating the SAS token. </param>
        /// <param name="secondaryKey"> A base64-encoded 256-bit primary key for signing and validating the SAS token. </param>
        /// <param name="keyName"> A string that describes the authorization rule. </param>
        /// <param name="claimType"> A string that describes the claim type. </param>
        /// <param name="claimValue"> A string that describes the claim value. </param>
        /// <param name="modifiedOn"> The last modified time for this rule. </param>
        /// <param name="createdOn"> The created time for this rule. </param>
        /// <param name="revision"> The revision number for the rule. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <returns> A new <see cref="NotificationHubs.NotificationHubAuthorizationRuleData"/> instance for mocking. </returns>
        public static NotificationHubAuthorizationRuleData NotificationHubAuthorizationRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<AuthorizationRuleAccessRight> rights = null, string primaryKey = null, string secondaryKey = null, string keyName = null, string claimType = null, string claimValue = null, DateTimeOffset? modifiedOn = null, DateTimeOffset? createdOn = null, int? revision = null, NotificationHubSku sku = null)
        {
            tags ??= new Dictionary<string, string>();
            rights ??= new List<AuthorizationRuleAccessRight>();

            return new NotificationHubAuthorizationRuleData(id, name, resourceType, systemData, tags, location, rights?.ToList(), primaryKey, secondaryKey, keyName, claimType, claimValue, modifiedOn, createdOn, revision, sku);
        }

        /// <summary> Initializes a new instance of NotificationHubResourceKeys. </summary>
        /// <param name="primaryConnectionString"> PrimaryConnectionString of the AuthorizationRule. </param>
        /// <param name="secondaryConnectionString"> SecondaryConnectionString of the created AuthorizationRule. </param>
        /// <param name="primaryKey"> PrimaryKey of the created AuthorizationRule. </param>
        /// <param name="secondaryKey"> SecondaryKey of the created AuthorizationRule. </param>
        /// <param name="keyName"> KeyName of the created AuthorizationRule. </param>
        /// <returns> A new <see cref="Models.NotificationHubResourceKeys"/> instance for mocking. </returns>
        public static NotificationHubResourceKeys NotificationHubResourceKeys(string primaryConnectionString = null, string secondaryConnectionString = null, string primaryKey = null, string secondaryKey = null, string keyName = null)
        {
            return new NotificationHubResourceKeys(primaryConnectionString, secondaryConnectionString, primaryKey, secondaryKey, keyName);
        }

        /// <summary> Initializes a new instance of NotificationHubCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="notificationHubName"> The NotificationHub name. </param>
        /// <param name="registrationTtl"> The RegistrationTtl of the created NotificationHub. </param>
        /// <param name="authorizationRules"> The AuthorizationRules of the created NotificationHub. </param>
        /// <param name="apnsCredential"> The ApnsCredential of the created NotificationHub. </param>
        /// <param name="wnsCredential"> The WnsCredential of the created NotificationHub. </param>
        /// <param name="gcmCredential"> The GcmCredential of the created NotificationHub. </param>
        /// <param name="mpnsCredential"> The MpnsCredential of the created NotificationHub. </param>
        /// <param name="admCredential"> The AdmCredential of the created NotificationHub. </param>
        /// <param name="baiduCredential"> The BaiduCredential of the created NotificationHub. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <returns> A new <see cref="Models.NotificationHubCreateOrUpdateContent"/> instance for mocking. </returns>
        public static NotificationHubCreateOrUpdateContent NotificationHubCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string notificationHubName = null, TimeSpan? registrationTtl = null, IEnumerable<SharedAccessAuthorizationRuleProperties> authorizationRules = null, NotificationHubApnsCredential apnsCredential = null, NotificationHubWnsCredential wnsCredential = null, NotificationHubGcmCredential gcmCredential = null, NotificationHubMpnsCredential mpnsCredential = null, NotificationHubAdmCredential admCredential = null, NotificationHubBaiduCredential baiduCredential = null, NotificationHubSku sku = null)
        {
            tags ??= new Dictionary<string, string>();
            authorizationRules ??= new List<SharedAccessAuthorizationRuleProperties>();

            return new NotificationHubCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, notificationHubName, registrationTtl, authorizationRules?.ToList(), apnsCredential, wnsCredential, gcmCredential, mpnsCredential, admCredential, baiduCredential, sku);
        }

        /// <summary> Initializes a new instance of NotificationHubApnsCredential. </summary>
        /// <param name="apnsCertificate"> The APNS certificate. Specify if using Certificate Authentication Mode. </param>
        /// <param name="certificateKey"> The APNS certificate password if it exists. </param>
        /// <param name="endpoint"> The APNS endpoint of this credential. If using Certificate Authentication Mode and Sandbox specify &apos;gateway.sandbox.push.apple.com&apos;. If using Certificate Authentication Mode and Production specify &apos;gateway.push.apple.com&apos;. If using Token Authentication Mode and Sandbox specify &apos;https://api.development.push.apple.com:443/3/device&apos;. If using Token Authentication Mode and Production specify &apos;https://api.push.apple.com:443/3/device&apos;. </param>
        /// <param name="thumbprint"> The APNS certificate thumbprint. Specify if using Certificate Authentication Mode. </param>
        /// <param name="keyId"> A 10-character key identifier (kid) key, obtained from your developer account. Specify if using Token Authentication Mode. </param>
        /// <param name="appName"> The name of the application or BundleId. Specify if using Token Authentication Mode. </param>
        /// <param name="appId"> The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from your developer account. Specify if using Token Authentication Mode. </param>
        /// <param name="token"> Provider Authentication Token, obtained through your developer account. Specify if using Token Authentication Mode. </param>
        /// <returns> A new <see cref="Models.NotificationHubApnsCredential"/> instance for mocking. </returns>
        public static NotificationHubApnsCredential NotificationHubApnsCredential(string apnsCertificate = null, string certificateKey = null, Uri endpoint = null, BinaryData thumbprint = null, string keyId = null, string appName = null, string appId = null, string token = null)
        {
            return new NotificationHubApnsCredential(apnsCertificate, certificateKey, endpoint, thumbprint, keyId, appName, appId, token);
        }

        /// <summary> Initializes a new instance of NotificationHubWnsCredential. </summary>
        /// <param name="packageSid"> The package ID for this credential. </param>
        /// <param name="secretKey"> The secret key. </param>
        /// <param name="windowsLiveEndpoint"> The Windows Live endpoint. </param>
        /// <returns> A new <see cref="Models.NotificationHubWnsCredential"/> instance for mocking. </returns>
        public static NotificationHubWnsCredential NotificationHubWnsCredential(string packageSid = null, string secretKey = null, Uri windowsLiveEndpoint = null)
        {
            return new NotificationHubWnsCredential(packageSid, secretKey, windowsLiveEndpoint);
        }

        /// <summary> Initializes a new instance of NotificationHubGcmCredential. </summary>
        /// <param name="gcmEndpoint"> The FCM legacy endpoint. Default value is &apos;https://fcm.googleapis.com/fcm/send&apos;. </param>
        /// <param name="gcmApiKey"> The Google API key. </param>
        /// <returns> A new <see cref="Models.NotificationHubGcmCredential"/> instance for mocking. </returns>
        public static NotificationHubGcmCredential NotificationHubGcmCredential(Uri gcmEndpoint = null, string gcmApiKey = null)
        {
            return new NotificationHubGcmCredential(gcmEndpoint, gcmApiKey);
        }

        /// <summary> Initializes a new instance of NotificationHubMpnsCredential. </summary>
        /// <param name="mpnsCertificate"> The MPNS certificate. </param>
        /// <param name="certificateKey"> The certificate key for this credential. </param>
        /// <param name="thumbprint"> The MPNS certificate Thumbprint. </param>
        /// <returns> A new <see cref="Models.NotificationHubMpnsCredential"/> instance for mocking. </returns>
        public static NotificationHubMpnsCredential NotificationHubMpnsCredential(string mpnsCertificate = null, string certificateKey = null, BinaryData thumbprint = null)
        {
            return new NotificationHubMpnsCredential(mpnsCertificate, certificateKey, thumbprint);
        }

        /// <summary> Initializes a new instance of NotificationHubAdmCredential. </summary>
        /// <param name="clientId"> The client identifier. </param>
        /// <param name="clientSecret"> The credential secret access key. </param>
        /// <param name="authTokenUri"> The URL of the authorization token. </param>
        /// <returns> A new <see cref="Models.NotificationHubAdmCredential"/> instance for mocking. </returns>
        public static NotificationHubAdmCredential NotificationHubAdmCredential(string clientId = null, string clientSecret = null, Uri authTokenUri = null)
        {
            return new NotificationHubAdmCredential(clientId, clientSecret, authTokenUri);
        }

        /// <summary> Initializes a new instance of NotificationHubBaiduCredential. </summary>
        /// <param name="baiduApiKey"> Baidu Api Key. </param>
        /// <param name="baiduEndpoint"> Baidu Endpoint. </param>
        /// <param name="baiduSecretKey"> Baidu Secret Key. </param>
        /// <returns> A new <see cref="Models.NotificationHubBaiduCredential"/> instance for mocking. </returns>
        public static NotificationHubBaiduCredential NotificationHubBaiduCredential(string baiduApiKey = null, Uri baiduEndpoint = null, string baiduSecretKey = null)
        {
            return new NotificationHubBaiduCredential(baiduApiKey, baiduEndpoint, baiduSecretKey);
        }

        /// <summary> Initializes a new instance of NotificationHubData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="notificationHubName"> The NotificationHub name. </param>
        /// <param name="registrationTtl"> The RegistrationTtl of the created NotificationHub. </param>
        /// <param name="authorizationRules"> The AuthorizationRules of the created NotificationHub. </param>
        /// <param name="apnsCredential"> The ApnsCredential of the created NotificationHub. </param>
        /// <param name="wnsCredential"> The WnsCredential of the created NotificationHub. </param>
        /// <param name="gcmCredential"> The GcmCredential of the created NotificationHub. </param>
        /// <param name="mpnsCredential"> The MpnsCredential of the created NotificationHub. </param>
        /// <param name="admCredential"> The AdmCredential of the created NotificationHub. </param>
        /// <param name="baiduCredential"> The BaiduCredential of the created NotificationHub. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <returns> A new <see cref="NotificationHubs.NotificationHubData"/> instance for mocking. </returns>
        public static NotificationHubData NotificationHubData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string notificationHubName = null, TimeSpan? registrationTtl = null, IEnumerable<SharedAccessAuthorizationRuleProperties> authorizationRules = null, NotificationHubApnsCredential apnsCredential = null, NotificationHubWnsCredential wnsCredential = null, NotificationHubGcmCredential gcmCredential = null, NotificationHubMpnsCredential mpnsCredential = null, NotificationHubAdmCredential admCredential = null, NotificationHubBaiduCredential baiduCredential = null, NotificationHubSku sku = null)
        {
            tags ??= new Dictionary<string, string>();
            authorizationRules ??= new List<SharedAccessAuthorizationRuleProperties>();

            return new NotificationHubData(id, name, resourceType, systemData, tags, location, notificationHubName, registrationTtl, authorizationRules?.ToList(), apnsCredential, wnsCredential, gcmCredential, mpnsCredential, admCredential, baiduCredential, sku);
        }

        /// <summary> Initializes a new instance of NotificationHubPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="notificationHubName"> The NotificationHub name. </param>
        /// <param name="registrationTtl"> The RegistrationTtl of the created NotificationHub. </param>
        /// <param name="authorizationRules"> The AuthorizationRules of the created NotificationHub. </param>
        /// <param name="apnsCredential"> The ApnsCredential of the created NotificationHub. </param>
        /// <param name="wnsCredential"> The WnsCredential of the created NotificationHub. </param>
        /// <param name="gcmCredential"> The GcmCredential of the created NotificationHub. </param>
        /// <param name="mpnsCredential"> The MpnsCredential of the created NotificationHub. </param>
        /// <param name="admCredential"> The AdmCredential of the created NotificationHub. </param>
        /// <param name="baiduCredential"> The BaiduCredential of the created NotificationHub. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <returns> A new <see cref="Models.NotificationHubPatch"/> instance for mocking. </returns>
        public static NotificationHubPatch NotificationHubPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string notificationHubName = null, TimeSpan? registrationTtl = null, IEnumerable<SharedAccessAuthorizationRuleProperties> authorizationRules = null, NotificationHubApnsCredential apnsCredential = null, NotificationHubWnsCredential wnsCredential = null, NotificationHubGcmCredential gcmCredential = null, NotificationHubMpnsCredential mpnsCredential = null, NotificationHubAdmCredential admCredential = null, NotificationHubBaiduCredential baiduCredential = null, NotificationHubSku sku = null)
        {
            tags ??= new Dictionary<string, string>();
            authorizationRules ??= new List<SharedAccessAuthorizationRuleProperties>();

            return new NotificationHubPatch(id, name, resourceType, systemData, tags, location, notificationHubName, registrationTtl, authorizationRules?.ToList(), apnsCredential, wnsCredential, gcmCredential, mpnsCredential, admCredential, baiduCredential, sku);
        }

        /// <summary> Initializes a new instance of NotificationHubTestSendResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="success"> successful send. </param>
        /// <param name="failure"> send failure. </param>
        /// <param name="results"> actual failure description. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <returns> A new <see cref="Models.NotificationHubTestSendResult"/> instance for mocking. </returns>
        public static NotificationHubTestSendResult NotificationHubTestSendResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, int? success = null, int? failure = null, BinaryData results = null, NotificationHubSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NotificationHubTestSendResult(id, name, resourceType, systemData, tags, location, success, failure, results, sku);
        }

        /// <summary> Initializes a new instance of NotificationHubPnsCredentials. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="apnsCredential"> The ApnsCredential of the created NotificationHub. </param>
        /// <param name="wnsCredential"> The WnsCredential of the created NotificationHub. </param>
        /// <param name="gcmCredential"> The GcmCredential of the created NotificationHub. </param>
        /// <param name="mpnsCredential"> The MpnsCredential of the created NotificationHub. </param>
        /// <param name="admCredential"> The AdmCredential of the created NotificationHub. </param>
        /// <param name="baiduCredential"> The BaiduCredential of the created NotificationHub. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <returns> A new <see cref="Models.NotificationHubPnsCredentials"/> instance for mocking. </returns>
        public static NotificationHubPnsCredentials NotificationHubPnsCredentials(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NotificationHubApnsCredential apnsCredential = null, NotificationHubWnsCredential wnsCredential = null, NotificationHubGcmCredential gcmCredential = null, NotificationHubMpnsCredential mpnsCredential = null, NotificationHubAdmCredential admCredential = null, NotificationHubBaiduCredential baiduCredential = null, NotificationHubSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NotificationHubPnsCredentials(id, name, resourceType, systemData, tags, location, apnsCredential, wnsCredential, gcmCredential, mpnsCredential, admCredential, baiduCredential, sku);
        }
    }
}
