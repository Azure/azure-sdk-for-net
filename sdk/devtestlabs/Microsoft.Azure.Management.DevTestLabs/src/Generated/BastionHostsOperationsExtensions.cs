// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BastionHostsOperations.
    /// </summary>
    public static partial class BastionHostsOperationsExtensions
    {
            /// <summary>
            /// List bastionhosts in a given virtual network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<BastionHost> List(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, ODataQuery<BastionHost> odataQuery = default(ODataQuery<BastionHost>))
            {
                return operations.ListAsync(resourceGroupName, labName, virtualNetworkName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List bastionhosts in a given virtual network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BastionHost>> ListAsync(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, ODataQuery<BastionHost> odataQuery = default(ODataQuery<BastionHost>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, labName, virtualNetworkName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get bastionhost.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            public static BastionHost Get(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name)
            {
                return operations.GetAsync(resourceGroupName, labName, virtualNetworkName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get bastionhost.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BastionHost> GetAsync(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, labName, virtualNetworkName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or replace an existing bastionHost. This operation can take a while
            /// to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            /// <param name='bastionHost'>
            /// Profile of a Bastion Host
            /// </param>
            public static BastionHost CreateOrUpdate(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name, BastionHost bastionHost)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, labName, virtualNetworkName, name, bastionHost).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace an existing bastionHost. This operation can take a while
            /// to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            /// <param name='bastionHost'>
            /// Profile of a Bastion Host
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BastionHost> CreateOrUpdateAsync(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name, BastionHost bastionHost, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, labName, virtualNetworkName, name, bastionHost, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete bastionhost. This operation can take a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            public static void Delete(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name)
            {
                operations.DeleteAsync(resourceGroupName, labName, virtualNetworkName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete bastionhost. This operation can take a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, labName, virtualNetworkName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Allows modifying tags of bastionhosts. All other properties will be
            /// ignored.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            /// <param name='bastionHost'>
            /// Allows modifying tags of bastionhosts. All other properties will be
            /// ignored.
            /// </param>
            public static BastionHost Update(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name, BastionHostFragment bastionHost)
            {
                return operations.UpdateAsync(resourceGroupName, labName, virtualNetworkName, name, bastionHost).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows modifying tags of bastionhosts. All other properties will be
            /// ignored.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            /// <param name='bastionHost'>
            /// Allows modifying tags of bastionhosts. All other properties will be
            /// ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BastionHost> UpdateAsync(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name, BastionHostFragment bastionHost, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, labName, virtualNetworkName, name, bastionHost, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or replace an existing bastionHost. This operation can take a while
            /// to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            /// <param name='bastionHost'>
            /// Profile of a Bastion Host
            /// </param>
            public static BastionHost BeginCreateOrUpdate(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name, BastionHost bastionHost)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, labName, virtualNetworkName, name, bastionHost).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace an existing bastionHost. This operation can take a while
            /// to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            /// <param name='bastionHost'>
            /// Profile of a Bastion Host
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BastionHost> BeginCreateOrUpdateAsync(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name, BastionHost bastionHost, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, labName, virtualNetworkName, name, bastionHost, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete bastionhost. This operation can take a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            public static void BeginDelete(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name)
            {
                operations.BeginDeleteAsync(resourceGroupName, labName, virtualNetworkName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete bastionhost. This operation can take a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='name'>
            /// The name of the bastionhost.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IBastionHostsOperations operations, string resourceGroupName, string labName, string virtualNetworkName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, labName, virtualNetworkName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List bastionhosts in a given virtual network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BastionHost> ListNext(this IBastionHostsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List bastionhosts in a given virtual network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BastionHost>> ListNextAsync(this IBastionHostsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
