// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties of a shared image
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SharedImage : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the SharedImage class.
        /// </summary>
        public SharedImage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SharedImage class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="definitionName">Shared Image definition name in shared
        /// image gallery</param>
        /// <param name="osType">The operating system of the image. Possible
        /// values include: 'Windows', 'Linux'</param>
        /// <param name="imageType">The type of image in the gallery
        /// (generalized or specialized). Possible values include:
        /// 'Generalized', 'Specialized'</param>
        /// <param name="enableState">Whether or not the image is enabled.
        /// Possible values include: 'Disabled', 'Enabled'</param>
        /// <param name="displayName">Display name of the image</param>
        /// <param name="versions">List of image versions in definition</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource.</param>
        /// <param name="uniqueIdentifier">The unique immutable identifier of a
        /// resource (Guid).</param>
        /// <param name="systemData">The system metadata relating to this
        /// resource</param>
        public SharedImage(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string definitionName = default(string), string osType = default(string), string imageType = default(string), string enableState = default(string), string displayName = default(string), IList<ImageVersionProperties> versions = default(IList<ImageVersionProperties>), string provisioningState = default(string), string uniqueIdentifier = default(string), SystemData systemData = default(SystemData))
            : base(location, id, name, type, tags)
        {
            DefinitionName = definitionName;
            OsType = osType;
            ImageType = imageType;
            EnableState = enableState;
            DisplayName = displayName;
            Versions = versions;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets shared Image definition name in shared image gallery
        /// </summary>
        [JsonProperty(PropertyName = "properties.definitionName")]
        public string DefinitionName { get; set; }

        /// <summary>
        /// Gets or sets the operating system of the image. Possible values
        /// include: 'Windows', 'Linux'
        /// </summary>
        [JsonProperty(PropertyName = "properties.osType")]
        public string OsType { get; set; }

        /// <summary>
        /// Gets or sets the type of image in the gallery (generalized or
        /// specialized). Possible values include: 'Generalized', 'Specialized'
        /// </summary>
        [JsonProperty(PropertyName = "properties.imageType")]
        public string ImageType { get; set; }

        /// <summary>
        /// Gets or sets whether or not the image is enabled. Possible values
        /// include: 'Disabled', 'Enabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableState")]
        public string EnableState { get; set; }

        /// <summary>
        /// Gets or sets display name of the image
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets list of image versions in definition
        /// </summary>
        [JsonProperty(PropertyName = "properties.versions")]
        public IList<ImageVersionProperties> Versions { get; set; }

        /// <summary>
        /// Gets the provisioning status of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier { get; private set; }

        /// <summary>
        /// Gets the system metadata relating to this resource
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
