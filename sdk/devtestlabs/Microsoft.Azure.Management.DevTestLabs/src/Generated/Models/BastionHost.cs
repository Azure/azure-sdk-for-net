// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Profile of a Bastion Host
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class BastionHost : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the BastionHost class.
        /// </summary>
        public BastionHost()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BastionHost class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="externalBastionHostId">The ID of the external
        /// BastionHost resource that corresponds to this DTL
        /// BastionHost</param>
        /// <param name="ipAddressId">The ID of the PublicIpAddress resource
        /// that is created by and paired with this BastionHost</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource.</param>
        /// <param name="uniqueIdentifier">The unique immutable identifier of a
        /// resource (Guid).</param>
        /// <param name="systemData">The system metadata relating to this
        /// resource</param>
        public BastionHost(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string externalBastionHostId = default(string), string ipAddressId = default(string), string provisioningState = default(string), string uniqueIdentifier = default(string), SystemData systemData = default(SystemData))
            : base(location, id, name, type, tags)
        {
            ExternalBastionHostId = externalBastionHostId;
            IpAddressId = ipAddressId;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the ID of the external BastionHost resource that corresponds
        /// to this DTL BastionHost
        /// </summary>
        [JsonProperty(PropertyName = "properties.externalBastionHostId")]
        public string ExternalBastionHostId { get; private set; }

        /// <summary>
        /// Gets the ID of the PublicIpAddress resource that is created by and
        /// paired with this BastionHost
        /// </summary>
        [JsonProperty(PropertyName = "properties.ipAddressId")]
        public string IpAddressId { get; private set; }

        /// <summary>
        /// Gets the provisioning status of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier { get; private set; }

        /// <summary>
        /// Gets the system metadata relating to this resource
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
