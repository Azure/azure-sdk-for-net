// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties for creating a schedule.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ScheduleCreationParameter
    {
        /// <summary>
        /// Initializes a new instance of the ScheduleCreationParameter class.
        /// </summary>
        public ScheduleCreationParameter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduleCreationParameter class.
        /// </summary>
        /// <param name="status">The status of the schedule (i.e. Enabled,
        /// Disabled). Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="taskType">The task type of the schedule (e.g.
        /// LabVmsShutdownTask, LabVmAutoStart).</param>
        /// <param name="weekdays">The days of the week for which the schedule
        /// is set (e.g. Sunday, Monday, Tuesday, etc.).</param>
        /// <param name="time">The time of the day the schedule will
        /// occur.</param>
        /// <param name="time1">The time of day the schedule will
        /// occur.</param>
        /// <param name="minute">Minutes of the hour the schedule will
        /// run.</param>
        /// <param name="timeZoneId">The time zone ID (e.g. Pacific Standard
        /// time).</param>
        /// <param name="status1">If notifications are enabled for this
        /// schedule (i.e. Enabled, Disabled). Possible values include:
        /// 'Enabled', 'Disabled'</param>
        /// <param name="timeInMinutes">Time in minutes before event at which
        /// notification will be sent.</param>
        /// <param name="webhookUrl">The webhook URL to which the notification
        /// will be sent.</param>
        /// <param name="emailRecipient">The email recipient to send
        /// notifications to (can be a list of semi-colon separated email
        /// addresses).</param>
        /// <param name="notificationLocale">The locale to use when sending a
        /// notification (fallback for unsupported languages is EN).</param>
        /// <param name="createdDate">The creation date of the
        /// schedule.</param>
        /// <param name="targetResourceId">The resource ID to which the
        /// schedule belongs</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource.</param>
        /// <param name="uniqueIdentifier">The unique immutable identifier of a
        /// resource (Guid).</param>
        /// <param name="name">The name of the virtual machine or
        /// environment</param>
        /// <param name="location">The location of the new virtual machine or
        /// environment</param>
        /// <param name="tags">The tags of the resource.</param>
        public ScheduleCreationParameter(string status = default(string), string taskType = default(string), IList<string> weekdays = default(IList<string>), string time = default(string), string time1 = default(string), int? minute = default(int?), string timeZoneId = default(string), string status1 = default(string), int? timeInMinutes = default(int?), string webhookUrl = default(string), string emailRecipient = default(string), string notificationLocale = default(string), System.DateTime? createdDate = default(System.DateTime?), string targetResourceId = default(string), string provisioningState = default(string), string uniqueIdentifier = default(string), string name = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Status = status;
            TaskType = taskType;
            Weekdays = weekdays;
            Time = time;
            Time1 = time1;
            Minute = minute;
            TimeZoneId = timeZoneId;
            Status1 = status1;
            TimeInMinutes = timeInMinutes;
            WebhookUrl = webhookUrl;
            EmailRecipient = emailRecipient;
            NotificationLocale = notificationLocale;
            CreatedDate = createdDate;
            TargetResourceId = targetResourceId;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            Name = name;
            Location = location;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the status of the schedule (i.e. Enabled, Disabled).
        /// Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the task type of the schedule (e.g.
        /// LabVmsShutdownTask, LabVmAutoStart).
        /// </summary>
        [JsonProperty(PropertyName = "properties.taskType")]
        public string TaskType { get; set; }

        /// <summary>
        /// Gets or sets the days of the week for which the schedule is set
        /// (e.g. Sunday, Monday, Tuesday, etc.).
        /// </summary>
        [JsonProperty(PropertyName = "properties.weeklyRecurrence.weekdays")]
        public IList<string> Weekdays { get; set; }

        /// <summary>
        /// Gets or sets the time of the day the schedule will occur.
        /// </summary>
        [JsonProperty(PropertyName = "properties.weeklyRecurrence.time")]
        public string Time { get; set; }

        /// <summary>
        /// Gets or sets the time of day the schedule will occur.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dailyRecurrence.time")]
        public string Time1 { get; set; }

        /// <summary>
        /// Gets or sets minutes of the hour the schedule will run.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hourlyRecurrence.minute")]
        public int? Minute { get; set; }

        /// <summary>
        /// Gets or sets the time zone ID (e.g. Pacific Standard time).
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeZoneId")]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// Gets or sets if notifications are enabled for this schedule (i.e.
        /// Enabled, Disabled). Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.notificationSettings.status")]
        public string Status1 { get; set; }

        /// <summary>
        /// Gets or sets time in minutes before event at which notification
        /// will be sent.
        /// </summary>
        [JsonProperty(PropertyName = "properties.notificationSettings.timeInMinutes")]
        public int? TimeInMinutes { get; set; }

        /// <summary>
        /// Gets or sets the webhook URL to which the notification will be
        /// sent.
        /// </summary>
        [JsonProperty(PropertyName = "properties.notificationSettings.webhookUrl")]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Gets or sets the email recipient to send notifications to (can be a
        /// list of semi-colon separated email addresses).
        /// </summary>
        [JsonProperty(PropertyName = "properties.notificationSettings.emailRecipient")]
        public string EmailRecipient { get; set; }

        /// <summary>
        /// Gets or sets the locale to use when sending a notification
        /// (fallback for unsupported languages is EN).
        /// </summary>
        [JsonProperty(PropertyName = "properties.notificationSettings.notificationLocale")]
        public string NotificationLocale { get; set; }

        /// <summary>
        /// Gets the creation date of the schedule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdDate")]
        public System.DateTime? CreatedDate { get; private set; }

        /// <summary>
        /// Gets or sets the resource ID to which the schedule belongs
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetResourceId")]
        public string TargetResourceId { get; set; }

        /// <summary>
        /// Gets the provisioning status of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier { get; private set; }

        /// <summary>
        /// Gets or sets the name of the virtual machine or environment
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the location of the new virtual machine or environment
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the tags of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
