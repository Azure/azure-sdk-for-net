// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A cost item.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class LabCost : Resource
    {
        /// <summary>
        /// Initializes a new instance of the LabCost class.
        /// </summary>
        public LabCost()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LabCost class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="status">Target cost status. Possible values include:
        /// 'Enabled', 'Disabled'</param>
        /// <param name="target">Lab target cost</param>
        /// <param name="costThresholds">Cost thresholds.</param>
        /// <param name="cycleStartDateTime">Reporting cycle start
        /// date.</param>
        /// <param name="cycleEndDateTime">Reporting cycle end date.</param>
        /// <param name="cycleType">Reporting cycle type. Possible values
        /// include: 'CalendarMonth', 'Custom'</param>
        /// <param name="estimatedLabCost">The cost component of the cost
        /// item.</param>
        /// <param name="labCostDetails">The lab cost details component of the
        /// cost data.</param>
        /// <param name="resourceCosts">The resource cost component of the cost
        /// data.</param>
        /// <param name="currencyCode">The currency code of the cost.</param>
        /// <param name="startDateTime">The start time of the cost
        /// data.</param>
        /// <param name="endDateTime">The end time of the cost data.</param>
        /// <param name="createdDate">The creation date of the cost.</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource.</param>
        /// <param name="uniqueIdentifier">The unique immutable identifier of a
        /// resource (Guid).</param>
        /// <param name="systemData">The system metadata relating to this
        /// resource</param>
        public LabCost(string id = default(string), string name = default(string), string type = default(string), string status = default(string), int? target = default(int?), IList<CostThresholdProperties> costThresholds = default(IList<CostThresholdProperties>), System.DateTime? cycleStartDateTime = default(System.DateTime?), System.DateTime? cycleEndDateTime = default(System.DateTime?), string cycleType = default(string), double? estimatedLabCost = default(double?), IList<LabCostDetailsProperties> labCostDetails = default(IList<LabCostDetailsProperties>), IList<LabResourceCostProperties> resourceCosts = default(IList<LabResourceCostProperties>), string currencyCode = default(string), System.DateTime? startDateTime = default(System.DateTime?), System.DateTime? endDateTime = default(System.DateTime?), System.DateTime? createdDate = default(System.DateTime?), string provisioningState = default(string), string uniqueIdentifier = default(string), SystemData systemData = default(SystemData))
            : base(id, name, type)
        {
            Status = status;
            Target = target;
            CostThresholds = costThresholds;
            CycleStartDateTime = cycleStartDateTime;
            CycleEndDateTime = cycleEndDateTime;
            CycleType = cycleType;
            EstimatedLabCost = estimatedLabCost;
            LabCostDetails = labCostDetails;
            ResourceCosts = resourceCosts;
            CurrencyCode = currencyCode;
            StartDateTime = startDateTime;
            EndDateTime = endDateTime;
            CreatedDate = createdDate;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets target cost status. Possible values include:
        /// 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetCost.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets lab target cost
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetCost.target")]
        public int? Target { get; set; }

        /// <summary>
        /// Gets or sets cost thresholds.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetCost.costThresholds")]
        public IList<CostThresholdProperties> CostThresholds { get; set; }

        /// <summary>
        /// Gets or sets reporting cycle start date.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetCost.cycleStartDateTime")]
        public System.DateTime? CycleStartDateTime { get; set; }

        /// <summary>
        /// Gets or sets reporting cycle end date.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetCost.cycleEndDateTime")]
        public System.DateTime? CycleEndDateTime { get; set; }

        /// <summary>
        /// Gets or sets reporting cycle type. Possible values include:
        /// 'CalendarMonth', 'Custom'
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetCost.cycleType")]
        public string CycleType { get; set; }

        /// <summary>
        /// Gets or sets the cost component of the cost item.
        /// </summary>
        [JsonProperty(PropertyName = "properties.labCostSummary.estimatedLabCost")]
        public double? EstimatedLabCost { get; set; }

        /// <summary>
        /// Gets the lab cost details component of the cost data.
        /// </summary>
        [JsonProperty(PropertyName = "properties.labCostDetails")]
        public IList<LabCostDetailsProperties> LabCostDetails { get; private set; }

        /// <summary>
        /// Gets the resource cost component of the cost data.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceCosts")]
        public IList<LabResourceCostProperties> ResourceCosts { get; private set; }

        /// <summary>
        /// Gets or sets the currency code of the cost.
        /// </summary>
        [JsonProperty(PropertyName = "properties.currencyCode")]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or sets the start time of the cost data.
        /// </summary>
        [JsonProperty(PropertyName = "properties.startDateTime")]
        public System.DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the end time of the cost data.
        /// </summary>
        [JsonProperty(PropertyName = "properties.endDateTime")]
        public System.DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or sets the creation date of the cost.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets the provisioning status of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier { get; private set; }

        /// <summary>
        /// Gets the system metadata relating to this resource
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

    }
}
