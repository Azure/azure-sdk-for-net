// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A custom image.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CustomImage : Resource
    {
        /// <summary>
        /// Initializes a new instance of the CustomImage class.
        /// </summary>
        public CustomImage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomImage class.
        /// </summary>
        /// <param name="id">The identifier of the resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="location">The location of the resource.</param>
        /// <param name="tags">The tags of the resource.</param>
        /// <param name="vm">The virtual machine from which the image is to be
        /// created.</param>
        /// <param name="vhd">The VHD from which the image is to be
        /// created.</param>
        /// <param name="description">The description of the custom
        /// image.</param>
        /// <param name="author">The author of the custom image.</param>
        /// <param name="creationDate">The creation date of the custom
        /// image.</param>
        /// <param name="managedImageId">The Managed Image Id backing the
        /// custom image.</param>
        /// <param name="managedSnapshotId">The Managed Snapshot Id backing the
        /// custom image.</param>
        /// <param name="dataDiskStorageInfo">Storage information about the
        /// data disks present in the custom image</param>
        /// <param name="customImagePlan">Storage information about the plan
        /// related to this custom image</param>
        /// <param name="isPlanAuthorized">Whether or not the custom images
        /// underlying offer/plan has been enabled for programmatic
        /// deployment</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource.</param>
        /// <param name="uniqueIdentifier">The unique immutable identifier of a
        /// resource (Guid).</param>
        public CustomImage(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), CustomImagePropertiesFromVm vm = default(CustomImagePropertiesFromVm), CustomImagePropertiesCustom vhd = default(CustomImagePropertiesCustom), string description = default(string), string author = default(string), System.DateTime? creationDate = default(System.DateTime?), string managedImageId = default(string), string managedSnapshotId = default(string), IList<DataDiskStorageTypeInfo> dataDiskStorageInfo = default(IList<DataDiskStorageTypeInfo>), CustomImagePropertiesFromPlan customImagePlan = default(CustomImagePropertiesFromPlan), bool? isPlanAuthorized = default(bool?), string provisioningState = default(string), string uniqueIdentifier = default(string))
            : base(id, name, type, location, tags)
        {
            Vm = vm;
            Vhd = vhd;
            Description = description;
            Author = author;
            CreationDate = creationDate;
            ManagedImageId = managedImageId;
            ManagedSnapshotId = managedSnapshotId;
            DataDiskStorageInfo = dataDiskStorageInfo;
            CustomImagePlan = customImagePlan;
            IsPlanAuthorized = isPlanAuthorized;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the virtual machine from which the image is to be
        /// created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vm")]
        public CustomImagePropertiesFromVm Vm { get; set; }

        /// <summary>
        /// Gets or sets the VHD from which the image is to be created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vhd")]
        public CustomImagePropertiesCustom Vhd { get; set; }

        /// <summary>
        /// Gets or sets the description of the custom image.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the author of the custom image.
        /// </summary>
        [JsonProperty(PropertyName = "properties.author")]
        public string Author { get; set; }

        /// <summary>
        /// Gets the creation date of the custom image.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate { get; private set; }

        /// <summary>
        /// Gets or sets the Managed Image Id backing the custom image.
        /// </summary>
        [JsonProperty(PropertyName = "properties.managedImageId")]
        public string ManagedImageId { get; set; }

        /// <summary>
        /// Gets or sets the Managed Snapshot Id backing the custom image.
        /// </summary>
        [JsonProperty(PropertyName = "properties.managedSnapshotId")]
        public string ManagedSnapshotId { get; set; }

        /// <summary>
        /// Gets or sets storage information about the data disks present in
        /// the custom image
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataDiskStorageInfo")]
        public IList<DataDiskStorageTypeInfo> DataDiskStorageInfo { get; set; }

        /// <summary>
        /// Gets or sets storage information about the plan related to this
        /// custom image
        /// </summary>
        [JsonProperty(PropertyName = "properties.customImagePlan")]
        public CustomImagePropertiesFromPlan CustomImagePlan { get; set; }

        /// <summary>
        /// Gets or sets whether or not the custom images underlying offer/plan
        /// has been enabled for programmatic deployment
        /// </summary>
        [JsonProperty(PropertyName = "properties.isPlanAuthorized")]
        public bool? IsPlanAuthorized { get; set; }

        /// <summary>
        /// Gets the provisioning status of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Vhd != null)
            {
                Vhd.Validate();
            }
        }
    }
}
