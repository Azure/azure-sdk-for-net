// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties of an artifact.
    /// </summary>
    public partial class ArtifactInstallProperties
    {
        /// <summary>
        /// Initializes a new instance of the ArtifactInstallProperties class.
        /// </summary>
        public ArtifactInstallProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ArtifactInstallProperties class.
        /// </summary>
        /// <param name="artifactId">The artifact's identifier.</param>
        /// <param name="artifactTitle">The artifact's title.</param>
        /// <param name="parameters">The parameters of the artifact.</param>
        /// <param name="status">The status of the artifact.</param>
        /// <param name="deploymentStatusMessage">The status message from the
        /// deployment.</param>
        /// <param name="vmExtensionStatusMessage">The status message from the
        /// virtual machine extension.</param>
        /// <param name="installTime">The time that the artifact starts to
        /// install on the virtual machine.</param>
        public ArtifactInstallProperties(string artifactId = default(string), string artifactTitle = default(string), IList<ArtifactParameterProperties> parameters = default(IList<ArtifactParameterProperties>), string status = default(string), string deploymentStatusMessage = default(string), string vmExtensionStatusMessage = default(string), System.DateTime? installTime = default(System.DateTime?))
        {
            ArtifactId = artifactId;
            ArtifactTitle = artifactTitle;
            Parameters = parameters;
            Status = status;
            DeploymentStatusMessage = deploymentStatusMessage;
            VmExtensionStatusMessage = vmExtensionStatusMessage;
            InstallTime = installTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the artifact's identifier.
        /// </summary>
        [JsonProperty(PropertyName = "artifactId")]
        public string ArtifactId { get; set; }

        /// <summary>
        /// Gets or sets the artifact's title.
        /// </summary>
        [JsonProperty(PropertyName = "artifactTitle")]
        public string ArtifactTitle { get; set; }

        /// <summary>
        /// Gets or sets the parameters of the artifact.
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IList<ArtifactParameterProperties> Parameters { get; set; }

        /// <summary>
        /// Gets or sets the status of the artifact.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the status message from the deployment.
        /// </summary>
        [JsonProperty(PropertyName = "deploymentStatusMessage")]
        public string DeploymentStatusMessage { get; set; }

        /// <summary>
        /// Gets or sets the status message from the virtual machine extension.
        /// </summary>
        [JsonProperty(PropertyName = "vmExtensionStatusMessage")]
        public string VmExtensionStatusMessage { get; set; }

        /// <summary>
        /// Gets or sets the time that the artifact starts to install on the
        /// virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "installTime")]
        public System.DateTime? InstallTime { get; set; }

    }
}
