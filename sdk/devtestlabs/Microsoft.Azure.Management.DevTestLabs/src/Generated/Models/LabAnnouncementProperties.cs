// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of a lab's announcement banner
    /// </summary>
    public partial class LabAnnouncementProperties
    {
        /// <summary>
        /// Initializes a new instance of the LabAnnouncementProperties class.
        /// </summary>
        public LabAnnouncementProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LabAnnouncementProperties class.
        /// </summary>
        /// <param name="title">The plain text title for the lab
        /// announcement</param>
        /// <param name="markdown">The markdown text (if any) that this lab
        /// displays in the UI. If left empty/null, nothing will be
        /// shown.</param>
        /// <param name="enabled">Is the lab announcement active/enabled at
        /// this time?. Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="expirationDate">The time at which the announcement
        /// expires (null for never)</param>
        /// <param name="expired">Has this announcement expired?</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource.</param>
        /// <param name="uniqueIdentifier">The unique immutable identifier of a
        /// resource (Guid).</param>
        public LabAnnouncementProperties(string title = default(string), string markdown = default(string), string enabled = default(string), System.DateTime? expirationDate = default(System.DateTime?), bool? expired = default(bool?), string provisioningState = default(string), string uniqueIdentifier = default(string))
        {
            Title = title;
            Markdown = markdown;
            Enabled = enabled;
            ExpirationDate = expirationDate;
            Expired = expired;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the plain text title for the lab announcement
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the markdown text (if any) that this lab displays in
        /// the UI. If left empty/null, nothing will be shown.
        /// </summary>
        [JsonProperty(PropertyName = "markdown")]
        public string Markdown { get; set; }

        /// <summary>
        /// Gets or sets is the lab announcement active/enabled at this time?.
        /// Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public string Enabled { get; set; }

        /// <summary>
        /// Gets or sets the time at which the announcement expires (null for
        /// never)
        /// </summary>
        [JsonProperty(PropertyName = "expirationDate")]
        public System.DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets has this announcement expired?
        /// </summary>
        [JsonProperty(PropertyName = "expired")]
        public bool? Expired { get; set; }

        /// <summary>
        /// Gets the provisioning status of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [JsonProperty(PropertyName = "uniqueIdentifier")]
        public string UniqueIdentifier { get; private set; }

    }
}
