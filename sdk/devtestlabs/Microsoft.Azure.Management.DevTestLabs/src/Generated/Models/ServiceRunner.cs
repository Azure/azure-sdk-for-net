// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A container for a managed identity to execute DevTest lab services.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServiceRunner : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the ServiceRunner class.
        /// </summary>
        public ServiceRunner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceRunner class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="identityUsageType">The purpose of bringing the
        /// identity to the lab. Ex: To use during Environment creation or to
        /// deploy on the VMs.</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource.</param>
        /// <param name="uniqueIdentifier">The unique immutable identifier of a
        /// resource (Guid).</param>
        /// <param name="serviceRunnerType">Type of identity (SystemAssigned,
        /// UserAssigned, None). Possible values include: 'None',
        /// 'SystemAssigned', 'UserAssigned',
        /// 'SystemAssigned,UserAssigned'</param>
        /// <param name="principalId">The principal id of resource
        /// identity.</param>
        /// <param name="tenantId">The tenant identifier of resource.</param>
        /// <param name="clientSecretUrl">The client secret URL of the
        /// identity.</param>
        /// <param name="userAssignedIdentities">If Type is 'UserAssigned':
        /// List of user assigned identities.</param>
        /// <param name="systemData">The system metadata relating to this
        /// resource</param>
        public ServiceRunner(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string identityUsageType = default(string), string provisioningState = default(string), string uniqueIdentifier = default(string), string serviceRunnerType = default(string), string principalId = default(string), string tenantId = default(string), string clientSecretUrl = default(string), IDictionary<string, object> userAssignedIdentities = default(IDictionary<string, object>), SystemData systemData = default(SystemData))
            : base(location, id, name, type, tags)
        {
            IdentityUsageType = identityUsageType;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            ServiceRunnerType = serviceRunnerType;
            PrincipalId = principalId;
            TenantId = tenantId;
            ClientSecretUrl = clientSecretUrl;
            UserAssignedIdentities = userAssignedIdentities;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the purpose of bringing the identity to the lab. Ex:
        /// To use during Environment creation or to deploy on the VMs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.identityUsageType")]
        public string IdentityUsageType { get; set; }

        /// <summary>
        /// Gets the provisioning status of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier { get; private set; }

        /// <summary>
        /// Gets or sets type of identity (SystemAssigned, UserAssigned, None).
        /// Possible values include: 'None', 'SystemAssigned', 'UserAssigned',
        /// 'SystemAssigned,UserAssigned'
        /// </summary>
        [JsonProperty(PropertyName = "identity.type")]
        public string ServiceRunnerType { get; set; }

        /// <summary>
        /// Gets or sets the principal id of resource identity.
        /// </summary>
        [JsonProperty(PropertyName = "identity.principalId")]
        public string PrincipalId { get; set; }

        /// <summary>
        /// Gets or sets the tenant identifier of resource.
        /// </summary>
        [JsonProperty(PropertyName = "identity.tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or sets the client secret URL of the identity.
        /// </summary>
        [JsonProperty(PropertyName = "identity.clientSecretUrl")]
        public string ClientSecretUrl { get; set; }

        /// <summary>
        /// Gets or sets if Type is 'UserAssigned': List of user assigned
        /// identities.
        /// </summary>
        [JsonProperty(PropertyName = "identity.userAssignedIdentities")]
        public IDictionary<string, object> UserAssignedIdentities { get; set; }

        /// <summary>
        /// Gets the system metadata relating to this resource
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
