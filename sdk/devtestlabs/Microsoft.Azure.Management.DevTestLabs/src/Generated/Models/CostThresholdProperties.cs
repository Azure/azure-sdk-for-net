// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of a cost threshold item.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CostThresholdProperties
    {
        /// <summary>
        /// Initializes a new instance of the CostThresholdProperties class.
        /// </summary>
        public CostThresholdProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CostThresholdProperties class.
        /// </summary>
        /// <param name="thresholdId">The ID of the cost threshold
        /// item.</param>
        /// <param name="thresholdValue">The cost threshold value.</param>
        /// <param name="displayOnChart">Indicates whether this threshold will
        /// be displayed on cost charts. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="sendNotificationWhenExceeded">Indicates whether
        /// notifications will be sent when this threshold is exceeded.
        /// Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="notificationSent">Indicates the datetime when
        /// notifications were last sent for this threshold.</param>
        public CostThresholdProperties(string thresholdId = default(string), double? thresholdValue = default(double?), string displayOnChart = default(string), string sendNotificationWhenExceeded = default(string), string notificationSent = default(string))
        {
            ThresholdId = thresholdId;
            ThresholdValue = thresholdValue;
            DisplayOnChart = displayOnChart;
            SendNotificationWhenExceeded = sendNotificationWhenExceeded;
            NotificationSent = notificationSent;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ID of the cost threshold item.
        /// </summary>
        [JsonProperty(PropertyName = "thresholdId")]
        public string ThresholdId { get; set; }

        /// <summary>
        /// Gets or sets the cost threshold value.
        /// </summary>
        [JsonProperty(PropertyName = "percentageThreshold.thresholdValue")]
        public double? ThresholdValue { get; set; }

        /// <summary>
        /// Gets or sets indicates whether this threshold will be displayed on
        /// cost charts. Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "displayOnChart")]
        public string DisplayOnChart { get; set; }

        /// <summary>
        /// Gets or sets indicates whether notifications will be sent when this
        /// threshold is exceeded. Possible values include: 'Enabled',
        /// 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "sendNotificationWhenExceeded")]
        public string SendNotificationWhenExceeded { get; set; }

        /// <summary>
        /// Gets or sets indicates the datetime when notifications were last
        /// sent for this threshold.
        /// </summary>
        [JsonProperty(PropertyName = "notificationSent")]
        public string NotificationSent { get; set; }

    }
}
