// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    /// <summary> The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)). </summary>
    public readonly partial struct UsagePermissionType : IEquatable<UsagePermissionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UsagePermissionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UsagePermissionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string DenyValue = "Deny";
        private const string AllowValue = "Allow";

        /// <summary> Default. </summary>
        public static UsagePermissionType Default { get; } = new UsagePermissionType(DefaultValue);
        /// <summary> Deny. </summary>
        public static UsagePermissionType Deny { get; } = new UsagePermissionType(DenyValue);
        /// <summary> Allow. </summary>
        public static UsagePermissionType Allow { get; } = new UsagePermissionType(AllowValue);
        /// <summary> Determines if two <see cref="UsagePermissionType"/> values are the same. </summary>
        public static bool operator ==(UsagePermissionType left, UsagePermissionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UsagePermissionType"/> values are not the same. </summary>
        public static bool operator !=(UsagePermissionType left, UsagePermissionType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UsagePermissionType"/>. </summary>
        public static implicit operator UsagePermissionType(string value) => new UsagePermissionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UsagePermissionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UsagePermissionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
