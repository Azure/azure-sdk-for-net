// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    public partial class DevTestLabDataDiskProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(AttachNewDataDiskOptions))
            {
                writer.WritePropertyName("attachNewDataDiskOptions"u8);
                writer.WriteObjectValue(AttachNewDataDiskOptions);
            }
            if (Core.Optional.IsDefined(ExistingLabDiskId))
            {
                writer.WritePropertyName("existingLabDiskId"u8);
                writer.WriteStringValue(ExistingLabDiskId);
            }
            if (Core.Optional.IsDefined(HostCaching))
            {
                writer.WritePropertyName("hostCaching"u8);
                writer.WriteStringValue(HostCaching.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static DevTestLabDataDiskProperties DeserializeDevTestLabDataDiskProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<AttachNewDataDiskDetails> attachNewDataDiskOptions = default;
            Core.Optional<ResourceIdentifier> existingLabDiskId = default;
            Core.Optional<DevTestLabHostCachingOption> hostCaching = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("attachNewDataDiskOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    attachNewDataDiskOptions = AttachNewDataDiskDetails.DeserializeAttachNewDataDiskDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("existingLabDiskId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    existingLabDiskId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hostCaching"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hostCaching = new DevTestLabHostCachingOption(property.Value.GetString());
                    continue;
                }
            }
            return new DevTestLabDataDiskProperties(attachNewDataDiskOptions.Value, existingLabDiskId.Value, Core.Optional.ToNullable(hostCaching));
        }
    }
}
