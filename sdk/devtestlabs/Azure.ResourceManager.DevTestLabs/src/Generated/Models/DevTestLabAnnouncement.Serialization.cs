// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    public partial class DevTestLabAnnouncement : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Core.Optional.IsDefined(Markdown))
            {
                writer.WritePropertyName("markdown"u8);
                writer.WriteStringValue(Markdown);
            }
            if (Core.Optional.IsDefined(Enabled))
            {
                writer.WritePropertyName("enabled"u8);
                writer.WriteStringValue(Enabled.Value.ToString());
            }
            if (Core.Optional.IsDefined(ExpireOn))
            {
                writer.WritePropertyName("expirationDate"u8);
                writer.WriteStringValue(ExpireOn.Value, "O");
            }
            if (Core.Optional.IsDefined(IsExpired))
            {
                writer.WritePropertyName("expired"u8);
                writer.WriteBooleanValue(IsExpired.Value);
            }
            writer.WriteEndObject();
        }

        internal static DevTestLabAnnouncement DeserializeDevTestLabAnnouncement(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> title = default;
            Core.Optional<string> markdown = default;
            Core.Optional<DevTestLabEnableStatus> enabled = default;
            Core.Optional<DateTimeOffset> expirationDate = default;
            Core.Optional<bool> expired = default;
            Core.Optional<string> provisioningState = default;
            Core.Optional<Guid> uniqueIdentifier = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("markdown"u8))
                {
                    markdown = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabled = new DevTestLabEnableStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("expirationDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expirationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("expired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    provisioningState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("uniqueIdentifier"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    uniqueIdentifier = property.Value.GetGuid();
                    continue;
                }
            }
            return new DevTestLabAnnouncement(title.Value, markdown.Value, Core.Optional.ToNullable(enabled), Core.Optional.ToNullable(expirationDate), Core.Optional.ToNullable(expired), provisioningState.Value, Core.Optional.ToNullable(uniqueIdentifier));
        }
    }
}
