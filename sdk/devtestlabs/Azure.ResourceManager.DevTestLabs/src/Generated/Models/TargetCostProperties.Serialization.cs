// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    public partial class TargetCostProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(Target))
            {
                writer.WritePropertyName("target");
                writer.WriteNumberValue(Target.Value);
            }
            if (Optional.IsCollectionDefined(CostThresholds))
            {
                writer.WritePropertyName("costThresholds");
                writer.WriteStartArray();
                foreach (var item in CostThresholds)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(CycleStartOn))
            {
                writer.WritePropertyName("cycleStartDateTime");
                writer.WriteStringValue(CycleStartOn.Value, "O");
            }
            if (Optional.IsDefined(CycleEndOn))
            {
                writer.WritePropertyName("cycleEndDateTime");
                writer.WriteStringValue(CycleEndOn.Value, "O");
            }
            if (Optional.IsDefined(CycleType))
            {
                writer.WritePropertyName("cycleType");
                writer.WriteStringValue(CycleType.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static TargetCostProperties DeserializeTargetCostProperties(JsonElement element)
        {
            Optional<TargetCostStatus> status = default;
            Optional<int> target = default;
            Optional<IList<CostThresholdProperties>> costThresholds = default;
            Optional<DateTimeOffset> cycleStartDateTime = default;
            Optional<DateTimeOffset> cycleEndDateTime = default;
            Optional<ReportingCycleType> cycleType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new TargetCostStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("target"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    target = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("costThresholds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<CostThresholdProperties> array = new List<CostThresholdProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CostThresholdProperties.DeserializeCostThresholdProperties(item));
                    }
                    costThresholds = array;
                    continue;
                }
                if (property.NameEquals("cycleStartDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cycleStartDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("cycleEndDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cycleEndDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("cycleType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cycleType = new ReportingCycleType(property.Value.GetString());
                    continue;
                }
            }
            return new TargetCostProperties(Optional.ToNullable(status), Optional.ToNullable(target), Optional.ToList(costThresholds), Optional.ToNullable(cycleStartDateTime), Optional.ToNullable(cycleEndDateTime), Optional.ToNullable(cycleType));
        }
    }
}
