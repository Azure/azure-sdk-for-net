// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    /// <summary>
    /// Property overrides on a subnet of a virtual network.
    /// Serialized Name: SubnetOverride
    /// </summary>
    public partial class SubnetOverride
    {
        /// <summary> Initializes a new instance of SubnetOverride. </summary>
        public SubnetOverride()
        {
        }

        /// <summary> Initializes a new instance of SubnetOverride. </summary>
        /// <param name="resourceId">
        /// The resource ID of the subnet.
        /// Serialized Name: SubnetOverride.resourceId
        /// </param>
        /// <param name="labSubnetName">
        /// The name given to the subnet within the lab.
        /// Serialized Name: SubnetOverride.labSubnetName
        /// </param>
        /// <param name="useInVmCreationPermission">
        /// Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
        /// Serialized Name: SubnetOverride.useInVmCreationPermission
        /// </param>
        /// <param name="usePublicIPAddressPermission">
        /// Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
        /// Serialized Name: SubnetOverride.usePublicIpAddressPermission
        /// </param>
        /// <param name="sharedPublicIPAddressConfiguration">
        /// Properties that virtual machines on this subnet will share.
        /// Serialized Name: SubnetOverride.sharedPublicIpAddressConfiguration
        /// </param>
        /// <param name="virtualNetworkPoolName">
        /// The virtual network pool associated with this subnet.
        /// Serialized Name: SubnetOverride.virtualNetworkPoolName
        /// </param>
        internal SubnetOverride(string resourceId, string labSubnetName, UsagePermissionType? useInVmCreationPermission, UsagePermissionType? usePublicIPAddressPermission, SubnetSharedPublicIPAddressConfiguration sharedPublicIPAddressConfiguration, string virtualNetworkPoolName)
        {
            ResourceId = resourceId;
            LabSubnetName = labSubnetName;
            UseInVmCreationPermission = useInVmCreationPermission;
            UsePublicIPAddressPermission = usePublicIPAddressPermission;
            SharedPublicIPAddressConfiguration = sharedPublicIPAddressConfiguration;
            VirtualNetworkPoolName = virtualNetworkPoolName;
        }

        /// <summary>
        /// The resource ID of the subnet.
        /// Serialized Name: SubnetOverride.resourceId
        /// </summary>
        public string ResourceId { get; set; }
        /// <summary>
        /// The name given to the subnet within the lab.
        /// Serialized Name: SubnetOverride.labSubnetName
        /// </summary>
        public string LabSubnetName { get; set; }
        /// <summary>
        /// Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
        /// Serialized Name: SubnetOverride.useInVmCreationPermission
        /// </summary>
        public UsagePermissionType? UseInVmCreationPermission { get; set; }
        /// <summary>
        /// Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
        /// Serialized Name: SubnetOverride.usePublicIpAddressPermission
        /// </summary>
        public UsagePermissionType? UsePublicIPAddressPermission { get; set; }
        /// <summary>
        /// Properties that virtual machines on this subnet will share.
        /// Serialized Name: SubnetOverride.sharedPublicIpAddressConfiguration
        /// </summary>
        internal SubnetSharedPublicIPAddressConfiguration SharedPublicIPAddressConfiguration { get; set; }
        /// <summary>
        /// Backend ports that virtual machines on this subnet are allowed to expose
        /// Serialized Name: SubnetSharedPublicIpAddressConfiguration.allowedPorts
        /// </summary>
        public IList<Port> SharedPublicIPAddressAllowedPorts
        {
            get
            {
                if (SharedPublicIPAddressConfiguration is null)
                    SharedPublicIPAddressConfiguration = new SubnetSharedPublicIPAddressConfiguration();
                return SharedPublicIPAddressConfiguration.AllowedPorts;
            }
        }

        /// <summary>
        /// The virtual network pool associated with this subnet.
        /// Serialized Name: SubnetOverride.virtualNetworkPoolName
        /// </summary>
        public string VirtualNetworkPoolName { get; set; }
    }
}
