// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.DevTestLabs.Models
{
    /// <summary>
    /// Properties of a cost threshold item.
    /// Serialized Name: CostThresholdProperties
    /// </summary>
    public partial class CostThresholdProperties
    {
        /// <summary> Initializes a new instance of CostThresholdProperties. </summary>
        public CostThresholdProperties()
        {
        }

        /// <summary> Initializes a new instance of CostThresholdProperties. </summary>
        /// <param name="thresholdId">
        /// The ID of the cost threshold item.
        /// Serialized Name: CostThresholdProperties.thresholdId
        /// </param>
        /// <param name="percentageThreshold">
        /// The value of the percentage cost threshold.
        /// Serialized Name: CostThresholdProperties.percentageThreshold
        /// </param>
        /// <param name="displayOnChart">
        /// Indicates whether this threshold will be displayed on cost charts.
        /// Serialized Name: CostThresholdProperties.displayOnChart
        /// </param>
        /// <param name="sendNotificationWhenExceeded">
        /// Indicates whether notifications will be sent when this threshold is exceeded.
        /// Serialized Name: CostThresholdProperties.sendNotificationWhenExceeded
        /// </param>
        /// <param name="notificationSent">
        /// Indicates the datetime when notifications were last sent for this threshold.
        /// Serialized Name: CostThresholdProperties.notificationSent
        /// </param>
        internal CostThresholdProperties(string thresholdId, PercentageCostThresholdProperties percentageThreshold, CostThresholdStatus? displayOnChart, CostThresholdStatus? sendNotificationWhenExceeded, string notificationSent)
        {
            ThresholdId = thresholdId;
            PercentageThreshold = percentageThreshold;
            DisplayOnChart = displayOnChart;
            SendNotificationWhenExceeded = sendNotificationWhenExceeded;
            NotificationSent = notificationSent;
        }

        /// <summary>
        /// The ID of the cost threshold item.
        /// Serialized Name: CostThresholdProperties.thresholdId
        /// </summary>
        public string ThresholdId { get; set; }
        /// <summary>
        /// The value of the percentage cost threshold.
        /// Serialized Name: CostThresholdProperties.percentageThreshold
        /// </summary>
        internal PercentageCostThresholdProperties PercentageThreshold { get; set; }
        /// <summary>
        /// The cost threshold value.
        /// Serialized Name: PercentageCostThresholdProperties.thresholdValue
        /// </summary>
        public double? ThresholdValue
        {
            get => PercentageThreshold is null ? default : PercentageThreshold.ThresholdValue;
            set
            {
                if (PercentageThreshold is null)
                    PercentageThreshold = new PercentageCostThresholdProperties();
                PercentageThreshold.ThresholdValue = value;
            }
        }

        /// <summary>
        /// Indicates whether this threshold will be displayed on cost charts.
        /// Serialized Name: CostThresholdProperties.displayOnChart
        /// </summary>
        public CostThresholdStatus? DisplayOnChart { get; set; }
        /// <summary>
        /// Indicates whether notifications will be sent when this threshold is exceeded.
        /// Serialized Name: CostThresholdProperties.sendNotificationWhenExceeded
        /// </summary>
        public CostThresholdStatus? SendNotificationWhenExceeded { get; set; }
        /// <summary>
        /// Indicates the datetime when notifications were last sent for this threshold.
        /// Serialized Name: CostThresholdProperties.notificationSent
        /// </summary>
        public string NotificationSent { get; set; }
    }
}
