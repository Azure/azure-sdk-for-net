// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    public partial class LabAnnouncementProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title");
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Markdown))
            {
                writer.WritePropertyName("markdown");
                writer.WriteStringValue(Markdown);
            }
            if (Optional.IsDefined(Enabled))
            {
                writer.WritePropertyName("enabled");
                writer.WriteStringValue(Enabled.Value.ToString());
            }
            if (Optional.IsDefined(ExpireOn))
            {
                writer.WritePropertyName("expirationDate");
                writer.WriteStringValue(ExpireOn.Value, "O");
            }
            if (Optional.IsDefined(Expired))
            {
                writer.WritePropertyName("expired");
                writer.WriteBooleanValue(Expired.Value);
            }
            writer.WriteEndObject();
        }

        internal static LabAnnouncementProperties DeserializeLabAnnouncementProperties(JsonElement element)
        {
            Optional<string> title = default;
            Optional<string> markdown = default;
            Optional<EnableStatus> enabled = default;
            Optional<DateTimeOffset> expirationDate = default;
            Optional<bool> expired = default;
            Optional<string> provisioningState = default;
            Optional<string> uniqueIdentifier = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("title"))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("markdown"))
                {
                    markdown = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enabled = new EnableStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("expirationDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    expirationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("expired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    expired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    provisioningState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("uniqueIdentifier"))
                {
                    uniqueIdentifier = property.Value.GetString();
                    continue;
                }
            }
            return new LabAnnouncementProperties(title.Value, markdown.Value, Optional.ToNullable(enabled), Optional.ToNullable(expirationDate), Optional.ToNullable(expired), provisioningState.Value, uniqueIdentifier.Value);
        }
    }
}
