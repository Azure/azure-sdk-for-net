// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    /// <summary> Caching option for a data disk (i.e. None, ReadOnly, ReadWrite). </summary>
    public readonly partial struct HostCachingOption : IEquatable<HostCachingOption>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HostCachingOption"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HostCachingOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string ReadOnlyValue = "ReadOnly";
        private const string ReadWriteValue = "ReadWrite";

        /// <summary> None. </summary>
        public static HostCachingOption None { get; } = new HostCachingOption(NoneValue);
        /// <summary> ReadOnly. </summary>
        public static HostCachingOption ReadOnly { get; } = new HostCachingOption(ReadOnlyValue);
        /// <summary> ReadWrite. </summary>
        public static HostCachingOption ReadWrite { get; } = new HostCachingOption(ReadWriteValue);
        /// <summary> Determines if two <see cref="HostCachingOption"/> values are the same. </summary>
        public static bool operator ==(HostCachingOption left, HostCachingOption right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HostCachingOption"/> values are not the same. </summary>
        public static bool operator !=(HostCachingOption left, HostCachingOption right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HostCachingOption"/>. </summary>
        public static implicit operator HostCachingOption(string value) => new HostCachingOption(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HostCachingOption other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HostCachingOption other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
