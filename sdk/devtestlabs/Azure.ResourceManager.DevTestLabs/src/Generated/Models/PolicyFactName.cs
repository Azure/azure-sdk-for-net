// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    /// <summary> The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. </summary>
    public readonly partial struct PolicyFactName : IEquatable<PolicyFactName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PolicyFactName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PolicyFactName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UserOwnedLabVmCountValue = "UserOwnedLabVmCount";
        private const string UserOwnedLabPremiumVmCountValue = "UserOwnedLabPremiumVmCount";
        private const string LabVmCountValue = "LabVmCount";
        private const string LabPremiumVmCountValue = "LabPremiumVmCount";
        private const string LabVmSizeValue = "LabVmSize";
        private const string GalleryImageValue = "GalleryImage";
        private const string UserOwnedLabVmCountInSubnetValue = "UserOwnedLabVmCountInSubnet";
        private const string LabTargetCostValue = "LabTargetCost";
        private const string EnvironmentTemplateValue = "EnvironmentTemplate";
        private const string ScheduleEditPermissionValue = "ScheduleEditPermission";

        /// <summary> UserOwnedLabVmCount. </summary>
        public static PolicyFactName UserOwnedLabVmCount { get; } = new PolicyFactName(UserOwnedLabVmCountValue);
        /// <summary> UserOwnedLabPremiumVmCount. </summary>
        public static PolicyFactName UserOwnedLabPremiumVmCount { get; } = new PolicyFactName(UserOwnedLabPremiumVmCountValue);
        /// <summary> LabVmCount. </summary>
        public static PolicyFactName LabVmCount { get; } = new PolicyFactName(LabVmCountValue);
        /// <summary> LabPremiumVmCount. </summary>
        public static PolicyFactName LabPremiumVmCount { get; } = new PolicyFactName(LabPremiumVmCountValue);
        /// <summary> LabVmSize. </summary>
        public static PolicyFactName LabVmSize { get; } = new PolicyFactName(LabVmSizeValue);
        /// <summary> GalleryImage. </summary>
        public static PolicyFactName GalleryImage { get; } = new PolicyFactName(GalleryImageValue);
        /// <summary> UserOwnedLabVmCountInSubnet. </summary>
        public static PolicyFactName UserOwnedLabVmCountInSubnet { get; } = new PolicyFactName(UserOwnedLabVmCountInSubnetValue);
        /// <summary> LabTargetCost. </summary>
        public static PolicyFactName LabTargetCost { get; } = new PolicyFactName(LabTargetCostValue);
        /// <summary> EnvironmentTemplate. </summary>
        public static PolicyFactName EnvironmentTemplate { get; } = new PolicyFactName(EnvironmentTemplateValue);
        /// <summary> ScheduleEditPermission. </summary>
        public static PolicyFactName ScheduleEditPermission { get; } = new PolicyFactName(ScheduleEditPermissionValue);
        /// <summary> Determines if two <see cref="PolicyFactName"/> values are the same. </summary>
        public static bool operator ==(PolicyFactName left, PolicyFactName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PolicyFactName"/> values are not the same. </summary>
        public static bool operator !=(PolicyFactName left, PolicyFactName right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PolicyFactName"/>. </summary>
        public static implicit operator PolicyFactName(string value) => new PolicyFactName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PolicyFactName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PolicyFactName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
