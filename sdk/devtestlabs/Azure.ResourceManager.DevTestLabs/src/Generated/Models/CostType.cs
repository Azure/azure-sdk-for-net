// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    /// <summary> The type of the cost. </summary>
    public readonly partial struct CostType : IEquatable<CostType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CostType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CostType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnavailableValue = "Unavailable";
        private const string ReportedValue = "Reported";
        private const string ProjectedValue = "Projected";

        /// <summary> Unavailable. </summary>
        public static CostType Unavailable { get; } = new CostType(UnavailableValue);
        /// <summary> Reported. </summary>
        public static CostType Reported { get; } = new CostType(ReportedValue);
        /// <summary> Projected. </summary>
        public static CostType Projected { get; } = new CostType(ProjectedValue);
        /// <summary> Determines if two <see cref="CostType"/> values are the same. </summary>
        public static bool operator ==(CostType left, CostType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CostType"/> values are not the same. </summary>
        public static bool operator !=(CostType left, CostType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CostType"/>. </summary>
        public static implicit operator CostType(string value) => new CostType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CostType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CostType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
