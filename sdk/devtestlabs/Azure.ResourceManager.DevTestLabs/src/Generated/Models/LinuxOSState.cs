// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    /// <summary> The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied). </summary>
    public readonly partial struct LinuxOSState : IEquatable<LinuxOSState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LinuxOSState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LinuxOSState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NonDeprovisionedValue = "NonDeprovisioned";
        private const string DeprovisionRequestedValue = "DeprovisionRequested";
        private const string DeprovisionAppliedValue = "DeprovisionApplied";

        /// <summary> NonDeprovisioned. </summary>
        public static LinuxOSState NonDeprovisioned { get; } = new LinuxOSState(NonDeprovisionedValue);
        /// <summary> DeprovisionRequested. </summary>
        public static LinuxOSState DeprovisionRequested { get; } = new LinuxOSState(DeprovisionRequestedValue);
        /// <summary> DeprovisionApplied. </summary>
        public static LinuxOSState DeprovisionApplied { get; } = new LinuxOSState(DeprovisionAppliedValue);
        /// <summary> Determines if two <see cref="LinuxOSState"/> values are the same. </summary>
        public static bool operator ==(LinuxOSState left, LinuxOSState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LinuxOSState"/> values are not the same. </summary>
        public static bool operator !=(LinuxOSState left, LinuxOSState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LinuxOSState"/>. </summary>
        public static implicit operator LinuxOSState(string value) => new LinuxOSState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LinuxOSState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LinuxOSState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
