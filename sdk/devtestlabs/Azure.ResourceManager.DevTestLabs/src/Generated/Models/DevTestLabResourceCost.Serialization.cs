// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    public partial class DevTestLabResourceCost : IUtf8JsonSerializable, IModelJsonSerializable<DevTestLabResourceCost>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<DevTestLabResourceCost>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<DevTestLabResourceCost>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(ResourceName))
            {
                writer.WritePropertyName("resourcename"u8);
                writer.WriteStringValue(ResourceName);
            }
            if (Optional.IsDefined(ResourceUniqueId))
            {
                writer.WritePropertyName("resourceUId"u8);
                writer.WriteStringValue(ResourceUniqueId);
            }
            if (Optional.IsDefined(ResourceCost))
            {
                writer.WritePropertyName("resourceCost"u8);
                writer.WriteNumberValue(ResourceCost.Value);
            }
            if (Optional.IsDefined(ResourceType))
            {
                writer.WritePropertyName("resourceType"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (Optional.IsDefined(ResourceOwner))
            {
                writer.WritePropertyName("resourceOwner"u8);
                writer.WriteStringValue(ResourceOwner);
            }
            if (Optional.IsDefined(ResourcePricingTier))
            {
                writer.WritePropertyName("resourcePricingTier"u8);
                writer.WriteStringValue(ResourcePricingTier);
            }
            if (Optional.IsDefined(ResourceStatus))
            {
                writer.WritePropertyName("resourceStatus"u8);
                writer.WriteStringValue(ResourceStatus);
            }
            if (Optional.IsDefined(ResourceId))
            {
                writer.WritePropertyName("resourceId"u8);
                writer.WriteStringValue(ResourceId);
            }
            if (Optional.IsDefined(ExternalResourceId))
            {
                writer.WritePropertyName("externalResourceId"u8);
                writer.WriteStringValue(ExternalResourceId);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static DevTestLabResourceCost DeserializeDevTestLabResourceCost(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> resourcename = default;
            Optional<string> resourceUId = default;
            Optional<double> resourceCost = default;
            Optional<string> resourceType = default;
            Optional<string> resourceOwner = default;
            Optional<string> resourcePricingTier = default;
            Optional<string> resourceStatus = default;
            Optional<string> resourceId = default;
            Optional<string> externalResourceId = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourcename"u8))
                {
                    resourcename = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceUId"u8))
                {
                    resourceUId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resourceCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceOwner"u8))
                {
                    resourceOwner = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourcePricingTier"u8))
                {
                    resourcePricingTier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceStatus"u8))
                {
                    resourceStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceId"u8))
                {
                    resourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("externalResourceId"u8))
                {
                    externalResourceId = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new DevTestLabResourceCost(resourcename.Value, resourceUId.Value, Optional.ToNullable(resourceCost), resourceType.Value, resourceOwner.Value, resourcePricingTier.Value, resourceStatus.Value, resourceId.Value, externalResourceId.Value, rawData);
        }

        DevTestLabResourceCost IModelJsonSerializable<DevTestLabResourceCost>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeDevTestLabResourceCost(doc.RootElement, options);
        }

        BinaryData IModelSerializable<DevTestLabResourceCost>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        DevTestLabResourceCost IModelSerializable<DevTestLabResourceCost>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeDevTestLabResourceCost(doc.RootElement, options);
        }

        public static implicit operator RequestContent(DevTestLabResourceCost model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator DevTestLabResourceCost(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeDevTestLabResourceCost(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
