// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    public partial class DevTestLabCostThreshold : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ThresholdId))
            {
                writer.WritePropertyName("thresholdId"u8);
                writer.WriteStringValue(ThresholdId);
            }
            if (Core.Optional.IsDefined(PercentageThreshold))
            {
                writer.WritePropertyName("percentageThreshold"u8);
                writer.WriteObjectValue(PercentageThreshold);
            }
            if (Core.Optional.IsDefined(DisplayOnChart))
            {
                writer.WritePropertyName("displayOnChart"u8);
                writer.WriteStringValue(DisplayOnChart.Value.ToString());
            }
            if (Core.Optional.IsDefined(SendNotificationWhenExceeded))
            {
                writer.WritePropertyName("sendNotificationWhenExceeded"u8);
                writer.WriteStringValue(SendNotificationWhenExceeded.Value.ToString());
            }
            if (Core.Optional.IsDefined(NotificationSent))
            {
                writer.WritePropertyName("notificationSent"u8);
                writer.WriteStringValue(NotificationSent);
            }
            writer.WriteEndObject();
        }

        internal static DevTestLabCostThreshold DeserializeDevTestLabCostThreshold(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> thresholdId = default;
            Core.Optional<PercentageCostThresholdProperties> percentageThreshold = default;
            Core.Optional<DevTestLabCostThresholdStatus> displayOnChart = default;
            Core.Optional<DevTestLabCostThresholdStatus> sendNotificationWhenExceeded = default;
            Core.Optional<string> notificationSent = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("thresholdId"u8))
                {
                    thresholdId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("percentageThreshold"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    percentageThreshold = PercentageCostThresholdProperties.DeserializePercentageCostThresholdProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("displayOnChart"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    displayOnChart = new DevTestLabCostThresholdStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sendNotificationWhenExceeded"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sendNotificationWhenExceeded = new DevTestLabCostThresholdStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("notificationSent"u8))
                {
                    notificationSent = property.Value.GetString();
                    continue;
                }
            }
            return new DevTestLabCostThreshold(thresholdId.Value, percentageThreshold.Value, Core.Optional.ToNullable(displayOnChart), Core.Optional.ToNullable(sendNotificationWhenExceeded), notificationSent.Value);
        }
    }
}
