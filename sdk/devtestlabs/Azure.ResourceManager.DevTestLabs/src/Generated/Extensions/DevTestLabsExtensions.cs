// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.DevTestLabs.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DevTestLabs
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DevTestLabs. </summary>
    public static partial class DevTestLabsExtensions
    {
        private static TenantResourceExtensionClient GetExtensionClient(TenantResource tenantResource)
        {
            return tenantResource.GetCachedClient((client) =>
            {
                return new TenantResourceExtensionClient(client, tenantResource.Id);
            }
            );
        }

        /// <summary>
        /// Result of the request to list REST API operations
        /// Request Path: /providers/Microsoft.DevTestLab/operations
        /// Operation Id: ProviderOperations_List
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OperationMetadata" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<OperationMetadata> GetProviderOperationsAsync(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenantResource).GetProviderOperationsAsync(cancellationToken);
        }

        /// <summary>
        /// Result of the request to list REST API operations
        /// Request Path: /providers/Microsoft.DevTestLab/operations
        /// Operation Id: ProviderOperations_List
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OperationMetadata" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<OperationMetadata> GetProviderOperations(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenantResource).GetProviderOperations(cancellationToken);
        }

        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// List labs in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/labs
        /// Operation Id: Labs_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="expand"> Specify the $expand query. Example: &apos;properties($select=defaultStorageAccount)&apos;. </param>
        /// <param name="filter"> The filter to apply to the operation. Example: &apos;$filter=contains(name,&apos;myName&apos;). </param>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: &apos;$top=10&apos;. </param>
        /// <param name="orderby"> The ordering expression for the results, using OData notation. Example: &apos;$orderby=name desc&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LabResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<LabResource> GetLabsAsync(this SubscriptionResource subscriptionResource, string expand = null, string filter = null, int? top = null, string orderby = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetLabsAsync(expand, filter, top, orderby, cancellationToken);
        }

        /// <summary>
        /// List labs in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/labs
        /// Operation Id: Labs_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="expand"> Specify the $expand query. Example: &apos;properties($select=defaultStorageAccount)&apos;. </param>
        /// <param name="filter"> The filter to apply to the operation. Example: &apos;$filter=contains(name,&apos;myName&apos;). </param>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: &apos;$top=10&apos;. </param>
        /// <param name="orderby"> The ordering expression for the results, using OData notation. Example: &apos;$orderby=name desc&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LabResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<LabResource> GetLabs(this SubscriptionResource subscriptionResource, string expand = null, string filter = null, int? top = null, string orderby = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetLabs(expand, filter, top, orderby, cancellationToken);
        }

        /// <summary>
        /// List schedules in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/schedules
        /// Operation Id: GlobalSchedules_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="expand"> Specify the $expand query. Example: &apos;properties($select=status)&apos;. </param>
        /// <param name="filter"> The filter to apply to the operation. Example: &apos;$filter=contains(name,&apos;myName&apos;). </param>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: &apos;$top=10&apos;. </param>
        /// <param name="orderby"> The ordering expression for the results, using OData notation. Example: &apos;$orderby=name desc&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScheduleResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ScheduleResource> GetSchedulesAsync(this SubscriptionResource subscriptionResource, string expand = null, string filter = null, int? top = null, string orderby = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSchedulesAsync(expand, filter, top, orderby, cancellationToken);
        }

        /// <summary>
        /// List schedules in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/schedules
        /// Operation Id: GlobalSchedules_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="expand"> Specify the $expand query. Example: &apos;properties($select=status)&apos;. </param>
        /// <param name="filter"> The filter to apply to the operation. Example: &apos;$filter=contains(name,&apos;myName&apos;). </param>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: &apos;$top=10&apos;. </param>
        /// <param name="orderby"> The ordering expression for the results, using OData notation. Example: &apos;$orderby=name desc&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScheduleResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ScheduleResource> GetSchedules(this SubscriptionResource subscriptionResource, string expand = null, string filter = null, int? top = null, string orderby = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSchedules(expand, filter, top, orderby, cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of LabResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of LabResources and their operations over a LabResource. </returns>
        public static LabCollection GetLabs(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetLabs();
        }

        /// <summary>
        /// Get lab.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}
        /// Operation Id: Labs_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="name"> The name of the lab. </param>
        /// <param name="expand"> Specify the $expand query. Example: &apos;properties($select=defaultStorageAccount)&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<LabResource>> GetLabAsync(this ResourceGroupResource resourceGroupResource, string name, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetLabs().GetAsync(name, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get lab.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}
        /// Operation Id: Labs_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="name"> The name of the lab. </param>
        /// <param name="expand"> Specify the $expand query. Example: &apos;properties($select=defaultStorageAccount)&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<LabResource> GetLab(this ResourceGroupResource resourceGroupResource, string name, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetLabs().Get(name, expand, cancellationToken);
        }

        /// <summary> Gets a collection of ScheduleResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ScheduleResources and their operations over a ScheduleResource. </returns>
        public static ScheduleCollection GetSchedules(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetSchedules();
        }

        /// <summary>
        /// Get schedule.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}
        /// Operation Id: GlobalSchedules_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="name"> The name of the schedule. </param>
        /// <param name="expand"> Specify the $expand query. Example: &apos;properties($select=status)&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ScheduleResource>> GetScheduleAsync(this ResourceGroupResource resourceGroupResource, string name, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetSchedules().GetAsync(name, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get schedule.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}
        /// Operation Id: GlobalSchedules_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="name"> The name of the schedule. </param>
        /// <param name="expand"> Specify the $expand query. Example: &apos;properties($select=status)&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ScheduleResource> GetSchedule(this ResourceGroupResource resourceGroupResource, string name, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetSchedules().Get(name, expand, cancellationToken);
        }

        #region LabResource
        /// <summary>
        /// Gets an object representing a <see cref="LabResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LabResource.CreateResourceIdentifier" /> to create a <see cref="LabResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LabResource" /> object. </returns>
        public static LabResource GetLabResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LabResource.ValidateResourceId(id);
                return new LabResource(client, id);
            }
            );
        }
        #endregion

        #region ScheduleResource
        /// <summary>
        /// Gets an object representing a <see cref="ScheduleResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ScheduleResource.CreateResourceIdentifier" /> to create a <see cref="ScheduleResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ScheduleResource" /> object. </returns>
        public static ScheduleResource GetScheduleResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ScheduleResource.ValidateResourceId(id);
                return new ScheduleResource(client, id);
            }
            );
        }
        #endregion

        #region LabScheduleResource
        /// <summary>
        /// Gets an object representing a <see cref="LabScheduleResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LabScheduleResource.CreateResourceIdentifier" /> to create a <see cref="LabScheduleResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LabScheduleResource" /> object. </returns>
        public static LabScheduleResource GetLabScheduleResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LabScheduleResource.ValidateResourceId(id);
                return new LabScheduleResource(client, id);
            }
            );
        }
        #endregion

        #region LabUserServicefabricScheduleResource
        /// <summary>
        /// Gets an object representing a <see cref="LabUserServicefabricScheduleResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LabUserServicefabricScheduleResource.CreateResourceIdentifier" /> to create a <see cref="LabUserServicefabricScheduleResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LabUserServicefabricScheduleResource" /> object. </returns>
        public static LabUserServicefabricScheduleResource GetLabUserServicefabricScheduleResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LabUserServicefabricScheduleResource.ValidateResourceId(id);
                return new LabUserServicefabricScheduleResource(client, id);
            }
            );
        }
        #endregion

        #region LabVirtualmachineScheduleResource
        /// <summary>
        /// Gets an object representing a <see cref="LabVirtualmachineScheduleResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LabVirtualmachineScheduleResource.CreateResourceIdentifier" /> to create a <see cref="LabVirtualmachineScheduleResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LabVirtualmachineScheduleResource" /> object. </returns>
        public static LabVirtualmachineScheduleResource GetLabVirtualmachineScheduleResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LabVirtualmachineScheduleResource.ValidateResourceId(id);
                return new LabVirtualmachineScheduleResource(client, id);
            }
            );
        }
        #endregion

        #region ArtifactSourceResource
        /// <summary>
        /// Gets an object representing an <see cref="ArtifactSourceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ArtifactSourceResource.CreateResourceIdentifier" /> to create an <see cref="ArtifactSourceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ArtifactSourceResource" /> object. </returns>
        public static ArtifactSourceResource GetArtifactSourceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ArtifactSourceResource.ValidateResourceId(id);
                return new ArtifactSourceResource(client, id);
            }
            );
        }
        #endregion

        #region ArmTemplateResource
        /// <summary>
        /// Gets an object representing an <see cref="ArmTemplateResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ArmTemplateResource.CreateResourceIdentifier" /> to create an <see cref="ArmTemplateResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ArmTemplateResource" /> object. </returns>
        public static ArmTemplateResource GetArmTemplateResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ArmTemplateResource.ValidateResourceId(id);
                return new ArmTemplateResource(client, id);
            }
            );
        }
        #endregion

        #region ArtifactResource
        /// <summary>
        /// Gets an object representing an <see cref="ArtifactResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ArtifactResource.CreateResourceIdentifier" /> to create an <see cref="ArtifactResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ArtifactResource" /> object. </returns>
        public static ArtifactResource GetArtifactResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ArtifactResource.ValidateResourceId(id);
                return new ArtifactResource(client, id);
            }
            );
        }
        #endregion

        #region LabCostResource
        /// <summary>
        /// Gets an object representing a <see cref="LabCostResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LabCostResource.CreateResourceIdentifier" /> to create a <see cref="LabCostResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LabCostResource" /> object. </returns>
        public static LabCostResource GetLabCostResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LabCostResource.ValidateResourceId(id);
                return new LabCostResource(client, id);
            }
            );
        }
        #endregion

        #region CustomImageResource
        /// <summary>
        /// Gets an object representing a <see cref="CustomImageResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CustomImageResource.CreateResourceIdentifier" /> to create a <see cref="CustomImageResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CustomImageResource" /> object. </returns>
        public static CustomImageResource GetCustomImageResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CustomImageResource.ValidateResourceId(id);
                return new CustomImageResource(client, id);
            }
            );
        }
        #endregion

        #region FormulaResource
        /// <summary>
        /// Gets an object representing a <see cref="FormulaResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="FormulaResource.CreateResourceIdentifier" /> to create a <see cref="FormulaResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="FormulaResource" /> object. </returns>
        public static FormulaResource GetFormulaResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                FormulaResource.ValidateResourceId(id);
                return new FormulaResource(client, id);
            }
            );
        }
        #endregion

        #region NotificationChannelResource
        /// <summary>
        /// Gets an object representing a <see cref="NotificationChannelResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NotificationChannelResource.CreateResourceIdentifier" /> to create a <see cref="NotificationChannelResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NotificationChannelResource" /> object. </returns>
        public static NotificationChannelResource GetNotificationChannelResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NotificationChannelResource.ValidateResourceId(id);
                return new NotificationChannelResource(client, id);
            }
            );
        }
        #endregion

        #region PolicyResource
        /// <summary>
        /// Gets an object representing a <see cref="PolicyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PolicyResource.CreateResourceIdentifier" /> to create a <see cref="PolicyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PolicyResource" /> object. </returns>
        public static PolicyResource GetPolicyResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PolicyResource.ValidateResourceId(id);
                return new PolicyResource(client, id);
            }
            );
        }
        #endregion

        #region ServiceRunnerResource
        /// <summary>
        /// Gets an object representing a <see cref="ServiceRunnerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceRunnerResource.CreateResourceIdentifier" /> to create a <see cref="ServiceRunnerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceRunnerResource" /> object. </returns>
        public static ServiceRunnerResource GetServiceRunnerResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceRunnerResource.ValidateResourceId(id);
                return new ServiceRunnerResource(client, id);
            }
            );
        }
        #endregion

        #region UserResource
        /// <summary>
        /// Gets an object representing an <see cref="UserResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="UserResource.CreateResourceIdentifier" /> to create an <see cref="UserResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="UserResource" /> object. </returns>
        public static UserResource GetUserResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                UserResource.ValidateResourceId(id);
                return new UserResource(client, id);
            }
            );
        }
        #endregion

        #region DiskResource
        /// <summary>
        /// Gets an object representing a <see cref="DiskResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DiskResource.CreateResourceIdentifier" /> to create a <see cref="DiskResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DiskResource" /> object. </returns>
        public static DiskResource GetDiskResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DiskResource.ValidateResourceId(id);
                return new DiskResource(client, id);
            }
            );
        }
        #endregion

        #region DtlEnvironmentResource
        /// <summary>
        /// Gets an object representing a <see cref="DtlEnvironmentResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DtlEnvironmentResource.CreateResourceIdentifier" /> to create a <see cref="DtlEnvironmentResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DtlEnvironmentResource" /> object. </returns>
        public static DtlEnvironmentResource GetDtlEnvironmentResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DtlEnvironmentResource.ValidateResourceId(id);
                return new DtlEnvironmentResource(client, id);
            }
            );
        }
        #endregion

        #region SecretResource
        /// <summary>
        /// Gets an object representing a <see cref="SecretResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecretResource.CreateResourceIdentifier" /> to create a <see cref="SecretResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecretResource" /> object. </returns>
        public static SecretResource GetSecretResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SecretResource.ValidateResourceId(id);
                return new SecretResource(client, id);
            }
            );
        }
        #endregion

        #region ServiceFabricResource
        /// <summary>
        /// Gets an object representing a <see cref="ServiceFabricResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceFabricResource.CreateResourceIdentifier" /> to create a <see cref="ServiceFabricResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceFabricResource" /> object. </returns>
        public static ServiceFabricResource GetServiceFabricResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceFabricResource.ValidateResourceId(id);
                return new ServiceFabricResource(client, id);
            }
            );
        }
        #endregion

        #region LabVirtualMachineResource
        /// <summary>
        /// Gets an object representing a <see cref="LabVirtualMachineResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LabVirtualMachineResource.CreateResourceIdentifier" /> to create a <see cref="LabVirtualMachineResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LabVirtualMachineResource" /> object. </returns>
        public static LabVirtualMachineResource GetLabVirtualMachineResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LabVirtualMachineResource.ValidateResourceId(id);
                return new LabVirtualMachineResource(client, id);
            }
            );
        }
        #endregion

        #region VirtualNetworkResource
        /// <summary>
        /// Gets an object representing a <see cref="VirtualNetworkResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualNetworkResource.CreateResourceIdentifier" /> to create a <see cref="VirtualNetworkResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualNetworkResource" /> object. </returns>
        public static VirtualNetworkResource GetVirtualNetworkResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualNetworkResource.ValidateResourceId(id);
                return new VirtualNetworkResource(client, id);
            }
            );
        }
        #endregion
    }
}
