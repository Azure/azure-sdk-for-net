// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDevTestLabsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.Operation"/>. </summary>
        /// <param name="name"> The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action". </param>
        /// <param name="isDataAction"> Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure Resource Manager/control-plane operations. </param>
        /// <param name="display"> Localized display information for this particular operation. </param>
        /// <param name="origin"> The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system". </param>
        /// <param name="actionType"> Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs. </param>
        /// <returns> A new <see cref="Models.Operation"/> instance for mocking. </returns>
        public static Operation Operation(string name = null, bool? isDataAction = null, OperationDisplay display = null, Origin? origin = null, ActionType? actionType = null)
        {
            return new Operation(
                name,
                isDataAction,
                display,
                origin,
                actionType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperationDisplay"/>. </summary>
        /// <param name="provider"> The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute". </param>
        /// <param name="resource"> The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections". </param>
        /// <param name="operation"> The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine". </param>
        /// <param name="description"> The short, localized friendly description of the operation; suitable for tool tips and detailed views. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new OperationDisplay(provider, resource, operation, description, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.LabData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="defaultStorageAccount"> The lab's default storage account. </param>
        /// <param name="defaultPremiumStorageAccount"> The lab's default premium storage account. </param>
        /// <param name="artifactsStorageAccount"> The lab's artifact storage account. </param>
        /// <param name="premiumDataDiskStorageAccount"> The lab's premium data disk storage account. </param>
        /// <param name="vaultName"> The lab's Key vault. </param>
        /// <param name="labStorageType"> Type of storage used by the lab. It can be either Premium or Standard. Default is Premium. </param>
        /// <param name="mandatoryArtifactsResourceIdsLinux"> The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user. </param>
        /// <param name="mandatoryArtifactsResourceIdsWindows"> The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user. </param>
        /// <param name="createdOn"> The creation date of the lab. </param>
        /// <param name="premiumDataDisks">
        /// The setting to enable usage of premium data disks.
        /// When its value is 'Enabled', creation of standard or premium data disks is allowed.
        /// When its value is 'Disabled', only creation of standard data disks is allowed.
        /// </param>
        /// <param name="environmentPermission"> The access rights to be granted to the user when provisioning an environment. </param>
        /// <param name="announcement"> The properties of any lab announcement associated with this lab. </param>
        /// <param name="support"> The properties of any lab support message associated with this lab. </param>
        /// <param name="vmCreationResourceGroup"> The resource group in which all new lab virtual machines will be created. To let DevTest Labs manage resource group creation, set this value to null. </param>
        /// <param name="publicIPId"> The public IP address for the lab's load balancer. </param>
        /// <param name="loadBalancerId"> The load balancer used to for lab VMs that use shared IP address. </param>
        /// <param name="networkSecurityGroupId"> The Network Security Group attached to the lab VMs Network interfaces to restrict open ports. </param>
        /// <param name="extendedProperties"> Extended properties of the lab used for experimental features. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.LabData"/> instance for mocking. </returns>
        public static LabData LabData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string defaultStorageAccount = null, string defaultPremiumStorageAccount = null, string artifactsStorageAccount = null, string premiumDataDiskStorageAccount = null, string vaultName = null, StorageType? labStorageType = null, IEnumerable<string> mandatoryArtifactsResourceIdsLinux = null, IEnumerable<string> mandatoryArtifactsResourceIdsWindows = null, DateTimeOffset? createdOn = null, PremiumDataDisk? premiumDataDisks = null, EnvironmentPermission? environmentPermission = null, LabAnnouncementProperties announcement = null, LabSupportProperties support = null, string vmCreationResourceGroup = null, string publicIPId = null, string loadBalancerId = null, string networkSecurityGroupId = null, IDictionary<string, string> extendedProperties = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();
            mandatoryArtifactsResourceIdsLinux ??= new List<string>();
            mandatoryArtifactsResourceIdsWindows ??= new List<string>();
            extendedProperties ??= new Dictionary<string, string>();

            return new LabData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                defaultStorageAccount,
                defaultPremiumStorageAccount,
                artifactsStorageAccount,
                premiumDataDiskStorageAccount,
                vaultName,
                labStorageType,
                mandatoryArtifactsResourceIdsLinux?.ToList(),
                mandatoryArtifactsResourceIdsWindows?.ToList(),
                createdOn,
                premiumDataDisks,
                environmentPermission,
                announcement,
                support,
                vmCreationResourceGroup,
                publicIPId,
                loadBalancerId,
                networkSecurityGroupId,
                extendedProperties,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LabAnnouncementProperties"/>. </summary>
        /// <param name="title"> The plain text title for the lab announcement. </param>
        /// <param name="markdown"> The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown. </param>
        /// <param name="enabled"> Is the lab announcement active/enabled at this time?. </param>
        /// <param name="expireOn"> The time at which the announcement expires (null for never). </param>
        /// <param name="expired"> Has this announcement expired?. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="Models.LabAnnouncementProperties"/> instance for mocking. </returns>
        public static LabAnnouncementProperties LabAnnouncementProperties(string title = null, string markdown = null, EnableStatus? enabled = null, DateTimeOffset? expireOn = null, bool? expired = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            return new LabAnnouncementProperties(
                title,
                markdown,
                enabled,
                expireOn,
                expired,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ScheduleCreationParameter"/>. </summary>
        /// <param name="status"> The status of the schedule (i.e. Enabled, Disabled). </param>
        /// <param name="taskType"> The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). </param>
        /// <param name="weeklyRecurrence"> If the schedule will occur only some days of the week, specify the weekly recurrence. </param>
        /// <param name="dailyRecurrenceTime"> If the schedule will occur once each day of the week, specify the daily recurrence. </param>
        /// <param name="hourlyRecurrenceMinute"> If the schedule will occur multiple times a day, specify the hourly recurrence. </param>
        /// <param name="timeZoneId"> The time zone ID (e.g. China Standard Time, Greenland Standard Time, Pacific Standard time, etc.). The possible values for this property can be found in `IReadOnlyCollection&lt;string&gt; TimeZoneConverter.TZConvert.KnownWindowsTimeZoneIds` (https://github.com/mattjohnsonpint/TimeZoneConverter/blob/main/README.md). </param>
        /// <param name="notificationSettings"> Notification settings. </param>
        /// <param name="targetResourceId"> The resource ID to which the schedule belongs. </param>
        /// <param name="name"> The name of the virtual machine or environment. </param>
        /// <param name="location"> The location of the new virtual machine or environment. </param>
        /// <param name="tags"> The tags of the resource. </param>
        /// <returns> A new <see cref="Models.ScheduleCreationParameter"/> instance for mocking. </returns>
        public static ScheduleCreationParameter ScheduleCreationParameter(EnableStatus? status = null, string taskType = null, WeekDetails weeklyRecurrence = null, string dailyRecurrenceTime = null, int? hourlyRecurrenceMinute = null, string timeZoneId = null, NotificationSettings notificationSettings = null, string targetResourceId = null, string name = null, string location = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ScheduleCreationParameter(
                status,
                taskType,
                weeklyRecurrence,
                dailyRecurrenceTime != null ? new DayDetails(dailyRecurrenceTime, serializedAdditionalRawData: null) : null,
                hourlyRecurrenceMinute != null ? new HourDetails(hourlyRecurrenceMinute, serializedAdditionalRawData: null) : null,
                timeZoneId,
                notificationSettings,
                targetResourceId,
                name,
                location,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GenerateUploadUriResponse"/>. </summary>
        /// <param name="uploadUri"> The upload URI for the VHD. </param>
        /// <returns> A new <see cref="Models.GenerateUploadUriResponse"/> instance for mocking. </returns>
        public static GenerateUploadUriResponse GenerateUploadUriResponse(string uploadUri = null)
        {
            return new GenerateUploadUriResponse(uploadUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.ScheduleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="status"> The status of the schedule (i.e. Enabled, Disabled). </param>
        /// <param name="taskType"> The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). </param>
        /// <param name="weeklyRecurrence"> If the schedule will occur only some days of the week, specify the weekly recurrence. </param>
        /// <param name="dailyRecurrenceTime"> If the schedule will occur once each day of the week, specify the daily recurrence. </param>
        /// <param name="hourlyRecurrenceMinute"> If the schedule will occur multiple times a day, specify the hourly recurrence. </param>
        /// <param name="timeZoneId"> The time zone ID (e.g. China Standard Time, Greenland Standard Time, Pacific Standard time, etc.). The possible values for this property can be found in `IReadOnlyCollection&lt;string&gt; TimeZoneConverter.TZConvert.KnownWindowsTimeZoneIds` (https://github.com/mattjohnsonpint/TimeZoneConverter/blob/main/README.md). </param>
        /// <param name="notificationSettings"> Notification settings. </param>
        /// <param name="createdOn"> The creation date of the schedule. </param>
        /// <param name="targetResourceId"> The resource ID to which the schedule belongs. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.ScheduleData"/> instance for mocking. </returns>
        public static ScheduleData ScheduleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, EnableStatus? status = null, string taskType = null, WeekDetails weeklyRecurrence = null, string dailyRecurrenceTime = null, int? hourlyRecurrenceMinute = null, string timeZoneId = null, NotificationSettings notificationSettings = null, DateTimeOffset? createdOn = null, string targetResourceId = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ScheduleData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                status,
                taskType,
                weeklyRecurrence,
                dailyRecurrenceTime != null ? new DayDetails(dailyRecurrenceTime, serializedAdditionalRawData: null) : null,
                hourlyRecurrenceMinute != null ? new HourDetails(hourlyRecurrenceMinute, serializedAdditionalRawData: null) : null,
                timeZoneId,
                notificationSettings,
                createdOn,
                targetResourceId,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.ArtifactSourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="displayName"> The artifact source's display name. </param>
        /// <param name="uri"> The artifact source's URI. </param>
        /// <param name="sourceType"> The artifact source's type. </param>
        /// <param name="folderPath"> The folder containing artifacts. </param>
        /// <param name="armTemplateFolderPath"> The folder containing Azure Resource Manager templates. </param>
        /// <param name="branchRef"> The artifact source's branch reference. </param>
        /// <param name="securityToken"> The security token to authenticate to the artifact source. </param>
        /// <param name="status"> Indicates if the artifact source is enabled (values: Enabled, Disabled). </param>
        /// <param name="createdOn"> The artifact source's creation date. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.ArtifactSourceData"/> instance for mocking. </returns>
        public static ArtifactSourceData ArtifactSourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string displayName = null, string uri = null, SourceControlType? sourceType = null, string folderPath = null, string armTemplateFolderPath = null, string branchRef = null, string securityToken = null, EnableStatus? status = null, DateTimeOffset? createdOn = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ArtifactSourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                displayName,
                uri,
                sourceType,
                folderPath,
                armTemplateFolderPath,
                branchRef,
                securityToken,
                status,
                createdOn,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.ArmTemplateData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="displayName"> The display name of the ARM template. </param>
        /// <param name="description"> The description of the ARM template. </param>
        /// <param name="publisher"> The publisher of the ARM template. </param>
        /// <param name="icon"> The URI to the icon of the ARM template. </param>
        /// <param name="contents"> The contents of the ARM template. </param>
        /// <param name="createdOn"> The creation date of the armTemplate. </param>
        /// <param name="parametersValueFilesInfo"> File name and parameter values information from all azuredeploy.*.parameters.json for the ARM template. </param>
        /// <param name="enabled"> Whether or not ARM template is enabled for use by lab user. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="tags"> The tags of the resource. </param>
        /// <returns> A new <see cref="DevTestLabs.ArmTemplateData"/> instance for mocking. </returns>
        public static ArmTemplateData ArmTemplateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string displayName = null, string description = null, string publisher = null, string icon = null, IReadOnlyDictionary<string, BinaryData> contents = null, DateTimeOffset? createdOn = null, IEnumerable<ParametersValueFileInfo> parametersValueFilesInfo = null, bool? enabled = null, string location = null, IReadOnlyDictionary<string, string> tags = null)
        {
            contents ??= new Dictionary<string, BinaryData>();
            parametersValueFilesInfo ??= new List<ParametersValueFileInfo>();
            tags ??= new Dictionary<string, string>();

            return new ArmTemplateData(
                id,
                name,
                resourceType,
                systemData,
                displayName,
                description,
                publisher,
                icon,
                contents,
                createdOn,
                parametersValueFilesInfo?.ToList(),
                enabled,
                location,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ParametersValueFileInfo"/>. </summary>
        /// <param name="fileName"> File name. </param>
        /// <param name="parametersValueInfo"> Contents of the file. </param>
        /// <returns> A new <see cref="Models.ParametersValueFileInfo"/> instance for mocking. </returns>
        public static ParametersValueFileInfo ParametersValueFileInfo(string fileName = null, IReadOnlyDictionary<string, BinaryData> parametersValueInfo = null)
        {
            parametersValueInfo ??= new Dictionary<string, BinaryData>();

            return new ParametersValueFileInfo(fileName, parametersValueInfo, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.ArtifactData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="title"> The artifact's title. </param>
        /// <param name="description"> The artifact's description. </param>
        /// <param name="publisher"> The artifact's publisher. </param>
        /// <param name="filePath"> The file path to the artifact. </param>
        /// <param name="icon"> The URI to the artifact icon. </param>
        /// <param name="targetOSType"> The artifact's target OS. </param>
        /// <param name="parameters"> The artifact's parameters. </param>
        /// <param name="createdOn"> The artifact's creation date. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="tags"> The tags of the resource. </param>
        /// <returns> A new <see cref="DevTestLabs.ArtifactData"/> instance for mocking. </returns>
        public static ArtifactData ArtifactData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string title = null, string description = null, string publisher = null, string filePath = null, string icon = null, string targetOSType = null, IReadOnlyDictionary<string, BinaryData> parameters = null, DateTimeOffset? createdOn = null, string location = null, IReadOnlyDictionary<string, string> tags = null)
        {
            parameters ??= new Dictionary<string, BinaryData>();
            tags ??= new Dictionary<string, string>();

            return new ArtifactData(
                id,
                name,
                resourceType,
                systemData,
                title,
                description,
                publisher,
                filePath,
                icon,
                targetOSType,
                parameters,
                createdOn,
                location,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmTemplateInfo"/>. </summary>
        /// <param name="template"> The template's contents. </param>
        /// <param name="parameters"> The parameters of the ARM template. </param>
        /// <returns> A new <see cref="Models.ArmTemplateInfo"/> instance for mocking. </returns>
        public static ArmTemplateInfo ArmTemplateInfo(IReadOnlyDictionary<string, BinaryData> template = null, IReadOnlyDictionary<string, BinaryData> parameters = null)
        {
            template ??= new Dictionary<string, BinaryData>();
            parameters ??= new Dictionary<string, BinaryData>();

            return new ArmTemplateInfo(template, parameters, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.LabCostData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="targetCost"> The target cost properties. </param>
        /// <param name="estimatedLabCost"> The lab cost summary component of the cost data. </param>
        /// <param name="labCostDetails"> The lab cost details component of the cost data. </param>
        /// <param name="resourceCosts"> The resource cost component of the cost data. </param>
        /// <param name="currencyCode"> The currency code of the cost. </param>
        /// <param name="startOn"> The start time of the cost data. </param>
        /// <param name="endOn"> The end time of the cost data. </param>
        /// <param name="createdOn"> The creation date of the cost. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.LabCostData"/> instance for mocking. </returns>
        public static LabCostData LabCostData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, TargetCostProperties targetCost = null, double? estimatedLabCost = null, IEnumerable<LabCostDetailsProperties> labCostDetails = null, IEnumerable<LabResourceCostProperties> resourceCosts = null, string currencyCode = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, DateTimeOffset? createdOn = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();
            labCostDetails ??= new List<LabCostDetailsProperties>();
            resourceCosts ??= new List<LabResourceCostProperties>();

            return new LabCostData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                targetCost,
                estimatedLabCost != null ? new LabCostSummaryProperties(estimatedLabCost, serializedAdditionalRawData: null) : null,
                labCostDetails?.ToList(),
                resourceCosts?.ToList(),
                currencyCode,
                startOn,
                endOn,
                createdOn,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LabCostDetailsProperties"/>. </summary>
        /// <param name="date"> The date of the cost item. </param>
        /// <param name="cost"> The cost component of the cost item. </param>
        /// <param name="costType"> The type of the cost. </param>
        /// <returns> A new <see cref="Models.LabCostDetailsProperties"/> instance for mocking. </returns>
        public static LabCostDetailsProperties LabCostDetailsProperties(DateTimeOffset? date = null, double? cost = null, CostType? costType = null)
        {
            return new LabCostDetailsProperties(date, cost, costType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LabResourceCostProperties"/>. </summary>
        /// <param name="resourcename"> The name of the resource. </param>
        /// <param name="resourceUId"> The unique identifier of the resource. </param>
        /// <param name="resourceCost"> The cost component of the resource cost item. </param>
        /// <param name="resourceType"> The logical resource type (ex. virtualmachine, storageaccount). </param>
        /// <param name="resourceOwner"> The owner of the resource (ex. janedoe@microsoft.com). </param>
        /// <param name="resourcePricingTier"> The category of the resource (ex. Premium_LRS, Standard_DS1). </param>
        /// <param name="resourceStatus"> The status of the resource (ex. Active). </param>
        /// <param name="resourceId"> The ID of the resource. </param>
        /// <param name="externalResourceId"> The ID of the external resource. </param>
        /// <returns> A new <see cref="Models.LabResourceCostProperties"/> instance for mocking. </returns>
        public static LabResourceCostProperties LabResourceCostProperties(string resourcename = null, string resourceUId = null, double? resourceCost = null, string resourceType = null, string resourceOwner = null, string resourcePricingTier = null, string resourceStatus = null, string resourceId = null, string externalResourceId = null)
        {
            return new LabResourceCostProperties(
                resourcename,
                resourceUId,
                resourceCost,
                resourceType,
                resourceOwner,
                resourcePricingTier,
                resourceStatus,
                resourceId,
                externalResourceId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.CustomImageData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="vm"> The virtual machine from which the image is to be created. </param>
        /// <param name="vhd"> The VHD from which the image is to be created. </param>
        /// <param name="description"> The description of the custom image. </param>
        /// <param name="author"> The author of the custom image. </param>
        /// <param name="createdOn"> The creation date of the custom image. </param>
        /// <param name="managedImageId"> The Managed Image Id backing the custom image. </param>
        /// <param name="managedSnapshotId"> The Managed Snapshot Id backing the custom image. </param>
        /// <param name="dataDiskStorageInfo"> Storage information about the data disks present in the custom image. </param>
        /// <param name="customImagePlan"> Storage information about the plan related to this custom image. </param>
        /// <param name="isPlanAuthorized"> Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.CustomImageData"/> instance for mocking. </returns>
        public static CustomImageData CustomImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CustomImagePropertiesFromVm vm = null, CustomImagePropertiesCustom vhd = null, string description = null, string author = null, DateTimeOffset? createdOn = null, string managedImageId = null, string managedSnapshotId = null, IEnumerable<DataDiskStorageTypeInfo> dataDiskStorageInfo = null, CustomImagePropertiesFromPlan customImagePlan = null, bool? isPlanAuthorized = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();
            dataDiskStorageInfo ??= new List<DataDiskStorageTypeInfo>();

            return new CustomImageData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                vm,
                vhd,
                description,
                author,
                createdOn,
                managedImageId,
                managedSnapshotId,
                dataDiskStorageInfo?.ToList(),
                customImagePlan,
                isPlanAuthorized,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.FormulaData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="description"> The description of the formula. </param>
        /// <param name="author"> The author of the formula. </param>
        /// <param name="osType"> The OS type of the formula. </param>
        /// <param name="createdOn"> The creation date of the formula. </param>
        /// <param name="formulaContent"> The content of the formula. </param>
        /// <param name="labVmId"> Information about a VM from which a formula is to be created. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.FormulaData"/> instance for mocking. </returns>
        public static FormulaData FormulaData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string description = null, string author = null, string osType = null, DateTimeOffset? createdOn = null, LabVirtualMachineCreationParameter formulaContent = null, string labVmId = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FormulaData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                description,
                author,
                osType,
                createdOn,
                formulaContent,
                labVmId != null ? new FormulaPropertiesFromVm(labVmId, serializedAdditionalRawData: null) : null,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryImage"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="author"> The author of the gallery image. </param>
        /// <param name="createdOn"> The creation date of the gallery image. </param>
        /// <param name="description"> The description of the gallery image. </param>
        /// <param name="imageReference"> The image reference of the gallery image. </param>
        /// <param name="icon"> The icon of the gallery image. </param>
        /// <param name="enabled"> Indicates whether this gallery image is enabled. </param>
        /// <param name="planId"> The third party plan that applies to this image. </param>
        /// <param name="isPlanAuthorized"> Indicates if the plan has been authorized for programmatic deployment. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="tags"> The tags of the resource. </param>
        /// <returns> A new <see cref="Models.GalleryImage"/> instance for mocking. </returns>
        public static GalleryImage GalleryImage(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string author = null, DateTimeOffset? createdOn = null, string description = null, GalleryImageReference imageReference = null, string icon = null, bool? enabled = null, string planId = null, bool? isPlanAuthorized = null, string location = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryImage(
                id,
                name,
                resourceType,
                systemData,
                author,
                createdOn,
                description,
                imageReference,
                icon,
                enabled,
                planId,
                isPlanAuthorized,
                location,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.NotificationChannelData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="webHookUri"> The webhook URL to send notifications to. </param>
        /// <param name="emailRecipient"> The email recipient to send notifications to (can be a list of semi-colon separated email addresses). </param>
        /// <param name="notificationLocale"> The locale to use when sending a notification (fallback for unsupported languages is EN). </param>
        /// <param name="description"> Description of notification. </param>
        /// <param name="events"> The list of event for which this notification is enabled. </param>
        /// <param name="createdOn"> The creation date of the notification channel. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.NotificationChannelData"/> instance for mocking. </returns>
        public static NotificationChannelData NotificationChannelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string webHookUri = null, string emailRecipient = null, string notificationLocale = null, string description = null, IEnumerable<Event> events = null, DateTimeOffset? createdOn = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();
            events ??= new List<Event>();

            return new NotificationChannelData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                webHookUri,
                emailRecipient,
                notificationLocale,
                description,
                events?.ToList(),
                createdOn,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.PolicyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="description"> The description of the policy. </param>
        /// <param name="status"> The status of the policy. </param>
        /// <param name="factName"> The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. </param>
        /// <param name="factData"> The fact data of the policy. </param>
        /// <param name="threshold"> The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy). </param>
        /// <param name="evaluatorType"> The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy). </param>
        /// <param name="createdOn"> The creation date of the policy. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.PolicyData"/> instance for mocking. </returns>
        public static PolicyData PolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string description = null, PolicyStatus? status = null, PolicyFactName? factName = null, string factData = null, string threshold = null, PolicyEvaluatorType? evaluatorType = null, DateTimeOffset? createdOn = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PolicyData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                description,
                status,
                factName,
                factData,
                threshold,
                evaluatorType,
                createdOn,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EvaluatePoliciesResponse"/>. </summary>
        /// <param name="results"> Results of evaluating a policy set. </param>
        /// <returns> A new <see cref="Models.EvaluatePoliciesResponse"/> instance for mocking. </returns>
        public static EvaluatePoliciesResponse EvaluatePoliciesResponse(IEnumerable<PolicySetResult> results = null)
        {
            results ??= new List<PolicySetResult>();

            return new EvaluatePoliciesResponse(results?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PolicySetResult"/>. </summary>
        /// <param name="hasError"> A value indicating whether this policy set evaluation has discovered violations. </param>
        /// <param name="policyViolations"> The list of policy violations. </param>
        /// <returns> A new <see cref="Models.PolicySetResult"/> instance for mocking. </returns>
        public static PolicySetResult PolicySetResult(bool? hasError = null, IEnumerable<PolicyViolation> policyViolations = null)
        {
            policyViolations ??= new List<PolicyViolation>();

            return new PolicySetResult(hasError, policyViolations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PolicyViolation"/>. </summary>
        /// <param name="code"> The code of the policy violation. </param>
        /// <param name="message"> The message of the policy violation. </param>
        /// <returns> A new <see cref="Models.PolicyViolation"/> instance for mocking. </returns>
        public static PolicyViolation PolicyViolation(string code = null, string message = null)
        {
            return new PolicyViolation(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.ServiceRunnerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <returns> A new <see cref="DevTestLabs.ServiceRunnerData"/> instance for mocking. </returns>
        public static ServiceRunnerData ServiceRunnerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IdentityProperties identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ServiceRunnerData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.UserData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The identity of the user. </param>
        /// <param name="secretStore"> The secret store of the user. </param>
        /// <param name="createdOn"> The creation date of the user profile. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.UserData"/> instance for mocking. </returns>
        public static UserData UserData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, UserIdentity identity = null, UserSecretStore secretStore = null, DateTimeOffset? createdOn = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();

            return new UserData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                identity,
                secretStore,
                createdOn,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.DiskData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="diskType"> The storage type for the disk (i.e. Standard, Premium). </param>
        /// <param name="diskSizeGiB"> The size of the disk in Gibibytes. </param>
        /// <param name="leasedByLabVmId"> The resource ID of the VM to which this disk is leased. </param>
        /// <param name="diskBlobName"> When backed by a blob, the name of the VHD blob without extension. </param>
        /// <param name="diskUri"> When backed by a blob, the URI of underlying blob. </param>
        /// <param name="storageAccountId"> When backed by a blob, the storage account where the blob is. </param>
        /// <param name="createdOn"> The creation date of the disk. </param>
        /// <param name="hostCaching"> The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite). </param>
        /// <param name="managedDiskId"> When backed by managed disk, this is the ID of the compute disk resource. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.DiskData"/> instance for mocking. </returns>
        public static DiskData DiskData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, StorageType? diskType = null, int? diskSizeGiB = null, string leasedByLabVmId = null, string diskBlobName = null, string diskUri = null, string storageAccountId = null, DateTimeOffset? createdOn = null, string hostCaching = null, string managedDiskId = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DiskData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                diskType,
                diskSizeGiB,
                leasedByLabVmId,
                diskBlobName,
                diskUri,
                storageAccountId,
                createdOn,
                hostCaching,
                managedDiskId,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.DtlEnvironmentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="deploymentProperties"> The deployment properties of the environment. </param>
        /// <param name="armTemplateDisplayName"> The display name of the Azure Resource Manager template that produced the environment. </param>
        /// <param name="resourceGroupId"> The identifier of the resource group containing the environment's resources. </param>
        /// <param name="createdByUser"> The creator of the environment. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.DtlEnvironmentData"/> instance for mocking. </returns>
        public static DtlEnvironmentData DtlEnvironmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, EnvironmentDeploymentProperties deploymentProperties = null, string armTemplateDisplayName = null, string resourceGroupId = null, string createdByUser = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DtlEnvironmentData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                deploymentProperties,
                armTemplateDisplayName,
                resourceGroupId,
                createdByUser,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.SecretData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="value"> The value of the secret for secret creation. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.SecretData"/> instance for mocking. </returns>
        public static SecretData SecretData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string value = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SecretData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                value,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.ServiceFabricData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="externalServiceFabricId"> The backing service fabric resource's id. </param>
        /// <param name="environmentId"> The resource id of the environment under which the service fabric resource is present. </param>
        /// <param name="applicableSchedule"> The applicable schedule for the virtual machine. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.ServiceFabricData"/> instance for mocking. </returns>
        public static ServiceFabricData ServiceFabricData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string externalServiceFabricId = null, string environmentId = null, ApplicableSchedule applicableSchedule = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ServiceFabricData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                externalServiceFabricId,
                environmentId,
                applicableSchedule,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ApplicableSchedule"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="labVmsShutdown"> The auto-shutdown schedule, if one has been set at the lab or lab resource level. </param>
        /// <param name="labVmsStartup"> The auto-startup schedule, if one has been set at the lab or lab resource level. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="tags"> The tags of the resource. </param>
        /// <returns> A new <see cref="Models.ApplicableSchedule"/> instance for mocking. </returns>
        public static ApplicableSchedule ApplicableSchedule(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ScheduleData labVmsShutdown = null, ScheduleData labVmsStartup = null, string location = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ApplicableSchedule(
                id,
                name,
                resourceType,
                systemData,
                labVmsShutdown,
                labVmsStartup,
                location,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.LabVirtualMachineData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="notes"> The notes of the virtual machine. </param>
        /// <param name="ownerObjectId"> The object identifier of the owner of the virtual machine. </param>
        /// <param name="ownerUserPrincipalName"> The user principal name of the virtual machine owner. </param>
        /// <param name="createdByUserId"> The object identifier of the creator of the virtual machine. </param>
        /// <param name="createdByUser"> The email address of creator of the virtual machine. </param>
        /// <param name="createdOn"> The creation date of the virtual machine. </param>
        /// <param name="computeId"> The resource identifier (Microsoft.Compute) of the virtual machine. </param>
        /// <param name="customImageId"> The custom image identifier of the virtual machine. </param>
        /// <param name="osType"> The OS type of the virtual machine. </param>
        /// <param name="size"> The size of the virtual machine. </param>
        /// <param name="userName"> The user name of the virtual machine. </param>
        /// <param name="password"> The password of the virtual machine administrator. </param>
        /// <param name="sshKey"> The SSH key of the virtual machine administrator. </param>
        /// <param name="isAuthenticationWithSshKey"> Indicates whether this virtual machine uses an SSH key for authentication. </param>
        /// <param name="fqdn"> The fully-qualified domain name of the virtual machine. </param>
        /// <param name="labSubnetName"> The lab subnet name of the virtual machine. </param>
        /// <param name="labVirtualNetworkId"> The lab virtual network identifier of the virtual machine. </param>
        /// <param name="disallowPublicIPAddress"> Indicates whether the virtual machine is to be created without a public IP address. </param>
        /// <param name="artifacts"> The artifacts to be installed on the virtual machine. </param>
        /// <param name="artifactDeploymentStatus"> The artifact deployment status for the virtual machine. </param>
        /// <param name="galleryImageReference"> The Microsoft Azure Marketplace image reference of the virtual machine. </param>
        /// <param name="planId"> The id of the plan associated with the virtual machine image. </param>
        /// <param name="computeVm"> The compute virtual machine properties. </param>
        /// <param name="networkInterface"> The network interface properties. </param>
        /// <param name="applicableSchedule"> The applicable schedule for the virtual machine. </param>
        /// <param name="expireOn"> The expiration date for VM. </param>
        /// <param name="allowClaim"> Indicates whether another user can take ownership of the virtual machine. </param>
        /// <param name="storageType"> Storage type to use for virtual machine (i.e. Standard, Premium). </param>
        /// <param name="virtualMachineCreationSource"> Tells source of creation of lab virtual machine. Output property only. </param>
        /// <param name="environmentId"> The resource ID of the environment that contains this virtual machine, if any. </param>
        /// <param name="dataDiskParameters"> New or existing data disks to attach to the virtual machine after creation. </param>
        /// <param name="scheduleParameters"> Virtual Machine schedules to be created. </param>
        /// <param name="lastKnownPowerState"> Last known compute power state captured in DTL. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.LabVirtualMachineData"/> instance for mocking. </returns>
        public static LabVirtualMachineData LabVirtualMachineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string notes = null, string ownerObjectId = null, string ownerUserPrincipalName = null, string createdByUserId = null, string createdByUser = null, DateTimeOffset? createdOn = null, string computeId = null, string customImageId = null, string osType = null, string size = null, string userName = null, string password = null, string sshKey = null, bool? isAuthenticationWithSshKey = null, string fqdn = null, string labSubnetName = null, string labVirtualNetworkId = null, bool? disallowPublicIPAddress = null, IEnumerable<ArtifactInstallProperties> artifacts = null, ArtifactDeploymentStatusProperties artifactDeploymentStatus = null, GalleryImageReference galleryImageReference = null, string planId = null, ComputeVmProperties computeVm = null, NetworkInterfaceProperties networkInterface = null, ApplicableSchedule applicableSchedule = null, DateTimeOffset? expireOn = null, bool? allowClaim = null, string storageType = null, VirtualMachineCreationSource? virtualMachineCreationSource = null, string environmentId = null, IEnumerable<DataDiskProperties> dataDiskParameters = null, IEnumerable<ScheduleCreationParameter> scheduleParameters = null, string lastKnownPowerState = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();
            artifacts ??= new List<ArtifactInstallProperties>();
            dataDiskParameters ??= new List<DataDiskProperties>();
            scheduleParameters ??= new List<ScheduleCreationParameter>();

            return new LabVirtualMachineData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                notes,
                ownerObjectId,
                ownerUserPrincipalName,
                createdByUserId,
                createdByUser,
                createdOn,
                computeId,
                customImageId,
                osType,
                size,
                userName,
                password,
                sshKey,
                isAuthenticationWithSshKey,
                fqdn,
                labSubnetName,
                labVirtualNetworkId,
                disallowPublicIPAddress,
                artifacts?.ToList(),
                artifactDeploymentStatus,
                galleryImageReference,
                planId,
                computeVm,
                networkInterface,
                applicableSchedule,
                expireOn,
                allowClaim,
                storageType,
                virtualMachineCreationSource,
                environmentId,
                dataDiskParameters?.ToList(),
                scheduleParameters?.ToList(),
                lastKnownPowerState,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArtifactDeploymentStatusProperties"/>. </summary>
        /// <param name="deploymentStatus"> The deployment status of the artifact. </param>
        /// <param name="artifactsApplied"> The total count of the artifacts that were successfully applied. </param>
        /// <param name="totalArtifacts"> The total count of the artifacts that were tentatively applied. </param>
        /// <returns> A new <see cref="Models.ArtifactDeploymentStatusProperties"/> instance for mocking. </returns>
        public static ArtifactDeploymentStatusProperties ArtifactDeploymentStatusProperties(string deploymentStatus = null, int? artifactsApplied = null, int? totalArtifacts = null)
        {
            return new ArtifactDeploymentStatusProperties(deploymentStatus, artifactsApplied, totalArtifacts, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ComputeVmProperties"/>. </summary>
        /// <param name="statuses"> Gets the statuses of the virtual machine. </param>
        /// <param name="osType"> Gets the OS type of the virtual machine. </param>
        /// <param name="vmSize"> Gets the size of the virtual machine. </param>
        /// <param name="networkInterfaceId"> Gets the network interface ID of the virtual machine. </param>
        /// <param name="osDiskId"> Gets OS disk blob uri for the virtual machine. </param>
        /// <param name="dataDiskIds"> Gets data disks blob uri for the virtual machine. </param>
        /// <param name="dataDisks"> Gets all data disks attached to the virtual machine. </param>
        /// <returns> A new <see cref="Models.ComputeVmProperties"/> instance for mocking. </returns>
        public static ComputeVmProperties ComputeVmProperties(IEnumerable<ComputeVmInstanceViewStatus> statuses = null, string osType = null, string vmSize = null, string networkInterfaceId = null, string osDiskId = null, IEnumerable<string> dataDiskIds = null, IEnumerable<ComputeDataDisk> dataDisks = null)
        {
            statuses ??= new List<ComputeVmInstanceViewStatus>();
            dataDiskIds ??= new List<string>();
            dataDisks ??= new List<ComputeDataDisk>();

            return new ComputeVmProperties(
                statuses?.ToList(),
                osType,
                vmSize,
                networkInterfaceId,
                osDiskId,
                dataDiskIds?.ToList(),
                dataDisks?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ComputeVmInstanceViewStatus"/>. </summary>
        /// <param name="code"> Gets the status Code. </param>
        /// <param name="displayStatus"> Gets the short localizable label for the status. </param>
        /// <param name="message"> Gets the message associated with the status. </param>
        /// <returns> A new <see cref="Models.ComputeVmInstanceViewStatus"/> instance for mocking. </returns>
        public static ComputeVmInstanceViewStatus ComputeVmInstanceViewStatus(string code = null, string displayStatus = null, string message = null)
        {
            return new ComputeVmInstanceViewStatus(code, displayStatus, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ComputeDataDisk"/>. </summary>
        /// <param name="name"> Gets data disk name. </param>
        /// <param name="diskUri"> When backed by a blob, the URI of underlying blob. </param>
        /// <param name="managedDiskId"> When backed by managed disk, this is the ID of the compute disk resource. </param>
        /// <param name="diskSizeGiB"> Gets data disk size in GiB. </param>
        /// <returns> A new <see cref="Models.ComputeDataDisk"/> instance for mocking. </returns>
        public static ComputeDataDisk ComputeDataDisk(string name = null, string diskUri = null, string managedDiskId = null, int? diskSizeGiB = null)
        {
            return new ComputeDataDisk(name, diskUri, managedDiskId, diskSizeGiB, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RdpConnection"/>. </summary>
        /// <param name="contents"> The contents of the .rdp file. </param>
        /// <returns> A new <see cref="Models.RdpConnection"/> instance for mocking. </returns>
        public static RdpConnection RdpConnection(string contents = null)
        {
            return new RdpConnection(contents, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevTestLabs.VirtualNetworkData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="allowedSubnets"> The allowed subnets of the virtual network. </param>
        /// <param name="description"> The description of the virtual network. </param>
        /// <param name="externalProviderResourceId"> The Microsoft.Network resource identifier of the virtual network. </param>
        /// <param name="externalSubnets"> The external subnet properties. </param>
        /// <param name="subnetOverrides"> The subnet overrides of the virtual network. </param>
        /// <param name="createdOn"> The creation date of the virtual network. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <returns> A new <see cref="DevTestLabs.VirtualNetworkData"/> instance for mocking. </returns>
        public static VirtualNetworkData VirtualNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<Subnet> allowedSubnets = null, string description = null, string externalProviderResourceId = null, IEnumerable<ExternalSubnet> externalSubnets = null, IEnumerable<SubnetOverride> subnetOverrides = null, DateTimeOffset? createdOn = null, string provisioningState = null, string uniqueIdentifier = null)
        {
            tags ??= new Dictionary<string, string>();
            allowedSubnets ??= new List<Subnet>();
            externalSubnets ??= new List<ExternalSubnet>();
            subnetOverrides ??= new List<SubnetOverride>();

            return new VirtualNetworkData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                allowedSubnets?.ToList(),
                description,
                externalProviderResourceId,
                externalSubnets?.ToList(),
                subnetOverrides?.ToList(),
                createdOn,
                provisioningState,
                uniqueIdentifier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExternalSubnet"/>. </summary>
        /// <param name="id"> Gets or sets the identifier. </param>
        /// <param name="name"> Gets or sets the name. </param>
        /// <returns> A new <see cref="Models.ExternalSubnet"/> instance for mocking. </returns>
        public static ExternalSubnet ExternalSubnet(string id = null, string name = null)
        {
            return new ExternalSubnet(id, name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperationResult"/>. </summary>
        /// <param name="status"> The operation status. </param>
        /// <param name="statusCode"> The status code for the operation. </param>
        /// <param name="error"> Error details for the operation in case of a failure. </param>
        /// <returns> A new <see cref="Models.OperationResult"/> instance for mocking. </returns>
        public static OperationResult OperationResult(string status = null, HttpStatusCode? statusCode = null, OperationError error = null)
        {
            return new OperationResult(status, statusCode, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperationError"/>. </summary>
        /// <param name="code"> The error code of the operation error. </param>
        /// <param name="message"> The error message of the operation error. </param>
        /// <returns> A new <see cref="Models.OperationError"/> instance for mocking. </returns>
        public static OperationError OperationError(string code = null, string message = null)
        {
            return new OperationError(code, message, serializedAdditionalRawData: null);
        }
    }
}
