// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DevTestLabs.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DevTestLabs.Samples
{
    public partial class Sample_NotificationChannelResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_NotificationChannelsGet()
        {
            // Generated from example definition: 2018-09-15/NotificationChannels_Get.json
            // this example is just showing the usage of "NotificationChannel_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NotificationChannelResource created on azure
            // for more information of creating NotificationChannelResource, please refer to the document of NotificationChannelResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{notificationChannelName}";
            ResourceIdentifier notificationChannelResourceId = NotificationChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            NotificationChannelResource notificationChannel = client.GetNotificationChannelResource(notificationChannelResourceId);

            // invoke the operation
            NotificationChannelResource result = await notificationChannel.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NotificationChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_NotificationChannelsDelete()
        {
            // Generated from example definition: 2018-09-15/NotificationChannels_Delete.json
            // this example is just showing the usage of "NotificationChannel_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NotificationChannelResource created on azure
            // for more information of creating NotificationChannelResource, please refer to the document of NotificationChannelResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{notificationChannelName}";
            ResourceIdentifier notificationChannelResourceId = NotificationChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            NotificationChannelResource notificationChannel = client.GetNotificationChannelResource(notificationChannelResourceId);

            // invoke the operation
            await notificationChannel.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_NotificationChannelsUpdate()
        {
            // Generated from example definition: 2018-09-15/NotificationChannels_Update.json
            // this example is just showing the usage of "NotificationChannel_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NotificationChannelResource created on azure
            // for more information of creating NotificationChannelResource, please refer to the document of NotificationChannelResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{notificationChannelName}";
            ResourceIdentifier notificationChannelResourceId = NotificationChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            NotificationChannelResource notificationChannel = client.GetNotificationChannelResource(notificationChannelResourceId);

            // invoke the operation
            NotificationChannelPatch patch = new NotificationChannelPatch();
            NotificationChannelResource result = await notificationChannel.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NotificationChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Notify_NotificationChannelsNotify()
        {
            // Generated from example definition: 2018-09-15/NotificationChannels_Notify.json
            // this example is just showing the usage of "NotificationChannels_Notify" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NotificationChannelResource created on azure
            // for more information of creating NotificationChannelResource, please refer to the document of NotificationChannelResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{notificationChannelName}";
            ResourceIdentifier notificationChannelResourceId = NotificationChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            NotificationChannelResource notificationChannel = client.GetNotificationChannelResource(notificationChannelResourceId);

            // invoke the operation
            NotifyContent content = new NotifyContent
            {
                EventName = NotificationChannelEventType.AutoShutdown,
                JsonPayload = "{\"eventType\":\"AutoShutdown\",\"subscriptionId\":\"{subscriptionId}\",\"resourceGroupName\":\"resourceGroupName\",\"labName\":\"{labName}\"}",
            };
            await notificationChannel.NotifyAsync(content);

            Console.WriteLine("Succeeded");
        }
    }
}
