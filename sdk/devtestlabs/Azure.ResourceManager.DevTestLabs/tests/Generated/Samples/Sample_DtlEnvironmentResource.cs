// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DevTestLabs.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DevTestLabs.Samples
{
    public partial class Sample_DtlEnvironmentResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_EnvironmentsGet()
        {
            // Generated from example definition: 2018-09-15/Environments_Get.json
            // this example is just showing the usage of "DtlEnvironment_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DtlEnvironmentResource created on azure
            // for more information of creating DtlEnvironmentResource, please refer to the document of DtlEnvironmentResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "@me";
            string name = "{environmentName}";
            ResourceIdentifier dtlEnvironmentResourceId = DtlEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName, name);
            DtlEnvironmentResource dtlEnvironment = client.GetDtlEnvironmentResource(dtlEnvironmentResourceId);

            // invoke the operation
            DtlEnvironmentResource result = await dtlEnvironment.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DtlEnvironmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_EnvironmentsDelete()
        {
            // Generated from example definition: 2018-09-15/Environments_Delete.json
            // this example is just showing the usage of "DtlEnvironment_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DtlEnvironmentResource created on azure
            // for more information of creating DtlEnvironmentResource, please refer to the document of DtlEnvironmentResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "@me";
            string name = "{environmentName}";
            ResourceIdentifier dtlEnvironmentResourceId = DtlEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName, name);
            DtlEnvironmentResource dtlEnvironment = client.GetDtlEnvironmentResource(dtlEnvironmentResourceId);

            // invoke the operation
            await dtlEnvironment.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_EnvironmentsUpdate()
        {
            // Generated from example definition: 2018-09-15/Environments_Update.json
            // this example is just showing the usage of "DtlEnvironment_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DtlEnvironmentResource created on azure
            // for more information of creating DtlEnvironmentResource, please refer to the document of DtlEnvironmentResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "@me";
            string name = "{environmentName}";
            ResourceIdentifier dtlEnvironmentResourceId = DtlEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName, name);
            DtlEnvironmentResource dtlEnvironment = client.GetDtlEnvironmentResource(dtlEnvironmentResourceId);

            // invoke the operation
            DtlEnvironmentPatch patch = new DtlEnvironmentPatch
            {
                Tags =
{
["tagName1"] = "tagValue1"
},
            };
            DtlEnvironmentResource result = await dtlEnvironment.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DtlEnvironmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
