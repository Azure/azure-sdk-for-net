// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.DevTestLabs.Samples
{
    public partial class Sample_DiskCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DisksCreateOrUpdate()
        {
            // Generated from example definition: 2018-09-15/Disks_CreateOrUpdate.json
            // this example is just showing the usage of "Disk_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this UserResource created on azure
            // for more information of creating UserResource, please refer to the document of UserResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "{userId}";
            ResourceIdentifier userResourceId = UserResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName);
            UserResource user = client.GetUserResource(userResourceId);

            // get the collection of this DiskResource
            DiskCollection collection = user.GetDisks();

            // invoke the operation
            string name = "{diskName}";
            DiskData data = new DiskData(default);
            ArmOperation<DiskResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, name, data);
            DiskResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DiskData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DisksGet()
        {
            // Generated from example definition: 2018-09-15/Disks_Get.json
            // this example is just showing the usage of "Disk_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this UserResource created on azure
            // for more information of creating UserResource, please refer to the document of UserResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "@me";
            ResourceIdentifier userResourceId = UserResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName);
            UserResource user = client.GetUserResource(userResourceId);

            // get the collection of this DiskResource
            DiskCollection collection = user.GetDisks();

            // invoke the operation
            string name = "{diskName}";
            DiskResource result = await collection.GetAsync(name);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DiskData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_DisksList()
        {
            // Generated from example definition: 2018-09-15/Disks_List.json
            // this example is just showing the usage of "Disk_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this UserResource created on azure
            // for more information of creating UserResource, please refer to the document of UserResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "@me";
            ResourceIdentifier userResourceId = UserResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName);
            UserResource user = client.GetUserResource(userResourceId);

            // get the collection of this DiskResource
            DiskCollection collection = user.GetDisks();

            // invoke the operation and iterate over the result
            await foreach (DiskResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DiskData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_DisksGet()
        {
            // Generated from example definition: 2018-09-15/Disks_Get.json
            // this example is just showing the usage of "Disk_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this UserResource created on azure
            // for more information of creating UserResource, please refer to the document of UserResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "@me";
            ResourceIdentifier userResourceId = UserResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName);
            UserResource user = client.GetUserResource(userResourceId);

            // get the collection of this DiskResource
            DiskCollection collection = user.GetDisks();

            // invoke the operation
            string name = "{diskName}";
            bool result = await collection.ExistsAsync(name);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_DisksGet()
        {
            // Generated from example definition: 2018-09-15/Disks_Get.json
            // this example is just showing the usage of "Disk_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this UserResource created on azure
            // for more information of creating UserResource, please refer to the document of UserResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "@me";
            ResourceIdentifier userResourceId = UserResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName);
            UserResource user = client.GetUserResource(userResourceId);

            // get the collection of this DiskResource
            DiskCollection collection = user.GetDisks();

            // invoke the operation
            string name = "{diskName}";
            NullableResponse<DiskResource> response = await collection.GetIfExistsAsync(name);
            DiskResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DiskData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
