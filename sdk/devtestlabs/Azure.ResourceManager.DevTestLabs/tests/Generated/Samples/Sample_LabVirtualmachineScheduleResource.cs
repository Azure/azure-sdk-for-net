// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DevTestLabs.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DevTestLabs.Samples
{
    public partial class Sample_LabVirtualmachineScheduleResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_VirtualMachineSchedulesGet()
        {
            // Generated from example definition: 2018-09-15/VirtualMachineSchedules_Get.json
            // this example is just showing the usage of "Schedule_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualmachineScheduleResource created on azure
            // for more information of creating LabVirtualmachineScheduleResource, please refer to the document of LabVirtualmachineScheduleResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string virtualMachineName = "{vmName}";
            string name = "LabVmsShutdown";
            ResourceIdentifier labVirtualmachineScheduleResourceId = LabVirtualmachineScheduleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, virtualMachineName, name);
            LabVirtualmachineScheduleResource labVirtualmachineSchedule = client.GetLabVirtualmachineScheduleResource(labVirtualmachineScheduleResourceId);

            // invoke the operation
            LabVirtualmachineScheduleResource result = await labVirtualmachineSchedule.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ScheduleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_VirtualMachineSchedulesDelete()
        {
            // Generated from example definition: 2018-09-15/VirtualMachineSchedules_Delete.json
            // this example is just showing the usage of "Schedule_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualmachineScheduleResource created on azure
            // for more information of creating LabVirtualmachineScheduleResource, please refer to the document of LabVirtualmachineScheduleResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string virtualMachineName = "{vmName}";
            string name = "LabVmsShutdown";
            ResourceIdentifier labVirtualmachineScheduleResourceId = LabVirtualmachineScheduleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, virtualMachineName, name);
            LabVirtualmachineScheduleResource labVirtualmachineSchedule = client.GetLabVirtualmachineScheduleResource(labVirtualmachineScheduleResourceId);

            // invoke the operation
            await labVirtualmachineSchedule.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_VirtualMachineSchedulesUpdate()
        {
            // Generated from example definition: 2018-09-15/VirtualMachineSchedules_Update.json
            // this example is just showing the usage of "Schedule_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualmachineScheduleResource created on azure
            // for more information of creating LabVirtualmachineScheduleResource, please refer to the document of LabVirtualmachineScheduleResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string virtualMachineName = "{vmName}";
            string name = "LabVmsShutdown";
            ResourceIdentifier labVirtualmachineScheduleResourceId = LabVirtualmachineScheduleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, virtualMachineName, name);
            LabVirtualmachineScheduleResource labVirtualmachineSchedule = client.GetLabVirtualmachineScheduleResource(labVirtualmachineScheduleResourceId);

            // invoke the operation
            ScheduleFragment schedule = new ScheduleFragment
            {
                Tags =
{
["tagName1"] = "tagValue1"
},
            };
            LabVirtualmachineScheduleResource result = await labVirtualmachineSchedule.UpdateAsync(schedule);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ScheduleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Execute_VirtualMachineSchedulesExecute()
        {
            // Generated from example definition: 2018-09-15/VirtualMachineSchedules_Execute.json
            // this example is just showing the usage of "VirtualMachineSchedules_Execute" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualmachineScheduleResource created on azure
            // for more information of creating LabVirtualmachineScheduleResource, please refer to the document of LabVirtualmachineScheduleResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string virtualMachineName = "{vmName}";
            string name = "LabVmsShutdown";
            ResourceIdentifier labVirtualmachineScheduleResourceId = LabVirtualmachineScheduleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, virtualMachineName, name);
            LabVirtualmachineScheduleResource labVirtualmachineSchedule = client.GetLabVirtualmachineScheduleResource(labVirtualmachineScheduleResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await labVirtualmachineSchedule.ExecuteAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
