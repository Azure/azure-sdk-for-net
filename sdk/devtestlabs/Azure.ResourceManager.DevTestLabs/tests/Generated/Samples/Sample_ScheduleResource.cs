// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DevTestLabs.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DevTestLabs.Samples
{
    public partial class Sample_ScheduleResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GlobalSchedulesGet()
        {
            // Generated from example definition: 2018-09-15/GlobalSchedules_Get.json
            // this example is just showing the usage of "Schedule_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduleResource created on azure
            // for more information of creating ScheduleResource, please refer to the document of ScheduleResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "labvmautostart";
            ResourceIdentifier scheduleResourceId = ScheduleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ScheduleResource schedule = client.GetScheduleResource(scheduleResourceId);

            // invoke the operation
            ScheduleResource result = await schedule.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ScheduleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_GlobalSchedulesDelete()
        {
            // Generated from example definition: 2018-09-15/GlobalSchedules_Delete.json
            // this example is just showing the usage of "Schedule_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduleResource created on azure
            // for more information of creating ScheduleResource, please refer to the document of ScheduleResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "labvmautostart";
            ResourceIdentifier scheduleResourceId = ScheduleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ScheduleResource schedule = client.GetScheduleResource(scheduleResourceId);

            // invoke the operation
            await schedule.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_GlobalSchedulesUpdate()
        {
            // Generated from example definition: 2018-09-15/GlobalSchedules_Update.json
            // this example is just showing the usage of "Schedule_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduleResource created on azure
            // for more information of creating ScheduleResource, please refer to the document of ScheduleResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "labvmautostart";
            ResourceIdentifier scheduleResourceId = ScheduleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ScheduleResource schedule = client.GetScheduleResource(scheduleResourceId);

            // invoke the operation
            ScheduleFragment schedule0 = new ScheduleFragment
            {
                Tags =
{
["tagName1"] = "tagValue1"
},
            };
            ScheduleResource result = await schedule.UpdateAsync(schedule0);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ScheduleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Execute_GlobalSchedulesExecute()
        {
            // Generated from example definition: 2018-09-15/GlobalSchedules_Execute.json
            // this example is just showing the usage of "GlobalSchedules_Execute" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduleResource created on azure
            // for more information of creating ScheduleResource, please refer to the document of ScheduleResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "labvmautostart";
            ResourceIdentifier scheduleResourceId = ScheduleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ScheduleResource schedule = client.GetScheduleResource(scheduleResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await schedule.ExecuteAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Retarget_GlobalSchedulesRetarget()
        {
            // Generated from example definition: 2018-09-15/GlobalSchedules_Retarget.json
            // this example is just showing the usage of "GlobalSchedules_Retarget" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduleResource created on azure
            // for more information of creating ScheduleResource, please refer to the document of ScheduleResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "{scheduleName}";
            ResourceIdentifier scheduleResourceId = ScheduleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ScheduleResource schedule = client.GetScheduleResource(scheduleResourceId);

            // invoke the operation
            RetargetScheduleProperties retargetScheduleProperties = new RetargetScheduleProperties
            {
                CurrentResourceId = "/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{targetLab}",
                TargetResourceId = "/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{currentLab}",
            };
            ArmOperation<OkResponse> lro = await schedule.RetargetAsync(WaitUntil.Completed, retargetScheduleProperties);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
