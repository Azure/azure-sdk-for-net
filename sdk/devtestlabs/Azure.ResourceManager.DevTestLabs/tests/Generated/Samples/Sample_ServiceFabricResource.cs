// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DevTestLabs.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DevTestLabs.Samples
{
    public partial class Sample_ServiceFabricResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ServiceFabricsGet()
        {
            // Generated from example definition: 2018-09-15/ServiceFabrics_Get.json
            // this example is just showing the usage of "ServiceFabric_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServiceFabricResource created on azure
            // for more information of creating ServiceFabricResource, please refer to the document of ServiceFabricResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "{userName}";
            string name = "{serviceFabricName}";
            ResourceIdentifier serviceFabricResourceId = ServiceFabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName, name);
            ServiceFabricResource serviceFabric = client.GetServiceFabricResource(serviceFabricResourceId);

            // invoke the operation
            ServiceFabricResource result = await serviceFabric.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ServiceFabricData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_ServiceFabricsDelete()
        {
            // Generated from example definition: 2018-09-15/ServiceFabrics_Delete.json
            // this example is just showing the usage of "ServiceFabric_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServiceFabricResource created on azure
            // for more information of creating ServiceFabricResource, please refer to the document of ServiceFabricResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "{userName}";
            string name = "{serviceFabricName}";
            ResourceIdentifier serviceFabricResourceId = ServiceFabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName, name);
            ServiceFabricResource serviceFabric = client.GetServiceFabricResource(serviceFabricResourceId);

            // invoke the operation
            await serviceFabric.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ServiceFabricsUpdate()
        {
            // Generated from example definition: 2018-09-15/ServiceFabrics_Update.json
            // this example is just showing the usage of "ServiceFabric_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServiceFabricResource created on azure
            // for more information of creating ServiceFabricResource, please refer to the document of ServiceFabricResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "{userName}";
            string name = "{serviceFabricName}";
            ResourceIdentifier serviceFabricResourceId = ServiceFabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName, name);
            ServiceFabricResource serviceFabric = client.GetServiceFabricResource(serviceFabricResourceId);

            // invoke the operation
            ServiceFabricPatch patch = new ServiceFabricPatch
            {
                Tags =
{
["tagName1"] = "tagValue1"
},
            };
            ServiceFabricResource result = await serviceFabric.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ServiceFabricData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetApplicableSchedules_ServiceFabricsListApplicableSchedules()
        {
            // Generated from example definition: 2018-09-15/ServiceFabrics_ListApplicableSchedules.json
            // this example is just showing the usage of "ServiceFabrics_ListApplicableSchedules" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServiceFabricResource created on azure
            // for more information of creating ServiceFabricResource, please refer to the document of ServiceFabricResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "{userName}";
            string name = "{serviceFabricName}";
            ResourceIdentifier serviceFabricResourceId = ServiceFabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName, name);
            ServiceFabricResource serviceFabric = client.GetServiceFabricResource(serviceFabricResourceId);

            // invoke the operation
            ApplicableSchedule result = await serviceFabric.GetApplicableSchedulesAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Start_ServiceFabricsStart()
        {
            // Generated from example definition: 2018-09-15/ServiceFabrics_Start.json
            // this example is just showing the usage of "ServiceFabrics_Start" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServiceFabricResource created on azure
            // for more information of creating ServiceFabricResource, please refer to the document of ServiceFabricResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "{userName}";
            string name = "{serviceFabricName}";
            ResourceIdentifier serviceFabricResourceId = ServiceFabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName, name);
            ServiceFabricResource serviceFabric = client.GetServiceFabricResource(serviceFabricResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await serviceFabric.StartAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Stop_ServiceFabricsStop()
        {
            // Generated from example definition: 2018-09-15/ServiceFabrics_Stop.json
            // this example is just showing the usage of "ServiceFabrics_Stop" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServiceFabricResource created on azure
            // for more information of creating ServiceFabricResource, please refer to the document of ServiceFabricResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string userName = "{userName}";
            string name = "{serviceFabricName}";
            ResourceIdentifier serviceFabricResourceId = ServiceFabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, userName, name);
            ServiceFabricResource serviceFabric = client.GetServiceFabricResource(serviceFabricResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await serviceFabric.StopAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
