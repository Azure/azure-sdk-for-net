// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DevTestLabs.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DevTestLabs.Samples
{
    public partial class Sample_LabVirtualMachineResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_VirtualMachinesGet()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_Get.json
            // this example is just showing the usage of "LabVirtualMachine_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            LabVirtualMachineResource result = await labVirtualMachine.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            LabVirtualMachineData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_VirtualMachinesDelete()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_Delete.json
            // this example is just showing the usage of "LabVirtualMachine_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            await labVirtualMachine.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_VirtualMachinesUpdate()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_Update.json
            // this example is just showing the usage of "LabVirtualMachine_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            LabVirtualMachinePatch patch = new LabVirtualMachinePatch();
            LabVirtualMachineResource result = await labVirtualMachine.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            LabVirtualMachineData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task AddDataDisk_VirtualMachinesAddDataDisk()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_AddDataDisk.json
            // this example is just showing the usage of "VirtualMachines_AddDataDisk" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{virtualMachineName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            DataDiskProperties dataDiskProperties = new DataDiskProperties
            {
                AttachNewDataDiskOptions = new AttachNewDataDiskOptions
                {
                    DiskSizeGiB = 127,
                    DiskName = "{diskName}",
                    DiskType = new StorageType("{diskType}"),
                },
            };
            ArmOperation<OkResponse> lro = await labVirtualMachine.AddDataDiskAsync(WaitUntil.Completed, dataDiskProperties);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ApplyArtifacts_VirtualMachinesApplyArtifacts()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_ApplyArtifacts.json
            // this example is just showing the usage of "VirtualMachines_ApplyArtifacts" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            ApplyArtifactsContent content = new ApplyArtifactsContent
            {
                Artifacts = {new ArtifactInstallProperties
{
ArtifactId = "/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactSources/public repo/artifacts/windows-restart",
}},
            };
            ArmOperation<OkResponse> lro = await labVirtualMachine.ApplyArtifactsAsync(WaitUntil.Completed, content);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Claim_VirtualMachinesClaim()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_Claim.json
            // this example is just showing the usage of "VirtualMachines_Claim" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await labVirtualMachine.ClaimAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DetachDataDisk_VirtualMachinesDetachDataDisk()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_DetachDataDisk.json
            // this example is just showing the usage of "VirtualMachines_DetachDataDisk" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{virtualMachineName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            DetachDataDiskProperties detachDataDiskProperties = new DetachDataDiskProperties
            {
                ExistingLabDiskId = "/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{virtualMachineName}",
            };
            ArmOperation<OkResponse> lro = await labVirtualMachine.DetachDataDiskAsync(WaitUntil.Completed, detachDataDiskProperties);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetRdpFileContents_VirtualMachinesGetRdpFileContents()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_GetRdpFileContents.json
            // this example is just showing the usage of "VirtualMachines_GetRdpFileContents" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            RdpConnection result = await labVirtualMachine.GetRdpFileContentsAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetApplicableSchedules_VirtualMachinesListApplicableSchedules()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_ListApplicableSchedules.json
            // this example is just showing the usage of "VirtualMachines_ListApplicableSchedules" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            ApplicableSchedule result = await labVirtualMachine.GetApplicableSchedulesAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Redeploy_VirtualMachinesRedeploy()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_Redeploy.json
            // this example is just showing the usage of "VirtualMachines_Redeploy" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await labVirtualMachine.RedeployAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Resize_VirtualMachinesResize()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_Resize.json
            // this example is just showing the usage of "VirtualMachines_Resize" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            ResizeLabVirtualMachineProperties resizeLabVirtualMachineProperties = new ResizeLabVirtualMachineProperties
            {
                Size = "Standard_A4_v2",
            };
            ArmOperation<OkResponse> lro = await labVirtualMachine.ResizeAsync(WaitUntil.Completed, resizeLabVirtualMachineProperties);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Restart_VirtualMachinesRestart()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_Restart.json
            // this example is just showing the usage of "VirtualMachines_Restart" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await labVirtualMachine.RestartAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Start_VirtualMachinesStart()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_Start.json
            // this example is just showing the usage of "VirtualMachines_Start" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await labVirtualMachine.StartAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Stop_VirtualMachinesStop()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_Stop.json
            // this example is just showing the usage of "VirtualMachines_Stop" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await labVirtualMachine.StopAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task TransferDisks_VirtualMachinesTransferDisks()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_TransferDisks.json
            // this example is just showing the usage of "VirtualMachines_TransferDisks" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{virtualmachineName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await labVirtualMachine.TransferDisksAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UnClaim_VirtualMachinesUnClaim()
        {
            // Generated from example definition: 2018-09-15/VirtualMachines_UnClaim.json
            // this example is just showing the usage of "VirtualMachines_UnClaim" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabVirtualMachineResource created on azure
            // for more information of creating LabVirtualMachineResource, please refer to the document of LabVirtualMachineResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            string name = "{vmName}";
            ResourceIdentifier labVirtualMachineResourceId = LabVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName, name);
            LabVirtualMachineResource labVirtualMachine = client.GetLabVirtualMachineResource(labVirtualMachineResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await labVirtualMachine.UnClaimAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
