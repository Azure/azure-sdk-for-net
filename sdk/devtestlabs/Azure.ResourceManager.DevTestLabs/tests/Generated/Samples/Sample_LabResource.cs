// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DevTestLabs.Models;
using Azure.ResourceManager.Resources.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DevTestLabs.Samples
{
    public partial class Sample_LabResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_LabsGet()
        {
            // Generated from example definition: 2018-09-15/Labs_Get.json
            // this example is just showing the usage of "Lab_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabResource created on azure
            // for more information of creating LabResource, please refer to the document of LabResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "{labName}";
            ResourceIdentifier labResourceId = LabResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            LabResource lab = client.GetLabResource(labResourceId);

            // invoke the operation
            LabResource result = await lab.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            LabData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_LabsDelete()
        {
            // Generated from example definition: 2018-09-15/Labs_Delete.json
            // this example is just showing the usage of "Lab_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabResource created on azure
            // for more information of creating LabResource, please refer to the document of LabResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "{labName}";
            ResourceIdentifier labResourceId = LabResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            LabResource lab = client.GetLabResource(labResourceId);

            // invoke the operation
            await lab.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_LabsUpdate()
        {
            // Generated from example definition: 2018-09-15/Labs_Update.json
            // this example is just showing the usage of "Lab_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabResource created on azure
            // for more information of creating LabResource, please refer to the document of LabResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "{labName}";
            ResourceIdentifier labResourceId = LabResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            LabResource lab = client.GetLabResource(labResourceId);

            // invoke the operation
            LabPatch patch = new LabPatch();
            LabResource result = await lab.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            LabData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ClaimAnyVm_LabsClaimAnyVm()
        {
            // Generated from example definition: 2018-09-15/Labs_ClaimAnyVm.json
            // this example is just showing the usage of "Labs_ClaimAnyVm" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabResource created on azure
            // for more information of creating LabResource, please refer to the document of LabResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "{labName}";
            ResourceIdentifier labResourceId = LabResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            LabResource lab = client.GetLabResource(labResourceId);

            // invoke the operation
            ArmOperation<OkResponse> lro = await lab.ClaimAnyVmAsync(WaitUntil.Completed);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateEnvironment_LabsCreateEnvironment()
        {
            // Generated from example definition: 2018-09-15/Labs_CreateEnvironment.json
            // this example is just showing the usage of "Labs_CreateEnvironment" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabResource created on azure
            // for more information of creating LabResource, please refer to the document of LabResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "{labName}";
            ResourceIdentifier labResourceId = LabResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            LabResource lab = client.GetLabResource(labResourceId);

            // invoke the operation
            LabVirtualMachineCreationParameter labVirtualMachineCreationParameter = new LabVirtualMachineCreationParameter
            {
                Name = "{vmName}",
                Location = "{location}",
                Tags =
{
["tagName1"] = "tagValue1"
},
            };
            ArmOperation<OkResponse> lro = await lab.CreateEnvironmentAsync(WaitUntil.Completed, labVirtualMachineCreationParameter);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ExportResourceUsage_LabsExportResourceUsage()
        {
            // Generated from example definition: 2018-09-15/Labs_ExportResourceUsage.json
            // this example is just showing the usage of "Labs_ExportResourceUsage" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabResource created on azure
            // for more information of creating LabResource, please refer to the document of LabResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "{labName}";
            ResourceIdentifier labResourceId = LabResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            LabResource lab = client.GetLabResource(labResourceId);

            // invoke the operation
            ExportResourceUsageContent content = new ExportResourceUsageContent
            {
                BlobStorageAbsoluteSasUri = "https://invalid.blob.core.windows.net/export.blob?sv=2015-07-08&sig={sas}&sp=rcw",
                UsageStartOn = DateTimeOffset.Parse("2020-12-01T00:00:00Z"),
            };
            ArmOperation<OkResponse> lro = await lab.ExportResourceUsageAsync(WaitUntil.Completed, content);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GenerateUploadUri_LabsGenerateUploadUri()
        {
            // Generated from example definition: 2018-09-15/Labs_GenerateUploadUri.json
            // this example is just showing the usage of "Labs_GenerateUploadUri" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabResource created on azure
            // for more information of creating LabResource, please refer to the document of LabResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "{labName}";
            ResourceIdentifier labResourceId = LabResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            LabResource lab = client.GetLabResource(labResourceId);

            // invoke the operation
            GenerateUploadUriParameter generateUploadUriParameter = new GenerateUploadUriParameter
            {
                BlobName = "{blob-name}",
            };
            GenerateUploadUriResponse result = await lab.GenerateUploadUriAsync(generateUploadUriParameter);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ImportVirtualMachine_LabsImportVirtualMachine()
        {
            // Generated from example definition: 2018-09-15/Labs_ImportVirtualMachine.json
            // this example is just showing the usage of "Labs_ImportVirtualMachine" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabResource created on azure
            // for more information of creating LabResource, please refer to the document of LabResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "{labName}";
            ResourceIdentifier labResourceId = LabResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            LabResource lab = client.GetLabResource(labResourceId);

            // invoke the operation
            ImportLabVirtualMachineContent content = new ImportLabVirtualMachineContent
            {
                SourceVirtualMachineResourceId = "/subscriptions/{subscriptionId}/resourceGroups/{otherResourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
                DestinationVirtualMachineName = "{vmName}",
            };
            ArmOperation<OkResponse> lro = await lab.ImportVirtualMachineAsync(WaitUntil.Completed, content);
            OkResponse result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetVhds_LabsListVhds()
        {
            // Generated from example definition: 2018-09-15/Labs_ListVhds.json
            // this example is just showing the usage of "Labs_ListVhds" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabResource created on azure
            // for more information of creating LabResource, please refer to the document of LabResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string name = "{labName}";
            ResourceIdentifier labResourceId = LabResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            LabResource lab = client.GetLabResource(labResourceId);

            // invoke the operation and iterate over the result
            await foreach (SubResource item in lab.GetVhdsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetGalleryImages_GalleryImagesList()
        {
            // Generated from example definition: 2018-09-15/GalleryImages_List.json
            // this example is just showing the usage of "GalleryImage_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabResource created on azure
            // for more information of creating LabResource, please refer to the document of LabResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            ResourceIdentifier labResourceId = LabResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName);
            LabResource lab = client.GetLabResource(labResourceId);

            // invoke the operation and iterate over the result
            await foreach (GalleryImage item in lab.GetGalleryImagesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task EvaluatePoliciesPolicySet_PolicySetsEvaluatePolicies()
        {
            // Generated from example definition: 2018-09-15/PolicySets_EvaluatePolicies.json
            // this example is just showing the usage of "PolicySets_EvaluatePolicies" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LabResource created on azure
            // for more information of creating LabResource, please refer to the document of LabResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "resourceGroupName";
            string labName = "{labName}";
            ResourceIdentifier labResourceId = LabResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, labName);
            LabResource lab = client.GetLabResource(labResourceId);

            // invoke the operation
            string name = "{policySetName}";
            EvaluatePoliciesContent content = new EvaluatePoliciesContent
            {
                Policies = {new EvaluatePoliciesProperties
{
FactName = "LabVmCount",
ValueOffset = "1",
}},
            };
            EvaluatePoliciesResponse result = await lab.EvaluatePoliciesPolicySetAsync(name, content);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
