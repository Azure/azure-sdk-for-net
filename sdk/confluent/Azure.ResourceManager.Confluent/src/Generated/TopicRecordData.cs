// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Confluent.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Confluent
{
    /// <summary>
    /// A class representing the TopicRecord data model.
    /// Details of topic record
    /// </summary>
    public partial class TopicRecordData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TopicRecordData"/>. </summary>
        public TopicRecordData()
        {
            InputConfigs = new ChangeTrackingList<TopicsInputConfig>();
        }

        /// <summary> Initializes a new instance of <see cref="TopicRecordData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="kind"> Type of topic. </param>
        /// <param name="topicId"> Topic Id returned by Confluent. </param>
        /// <param name="metadata"> Metadata of the record. </param>
        /// <param name="partitions"> Partition Specification of the topic. </param>
        /// <param name="configs"> Config Specification of the topic. </param>
        /// <param name="inputConfigs"> Input Config Specification of the topic. </param>
        /// <param name="partitionsReassignments"> Partition Reassignment Specification of the topic. </param>
        /// <param name="partitionsCount"> Partition count of the topic. </param>
        /// <param name="replicationFactor"> Replication factor of the topic. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TopicRecordData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string kind, string topicId, TopicMetadataEntity metadata, TopicsRelatedLink partitions, TopicsRelatedLink configs, IList<TopicsInputConfig> inputConfigs, TopicsRelatedLink partitionsReassignments, string partitionsCount, string replicationFactor, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Kind = kind;
            TopicId = topicId;
            Metadata = metadata;
            Partitions = partitions;
            Configs = configs;
            InputConfigs = inputConfigs;
            PartitionsReassignments = partitionsReassignments;
            PartitionsCount = partitionsCount;
            ReplicationFactor = replicationFactor;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Type of topic. </summary>
        public string Kind { get; set; }
        /// <summary> Topic Id returned by Confluent. </summary>
        public string TopicId { get; set; }
        /// <summary> Metadata of the record. </summary>
        public TopicMetadataEntity Metadata { get; set; }
        /// <summary> Partition Specification of the topic. </summary>
        internal TopicsRelatedLink Partitions { get; set; }
        /// <summary> Relationship of the topic. </summary>
        public string PartitionsRelated
        {
            get => Partitions is null ? default : Partitions.Related;
            set
            {
                if (Partitions is null)
                    Partitions = new TopicsRelatedLink();
                Partitions.Related = value;
            }
        }

        /// <summary> Config Specification of the topic. </summary>
        internal TopicsRelatedLink Configs { get; set; }
        /// <summary> Relationship of the topic. </summary>
        public string ConfigsRelated
        {
            get => Configs is null ? default : Configs.Related;
            set
            {
                if (Configs is null)
                    Configs = new TopicsRelatedLink();
                Configs.Related = value;
            }
        }

        /// <summary> Input Config Specification of the topic. </summary>
        public IList<TopicsInputConfig> InputConfigs { get; }
        /// <summary> Partition Reassignment Specification of the topic. </summary>
        internal TopicsRelatedLink PartitionsReassignments { get; set; }
        /// <summary> Relationship of the topic. </summary>
        public string PartitionsReassignmentsRelated
        {
            get => PartitionsReassignments is null ? default : PartitionsReassignments.Related;
            set
            {
                if (PartitionsReassignments is null)
                    PartitionsReassignments = new TopicsRelatedLink();
                PartitionsReassignments.Related = value;
            }
        }

        /// <summary> Partition count of the topic. </summary>
        public string PartitionsCount { get; set; }
        /// <summary> Replication factor of the topic. </summary>
        public string ReplicationFactor { get; set; }
    }
}
