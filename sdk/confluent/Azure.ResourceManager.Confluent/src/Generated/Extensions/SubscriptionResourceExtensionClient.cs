// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Confluent.Models;

namespace Azure.ResourceManager.Confluent
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _marketplaceAgreementsClientDiagnostics;
        private MarketplaceAgreementsRestOperations _marketplaceAgreementsRestClient;
        private ClientDiagnostics _organizationResourceOrganizationClientDiagnostics;
        private OrganizationRestOperations _organizationResourceOrganizationRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics MarketplaceAgreementsClientDiagnostics => _marketplaceAgreementsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Confluent", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private MarketplaceAgreementsRestOperations MarketplaceAgreementsRestClient => _marketplaceAgreementsRestClient ??= new MarketplaceAgreementsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics OrganizationResourceOrganizationClientDiagnostics => _organizationResourceOrganizationClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Confluent", OrganizationResource.ResourceType.Namespace, Diagnostics);
        private OrganizationRestOperations OrganizationResourceOrganizationRestClient => _organizationResourceOrganizationRestClient ??= new OrganizationRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(OrganizationResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List Confluent marketplace agreements in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements
        /// Operation Id: MarketplaceAgreements_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ConfluentAgreementResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ConfluentAgreementResource> GetMarketplaceAgreementsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ConfluentAgreementResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = MarketplaceAgreementsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMarketplaceAgreements");
                scope.Start();
                try
                {
                    var response = await MarketplaceAgreementsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ConfluentAgreementResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = MarketplaceAgreementsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMarketplaceAgreements");
                scope.Start();
                try
                {
                    var response = await MarketplaceAgreementsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List Confluent marketplace agreements in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements
        /// Operation Id: MarketplaceAgreements_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ConfluentAgreementResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ConfluentAgreementResource> GetMarketplaceAgreements(CancellationToken cancellationToken = default)
        {
            Page<ConfluentAgreementResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = MarketplaceAgreementsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMarketplaceAgreements");
                scope.Start();
                try
                {
                    var response = MarketplaceAgreementsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ConfluentAgreementResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = MarketplaceAgreementsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMarketplaceAgreements");
                scope.Start();
                try
                {
                    var response = MarketplaceAgreementsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Create Confluent Marketplace agreement in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements/default
        /// Operation Id: MarketplaceAgreements_Create
        /// </summary>
        /// <param name="body"> Confluent Marketplace Agreement resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ConfluentAgreementResource>> CreateMarketplaceAgreementAsync(ConfluentAgreementResource body = null, CancellationToken cancellationToken = default)
        {
            using var scope = MarketplaceAgreementsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CreateMarketplaceAgreement");
            scope.Start();
            try
            {
                var response = await MarketplaceAgreementsRestClient.CreateAsync(Id.SubscriptionId, body, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create Confluent Marketplace agreement in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements/default
        /// Operation Id: MarketplaceAgreements_Create
        /// </summary>
        /// <param name="body"> Confluent Marketplace Agreement resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ConfluentAgreementResource> CreateMarketplaceAgreement(ConfluentAgreementResource body = null, CancellationToken cancellationToken = default)
        {
            using var scope = MarketplaceAgreementsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CreateMarketplaceAgreement");
            scope.Start();
            try
            {
                var response = MarketplaceAgreementsRestClient.Create(Id.SubscriptionId, body, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List all organizations under the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Confluent/organizations
        /// Operation Id: Organization_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OrganizationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OrganizationResource> GetOrganizationResourcesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<OrganizationResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OrganizationResourceOrganizationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrganizationResources");
                scope.Start();
                try
                {
                    var response = await OrganizationResourceOrganizationRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OrganizationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<OrganizationResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = OrganizationResourceOrganizationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrganizationResources");
                scope.Start();
                try
                {
                    var response = await OrganizationResourceOrganizationRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OrganizationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List all organizations under the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Confluent/organizations
        /// Operation Id: Organization_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OrganizationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OrganizationResource> GetOrganizationResources(CancellationToken cancellationToken = default)
        {
            Page<OrganizationResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OrganizationResourceOrganizationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrganizationResources");
                scope.Start();
                try
                {
                    var response = OrganizationResourceOrganizationRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OrganizationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<OrganizationResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = OrganizationResourceOrganizationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrganizationResources");
                scope.Start();
                try
                {
                    var response = OrganizationResourceOrganizationRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OrganizationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
