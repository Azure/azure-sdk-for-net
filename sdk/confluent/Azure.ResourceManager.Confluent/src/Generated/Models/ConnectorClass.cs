// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Confluent.Models
{
    /// <summary> Connector Class. </summary>
    public readonly partial struct ConnectorClass : IEquatable<ConnectorClass>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConnectorClass"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectorClass(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AZUREBLOBSOURCEValue = "AZUREBLOBSOURCE";
        private const string AZUREBLOBSINKValue = "AZUREBLOBSINK";
        private const string AZURECOSMOSV2SINKValue = "AZURECOSMOSV2SINK";
        private const string AZURECOSMOSV2SOURCEValue = "AZURECOSMOSV2SOURCE";

        /// <summary> AZUREBLOBSOURCE. </summary>
        public static ConnectorClass AZUREBLOBSOURCE { get; } = new ConnectorClass(AZUREBLOBSOURCEValue);
        /// <summary> AZUREBLOBSINK. </summary>
        public static ConnectorClass AZUREBLOBSINK { get; } = new ConnectorClass(AZUREBLOBSINKValue);
        /// <summary> AZURECOSMOSV2SINK. </summary>
        public static ConnectorClass AZURECOSMOSV2SINK { get; } = new ConnectorClass(AZURECOSMOSV2SINKValue);
        /// <summary> AZURECOSMOSV2SOURCE. </summary>
        public static ConnectorClass AZURECOSMOSV2SOURCE { get; } = new ConnectorClass(AZURECOSMOSV2SOURCEValue);
        /// <summary> Determines if two <see cref="ConnectorClass"/> values are the same. </summary>
        public static bool operator ==(ConnectorClass left, ConnectorClass right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConnectorClass"/> values are not the same. </summary>
        public static bool operator !=(ConnectorClass left, ConnectorClass right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ConnectorClass"/>. </summary>
        public static implicit operator ConnectorClass(string value) => new ConnectorClass(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectorClass other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConnectorClass other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
