// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Confluent.Models
{
    public partial class KafkaAzureCosmosDBSourceConnectorInfo : IUtf8JsonSerializable, IJsonModel<KafkaAzureCosmosDBSourceConnectorInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<KafkaAzureCosmosDBSourceConnectorInfo>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<KafkaAzureCosmosDBSourceConnectorInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KafkaAzureCosmosDBSourceConnectorInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(KafkaAzureCosmosDBSourceConnectorInfo)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(AuthType))
            {
                writer.WritePropertyName("authType"u8);
                writer.WriteStringValue(AuthType.Value.ToString());
            }
            if (Optional.IsDefined(InputFormat))
            {
                writer.WritePropertyName("inputFormat"u8);
                writer.WriteStringValue(InputFormat.Value.ToString());
            }
            if (Optional.IsDefined(OutputFormat))
            {
                writer.WritePropertyName("outputFormat"u8);
                writer.WriteStringValue(OutputFormat.Value.ToString());
            }
            if (Optional.IsDefined(ApiKey))
            {
                writer.WritePropertyName("apiKey"u8);
                writer.WriteStringValue(ApiKey);
            }
            if (Optional.IsDefined(ApiSecret))
            {
                writer.WritePropertyName("apiSecret"u8);
                writer.WriteStringValue(ApiSecret);
            }
            if (Optional.IsDefined(ServiceAccountId))
            {
                writer.WritePropertyName("serviceAccountId"u8);
                writer.WriteStringValue(ServiceAccountId);
            }
            if (Optional.IsDefined(TopicRegex))
            {
                writer.WritePropertyName("topicRegex"u8);
                writer.WriteStringValue(TopicRegex);
            }
            if (Optional.IsDefined(TopicsDir))
            {
                writer.WritePropertyName("topicsDir"u8);
                writer.WriteStringValue(TopicsDir);
            }
            if (Optional.IsDefined(MaxTasks))
            {
                writer.WritePropertyName("maxTasks"u8);
                writer.WriteStringValue(MaxTasks);
            }
        }

        KafkaAzureCosmosDBSourceConnectorInfo IJsonModel<KafkaAzureCosmosDBSourceConnectorInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KafkaAzureCosmosDBSourceConnectorInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(KafkaAzureCosmosDBSourceConnectorInfo)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeKafkaAzureCosmosDBSourceConnectorInfo(document.RootElement, options);
        }

        internal static KafkaAzureCosmosDBSourceConnectorInfo DeserializeKafkaAzureCosmosDBSourceConnectorInfo(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            AuthType? authType = default;
            DataFormatType? inputFormat = default;
            DataFormatType? outputFormat = default;
            string apiKey = default;
            string apiSecret = default;
            string serviceAccountId = default;
            string topicRegex = default;
            string topicsDir = default;
            string maxTasks = default;
            PartnerConnectorType partnerConnectorType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("authType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authType = new AuthType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("inputFormat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputFormat = new DataFormatType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("outputFormat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    outputFormat = new DataFormatType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("apiKey"u8))
                {
                    apiKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("apiSecret"u8))
                {
                    apiSecret = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceAccountId"u8))
                {
                    serviceAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("topicRegex"u8))
                {
                    topicRegex = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("topicsDir"u8))
                {
                    topicsDir = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxTasks"u8))
                {
                    maxTasks = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("partnerConnectorType"u8))
                {
                    partnerConnectorType = new PartnerConnectorType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new KafkaAzureCosmosDBSourceConnectorInfo(
                partnerConnectorType,
                serializedAdditionalRawData,
                authType,
                inputFormat,
                outputFormat,
                apiKey,
                apiSecret,
                serviceAccountId,
                topicRegex,
                topicsDir,
                maxTasks);
        }

        BinaryData IPersistableModel<KafkaAzureCosmosDBSourceConnectorInfo>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KafkaAzureCosmosDBSourceConnectorInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerConfluentContext.Default);
                default:
                    throw new FormatException($"The model {nameof(KafkaAzureCosmosDBSourceConnectorInfo)} does not support writing '{options.Format}' format.");
            }
        }

        KafkaAzureCosmosDBSourceConnectorInfo IPersistableModel<KafkaAzureCosmosDBSourceConnectorInfo>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KafkaAzureCosmosDBSourceConnectorInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeKafkaAzureCosmosDBSourceConnectorInfo(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(KafkaAzureCosmosDBSourceConnectorInfo)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<KafkaAzureCosmosDBSourceConnectorInfo>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
