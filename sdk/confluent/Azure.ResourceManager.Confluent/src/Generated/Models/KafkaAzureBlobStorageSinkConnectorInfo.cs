// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Confluent.Models
{
    /// <summary> The partner connector type is KafkaAzureBlobStorageSink. </summary>
    public partial class KafkaAzureBlobStorageSinkConnectorInfo : PartnerInfoBase
    {
        /// <summary> Initializes a new instance of <see cref="KafkaAzureBlobStorageSinkConnectorInfo"/>. </summary>
        public KafkaAzureBlobStorageSinkConnectorInfo()
        {
            Topics = new ChangeTrackingList<string>();
            PartnerConnectorType = PartnerConnectorType.KafkaAzureBlobStorageSink;
        }

        /// <summary> Initializes a new instance of <see cref="KafkaAzureBlobStorageSinkConnectorInfo"/>. </summary>
        /// <param name="partnerConnectorType"> The partner connector type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="authType"> Kafka Auth Type. </param>
        /// <param name="inputFormat"> Kafka Input Data Format Type. </param>
        /// <param name="outputFormat"> Kafka Output Data Format Type. </param>
        /// <param name="apiKey"> Kafka API Key. </param>
        /// <param name="apiSecret"> Kafka API Key Secret. </param>
        /// <param name="serviceAccountId"> Kafka Service Account Id. </param>
        /// <param name="topics"> Kafka topics list. </param>
        /// <param name="topicsDir"> Kafka topics directory. </param>
        /// <param name="flushSize"> Flush size. </param>
        /// <param name="maxTasks"> Maximum Tasks. </param>
        /// <param name="timeInterval"> Time Interval. </param>
        internal KafkaAzureBlobStorageSinkConnectorInfo(PartnerConnectorType partnerConnectorType, IDictionary<string, BinaryData> serializedAdditionalRawData, AuthType? authType, DataFormatType? inputFormat, DataFormatType? outputFormat, string apiKey, string apiSecret, string serviceAccountId, IList<string> topics, string topicsDir, string flushSize, string maxTasks, string timeInterval) : base(partnerConnectorType, serializedAdditionalRawData)
        {
            AuthType = authType;
            InputFormat = inputFormat;
            OutputFormat = outputFormat;
            ApiKey = apiKey;
            ApiSecret = apiSecret;
            ServiceAccountId = serviceAccountId;
            Topics = topics;
            TopicsDir = topicsDir;
            FlushSize = flushSize;
            MaxTasks = maxTasks;
            TimeInterval = timeInterval;
            PartnerConnectorType = partnerConnectorType;
        }

        /// <summary> Kafka Auth Type. </summary>
        public AuthType? AuthType { get; set; }
        /// <summary> Kafka Input Data Format Type. </summary>
        public DataFormatType? InputFormat { get; set; }
        /// <summary> Kafka Output Data Format Type. </summary>
        public DataFormatType? OutputFormat { get; set; }
        /// <summary> Kafka API Key. </summary>
        public string ApiKey { get; set; }
        /// <summary> Kafka API Key Secret. </summary>
        public string ApiSecret { get; set; }
        /// <summary> Kafka Service Account Id. </summary>
        public string ServiceAccountId { get; set; }
        /// <summary> Kafka topics list. </summary>
        public IList<string> Topics { get; }
        /// <summary> Kafka topics directory. </summary>
        public string TopicsDir { get; set; }
        /// <summary> Flush size. </summary>
        public string FlushSize { get; set; }
        /// <summary> Maximum Tasks. </summary>
        public string MaxTasks { get; set; }
        /// <summary> Time Interval. </summary>
        public string TimeInterval { get; set; }
    }
}
