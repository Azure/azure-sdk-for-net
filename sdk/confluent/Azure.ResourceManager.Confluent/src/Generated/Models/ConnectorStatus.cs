// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Confluent.Models
{
    /// <summary> Connector Status. </summary>
    public readonly partial struct ConnectorStatus : IEquatable<ConnectorStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConnectorStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectorStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PROVISIONINGValue = "PROVISIONING";
        private const string RUNNINGValue = "RUNNING";
        private const string PAUSEDValue = "PAUSED";
        private const string FAILEDValue = "FAILED";

        /// <summary> PROVISIONING. </summary>
        public static ConnectorStatus PROVISIONING { get; } = new ConnectorStatus(PROVISIONINGValue);
        /// <summary> RUNNING. </summary>
        public static ConnectorStatus RUNNING { get; } = new ConnectorStatus(RUNNINGValue);
        /// <summary> PAUSED. </summary>
        public static ConnectorStatus PAUSED { get; } = new ConnectorStatus(PAUSEDValue);
        /// <summary> FAILED. </summary>
        public static ConnectorStatus FAILED { get; } = new ConnectorStatus(FAILEDValue);
        /// <summary> Determines if two <see cref="ConnectorStatus"/> values are the same. </summary>
        public static bool operator ==(ConnectorStatus left, ConnectorStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConnectorStatus"/> values are not the same. </summary>
        public static bool operator !=(ConnectorStatus left, ConnectorStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ConnectorStatus"/>. </summary>
        public static implicit operator ConnectorStatus(string value) => new ConnectorStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectorStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConnectorStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
