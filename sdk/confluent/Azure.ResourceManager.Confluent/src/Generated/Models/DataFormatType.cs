// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Confluent.Models
{
    /// <summary> Data Format Type. </summary>
    public readonly partial struct DataFormatType : IEquatable<DataFormatType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataFormatType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataFormatType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AVROValue = "AVRO";
        private const string JSONValue = "JSON";
        private const string STRINGValue = "STRING";
        private const string BYTESValue = "BYTES";
        private const string PROTOBUFValue = "PROTOBUF";

        /// <summary> AVRO. </summary>
        public static DataFormatType AVRO { get; } = new DataFormatType(AVROValue);
        /// <summary> JSON. </summary>
        public static DataFormatType JSON { get; } = new DataFormatType(JSONValue);
        /// <summary> STRING. </summary>
        public static DataFormatType STRING { get; } = new DataFormatType(STRINGValue);
        /// <summary> BYTES. </summary>
        public static DataFormatType BYTES { get; } = new DataFormatType(BYTESValue);
        /// <summary> PROTOBUF. </summary>
        public static DataFormatType PROTOBUF { get; } = new DataFormatType(PROTOBUFValue);
        /// <summary> Determines if two <see cref="DataFormatType"/> values are the same. </summary>
        public static bool operator ==(DataFormatType left, DataFormatType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataFormatType"/> values are not the same. </summary>
        public static bool operator !=(DataFormatType left, DataFormatType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DataFormatType"/>. </summary>
        public static implicit operator DataFormatType(string value) => new DataFormatType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataFormatType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataFormatType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
