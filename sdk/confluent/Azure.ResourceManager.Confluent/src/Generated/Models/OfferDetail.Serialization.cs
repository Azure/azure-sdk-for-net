// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Confluent.Models
{
    public partial class OfferDetail : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("publisherId");
            writer.WriteStringValue(PublisherId);
            writer.WritePropertyName("id");
            writer.WriteStringValue(Id);
            writer.WritePropertyName("planId");
            writer.WriteStringValue(PlanId);
            writer.WritePropertyName("planName");
            writer.WriteStringValue(PlanName);
            writer.WritePropertyName("termUnit");
            writer.WriteStringValue(TermUnit);
            writer.WriteEndObject();
        }

        internal static OfferDetail DeserializeOfferDetail(JsonElement element)
        {
            string publisherId = default;
            string id = default;
            string planId = default;
            string planName = default;
            string termUnit = default;
            Optional<SaaSOfferStatus> status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("publisherId"))
                {
                    publisherId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("planId"))
                {
                    planId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("planName"))
                {
                    planName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("termUnit"))
                {
                    termUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new SaaSOfferStatus(property.Value.GetString());
                    continue;
                }
            }
            return new OfferDetail(publisherId, id, planId, planName, termUnit, Optional.ToNullable(status));
        }
    }
}
