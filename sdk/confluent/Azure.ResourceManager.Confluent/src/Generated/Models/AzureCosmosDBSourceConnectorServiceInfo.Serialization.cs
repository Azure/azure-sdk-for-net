// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Confluent.Models
{
    public partial class AzureCosmosDBSourceConnectorServiceInfo : IUtf8JsonSerializable, IJsonModel<AzureCosmosDBSourceConnectorServiceInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AzureCosmosDBSourceConnectorServiceInfo>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AzureCosmosDBSourceConnectorServiceInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureCosmosDBSourceConnectorServiceInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AzureCosmosDBSourceConnectorServiceInfo)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(CosmosDatabaseName))
            {
                writer.WritePropertyName("cosmosDatabaseName"u8);
                writer.WriteStringValue(CosmosDatabaseName);
            }
            if (Optional.IsDefined(CosmosMasterKey))
            {
                writer.WritePropertyName("cosmosMasterKey"u8);
                writer.WriteStringValue(CosmosMasterKey);
            }
            if (Optional.IsDefined(CosmosConnectionEndpoint))
            {
                writer.WritePropertyName("cosmosConnectionEndpoint"u8);
                writer.WriteStringValue(CosmosConnectionEndpoint);
            }
            if (Optional.IsDefined(CosmosContainersTopicMapping))
            {
                writer.WritePropertyName("cosmosContainersTopicMapping"u8);
                writer.WriteStringValue(CosmosContainersTopicMapping);
            }
            if (Optional.IsDefined(CosmosMessageKeyEnabled))
            {
                writer.WritePropertyName("cosmosMessageKeyEnabled"u8);
                writer.WriteBooleanValue(CosmosMessageKeyEnabled.Value);
            }
            if (Optional.IsDefined(CosmosMessageKeyField))
            {
                writer.WritePropertyName("cosmosMessageKeyField"u8);
                writer.WriteStringValue(CosmosMessageKeyField);
            }
            if (Optional.IsDefined(CosmosIncludeAllContainers))
            {
                writer.WritePropertyName("cosmosIncludeAllContainers"u8);
                writer.WriteStringValue(CosmosIncludeAllContainers);
            }
        }

        AzureCosmosDBSourceConnectorServiceInfo IJsonModel<AzureCosmosDBSourceConnectorServiceInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureCosmosDBSourceConnectorServiceInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AzureCosmosDBSourceConnectorServiceInfo)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAzureCosmosDBSourceConnectorServiceInfo(document.RootElement, options);
        }

        internal static AzureCosmosDBSourceConnectorServiceInfo DeserializeAzureCosmosDBSourceConnectorServiceInfo(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string cosmosDatabaseName = default;
            string cosmosMasterKey = default;
            string cosmosConnectionEndpoint = default;
            string cosmosContainersTopicMapping = default;
            bool? cosmosMessageKeyEnabled = default;
            string cosmosMessageKeyField = default;
            string cosmosIncludeAllContainers = default;
            ConnectorServiceType connectorServiceType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cosmosDatabaseName"u8))
                {
                    cosmosDatabaseName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cosmosMasterKey"u8))
                {
                    cosmosMasterKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cosmosConnectionEndpoint"u8))
                {
                    cosmosConnectionEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cosmosContainersTopicMapping"u8))
                {
                    cosmosContainersTopicMapping = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cosmosMessageKeyEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cosmosMessageKeyEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cosmosMessageKeyField"u8))
                {
                    cosmosMessageKeyField = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cosmosIncludeAllContainers"u8))
                {
                    cosmosIncludeAllContainers = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connectorServiceType"u8))
                {
                    connectorServiceType = new ConnectorServiceType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AzureCosmosDBSourceConnectorServiceInfo(
                connectorServiceType,
                serializedAdditionalRawData,
                cosmosDatabaseName,
                cosmosMasterKey,
                cosmosConnectionEndpoint,
                cosmosContainersTopicMapping,
                cosmosMessageKeyEnabled,
                cosmosMessageKeyField,
                cosmosIncludeAllContainers);
        }

        BinaryData IPersistableModel<AzureCosmosDBSourceConnectorServiceInfo>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureCosmosDBSourceConnectorServiceInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerConfluentContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AzureCosmosDBSourceConnectorServiceInfo)} does not support writing '{options.Format}' format.");
            }
        }

        AzureCosmosDBSourceConnectorServiceInfo IPersistableModel<AzureCosmosDBSourceConnectorServiceInfo>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureCosmosDBSourceConnectorServiceInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAzureCosmosDBSourceConnectorServiceInfo(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AzureCosmosDBSourceConnectorServiceInfo)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AzureCosmosDBSourceConnectorServiceInfo>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
