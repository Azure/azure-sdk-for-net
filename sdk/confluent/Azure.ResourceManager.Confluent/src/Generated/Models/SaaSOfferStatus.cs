// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Confluent.Models
{
    /// <summary> SaaS Offer Status for confluent RP. </summary>
    public readonly partial struct SaaSOfferStatus : IEquatable<SaaSOfferStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SaaSOfferStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SaaSOfferStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StartedValue = "Started";
        private const string PendingFulfillmentStartValue = "PendingFulfillmentStart";
        private const string InProgressValue = "InProgress";
        private const string SubscribedValue = "Subscribed";
        private const string SuspendedValue = "Suspended";
        private const string ReinstatedValue = "Reinstated";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string UnsubscribedValue = "Unsubscribed";
        private const string UpdatingValue = "Updating";

        /// <summary> Started. </summary>
        public static SaaSOfferStatus Started { get; } = new SaaSOfferStatus(StartedValue);
        /// <summary> PendingFulfillmentStart. </summary>
        public static SaaSOfferStatus PendingFulfillmentStart { get; } = new SaaSOfferStatus(PendingFulfillmentStartValue);
        /// <summary> InProgress. </summary>
        public static SaaSOfferStatus InProgress { get; } = new SaaSOfferStatus(InProgressValue);
        /// <summary> Subscribed. </summary>
        public static SaaSOfferStatus Subscribed { get; } = new SaaSOfferStatus(SubscribedValue);
        /// <summary> Suspended. </summary>
        public static SaaSOfferStatus Suspended { get; } = new SaaSOfferStatus(SuspendedValue);
        /// <summary> Reinstated. </summary>
        public static SaaSOfferStatus Reinstated { get; } = new SaaSOfferStatus(ReinstatedValue);
        /// <summary> Succeeded. </summary>
        public static SaaSOfferStatus Succeeded { get; } = new SaaSOfferStatus(SucceededValue);
        /// <summary> Failed. </summary>
        public static SaaSOfferStatus Failed { get; } = new SaaSOfferStatus(FailedValue);
        /// <summary> Unsubscribed. </summary>
        public static SaaSOfferStatus Unsubscribed { get; } = new SaaSOfferStatus(UnsubscribedValue);
        /// <summary> Updating. </summary>
        public static SaaSOfferStatus Updating { get; } = new SaaSOfferStatus(UpdatingValue);
        /// <summary> Determines if two <see cref="SaaSOfferStatus"/> values are the same. </summary>
        public static bool operator ==(SaaSOfferStatus left, SaaSOfferStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SaaSOfferStatus"/> values are not the same. </summary>
        public static bool operator !=(SaaSOfferStatus left, SaaSOfferStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SaaSOfferStatus"/>. </summary>
        public static implicit operator SaaSOfferStatus(string value) => new SaaSOfferStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SaaSOfferStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SaaSOfferStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
