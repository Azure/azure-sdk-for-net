// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Confluent.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Confluent.Samples
{
    public partial class Sample_SCClusterRecordResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateApiKey_OrganizationCreateAPIKeyMaximumSet()
        {
            // Generated from example definition: 2025-07-17-preview/examples/Organization_CreateAPIKey_MaximumSet_Gen.json
            // this example is just showing the usage of "SCClusterRecords_CreateApiKey" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCClusterRecordResource created on azure
            // for more information of creating SCClusterRecordResource, please refer to the document of SCClusterRecordResource
            string subscriptionId = "F1DD149D-DDBF-4A56-ACC5-35ADC1C6103D";
            string resourceGroupName = "rgconfluent";
            string organizationName = "ivxzjxogbgqr";
            string environmentId = "pfcuotbaojfqilngrmm";
            string clusterId = "sthhgl";
            ResourceIdentifier scClusterRecordResourceId = SCClusterRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId, clusterId);
            SCClusterRecordResource scClusterRecord = client.GetSCClusterRecordResource(scClusterRecordResourceId);

            // invoke the operation
            ConfluentApiKeyCreateContent content = new ConfluentApiKeyCreateContent
            {
                Name = "qgeqraygiikrd",
                Description = "dqwkocklqbjzfq",
            };
            ConfluentApiKeyRecord result = await scClusterRecord.CreateApiKeyAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateApiKey_OrganizationCreateAPIKeyMinimumSet()
        {
            // Generated from example definition: 2025-07-17-preview/examples/Organization_CreateAPIKey_MinimumSet_Gen.json
            // this example is just showing the usage of "SCClusterRecords_CreateApiKey" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCClusterRecordResource created on azure
            // for more information of creating SCClusterRecordResource, please refer to the document of SCClusterRecordResource
            string subscriptionId = "F1DD149D-DDBF-4A56-ACC5-35ADC1C6103D";
            string resourceGroupName = "rgconfluent";
            string organizationName = "oncpruqcamvwrvvscgvkwvue";
            string environmentId = "kmgmtyyeyjygkbykmfpwtohtbvll";
            string clusterId = "hfqxytoqrtd";
            ResourceIdentifier scClusterRecordResourceId = SCClusterRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId, clusterId);
            SCClusterRecordResource scClusterRecord = client.GetSCClusterRecordResource(scClusterRecordResourceId);

            // invoke the operation
            ConfluentApiKeyCreateContent content = new ConfluentApiKeyCreateContent();
            ConfluentApiKeyRecord result = await scClusterRecord.CreateApiKeyAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
