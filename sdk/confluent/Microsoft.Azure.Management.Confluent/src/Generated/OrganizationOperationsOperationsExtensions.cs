// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Confluent
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OrganizationOperationsOperations.
    /// </summary>
    public static partial class OrganizationOperationsOperationsExtensions
    {
            /// <summary>
            /// List all organizations under the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<OrganizationResource> ListBySubscription(this IOrganizationOperationsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all organizations under the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrganizationResource>> ListBySubscriptionAsync(this IOrganizationOperationsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all Organizations under the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            public static IPage<OrganizationResource> ListByResourceGroup(this IOrganizationOperationsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all Organizations under the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrganizationResource>> ListByResourceGroupAsync(this IOrganizationOperationsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the properties of a specific Organization resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            public static OrganizationResource Get(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName)
            {
                return operations.GetAsync(resourceGroupName, organizationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the properties of a specific Organization resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrganizationResource> GetAsync(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, organizationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Organization resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            /// <param name='body'>
            /// Organization resource model
            /// </param>
            public static OrganizationResource Create(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName, OrganizationResource body = default(OrganizationResource))
            {
                return operations.CreateAsync(resourceGroupName, organizationName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Organization resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            /// <param name='body'>
            /// Organization resource model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrganizationResource> CreateAsync(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName, OrganizationResource body = default(OrganizationResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, organizationName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Organization resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            /// <param name='tags'>
            /// ARM resource tags
            /// </param>
            public static OrganizationResource Update(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, organizationName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Organization resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            /// <param name='tags'>
            /// ARM resource tags
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrganizationResource> UpdateAsync(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, organizationName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Organization resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            public static void Delete(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName)
            {
                operations.DeleteAsync(resourceGroupName, organizationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Organization resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, organizationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create Organization resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            /// <param name='body'>
            /// Organization resource model
            /// </param>
            public static OrganizationResource BeginCreate(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName, OrganizationResource body = default(OrganizationResource))
            {
                return operations.BeginCreateAsync(resourceGroupName, organizationName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Organization resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            /// <param name='body'>
            /// Organization resource model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrganizationResource> BeginCreateAsync(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName, OrganizationResource body = default(OrganizationResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, organizationName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Organization resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            public static void BeginDelete(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName)
            {
                operations.BeginDeleteAsync(resourceGroupName, organizationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Organization resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name
            /// </param>
            /// <param name='organizationName'>
            /// Organization resource name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IOrganizationOperationsOperations operations, string resourceGroupName, string organizationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, organizationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List all organizations under the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OrganizationResource> ListBySubscriptionNext(this IOrganizationOperationsOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all organizations under the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrganizationResource>> ListBySubscriptionNextAsync(this IOrganizationOperationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all Organizations under the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OrganizationResource> ListByResourceGroupNext(this IOrganizationOperationsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all Organizations under the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OrganizationResource>> ListByResourceGroupNextAsync(this IOrganizationOperationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
