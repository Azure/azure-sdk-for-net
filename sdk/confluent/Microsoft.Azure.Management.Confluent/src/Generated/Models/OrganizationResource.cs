// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Confluent.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Organization resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class OrganizationResource : IResource
    {
        /// <summary>
        /// Initializes a new instance of the OrganizationResource class.
        /// </summary>
        public OrganizationResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OrganizationResource class.
        /// </summary>
        /// <param name="id">The ARM id of the resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="createdTime">The creation time of the
        /// resource.</param>
        /// <param name="provisioningState">Provision states for confluent RP.
        /// Possible values include: 'Accepted', 'Creating', 'Updating',
        /// 'Deleting', 'Succeeded', 'Failed', 'Canceled', 'Deleted',
        /// 'NotSpecified'</param>
        /// <param name="organizationId">Id of the Confluent
        /// organization.</param>
        /// <param name="ssoUrl">SSO url for the Confluent
        /// organization.</param>
        /// <param name="offerDetail">Confluent offer detail</param>
        /// <param name="userDetail">Subscriber detail</param>
        /// <param name="tags">Organization resource tags</param>
        /// <param name="location">Location of Organization resource</param>
        public OrganizationResource(string id = default(string), string name = default(string), string type = default(string), System.DateTime? createdTime = default(System.DateTime?), string provisioningState = default(string), string organizationId = default(string), string ssoUrl = default(string), OrganizationResourcePropertiesOfferDetail offerDetail = default(OrganizationResourcePropertiesOfferDetail), OrganizationResourcePropertiesUserDetail userDetail = default(OrganizationResourcePropertiesUserDetail), IDictionary<string, string> tags = default(IDictionary<string, string>), string location = default(string))
        {
            Id = id;
            Name = name;
            Type = type;
            CreatedTime = createdTime;
            ProvisioningState = provisioningState;
            OrganizationId = organizationId;
            SsoUrl = ssoUrl;
            OfferDetail = offerDetail;
            UserDetail = userDetail;
            Tags = tags;
            Location = location;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the ARM id of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the name of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the type of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets the creation time of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdTime")]
        public System.DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Gets or sets provision states for confluent RP. Possible values
        /// include: 'Accepted', 'Creating', 'Updating', 'Deleting',
        /// 'Succeeded', 'Failed', 'Canceled', 'Deleted', 'NotSpecified'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets id of the Confluent organization.
        /// </summary>
        [JsonProperty(PropertyName = "properties.organizationId")]
        public string OrganizationId { get; private set; }

        /// <summary>
        /// Gets SSO url for the Confluent organization.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ssoUrl")]
        public string SsoUrl { get; private set; }

        /// <summary>
        /// Gets or sets confluent offer detail
        /// </summary>
        [JsonProperty(PropertyName = "properties.offerDetail")]
        public OrganizationResourcePropertiesOfferDetail OfferDetail { get; set; }

        /// <summary>
        /// Gets or sets subscriber detail
        /// </summary>
        [JsonProperty(PropertyName = "properties.userDetail")]
        public OrganizationResourcePropertiesUserDetail UserDetail { get; set; }

        /// <summary>
        /// Gets or sets organization resource tags
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets location of Organization resource
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

    }
}
