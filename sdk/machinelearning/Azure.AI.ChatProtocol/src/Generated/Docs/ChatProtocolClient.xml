<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateAsync(ChatCompletionOptions,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ChatProtocolClient client = new ChatProtocolClient(endpoint, credential);

ChatCompletionOptions chatCompletionOptionsunknownRecord = new ChatCompletionOptions(new ChatMessage[]
{
    new ChatMessage("<content>", ChatRole.User)
});
Response<ChatCompletion> response = await client.CreateAsync(chatCompletionOptionsunknownRecord);
]]></code>
This sample shows how to call CreateAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ChatProtocolClient client = new ChatProtocolClient(endpoint, credential);

ChatCompletionOptions chatCompletionOptionsunknownRecord = new ChatCompletionOptions(new ChatMessage[]
{
    new ChatMessage("<content>", ChatRole.User)
    {
        SessionState = BinaryData.FromObjectAsJson(new object()),
    }
})
{
    SessionState = BinaryData.FromObjectAsJson(new object()),
    Context =
    {
        ["key"] = BinaryData.FromObjectAsJson(new object())
    },
};
Response<ChatCompletion> response = await client.CreateAsync(chatCompletionOptionsunknownRecord);
]]></code></example>
    </member>
    <member name="Create(ChatCompletionOptions,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ChatProtocolClient client = new ChatProtocolClient(endpoint, credential);

ChatCompletionOptions chatCompletionOptionsunknownRecord = new ChatCompletionOptions(new ChatMessage[]
{
    new ChatMessage("<content>", ChatRole.User)
});
Response<ChatCompletion> response = client.Create(chatCompletionOptionsunknownRecord);
]]></code>
This sample shows how to call Create with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ChatProtocolClient client = new ChatProtocolClient(endpoint, credential);

ChatCompletionOptions chatCompletionOptionsunknownRecord = new ChatCompletionOptions(new ChatMessage[]
{
    new ChatMessage("<content>", ChatRole.User)
    {
        SessionState = BinaryData.FromObjectAsJson(new object()),
    }
})
{
    SessionState = BinaryData.FromObjectAsJson(new object()),
    Context =
    {
        ["key"] = BinaryData.FromObjectAsJson(new object())
    },
};
Response<ChatCompletion> response = client.Create(chatCompletionOptionsunknownRecord);
]]></code></example>
    </member>
    <member name="CreateAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ChatProtocolClient client = new ChatProtocolClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    messages = new object[]
    {
        new
        {
            content = "<content>",
            role = "user",
        }
    },
    stream = false,
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finishReason").ToString());
]]></code>
This sample shows how to call CreateAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ChatProtocolClient client = new ChatProtocolClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    messages = new object[]
    {
        new
        {
            content = "<content>",
            role = "user",
            sessionState = new object(),
        }
    },
    stream = false,
    sessionState = new object(),
    context = new
    {
        key = new object(),
    },
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("sessionState").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("sessionState").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("context").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finishReason").ToString());
]]></code></example>
    </member>
    <member name="Create(RequestContent,RequestContext)">
      <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ChatProtocolClient client = new ChatProtocolClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    messages = new object[]
    {
        new
        {
            content = "<content>",
            role = "user",
        }
    },
    stream = false,
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finishReason").ToString());
]]></code>
This sample shows how to call Create with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ChatProtocolClient client = new ChatProtocolClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    messages = new object[]
    {
        new
        {
            content = "<content>",
            role = "user",
            sessionState = new object(),
        }
    },
    stream = false,
    sessionState = new object(),
    context = new
    {
        key = new object(),
    },
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("sessionState").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("sessionState").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("context").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finishReason").ToString());
]]></code></example>
    </member>
  </members>
</doc>