// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.ChatProtocol
{
    /// <summary> The configuration for a streaming chat completion request. </summary>
    public partial class StreamingChatCompletionOptions
    {
        /// <summary> Initializes a new instance of StreamingChatCompletionOptions. </summary>
        /// <param name="messages"> The collection of context messages associated with this completion request. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="messages"/> is null. </exception>
        public StreamingChatCompletionOptions(IEnumerable<ChatMessage> messages)
        {
            Argument.AssertNotNull(messages, nameof(messages));

            Messages = messages.ToList();
            Context = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of StreamingChatCompletionOptions. </summary>
        /// <param name="messages"> The collection of context messages associated with this completion request. </param>
        /// <param name="stream"> Indicates whether the completion is a streaming or non-streaming completion. </param>
        /// <param name="sessionState"> Backend-specific information for the tracking of a session. </param>
        /// <param name="context"> Backend-specific context or arguments. </param>
        internal StreamingChatCompletionOptions(IList<ChatMessage> messages, bool stream, BinaryData sessionState, IDictionary<string, BinaryData> context)
        {
            Messages = messages;
            Stream = stream;
            SessionState = sessionState;
            Context = context;
        }

        /// <summary> The collection of context messages associated with this completion request. </summary>
        public IList<ChatMessage> Messages { get; }

        /// <summary>
        /// Backend-specific information for the tracking of a session.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData SessionState { get; set; }
        /// <summary>
        /// Backend-specific context or arguments.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Context { get; }
    }
}
