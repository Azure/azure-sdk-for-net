// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.Chat
{
    /// <summary> placeholder. </summary>
    public partial class ChatChoice
    {
        /// <summary> Initializes a new instance of ChatChoice. </summary>
        /// <param name="index"> placeholder. </param>
        /// <param name="message"> placeholder. </param>
        /// <param name="extraArguments"> placeholder. </param>
        /// <param name="sessionState"> placeholder. </param>
        /// <param name="finishReason"> placeholder. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/>, <paramref name="extraArguments"/> or <paramref name="sessionState"/> is null. </exception>
        internal ChatChoice(long index, ChatMessage message, IReadOnlyDictionary<string, BinaryData> extraArguments, BinaryData sessionState, FinishReason finishReason)
        {
            Argument.AssertNotNull(message, nameof(message));
            Argument.AssertNotNull(extraArguments, nameof(extraArguments));
            Argument.AssertNotNull(sessionState, nameof(sessionState));

            Index = index;
            Message = message;
            ExtraArguments = extraArguments;
            SessionState = sessionState;
            FinishReason = finishReason;
        }

        /// <summary> placeholder. </summary>
        public long Index { get; }
        /// <summary> placeholder. </summary>
        public ChatMessage Message { get; }
        /// <summary>
        /// placeholder
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> ExtraArguments { get; }
        /// <summary>
        /// placeholder
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData SessionState { get; }
        /// <summary> placeholder. </summary>
        public FinishReason FinishReason { get; }
    }
}
