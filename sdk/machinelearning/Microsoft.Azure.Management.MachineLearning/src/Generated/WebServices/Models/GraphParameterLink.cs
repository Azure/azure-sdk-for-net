// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearning.WebServices.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.MachineLearning;
    using Microsoft.Azure.Management.MachineLearning.WebServices;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Association link for a graph global parameter to a node in the graph.
    /// </summary>
    public partial class GraphParameterLink
    {
        /// <summary>
        /// Initializes a new instance of the GraphParameterLink class.
        /// </summary>
        public GraphParameterLink()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GraphParameterLink class.
        /// </summary>
        /// <param name="nodeId">The graph node's identifier</param>
        /// <param name="parameterKey">The identifier of the node parameter
        /// that the global parameter maps to.</param>
        public GraphParameterLink(string nodeId, string parameterKey)
        {
            NodeId = nodeId;
            ParameterKey = parameterKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the graph node's identifier
        /// </summary>
        [JsonProperty(PropertyName = "nodeId")]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the node parameter that the global
        /// parameter maps to.
        /// </summary>
        [JsonProperty(PropertyName = "parameterKey")]
        public string ParameterKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NodeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeId");
            }
            if (ParameterKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ParameterKey");
            }
        }
    }
}
