// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearning.WebServices.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.MachineLearning;
    using Microsoft.Azure.Management.MachineLearning.WebServices;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Holds the available configuration options for an Azure ML web service
    /// endpoint.
    /// </summary>
    public partial class RealtimeConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the RealtimeConfiguration class.
        /// </summary>
        public RealtimeConfiguration()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RealtimeConfiguration class.
        /// </summary>
        /// <param name="maxConcurrentCalls">Specifies the maximum concurrent
        /// calls that can be made to the web service. Minimum value: 4,
        /// Maximum value: 200.</param>
        public RealtimeConfiguration(int? maxConcurrentCalls = default(int?))
        {
            MaxConcurrentCalls = maxConcurrentCalls;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies the maximum concurrent calls that can be
        /// made to the web service. Minimum value: 4, Maximum value: 200.
        /// </summary>
        [JsonProperty(PropertyName = "maxConcurrentCalls")]
        public int? MaxConcurrentCalls { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MaxConcurrentCalls > 200)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxConcurrentCalls", 200);
            }
            if (MaxConcurrentCalls < 4)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxConcurrentCalls", 4);
            }
        }
    }
}
