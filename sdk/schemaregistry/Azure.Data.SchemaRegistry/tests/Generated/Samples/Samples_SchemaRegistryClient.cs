// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.SchemaRegistry;
using Azure.SchemaRegistry.Models;
using NUnit.Framework;

namespace Azure.SchemaRegistry.Samples
{
    public class Samples_SchemaRegistryClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaById()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = client.GetSchemaById("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaById_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = await client.GetSchemaByIdAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaById_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response<BinaryData> response = client.GetSchemaById("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaById_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response<BinaryData> response = await client.GetSchemaByIdAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaById_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = client.GetSchemaById("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaById_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = await client.GetSchemaByIdAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaById_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response<BinaryData> response = client.GetSchemaById("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaById_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response<BinaryData> response = await client.GetSchemaByIdAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaByVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = client.GetSchemaByVersion("<groupName>", "<name>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaByVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = await client.GetSchemaByVersionAsync("<groupName>", "<name>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaByVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response<BinaryData> response = client.GetSchemaByVersion("<groupName>", "<name>", 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaByVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response<BinaryData> response = await client.GetSchemaByVersionAsync("<groupName>", "<name>", 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaByVersion_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = client.GetSchemaByVersion("<groupName>", "<name>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaByVersion_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = await client.GetSchemaByVersionAsync("<groupName>", "<name>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaByVersion_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response<BinaryData> response = client.GetSchemaByVersion("<groupName>", "<name>", 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaByVersion_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response<BinaryData> response = await client.GetSchemaByVersionAsync("<groupName>", "<name>", 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaIdByContent()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.GetSchemaIdByContent("<groupName>", "<name>", content, new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaIdByContent_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.GetSchemaIdByContentAsync("<groupName>", "<name>", content, new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaIdByContent_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = client.GetSchemaIdByContent("<groupName>", "<name>", BinaryData.FromObjectAsJson(new object()), new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaIdByContent_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = await client.GetSchemaIdByContentAsync("<groupName>", "<name>", BinaryData.FromObjectAsJson(new object()), new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaIdByContent_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.GetSchemaIdByContent("<groupName>", "<name>", content, new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaIdByContent_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.GetSchemaIdByContentAsync("<groupName>", "<name>", content, new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaIdByContent_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = client.GetSchemaIdByContent("<groupName>", "<name>", BinaryData.FromObjectAsJson(new object()), new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaIdByContent_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = await client.GetSchemaIdByContentAsync("<groupName>", "<name>", BinaryData.FromObjectAsJson(new object()), new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RegisterSchema()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.RegisterSchema("<groupName>", "<name>", content, new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RegisterSchema_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.RegisterSchemaAsync("<groupName>", "<name>", content, new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RegisterSchema_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = client.RegisterSchema("<groupName>", "<name>", BinaryData.FromObjectAsJson(new object()), new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RegisterSchema_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = await client.RegisterSchemaAsync("<groupName>", "<name>", BinaryData.FromObjectAsJson(new object()), new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RegisterSchema_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.RegisterSchema("<groupName>", "<name>", content, new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RegisterSchema_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.RegisterSchemaAsync("<groupName>", "<name>", content, new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RegisterSchema_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = client.RegisterSchema("<groupName>", "<name>", BinaryData.FromObjectAsJson(new object()), new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RegisterSchema_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            Response response = await client.RegisterSchemaAsync("<groupName>", "<name>", BinaryData.FromObjectAsJson(new object()), new ContentType("application/json; serialization=Avro"));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaGroups()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            foreach (BinaryData item in client.GetSchemaGroups(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("groupName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaGroups_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSchemaGroupsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("groupName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaGroups_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            foreach (SchemaGroup item in client.GetSchemaGroups())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaGroups_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            await foreach (SchemaGroup item in client.GetSchemaGroupsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            foreach (BinaryData item in client.GetSchemaGroups(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("groupName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSchemaGroupsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("groupName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            foreach (SchemaGroup item in client.GetSchemaGroups())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            await foreach (SchemaGroup item in client.GetSchemaGroupsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaVersions()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            foreach (BinaryData item in client.GetSchemaVersions("<groupName>", "<name>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("schemaVersion").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaVersions_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSchemaVersionsAsync("<groupName>", "<name>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("schemaVersion").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaVersions_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            foreach (Models.Version item in client.GetSchemaVersions("<groupName>", "<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaVersions_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            await foreach (Models.Version item in client.GetSchemaVersionsAsync("<groupName>", "<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaVersions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            foreach (BinaryData item in client.GetSchemaVersions("<groupName>", "<name>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("schemaVersion").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaVersions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSchemaVersionsAsync("<groupName>", "<name>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("schemaVersion").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchemaVersions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            foreach (Models.Version item in client.GetSchemaVersions("<groupName>", "<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchemaVersions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SchemaRegistryClient client = new SchemaRegistryClient(endpoint, credential);

            await foreach (Models.Version item in client.GetSchemaVersionsAsync("<groupName>", "<name>"))
            {
            }
        }
    }
}
