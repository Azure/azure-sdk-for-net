// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Data.SchemaRegistry.Models
{
    public partial class SchemaGroup : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(CreatedTimeUtc))
            {
                writer.WritePropertyName("createdTimeUtc");
                writer.WriteStringValue(CreatedTimeUtc.Value, "O");
            }
            if (Optional.IsDefined(UpdatedTimeUtc))
            {
                writer.WritePropertyName("updatedTimeUtc");
                writer.WriteStringValue(UpdatedTimeUtc.Value, "O");
            }
            if (Optional.IsDefined(SchemaType))
            {
                writer.WritePropertyName("schemaType");
                writer.WriteStringValue(SchemaType);
            }
            if (Optional.IsDefined(Etag))
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(Etag);
            }
            if (Optional.IsDefined(SchemaCompatibility))
            {
                writer.WritePropertyName("schemaCompatibility");
                writer.WriteNumberValue(SchemaCompatibility.Value);
            }
            if (Optional.IsCollectionDefined(GroupProperties))
            {
                writer.WritePropertyName("groupProperties");
                writer.WriteStartObject();
                foreach (var item in GroupProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static SchemaGroup DeserializeSchemaGroup(JsonElement element)
        {
            Optional<string> name = default;
            Optional<DateTimeOffset> createdTimeUtc = default;
            Optional<DateTimeOffset> updatedTimeUtc = default;
            Optional<string> schemaType = default;
            Optional<string> etag = default;
            Optional<int> schemaCompatibility = default;
            Optional<IDictionary<string, string>> groupProperties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdTimeUtc"))
                {
                    createdTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("updatedTimeUtc"))
                {
                    updatedTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("schemaType"))
                {
                    schemaType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("schemaCompatibility"))
                {
                    schemaCompatibility = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("groupProperties"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    groupProperties = dictionary;
                    continue;
                }
            }
            return new SchemaGroup(name.Value, Optional.ToNullable(createdTimeUtc), Optional.ToNullable(updatedTimeUtc), schemaType.Value, etag.Value, Optional.ToNullable(schemaCompatibility), Optional.ToDictionary(groupProperties));
        }
    }
}
