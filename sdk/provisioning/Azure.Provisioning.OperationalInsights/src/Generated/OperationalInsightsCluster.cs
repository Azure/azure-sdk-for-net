// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.OperationalInsights;

/// <summary>
/// OperationalInsightsCluster.
/// </summary>
public partial class OperationalInsightsCluster : Resource
{
    /// <summary>
    /// The name of the Log Analytics cluster.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// The list of Log Analytics workspaces associated with the cluster.
    /// </summary>
    public BicepList<OperationalInsightsClusterAssociatedWorkspace> AssociatedWorkspaces { get => _associatedWorkspaces; set => _associatedWorkspaces.Assign(value); }
    private readonly BicepList<OperationalInsightsClusterAssociatedWorkspace> _associatedWorkspaces;

    /// <summary>
    /// The cluster&apos;s billing type.
    /// </summary>
    public BicepValue<OperationalInsightsBillingType> BillingType { get => _billingType; set => _billingType.Assign(value); }
    private readonly BicepValue<OperationalInsightsBillingType> _billingType;

    /// <summary>
    /// Additional properties for capacity reservation.
    /// </summary>
    public BicepValue<OperationalInsightsCapacityReservationProperties> CapacityReservationProperties { get => _capacityReservationProperties; set => _capacityReservationProperties.Assign(value); }
    private readonly BicepValue<OperationalInsightsCapacityReservationProperties> _capacityReservationProperties;

    /// <summary>
    /// The identity of the resource. Current supported identity types: None,
    /// SystemAssigned, UserAssigned.
    /// </summary>
    public BicepValue<ManagedServiceIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<ManagedServiceIdentity> _identity;

    /// <summary>
    /// Sets whether the cluster will support availability zones. This can be
    /// set as true only in regions where Azure Data Explorer support
    /// Availability Zones. This Property can not be modified after cluster
    /// creation. Default value is &apos;true&apos; if region supports
    /// Availability Zones.
    /// </summary>
    public BicepValue<bool> IsAvailabilityZonesEnabled { get => _isAvailabilityZonesEnabled; set => _isAvailabilityZonesEnabled.Assign(value); }
    private readonly BicepValue<bool> _isAvailabilityZonesEnabled;

    /// <summary>
    /// Configures whether cluster will use double encryption. This Property
    /// can not be modified after cluster creation. Default value is
    /// &apos;true&apos;.
    /// </summary>
    public BicepValue<bool> IsDoubleEncryptionEnabled { get => _isDoubleEncryptionEnabled; set => _isDoubleEncryptionEnabled.Assign(value); }
    private readonly BicepValue<bool> _isDoubleEncryptionEnabled;

    /// <summary>
    /// The associated key properties.
    /// </summary>
    public BicepValue<OperationalInsightsKeyVaultProperties> KeyVaultProperties { get => _keyVaultProperties; set => _keyVaultProperties.Assign(value); }
    private readonly BicepValue<OperationalInsightsKeyVaultProperties> _keyVaultProperties;

    /// <summary>
    /// The sku properties.
    /// </summary>
    public BicepValue<OperationalInsightsClusterSku> Sku { get => _sku; set => _sku.Assign(value); }
    private readonly BicepValue<OperationalInsightsClusterSku> _sku;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// The ID associated with the cluster.
    /// </summary>
    public BicepValue<Guid> ClusterId { get => _clusterId; }
    private readonly BicepValue<Guid> _clusterId;

    /// <summary>
    /// The cluster creation time.
    /// </summary>
    public BicepValue<DateTimeOffset> CreatedOn { get => _createdOn; }
    private readonly BicepValue<DateTimeOffset> _createdOn;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The last time the cluster was updated.
    /// </summary>
    public BicepValue<DateTimeOffset> LastModifiedOn { get => _lastModifiedOn; }
    private readonly BicepValue<DateTimeOffset> _lastModifiedOn;

    /// <summary>
    /// The provisioning state of the cluster.
    /// </summary>
    public BicepValue<OperationalInsightsClusterEntityStatus> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<OperationalInsightsClusterEntityStatus> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new OperationalInsightsCluster.
    /// </summary>
    /// <param name="resourceName">Name of the OperationalInsightsCluster.</param>
    /// <param name="resourceVersion">Version of the OperationalInsightsCluster.</param>
    public OperationalInsightsCluster(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.OperationalInsights/clusters", resourceVersion ?? "2023-09-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _associatedWorkspaces = BicepList<OperationalInsightsClusterAssociatedWorkspace>.DefineProperty(this, "AssociatedWorkspaces", ["properties", "associatedWorkspaces"]);
        _billingType = BicepValue<OperationalInsightsBillingType>.DefineProperty(this, "BillingType", ["properties", "billingType"]);
        _capacityReservationProperties = BicepValue<OperationalInsightsCapacityReservationProperties>.DefineProperty(this, "CapacityReservationProperties", ["properties", "capacityReservationProperties"]);
        _identity = BicepValue<ManagedServiceIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _isAvailabilityZonesEnabled = BicepValue<bool>.DefineProperty(this, "IsAvailabilityZonesEnabled", ["properties", "isAvailabilityZonesEnabled"]);
        _isDoubleEncryptionEnabled = BicepValue<bool>.DefineProperty(this, "IsDoubleEncryptionEnabled", ["properties", "isDoubleEncryptionEnabled"]);
        _keyVaultProperties = BicepValue<OperationalInsightsKeyVaultProperties>.DefineProperty(this, "KeyVaultProperties", ["properties", "keyVaultProperties"]);
        _sku = BicepValue<OperationalInsightsClusterSku>.DefineProperty(this, "Sku", ["sku"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _clusterId = BicepValue<Guid>.DefineProperty(this, "ClusterId", ["properties", "clusterId"], isOutput: true);
        _createdOn = BicepValue<DateTimeOffset>.DefineProperty(this, "CreatedOn", ["properties", "createdDate"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _lastModifiedOn = BicepValue<DateTimeOffset>.DefineProperty(this, "LastModifiedOn", ["properties", "lastModifiedDate"], isOutput: true);
        _provisioningState = BicepValue<OperationalInsightsClusterEntityStatus>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported OperationalInsightsCluster resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2023-09-01.
        /// </summary>
        public static readonly string V2023_09_01 = "2023-09-01";

        /// <summary>
        /// 2022-10-01.
        /// </summary>
        public static readonly string V2022_10_01 = "2022-10-01";

        /// <summary>
        /// 2021-06-01.
        /// </summary>
        public static readonly string V2021_06_01 = "2021-06-01";

        /// <summary>
        /// 2020-10-01.
        /// </summary>
        public static readonly string V2020_10_01 = "2020-10-01";

        /// <summary>
        /// 2020-08-01.
        /// </summary>
        public static readonly string V2020_08_01 = "2020-08-01";
    }

    /// <summary>
    /// Creates a reference to an existing OperationalInsightsCluster.
    /// </summary>
    /// <param name="resourceName">Name of the OperationalInsightsCluster.</param>
    /// <param name="resourceVersion">Version of the OperationalInsightsCluster.</param>
    /// <returns>The existing OperationalInsightsCluster resource.</returns>
    public static OperationalInsightsCluster FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this OperationalInsightsCluster
    /// resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 4, maxLength: 63, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen);
}
