// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.OperationalInsights;

/// <summary>
/// OperationalInsightsLinkedService.
/// </summary>
public partial class OperationalInsightsLinkedService : Resource
{
    /// <summary>
    /// Name of the linkedServices resource.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The provisioning state of the linked service.
    /// </summary>
    public BicepValue<OperationalInsightsLinkedServiceEntityStatus> ProvisioningState { get => _provisioningState; set => _provisioningState.Assign(value); }
    private readonly BicepValue<OperationalInsightsLinkedServiceEntityStatus> _provisioningState;

    /// <summary>
    /// The resource id of the resource that will be linked to the workspace.
    /// This should be used for linking resources which require read access.
    /// </summary>
    public BicepValue<ResourceIdentifier> ResourceId { get => _resourceId; set => _resourceId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _resourceId;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// The resource id of the resource that will be linked to the workspace.
    /// This should be used for linking resources which require write access.
    /// </summary>
    public BicepValue<ResourceIdentifier> WriteAccessResourceId { get => _writeAccessResourceId; set => _writeAccessResourceId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _writeAccessResourceId;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent OperationalInsightsWorkspace.
    /// </summary>
    public OperationalInsightsWorkspace? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<OperationalInsightsWorkspace> _parent;

    /// <summary>
    /// Creates a new OperationalInsightsLinkedService.
    /// </summary>
    /// <param name="resourceName">Name of the OperationalInsightsLinkedService.</param>
    /// <param name="resourceVersion">Version of the OperationalInsightsLinkedService.</param>
    public OperationalInsightsLinkedService(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.OperationalInsights/workspaces/linkedServices", resourceVersion ?? "2023-09-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _provisioningState = BicepValue<OperationalInsightsLinkedServiceEntityStatus>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"]);
        _resourceId = BicepValue<ResourceIdentifier>.DefineProperty(this, "ResourceId", ["properties", "resourceId"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _writeAccessResourceId = BicepValue<ResourceIdentifier>.DefineProperty(this, "WriteAccessResourceId", ["properties", "writeAccessResourceId"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<OperationalInsightsWorkspace>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported OperationalInsightsLinkedService resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2023-09-01.
        /// </summary>
        public static readonly string V2023_09_01 = "2023-09-01";

        /// <summary>
        /// 2020-08-01.
        /// </summary>
        public static readonly string V2020_08_01 = "2020-08-01";
    }

    /// <summary>
    /// Creates a reference to an existing OperationalInsightsLinkedService.
    /// </summary>
    /// <param name="resourceName">Name of the OperationalInsightsLinkedService.</param>
    /// <param name="resourceVersion">Version of the OperationalInsightsLinkedService.</param>
    /// <returns>The existing OperationalInsightsLinkedService resource.</returns>
    public static OperationalInsightsLinkedService FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
