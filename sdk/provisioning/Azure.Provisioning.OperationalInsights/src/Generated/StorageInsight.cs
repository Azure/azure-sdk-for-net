// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.OperationalInsights;

/// <summary>
/// StorageInsight.
/// </summary>
public partial class StorageInsight : Resource
{
    /// <summary>
    /// Name of the storageInsightsConfigs resource.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The names of the blob containers that the workspace should read.
    /// </summary>
    public BicepList<string> Containers { get => _containers; set => _containers.Assign(value); }
    private readonly BicepList<string> _containers;

    /// <summary>
    /// The ETag of the storage insight.
    /// </summary>
    public BicepValue<ETag> ETag { get => _eTag; set => _eTag.Assign(value); }
    private readonly BicepValue<ETag> _eTag;

    /// <summary>
    /// The storage account connection details.
    /// </summary>
    public BicepValue<OperationalInsightsStorageAccount> StorageAccount { get => _storageAccount; set => _storageAccount.Assign(value); }
    private readonly BicepValue<OperationalInsightsStorageAccount> _storageAccount;

    /// <summary>
    /// The names of the Azure tables that the workspace should read.
    /// </summary>
    public BicepList<string> Tables { get => _tables; set => _tables.Assign(value); }
    private readonly BicepList<string> _tables;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The status of the storage insight.
    /// </summary>
    public BicepValue<StorageInsightStatus> Status { get => _status; }
    private readonly BicepValue<StorageInsightStatus> _status;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent OperationalInsightsWorkspace.
    /// </summary>
    public OperationalInsightsWorkspace? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<OperationalInsightsWorkspace> _parent;

    /// <summary>
    /// Creates a new StorageInsight.
    /// </summary>
    /// <param name="resourceName">Name of the StorageInsight.</param>
    /// <param name="resourceVersion">Version of the StorageInsight.</param>
    public StorageInsight(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.OperationalInsights/workspaces/storageInsightConfigs", resourceVersion ?? "2023-09-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _containers = BicepList<string>.DefineProperty(this, "Containers", ["properties", "containers"]);
        _eTag = BicepValue<ETag>.DefineProperty(this, "ETag", ["eTag"]);
        _storageAccount = BicepValue<OperationalInsightsStorageAccount>.DefineProperty(this, "StorageAccount", ["properties", "storageAccount"]);
        _tables = BicepList<string>.DefineProperty(this, "Tables", ["properties", "tables"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _status = BicepValue<StorageInsightStatus>.DefineProperty(this, "Status", ["properties", "status"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<OperationalInsightsWorkspace>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported StorageInsight resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2023-09-01.
        /// </summary>
        public static readonly string V2023_09_01 = "2023-09-01";

        /// <summary>
        /// 2020-08-01.
        /// </summary>
        public static readonly string V2020_08_01 = "2020-08-01";

        /// <summary>
        /// 2015-03-20.
        /// </summary>
        public static readonly string V2015_03_20 = "2015-03-20";
    }

    /// <summary>
    /// Creates a reference to an existing StorageInsight.
    /// </summary>
    /// <param name="resourceName">Name of the StorageInsight.</param>
    /// <param name="resourceVersion">Version of the StorageInsight.</param>
    /// <returns>The existing StorageInsight resource.</returns>
    public static StorageInsight FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
