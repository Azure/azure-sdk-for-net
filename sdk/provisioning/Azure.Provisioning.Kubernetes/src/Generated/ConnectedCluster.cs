// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Authorization;
using Azure.Provisioning.Expressions;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using Azure.Provisioning.Roles;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.Kubernetes;

/// <summary>
/// ConnectedCluster.
/// </summary>
public partial class ConnectedCluster : Resource
{
    /// <summary>
    /// The name of the Kubernetes cluster on which get is called.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Base64 encoded public certificate used by the agent to do the initial
    /// handshake to the backend services in Azure.
    /// </summary>
    public BicepValue<string> AgentPublicKeyCertificate { get => _agentPublicKeyCertificate; set => _agentPublicKeyCertificate.Assign(value); }
    private readonly BicepValue<string> _agentPublicKeyCertificate;

    /// <summary>
    /// The identity of the connected cluster. Current supported identity
    /// types: None, SystemAssigned.
    /// </summary>
    public BicepValue<ManagedServiceIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<ManagedServiceIdentity> _identity;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// The Kubernetes distribution running on this connected cluster.
    /// </summary>
    public BicepValue<string> Distribution { get => _distribution; set => _distribution.Assign(value); }
    private readonly BicepValue<string> _distribution;

    /// <summary>
    /// The infrastructure on which the Kubernetes cluster represented by this
    /// connected cluster is running on.
    /// </summary>
    public BicepValue<string> Infrastructure { get => _infrastructure; set => _infrastructure.Assign(value); }
    private readonly BicepValue<string> _infrastructure;

    /// <summary>
    /// The resource id of the private link scope this connected cluster is
    /// assigned to, if any.
    /// </summary>
    public BicepValue<string> PrivateLinkScopeResourceId { get => _privateLinkScopeResourceId; set => _privateLinkScopeResourceId.Assign(value); }
    private readonly BicepValue<string> _privateLinkScopeResourceId;

    /// <summary>
    /// Property which describes the state of private link on a connected
    /// cluster resource.
    /// </summary>
    public BicepValue<PrivateLinkState> PrivateLinkState { get => _privateLinkState; set => _privateLinkState.Assign(value); }
    private readonly BicepValue<PrivateLinkState> _privateLinkState;

    /// <summary>
    /// Provisioning state of the connected cluster resource.
    /// </summary>
    public BicepValue<ProvisioningState> ProvisioningState { get => _provisioningState; set => _provisioningState.Assign(value); }
    private readonly BicepValue<ProvisioningState> _provisioningState;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Version of the agent running on the connected cluster resource.
    /// </summary>
    public BicepValue<string> AgentVersion { get => _agentVersion; }
    private readonly BicepValue<string> _agentVersion;

    /// <summary>
    /// Represents the connectivity status of the connected cluster.
    /// </summary>
    public BicepValue<ConnectivityStatus> ConnectivityStatus { get => _connectivityStatus; }
    private readonly BicepValue<ConnectivityStatus> _connectivityStatus;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The Kubernetes version of the connected cluster resource.
    /// </summary>
    public BicepValue<string> KubernetesVersion { get => _kubernetesVersion; }
    private readonly BicepValue<string> _kubernetesVersion;

    /// <summary>
    /// Time representing the last instance when heart beat was received from
    /// the cluster.
    /// </summary>
    public BicepValue<DateTimeOffset> LastConnectivityOn { get => _lastConnectivityOn; }
    private readonly BicepValue<DateTimeOffset> _lastConnectivityOn;

    /// <summary>
    /// Expiration time of the managed identity certificate.
    /// </summary>
    public BicepValue<DateTimeOffset> ManagedIdentityCertificateExpirationOn { get => _managedIdentityCertificateExpirationOn; }
    private readonly BicepValue<DateTimeOffset> _managedIdentityCertificateExpirationOn;

    /// <summary>
    /// Connected cluster offering.
    /// </summary>
    public BicepValue<string> Offering { get => _offering; }
    private readonly BicepValue<string> _offering;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Number of CPU cores present in the connected cluster resource.
    /// </summary>
    public BicepValue<int> TotalCoreCount { get => _totalCoreCount; }
    private readonly BicepValue<int> _totalCoreCount;

    /// <summary>
    /// Number of nodes present in the connected cluster resource.
    /// </summary>
    public BicepValue<int> TotalNodeCount { get => _totalNodeCount; }
    private readonly BicepValue<int> _totalNodeCount;

    /// <summary>
    /// Creates a new ConnectedCluster.
    /// </summary>
    /// <param name="resourceName">Name of the ConnectedCluster.</param>
    /// <param name="resourceVersion">Version of the ConnectedCluster.</param>
    public ConnectedCluster(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Kubernetes/connectedClusters", resourceVersion ?? "2024-01-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _agentPublicKeyCertificate = BicepValue<string>.DefineProperty(this, "AgentPublicKeyCertificate", ["properties", "agentPublicKeyCertificate"], isRequired: true);
        _identity = BicepValue<ManagedServiceIdentity>.DefineProperty(this, "Identity", ["identity"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _distribution = BicepValue<string>.DefineProperty(this, "Distribution", ["properties", "distribution"]);
        _infrastructure = BicepValue<string>.DefineProperty(this, "Infrastructure", ["properties", "infrastructure"]);
        _privateLinkScopeResourceId = BicepValue<string>.DefineProperty(this, "PrivateLinkScopeResourceId", ["properties", "privateLinkScopeResourceId"]);
        _privateLinkState = BicepValue<PrivateLinkState>.DefineProperty(this, "PrivateLinkState", ["properties", "privateLinkState"]);
        _provisioningState = BicepValue<ProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _agentVersion = BicepValue<string>.DefineProperty(this, "AgentVersion", ["properties", "agentVersion"], isOutput: true);
        _connectivityStatus = BicepValue<ConnectivityStatus>.DefineProperty(this, "ConnectivityStatus", ["properties", "connectivityStatus"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _kubernetesVersion = BicepValue<string>.DefineProperty(this, "KubernetesVersion", ["properties", "kubernetesVersion"], isOutput: true);
        _lastConnectivityOn = BicepValue<DateTimeOffset>.DefineProperty(this, "LastConnectivityOn", ["properties", "lastConnectivityTime"], isOutput: true);
        _managedIdentityCertificateExpirationOn = BicepValue<DateTimeOffset>.DefineProperty(this, "ManagedIdentityCertificateExpirationOn", ["properties", "managedIdentityCertificateExpirationTime"], isOutput: true);
        _offering = BicepValue<string>.DefineProperty(this, "Offering", ["properties", "offering"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _totalCoreCount = BicepValue<int>.DefineProperty(this, "TotalCoreCount", ["properties", "totalCoreCount"], isOutput: true);
        _totalNodeCount = BicepValue<int>.DefineProperty(this, "TotalNodeCount", ["properties", "totalNodeCount"], isOutput: true);
    }

    /// <summary>
    /// Supported ConnectedCluster resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-07-15-preview.
        /// </summary>
        public static readonly string V2024_07_15_preview = "2024-07-15-preview";

        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2021-10-01.
        /// </summary>
        public static readonly string V2021_10_01 = "2021-10-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";
    }

    /// <summary>
    /// Creates a reference to an existing ConnectedCluster.
    /// </summary>
    /// <param name="resourceName">Name of the ConnectedCluster.</param>
    /// <param name="resourceVersion">Version of the ConnectedCluster.</param>
    /// <returns>The existing ConnectedCluster resource.</returns>
    public static ConnectedCluster FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this ConnectedCluster resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 63, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen | ResourceNameCharacters.Underscore);

    /// <summary>
    /// Creates a role assignment for a user-assigned identity that grants
    /// access to this ConnectedCluster.
    /// </summary>
    /// <param name="role">The role to grant.</param>
    /// <param name="identity">The <see cref="UserAssignedIdentity"/>.</param>
    /// <returns>The <see cref="RoleAssignment"/>.</returns>
    public RoleAssignment CreateRoleAssignment(KubernetesBuiltInRole role, UserAssignedIdentity identity) =>
        new($"{ResourceName}_{identity.ResourceName}_{KubernetesBuiltInRole.GetBuiltInRoleName(role)}")
        {
            Name = BicepFunction.CreateGuid(Id, identity.PrincipalId, BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString())),
            Scope = new IdentifierExpression(ResourceName),
            PrincipalType = RoleManagementPrincipalType.ServicePrincipal,
            RoleDefinitionId = BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString()),
            PrincipalId = identity.PrincipalId
        };

    /// <summary>
    /// Creates a role assignment for a principal that grants access to this
    /// ConnectedCluster.
    /// </summary>
    /// <param name="role">The role to grant.</param>
    /// <param name="principalType">The type of the principal to assign to.</param>
    /// <param name="principalId">The principal to assign to.</param>
    /// <param name="resourceNameSuffix">Optional role assignment resource name suffix.</param>
    /// <returns>The <see cref="RoleAssignment"/>.</returns>
    public RoleAssignment CreateRoleAssignment(KubernetesBuiltInRole role, BicepValue<RoleManagementPrincipalType> principalType, BicepValue<Guid> principalId, string? resourceNameSuffix = default) =>
        new($"{ResourceName}_{KubernetesBuiltInRole.GetBuiltInRoleName(role)}{(resourceNameSuffix is null ? "" : "_")}{resourceNameSuffix}")
        {
            Name = BicepFunction.CreateGuid(Id, principalId, BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString())),
            Scope = new IdentifierExpression(ResourceName),
            PrincipalType = principalType,
            RoleDefinitionId = BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString()),
            PrincipalId = principalId
        };
}
