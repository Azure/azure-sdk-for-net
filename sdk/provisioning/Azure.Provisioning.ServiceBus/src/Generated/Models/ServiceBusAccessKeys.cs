// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Expressions;
using Azure.Provisioning.Primitives;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.ServiceBus;

/// <summary>
/// Namespace/ServiceBus Connection String.
/// </summary>
public partial class ServiceBusAccessKeys : ProvisioningConstruct
{
    /// <summary>
    /// Primary connection string of the created namespace authorization rule.
    /// </summary>
    public BicepValue<string> PrimaryConnectionString { get => _primaryConnectionString; }
    private readonly BicepValue<string> _primaryConnectionString;

    /// <summary>
    /// Secondary connection string of the created namespace authorization rule.
    /// </summary>
    public BicepValue<string> SecondaryConnectionString { get => _secondaryConnectionString; }
    private readonly BicepValue<string> _secondaryConnectionString;

    /// <summary>
    /// Primary connection string of the alias if GEO DR is enabled.
    /// </summary>
    public BicepValue<string> AliasPrimaryConnectionString { get => _aliasPrimaryConnectionString; }
    private readonly BicepValue<string> _aliasPrimaryConnectionString;

    /// <summary>
    /// Secondary  connection string of the alias if GEO DR is enabled.
    /// </summary>
    public BicepValue<string> AliasSecondaryConnectionString { get => _aliasSecondaryConnectionString; }
    private readonly BicepValue<string> _aliasSecondaryConnectionString;

    /// <summary>
    /// A base64-encoded 256-bit primary key for signing and validating the SAS
    /// token.
    /// </summary>
    public BicepValue<string> PrimaryKey { get => _primaryKey; }
    private readonly BicepValue<string> _primaryKey;

    /// <summary>
    /// A base64-encoded 256-bit primary key for signing and validating the SAS
    /// token.
    /// </summary>
    public BicepValue<string> SecondaryKey { get => _secondaryKey; }
    private readonly BicepValue<string> _secondaryKey;

    /// <summary>
    /// A string that describes the authorization rule.
    /// </summary>
    public BicepValue<string> KeyName { get => _keyName; }
    private readonly BicepValue<string> _keyName;

    /// <summary>
    /// Creates a new ServiceBusAccessKeys.
    /// </summary>
    public ServiceBusAccessKeys()
    {
        _primaryConnectionString = BicepValue<string>.DefineProperty(this, "PrimaryConnectionString", ["primaryConnectionString"], isOutput: true, isSecure: true);
        _secondaryConnectionString = BicepValue<string>.DefineProperty(this, "SecondaryConnectionString", ["secondaryConnectionString"], isOutput: true, isSecure: true);
        _aliasPrimaryConnectionString = BicepValue<string>.DefineProperty(this, "AliasPrimaryConnectionString", ["aliasPrimaryConnectionString"], isOutput: true, isSecure: true);
        _aliasSecondaryConnectionString = BicepValue<string>.DefineProperty(this, "AliasSecondaryConnectionString", ["aliasSecondaryConnectionString"], isOutput: true, isSecure: true);
        _primaryKey = BicepValue<string>.DefineProperty(this, "PrimaryKey", ["primaryKey"], isOutput: true, isSecure: true);
        _secondaryKey = BicepValue<string>.DefineProperty(this, "SecondaryKey", ["secondaryKey"], isOutput: true, isSecure: true);
        _keyName = BicepValue<string>.DefineProperty(this, "KeyName", ["keyName"], isOutput: true);
    }

    /// <summary>
    /// Creates a new ServiceBusAccessKeys resource from a Bicep expression
    /// that evaluates to a ServiceBusAccessKeys.
    /// </summary>
    /// <param name="expression">
    /// A Bicep expression that evaluates to a ServiceBusAccessKeys resource.
    /// </param>
    /// <returns>A ServiceBusAccessKeys resource.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public static ServiceBusAccessKeys FromExpression(Expression expression)
    {
        ServiceBusAccessKeys resource = new();
        resource.OverrideWithExpression(expression);
        return resource;
    }
}
