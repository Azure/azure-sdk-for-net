// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.ApplicationInsights;

/// <summary>
/// The collection of content validation properties.
/// </summary>
public partial class WebTestContentValidation : ProvisioningConstruct
{
    /// <summary>
    /// Content to look for in the return of the WebTest.  Must not be null or
    /// empty.
    /// </summary>
    public BicepValue<string> ContentMatch { get => _contentMatch; set => _contentMatch.Assign(value); }
    private readonly BicepValue<string> _contentMatch;

    /// <summary>
    /// When set, this value makes the ContentMatch validation case insensitive.
    /// </summary>
    public BicepValue<bool> IgnoreCase { get => _ignoreCase; set => _ignoreCase.Assign(value); }
    private readonly BicepValue<bool> _ignoreCase;

    /// <summary>
    /// When true, validation will pass if there is a match for the
    /// ContentMatch string.  If false, validation will fail if there is a
    /// match.
    /// </summary>
    public BicepValue<bool> PassIfTextFound { get => _passIfTextFound; set => _passIfTextFound.Assign(value); }
    private readonly BicepValue<bool> _passIfTextFound;

    /// <summary>
    /// Creates a new WebTestContentValidation.
    /// </summary>
    public WebTestContentValidation()
    {
        _contentMatch = BicepValue<string>.DefineProperty(this, "ContentMatch", ["ContentMatch"]);
        _ignoreCase = BicepValue<bool>.DefineProperty(this, "IgnoreCase", ["IgnoreCase"]);
        _passIfTextFound = BicepValue<bool>.DefineProperty(this, "PassIfTextFound", ["PassIfTextFound"]);
    }
}
