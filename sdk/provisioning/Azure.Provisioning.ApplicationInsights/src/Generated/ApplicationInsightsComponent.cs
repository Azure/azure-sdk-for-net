// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Authorization;
using Azure.Provisioning.Expressions;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using Azure.Provisioning.Roles;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.ApplicationInsights;

/// <summary>
/// ApplicationInsightsComponent.
/// </summary>
public partial class ApplicationInsightsComponent : Resource
{
    /// <summary>
    /// The name of the Application Insights component resource.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The kind of application that this component refers to, used to
    /// customize UI. This value is a freeform string, values should typically
    /// be one of the following: web, ios, other, store, java, phone.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; set => _kind.Assign(value); }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Type of application being monitored.
    /// </summary>
    public BicepValue<ApplicationInsightsApplicationType> ApplicationType { get => _applicationType; set => _applicationType.Assign(value); }
    private readonly BicepValue<ApplicationInsightsApplicationType> _applicationType;

    /// <summary>
    /// Resource etag.
    /// </summary>
    public BicepValue<ETag> ETag { get => _eTag; set => _eTag.Assign(value); }
    private readonly BicepValue<ETag> _eTag;

    /// <summary>
    /// Used by the Application Insights system to determine what kind of flow
    /// this component was created by. This is to be set to
    /// &apos;Bluefield&apos; when creating/updating a component via the REST
    /// API.
    /// </summary>
    public BicepValue<ComponentFlowType> FlowType { get => _flowType; set => _flowType.Assign(value); }
    private readonly BicepValue<ComponentFlowType> _flowType;

    /// <summary>
    /// The unique application ID created when a new application is added to
    /// HockeyApp, used for communications with HockeyApp.
    /// </summary>
    public BicepValue<string> HockeyAppId { get => _hockeyAppId; set => _hockeyAppId.Assign(value); }
    private readonly BicepValue<string> _hockeyAppId;

    /// <summary>
    /// Indicates the flow of the ingestion.
    /// </summary>
    public BicepValue<ComponentIngestionMode> IngestionMode { get => _ingestionMode; set => _ingestionMode.Assign(value); }
    private readonly BicepValue<ComponentIngestionMode> _ingestionMode;

    /// <summary>
    /// Disable IP masking.
    /// </summary>
    public BicepValue<bool> IsDisableIPMasking { get => _isDisableIPMasking; set => _isDisableIPMasking.Assign(value); }
    private readonly BicepValue<bool> _isDisableIPMasking;

    /// <summary>
    /// Disable Non-AAD based Auth.
    /// </summary>
    public BicepValue<bool> IsDisableLocalAuth { get => _isDisableLocalAuth; set => _isDisableLocalAuth.Assign(value); }
    private readonly BicepValue<bool> _isDisableLocalAuth;

    /// <summary>
    /// Force users to create their own storage account for profiler and
    /// debugger.
    /// </summary>
    public BicepValue<bool> IsForceCustomerStorageForProfiler { get => _isForceCustomerStorageForProfiler; set => _isForceCustomerStorageForProfiler.Assign(value); }
    private readonly BicepValue<bool> _isForceCustomerStorageForProfiler;

    /// <summary>
    /// Purge data immediately after 30 days.
    /// </summary>
    public BicepValue<bool> IsImmediatePurgeDataOn30Days { get => _isImmediatePurgeDataOn30Days; set => _isImmediatePurgeDataOn30Days.Assign(value); }
    private readonly BicepValue<bool> _isImmediatePurgeDataOn30Days;

    /// <summary>
    /// The network access type for accessing Application Insights ingestion.
    /// </summary>
    public BicepValue<ApplicationInsightsPublicNetworkAccessType> PublicNetworkAccessForIngestion { get => _publicNetworkAccessForIngestion; set => _publicNetworkAccessForIngestion.Assign(value); }
    private readonly BicepValue<ApplicationInsightsPublicNetworkAccessType> _publicNetworkAccessForIngestion;

    /// <summary>
    /// The network access type for accessing Application Insights query.
    /// </summary>
    public BicepValue<ApplicationInsightsPublicNetworkAccessType> PublicNetworkAccessForQuery { get => _publicNetworkAccessForQuery; set => _publicNetworkAccessForQuery.Assign(value); }
    private readonly BicepValue<ApplicationInsightsPublicNetworkAccessType> _publicNetworkAccessForQuery;

    /// <summary>
    /// Describes what tool created this Application Insights component.
    /// Customers using this API should set this to the default
    /// &apos;rest&apos;.
    /// </summary>
    public BicepValue<ComponentRequestSource> RequestSource { get => _requestSource; set => _requestSource.Assign(value); }
    private readonly BicepValue<ComponentRequestSource> _requestSource;

    /// <summary>
    /// Retention period in days.
    /// </summary>
    public BicepValue<int> RetentionInDays { get => _retentionInDays; set => _retentionInDays.Assign(value); }
    private readonly BicepValue<int> _retentionInDays;

    /// <summary>
    /// Percentage of the data produced by the application being monitored that
    /// is being sampled for Application Insights telemetry.
    /// </summary>
    public BicepValue<double> SamplingPercentage { get => _samplingPercentage; set => _samplingPercentage.Assign(value); }
    private readonly BicepValue<double> _samplingPercentage;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Resource Id of the log analytics workspace which the data will be
    /// ingested to. This property is required to create an application with
    /// this API version. Applications from older versions will not have this
    /// property.
    /// </summary>
    public BicepValue<ResourceIdentifier> WorkspaceResourceId { get => _workspaceResourceId; set => _workspaceResourceId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _workspaceResourceId;

    /// <summary>
    /// Application Insights Unique ID for your Application.
    /// </summary>
    public BicepValue<string> AppId { get => _appId; }
    private readonly BicepValue<string> _appId;

    /// <summary>
    /// The unique ID of your application. This field mirrors the
    /// &apos;Name&apos; field and cannot be changed.
    /// </summary>
    public BicepValue<string> ApplicationId { get => _applicationId; }
    private readonly BicepValue<string> _applicationId;

    /// <summary>
    /// Application Insights component connection string.
    /// </summary>
    public BicepValue<string> ConnectionString { get => _connectionString; }
    private readonly BicepValue<string> _connectionString;

    /// <summary>
    /// Creation Date for the Application Insights component, in ISO 8601
    /// format.
    /// </summary>
    public BicepValue<DateTimeOffset> CreatedOn { get => _createdOn; }
    private readonly BicepValue<DateTimeOffset> _createdOn;

    /// <summary>
    /// Token used to authenticate communications with between Application
    /// Insights and HockeyApp.
    /// </summary>
    public BicepValue<string> HockeyAppToken { get => _hockeyAppToken; }
    private readonly BicepValue<string> _hockeyAppToken;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Application Insights Instrumentation key. A read-only value that
    /// applications can use to identify the destination for all telemetry
    /// sent to Azure Application Insights. This value will be supplied upon
    /// construction of each new Application Insights component.
    /// </summary>
    public BicepValue<string> InstrumentationKey { get => _instrumentationKey; }
    private readonly BicepValue<string> _instrumentationKey;

    /// <summary>
    /// The date which the component got migrated to LA, in ISO 8601 format.
    /// </summary>
    public BicepValue<DateTimeOffset> LaMigrationOn { get => _laMigrationOn; }
    private readonly BicepValue<DateTimeOffset> _laMigrationOn;

    /// <summary>
    /// Application name.
    /// </summary>
    public BicepValue<string> NamePropertiesName { get => _namePropertiesName; }
    private readonly BicepValue<string> _namePropertiesName;

    /// <summary>
    /// List of linked private link scope resources.
    /// </summary>
    public BicepList<PrivateLinkScopedResourceReference> PrivateLinkScopedResources { get => _privateLinkScopedResources; }
    private readonly BicepList<PrivateLinkScopedResourceReference> _privateLinkScopedResources;

    /// <summary>
    /// Current state of this component: whether or not is has been provisioned
    /// within the resource group it is defined. Users cannot change this
    /// value but are able to read from it. Values will include Succeeded,
    /// Deploying, Canceled, and Failed.
    /// </summary>
    public BicepValue<string> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<string> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Azure Tenant Id.
    /// </summary>
    public BicepValue<Guid> TenantId { get => _tenantId; }
    private readonly BicepValue<Guid> _tenantId;

    /// <summary>
    /// Creates a new ApplicationInsightsComponent.
    /// </summary>
    /// <param name="resourceName">Name of the ApplicationInsightsComponent.</param>
    /// <param name="resourceVersion">Version of the ApplicationInsightsComponent.</param>
    public ApplicationInsightsComponent(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Insights/components", resourceVersion ?? "2020-02-02")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _applicationType = BicepValue<ApplicationInsightsApplicationType>.DefineProperty(this, "ApplicationType", ["properties", "Application_Type"]);
        _eTag = BicepValue<ETag>.DefineProperty(this, "ETag", ["etag"]);
        _flowType = BicepValue<ComponentFlowType>.DefineProperty(this, "FlowType", ["properties", "Flow_Type"]);
        _hockeyAppId = BicepValue<string>.DefineProperty(this, "HockeyAppId", ["properties", "HockeyAppId"]);
        _ingestionMode = BicepValue<ComponentIngestionMode>.DefineProperty(this, "IngestionMode", ["properties", "IngestionMode"]);
        _isDisableIPMasking = BicepValue<bool>.DefineProperty(this, "IsDisableIPMasking", ["properties", "DisableIpMasking"]);
        _isDisableLocalAuth = BicepValue<bool>.DefineProperty(this, "IsDisableLocalAuth", ["properties", "DisableLocalAuth"]);
        _isForceCustomerStorageForProfiler = BicepValue<bool>.DefineProperty(this, "IsForceCustomerStorageForProfiler", ["properties", "ForceCustomerStorageForProfiler"]);
        _isImmediatePurgeDataOn30Days = BicepValue<bool>.DefineProperty(this, "IsImmediatePurgeDataOn30Days", ["properties", "ImmediatePurgeDataOn30Days"]);
        _publicNetworkAccessForIngestion = BicepValue<ApplicationInsightsPublicNetworkAccessType>.DefineProperty(this, "PublicNetworkAccessForIngestion", ["properties", "publicNetworkAccessForIngestion"]);
        _publicNetworkAccessForQuery = BicepValue<ApplicationInsightsPublicNetworkAccessType>.DefineProperty(this, "PublicNetworkAccessForQuery", ["properties", "publicNetworkAccessForQuery"]);
        _requestSource = BicepValue<ComponentRequestSource>.DefineProperty(this, "RequestSource", ["properties", "Request_Source"]);
        _retentionInDays = BicepValue<int>.DefineProperty(this, "RetentionInDays", ["properties", "RetentionInDays"]);
        _samplingPercentage = BicepValue<double>.DefineProperty(this, "SamplingPercentage", ["properties", "SamplingPercentage"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _workspaceResourceId = BicepValue<ResourceIdentifier>.DefineProperty(this, "WorkspaceResourceId", ["properties", "WorkspaceResourceId"]);
        _appId = BicepValue<string>.DefineProperty(this, "AppId", ["properties", "AppId"], isOutput: true);
        _applicationId = BicepValue<string>.DefineProperty(this, "ApplicationId", ["properties", "ApplicationId"], isOutput: true);
        _connectionString = BicepValue<string>.DefineProperty(this, "ConnectionString", ["properties", "ConnectionString"], isOutput: true);
        _createdOn = BicepValue<DateTimeOffset>.DefineProperty(this, "CreatedOn", ["properties", "CreationDate"], isOutput: true);
        _hockeyAppToken = BicepValue<string>.DefineProperty(this, "HockeyAppToken", ["properties", "HockeyAppToken"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _instrumentationKey = BicepValue<string>.DefineProperty(this, "InstrumentationKey", ["properties", "InstrumentationKey"], isOutput: true, isSecure: true);
        _laMigrationOn = BicepValue<DateTimeOffset>.DefineProperty(this, "LaMigrationOn", ["properties", "LaMigrationDate"], isOutput: true);
        _namePropertiesName = BicepValue<string>.DefineProperty(this, "NamePropertiesName", ["properties", "Name"], isOutput: true);
        _privateLinkScopedResources = BicepList<PrivateLinkScopedResourceReference>.DefineProperty(this, "PrivateLinkScopedResources", ["properties", "PrivateLinkScopedResources"], isOutput: true);
        _provisioningState = BicepValue<string>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _tenantId = BicepValue<Guid>.DefineProperty(this, "TenantId", ["properties", "TenantId"], isOutput: true);
    }

    /// <summary>
    /// Supported ApplicationInsightsComponent resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2020-02-02-preview.
        /// </summary>
        public static readonly string V2020_02_02_preview = "2020-02-02-preview";

        /// <summary>
        /// 2020-02-02.
        /// </summary>
        public static readonly string V2020_02_02 = "2020-02-02";

        /// <summary>
        /// 2015-05-01.
        /// </summary>
        public static readonly string V2015_05_01 = "2015-05-01";

        /// <summary>
        /// 2014-08-01.
        /// </summary>
        public static readonly string V2014_08_01 = "2014-08-01";

        /// <summary>
        /// 2014-04-01.
        /// </summary>
        public static readonly string V2014_04_01 = "2014-04-01";
    }

    /// <summary>
    /// Creates a reference to an existing ApplicationInsightsComponent.
    /// </summary>
    /// <param name="resourceName">Name of the ApplicationInsightsComponent.</param>
    /// <param name="resourceVersion">Version of the ApplicationInsightsComponent.</param>
    /// <returns>The existing ApplicationInsightsComponent resource.</returns>
    public static ApplicationInsightsComponent FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this ApplicationInsightsComponent
    /// resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 260, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen | ResourceNameCharacters.Underscore | ResourceNameCharacters.Period | ResourceNameCharacters.Parentheses);

    /// <summary>
    /// Creates a role assignment for a user-assigned identity that grants
    /// access to this ApplicationInsightsComponent.
    /// </summary>
    /// <param name="role">The role to grant.</param>
    /// <param name="identity">The <see cref="UserAssignedIdentity"/>.</param>
    /// <returns>The <see cref="RoleAssignment"/>.</returns>
    public RoleAssignment CreateRoleAssignment(ApplicationInsightsBuiltInRole role, UserAssignedIdentity identity) =>
        new($"{ResourceName}_{identity.ResourceName}_{ApplicationInsightsBuiltInRole.GetBuiltInRoleName(role)}")
        {
            Name = BicepFunction.CreateGuid(Id, identity.PrincipalId, BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString())),
            Scope = new IdentifierExpression(ResourceName),
            PrincipalType = RoleManagementPrincipalType.ServicePrincipal,
            RoleDefinitionId = BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString()),
            PrincipalId = identity.PrincipalId
        };

    /// <summary>
    /// Creates a role assignment for a principal that grants access to this
    /// ApplicationInsightsComponent.
    /// </summary>
    /// <param name="role">The role to grant.</param>
    /// <param name="principalType">The type of the principal to assign to.</param>
    /// <param name="principalId">The principal to assign to.</param>
    /// <param name="resourceNameSuffix">Optional role assignment resource name suffix.</param>
    /// <returns>The <see cref="RoleAssignment"/>.</returns>
    public RoleAssignment CreateRoleAssignment(ApplicationInsightsBuiltInRole role, BicepValue<RoleManagementPrincipalType> principalType, BicepValue<Guid> principalId, string? resourceNameSuffix = default) =>
        new($"{ResourceName}_{ApplicationInsightsBuiltInRole.GetBuiltInRoleName(role)}{(resourceNameSuffix is null ? "" : "_")}{resourceNameSuffix}")
        {
            Name = BicepFunction.CreateGuid(Id, principalId, BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString())),
            Scope = new IdentifierExpression(ResourceName),
            PrincipalType = principalType,
            RoleDefinitionId = BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString()),
            PrincipalId = principalId
        };
}
