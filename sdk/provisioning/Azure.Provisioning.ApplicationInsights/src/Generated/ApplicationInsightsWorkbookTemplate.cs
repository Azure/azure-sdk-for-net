// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.ApplicationInsights;

/// <summary>
/// ApplicationInsightsWorkbookTemplate.
/// </summary>
public partial class ApplicationInsightsWorkbookTemplate : Resource
{
    /// <summary>
    /// The name of the Application Insights component resource.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Information about the author of the workbook template.
    /// </summary>
    public BicepValue<string> Author { get => _author; set => _author.Assign(value); }
    private readonly BicepValue<string> _author;

    /// <summary>
    /// Workbook galleries supported by the template.
    /// </summary>
    public BicepList<WorkbookTemplateGallery> Galleries { get => _galleries; set => _galleries.Assign(value); }
    private readonly BicepList<WorkbookTemplateGallery> _galleries;

    /// <summary>
    /// Key value pair of localized gallery. Each key is the locale code of
    /// languages supported by the Azure portal.
    /// </summary>
    public BicepDictionary<BicepList<WorkbookTemplateLocalizedGallery>> LocalizedGalleries { get => _localizedGalleries; set => _localizedGalleries.Assign(value); }
    private readonly BicepDictionary<BicepList<WorkbookTemplateLocalizedGallery>> _localizedGalleries;

    /// <summary>
    /// Priority of the template. Determines which template to open when a
    /// workbook gallery is opened in viewer mode.
    /// </summary>
    public BicepValue<int> Priority { get => _priority; set => _priority.Assign(value); }
    private readonly BicepValue<int> _priority;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Valid JSON object containing workbook template payload.
    /// To assign an object to this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepValue<BinaryData> TemplateData { get => _templateData; set => _templateData.Assign(value); }
    private readonly BicepValue<BinaryData> _templateData;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new ApplicationInsightsWorkbookTemplate.
    /// </summary>
    /// <param name="resourceName">Name of the ApplicationInsightsWorkbookTemplate.</param>
    /// <param name="resourceVersion">Version of the ApplicationInsightsWorkbookTemplate.</param>
    public ApplicationInsightsWorkbookTemplate(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Insights/workbooktemplates", resourceVersion ?? "2020-11-20")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _author = BicepValue<string>.DefineProperty(this, "Author", ["properties", "author"]);
        _galleries = BicepList<WorkbookTemplateGallery>.DefineProperty(this, "Galleries", ["properties", "galleries"]);
        _localizedGalleries = BicepDictionary<BicepList<WorkbookTemplateLocalizedGallery>>.DefineProperty(this, "LocalizedGalleries", ["properties", "localized"]);
        _priority = BicepValue<int>.DefineProperty(this, "Priority", ["properties", "priority"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _templateData = BicepValue<BinaryData>.DefineProperty(this, "TemplateData", ["properties", "templateData"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported ApplicationInsightsWorkbookTemplate resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2020-11-20.
        /// </summary>
        public static readonly string V2020_11_20 = "2020-11-20";
    }

    /// <summary>
    /// Creates a reference to an existing ApplicationInsightsWorkbookTemplate.
    /// </summary>
    /// <param name="resourceName">Name of the ApplicationInsightsWorkbookTemplate.</param>
    /// <param name="resourceVersion">Version of the ApplicationInsightsWorkbookTemplate.</param>
    /// <returns>The existing ApplicationInsightsWorkbookTemplate resource.</returns>
    public static ApplicationInsightsWorkbookTemplate FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
