// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.AppContainers;

/// <summary>
/// SessionPool.
/// </summary>
public partial class SessionPool : ProvisionableResource
{
    /// <summary>
    /// Name of the session pool.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// The container type of the sessions.
    /// </summary>
    public BicepValue<ContainerType> ContainerType 
    {
        get { Initialize(); return _containerType!; }
        set { Initialize(); _containerType!.Assign(value); }
    }
    private BicepValue<ContainerType>? _containerType;

    /// <summary>
    /// The custom container configuration if the containerType is
    /// CustomContainer.
    /// </summary>
    public CustomContainerTemplate CustomContainerTemplate 
    {
        get { Initialize(); return _customContainerTemplate!; }
        set { Initialize(); AssignOrReplace(ref _customContainerTemplate, value); }
    }
    private CustomContainerTemplate? _customContainerTemplate;

    /// <summary>
    /// The lifecycle configuration of a session in the dynamic session pool.
    /// </summary>
    public SessionPoolLifecycleConfiguration DynamicPoolLifecycleConfiguration 
    {
        get { Initialize(); return _dynamicPoolLifecycleConfiguration!; }
        set { Initialize(); AssignOrReplace(ref _dynamicPoolLifecycleConfiguration, value); }
    }
    private SessionPoolLifecycleConfiguration? _dynamicPoolLifecycleConfiguration;

    /// <summary>
    /// Resource ID of the session pool&apos;s environment.
    /// </summary>
    public BicepValue<ResourceIdentifier> EnvironmentId 
    {
        get { Initialize(); return _environmentId!; }
        set { Initialize(); _environmentId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _environmentId;

    /// <summary>
    /// Managed identities needed by a session pool to interact with other
    /// Azure services to not maintain any secrets or credentials in code.
    /// </summary>
    public ManagedServiceIdentity Identity 
    {
        get { Initialize(); return _identity!; }
        set { Initialize(); AssignOrReplace(ref _identity, value); }
    }
    private ManagedServiceIdentity? _identity;

    /// <summary>
    /// Optional settings for a Managed Identity that is assigned to the
    /// Session pool.
    /// </summary>
    public BicepList<SessionPoolManagedIdentitySetting> ManagedIdentitySettings 
    {
        get { Initialize(); return _managedIdentitySettings!; }
        set { Initialize(); _managedIdentitySettings!.Assign(value); }
    }
    private BicepList<SessionPoolManagedIdentitySetting>? _managedIdentitySettings;

    /// <summary>
    /// The pool management type of the session pool.
    /// </summary>
    public BicepValue<PoolManagementType> PoolManagementType 
    {
        get { Initialize(); return _poolManagementType!; }
        set { Initialize(); _poolManagementType!.Assign(value); }
    }
    private BicepValue<PoolManagementType>? _poolManagementType;

    /// <summary>
    /// The scale configuration of the session pool.
    /// </summary>
    public SessionPoolScaleConfiguration ScaleConfiguration 
    {
        get { Initialize(); return _scaleConfiguration!; }
        set { Initialize(); AssignOrReplace(ref _scaleConfiguration, value); }
    }
    private SessionPoolScaleConfiguration? _scaleConfiguration;

    /// <summary>
    /// The secrets of the session pool.
    /// </summary>
    public BicepList<SessionPoolSecret> Secrets 
    {
        get { Initialize(); return _secrets!; }
        set { Initialize(); _secrets!.Assign(value); }
    }
    private BicepList<SessionPoolSecret>? _secrets;

    /// <summary>
    /// Network status for the sessions.
    /// </summary>
    public BicepValue<SessionNetworkStatus> SessionNetworkStatus 
    {
        get { Initialize(); return _sessionNetworkStatus!; }
        set { Initialize(); _sessionNetworkStatus!.Assign(value); }
    }
    private BicepValue<SessionNetworkStatus>? _sessionNetworkStatus;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// The number of nodes the session pool is using.
    /// </summary>
    public BicepValue<int> NodeCount 
    {
        get { Initialize(); return _nodeCount!; }
    }
    private BicepValue<int>? _nodeCount;

    /// <summary>
    /// The endpoint to manage the pool.
    /// </summary>
    public BicepValue<Uri> PoolManagementEndpoint 
    {
        get { Initialize(); return _poolManagementEndpoint!; }
    }
    private BicepValue<Uri>? _poolManagementEndpoint;

    /// <summary>
    /// Provisioning state of the session pool.
    /// </summary>
    public BicepValue<SessionPoolProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<SessionPoolProvisioningState>? _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// Creates a new SessionPool.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the SessionPool resource.  This can be
    /// used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the SessionPool.</param>
    public SessionPool(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.App/sessionPools", resourceVersion ?? "2025-01-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of SessionPool.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"], isRequired: true);
        _containerType = DefineProperty<ContainerType>("ContainerType", ["properties", "containerType"]);
        _customContainerTemplate = DefineModelProperty<CustomContainerTemplate>("CustomContainerTemplate", ["properties", "customContainerTemplate"]);
        _dynamicPoolLifecycleConfiguration = DefineModelProperty<SessionPoolLifecycleConfiguration>("DynamicPoolLifecycleConfiguration", ["properties", "dynamicPoolConfiguration", "lifecycleConfiguration"]);
        _environmentId = DefineProperty<ResourceIdentifier>("EnvironmentId", ["properties", "environmentId"]);
        _identity = DefineModelProperty<ManagedServiceIdentity>("Identity", ["identity"]);
        _managedIdentitySettings = DefineListProperty<SessionPoolManagedIdentitySetting>("ManagedIdentitySettings", ["properties", "managedIdentitySettings"]);
        _poolManagementType = DefineProperty<PoolManagementType>("PoolManagementType", ["properties", "poolManagementType"]);
        _scaleConfiguration = DefineModelProperty<SessionPoolScaleConfiguration>("ScaleConfiguration", ["properties", "scaleConfiguration"]);
        _secrets = DefineListProperty<SessionPoolSecret>("Secrets", ["properties", "secrets"]);
        _sessionNetworkStatus = DefineProperty<SessionNetworkStatus>("SessionNetworkStatus", ["properties", "sessionNetworkConfiguration", "status"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _nodeCount = DefineProperty<int>("NodeCount", ["properties", "nodeCount"], isOutput: true);
        _poolManagementEndpoint = DefineProperty<Uri>("PoolManagementEndpoint", ["properties", "poolManagementEndpoint"], isOutput: true);
        _provisioningState = DefineProperty<SessionPoolProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported SessionPool resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-01-01.
        /// </summary>
        public static readonly string V2025_01_01 = "2025-01-01";
    }

    /// <summary>
    /// Creates a reference to an existing SessionPool.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the SessionPool resource.  This can be
    /// used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the SessionPool.</param>
    /// <returns>The existing SessionPool resource.</returns>
    public static SessionPool FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
