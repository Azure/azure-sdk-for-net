// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppContainers;

/// <summary>
/// HTTPGet specifies the http request to perform.
/// </summary>
public partial class ContainerAppHttpRequestInfo : ProvisioningConstruct
{
    /// <summary>
    /// Host name to connect to, defaults to the pod IP. You probably want to
    /// set &quot;Host&quot; in httpHeaders instead.
    /// </summary>
    public BicepValue<string> Host { get => _host; set => _host.Assign(value); }
    private readonly BicepValue<string> _host;

    /// <summary>
    /// Custom headers to set in the request. HTTP allows repeated headers.
    /// </summary>
    public BicepList<ContainerAppHttpHeaderInfo> HttpHeaders { get => _httpHeaders; set => _httpHeaders.Assign(value); }
    private readonly BicepList<ContainerAppHttpHeaderInfo> _httpHeaders;

    /// <summary>
    /// Path to access on the HTTP server.
    /// </summary>
    public BicepValue<string> Path { get => _path; set => _path.Assign(value); }
    private readonly BicepValue<string> _path;

    /// <summary>
    /// Name or number of the port to access on the container. Number must be
    /// in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    /// </summary>
    public BicepValue<int> Port { get => _port; set => _port.Assign(value); }
    private readonly BicepValue<int> _port;

    /// <summary>
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    /// </summary>
    public BicepValue<ContainerAppHttpScheme> Scheme { get => _scheme; set => _scheme.Assign(value); }
    private readonly BicepValue<ContainerAppHttpScheme> _scheme;

    /// <summary>
    /// Creates a new ContainerAppHttpRequestInfo.
    /// </summary>
    public ContainerAppHttpRequestInfo()
    {
        _host = BicepValue<string>.DefineProperty(this, "Host", ["host"]);
        _httpHeaders = BicepList<ContainerAppHttpHeaderInfo>.DefineProperty(this, "HttpHeaders", ["httpHeaders"]);
        _path = BicepValue<string>.DefineProperty(this, "Path", ["path"]);
        _port = BicepValue<int>.DefineProperty(this, "Port", ["port"]);
        _scheme = BicepValue<ContainerAppHttpScheme>.DefineProperty(this, "Scheme", ["scheme"]);
    }
}
