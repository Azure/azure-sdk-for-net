// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppContainers;

/// <summary>
/// Certificate resource specific properties.
/// </summary>
public partial class ContainerAppCertificateProperties : ProvisioningConstruct
{
    /// <summary>
    /// Provisioning state of the certificate.
    /// </summary>
    public BicepValue<ContainerAppCertificateProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<ContainerAppCertificateProvisioningState> _provisioningState;

    /// <summary>
    /// Certificate password.
    /// </summary>
    public BicepValue<string> Password { get => _password; set => _password.Assign(value); }
    private readonly BicepValue<string> _password;

    /// <summary>
    /// Subject name of the certificate.
    /// </summary>
    public BicepValue<string> SubjectName { get => _subjectName; }
    private readonly BicepValue<string> _subjectName;

    /// <summary>
    /// Subject alternative names the certificate applies to.
    /// </summary>
    public BicepList<string> SubjectAlternativeNames { get => _subjectAlternativeNames; }
    private readonly BicepList<string> _subjectAlternativeNames;

    /// <summary>
    /// PFX or PEM blob.
    /// </summary>
    public BicepValue<BinaryData> Value { get => _value; set => _value.Assign(value); }
    private readonly BicepValue<BinaryData> _value;

    /// <summary>
    /// Certificate issuer.
    /// </summary>
    public BicepValue<string> Issuer { get => _issuer; }
    private readonly BicepValue<string> _issuer;

    /// <summary>
    /// Certificate issue Date.
    /// </summary>
    public BicepValue<DateTimeOffset> IssueOn { get => _issueOn; }
    private readonly BicepValue<DateTimeOffset> _issueOn;

    /// <summary>
    /// Certificate expiration date.
    /// </summary>
    public BicepValue<DateTimeOffset> ExpireOn { get => _expireOn; }
    private readonly BicepValue<DateTimeOffset> _expireOn;

    /// <summary>
    /// Certificate thumbprint.
    /// </summary>
    public BicepValue<string> Thumbprint { get => _thumbprint; }
    private readonly BicepValue<string> _thumbprint;

    /// <summary>
    /// Is the certificate valid?.
    /// </summary>
    public BicepValue<bool> IsValid { get => _isValid; }
    private readonly BicepValue<bool> _isValid;

    /// <summary>
    /// Public key hash.
    /// </summary>
    public BicepValue<string> PublicKeyHash { get => _publicKeyHash; }
    private readonly BicepValue<string> _publicKeyHash;

    /// <summary>
    /// Creates a new ContainerAppCertificateProperties.
    /// </summary>
    public ContainerAppCertificateProperties()
    {
        _provisioningState = BicepValue<ContainerAppCertificateProvisioningState>.DefineProperty(this, "ProvisioningState", ["provisioningState"], isOutput: true);
        _password = BicepValue<string>.DefineProperty(this, "Password", ["password"]);
        _subjectName = BicepValue<string>.DefineProperty(this, "SubjectName", ["subjectName"], isOutput: true);
        _subjectAlternativeNames = BicepList<string>.DefineProperty(this, "SubjectAlternativeNames", ["subjectAlternativeNames"], isOutput: true);
        _value = BicepValue<BinaryData>.DefineProperty(this, "Value", ["value"]);
        _issuer = BicepValue<string>.DefineProperty(this, "Issuer", ["issuer"], isOutput: true);
        _issueOn = BicepValue<DateTimeOffset>.DefineProperty(this, "IssueOn", ["issueDate"], isOutput: true);
        _expireOn = BicepValue<DateTimeOffset>.DefineProperty(this, "ExpireOn", ["expirationDate"], isOutput: true);
        _thumbprint = BicepValue<string>.DefineProperty(this, "Thumbprint", ["thumbprint"], isOutput: true);
        _isValid = BicepValue<bool>.DefineProperty(this, "IsValid", ["valid"], isOutput: true);
        _publicKeyHash = BicepValue<string>.DefineProperty(this, "PublicKeyHash", ["publicKeyHash"], isOutput: true);
    }
}
