// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppContainers;

/// <summary>
/// Trigger configuration of an event driven job.
/// </summary>
public partial class EventTriggerConfiguration : ProvisionableConstruct
{
    /// <summary>
    /// Minimum number of successful replica completions before overall job
    /// completion.
    /// </summary>
    public BicepValue<int> ReplicaCompletionCount 
    {
        get { Initialize(); return _replicaCompletionCount!; }
        set { Initialize(); _replicaCompletionCount!.Assign(value); }
    }
    private BicepValue<int>? _replicaCompletionCount;

    /// <summary>
    /// Number of parallel replicas of a job that can run at a given time.
    /// </summary>
    public BicepValue<int> Parallelism 
    {
        get { Initialize(); return _parallelism!; }
        set { Initialize(); _parallelism!.Assign(value); }
    }
    private BicepValue<int>? _parallelism;

    /// <summary>
    /// Scaling configurations for event driven jobs.
    /// </summary>
    public ContainerAppJobScale Scale 
    {
        get { Initialize(); return _scale!; }
        set { Initialize(); AssignOrReplace(ref _scale, value); }
    }
    private ContainerAppJobScale? _scale;

    /// <summary>
    /// Creates a new EventTriggerConfiguration.
    /// </summary>
    public EventTriggerConfiguration()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of EventTriggerConfiguration.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _replicaCompletionCount = DefineProperty<int>("ReplicaCompletionCount", ["replicaCompletionCount"]);
        _parallelism = DefineProperty<int>("Parallelism", ["parallelism"]);
        _scale = DefineModelProperty<ContainerAppJobScale>("Scale", ["scale"]);
    }
}
