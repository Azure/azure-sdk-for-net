// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppContainers;

/// <summary>
/// The configuration settings of the token store.
/// </summary>
public partial class ContainerAppTokenStore : ProvisioningConstruct
{
    /// <summary>
    /// &lt;code&gt;true&lt;/code&gt; to durably store platform-specific
    /// security tokens that are obtained during login flows; otherwise,
    /// &lt;code&gt;false&lt;/code&gt;.              The default is
    /// &lt;code&gt;false&lt;/code&gt;.
    /// </summary>
    public BicepValue<bool> IsEnabled { get => _isEnabled; set => _isEnabled.Assign(value); }
    private readonly BicepValue<bool> _isEnabled;

    /// <summary>
    /// The number of hours after session token expiration that a session token
    /// can be used to             call the token refresh API. The default is
    /// 72 hours.
    /// </summary>
    public BicepValue<double> TokenRefreshExtensionHours { get => _tokenRefreshExtensionHours; set => _tokenRefreshExtensionHours.Assign(value); }
    private readonly BicepValue<double> _tokenRefreshExtensionHours;

    /// <summary>
    /// The name of the app secrets containing the SAS URL of the blob storage
    /// containing the tokens.
    /// </summary>
    public BicepValue<string> AzureBlobStorageSasUrlSettingName { get => _azureBlobStorageSasUrlSettingName; set => _azureBlobStorageSasUrlSettingName.Assign(value); }
    private readonly BicepValue<string> _azureBlobStorageSasUrlSettingName;

    /// <summary>
    /// Creates a new ContainerAppTokenStore.
    /// </summary>
    public ContainerAppTokenStore()
    {
        _isEnabled = BicepValue<bool>.DefineProperty(this, "IsEnabled", ["enabled"]);
        _tokenRefreshExtensionHours = BicepValue<double>.DefineProperty(this, "TokenRefreshExtensionHours", ["tokenRefreshExtensionHours"]);
        _azureBlobStorageSasUrlSettingName = BicepValue<string>.DefineProperty(this, "AzureBlobStorageSasUrlSettingName", ["azureBlobStorage", "sasUrlSettingName"]);
    }
}
