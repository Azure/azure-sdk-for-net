// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppContainers;

/// <summary>
/// Probe describes a health check to be performed against a container to
/// determine whether it is alive or ready to receive traffic.
/// </summary>
public partial class ContainerAppProbe : ProvisioningConstruct
{
    /// <summary>
    /// Minimum consecutive failures for the probe to be considered failed
    /// after having succeeded. Defaults to 3. Minimum value is 1. Maximum
    /// value is 10.
    /// </summary>
    public BicepValue<int> FailureThreshold { get => _failureThreshold; set => _failureThreshold.Assign(value); }
    private readonly BicepValue<int> _failureThreshold;

    /// <summary>
    /// HTTPGet specifies the http request to perform.
    /// </summary>
    public BicepValue<ContainerAppHttpRequestInfo> HttpGet { get => _httpGet; set => _httpGet.Assign(value); }
    private readonly BicepValue<ContainerAppHttpRequestInfo> _httpGet;

    /// <summary>
    /// Number of seconds after the container has started before liveness
    /// probes are initiated. Minimum value is 1. Maximum value is 60.
    /// </summary>
    public BicepValue<int> InitialDelaySeconds { get => _initialDelaySeconds; set => _initialDelaySeconds.Assign(value); }
    private readonly BicepValue<int> _initialDelaySeconds;

    /// <summary>
    /// How often (in seconds) to perform the probe. Default to 10 seconds.
    /// Minimum value is 1. Maximum value is 240.
    /// </summary>
    public BicepValue<int> PeriodSeconds { get => _periodSeconds; set => _periodSeconds.Assign(value); }
    private readonly BicepValue<int> _periodSeconds;

    /// <summary>
    /// Minimum consecutive successes for the probe to be considered successful
    /// after having failed. Defaults to 1. Must be 1 for liveness and
    /// startup. Minimum value is 1. Maximum value is 10.
    /// </summary>
    public BicepValue<int> SuccessThreshold { get => _successThreshold; set => _successThreshold.Assign(value); }
    private readonly BicepValue<int> _successThreshold;

    /// <summary>
    /// TCPSocket specifies an action involving a TCP port. TCP hooks not yet
    /// supported.
    /// </summary>
    public BicepValue<ContainerAppTcpSocketRequestInfo> TcpSocket { get => _tcpSocket; set => _tcpSocket.Assign(value); }
    private readonly BicepValue<ContainerAppTcpSocketRequestInfo> _tcpSocket;

    /// <summary>
    /// Optional duration in seconds the pod needs to terminate gracefully upon
    /// probe failure. The grace period is the duration in seconds after the
    /// processes running in the pod are sent a termination signal and the
    /// time when the processes are forcibly halted with a kill signal. Set
    /// this value longer than the expected cleanup time for your process. If
    /// this value is nil, the pod&apos;s terminationGracePeriodSeconds will
    /// be used. Otherwise, this value overrides the value provided by the pod
    /// spec. Value must be non-negative integer. The value zero indicates
    /// stop immediately via the kill signal (no opportunity to shut down).
    /// This is an alpha field and requires enabling
    /// ProbeTerminationGracePeriod feature gate. Maximum value is 3600
    /// seconds (1 hour).
    /// </summary>
    public BicepValue<long> TerminationGracePeriodSeconds { get => _terminationGracePeriodSeconds; set => _terminationGracePeriodSeconds.Assign(value); }
    private readonly BicepValue<long> _terminationGracePeriodSeconds;

    /// <summary>
    /// Number of seconds after which the probe times out. Defaults to 1
    /// second. Minimum value is 1. Maximum value is 240.
    /// </summary>
    public BicepValue<int> TimeoutSeconds { get => _timeoutSeconds; set => _timeoutSeconds.Assign(value); }
    private readonly BicepValue<int> _timeoutSeconds;

    /// <summary>
    /// The type of probe.
    /// </summary>
    public BicepValue<ContainerAppProbeType> ProbeType { get => _probeType; set => _probeType.Assign(value); }
    private readonly BicepValue<ContainerAppProbeType> _probeType;

    /// <summary>
    /// Creates a new ContainerAppProbe.
    /// </summary>
    public ContainerAppProbe()
    {
        _failureThreshold = BicepValue<int>.DefineProperty(this, "FailureThreshold", ["failureThreshold"]);
        _httpGet = BicepValue<ContainerAppHttpRequestInfo>.DefineProperty(this, "HttpGet", ["httpGet"]);
        _initialDelaySeconds = BicepValue<int>.DefineProperty(this, "InitialDelaySeconds", ["initialDelaySeconds"]);
        _periodSeconds = BicepValue<int>.DefineProperty(this, "PeriodSeconds", ["periodSeconds"]);
        _successThreshold = BicepValue<int>.DefineProperty(this, "SuccessThreshold", ["successThreshold"]);
        _tcpSocket = BicepValue<ContainerAppTcpSocketRequestInfo>.DefineProperty(this, "TcpSocket", ["tcpSocket"]);
        _terminationGracePeriodSeconds = BicepValue<long>.DefineProperty(this, "TerminationGracePeriodSeconds", ["terminationGracePeriodSeconds"]);
        _timeoutSeconds = BicepValue<int>.DefineProperty(this, "TimeoutSeconds", ["timeoutSeconds"]);
        _probeType = BicepValue<ContainerAppProbeType>.DefineProperty(this, "ProbeType", ["type"]);
    }
}
