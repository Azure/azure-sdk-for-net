// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppContainers;

/// <summary>
/// Container App Ingress configuration.
/// </summary>
public partial class ContainerAppIngressConfiguration : ProvisioningConstruct
{
    /// <summary>
    /// Hostname.
    /// </summary>
    public BicepValue<string> Fqdn { get => _fqdn; }
    private readonly BicepValue<string> _fqdn;

    /// <summary>
    /// Bool indicating if app exposes an external http endpoint.
    /// </summary>
    public BicepValue<bool> External { get => _external; set => _external.Assign(value); }
    private readonly BicepValue<bool> _external;

    /// <summary>
    /// Target Port in containers for traffic from ingress.
    /// </summary>
    public BicepValue<int> TargetPort { get => _targetPort; set => _targetPort.Assign(value); }
    private readonly BicepValue<int> _targetPort;

    /// <summary>
    /// Exposed Port in containers for TCP traffic from ingress.
    /// </summary>
    public BicepValue<int> ExposedPort { get => _exposedPort; set => _exposedPort.Assign(value); }
    private readonly BicepValue<int> _exposedPort;

    /// <summary>
    /// Ingress transport protocol.
    /// </summary>
    public BicepValue<ContainerAppIngressTransportMethod> Transport { get => _transport; set => _transport.Assign(value); }
    private readonly BicepValue<ContainerAppIngressTransportMethod> _transport;

    /// <summary>
    /// Traffic weights for app&apos;s revisions.
    /// </summary>
    public BicepList<ContainerAppRevisionTrafficWeight> Traffic { get => _traffic; set => _traffic.Assign(value); }
    private readonly BicepList<ContainerAppRevisionTrafficWeight> _traffic;

    /// <summary>
    /// custom domain bindings for Container Apps&apos; hostnames.
    /// </summary>
    public BicepList<ContainerAppCustomDomain> CustomDomains { get => _customDomains; set => _customDomains.Assign(value); }
    private readonly BicepList<ContainerAppCustomDomain> _customDomains;

    /// <summary>
    /// Bool indicating if HTTP connections to is allowed. If set to false HTTP
    /// connections are automatically redirected to HTTPS connections.
    /// </summary>
    public BicepValue<bool> AllowInsecure { get => _allowInsecure; set => _allowInsecure.Assign(value); }
    private readonly BicepValue<bool> _allowInsecure;

    /// <summary>
    /// Rules to restrict incoming IP address.
    /// </summary>
    public BicepList<ContainerAppIPSecurityRestrictionRule> IPSecurityRestrictions { get => _iPSecurityRestrictions; set => _iPSecurityRestrictions.Assign(value); }
    private readonly BicepList<ContainerAppIPSecurityRestrictionRule> _iPSecurityRestrictions;

    /// <summary>
    /// Sticky Session Affinity.
    /// </summary>
    public BicepValue<StickySessionAffinity> StickySessionsAffinity { get => _stickySessionsAffinity; set => _stickySessionsAffinity.Assign(value); }
    private readonly BicepValue<StickySessionAffinity> _stickySessionsAffinity;

    /// <summary>
    /// Client certificate mode for mTLS authentication. Ignore indicates
    /// server drops client certificate on forwarding. Accept indicates server
    /// forwards client certificate but does not require a client certificate.
    /// Require indicates server requires a client certificate.
    /// </summary>
    public BicepValue<ContainerAppIngressClientCertificateMode> ClientCertificateMode { get => _clientCertificateMode; set => _clientCertificateMode.Assign(value); }
    private readonly BicepValue<ContainerAppIngressClientCertificateMode> _clientCertificateMode;

    /// <summary>
    /// CORS policy for container app.
    /// </summary>
    public BicepValue<ContainerAppCorsPolicy> CorsPolicy { get => _corsPolicy; set => _corsPolicy.Assign(value); }
    private readonly BicepValue<ContainerAppCorsPolicy> _corsPolicy;

    /// <summary>
    /// Settings to expose additional ports on container app.
    /// </summary>
    public BicepList<IngressPortMapping> AdditionalPortMappings { get => _additionalPortMappings; set => _additionalPortMappings.Assign(value); }
    private readonly BicepList<IngressPortMapping> _additionalPortMappings;

    /// <summary>
    /// Creates a new ContainerAppIngressConfiguration.
    /// </summary>
    public ContainerAppIngressConfiguration()
    {
        _fqdn = BicepValue<string>.DefineProperty(this, "Fqdn", ["fqdn"], isOutput: true);
        _external = BicepValue<bool>.DefineProperty(this, "External", ["external"]);
        _targetPort = BicepValue<int>.DefineProperty(this, "TargetPort", ["targetPort"]);
        _exposedPort = BicepValue<int>.DefineProperty(this, "ExposedPort", ["exposedPort"]);
        _transport = BicepValue<ContainerAppIngressTransportMethod>.DefineProperty(this, "Transport", ["transport"]);
        _traffic = BicepList<ContainerAppRevisionTrafficWeight>.DefineProperty(this, "Traffic", ["traffic"]);
        _customDomains = BicepList<ContainerAppCustomDomain>.DefineProperty(this, "CustomDomains", ["customDomains"]);
        _allowInsecure = BicepValue<bool>.DefineProperty(this, "AllowInsecure", ["allowInsecure"]);
        _iPSecurityRestrictions = BicepList<ContainerAppIPSecurityRestrictionRule>.DefineProperty(this, "IPSecurityRestrictions", ["ipSecurityRestrictions"]);
        _stickySessionsAffinity = BicepValue<StickySessionAffinity>.DefineProperty(this, "StickySessionsAffinity", ["stickySessions", "affinity"]);
        _clientCertificateMode = BicepValue<ContainerAppIngressClientCertificateMode>.DefineProperty(this, "ClientCertificateMode", ["clientCertificateMode"]);
        _corsPolicy = BicepValue<ContainerAppCorsPolicy>.DefineProperty(this, "CorsPolicy", ["corsPolicy"]);
        _additionalPortMappings = BicepList<IngressPortMapping>.DefineProperty(this, "AdditionalPortMappings", ["additionalPortMappings"]);
    }
}
