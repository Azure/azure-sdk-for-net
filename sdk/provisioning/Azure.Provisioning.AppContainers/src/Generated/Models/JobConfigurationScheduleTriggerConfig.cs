// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppContainers;

/// <summary>
/// Cron formatted repeating trigger schedule (&quot;* * * * *&quot;) for
/// cronjobs. Properties completions and parallelism would be set to 1 by
/// default.
/// </summary>
public partial class JobConfigurationScheduleTriggerConfig : ProvisioningConstruct
{
    /// <summary>
    /// Minimum number of successful replica completions before overall job
    /// completion.
    /// </summary>
    public BicepValue<int> ReplicaCompletionCount { get => _replicaCompletionCount; set => _replicaCompletionCount.Assign(value); }
    private readonly BicepValue<int> _replicaCompletionCount;

    /// <summary>
    /// Cron formatted repeating schedule (&quot;* * * * *&quot;) of a Cron Job.
    /// </summary>
    public BicepValue<string> CronExpression { get => _cronExpression; set => _cronExpression.Assign(value); }
    private readonly BicepValue<string> _cronExpression;

    /// <summary>
    /// Number of parallel replicas of a job that can run at a given time.
    /// </summary>
    public BicepValue<int> Parallelism { get => _parallelism; set => _parallelism.Assign(value); }
    private readonly BicepValue<int> _parallelism;

    /// <summary>
    /// Creates a new JobConfigurationScheduleTriggerConfig.
    /// </summary>
    public JobConfigurationScheduleTriggerConfig()
    {
        _replicaCompletionCount = BicepValue<int>.DefineProperty(this, "ReplicaCompletionCount", ["replicaCompletionCount"]);
        _cronExpression = BicepValue<string>.DefineProperty(this, "CronExpression", ["cronExpression"]);
        _parallelism = BicepValue<int>.DefineProperty(this, "Parallelism", ["parallelism"]);
    }
}
