// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppContainers;

/// <summary>
/// Container App Dapr configuration.
/// </summary>
public partial class ContainerAppDaprConfiguration : ProvisioningConstruct
{
    /// <summary>
    /// Boolean indicating if the Dapr side car is enabled.
    /// </summary>
    public BicepValue<bool> IsEnabled { get => _isEnabled; set => _isEnabled.Assign(value); }
    private readonly BicepValue<bool> _isEnabled;

    /// <summary>
    /// Dapr application identifier.
    /// </summary>
    public BicepValue<string> AppId { get => _appId; set => _appId.Assign(value); }
    private readonly BicepValue<string> _appId;

    /// <summary>
    /// Tells Dapr which protocol your application is using. Valid options are
    /// http and grpc. Default is http.
    /// </summary>
    public BicepValue<ContainerAppProtocol> AppProtocol { get => _appProtocol; set => _appProtocol.Assign(value); }
    private readonly BicepValue<ContainerAppProtocol> _appProtocol;

    /// <summary>
    /// Tells Dapr which port your application is listening on.
    /// </summary>
    public BicepValue<int> AppPort { get => _appPort; set => _appPort.Assign(value); }
    private readonly BicepValue<int> _appPort;

    /// <summary>
    /// Dapr max size of http header read buffer in KB to handle when sending
    /// multi-KB headers. Default is 65KB.
    /// </summary>
    public BicepValue<int> HttpReadBufferSize { get => _httpReadBufferSize; set => _httpReadBufferSize.Assign(value); }
    private readonly BicepValue<int> _httpReadBufferSize;

    /// <summary>
    /// Increasing max size of request body http and grpc servers parameter in
    /// MB to handle uploading of big files. Default is 4 MB.
    /// </summary>
    public BicepValue<int> HttpMaxRequestSize { get => _httpMaxRequestSize; set => _httpMaxRequestSize.Assign(value); }
    private readonly BicepValue<int> _httpMaxRequestSize;

    /// <summary>
    /// Sets the log level for the Dapr sidecar. Allowed values are debug,
    /// info, warn, error. Default is info.
    /// </summary>
    public BicepValue<ContainerAppDaprLogLevel> LogLevel { get => _logLevel; set => _logLevel.Assign(value); }
    private readonly BicepValue<ContainerAppDaprLogLevel> _logLevel;

    /// <summary>
    /// Enables API logging for the Dapr sidecar.
    /// </summary>
    public BicepValue<bool> IsApiLoggingEnabled { get => _isApiLoggingEnabled; set => _isApiLoggingEnabled.Assign(value); }
    private readonly BicepValue<bool> _isApiLoggingEnabled;

    /// <summary>
    /// Creates a new ContainerAppDaprConfiguration.
    /// </summary>
    public ContainerAppDaprConfiguration()
    {
        _isEnabled = BicepValue<bool>.DefineProperty(this, "IsEnabled", ["enabled"]);
        _appId = BicepValue<string>.DefineProperty(this, "AppId", ["appId"]);
        _appProtocol = BicepValue<ContainerAppProtocol>.DefineProperty(this, "AppProtocol", ["appProtocol"]);
        _appPort = BicepValue<int>.DefineProperty(this, "AppPort", ["appPort"]);
        _httpReadBufferSize = BicepValue<int>.DefineProperty(this, "HttpReadBufferSize", ["httpReadBufferSize"]);
        _httpMaxRequestSize = BicepValue<int>.DefineProperty(this, "HttpMaxRequestSize", ["httpMaxRequestSize"]);
        _logLevel = BicepValue<ContainerAppDaprLogLevel>.DefineProperty(this, "LogLevel", ["logLevel"]);
        _isApiLoggingEnabled = BicepValue<bool>.DefineProperty(this, "IsApiLoggingEnabled", ["enableApiLogging"]);
    }
}
