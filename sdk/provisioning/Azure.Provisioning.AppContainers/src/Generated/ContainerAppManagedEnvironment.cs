// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Authorization;
using Azure.Provisioning.Expressions;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using Azure.Provisioning.Roles;
using System;
using System.Net;

namespace Azure.Provisioning.AppContainers;

/// <summary>
/// ContainerAppManagedEnvironment.
/// </summary>
public partial class ContainerAppManagedEnvironment : Resource
{
    /// <summary>
    /// Name of the Environment.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Cluster configuration which enables the log daemon to export
    /// app logs to a destination. Currently only
    /// &quot;log-analytics&quot; is             supported
    /// </summary>
    public BicepValue<ContainerAppLogsConfiguration> AppLogsConfiguration { get => _appLogsConfiguration; set => _appLogsConfiguration.Assign(value); }
    private readonly BicepValue<ContainerAppLogsConfiguration> _appLogsConfiguration;

    /// <summary>
    /// Custom domain configuration for the environment.
    /// </summary>
    public BicepValue<ContainerAppCustomDomainConfiguration> CustomDomainConfiguration { get => _customDomainConfiguration; set => _customDomainConfiguration.Assign(value); }
    private readonly BicepValue<ContainerAppCustomDomainConfiguration> _customDomainConfiguration;

    /// <summary>
    /// Application Insights connection string used by Dapr to export Service
    /// to Service communication telemetry.
    /// </summary>
    public BicepValue<string> DaprAIConnectionString { get => _daprAIConnectionString; set => _daprAIConnectionString.Assign(value); }
    private readonly BicepValue<string> _daprAIConnectionString;

    /// <summary>
    /// Azure Monitor instrumentation key used by Dapr to export Service to
    /// Service communication telemetry.
    /// </summary>
    public BicepValue<string> DaprAIInstrumentationKey { get => _daprAIInstrumentationKey; set => _daprAIInstrumentationKey.Assign(value); }
    private readonly BicepValue<string> _daprAIInstrumentationKey;

    /// <summary>
    /// Name of the platform-managed resource group created for the Managed
    /// Environment to host infrastructure resources. If a subnet ID is
    /// provided, this resource group will be created in the same subscription
    /// as the subnet.
    /// </summary>
    public BicepValue<string> InfrastructureResourceGroup { get => _infrastructureResourceGroup; set => _infrastructureResourceGroup.Assign(value); }
    private readonly BicepValue<string> _infrastructureResourceGroup;

    /// <summary>
    /// Boolean indicating whether the peer traffic encryption is enabled.
    /// </summary>
    public BicepValue<bool> IsEnabled { get => _isEnabled; set => _isEnabled.Assign(value); }
    private readonly BicepValue<bool> _isEnabled;

    /// <summary>
    /// Boolean indicating whether the mutual TLS authentication is enabled.
    /// </summary>
    public BicepValue<bool> IsMtlsEnabled { get => _isMtlsEnabled; set => _isMtlsEnabled.Assign(value); }
    private readonly BicepValue<bool> _isMtlsEnabled;

    /// <summary>
    /// Whether or not this Managed Environment is zone-redundant.
    /// </summary>
    public BicepValue<bool> IsZoneRedundant { get => _isZoneRedundant; set => _isZoneRedundant.Assign(value); }
    private readonly BicepValue<bool> _isZoneRedundant;

    /// <summary>
    /// Kind of the Environment.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; set => _kind.Assign(value); }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Vnet configuration for the environment.
    /// </summary>
    public BicepValue<ContainerAppVnetConfiguration> VnetConfiguration { get => _vnetConfiguration; set => _vnetConfiguration.Assign(value); }
    private readonly BicepValue<ContainerAppVnetConfiguration> _vnetConfiguration;

    /// <summary>
    /// Workload profiles configured for the Managed Environment.
    /// </summary>
    public BicepList<ContainerAppWorkloadProfile> WorkloadProfiles { get => _workloadProfiles; set => _workloadProfiles.Assign(value); }
    private readonly BicepList<ContainerAppWorkloadProfile> _workloadProfiles;

    /// <summary>
    /// The version of Dapr.
    /// </summary>
    public BicepValue<string> DaprVersion { get => _daprVersion; }
    private readonly BicepValue<string> _daprVersion;

    /// <summary>
    /// Default Domain Name for the cluster.
    /// </summary>
    public BicepValue<string> DefaultDomain { get => _defaultDomain; }
    private readonly BicepValue<string> _defaultDomain;

    /// <summary>
    /// Any errors that occurred during deployment or deployment validation.
    /// </summary>
    public BicepValue<string> DeploymentErrors { get => _deploymentErrors; }
    private readonly BicepValue<string> _deploymentErrors;

    /// <summary>
    /// The endpoint of the eventstream of the Environment.
    /// </summary>
    public BicepValue<string> EventStreamEndpoint { get => _eventStreamEndpoint; }
    private readonly BicepValue<string> _eventStreamEndpoint;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The version of Keda.
    /// </summary>
    public BicepValue<string> KedaVersion { get => _kedaVersion; }
    private readonly BicepValue<string> _kedaVersion;

    /// <summary>
    /// Provisioning state of the Environment.
    /// </summary>
    public BicepValue<ContainerAppEnvironmentProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<ContainerAppEnvironmentProvisioningState> _provisioningState;

    /// <summary>
    /// Static IP of the Environment.
    /// </summary>
    public BicepValue<IPAddress> StaticIP { get => _staticIP; }
    private readonly BicepValue<IPAddress> _staticIP;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new ContainerAppManagedEnvironment.
    /// </summary>
    /// <param name="resourceName">Name of the ContainerAppManagedEnvironment.</param>
    /// <param name="resourceVersion">Version of the ContainerAppManagedEnvironment.</param>
    public ContainerAppManagedEnvironment(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.App/managedEnvironments", resourceVersion ?? "2024-03-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _appLogsConfiguration = BicepValue<ContainerAppLogsConfiguration>.DefineProperty(this, "AppLogsConfiguration", ["properties", "appLogsConfiguration"]);
        _customDomainConfiguration = BicepValue<ContainerAppCustomDomainConfiguration>.DefineProperty(this, "CustomDomainConfiguration", ["properties", "customDomainConfiguration"]);
        _daprAIConnectionString = BicepValue<string>.DefineProperty(this, "DaprAIConnectionString", ["properties", "daprAIConnectionString"]);
        _daprAIInstrumentationKey = BicepValue<string>.DefineProperty(this, "DaprAIInstrumentationKey", ["properties", "daprAIInstrumentationKey"]);
        _infrastructureResourceGroup = BicepValue<string>.DefineProperty(this, "InfrastructureResourceGroup", ["properties", "infrastructureResourceGroup"]);
        _isEnabled = BicepValue<bool>.DefineProperty(this, "IsEnabled", ["properties", "peerTrafficConfiguration", "encryption", "enabled"]);
        _isMtlsEnabled = BicepValue<bool>.DefineProperty(this, "IsMtlsEnabled", ["properties", "peerAuthentication", "mtls", "enabled"]);
        _isZoneRedundant = BicepValue<bool>.DefineProperty(this, "IsZoneRedundant", ["properties", "zoneRedundant"]);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _vnetConfiguration = BicepValue<ContainerAppVnetConfiguration>.DefineProperty(this, "VnetConfiguration", ["properties", "vnetConfiguration"]);
        _workloadProfiles = BicepList<ContainerAppWorkloadProfile>.DefineProperty(this, "WorkloadProfiles", ["properties", "workloadProfiles"]);
        _daprVersion = BicepValue<string>.DefineProperty(this, "DaprVersion", ["properties", "daprConfiguration", "version"], isOutput: true);
        _defaultDomain = BicepValue<string>.DefineProperty(this, "DefaultDomain", ["properties", "defaultDomain"], isOutput: true);
        _deploymentErrors = BicepValue<string>.DefineProperty(this, "DeploymentErrors", ["properties", "deploymentErrors"], isOutput: true);
        _eventStreamEndpoint = BicepValue<string>.DefineProperty(this, "EventStreamEndpoint", ["properties", "eventStreamEndpoint"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _kedaVersion = BicepValue<string>.DefineProperty(this, "KedaVersion", ["properties", "kedaConfiguration", "version"], isOutput: true);
        _provisioningState = BicepValue<ContainerAppEnvironmentProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _staticIP = BicepValue<IPAddress>.DefineProperty(this, "StaticIP", ["properties", "staticIp"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported ContainerAppManagedEnvironment resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-08-02-preview.
        /// </summary>
        public static readonly string V2024_08_02_preview = "2024-08-02-preview";

        /// <summary>
        /// 2024-03-01.
        /// </summary>
        public static readonly string V2024_03_01 = "2024-03-01";

        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2022-10-01.
        /// </summary>
        public static readonly string V2022_10_01 = "2022-10-01";

        /// <summary>
        /// 2022-03-01.
        /// </summary>
        public static readonly string V2022_03_01 = "2022-03-01";
    }

    /// <summary>
    /// Creates a reference to an existing ContainerAppManagedEnvironment.
    /// </summary>
    /// <param name="resourceName">Name of the ContainerAppManagedEnvironment.</param>
    /// <param name="resourceVersion">Version of the ContainerAppManagedEnvironment.</param>
    /// <returns>The existing ContainerAppManagedEnvironment resource.</returns>
    public static ContainerAppManagedEnvironment FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Creates a role assignment for a user-assigned identity that grants
    /// access to this ContainerAppManagedEnvironment.
    /// </summary>
    /// <param name="role">The role to grant.</param>
    /// <param name="identity">The <see cref="UserAssignedIdentity"/>.</param>
    /// <returns>The <see cref="RoleAssignment"/>.</returns>
    public RoleAssignment CreateRoleAssignment(AppContainersBuiltInRole role, UserAssignedIdentity identity) =>
        new($"{ResourceName}_{identity.ResourceName}_{AppContainersBuiltInRole.GetBuiltInRoleName(role)}")
        {
            Name = BicepFunction.CreateGuid(Id, identity.PrincipalId, BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString())),
            Scope = new IdentifierExpression(ResourceName),
            PrincipalType = RoleManagementPrincipalType.ServicePrincipal,
            RoleDefinitionId = BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString()),
            PrincipalId = identity.PrincipalId
        };

    /// <summary>
    /// Creates a role assignment for a principal that grants access to this
    /// ContainerAppManagedEnvironment.
    /// </summary>
    /// <param name="role">The role to grant.</param>
    /// <param name="principalType">The type of the principal to assign to.</param>
    /// <param name="principalId">The principal to assign to.</param>
    /// <param name="resourceNameSuffix">Optional role assignment resource name suffix.</param>
    /// <returns>The <see cref="RoleAssignment"/>.</returns>
    public RoleAssignment CreateRoleAssignment(AppContainersBuiltInRole role, BicepValue<RoleManagementPrincipalType> principalType, BicepValue<Guid> principalId, string? resourceNameSuffix = default) =>
        new($"{ResourceName}_{AppContainersBuiltInRole.GetBuiltInRoleName(role)}{(resourceNameSuffix is null ? "" : "_")}{resourceNameSuffix}")
        {
            Name = BicepFunction.CreateGuid(Id, principalId, BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString())),
            Scope = new IdentifierExpression(ResourceName),
            PrincipalType = principalType,
            RoleDefinitionId = BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString()),
            PrincipalId = principalId
        };
}
