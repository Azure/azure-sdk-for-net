// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Kusto;

/// <summary>
/// KustoEventGridDataConnection.
/// </summary>
public partial class KustoEventGridDataConnection : KustoDataConnection
{
    /// <summary>
    /// The name of blob storage event type to process.
    /// </summary>
    public BicepValue<BlobStorageEventType> BlobStorageEventType 
    {
        get { Initialize(); return _blobStorageEventType!; }
        set { Initialize(); _blobStorageEventType!.Assign(value); }
    }
    private BicepValue<BlobStorageEventType>? _blobStorageEventType;

    /// <summary>
    /// The event hub consumer group.
    /// </summary>
    public BicepValue<string> ConsumerGroup 
    {
        get { Initialize(); return _consumerGroup!; }
        set { Initialize(); _consumerGroup!.Assign(value); }
    }
    private BicepValue<string>? _consumerGroup;

    /// <summary>
    /// Indication for database routing information from the data connection,
    /// by default only database routing information is allowed.
    /// </summary>
    public BicepValue<KustoDatabaseRouting> DatabaseRouting 
    {
        get { Initialize(); return _databaseRouting!; }
        set { Initialize(); _databaseRouting!.Assign(value); }
    }
    private BicepValue<KustoDatabaseRouting>? _databaseRouting;

    /// <summary>
    /// The data format of the message. Optionally the data format can be added
    /// to each message.
    /// </summary>
    public BicepValue<KustoEventGridDataFormat> DataFormat 
    {
        get { Initialize(); return _dataFormat!; }
        set { Initialize(); _dataFormat!.Assign(value); }
    }
    private BicepValue<KustoEventGridDataFormat>? _dataFormat;

    /// <summary>
    /// The resource ID of the event grid that is subscribed to the storage
    /// account events.
    /// </summary>
    public BicepValue<ResourceIdentifier> EventGridResourceId 
    {
        get { Initialize(); return _eventGridResourceId!; }
        set { Initialize(); _eventGridResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _eventGridResourceId;

    /// <summary>
    /// The resource ID where the event grid is configured to send events.
    /// </summary>
    public BicepValue<ResourceIdentifier> EventHubResourceId 
    {
        get { Initialize(); return _eventHubResourceId!; }
        set { Initialize(); _eventHubResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _eventHubResourceId;

    /// <summary>
    /// A Boolean value that, if set to true, indicates that ingestion should
    /// ignore the first record of every file.
    /// </summary>
    public BicepValue<bool> IsFirstRecordIgnored 
    {
        get { Initialize(); return _isFirstRecordIgnored!; }
        set { Initialize(); _isFirstRecordIgnored!.Assign(value); }
    }
    private BicepValue<bool>? _isFirstRecordIgnored;

    /// <summary>
    /// The resource ID of a managed identity (system or user assigned) to be
    /// used to authenticate with event hub and storage account.
    /// </summary>
    public BicepValue<ResourceIdentifier> ManagedIdentityResourceId 
    {
        get { Initialize(); return _managedIdentityResourceId!; }
        set { Initialize(); _managedIdentityResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _managedIdentityResourceId;

    /// <summary>
    /// The mapping rule to be used to ingest the data. Optionally the mapping
    /// information can be added to each message.
    /// </summary>
    public BicepValue<string> MappingRuleName 
    {
        get { Initialize(); return _mappingRuleName!; }
        set { Initialize(); _mappingRuleName!.Assign(value); }
    }
    private BicepValue<string>? _mappingRuleName;

    /// <summary>
    /// The resource ID of the storage account where the data resides.
    /// </summary>
    public BicepValue<ResourceIdentifier> StorageAccountResourceId 
    {
        get { Initialize(); return _storageAccountResourceId!; }
        set { Initialize(); _storageAccountResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _storageAccountResourceId;

    /// <summary>
    /// The table where the data should be ingested. Optionally the table
    /// information can be added to each message.
    /// </summary>
    public BicepValue<string> TableName 
    {
        get { Initialize(); return _tableName!; }
        set { Initialize(); _tableName!.Assign(value); }
    }
    private BicepValue<string>? _tableName;

    /// <summary>
    /// The object ID of managedIdentityResourceId.
    /// </summary>
    public BicepValue<Guid> ManagedIdentityObjectId 
    {
        get { Initialize(); return _managedIdentityObjectId!; }
    }
    private BicepValue<Guid>? _managedIdentityObjectId;

    /// <summary>
    /// The provisioned state of the resource.
    /// </summary>
    public BicepValue<KustoProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<KustoProvisioningState>? _provisioningState;

    /// <summary>
    /// Creates a new KustoEventGridDataConnection.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the KustoEventGridDataConnection
    /// resource.  This can be used to refer to the resource in expressions,
    /// but is not the Azure name of the resource.  This value can contain
    /// letters, numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the KustoEventGridDataConnection.</param>
    public KustoEventGridDataConnection(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, resourceVersion)
    {
    }

    /// <summary>
    /// Define all the provisionable properties of KustoEventGridDataConnection.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        DefineProperty<string>("kind", ["kind"], defaultValue: "EventGrid");
        _blobStorageEventType = DefineProperty<BlobStorageEventType>("BlobStorageEventType", ["properties", "blobStorageEventType"]);
        _consumerGroup = DefineProperty<string>("ConsumerGroup", ["properties", "consumerGroup"]);
        _databaseRouting = DefineProperty<KustoDatabaseRouting>("DatabaseRouting", ["properties", "databaseRouting"]);
        _dataFormat = DefineProperty<KustoEventGridDataFormat>("DataFormat", ["properties", "dataFormat"]);
        _eventGridResourceId = DefineProperty<ResourceIdentifier>("EventGridResourceId", ["properties", "eventGridResourceId"]);
        _eventHubResourceId = DefineProperty<ResourceIdentifier>("EventHubResourceId", ["properties", "eventHubResourceId"]);
        _isFirstRecordIgnored = DefineProperty<bool>("IsFirstRecordIgnored", ["properties", "ignoreFirstRecord"]);
        _managedIdentityResourceId = DefineProperty<ResourceIdentifier>("ManagedIdentityResourceId", ["properties", "managedIdentityResourceId"]);
        _mappingRuleName = DefineProperty<string>("MappingRuleName", ["properties", "mappingRuleName"]);
        _storageAccountResourceId = DefineProperty<ResourceIdentifier>("StorageAccountResourceId", ["properties", "storageAccountResourceId"]);
        _tableName = DefineProperty<string>("TableName", ["properties", "tableName"]);
        _managedIdentityObjectId = DefineProperty<Guid>("ManagedIdentityObjectId", ["properties", "managedIdentityObjectId"], isOutput: true);
        _provisioningState = DefineProperty<KustoProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
    }
}
