// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Kusto;

/// <summary>
/// KustoCluster.
/// </summary>
public partial class KustoCluster : ProvisionableResource
{
    /// <summary>
    /// The name of the Kusto cluster.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// The SKU of the cluster.
    /// </summary>
    public KustoSku Sku 
    {
        get { Initialize(); return _sku!; }
        set { Initialize(); AssignOrReplace(ref _sku, value); }
    }
    private KustoSku? _sku;

    /// <summary>
    /// The cluster&apos;s accepted audiences.
    /// </summary>
    public BicepList<AcceptedAudience> AcceptedAudiences 
    {
        get { Initialize(); return _acceptedAudiences!; }
        set { Initialize(); _acceptedAudiences!.Assign(value); }
    }
    private BicepList<AcceptedAudience>? _acceptedAudiences;

    /// <summary>
    /// List of allowed FQDNs(Fully Qualified Domain Name) for egress from
    /// Cluster.
    /// </summary>
    public BicepList<string> AllowedFqdnList 
    {
        get { Initialize(); return _allowedFqdnList!; }
        set { Initialize(); _allowedFqdnList!.Assign(value); }
    }
    private BicepList<string>? _allowedFqdnList;

    /// <summary>
    /// The list of ips in the format of CIDR allowed to connect to the cluster.
    /// </summary>
    public BicepList<string> AllowedIPRangeList 
    {
        get { Initialize(); return _allowedIPRangeList!; }
        set { Initialize(); _allowedIPRangeList!.Assign(value); }
    }
    private BicepList<string>? _allowedIPRangeList;

    /// <summary>
    /// List of callout policies for egress from Cluster.
    /// </summary>
    public BicepList<KustoCalloutPolicy> CalloutPolicies 
    {
        get { Initialize(); return _calloutPolicies!; }
        set { Initialize(); _calloutPolicies!.Assign(value); }
    }
    private BicepList<KustoCalloutPolicy>? _calloutPolicies;

    /// <summary>
    /// The engine type.
    /// </summary>
    public BicepValue<KustoClusterEngineType> EngineType 
    {
        get { Initialize(); return _engineType!; }
        set { Initialize(); _engineType!.Assign(value); }
    }
    private BicepValue<KustoClusterEngineType>? _engineType;

    /// <summary>
    /// The identity of the cluster, if configured.
    /// </summary>
    public ManagedServiceIdentity Identity 
    {
        get { Initialize(); return _identity!; }
        set { Initialize(); AssignOrReplace(ref _identity, value); }
    }
    private ManagedServiceIdentity? _identity;

    /// <summary>
    /// A boolean value that indicates if the cluster could be automatically
    /// stopped (due to lack of data or no activity for many days).
    /// </summary>
    public BicepValue<bool> IsAutoStopEnabled 
    {
        get { Initialize(); return _isAutoStopEnabled!; }
        set { Initialize(); _isAutoStopEnabled!.Assign(value); }
    }
    private BicepValue<bool>? _isAutoStopEnabled;

    /// <summary>
    /// A boolean value that indicates if the cluster&apos;s disks are
    /// encrypted.
    /// </summary>
    public BicepValue<bool> IsDiskEncryptionEnabled 
    {
        get { Initialize(); return _isDiskEncryptionEnabled!; }
        set { Initialize(); _isDiskEncryptionEnabled!.Assign(value); }
    }
    private BicepValue<bool>? _isDiskEncryptionEnabled;

    /// <summary>
    /// A boolean value that indicates if double encryption is enabled.
    /// </summary>
    public BicepValue<bool> IsDoubleEncryptionEnabled 
    {
        get { Initialize(); return _isDoubleEncryptionEnabled!; }
        set { Initialize(); _isDoubleEncryptionEnabled!.Assign(value); }
    }
    private BicepValue<bool>? _isDoubleEncryptionEnabled;

    /// <summary>
    /// A boolean value that indicates if the purge operations are enabled.
    /// </summary>
    public BicepValue<bool> IsPurgeEnabled 
    {
        get { Initialize(); return _isPurgeEnabled!; }
        set { Initialize(); _isPurgeEnabled!.Assign(value); }
    }
    private BicepValue<bool>? _isPurgeEnabled;

    /// <summary>
    /// A boolean value that indicates if the streaming ingest is enabled.
    /// </summary>
    public BicepValue<bool> IsStreamingIngestEnabled 
    {
        get { Initialize(); return _isStreamingIngestEnabled!; }
        set { Initialize(); _isStreamingIngestEnabled!.Assign(value); }
    }
    private BicepValue<bool>? _isStreamingIngestEnabled;

    /// <summary>
    /// KeyVault properties for the cluster encryption.
    /// </summary>
    public KustoKeyVaultProperties KeyVaultProperties 
    {
        get { Initialize(); return _keyVaultProperties!; }
        set { Initialize(); AssignOrReplace(ref _keyVaultProperties, value); }
    }
    private KustoKeyVaultProperties? _keyVaultProperties;

    /// <summary>
    /// The list of language extensions.
    /// </summary>
    public BicepList<KustoLanguageExtension> LanguageExtensionsValue 
    {
        get { Initialize(); return _languageExtensionsValue!; }
        set { Initialize(); _languageExtensionsValue!.Assign(value); }
    }
    private BicepList<KustoLanguageExtension>? _languageExtensionsValue;

    /// <summary>
    /// Optimized auto scale definition.
    /// </summary>
    public OptimizedAutoscale OptimizedAutoscale 
    {
        get { Initialize(); return _optimizedAutoscale!; }
        set { Initialize(); AssignOrReplace(ref _optimizedAutoscale, value); }
    }
    private OptimizedAutoscale? _optimizedAutoscale;

    /// <summary>
    /// Indicates what public IP type to create - IPv4 (default), or DualStack
    /// (both IPv4 and IPv6).
    /// </summary>
    public BicepValue<KustoClusterPublicIPType> PublicIPType 
    {
        get { Initialize(); return _publicIPType!; }
        set { Initialize(); _publicIPType!.Assign(value); }
    }
    private BicepValue<KustoClusterPublicIPType>? _publicIPType;

    /// <summary>
    /// Public network access to the cluster is enabled by default. When
    /// disabled, only private endpoint connection to the cluster is allowed.
    /// </summary>
    public BicepValue<KustoClusterPublicNetworkAccess> PublicNetworkAccess 
    {
        get { Initialize(); return _publicNetworkAccess!; }
        set { Initialize(); _publicNetworkAccess!.Assign(value); }
    }
    private BicepValue<KustoClusterPublicNetworkAccess>? _publicNetworkAccess;

    /// <summary>
    /// Whether or not to restrict outbound network access.  Value is optional
    /// but if passed in, must be &apos;Enabled&apos; or &apos;Disabled&apos;.
    /// </summary>
    public BicepValue<KustoClusterNetworkAccessFlag> RestrictOutboundNetworkAccess 
    {
        get { Initialize(); return _restrictOutboundNetworkAccess!; }
        set { Initialize(); _restrictOutboundNetworkAccess!.Assign(value); }
    }
    private BicepValue<KustoClusterNetworkAccessFlag>? _restrictOutboundNetworkAccess;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// The cluster&apos;s external tenants.
    /// </summary>
    public BicepList<KustoClusterTrustedExternalTenant> TrustedExternalTenants 
    {
        get { Initialize(); return _trustedExternalTenants!; }
        set { Initialize(); _trustedExternalTenants!.Assign(value); }
    }
    private BicepList<KustoClusterTrustedExternalTenant>? _trustedExternalTenants;

    /// <summary>
    /// Virtual Cluster graduation properties.
    /// </summary>
    public BicepValue<string> VirtualClusterGraduationProperties 
    {
        get { Initialize(); return _virtualClusterGraduationProperties!; }
        set { Initialize(); _virtualClusterGraduationProperties!.Assign(value); }
    }
    private BicepValue<string>? _virtualClusterGraduationProperties;

    /// <summary>
    /// Virtual network definition.
    /// </summary>
    public KustoClusterVirtualNetworkConfiguration VirtualNetworkConfiguration 
    {
        get { Initialize(); return _virtualNetworkConfiguration!; }
        set { Initialize(); AssignOrReplace(ref _virtualNetworkConfiguration, value); }
    }
    private KustoClusterVirtualNetworkConfiguration? _virtualNetworkConfiguration;

    /// <summary>
    /// The availability zones of the cluster.
    /// </summary>
    public BicepList<string> Zones 
    {
        get { Initialize(); return _zones!; }
        set { Initialize(); _zones!.Assign(value); }
    }
    private BicepList<string>? _zones;

    /// <summary>
    /// The cluster URI.
    /// </summary>
    public BicepValue<Uri> ClusterUri 
    {
        get { Initialize(); return _clusterUri!; }
    }
    private BicepValue<Uri>? _clusterUri;

    /// <summary>
    /// The cluster data ingestion URI.
    /// </summary>
    public BicepValue<Uri> DataIngestionUri 
    {
        get { Initialize(); return _dataIngestionUri!; }
    }
    private BicepValue<Uri>? _dataIngestionUri;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Properties of the peer cluster involved in a migration to/from this
    /// cluster.
    /// </summary>
    public MigrationClusterProperties MigrationCluster 
    {
        get { Initialize(); return _migrationCluster!; }
    }
    private MigrationClusterProperties? _migrationCluster;

    /// <summary>
    /// A list of private endpoint connections.
    /// </summary>
    public BicepList<KustoPrivateEndpointConnection> PrivateEndpointConnections 
    {
        get { Initialize(); return _privateEndpointConnections!; }
    }
    private BicepList<KustoPrivateEndpointConnection>? _privateEndpointConnections;

    /// <summary>
    /// The provisioned state of the resource.
    /// </summary>
    public BicepValue<KustoProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<KustoProvisioningState>? _provisioningState;

    /// <summary>
    /// The state of the resource.
    /// </summary>
    public BicepValue<KustoClusterState> State 
    {
        get { Initialize(); return _state!; }
    }
    private BicepValue<KustoClusterState>? _state;

    /// <summary>
    /// The reason for the cluster&apos;s current state.
    /// </summary>
    public BicepValue<string> StateReason 
    {
        get { Initialize(); return _stateReason!; }
    }
    private BicepValue<string>? _stateReason;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// Indicates whether the cluster is zonal or non-zonal.
    /// </summary>
    public BicepValue<KustoClusterZoneStatus> ZoneStatus 
    {
        get { Initialize(); return _zoneStatus!; }
    }
    private BicepValue<KustoClusterZoneStatus>? _zoneStatus;

    /// <summary>
    /// Creates a new KustoCluster.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the KustoCluster resource.  This can
    /// be used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the KustoCluster.</param>
    public KustoCluster(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Kusto/clusters", resourceVersion ?? "2024-04-13")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of KustoCluster.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"], isRequired: true);
        _sku = DefineModelProperty<KustoSku>("Sku", ["sku"], isRequired: true);
        _acceptedAudiences = DefineListProperty<AcceptedAudience>("AcceptedAudiences", ["properties", "acceptedAudiences"]);
        _allowedFqdnList = DefineListProperty<string>("AllowedFqdnList", ["properties", "allowedFqdnList"]);
        _allowedIPRangeList = DefineListProperty<string>("AllowedIPRangeList", ["properties", "allowedIpRangeList"]);
        _calloutPolicies = DefineListProperty<KustoCalloutPolicy>("CalloutPolicies", ["properties", "calloutPolicies"]);
        _engineType = DefineProperty<KustoClusterEngineType>("EngineType", ["properties", "engineType"]);
        _identity = DefineModelProperty<ManagedServiceIdentity>("Identity", ["identity"]);
        _isAutoStopEnabled = DefineProperty<bool>("IsAutoStopEnabled", ["properties", "enableAutoStop"]);
        _isDiskEncryptionEnabled = DefineProperty<bool>("IsDiskEncryptionEnabled", ["properties", "enableDiskEncryption"]);
        _isDoubleEncryptionEnabled = DefineProperty<bool>("IsDoubleEncryptionEnabled", ["properties", "enableDoubleEncryption"]);
        _isPurgeEnabled = DefineProperty<bool>("IsPurgeEnabled", ["properties", "enablePurge"]);
        _isStreamingIngestEnabled = DefineProperty<bool>("IsStreamingIngestEnabled", ["properties", "enableStreamingIngest"]);
        _keyVaultProperties = DefineModelProperty<KustoKeyVaultProperties>("KeyVaultProperties", ["properties", "keyVaultProperties"]);
        _languageExtensionsValue = DefineListProperty<KustoLanguageExtension>("LanguageExtensionsValue", ["properties", "languageExtensions", "value"]);
        _optimizedAutoscale = DefineModelProperty<OptimizedAutoscale>("OptimizedAutoscale", ["properties", "optimizedAutoscale"]);
        _publicIPType = DefineProperty<KustoClusterPublicIPType>("PublicIPType", ["properties", "publicIPType"]);
        _publicNetworkAccess = DefineProperty<KustoClusterPublicNetworkAccess>("PublicNetworkAccess", ["properties", "publicNetworkAccess"]);
        _restrictOutboundNetworkAccess = DefineProperty<KustoClusterNetworkAccessFlag>("RestrictOutboundNetworkAccess", ["properties", "restrictOutboundNetworkAccess"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
        _trustedExternalTenants = DefineListProperty<KustoClusterTrustedExternalTenant>("TrustedExternalTenants", ["properties", "trustedExternalTenants"]);
        _virtualClusterGraduationProperties = DefineProperty<string>("VirtualClusterGraduationProperties", ["properties", "virtualClusterGraduationProperties"]);
        _virtualNetworkConfiguration = DefineModelProperty<KustoClusterVirtualNetworkConfiguration>("VirtualNetworkConfiguration", ["properties", "virtualNetworkConfiguration"]);
        _zones = DefineListProperty<string>("Zones", ["zones"]);
        _clusterUri = DefineProperty<Uri>("ClusterUri", ["properties", "uri"], isOutput: true);
        _dataIngestionUri = DefineProperty<Uri>("DataIngestionUri", ["properties", "dataIngestionUri"], isOutput: true);
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _migrationCluster = DefineModelProperty<MigrationClusterProperties>("MigrationCluster", ["properties", "migrationCluster"], isOutput: true);
        _privateEndpointConnections = DefineListProperty<KustoPrivateEndpointConnection>("PrivateEndpointConnections", ["properties", "privateEndpointConnections"], isOutput: true);
        _provisioningState = DefineProperty<KustoProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _state = DefineProperty<KustoClusterState>("State", ["properties", "state"], isOutput: true);
        _stateReason = DefineProperty<string>("StateReason", ["properties", "stateReason"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
        _zoneStatus = DefineProperty<KustoClusterZoneStatus>("ZoneStatus", ["properties", "zoneStatus"], isOutput: true);
    }

    /// <summary>
    /// Supported KustoCluster resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-04-13.
        /// </summary>
        public static readonly string V2024_04_13 = "2024-04-13";

        /// <summary>
        /// 2023-08-15.
        /// </summary>
        public static readonly string V2023_08_15 = "2023-08-15";

        /// <summary>
        /// 2023-05-02.
        /// </summary>
        public static readonly string V2023_05_02 = "2023-05-02";

        /// <summary>
        /// 2022-12-29.
        /// </summary>
        public static readonly string V2022_12_29 = "2022-12-29";

        /// <summary>
        /// 2022-11-11.
        /// </summary>
        public static readonly string V2022_11_11 = "2022-11-11";

        /// <summary>
        /// 2022-07-07.
        /// </summary>
        public static readonly string V2022_07_07 = "2022-07-07";

        /// <summary>
        /// 2022-02-01.
        /// </summary>
        public static readonly string V2022_02_01 = "2022-02-01";

        /// <summary>
        /// 2021-08-27.
        /// </summary>
        public static readonly string V2021_08_27 = "2021-08-27";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2020-09-18.
        /// </summary>
        public static readonly string V2020_09_18 = "2020-09-18";

        /// <summary>
        /// 2020-06-14.
        /// </summary>
        public static readonly string V2020_06_14 = "2020-06-14";

        /// <summary>
        /// 2020-02-15.
        /// </summary>
        public static readonly string V2020_02_15 = "2020-02-15";

        /// <summary>
        /// 2019-11-09.
        /// </summary>
        public static readonly string V2019_11_09 = "2019-11-09";

        /// <summary>
        /// 2019-09-07.
        /// </summary>
        public static readonly string V2019_09_07 = "2019-09-07";

        /// <summary>
        /// 2019-05-15.
        /// </summary>
        public static readonly string V2019_05_15 = "2019-05-15";

        /// <summary>
        /// 2019-01-21.
        /// </summary>
        public static readonly string V2019_01_21 = "2019-01-21";
    }

    /// <summary>
    /// Creates a reference to an existing KustoCluster.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the KustoCluster resource.  This can
    /// be used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the KustoCluster.</param>
    /// <returns>The existing KustoCluster resource.</returns>
    public static KustoCluster FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
