// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Kusto;

/// <summary>
/// KustoAttachedDatabaseConfiguration.
/// </summary>
public partial class KustoAttachedDatabaseConfiguration : ProvisionableResource
{
    /// <summary>
    /// The name of the attached database configuration.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// The resource id of the cluster where the databases you would like to
    /// attach reside.
    /// </summary>
    public BicepValue<ResourceIdentifier> ClusterResourceId 
    {
        get { Initialize(); return _clusterResourceId!; }
        set { Initialize(); _clusterResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _clusterResourceId;

    /// <summary>
    /// The name of the database which you would like to attach, use * if you
    /// want to follow all current and future databases.
    /// </summary>
    public BicepValue<string> DatabaseName 
    {
        get { Initialize(); return _databaseName!; }
        set { Initialize(); _databaseName!.Assign(value); }
    }
    private BicepValue<string>? _databaseName;

    /// <summary>
    /// Overrides the original database name. Relevant only when attaching to a
    /// specific database.
    /// </summary>
    public BicepValue<string> DatabaseNameOverride 
    {
        get { Initialize(); return _databaseNameOverride!; }
        set { Initialize(); _databaseNameOverride!.Assign(value); }
    }
    private BicepValue<string>? _databaseNameOverride;

    /// <summary>
    /// Adds a prefix to the attached databases name. When following an entire
    /// cluster, that prefix would be added to all of the databases original
    /// names from leader cluster.
    /// </summary>
    public BicepValue<string> DatabaseNamePrefix 
    {
        get { Initialize(); return _databaseNamePrefix!; }
        set { Initialize(); _databaseNamePrefix!.Assign(value); }
    }
    private BicepValue<string>? _databaseNamePrefix;

    /// <summary>
    /// The default principals modification kind.
    /// </summary>
    public BicepValue<KustoDatabaseDefaultPrincipalsModificationKind> DefaultPrincipalsModificationKind 
    {
        get { Initialize(); return _defaultPrincipalsModificationKind!; }
        set { Initialize(); _defaultPrincipalsModificationKind!.Assign(value); }
    }
    private BicepValue<KustoDatabaseDefaultPrincipalsModificationKind>? _defaultPrincipalsModificationKind;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Table level sharing specifications.
    /// </summary>
    public KustoDatabaseTableLevelSharingProperties TableLevelSharingProperties 
    {
        get { Initialize(); return _tableLevelSharingProperties!; }
        set { Initialize(); AssignOrReplace(ref _tableLevelSharingProperties, value); }
    }
    private KustoDatabaseTableLevelSharingProperties? _tableLevelSharingProperties;

    /// <summary>
    /// The list of databases from the clusterResourceId which are currently
    /// attached to the cluster.
    /// </summary>
    public BicepList<string> AttachedDatabaseNames 
    {
        get { Initialize(); return _attachedDatabaseNames!; }
    }
    private BicepList<string>? _attachedDatabaseNames;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// The provisioned state of the resource.
    /// </summary>
    public BicepValue<KustoProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<KustoProvisioningState>? _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent KustoCluster.
    /// </summary>
    public KustoCluster? Parent
    {
        get { Initialize(); return _parent!.Value; }
        set { Initialize(); _parent!.Value = value; }
    }
    private ResourceReference<KustoCluster>? _parent;

    /// <summary>
    /// Creates a new KustoAttachedDatabaseConfiguration.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the KustoAttachedDatabaseConfiguration
    /// resource.  This can be used to refer to the resource in expressions,
    /// but is not the Azure name of the resource.  This value can contain
    /// letters, numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the KustoAttachedDatabaseConfiguration.</param>
    public KustoAttachedDatabaseConfiguration(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Kusto/clusters/attachedDatabaseConfigurations", resourceVersion ?? "2024-04-13")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// KustoAttachedDatabaseConfiguration.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _clusterResourceId = DefineProperty<ResourceIdentifier>("ClusterResourceId", ["properties", "clusterResourceId"]);
        _databaseName = DefineProperty<string>("DatabaseName", ["properties", "databaseName"]);
        _databaseNameOverride = DefineProperty<string>("DatabaseNameOverride", ["properties", "databaseNameOverride"]);
        _databaseNamePrefix = DefineProperty<string>("DatabaseNamePrefix", ["properties", "databaseNamePrefix"]);
        _defaultPrincipalsModificationKind = DefineProperty<KustoDatabaseDefaultPrincipalsModificationKind>("DefaultPrincipalsModificationKind", ["properties", "defaultPrincipalsModificationKind"]);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _tableLevelSharingProperties = DefineModelProperty<KustoDatabaseTableLevelSharingProperties>("TableLevelSharingProperties", ["properties", "tableLevelSharingProperties"]);
        _attachedDatabaseNames = DefineListProperty<string>("AttachedDatabaseNames", ["properties", "attachedDatabaseNames"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _provisioningState = DefineProperty<KustoProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
        _parent = DefineResource<KustoCluster>("Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported KustoAttachedDatabaseConfiguration resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-04-13.
        /// </summary>
        public static readonly string V2024_04_13 = "2024-04-13";

        /// <summary>
        /// 2023-08-15.
        /// </summary>
        public static readonly string V2023_08_15 = "2023-08-15";

        /// <summary>
        /// 2023-05-02.
        /// </summary>
        public static readonly string V2023_05_02 = "2023-05-02";

        /// <summary>
        /// 2022-12-29.
        /// </summary>
        public static readonly string V2022_12_29 = "2022-12-29";

        /// <summary>
        /// 2022-11-11.
        /// </summary>
        public static readonly string V2022_11_11 = "2022-11-11";

        /// <summary>
        /// 2022-07-07.
        /// </summary>
        public static readonly string V2022_07_07 = "2022-07-07";

        /// <summary>
        /// 2022-02-01.
        /// </summary>
        public static readonly string V2022_02_01 = "2022-02-01";

        /// <summary>
        /// 2021-08-27.
        /// </summary>
        public static readonly string V2021_08_27 = "2021-08-27";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2020-09-18.
        /// </summary>
        public static readonly string V2020_09_18 = "2020-09-18";

        /// <summary>
        /// 2020-06-14.
        /// </summary>
        public static readonly string V2020_06_14 = "2020-06-14";

        /// <summary>
        /// 2020-02-15.
        /// </summary>
        public static readonly string V2020_02_15 = "2020-02-15";

        /// <summary>
        /// 2019-11-09.
        /// </summary>
        public static readonly string V2019_11_09 = "2019-11-09";

        /// <summary>
        /// 2019-09-07.
        /// </summary>
        public static readonly string V2019_09_07 = "2019-09-07";
    }

    /// <summary>
    /// Creates a reference to an existing KustoAttachedDatabaseConfiguration.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the KustoAttachedDatabaseConfiguration
    /// resource.  This can be used to refer to the resource in expressions,
    /// but is not the Azure name of the resource.  This value can contain
    /// letters, numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the KustoAttachedDatabaseConfiguration.</param>
    /// <returns>The existing KustoAttachedDatabaseConfiguration resource.</returns>
    public static KustoAttachedDatabaseConfiguration FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
