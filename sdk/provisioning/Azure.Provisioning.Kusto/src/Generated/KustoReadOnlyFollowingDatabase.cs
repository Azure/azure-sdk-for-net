// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Kusto;

/// <summary>
/// KustoReadOnlyFollowingDatabase.
/// </summary>
public partial class KustoReadOnlyFollowingDatabase : KustoDatabase
{
    /// <summary>
    /// The time the data should be kept in cache for fast queries in TimeSpan.
    /// </summary>
    public BicepValue<TimeSpan> HotCachePeriod 
    {
        get { Initialize(); return _hotCachePeriod!; }
        set { Initialize(); _hotCachePeriod!.Assign(value); }
    }
    private BicepValue<TimeSpan>? _hotCachePeriod;

    /// <summary>
    /// The name of the attached database configuration cluster.
    /// </summary>
    public BicepValue<string> AttachedDatabaseConfigurationName 
    {
        get { Initialize(); return _attachedDatabaseConfigurationName!; }
    }
    private BicepValue<string>? _attachedDatabaseConfigurationName;

    /// <summary>
    /// The origin of the following setup.
    /// </summary>
    public BicepValue<KustoDatabaseShareOrigin> DatabaseShareOrigin 
    {
        get { Initialize(); return _databaseShareOrigin!; }
    }
    private BicepValue<KustoDatabaseShareOrigin>? _databaseShareOrigin;

    /// <summary>
    /// The name of the leader cluster.
    /// </summary>
    public BicepValue<string> LeaderClusterResourceId 
    {
        get { Initialize(); return _leaderClusterResourceId!; }
    }
    private BicepValue<string>? _leaderClusterResourceId;

    /// <summary>
    /// The original database name, before databaseNameOverride or
    /// databaseNamePrefix where applied.
    /// </summary>
    public BicepValue<string> OriginalDatabaseName 
    {
        get { Initialize(); return _originalDatabaseName!; }
    }
    private BicepValue<string>? _originalDatabaseName;

    /// <summary>
    /// The principals modification kind of the database.
    /// </summary>
    public BicepValue<KustoDatabasePrincipalsModificationKind> PrincipalsModificationKind 
    {
        get { Initialize(); return _principalsModificationKind!; }
    }
    private BicepValue<KustoDatabasePrincipalsModificationKind>? _principalsModificationKind;

    /// <summary>
    /// The provisioned state of the resource.
    /// </summary>
    public BicepValue<KustoProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<KustoProvisioningState>? _provisioningState;

    /// <summary>
    /// The time the data should be kept before it stops being accessible to
    /// queries in TimeSpan.
    /// </summary>
    public BicepValue<TimeSpan> SoftDeletePeriod 
    {
        get { Initialize(); return _softDeletePeriod!; }
    }
    private BicepValue<TimeSpan>? _softDeletePeriod;

    /// <summary>
    /// The database size - the total size of compressed data and index in
    /// bytes.
    /// </summary>
    public BicepValue<float> StatisticsSize 
    {
        get { Initialize(); return _statisticsSize!; }
    }
    private BicepValue<float>? _statisticsSize;

    /// <summary>
    /// The starting date and time of the suspension state.
    /// </summary>
    public BicepValue<DateTimeOffset> SuspensionStartOn 
    {
        get { Initialize(); return _suspensionStartOn!; }
    }
    private BicepValue<DateTimeOffset>? _suspensionStartOn;

    /// <summary>
    /// Table level sharing specifications.
    /// </summary>
    public KustoDatabaseTableLevelSharingProperties TableLevelSharingProperties 
    {
        get { Initialize(); return _tableLevelSharingProperties!; }
    }
    private KustoDatabaseTableLevelSharingProperties? _tableLevelSharingProperties;

    /// <summary>
    /// Creates a new KustoReadOnlyFollowingDatabase.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the KustoReadOnlyFollowingDatabase
    /// resource.  This can be used to refer to the resource in expressions,
    /// but is not the Azure name of the resource.  This value can contain
    /// letters, numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the KustoReadOnlyFollowingDatabase.</param>
    public KustoReadOnlyFollowingDatabase(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, resourceVersion)
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// KustoReadOnlyFollowingDatabase.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        DefineProperty<string>("kind", ["kind"], defaultValue: "ReadOnlyFollowing");
        _hotCachePeriod = DefineProperty<TimeSpan>("HotCachePeriod", ["properties", "hotCachePeriod"], format: "P");
        _attachedDatabaseConfigurationName = DefineProperty<string>("AttachedDatabaseConfigurationName", ["properties", "attachedDatabaseConfigurationName"], isOutput: true);
        _databaseShareOrigin = DefineProperty<KustoDatabaseShareOrigin>("DatabaseShareOrigin", ["properties", "databaseShareOrigin"], isOutput: true);
        _leaderClusterResourceId = DefineProperty<string>("LeaderClusterResourceId", ["properties", "leaderClusterResourceId"], isOutput: true);
        _originalDatabaseName = DefineProperty<string>("OriginalDatabaseName", ["properties", "originalDatabaseName"], isOutput: true);
        _principalsModificationKind = DefineProperty<KustoDatabasePrincipalsModificationKind>("PrincipalsModificationKind", ["properties", "principalsModificationKind"], isOutput: true);
        _provisioningState = DefineProperty<KustoProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _softDeletePeriod = DefineProperty<TimeSpan>("SoftDeletePeriod", ["properties", "softDeletePeriod"], isOutput: true, format: "P");
        _statisticsSize = DefineProperty<float>("StatisticsSize", ["properties", "statistics", "size"], isOutput: true);
        _suspensionStartOn = DefineProperty<DateTimeOffset>("SuspensionStartOn", ["properties", "suspensionDetails", "suspensionStartDate"], isOutput: true);
        _tableLevelSharingProperties = DefineModelProperty<KustoDatabaseTableLevelSharingProperties>("TableLevelSharingProperties", ["properties", "tableLevelSharingProperties"], isOutput: true);
    }
}
