// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Kusto;

/// <summary>
/// SandboxCustomImage.
/// </summary>
public partial class SandboxCustomImage : ProvisionableResource
{
    /// <summary>
    /// The name of the sandbox custom image.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// The base image name on which the custom image is built on top of. It
    /// can be one of the LanguageExtensionImageName (e.g.:
    /// &apos;Python3_10_8&apos;, &apos;Python3_10_8_DL&apos;) or the name of
    /// an existing custom image. Either this property or languageVersion
    /// should be specified.
    /// </summary>
    public BicepValue<string> BaseImageName 
    {
        get { Initialize(); return _baseImageName!; }
        set { Initialize(); _baseImageName!.Assign(value); }
    }
    private BicepValue<string>? _baseImageName;

    /// <summary>
    /// The language name, for example Python.
    /// </summary>
    public BicepValue<SandboxCustomImageLanguage> Language 
    {
        get { Initialize(); return _language!; }
        set { Initialize(); _language!.Assign(value); }
    }
    private BicepValue<SandboxCustomImageLanguage>? _language;

    /// <summary>
    /// The version of the language. Either this property or baseImageName
    /// should be specified.
    /// </summary>
    public BicepValue<string> LanguageVersion 
    {
        get { Initialize(); return _languageVersion!; }
        set { Initialize(); _languageVersion!.Assign(value); }
    }
    private BicepValue<string>? _languageVersion;

    /// <summary>
    /// The requirements file content.
    /// </summary>
    public BicepValue<string> RequirementsFileContent 
    {
        get { Initialize(); return _requirementsFileContent!; }
        set { Initialize(); _requirementsFileContent!.Assign(value); }
    }
    private BicepValue<string>? _requirementsFileContent;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// The provisioned state of the resource.
    /// </summary>
    public BicepValue<KustoProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<KustoProvisioningState>? _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent KustoCluster.
    /// </summary>
    public KustoCluster? Parent
    {
        get { Initialize(); return _parent!.Value; }
        set { Initialize(); _parent!.Value = value; }
    }
    private ResourceReference<KustoCluster>? _parent;

    /// <summary>
    /// Creates a new SandboxCustomImage.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the SandboxCustomImage resource.  This
    /// can be used to refer to the resource in expressions, but is not the
    /// Azure name of the resource.  This value can contain letters, numbers,
    /// and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the SandboxCustomImage.</param>
    public SandboxCustomImage(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Kusto/clusters/sandboxCustomImages", resourceVersion ?? "2024-04-13")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of SandboxCustomImage.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _baseImageName = DefineProperty<string>("BaseImageName", ["properties", "baseImageName"]);
        _language = DefineProperty<SandboxCustomImageLanguage>("Language", ["properties", "language"]);
        _languageVersion = DefineProperty<string>("LanguageVersion", ["properties", "languageVersion"]);
        _requirementsFileContent = DefineProperty<string>("RequirementsFileContent", ["properties", "requirementsFileContent"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _provisioningState = DefineProperty<KustoProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
        _parent = DefineResource<KustoCluster>("Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported SandboxCustomImage resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-04-13.
        /// </summary>
        public static readonly string V2024_04_13 = "2024-04-13";

        /// <summary>
        /// 2023-08-15.
        /// </summary>
        public static readonly string V2023_08_15 = "2023-08-15";
    }

    /// <summary>
    /// Creates a reference to an existing SandboxCustomImage.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the SandboxCustomImage resource.  This
    /// can be used to refer to the resource in expressions, but is not the
    /// Azure name of the resource.  This value can contain letters, numbers,
    /// and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the SandboxCustomImage.</param>
    /// <returns>The existing SandboxCustomImage resource.</returns>
    public static SandboxCustomImage FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
