// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Kusto;

/// <summary>
/// KustoCosmosDBDataConnection.
/// </summary>
public partial class KustoCosmosDBDataConnection : KustoDataConnection
{
    /// <summary>
    /// The resource ID of the Cosmos DB account used to create the data
    /// connection.
    /// </summary>
    public BicepValue<ResourceIdentifier> CosmosDBAccountResourceId 
    {
        get { Initialize(); return _cosmosDBAccountResourceId!; }
        set { Initialize(); _cosmosDBAccountResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _cosmosDBAccountResourceId;

    /// <summary>
    /// The name of an existing container in the Cosmos DB database.
    /// </summary>
    public BicepValue<string> CosmosDBContainer 
    {
        get { Initialize(); return _cosmosDBContainer!; }
        set { Initialize(); _cosmosDBContainer!.Assign(value); }
    }
    private BicepValue<string>? _cosmosDBContainer;

    /// <summary>
    /// The name of an existing database in the Cosmos DB account.
    /// </summary>
    public BicepValue<string> CosmosDBDatabase 
    {
        get { Initialize(); return _cosmosDBDatabase!; }
        set { Initialize(); _cosmosDBDatabase!.Assign(value); }
    }
    private BicepValue<string>? _cosmosDBDatabase;

    /// <summary>
    /// The resource ID of a managed system or user-assigned identity. The
    /// identity is used to authenticate with Cosmos DB.
    /// </summary>
    public BicepValue<ResourceIdentifier> ManagedIdentityResourceId 
    {
        get { Initialize(); return _managedIdentityResourceId!; }
        set { Initialize(); _managedIdentityResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _managedIdentityResourceId;

    /// <summary>
    /// The name of an existing mapping rule to use when ingesting the
    /// retrieved data.
    /// </summary>
    public BicepValue<string> MappingRuleName 
    {
        get { Initialize(); return _mappingRuleName!; }
        set { Initialize(); _mappingRuleName!.Assign(value); }
    }
    private BicepValue<string>? _mappingRuleName;

    /// <summary>
    /// Optional. If defined, the data connection retrieves Cosmos DB documents
    /// created or updated after the specified retrieval start date.
    /// </summary>
    public BicepValue<DateTimeOffset> RetrievalStartOn 
    {
        get { Initialize(); return _retrievalStartOn!; }
        set { Initialize(); _retrievalStartOn!.Assign(value); }
    }
    private BicepValue<DateTimeOffset>? _retrievalStartOn;

    /// <summary>
    /// The case-sensitive name of the existing target table in your cluster.
    /// Retrieved data is ingested into this table.
    /// </summary>
    public BicepValue<string> TableName 
    {
        get { Initialize(); return _tableName!; }
        set { Initialize(); _tableName!.Assign(value); }
    }
    private BicepValue<string>? _tableName;

    /// <summary>
    /// The object ID of the managed identity resource.
    /// </summary>
    public BicepValue<Guid> ManagedIdentityObjectId 
    {
        get { Initialize(); return _managedIdentityObjectId!; }
    }
    private BicepValue<Guid>? _managedIdentityObjectId;

    /// <summary>
    /// The provisioned state of the resource.
    /// </summary>
    public BicepValue<KustoProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<KustoProvisioningState>? _provisioningState;

    /// <summary>
    /// Creates a new KustoCosmosDBDataConnection.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the KustoCosmosDBDataConnection
    /// resource.  This can be used to refer to the resource in expressions,
    /// but is not the Azure name of the resource.  This value can contain
    /// letters, numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the KustoCosmosDBDataConnection.</param>
    public KustoCosmosDBDataConnection(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, resourceVersion)
    {
    }

    /// <summary>
    /// Define all the provisionable properties of KustoCosmosDBDataConnection.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        DefineProperty<string>("kind", ["kind"], defaultValue: "CosmosDb");
        _cosmosDBAccountResourceId = DefineProperty<ResourceIdentifier>("CosmosDBAccountResourceId", ["properties", "cosmosDbAccountResourceId"]);
        _cosmosDBContainer = DefineProperty<string>("CosmosDBContainer", ["properties", "cosmosDbContainer"]);
        _cosmosDBDatabase = DefineProperty<string>("CosmosDBDatabase", ["properties", "cosmosDbDatabase"]);
        _managedIdentityResourceId = DefineProperty<ResourceIdentifier>("ManagedIdentityResourceId", ["properties", "managedIdentityResourceId"]);
        _mappingRuleName = DefineProperty<string>("MappingRuleName", ["properties", "mappingRuleName"]);
        _retrievalStartOn = DefineProperty<DateTimeOffset>("RetrievalStartOn", ["properties", "retrievalStartDate"]);
        _tableName = DefineProperty<string>("TableName", ["properties", "tableName"]);
        _managedIdentityObjectId = DefineProperty<Guid>("ManagedIdentityObjectId", ["properties", "managedIdentityObjectId"], isOutput: true);
        _provisioningState = DefineProperty<KustoProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
    }
}
