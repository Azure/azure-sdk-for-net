// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Kusto;

/// <summary>
/// KustoReadWriteDatabase.
/// </summary>
public partial class KustoReadWriteDatabase : KustoDatabase
{
    /// <summary>
    /// The time the data should be kept in cache for fast queries in TimeSpan.
    /// </summary>
    public BicepValue<TimeSpan> HotCachePeriod 
    {
        get { Initialize(); return _hotCachePeriod!; }
        set { Initialize(); _hotCachePeriod!.Assign(value); }
    }
    private BicepValue<TimeSpan>? _hotCachePeriod;

    /// <summary>
    /// KeyVault properties for the database encryption.
    /// </summary>
    public KustoKeyVaultProperties KeyVaultProperties 
    {
        get { Initialize(); return _keyVaultProperties!; }
        set { Initialize(); AssignOrReplace(ref _keyVaultProperties, value); }
    }
    private KustoKeyVaultProperties? _keyVaultProperties;

    /// <summary>
    /// The time the data should be kept before it stops being accessible to
    /// queries in TimeSpan.
    /// </summary>
    public BicepValue<TimeSpan> SoftDeletePeriod 
    {
        get { Initialize(); return _softDeletePeriod!; }
        set { Initialize(); _softDeletePeriod!.Assign(value); }
    }
    private BicepValue<TimeSpan>? _softDeletePeriod;

    /// <summary>
    /// Indicates whether the database is followed.
    /// </summary>
    public BicepValue<bool> IsFollowed 
    {
        get { Initialize(); return _isFollowed!; }
    }
    private BicepValue<bool>? _isFollowed;

    /// <summary>
    /// The provisioned state of the resource.
    /// </summary>
    public BicepValue<KustoProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<KustoProvisioningState>? _provisioningState;

    /// <summary>
    /// The database size - the total size of compressed data and index in
    /// bytes.
    /// </summary>
    public BicepValue<float> StatisticsSize 
    {
        get { Initialize(); return _statisticsSize!; }
    }
    private BicepValue<float>? _statisticsSize;

    /// <summary>
    /// The starting date and time of the suspension state.
    /// </summary>
    public BicepValue<DateTimeOffset> SuspensionStartOn 
    {
        get { Initialize(); return _suspensionStartOn!; }
    }
    private BicepValue<DateTimeOffset>? _suspensionStartOn;

    /// <summary>
    /// Creates a new KustoReadWriteDatabase.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the KustoReadWriteDatabase resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the KustoReadWriteDatabase.</param>
    public KustoReadWriteDatabase(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, resourceVersion)
    {
    }

    /// <summary>
    /// Define all the provisionable properties of KustoReadWriteDatabase.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        DefineProperty<string>("kind", ["kind"], defaultValue: "ReadWrite");
        _hotCachePeriod = DefineProperty<TimeSpan>("HotCachePeriod", ["properties", "hotCachePeriod"], format: "P");
        _keyVaultProperties = DefineModelProperty<KustoKeyVaultProperties>("KeyVaultProperties", ["properties", "keyVaultProperties"]);
        _softDeletePeriod = DefineProperty<TimeSpan>("SoftDeletePeriod", ["properties", "softDeletePeriod"], format: "P");
        _isFollowed = DefineProperty<bool>("IsFollowed", ["properties", "isFollowed"], isOutput: true);
        _provisioningState = DefineProperty<KustoProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _statisticsSize = DefineProperty<float>("StatisticsSize", ["properties", "statistics", "size"], isOutput: true);
        _suspensionStartOn = DefineProperty<DateTimeOffset>("SuspensionStartOn", ["properties", "suspensionDetails", "suspensionStartDate"], isOutput: true);
    }
}
