// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using System;
using System.ComponentModel;

namespace Azure.Provisioning.Kusto;

/// <summary>
/// Built-in Kusto roles that you can assign to users, groups, service
/// principals, and managed identities.
/// </summary>
/// <param name="value">The ID value of the role.</param>
public readonly struct KustoBuiltInRole(string value) : IEquatable<KustoBuiltInRole>
{
    private readonly string _value = value ?? throw new ArgumentNullException(nameof(value));

    /// <summary>
    /// Allows administrators to manage clusters, databases, and principals.
    /// </summary>
    public static KustoBuiltInRole AzureDataExplorerClusterAdministrator { get; } = new(AzureDataExplorerClusterAdministratorValue);
    internal const string AzureDataExplorerClusterAdministratorValue = "27711ba7-2646-4b87-9f78-cc4963fe6b36";

    /// <summary>
    /// Allows administrators to manage databases and principals within a specific database.
    /// </summary>
    public static KustoBuiltInRole AzureDataExplorerDatabaseAdministrator { get; } = new(AzureDataExplorerDatabaseAdministratorValue);
    internal const string AzureDataExplorerDatabaseAdministratorValue = "b4dcf68e-fa2e-472a-92a6-7dfeb9b96e20";

    /// <summary>
    /// Allows users to read and query data in databases.
    /// </summary>
    public static KustoBuiltInRole AzureDataExplorerDatabaseUser { get; } = new(AzureDataExplorerDatabaseUserValue);
    internal const string AzureDataExplorerDatabaseUserValue = "9dd19a7c-2cd4-4f90-b13b-8dfe5c5c8e3c";

    /// <summary>
    /// Allows read-only access to databases.
    /// </summary>
    public static KustoBuiltInRole AzureDataExplorerDatabaseViewer { get; } = new(AzureDataExplorerDatabaseViewerValue);
    internal const string AzureDataExplorerDatabaseViewerValue = "fd1bd6a4-7e4f-462e-b0b2-d8b9b54ca5b7";

    /// <summary>
    /// Returns the name of the built-in role.
    /// </summary>
    /// <param name="value">The role to get the name of.</param>
    /// <returns>The name of the role.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public static string GetBuiltInRoleName(KustoBuiltInRole value) =>
        value._value switch
        {
            AzureDataExplorerClusterAdministratorValue => nameof(AzureDataExplorerClusterAdministrator),
            AzureDataExplorerDatabaseAdministratorValue => nameof(AzureDataExplorerDatabaseAdministrator),
            AzureDataExplorerDatabaseUserValue => nameof(AzureDataExplorerDatabaseUser),
            AzureDataExplorerDatabaseViewerValue => nameof(AzureDataExplorerDatabaseViewer),
            _ => value._value
        };

    /// <summary>
    /// Compares two <see cref="KustoBuiltInRole"/> values for equality.
    /// </summary>
    /// <param name="other">The other value to compare with this instance.</param>
    /// <returns>True if the values are equal; otherwise, false.</returns>
    public bool Equals(KustoBuiltInRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

    /// <inheritdoc/>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override bool Equals(object? obj) => obj is KustoBuiltInRole other && Equals(other);

    /// <inheritdoc/>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override int GetHashCode() => _value?.GetHashCode() ?? 0;

    /// <summary>
    /// Converts the value to a string.
    /// </summary>
    /// <returns>The string value of the role.</returns>
    public override string ToString() => _value;

    /// <summary>
    /// Determines if two <see cref="KustoBuiltInRole"/> values are the same.
    /// </summary>
    /// <param name="left">The first value to compare.</param>
    /// <param name="right">The second value to compare.</param>
    /// <returns>True if the values are the same; otherwise, false.</returns>
    public static bool operator ==(KustoBuiltInRole left, KustoBuiltInRole right) => left.Equals(right);

    /// <summary>
    /// Determines if two <see cref="KustoBuiltInRole"/> values are different.
    /// </summary>
    /// <param name="left">The first value to compare.</param>
    /// <param name="right">The second value to compare.</param>
    /// <returns>True if the values are different; otherwise, false.</returns>
    public static bool operator !=(KustoBuiltInRole left, KustoBuiltInRole right) => !left.Equals(right);

    /// <summary>
    /// Converts a string to a <see cref="KustoBuiltInRole"/>.
    /// </summary>
    /// <param name="value">The string value to convert.</param>
    /// <returns>The <see cref="KustoBuiltInRole"/> representation of the value.</returns>
    public static implicit operator KustoBuiltInRole(string value) => new(value);
}