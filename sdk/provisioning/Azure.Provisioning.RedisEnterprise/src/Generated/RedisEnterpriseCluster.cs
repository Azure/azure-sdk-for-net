// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.RedisEnterprise;

/// <summary>
/// RedisEnterpriseCluster.
/// </summary>
public partial class RedisEnterpriseCluster : ProvisionableResource
{
    /// <summary>
    /// The name of the RedisEnterprise cluster.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// The SKU to create, which affects price, performance, and features.
    /// </summary>
    public RedisEnterpriseSku Sku 
    {
        get { Initialize(); return _sku!; }
        set { Initialize(); AssignOrReplace(ref _sku, value); }
    }
    private RedisEnterpriseSku? _sku;

    /// <summary>
    /// All Customer-managed key encryption properties for the resource. Set
    /// this to an empty object to use Microsoft-managed key encryption.
    /// </summary>
    public RedisEnterpriseCustomerManagedKeyEncryption CustomerManagedKeyEncryption 
    {
        get { Initialize(); return _customerManagedKeyEncryption!; }
        set { Initialize(); AssignOrReplace(ref _customerManagedKeyEncryption, value); }
    }
    private RedisEnterpriseCustomerManagedKeyEncryption? _customerManagedKeyEncryption;

    /// <summary>
    /// The identity of the resource.
    /// </summary>
    public ManagedServiceIdentity Identity 
    {
        get { Initialize(); return _identity!; }
        set { Initialize(); AssignOrReplace(ref _identity, value); }
    }
    private ManagedServiceIdentity? _identity;

    /// <summary>
    /// The minimum TLS version for the cluster to support, e.g.
    /// &apos;1.2&apos;.
    /// </summary>
    public BicepValue<RedisEnterpriseTlsVersion> MinimumTlsVersion 
    {
        get { Initialize(); return _minimumTlsVersion!; }
        set { Initialize(); _minimumTlsVersion!.Assign(value); }
    }
    private BicepValue<RedisEnterpriseTlsVersion>? _minimumTlsVersion;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// The Availability Zones where this cluster will be deployed.
    /// </summary>
    public BicepList<string> Zones 
    {
        get { Initialize(); return _zones!; }
        set { Initialize(); _zones!.Assign(value); }
    }
    private BicepList<string>? _zones;

    /// <summary>
    /// DNS name of the cluster endpoint.
    /// </summary>
    public BicepValue<string> HostName 
    {
        get { Initialize(); return _hostName!; }
    }
    private BicepValue<string>? _hostName;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// List of private endpoint connections associated with the specified
    /// RedisEnterprise cluster.
    /// </summary>
    public BicepList<RedisEnterprisePrivateEndpointConnectionData> PrivateEndpointConnections 
    {
        get { Initialize(); return _privateEndpointConnections!; }
    }
    private BicepList<RedisEnterprisePrivateEndpointConnectionData>? _privateEndpointConnections;

    /// <summary>
    /// Current provisioning status of the cluster.
    /// </summary>
    public BicepValue<RedisEnterpriseProvisioningStatus> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<RedisEnterpriseProvisioningStatus>? _provisioningState;

    /// <summary>
    /// Version of redis the cluster supports, e.g. &apos;6&apos;.
    /// </summary>
    public BicepValue<string> RedisVersion 
    {
        get { Initialize(); return _redisVersion!; }
    }
    private BicepValue<string>? _redisVersion;

    /// <summary>
    /// Current resource status of the cluster.
    /// </summary>
    public BicepValue<RedisEnterpriseClusterResourceState> ResourceState 
    {
        get { Initialize(); return _resourceState!; }
    }
    private BicepValue<RedisEnterpriseClusterResourceState>? _resourceState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// Creates a new RedisEnterpriseCluster.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the RedisEnterpriseCluster resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the RedisEnterpriseCluster.</param>
    public RedisEnterpriseCluster(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Cache/redisEnterprise", resourceVersion ?? "2025-04-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of RedisEnterpriseCluster.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"], isRequired: true);
        _sku = DefineModelProperty<RedisEnterpriseSku>("Sku", ["Sku"], isRequired: true);
        _customerManagedKeyEncryption = DefineModelProperty<RedisEnterpriseCustomerManagedKeyEncryption>("CustomerManagedKeyEncryption", ["CustomerManagedKeyEncryption"]);
        _identity = DefineModelProperty<ManagedServiceIdentity>("Identity", ["Identity"]);
        _minimumTlsVersion = DefineProperty<RedisEnterpriseTlsVersion>("MinimumTlsVersion", ["MinimumTlsVersion"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
        _zones = DefineListProperty<string>("Zones", ["Zones"]);
        _hostName = DefineProperty<string>("HostName", ["HostName"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _privateEndpointConnections = DefineListProperty<RedisEnterprisePrivateEndpointConnectionData>("PrivateEndpointConnections", ["PrivateEndpointConnections"], isOutput: true);
        _provisioningState = DefineProperty<RedisEnterpriseProvisioningStatus>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _redisVersion = DefineProperty<string>("RedisVersion", ["RedisVersion"], isOutput: true);
        _resourceState = DefineProperty<RedisEnterpriseClusterResourceState>("ResourceState", ["ResourceState"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported RedisEnterpriseCluster resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-04-01.
        /// </summary>
        public static readonly string V2025_04_01 = "2025-04-01";

        /// <summary>
        /// 2024-10-01.
        /// </summary>
        public static readonly string V2024_10_01 = "2024-10-01";

        /// <summary>
        /// 2024-02-01.
        /// </summary>
        public static readonly string V2024_02_01 = "2024-02-01";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2023-07-01.
        /// </summary>
        public static readonly string V2023_07_01 = "2023-07-01";

        /// <summary>
        /// 2022-01-01.
        /// </summary>
        public static readonly string V2022_01_01 = "2022-01-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";
    }

    /// <summary>
    /// Creates a reference to an existing RedisEnterpriseCluster.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the RedisEnterpriseCluster resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the RedisEnterpriseCluster.</param>
    /// <returns>The existing RedisEnterpriseCluster resource.</returns>
    public static RedisEnterpriseCluster FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
