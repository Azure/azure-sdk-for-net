// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Expressions;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.RedisEnterprise;

/// <summary>
/// RedisEnterpriseDatabase.
/// </summary>
public partial class RedisEnterpriseDatabase : ProvisionableResource
{
    /// <summary>
    /// The name of the Redis Enterprise database.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// This property can be Enabled/Disabled to allow or deny access with the
    /// current access keys. Can be updated even after database is created.
    /// </summary>
    public BicepValue<AccessKeysAuthentication> AccessKeysAuthentication 
    {
        get { Initialize(); return _accessKeysAuthentication!; }
        set { Initialize(); _accessKeysAuthentication!.Assign(value); }
    }
    private BicepValue<AccessKeysAuthentication>? _accessKeysAuthentication;

    /// <summary>
    /// Specifies whether redis clients can connect using TLS-encrypted or
    /// plaintext redis protocols. Default is TLS-encrypted.
    /// </summary>
    public BicepValue<RedisEnterpriseClientProtocol> ClientProtocol 
    {
        get { Initialize(); return _clientProtocol!; }
        set { Initialize(); _clientProtocol!.Assign(value); }
    }
    private BicepValue<RedisEnterpriseClientProtocol>? _clientProtocol;

    /// <summary>
    /// Clustering policy - default is OSSCluster. This property must be chosen
    /// at create time, and cannot be changed without deleting the database.
    /// </summary>
    public BicepValue<RedisEnterpriseClusteringPolicy> ClusteringPolicy 
    {
        get { Initialize(); return _clusteringPolicy!; }
        set { Initialize(); _clusteringPolicy!.Assign(value); }
    }
    private BicepValue<RedisEnterpriseClusteringPolicy>? _clusteringPolicy;

    /// <summary>
    /// Option to defer upgrade when newest version is released - default is
    /// NotDeferred. Learn more: https://aka.ms/redisversionupgrade.
    /// </summary>
    public BicepValue<DeferUpgradeSetting> DeferUpgrade 
    {
        get { Initialize(); return _deferUpgrade!; }
        set { Initialize(); _deferUpgrade!.Assign(value); }
    }
    private BicepValue<DeferUpgradeSetting>? _deferUpgrade;

    /// <summary>
    /// Redis eviction policy - default is VolatileLRU.
    /// </summary>
    public BicepValue<RedisEnterpriseEvictionPolicy> EvictionPolicy 
    {
        get { Initialize(); return _evictionPolicy!; }
        set { Initialize(); _evictionPolicy!.Assign(value); }
    }
    private BicepValue<RedisEnterpriseEvictionPolicy>? _evictionPolicy;

    /// <summary>
    /// Optional set of properties to configure geo replication for this
    /// database.
    /// </summary>
    public RedisEnterpriseDatabaseGeoReplication GeoReplication 
    {
        get { Initialize(); return _geoReplication!; }
        set { Initialize(); AssignOrReplace(ref _geoReplication, value); }
    }
    private RedisEnterpriseDatabaseGeoReplication? _geoReplication;

    /// <summary>
    /// Optional set of redis modules to enable in this database - modules can
    /// only be added at creation time.
    /// </summary>
    public BicepList<RedisEnterpriseModule> Modules 
    {
        get { Initialize(); return _modules!; }
        set { Initialize(); _modules!.Assign(value); }
    }
    private BicepList<RedisEnterpriseModule>? _modules;

    /// <summary>
    /// Persistence settings.
    /// </summary>
    public RedisPersistenceSettings Persistence 
    {
        get { Initialize(); return _persistence!; }
        set { Initialize(); AssignOrReplace(ref _persistence, value); }
    }
    private RedisPersistenceSettings? _persistence;

    /// <summary>
    /// TCP port of the database endpoint. Specified at create time. Defaults
    /// to an available port.
    /// </summary>
    public BicepValue<int> Port 
    {
        get { Initialize(); return _port!; }
        set { Initialize(); _port!.Assign(value); }
    }
    private BicepValue<int>? _port;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Current provisioning status of the database.
    /// </summary>
    public BicepValue<RedisEnterpriseProvisioningStatus> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<RedisEnterpriseProvisioningStatus>? _provisioningState;

    /// <summary>
    /// Version of Redis the database is running on, e.g. &apos;6.0&apos;.
    /// </summary>
    public BicepValue<string> RedisVersion 
    {
        get { Initialize(); return _redisVersion!; }
    }
    private BicepValue<string>? _redisVersion;

    /// <summary>
    /// Current resource status of the database.
    /// </summary>
    public BicepValue<RedisEnterpriseClusterResourceState> ResourceState 
    {
        get { Initialize(); return _resourceState!; }
    }
    private BicepValue<RedisEnterpriseClusterResourceState>? _resourceState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent RedisEnterpriseCluster.
    /// </summary>
    public RedisEnterpriseCluster? Parent
    {
        get { Initialize(); return _parent!.Value; }
        set { Initialize(); _parent!.Value = value; }
    }
    private ResourceReference<RedisEnterpriseCluster>? _parent;

    /// <summary>
    /// Creates a new RedisEnterpriseDatabase.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the RedisEnterpriseDatabase resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the RedisEnterpriseDatabase.</param>
    public RedisEnterpriseDatabase(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Cache/redisEnterprise/databases", resourceVersion ?? "2025-04-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of RedisEnterpriseDatabase.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _accessKeysAuthentication = DefineProperty<AccessKeysAuthentication>("AccessKeysAuthentication", ["properties", "accessKeysAuthentication"]);
        _clientProtocol = DefineProperty<RedisEnterpriseClientProtocol>("ClientProtocol", ["properties", "clientProtocol"]);
        _clusteringPolicy = DefineProperty<RedisEnterpriseClusteringPolicy>("ClusteringPolicy", ["properties", "clusteringPolicy"]);
        _deferUpgrade = DefineProperty<DeferUpgradeSetting>("DeferUpgrade", ["properties", "deferUpgrade"]);
        _evictionPolicy = DefineProperty<RedisEnterpriseEvictionPolicy>("EvictionPolicy", ["properties", "evictionPolicy"]);
        _geoReplication = DefineModelProperty<RedisEnterpriseDatabaseGeoReplication>("GeoReplication", ["properties", "geoReplication"]);
        _modules = DefineListProperty<RedisEnterpriseModule>("Modules", ["properties", "modules"]);
        _persistence = DefineModelProperty<RedisPersistenceSettings>("Persistence", ["properties", "persistence"]);
        _port = DefineProperty<int>("Port", ["properties", "port"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _provisioningState = DefineProperty<RedisEnterpriseProvisioningStatus>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _redisVersion = DefineProperty<string>("RedisVersion", ["properties", "redisVersion"], isOutput: true);
        _resourceState = DefineProperty<RedisEnterpriseClusterResourceState>("ResourceState", ["properties", "resourceState"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
        _parent = DefineResource<RedisEnterpriseCluster>("Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported RedisEnterpriseDatabase resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-04-01.
        /// </summary>
        public static readonly string V2025_04_01 = "2025-04-01";

        /// <summary>
        /// 2024-10-01.
        /// </summary>
        public static readonly string V2024_10_01 = "2024-10-01";

        /// <summary>
        /// 2024-02-01.
        /// </summary>
        public static readonly string V2024_02_01 = "2024-02-01";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2023-07-01.
        /// </summary>
        public static readonly string V2023_07_01 = "2023-07-01";

        /// <summary>
        /// 2022-01-01.
        /// </summary>
        public static readonly string V2022_01_01 = "2022-01-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";
    }

    /// <summary>
    /// Creates a reference to an existing RedisEnterpriseDatabase.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the RedisEnterpriseDatabase resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the RedisEnterpriseDatabase.</param>
    /// <returns>The existing RedisEnterpriseDatabase resource.</returns>
    public static RedisEnterpriseDatabase FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this RedisEnterpriseDatabase resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 60, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen);

    /// <summary>
    /// Get access keys for this RedisEnterpriseDatabase resource.
    /// </summary>
    /// <returns>The keys for this RedisEnterpriseDatabase resource.</returns>
    public RedisEnterpriseDataAccessKeys GetKeys()
    {
        RedisEnterpriseDataAccessKeys key = new();
        ((IBicepValue)key).Expression = new FunctionCallExpression(new MemberExpression(new IdentifierExpression(BicepIdentifier), "listKeys"));
        return key;
    }
}
