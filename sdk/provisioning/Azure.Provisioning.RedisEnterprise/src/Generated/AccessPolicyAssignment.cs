// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.RedisEnterprise;

/// <summary>
/// AccessPolicyAssignment.
/// </summary>
public partial class AccessPolicyAssignment : ProvisionableResource
{
    /// <summary>
    /// The name of the Redis Enterprise database access policy assignment.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Name of access policy under specific access policy assignment. Only
    /// &quot;default&quot; policy is supported for now.
    /// </summary>
    public BicepValue<string> AccessPolicyName 
    {
        get { Initialize(); return _accessPolicyName!; }
        set { Initialize(); _accessPolicyName!.Assign(value); }
    }
    private BicepValue<string>? _accessPolicyName;

    /// <summary>
    /// The object ID of the user.
    /// </summary>
    public BicepValue<Guid> UserObjectId 
    {
        get { Initialize(); return _userObjectId!; }
        set { Initialize(); _userObjectId!.Assign(value); }
    }
    private BicepValue<Guid>? _userObjectId;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Current provisioning status of the access policy assignment.
    /// </summary>
    public BicepValue<RedisEnterpriseProvisioningStatus> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<RedisEnterpriseProvisioningStatus>? _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent RedisEnterpriseDatabase.
    /// </summary>
    public RedisEnterpriseDatabase? Parent
    {
        get { Initialize(); return _parent!.Value; }
        set { Initialize(); _parent!.Value = value; }
    }
    private ResourceReference<RedisEnterpriseDatabase>? _parent;

    /// <summary>
    /// Creates a new AccessPolicyAssignment.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the AccessPolicyAssignment resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the AccessPolicyAssignment.</param>
    public AccessPolicyAssignment(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Cache/redisEnterprise/databases/accessPolicyAssignments", resourceVersion ?? "2025-04-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of AccessPolicyAssignment.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _accessPolicyName = DefineProperty<string>("AccessPolicyName", ["properties", "accessPolicyName"]);
        _userObjectId = DefineProperty<Guid>("UserObjectId", ["properties", "user", "objectId"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _provisioningState = DefineProperty<RedisEnterpriseProvisioningStatus>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
        _parent = DefineResource<RedisEnterpriseDatabase>("Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported AccessPolicyAssignment resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-04-01.
        /// </summary>
        public static readonly string V2025_04_01 = "2025-04-01";

        /// <summary>
        /// 2024-10-01.
        /// </summary>
        public static readonly string V2024_10_01 = "2024-10-01";

        /// <summary>
        /// 2024-02-01.
        /// </summary>
        public static readonly string V2024_02_01 = "2024-02-01";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2023-07-01.
        /// </summary>
        public static readonly string V2023_07_01 = "2023-07-01";

        /// <summary>
        /// 2022-01-01.
        /// </summary>
        public static readonly string V2022_01_01 = "2022-01-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";
    }

    /// <summary>
    /// Creates a reference to an existing AccessPolicyAssignment.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the AccessPolicyAssignment resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the AccessPolicyAssignment.</param>
    /// <returns>The existing AccessPolicyAssignment resource.</returns>
    public static AccessPolicyAssignment FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this AccessPolicyAssignment resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 60, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers);
}
