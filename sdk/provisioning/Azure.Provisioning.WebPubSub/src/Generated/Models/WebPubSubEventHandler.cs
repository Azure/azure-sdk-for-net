// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.WebPubSub;

/// <summary>
/// Properties of event handler.
/// </summary>
public partial class WebPubSubEventHandler : ProvisioningConstruct
{
    /// <summary>
    /// Gets or sets the EventHandler URL template. You can use a predefined
    /// parameter {hub} and {event} inside the template, the value of the
    /// EventHandler URL is dynamically calculated when the client request
    /// comes in.             For example, UrlTemplate can be
    /// `http://example.com/api/{hub}/{event}`. The host part can&apos;t
    /// contains parameters.
    /// </summary>
    public BicepValue<string> UrlTemplate { get => _urlTemplate; set => _urlTemplate.Assign(value); }
    private readonly BicepValue<string> _urlTemplate;

    /// <summary>
    /// Gets or sets the matching pattern for event names.             There
    /// are 3 kind of patterns supported:                 1. &quot;*&quot;, it
    /// to matches any event name                 2. Combine multiple events
    /// with &quot;,&quot;, for example &quot;event1,event2&quot;, it matches
    /// event &quot;event1&quot; and &quot;event2&quot;                 3. The
    /// single event name, for example, &quot;event1&quot;, it matches
    /// &quot;event1&quot;
    /// </summary>
    public BicepValue<string> UserEventPattern { get => _userEventPattern; set => _userEventPattern.Assign(value); }
    private readonly BicepValue<string> _userEventPattern;

    /// <summary>
    /// Gets ot sets the list of system events.
    /// </summary>
    public BicepList<string> SystemEvents { get => _systemEvents; set => _systemEvents.Assign(value); }
    private readonly BicepList<string> _systemEvents;

    /// <summary>
    /// Upstream auth settings. If not set, no auth is used for upstream
    /// messages.
    /// </summary>
    public BicepValue<UpstreamAuthSettings> Auth { get => _auth; set => _auth.Assign(value); }
    private readonly BicepValue<UpstreamAuthSettings> _auth;

    /// <summary>
    /// Creates a new WebPubSubEventHandler.
    /// </summary>
    public WebPubSubEventHandler()
    {
        _urlTemplate = BicepValue<string>.DefineProperty(this, "UrlTemplate", ["urlTemplate"]);
        _userEventPattern = BicepValue<string>.DefineProperty(this, "UserEventPattern", ["userEventPattern"]);
        _systemEvents = BicepList<string>.DefineProperty(this, "SystemEvents", ["systemEvents"]);
        _auth = BicepValue<UpstreamAuthSettings>.DefineProperty(this, "Auth", ["auth"]);
    }
}
