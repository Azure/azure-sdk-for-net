// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.CosmosDB;

/// <summary>
/// MongoDBRoleDefinition.
/// </summary>
public partial class MongoDBRoleDefinition : Resource
{
    /// <summary>
    /// Gets the Name.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The database name for which access is being granted for this Role
    /// Definition.
    /// </summary>
    public BicepValue<string> DatabaseName { get => _databaseName; set => _databaseName.Assign(value); }
    private readonly BicepValue<string> _databaseName;

    /// <summary>
    /// Indicates whether the Role Definition was built-in or user created.
    /// </summary>
    public BicepValue<MongoDBRoleDefinitionType> DefinitionType { get => _definitionType; set => _definitionType.Assign(value); }
    private readonly BicepValue<MongoDBRoleDefinitionType> _definitionType;

    /// <summary>
    /// A set of privileges contained by the Role Definition. This will allow
    /// application of this Role Definition on the entire database account or
    /// any underlying Database / Collection. Scopes higher than Database are
    /// not enforceable as privilege.
    /// </summary>
    public BicepList<MongoDBPrivilege> Privileges { get => _privileges; set => _privileges.Assign(value); }
    private readonly BicepList<MongoDBPrivilege> _privileges;

    /// <summary>
    /// A user-friendly name for the Role Definition. Must be unique for the
    /// database account.
    /// </summary>
    public BicepValue<string> RoleName { get => _roleName; set => _roleName.Assign(value); }
    private readonly BicepValue<string> _roleName;

    /// <summary>
    /// The set of roles inherited by this Role Definition.
    /// </summary>
    public BicepList<MongoDBRole> Roles { get => _roles; set => _roles.Assign(value); }
    private readonly BicepList<MongoDBRole> _roles;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent CosmosDBAccount.
    /// </summary>
    public CosmosDBAccount? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<CosmosDBAccount> _parent;

    /// <summary>
    /// Creates a new MongoDBRoleDefinition.
    /// </summary>
    /// <param name="resourceName">Name of the MongoDBRoleDefinition.</param>
    /// <param name="resourceVersion">Version of the MongoDBRoleDefinition.</param>
    /// <param name="context">Provisioning context for this resource.</param>
    public MongoDBRoleDefinition(string resourceName, string? resourceVersion = default, ProvisioningContext? context = default)
        : base(resourceName, "Microsoft.DocumentDB/databaseAccounts/mongodbRoleDefinitions", resourceVersion, context)
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _databaseName = BicepValue<string>.DefineProperty(this, "DatabaseName", ["properties", "databaseName"]);
        _definitionType = BicepValue<MongoDBRoleDefinitionType>.DefineProperty(this, "DefinitionType", ["properties", "type"]);
        _privileges = BicepList<MongoDBPrivilege>.DefineProperty(this, "Privileges", ["properties", "privileges"]);
        _roleName = BicepValue<string>.DefineProperty(this, "RoleName", ["properties", "roleName"]);
        _roles = BicepList<MongoDBRole>.DefineProperty(this, "Roles", ["properties", "roles"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<CosmosDBAccount>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Creates a reference to an existing MongoDBRoleDefinition.
    /// </summary>
    /// <param name="resourceName">Name of the MongoDBRoleDefinition.</param>
    /// <param name="resourceVersion">Version of the MongoDBRoleDefinition.</param>
    /// <returns>The existing MongoDBRoleDefinition resource.</returns>
    public static MongoDBRoleDefinition FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
