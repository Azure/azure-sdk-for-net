// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.CosmosDB;

/// <summary>
/// CosmosDBService.
/// </summary>
public partial class CosmosDBService : Resource
{
    /// <summary>
    /// Cosmos DB service name.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Instance count for the service.
    /// </summary>
    public BicepValue<int> InstanceCount { get => _instanceCount; set => _instanceCount.Assign(value); }
    private readonly BicepValue<int> _instanceCount;

    /// <summary>
    /// Instance type for the service.
    /// </summary>
    public BicepValue<CosmosDBServiceSize> InstanceSize { get => _instanceSize; set => _instanceSize.Assign(value); }
    private readonly BicepValue<CosmosDBServiceSize> _instanceSize;

    /// <summary>
    /// ServiceType for the service.
    /// </summary>
    public BicepValue<CosmosDBServiceType> ServiceType { get => _serviceType; set => _serviceType.Assign(value); }
    private readonly BicepValue<CosmosDBServiceType> _serviceType;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Services response resource.             Please note
    /// Azure.ResourceManager.CosmosDB.Models.CosmosDBServiceProperties is the
    /// base class. According to the scenario, a derived class of the base
    /// class might need to be assigned here, or this property needs to be
    /// casted to one of the possible derived classes.             The
    /// available derived classes include
    /// Azure.ResourceManager.CosmosDB.Models.DataTransferServiceProperties,
    /// Azure.ResourceManager.CosmosDB.Models.GraphApiComputeServiceProperties,
    /// Azure.ResourceManager.CosmosDB.Models.MaterializedViewsBuilderServiceProperties
    /// and
    /// Azure.ResourceManager.CosmosDB.Models.SqlDedicatedGatewayServiceProperties.
    /// </summary>
    public BicepValue<CosmosDBServiceProperties> Properties { get => _properties; }
    private readonly BicepValue<CosmosDBServiceProperties> _properties;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent CosmosDBAccount.
    /// </summary>
    public CosmosDBAccount? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<CosmosDBAccount> _parent;

    /// <summary>
    /// Creates a new CosmosDBService.
    /// </summary>
    /// <param name="resourceName">Name of the CosmosDBService.</param>
    /// <param name="resourceVersion">Version of the CosmosDBService.</param>
    /// <param name="context">Provisioning context for this resource.</param>
    public CosmosDBService(string resourceName, string? resourceVersion = default, ProvisioningContext? context = default)
        : base(resourceName, "Microsoft.DocumentDB/databaseAccounts/services", resourceVersion, context)
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _instanceCount = BicepValue<int>.DefineProperty(this, "InstanceCount", ["properties", "instanceCount"]);
        _instanceSize = BicepValue<CosmosDBServiceSize>.DefineProperty(this, "InstanceSize", ["properties", "instanceSize"]);
        _serviceType = BicepValue<CosmosDBServiceType>.DefineProperty(this, "ServiceType", ["properties", "serviceType"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _properties = BicepValue<CosmosDBServiceProperties>.DefineProperty(this, "Properties", ["properties"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<CosmosDBAccount>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Creates a reference to an existing CosmosDBService.
    /// </summary>
    /// <param name="resourceName">Name of the CosmosDBService.</param>
    /// <param name="resourceVersion">Version of the CosmosDBService.</param>
    /// <returns>The existing CosmosDBService resource.</returns>
    public static CosmosDBService FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
