// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.CosmosDB;

/// <summary>
/// CosmosDBFirewallRule.
/// </summary>
public partial class CosmosDBFirewallRule : Resource
{
    /// <summary>
    /// The name of the mongo cluster firewall rule.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The end IP address of the mongo cluster firewall rule. Must be IPv4
    /// format.
    /// </summary>
    public BicepValue<string> EndIPAddress { get => _endIPAddress; set => _endIPAddress.Assign(value); }
    private readonly BicepValue<string> _endIPAddress;

    /// <summary>
    /// The start IP address of the mongo cluster firewall rule. Must be IPv4
    /// format.
    /// </summary>
    public BicepValue<string> StartIPAddress { get => _startIPAddress; set => _startIPAddress.Assign(value); }
    private readonly BicepValue<string> _startIPAddress;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The provisioning state of the firewall rule.
    /// </summary>
    public BicepValue<CosmosDBProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<CosmosDBProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent MongoCluster.
    /// </summary>
    public MongoCluster? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<MongoCluster> _parent;

    /// <summary>
    /// Creates a new CosmosDBFirewallRule.
    /// </summary>
    /// <param name="resourceName">Name of the CosmosDBFirewallRule.</param>
    /// <param name="resourceVersion">Version of the CosmosDBFirewallRule.</param>
    public CosmosDBFirewallRule(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.DocumentDB/mongoClusters/firewallRules", resourceVersion ?? "2024-07-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _endIPAddress = BicepValue<string>.DefineProperty(this, "EndIPAddress", ["properties", "endIpAddress"], isRequired: true);
        _startIPAddress = BicepValue<string>.DefineProperty(this, "StartIPAddress", ["properties", "startIpAddress"], isRequired: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningState = BicepValue<CosmosDBProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<MongoCluster>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported CosmosDBFirewallRule resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-07-01.
        /// </summary>
        public static readonly string V2024_07_01 = "2024-07-01";
    }

    /// <summary>
    /// Creates a reference to an existing CosmosDBFirewallRule.
    /// </summary>
    /// <param name="resourceName">Name of the CosmosDBFirewallRule.</param>
    /// <param name="resourceVersion">Version of the CosmosDBFirewallRule.</param>
    /// <returns>The existing CosmosDBFirewallRule resource.</returns>
    public static CosmosDBFirewallRule FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
