// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.CosmosDB;

/// <summary>
/// Ldap authentication method properties. This feature is in preview.
/// </summary>
public partial class AuthenticationMethodLdapProperties : ProvisioningConstruct
{
    /// <summary>
    /// Hostname of the LDAP server.
    /// </summary>
    public BicepValue<string> ServerHostname { get => _serverHostname; set => _serverHostname.Assign(value); }
    private readonly BicepValue<string> _serverHostname;

    /// <summary>
    /// Port of the LDAP server.
    /// </summary>
    public BicepValue<int> ServerPort { get => _serverPort; set => _serverPort.Assign(value); }
    private readonly BicepValue<int> _serverPort;

    /// <summary>
    /// Distinguished name of the look up user account, who can look up user
    /// details on authentication.
    /// </summary>
    public BicepValue<string> ServiceUserDistinguishedName { get => _serviceUserDistinguishedName; set => _serviceUserDistinguishedName.Assign(value); }
    private readonly BicepValue<string> _serviceUserDistinguishedName;

    /// <summary>
    /// Password of the look up user.
    /// </summary>
    public BicepValue<string> ServiceUserPassword { get => _serviceUserPassword; set => _serviceUserPassword.Assign(value); }
    private readonly BicepValue<string> _serviceUserPassword;

    /// <summary>
    /// Distinguished name of the object to start the recursive search of users
    /// from.
    /// </summary>
    public BicepValue<string> SearchBaseDistinguishedName { get => _searchBaseDistinguishedName; set => _searchBaseDistinguishedName.Assign(value); }
    private readonly BicepValue<string> _searchBaseDistinguishedName;

    /// <summary>
    /// Template to use for searching. Defaults to (cn=%s) where %s will be
    /// replaced by the username used to login.
    /// </summary>
    public BicepValue<string> SearchFilterTemplate { get => _searchFilterTemplate; set => _searchFilterTemplate.Assign(value); }
    private readonly BicepValue<string> _searchFilterTemplate;

    /// <summary>
    /// Gets the server certificates.
    /// </summary>
    public BicepList<CassandraCertificate> ServerCertificates { get => _serverCertificates; set => _serverCertificates.Assign(value); }
    private readonly BicepList<CassandraCertificate> _serverCertificates;

    /// <summary>
    /// Timeout for connecting to the LDAP server in miliseconds. The default
    /// is 5000 ms.
    /// </summary>
    public BicepValue<int> ConnectionTimeoutInMs { get => _connectionTimeoutInMs; set => _connectionTimeoutInMs.Assign(value); }
    private readonly BicepValue<int> _connectionTimeoutInMs;

    /// <summary>
    /// Creates a new AuthenticationMethodLdapProperties.
    /// </summary>
    public AuthenticationMethodLdapProperties()
    {
        _serverHostname = BicepValue<string>.DefineProperty(this, "ServerHostname", ["serverHostname"]);
        _serverPort = BicepValue<int>.DefineProperty(this, "ServerPort", ["serverPort"]);
        _serviceUserDistinguishedName = BicepValue<string>.DefineProperty(this, "ServiceUserDistinguishedName", ["serviceUserDistinguishedName"]);
        _serviceUserPassword = BicepValue<string>.DefineProperty(this, "ServiceUserPassword", ["serviceUserPassword"]);
        _searchBaseDistinguishedName = BicepValue<string>.DefineProperty(this, "SearchBaseDistinguishedName", ["searchBaseDistinguishedName"]);
        _searchFilterTemplate = BicepValue<string>.DefineProperty(this, "SearchFilterTemplate", ["searchFilterTemplate"]);
        _serverCertificates = BicepList<CassandraCertificate>.DefineProperty(this, "ServerCertificates", ["serverCertificates"]);
        _connectionTimeoutInMs = BicepValue<int>.DefineProperty(this, "ConnectionTimeoutInMs", ["connectionTimeoutInMs"]);
    }
}
