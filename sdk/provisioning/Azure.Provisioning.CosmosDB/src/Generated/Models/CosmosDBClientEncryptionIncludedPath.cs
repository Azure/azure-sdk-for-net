// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.CosmosDB;

/// <summary>
/// .
/// </summary>
public partial class CosmosDBClientEncryptionIncludedPath : ProvisioningConstruct
{
    /// <summary>
    /// Path that needs to be encrypted.
    /// </summary>
    public BicepValue<string> Path { get => _path; set => _path.Assign(value); }
    private readonly BicepValue<string> _path;

    /// <summary>
    /// The identifier of the Client Encryption Key to be used to encrypt the
    /// path.
    /// </summary>
    public BicepValue<string> ClientEncryptionKeyId { get => _clientEncryptionKeyId; set => _clientEncryptionKeyId.Assign(value); }
    private readonly BicepValue<string> _clientEncryptionKeyId;

    /// <summary>
    /// The type of encryption to be performed. Eg - Deterministic, Randomized.
    /// </summary>
    public BicepValue<string> EncryptionType { get => _encryptionType; set => _encryptionType.Assign(value); }
    private readonly BicepValue<string> _encryptionType;

    /// <summary>
    /// The encryption algorithm which will be used. Eg -
    /// AEAD_AES_256_CBC_HMAC_SHA256.
    /// </summary>
    public BicepValue<string> EncryptionAlgorithm { get => _encryptionAlgorithm; set => _encryptionAlgorithm.Assign(value); }
    private readonly BicepValue<string> _encryptionAlgorithm;

    /// <summary>
    /// Creates a new CosmosDBClientEncryptionIncludedPath.
    /// </summary>
    public CosmosDBClientEncryptionIncludedPath()
    {
        _path = BicepValue<string>.DefineProperty(this, "Path", ["path"]);
        _clientEncryptionKeyId = BicepValue<string>.DefineProperty(this, "ClientEncryptionKeyId", ["clientEncryptionKeyId"]);
        _encryptionType = BicepValue<string>.DefineProperty(this, "EncryptionType", ["encryptionType"]);
        _encryptionAlgorithm = BicepValue<string>.DefineProperty(this, "EncryptionAlgorithm", ["encryptionAlgorithm"]);
    }
}
