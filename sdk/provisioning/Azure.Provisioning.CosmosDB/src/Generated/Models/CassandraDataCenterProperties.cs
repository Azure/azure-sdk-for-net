// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.CosmosDB;

/// <summary>
/// Properties of a managed Cassandra data center.
/// </summary>
public partial class CassandraDataCenterProperties : ProvisioningConstruct
{
    /// <summary>
    /// The status of the resource at the time the operation was called.
    /// </summary>
    public BicepValue<CassandraProvisioningState> ProvisioningState { get => _provisioningState; set => _provisioningState.Assign(value); }
    private readonly BicepValue<CassandraProvisioningState> _provisioningState;

    /// <summary>
    /// The region this data center should be created in.
    /// </summary>
    public BicepValue<AzureLocation> DataCenterLocation { get => _dataCenterLocation; set => _dataCenterLocation.Assign(value); }
    private readonly BicepValue<AzureLocation> _dataCenterLocation;

    /// <summary>
    /// Resource id of a subnet the nodes in this data center should have their
    /// network interfaces connected to. The subnet must be in the same region
    /// specified in &apos;dataCenterLocation&apos; and must be able to route
    /// to the subnet specified in the cluster&apos;s
    /// &apos;delegatedManagementSubnetId&apos; property. This resource id
    /// will be of the form &apos;/subscriptions/&lt;subscription
    /// id&gt;/resourceGroups/&lt;resource
    /// group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual
    /// network&gt;/subnets/&lt;subnet&gt;&apos;.
    /// </summary>
    public BicepValue<ResourceIdentifier> DelegatedSubnetId { get => _delegatedSubnetId; set => _delegatedSubnetId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _delegatedSubnetId;

    /// <summary>
    /// The number of nodes the data center should have. This is the desired
    /// number. After it is set, it may take some time for the data center to
    /// be scaled to match. To monitor the number of nodes and their status,
    /// use the fetchNodeStatus method on the cluster.
    /// </summary>
    public BicepValue<int> NodeCount { get => _nodeCount; set => _nodeCount.Assign(value); }
    private readonly BicepValue<int> _nodeCount;

    /// <summary>
    /// IP addresses for seed nodes in this data center. This is for reference.
    /// Generally you will want to use the seedNodes property on the cluster,
    /// which aggregates the seed nodes from all data centers in the cluster.
    /// </summary>
    public BicepList<CassandraDataCenterSeedNode> SeedNodes { get => _seedNodes; }
    private readonly BicepList<CassandraDataCenterSeedNode> _seedNodes;

    /// <summary>
    /// A fragment of a cassandra.yaml configuration file to be included in the
    /// cassandra.yaml for all nodes in this data center. The fragment should
    /// be Base64 encoded, and only a subset of keys are allowed.
    /// </summary>
    public BicepValue<string> Base64EncodedCassandraYamlFragment { get => _base64EncodedCassandraYamlFragment; set => _base64EncodedCassandraYamlFragment.Assign(value); }
    private readonly BicepValue<string> _base64EncodedCassandraYamlFragment;

    /// <summary>
    /// Key uri to use for encryption of managed disks. Ensure the system
    /// assigned identity of the cluster has been assigned appropriate
    /// permissions(key get/wrap/unwrap permissions) on the key.
    /// </summary>
    public BicepValue<Uri> ManagedDiskCustomerKeyUri { get => _managedDiskCustomerKeyUri; set => _managedDiskCustomerKeyUri.Assign(value); }
    private readonly BicepValue<Uri> _managedDiskCustomerKeyUri;

    /// <summary>
    /// Indicates the Key Uri of the customer key to use for encryption of the
    /// backup storage account.
    /// </summary>
    public BicepValue<Uri> BackupStorageCustomerKeyUri { get => _backupStorageCustomerKeyUri; set => _backupStorageCustomerKeyUri.Assign(value); }
    private readonly BicepValue<Uri> _backupStorageCustomerKeyUri;

    /// <summary>
    /// Virtual Machine SKU used for data centers. Default value is
    /// Standard_DS14_v2.
    /// </summary>
    public BicepValue<string> Sku { get => _sku; set => _sku.Assign(value); }
    private readonly BicepValue<string> _sku;

    /// <summary>
    /// Disk SKU used for data centers. Default value is P30.
    /// </summary>
    public BicepValue<string> DiskSku { get => _diskSku; set => _diskSku.Assign(value); }
    private readonly BicepValue<string> _diskSku;

    /// <summary>
    /// Number of disks attached to each node. Default is 4.
    /// </summary>
    public BicepValue<int> DiskCapacity { get => _diskCapacity; set => _diskCapacity.Assign(value); }
    private readonly BicepValue<int> _diskCapacity;

    /// <summary>
    /// If the data center has Availability Zone support, apply it to the
    /// Virtual Machine ScaleSet that host the cassandra data center virtual
    /// machines.
    /// </summary>
    public BicepValue<bool> DoesSupportAvailabilityZone { get => _doesSupportAvailabilityZone; set => _doesSupportAvailabilityZone.Assign(value); }
    private readonly BicepValue<bool> _doesSupportAvailabilityZone;

    /// <summary>
    /// Ldap authentication method properties. This feature is in preview.
    /// </summary>
    public BicepValue<AuthenticationMethodLdapProperties> AuthenticationMethodLdapProperties { get => _authenticationMethodLdapProperties; set => _authenticationMethodLdapProperties.Assign(value); }
    private readonly BicepValue<AuthenticationMethodLdapProperties> _authenticationMethodLdapProperties;

    /// <summary>
    /// Whether the data center has been deallocated.
    /// </summary>
    public BicepValue<bool> Deallocated { get => _deallocated; set => _deallocated.Assign(value); }
    private readonly BicepValue<bool> _deallocated;

    /// <summary>
    /// Error related to resource provisioning.
    /// </summary>
    public BicepValue<CassandraError> ProvisionError { get => _provisionError; set => _provisionError.Assign(value); }
    private readonly BicepValue<CassandraError> _provisionError;

    /// <summary>
    /// Ip of the VPN Endpoint for this data center.
    /// </summary>
    public BicepValue<string> PrivateEndpointIPAddress { get => _privateEndpointIPAddress; set => _privateEndpointIPAddress.Assign(value); }
    private readonly BicepValue<string> _privateEndpointIPAddress;

    /// <summary>
    /// Creates a new CassandraDataCenterProperties.
    /// </summary>
    public CassandraDataCenterProperties()
    {
        _provisioningState = BicepValue<CassandraProvisioningState>.DefineProperty(this, "ProvisioningState", ["provisioningState"]);
        _dataCenterLocation = BicepValue<AzureLocation>.DefineProperty(this, "DataCenterLocation", ["dataCenterLocation"]);
        _delegatedSubnetId = BicepValue<ResourceIdentifier>.DefineProperty(this, "DelegatedSubnetId", ["delegatedSubnetId"]);
        _nodeCount = BicepValue<int>.DefineProperty(this, "NodeCount", ["nodeCount"]);
        _seedNodes = BicepList<CassandraDataCenterSeedNode>.DefineProperty(this, "SeedNodes", ["seedNodes"], isOutput: true);
        _base64EncodedCassandraYamlFragment = BicepValue<string>.DefineProperty(this, "Base64EncodedCassandraYamlFragment", ["base64EncodedCassandraYamlFragment"]);
        _managedDiskCustomerKeyUri = BicepValue<Uri>.DefineProperty(this, "ManagedDiskCustomerKeyUri", ["managedDiskCustomerKeyUri"]);
        _backupStorageCustomerKeyUri = BicepValue<Uri>.DefineProperty(this, "BackupStorageCustomerKeyUri", ["backupStorageCustomerKeyUri"]);
        _sku = BicepValue<string>.DefineProperty(this, "Sku", ["sku"]);
        _diskSku = BicepValue<string>.DefineProperty(this, "DiskSku", ["diskSku"]);
        _diskCapacity = BicepValue<int>.DefineProperty(this, "DiskCapacity", ["diskCapacity"]);
        _doesSupportAvailabilityZone = BicepValue<bool>.DefineProperty(this, "DoesSupportAvailabilityZone", ["availabilityZone"]);
        _authenticationMethodLdapProperties = BicepValue<AuthenticationMethodLdapProperties>.DefineProperty(this, "AuthenticationMethodLdapProperties", ["authenticationMethodLdapProperties"]);
        _deallocated = BicepValue<bool>.DefineProperty(this, "Deallocated", ["deallocated"]);
        _provisionError = BicepValue<CassandraError>.DefineProperty(this, "ProvisionError", ["provisionError"]);
        _privateEndpointIPAddress = BicepValue<string>.DefineProperty(this, "PrivateEndpointIPAddress", ["privateEndpointIpAddress"]);
    }
}
