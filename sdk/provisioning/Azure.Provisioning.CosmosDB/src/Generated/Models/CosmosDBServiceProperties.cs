// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.CosmosDB;

/// <summary>
/// Services response resource.             Please note
/// Azure.ResourceManager.CosmosDB.Models.CosmosDBServiceProperties is the
/// base class. According to the scenario, a derived class of the base class
/// might need to be assigned here, or this property needs to be casted to one
/// of the possible derived classes.             The available derived classes
/// include
/// Azure.ResourceManager.CosmosDB.Models.DataTransferServiceProperties,
/// Azure.ResourceManager.CosmosDB.Models.GraphApiComputeServiceProperties,
/// Azure.ResourceManager.CosmosDB.Models.MaterializedViewsBuilderServiceProperties
/// and
/// Azure.ResourceManager.CosmosDB.Models.SqlDedicatedGatewayServiceProperties.
/// </summary>
public partial class CosmosDBServiceProperties : ProvisioningConstruct
{
    /// <summary>
    /// Time of the last state change (ISO-8601 format).
    /// </summary>
    public BicepValue<DateTimeOffset> CreatedOn { get => _createdOn; }
    private readonly BicepValue<DateTimeOffset> _createdOn;

    /// <summary>
    /// Instance type for the service.
    /// </summary>
    public BicepValue<CosmosDBServiceSize> InstanceSize { get => _instanceSize; set => _instanceSize.Assign(value); }
    private readonly BicepValue<CosmosDBServiceSize> _instanceSize;

    /// <summary>
    /// Instance count for the service.
    /// </summary>
    public BicepValue<int> InstanceCount { get => _instanceCount; set => _instanceCount.Assign(value); }
    private readonly BicepValue<int> _instanceCount;

    /// <summary>
    /// Describes the status of a service.
    /// </summary>
    public BicepValue<CosmosDBServiceStatus> Status { get => _status; }
    private readonly BicepValue<CosmosDBServiceStatus> _status;

    /// <summary>
    /// Additional Properties                          To assign an object to
    /// the value of this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepDictionary<BinaryData> AdditionalProperties { get => _additionalProperties; set => _additionalProperties.Assign(value); }
    private readonly BicepDictionary<BinaryData> _additionalProperties;

    /// <summary>
    /// Creates a new CosmosDBServiceProperties.
    /// </summary>
    public CosmosDBServiceProperties()
    {
        _createdOn = BicepValue<DateTimeOffset>.DefineProperty(this, "CreatedOn", ["creationTime"], isOutput: true);
        _instanceSize = BicepValue<CosmosDBServiceSize>.DefineProperty(this, "InstanceSize", ["instanceSize"]);
        _instanceCount = BicepValue<int>.DefineProperty(this, "InstanceCount", ["instanceCount"]);
        _status = BicepValue<CosmosDBServiceStatus>.DefineProperty(this, "Status", ["status"], isOutput: true);
        _additionalProperties = BicepDictionary<BinaryData>.DefineProperty(this, "AdditionalProperties", ["AdditionalProperties"]);
    }
}
