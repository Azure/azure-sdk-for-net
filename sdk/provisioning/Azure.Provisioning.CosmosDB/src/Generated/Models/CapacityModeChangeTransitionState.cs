// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.CosmosDB;

/// <summary>
/// The transition state information related capacity mode change with update
/// request.
/// </summary>
public partial class CapacityModeChangeTransitionState : ProvisionableConstruct
{
    /// <summary>
    /// The transition status of capacity mode.
    /// </summary>
    public BicepValue<CapacityModeTransitionStatus> CapacityModeTransitionStatus 
    {
        get { Initialize(); return _capacityModeTransitionStatus!; }
        set { Initialize(); _capacityModeTransitionStatus!.Assign(value); }
    }
    private BicepValue<CapacityModeTransitionStatus>? _capacityModeTransitionStatus;

    /// <summary>
    /// Indicates the current capacity mode of the account.
    /// </summary>
    public BicepValue<CapacityMode> CurrentCapacityMode 
    {
        get { Initialize(); return _currentCapacityMode!; }
        set { Initialize(); _currentCapacityMode!.Assign(value); }
    }
    private BicepValue<CapacityMode>? _currentCapacityMode;

    /// <summary>
    /// Indicates the previous capacity mode of the account before successful
    /// transition.
    /// </summary>
    public BicepValue<CapacityMode> PreviousCapacityMode 
    {
        get { Initialize(); return _previousCapacityMode!; }
        set { Initialize(); _previousCapacityMode!.Assign(value); }
    }
    private BicepValue<CapacityMode>? _previousCapacityMode;

    /// <summary>
    /// Begin time in UTC of the capacity mode change.
    /// </summary>
    public BicepValue<DateTimeOffset> CapacityModeTransitionBeginTimestamp 
    {
        get { Initialize(); return _capacityModeTransitionBeginTimestamp!; }
    }
    private BicepValue<DateTimeOffset>? _capacityModeTransitionBeginTimestamp;

    /// <summary>
    /// End time in UTC of the capacity mode change.
    /// </summary>
    public BicepValue<DateTimeOffset> CapacityModeTransitionEndTimestamp 
    {
        get { Initialize(); return _capacityModeTransitionEndTimestamp!; }
    }
    private BicepValue<DateTimeOffset>? _capacityModeTransitionEndTimestamp;

    /// <summary>
    /// End time in UTC of the last successful capacity mode change.
    /// </summary>
    public BicepValue<DateTimeOffset> CapacityModeLastSuccessfulTransitionEndTimestamp 
    {
        get { Initialize(); return _capacityModeLastSuccessfulTransitionEndTimestamp!; }
    }
    private BicepValue<DateTimeOffset>? _capacityModeLastSuccessfulTransitionEndTimestamp;

    /// <summary>
    /// Creates a new CapacityModeChangeTransitionState.
    /// </summary>
    public CapacityModeChangeTransitionState()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// CapacityModeChangeTransitionState.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _capacityModeTransitionStatus = DefineProperty<CapacityModeTransitionStatus>("CapacityModeTransitionStatus", ["capacityModeTransitionStatus"]);
        _currentCapacityMode = DefineProperty<CapacityMode>("CurrentCapacityMode", ["currentCapacityMode"]);
        _previousCapacityMode = DefineProperty<CapacityMode>("PreviousCapacityMode", ["previousCapacityMode"]);
        _capacityModeTransitionBeginTimestamp = DefineProperty<DateTimeOffset>("CapacityModeTransitionBeginTimestamp", ["capacityModeTransitionBeginTimestamp"], isOutput: true);
        _capacityModeTransitionEndTimestamp = DefineProperty<DateTimeOffset>("CapacityModeTransitionEndTimestamp", ["capacityModeTransitionEndTimestamp"], isOutput: true);
        _capacityModeLastSuccessfulTransitionEndTimestamp = DefineProperty<DateTimeOffset>("CapacityModeLastSuccessfulTransitionEndTimestamp", ["capacityModeLastSuccessfulTransitionEndTimestamp"], isOutput: true);
    }
}
