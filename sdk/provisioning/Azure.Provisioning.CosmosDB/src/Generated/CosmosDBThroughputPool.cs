// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.CosmosDB;

/// <summary>
/// CosmosDBThroughputPool.
/// </summary>
public partial class CosmosDBThroughputPool : Resource
{
    /// <summary>
    /// Cosmos DB Throughput Pool name.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Value for throughput to be shared among CosmosDB resources in the pool.
    /// </summary>
    public BicepValue<int> MaxThroughput { get => _maxThroughput; set => _maxThroughput.Assign(value); }
    private readonly BicepValue<int> _maxThroughput;

    /// <summary>
    /// A provisioning state of the ThroughputPool.
    /// </summary>
    public BicepValue<CosmosDBStatus> ProvisioningState { get => _provisioningState; set => _provisioningState.Assign(value); }
    private readonly BicepValue<CosmosDBStatus> _provisioningState;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new CosmosDBThroughputPool.
    /// </summary>
    /// <param name="resourceName">Name of the CosmosDBThroughputPool.</param>
    /// <param name="resourceVersion">Version of the CosmosDBThroughputPool.</param>
    public CosmosDBThroughputPool(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.DocumentDB/throughputPools", resourceVersion ?? "2024-02-15-preview")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _maxThroughput = BicepValue<int>.DefineProperty(this, "MaxThroughput", ["properties", "maxThroughput"]);
        _provisioningState = BicepValue<CosmosDBStatus>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported CosmosDBThroughputPool resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-02-15-preview.
        /// </summary>
        public static readonly string V2024_02_15_preview = "2024-02-15-preview";
    }

    /// <summary>
    /// Creates a reference to an existing CosmosDBThroughputPool.
    /// </summary>
    /// <param name="resourceName">Name of the CosmosDBThroughputPool.</param>
    /// <param name="resourceVersion">Version of the CosmosDBThroughputPool.</param>
    /// <returns>The existing CosmosDBThroughputPool resource.</returns>
    public static CosmosDBThroughputPool FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
