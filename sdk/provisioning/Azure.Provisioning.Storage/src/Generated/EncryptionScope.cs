// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Storage;

/// <summary>
/// EncryptionScope.
/// </summary>
public partial class EncryptionScope : Resource
{
    /// <summary>
    /// The name of the encryption scope within the specified storage account.
    /// Encryption scope names must be between 3 and 63 characters in length
    /// and use numbers, lower-case letters and dash (-) only. Every dash (-)
    /// character must be immediately preceded and followed by a letter or
    /// number.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The key vault properties for the encryption scope. This is a required
    /// field if encryption scope &apos;source&apos; attribute is set to
    /// &apos;Microsoft.KeyVault&apos;.
    /// </summary>
    public BicepValue<EncryptionScopeKeyVaultProperties> KeyVaultProperties { get => _keyVaultProperties; set => _keyVaultProperties.Assign(value); }
    private readonly BicepValue<EncryptionScopeKeyVaultProperties> _keyVaultProperties;

    /// <summary>
    /// A boolean indicating whether or not the service applies a secondary
    /// layer of encryption with platform managed keys for data at rest.
    /// </summary>
    public BicepValue<bool> RequireInfrastructureEncryption { get => _requireInfrastructureEncryption; set => _requireInfrastructureEncryption.Assign(value); }
    private readonly BicepValue<bool> _requireInfrastructureEncryption;

    /// <summary>
    /// The provider for the encryption scope. Possible values
    /// (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.
    /// </summary>
    public BicepValue<EncryptionScopeSource> Source { get => _source; set => _source.Assign(value); }
    private readonly BicepValue<EncryptionScopeSource> _source;

    /// <summary>
    /// The state of the encryption scope. Possible values (case-insensitive):
    /// Enabled, Disabled.
    /// </summary>
    public BicepValue<EncryptionScopeState> State { get => _state; set => _state.Assign(value); }
    private readonly BicepValue<EncryptionScopeState> _state;

    /// <summary>
    /// Gets the creation date and time of the encryption scope in UTC.
    /// </summary>
    public BicepValue<DateTimeOffset> CreatedOn { get => _createdOn; }
    private readonly BicepValue<DateTimeOffset> _createdOn;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the last modification date and time of the encryption scope in UTC.
    /// </summary>
    public BicepValue<DateTimeOffset> LastModifiedOn { get => _lastModifiedOn; }
    private readonly BicepValue<DateTimeOffset> _lastModifiedOn;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent StorageAccount.
    /// </summary>
    public StorageAccount? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<StorageAccount> _parent;

    /// <summary>
    /// Creates a new EncryptionScope.
    /// </summary>
    /// <param name="resourceName">Name of the EncryptionScope.</param>
    /// <param name="resourceVersion">Version of the EncryptionScope.</param>
    public EncryptionScope(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Storage/storageAccounts/encryptionScopes", resourceVersion ?? "2024-01-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _keyVaultProperties = BicepValue<EncryptionScopeKeyVaultProperties>.DefineProperty(this, "KeyVaultProperties", ["properties", "keyVaultProperties"]);
        _requireInfrastructureEncryption = BicepValue<bool>.DefineProperty(this, "RequireInfrastructureEncryption", ["properties", "requireInfrastructureEncryption"]);
        _source = BicepValue<EncryptionScopeSource>.DefineProperty(this, "Source", ["properties", "source"]);
        _state = BicepValue<EncryptionScopeState>.DefineProperty(this, "State", ["properties", "state"]);
        _createdOn = BicepValue<DateTimeOffset>.DefineProperty(this, "CreatedOn", ["properties", "creationTime"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _lastModifiedOn = BicepValue<DateTimeOffset>.DefineProperty(this, "LastModifiedOn", ["properties", "lastModifiedTime"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<StorageAccount>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported EncryptionScope resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2023-04-01.
        /// </summary>
        public static readonly string V2023_04_01 = "2023-04-01";

        /// <summary>
        /// 2023-01-01.
        /// </summary>
        public static readonly string V2023_01_01 = "2023-01-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-05-01.
        /// </summary>
        public static readonly string V2022_05_01 = "2022-05-01";

        /// <summary>
        /// 2021-09-01.
        /// </summary>
        public static readonly string V2021_09_01 = "2021-09-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-06-01.
        /// </summary>
        public static readonly string V2021_06_01 = "2021-06-01";

        /// <summary>
        /// 2021-05-01.
        /// </summary>
        public static readonly string V2021_05_01 = "2021-05-01";

        /// <summary>
        /// 2021-04-01.
        /// </summary>
        public static readonly string V2021_04_01 = "2021-04-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2019-06-01.
        /// </summary>
        public static readonly string V2019_06_01 = "2019-06-01";
    }

    /// <summary>
    /// Creates a reference to an existing EncryptionScope.
    /// </summary>
    /// <param name="resourceName">Name of the EncryptionScope.</param>
    /// <param name="resourceVersion">Version of the EncryptionScope.</param>
    /// <returns>The existing EncryptionScope resource.</returns>
    public static EncryptionScope FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
