// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.Storage;

/// <summary>
/// StorageTable.
/// </summary>
public partial class StorageTable : Resource
{
    /// <summary>
    /// A table name must be unique within a storage account and must be
    /// between 3 and 63 characters.The name must comprise of only
    /// alphanumeric characters and it cannot begin with a numeric character.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// List of stored access policies specified on the table.
    /// </summary>
    public BicepList<StorageTableSignedIdentifier> SignedIdentifiers { get => _signedIdentifiers; set => _signedIdentifiers.Assign(value); }
    private readonly BicepList<StorageTableSignedIdentifier> _signedIdentifiers;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Table name under the specified account.
    /// </summary>
    public BicepValue<string> TableName { get => _tableName; }
    private readonly BicepValue<string> _tableName;

    /// <summary>
    /// Gets or sets a reference to the parent TableService.
    /// </summary>
    public TableService? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<TableService> _parent;

    /// <summary>
    /// Creates a new StorageTable.
    /// </summary>
    /// <param name="resourceName">Name of the StorageTable.</param>
    /// <param name="resourceVersion">Version of the StorageTable.</param>
    /// <param name="context">Provisioning context for this resource.</param>
    public StorageTable(string resourceName, string? resourceVersion = default, ProvisioningContext? context = default)
        : base(resourceName, "Microsoft.Storage/storageAccounts/tableServices/tables", resourceVersion, context)
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _signedIdentifiers = BicepList<StorageTableSignedIdentifier>.DefineProperty(this, "SignedIdentifiers", ["properties", "signedIdentifiers"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _tableName = BicepValue<string>.DefineProperty(this, "TableName", ["properties", "tableName"], isOutput: true);
        _parent = ResourceReference<TableService>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Creates a reference to an existing StorageTable.
    /// </summary>
    /// <param name="resourceName">Name of the StorageTable.</param>
    /// <param name="resourceVersion">Version of the StorageTable.</param>
    /// <returns>The existing StorageTable resource.</returns>
    public static StorageTable FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this StorageTable resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 3, maxLength: 63, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers);
}
