// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.Storage;

/// <summary>
/// BlobContainer.
/// </summary>
public partial class BlobContainer : Resource
{
    /// <summary>
    /// The name of the blob container within the specified storage account.
    /// Blob container names must be between 3 and 63 characters in length and
    /// use numbers, lower-case letters and dash (-) only. Every dash (-)
    /// character must be immediately preceded and followed by a letter or
    /// number.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Default the container to use specified encryption scope for all writes.
    /// </summary>
    public BicepValue<string> DefaultEncryptionScope { get => _defaultEncryptionScope; set => _defaultEncryptionScope.Assign(value); }
    private readonly BicepValue<string> _defaultEncryptionScope;

    /// <summary>
    /// Enable NFSv3 all squash on blob container.
    /// </summary>
    public BicepValue<bool> EnableNfsV3AllSquash { get => _enableNfsV3AllSquash; set => _enableNfsV3AllSquash.Assign(value); }
    private readonly BicepValue<bool> _enableNfsV3AllSquash;

    /// <summary>
    /// Enable NFSv3 root squash on blob container.
    /// </summary>
    public BicepValue<bool> EnableNfsV3RootSquash { get => _enableNfsV3RootSquash; set => _enableNfsV3RootSquash.Assign(value); }
    private readonly BicepValue<bool> _enableNfsV3RootSquash;

    /// <summary>
    /// The object level immutability property of the container. The property
    /// is immutable and can only be set to true at the container creation
    /// time. Existing containers must undergo a migration process.
    /// </summary>
    public BicepValue<ImmutableStorageWithVersioning> ImmutableStorageWithVersioning { get => _immutableStorageWithVersioning; set => _immutableStorageWithVersioning.Assign(value); }
    private readonly BicepValue<ImmutableStorageWithVersioning> _immutableStorageWithVersioning;

    /// <summary>
    /// A name-value pair to associate with the container as metadata.
    /// </summary>
    public BicepDictionary<string> Metadata { get => _metadata; set => _metadata.Assign(value); }
    private readonly BicepDictionary<string> _metadata;

    /// <summary>
    /// Block override of encryption scope from the container default.
    /// </summary>
    public BicepValue<bool> PreventEncryptionScopeOverride { get => _preventEncryptionScopeOverride; set => _preventEncryptionScopeOverride.Assign(value); }
    private readonly BicepValue<bool> _preventEncryptionScopeOverride;

    /// <summary>
    /// Specifies whether data in the container may be accessed publicly and
    /// the level of access.
    /// </summary>
    public BicepValue<StoragePublicAccessType> PublicAccess { get => _publicAccess; set => _publicAccess.Assign(value); }
    private readonly BicepValue<StoragePublicAccessType> _publicAccess;

    /// <summary>
    /// Blob container deletion time.
    /// </summary>
    public BicepValue<DateTimeOffset> DeletedOn { get => _deletedOn; }
    private readonly BicepValue<DateTimeOffset> _deletedOn;

    /// <summary>
    /// Resource Etag.
    /// </summary>
    public BicepValue<ETag> ETag { get => _eTag; }
    private readonly BicepValue<ETag> _eTag;

    /// <summary>
    /// The hasImmutabilityPolicy public property is set to true by SRP if
    /// ImmutabilityPolicy has been created for this container. The
    /// hasImmutabilityPolicy public property is set to false by SRP if
    /// ImmutabilityPolicy has not been created for this container.
    /// </summary>
    public BicepValue<bool> HasImmutabilityPolicy { get => _hasImmutabilityPolicy; }
    private readonly BicepValue<bool> _hasImmutabilityPolicy;

    /// <summary>
    /// The hasLegalHold public property is set to true by SRP if there are at
    /// least one existing tag. The hasLegalHold public property is set to
    /// false by SRP if all existing legal hold tags are cleared out. There
    /// can be a maximum of 1000 blob containers with hasLegalHold=true for a
    /// given account.
    /// </summary>
    public BicepValue<bool> HasLegalHold { get => _hasLegalHold; }
    private readonly BicepValue<bool> _hasLegalHold;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The ImmutabilityPolicy property of the container.
    /// </summary>
    public BicepValue<BlobContainerImmutabilityPolicy> ImmutabilityPolicy { get => _immutabilityPolicy; }
    private readonly BicepValue<BlobContainerImmutabilityPolicy> _immutabilityPolicy;

    /// <summary>
    /// Indicates whether the blob container was deleted.
    /// </summary>
    public BicepValue<bool> IsDeleted { get => _isDeleted; }
    private readonly BicepValue<bool> _isDeleted;

    /// <summary>
    /// Returns the date and time the container was last modified.
    /// </summary>
    public BicepValue<DateTimeOffset> LastModifiedOn { get => _lastModifiedOn; }
    private readonly BicepValue<DateTimeOffset> _lastModifiedOn;

    /// <summary>
    /// Specifies whether the lease on a container is of infinite or fixed
    /// duration, only when the container is leased.
    /// </summary>
    public BicepValue<StorageLeaseDurationType> LeaseDuration { get => _leaseDuration; }
    private readonly BicepValue<StorageLeaseDurationType> _leaseDuration;

    /// <summary>
    /// Lease state of the container.
    /// </summary>
    public BicepValue<StorageLeaseState> LeaseState { get => _leaseState; }
    private readonly BicepValue<StorageLeaseState> _leaseState;

    /// <summary>
    /// The lease status of the container.
    /// </summary>
    public BicepValue<StorageLeaseStatus> LeaseStatus { get => _leaseStatus; }
    private readonly BicepValue<StorageLeaseStatus> _leaseStatus;

    /// <summary>
    /// The LegalHold property of the container.
    /// </summary>
    public BicepValue<LegalHoldProperties> LegalHold { get => _legalHold; }
    private readonly BicepValue<LegalHoldProperties> _legalHold;

    /// <summary>
    /// Remaining retention days for soft deleted blob container.
    /// </summary>
    public BicepValue<int> RemainingRetentionDays { get => _remainingRetentionDays; }
    private readonly BicepValue<int> _remainingRetentionDays;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// The version of the deleted blob container.
    /// </summary>
    public BicepValue<string> Version { get => _version; }
    private readonly BicepValue<string> _version;

    /// <summary>
    /// Gets or sets a reference to the parent BlobService.
    /// </summary>
    public BlobService? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<BlobService> _parent;

    /// <summary>
    /// Creates a new BlobContainer.
    /// </summary>
    /// <param name="resourceName">Name of the BlobContainer.</param>
    /// <param name="resourceVersion">Version of the BlobContainer.</param>
    public BlobContainer(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Storage/storageAccounts/blobServices/containers", resourceVersion ?? "2024-01-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _defaultEncryptionScope = BicepValue<string>.DefineProperty(this, "DefaultEncryptionScope", ["properties", "defaultEncryptionScope"]);
        _enableNfsV3AllSquash = BicepValue<bool>.DefineProperty(this, "EnableNfsV3AllSquash", ["properties", "enableNfsV3AllSquash"]);
        _enableNfsV3RootSquash = BicepValue<bool>.DefineProperty(this, "EnableNfsV3RootSquash", ["properties", "enableNfsV3RootSquash"]);
        _immutableStorageWithVersioning = BicepValue<ImmutableStorageWithVersioning>.DefineProperty(this, "ImmutableStorageWithVersioning", ["properties", "immutableStorageWithVersioning"]);
        _metadata = BicepDictionary<string>.DefineProperty(this, "Metadata", ["properties", "metadata"]);
        _preventEncryptionScopeOverride = BicepValue<bool>.DefineProperty(this, "PreventEncryptionScopeOverride", ["properties", "denyEncryptionScopeOverride"]);
        _publicAccess = BicepValue<StoragePublicAccessType>.DefineProperty(this, "PublicAccess", ["properties", "publicAccess"]);
        _deletedOn = BicepValue<DateTimeOffset>.DefineProperty(this, "DeletedOn", ["properties", "deletedTime"], isOutput: true);
        _eTag = BicepValue<ETag>.DefineProperty(this, "ETag", ["etag"], isOutput: true);
        _hasImmutabilityPolicy = BicepValue<bool>.DefineProperty(this, "HasImmutabilityPolicy", ["properties", "hasImmutabilityPolicy"], isOutput: true);
        _hasLegalHold = BicepValue<bool>.DefineProperty(this, "HasLegalHold", ["properties", "hasLegalHold"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _immutabilityPolicy = BicepValue<BlobContainerImmutabilityPolicy>.DefineProperty(this, "ImmutabilityPolicy", ["properties", "immutabilityPolicy"], isOutput: true);
        _isDeleted = BicepValue<bool>.DefineProperty(this, "IsDeleted", ["properties", "deleted"], isOutput: true);
        _lastModifiedOn = BicepValue<DateTimeOffset>.DefineProperty(this, "LastModifiedOn", ["properties", "lastModifiedTime"], isOutput: true);
        _leaseDuration = BicepValue<StorageLeaseDurationType>.DefineProperty(this, "LeaseDuration", ["properties", "leaseDuration"], isOutput: true);
        _leaseState = BicepValue<StorageLeaseState>.DefineProperty(this, "LeaseState", ["properties", "leaseState"], isOutput: true);
        _leaseStatus = BicepValue<StorageLeaseStatus>.DefineProperty(this, "LeaseStatus", ["properties", "leaseStatus"], isOutput: true);
        _legalHold = BicepValue<LegalHoldProperties>.DefineProperty(this, "LegalHold", ["properties", "legalHold"], isOutput: true);
        _remainingRetentionDays = BicepValue<int>.DefineProperty(this, "RemainingRetentionDays", ["properties", "remainingRetentionDays"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _version = BicepValue<string>.DefineProperty(this, "Version", ["properties", "version"], isOutput: true);
        _parent = ResourceReference<BlobService>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported BlobContainer resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2023-04-01.
        /// </summary>
        public static readonly string V2023_04_01 = "2023-04-01";

        /// <summary>
        /// 2023-01-01.
        /// </summary>
        public static readonly string V2023_01_01 = "2023-01-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-05-01.
        /// </summary>
        public static readonly string V2022_05_01 = "2022-05-01";

        /// <summary>
        /// 2021-09-01.
        /// </summary>
        public static readonly string V2021_09_01 = "2021-09-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-06-01.
        /// </summary>
        public static readonly string V2021_06_01 = "2021-06-01";

        /// <summary>
        /// 2021-05-01.
        /// </summary>
        public static readonly string V2021_05_01 = "2021-05-01";

        /// <summary>
        /// 2021-04-01.
        /// </summary>
        public static readonly string V2021_04_01 = "2021-04-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2019-06-01.
        /// </summary>
        public static readonly string V2019_06_01 = "2019-06-01";

        /// <summary>
        /// 2019-04-01.
        /// </summary>
        public static readonly string V2019_04_01 = "2019-04-01";

        /// <summary>
        /// 2018-11-01.
        /// </summary>
        public static readonly string V2018_11_01 = "2018-11-01";

        /// <summary>
        /// 2018-07-01.
        /// </summary>
        public static readonly string V2018_07_01 = "2018-07-01";

        /// <summary>
        /// 2018-02-01.
        /// </summary>
        public static readonly string V2018_02_01 = "2018-02-01";

        /// <summary>
        /// 2017-10-01.
        /// </summary>
        public static readonly string V2017_10_01 = "2017-10-01";

        /// <summary>
        /// 2017-06-01.
        /// </summary>
        public static readonly string V2017_06_01 = "2017-06-01";

        /// <summary>
        /// 2016-12-01.
        /// </summary>
        public static readonly string V2016_12_01 = "2016-12-01";

        /// <summary>
        /// 2016-05-01.
        /// </summary>
        public static readonly string V2016_05_01 = "2016-05-01";
    }

    /// <summary>
    /// Creates a reference to an existing BlobContainer.
    /// </summary>
    /// <param name="resourceName">Name of the BlobContainer.</param>
    /// <param name="resourceVersion">Version of the BlobContainer.</param>
    /// <returns>The existing BlobContainer resource.</returns>
    public static BlobContainer FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this BlobContainer resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 3, maxLength: 63, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen);
}
