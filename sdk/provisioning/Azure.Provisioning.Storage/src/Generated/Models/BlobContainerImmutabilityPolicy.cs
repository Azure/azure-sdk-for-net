// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Storage;

/// <summary>
/// The properties of an ImmutabilityPolicy of a blob container.
/// </summary>
public partial class BlobContainerImmutabilityPolicy : ProvisioningConstruct
{
    /// <summary>
    /// ImmutabilityPolicy Etag.
    /// </summary>
    public BicepValue<ETag> ETag { get => _eTag; }
    private readonly BicepValue<ETag> _eTag;

    /// <summary>
    /// The ImmutabilityPolicy update history of the blob container.
    /// </summary>
    public BicepList<UpdateHistoryEntry> UpdateHistory { get => _updateHistory; }
    private readonly BicepList<UpdateHistoryEntry> _updateHistory;

    /// <summary>
    /// The immutability period for the blobs in the container since the policy
    /// creation, in days.
    /// </summary>
    public BicepValue<int> ImmutabilityPeriodSinceCreationInDays { get => _immutabilityPeriodSinceCreationInDays; }
    private readonly BicepValue<int> _immutabilityPeriodSinceCreationInDays;

    /// <summary>
    /// The ImmutabilityPolicy state of a blob container, possible values
    /// include: Locked and Unlocked.
    /// </summary>
    public BicepValue<ImmutabilityPolicyState> State { get => _state; }
    private readonly BicepValue<ImmutabilityPolicyState> _state;

    /// <summary>
    /// This property can only be changed for unlocked time-based retention
    /// policies. When enabled, new blocks can be written to an append blob
    /// while maintaining immutability protection and compliance. Only new
    /// blocks can be added and any existing blocks cannot be modified or
    /// deleted. This property cannot be changed with ExtendImmutabilityPolicy
    /// API.
    /// </summary>
    public BicepValue<bool> AllowProtectedAppendWrites { get => _allowProtectedAppendWrites; }
    private readonly BicepValue<bool> _allowProtectedAppendWrites;

    /// <summary>
    /// This property can only be changed for unlocked time-based retention
    /// policies. When enabled, new blocks can be written to both &apos;Append
    /// and Bock Blobs&apos; while maintaining immutability protection and
    /// compliance. Only new blocks can be added and any existing blocks
    /// cannot be modified or deleted. This property cannot be changed with
    /// ExtendImmutabilityPolicy API. The
    /// &apos;allowProtectedAppendWrites&apos; and
    /// &apos;allowProtectedAppendWritesAll&apos; properties are mutually
    /// exclusive.
    /// </summary>
    public BicepValue<bool> AllowProtectedAppendWritesAll { get => _allowProtectedAppendWritesAll; }
    private readonly BicepValue<bool> _allowProtectedAppendWritesAll;

    /// <summary>
    /// Creates a new BlobContainerImmutabilityPolicy.
    /// </summary>
    public BlobContainerImmutabilityPolicy()
    {
        _eTag = BicepValue<ETag>.DefineProperty(this, "ETag", ["etag"], isOutput: true);
        _updateHistory = BicepList<UpdateHistoryEntry>.DefineProperty(this, "UpdateHistory", ["updateHistory"], isOutput: true);
        _immutabilityPeriodSinceCreationInDays = BicepValue<int>.DefineProperty(this, "ImmutabilityPeriodSinceCreationInDays", ["properties", "immutabilityPeriodSinceCreationInDays"], isOutput: true);
        _state = BicepValue<ImmutabilityPolicyState>.DefineProperty(this, "State", ["properties", "state"], isOutput: true);
        _allowProtectedAppendWrites = BicepValue<bool>.DefineProperty(this, "AllowProtectedAppendWrites", ["properties", "allowProtectedAppendWrites"], isOutput: true);
        _allowProtectedAppendWritesAll = BicepValue<bool>.DefineProperty(this, "AllowProtectedAppendWritesAll", ["properties", "allowProtectedAppendWritesAll"], isOutput: true);
    }
}
