// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Storage;

/// <summary>
/// The encryption settings on the storage account.
/// </summary>
public partial class StorageAccountEncryption : ProvisioningConstruct
{
    /// <summary>
    /// List of services which support encryption.
    /// </summary>
    public BicepValue<StorageAccountEncryptionServices> Services { get => _services; set => _services.Assign(value); }
    private readonly BicepValue<StorageAccountEncryptionServices> _services;

    /// <summary>
    /// The encryption keySource (provider). Possible values
    /// (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault.
    /// </summary>
    public BicepValue<StorageAccountKeySource> KeySource { get => _keySource; set => _keySource.Assign(value); }
    private readonly BicepValue<StorageAccountKeySource> _keySource;

    /// <summary>
    /// A boolean indicating whether or not the service applies a secondary
    /// layer of encryption with platform managed keys for data at rest.
    /// </summary>
    public BicepValue<bool> RequireInfrastructureEncryption { get => _requireInfrastructureEncryption; set => _requireInfrastructureEncryption.Assign(value); }
    private readonly BicepValue<bool> _requireInfrastructureEncryption;

    /// <summary>
    /// Properties provided by key vault.
    /// </summary>
    public BicepValue<StorageAccountKeyVaultProperties> KeyVaultProperties { get => _keyVaultProperties; set => _keyVaultProperties.Assign(value); }
    private readonly BicepValue<StorageAccountKeyVaultProperties> _keyVaultProperties;

    /// <summary>
    /// The identity to be used with service-side encryption at rest.
    /// </summary>
    public BicepValue<StorageAccountEncryptionIdentity> EncryptionIdentity { get => _encryptionIdentity; set => _encryptionIdentity.Assign(value); }
    private readonly BicepValue<StorageAccountEncryptionIdentity> _encryptionIdentity;

    /// <summary>
    /// Creates a new StorageAccountEncryption.
    /// </summary>
    public StorageAccountEncryption()
    {
        _services = BicepValue<StorageAccountEncryptionServices>.DefineProperty(this, "Services", ["services"]);
        _keySource = BicepValue<StorageAccountKeySource>.DefineProperty(this, "KeySource", ["keySource"]);
        _requireInfrastructureEncryption = BicepValue<bool>.DefineProperty(this, "RequireInfrastructureEncryption", ["requireInfrastructureEncryption"]);
        _keyVaultProperties = BicepValue<StorageAccountKeyVaultProperties>.DefineProperty(this, "KeyVaultProperties", ["keyvaultproperties"]);
        _encryptionIdentity = BicepValue<StorageAccountEncryptionIdentity>.DefineProperty(this, "EncryptionIdentity", ["identity"]);
    }
}
