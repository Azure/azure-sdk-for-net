// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Storage;

/// <summary>
/// A service that allows server-side encryption to be used.
/// </summary>
public partial class StorageEncryptionService : ProvisioningConstruct
{
    /// <summary>
    /// A boolean indicating whether or not the service encrypts the data as it
    /// is stored. Encryption at rest is enabled by default today and cannot
    /// be disabled.
    /// </summary>
    public BicepValue<bool> IsEnabled { get => _isEnabled; set => _isEnabled.Assign(value); }
    private readonly BicepValue<bool> _isEnabled;

    /// <summary>
    /// Gets a rough estimate of the date/time when the encryption was last
    /// enabled by the user. Data is encrypted at rest by default today and
    /// cannot be disabled.
    /// </summary>
    public BicepValue<DateTimeOffset> LastEnabledOn { get => _lastEnabledOn; }
    private readonly BicepValue<DateTimeOffset> _lastEnabledOn;

    /// <summary>
    /// Encryption key type to be used for the encryption service.
    /// &apos;Account&apos; key type implies that an account-scoped encryption
    /// key will be used. &apos;Service&apos; key type implies that a default
    /// service key is used.
    /// </summary>
    public BicepValue<StorageEncryptionKeyType> KeyType { get => _keyType; set => _keyType.Assign(value); }
    private readonly BicepValue<StorageEncryptionKeyType> _keyType;

    /// <summary>
    /// Creates a new StorageEncryptionService.
    /// </summary>
    public StorageEncryptionService()
    {
        _isEnabled = BicepValue<bool>.DefineProperty(this, "IsEnabled", ["enabled"]);
        _lastEnabledOn = BicepValue<DateTimeOffset>.DefineProperty(this, "LastEnabledOn", ["lastEnabledTime"], isOutput: true);
        _keyType = BicepValue<StorageEncryptionKeyType>.DefineProperty(this, "KeyType", ["keyType"]);
    }
}
