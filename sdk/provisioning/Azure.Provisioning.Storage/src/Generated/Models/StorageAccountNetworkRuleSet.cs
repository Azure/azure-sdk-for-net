// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Storage;

/// <summary>
/// Network rule set.
/// </summary>
public partial class StorageAccountNetworkRuleSet : ProvisioningConstruct
{
    /// <summary>
    /// Specifies whether traffic is bypassed for
    /// Logging/Metrics/AzureServices. Possible values are any combination of
    /// Logging|Metrics|AzureServices (For example, &quot;Logging,
    /// Metrics&quot;), or None to bypass none of those traffics.
    /// </summary>
    public BicepValue<StorageNetworkBypass> Bypass { get => _bypass; set => _bypass.Assign(value); }
    private readonly BicepValue<StorageNetworkBypass> _bypass;

    /// <summary>
    /// Sets the resource access rules.
    /// </summary>
    public BicepList<StorageAccountResourceAccessRule> ResourceAccessRules { get => _resourceAccessRules; set => _resourceAccessRules.Assign(value); }
    private readonly BicepList<StorageAccountResourceAccessRule> _resourceAccessRules;

    /// <summary>
    /// Sets the virtual network rules.
    /// </summary>
    public BicepList<StorageAccountVirtualNetworkRule> VirtualNetworkRules { get => _virtualNetworkRules; set => _virtualNetworkRules.Assign(value); }
    private readonly BicepList<StorageAccountVirtualNetworkRule> _virtualNetworkRules;

    /// <summary>
    /// Sets the IP ACL rules.
    /// </summary>
    public BicepList<StorageAccountIPRule> IPRules { get => _iPRules; set => _iPRules.Assign(value); }
    private readonly BicepList<StorageAccountIPRule> _iPRules;

    /// <summary>
    /// Specifies the default action of allow or deny when no other rules match.
    /// </summary>
    public BicepValue<StorageNetworkDefaultAction> DefaultAction { get => _defaultAction; set => _defaultAction.Assign(value); }
    private readonly BicepValue<StorageNetworkDefaultAction> _defaultAction;

    /// <summary>
    /// Creates a new StorageAccountNetworkRuleSet.
    /// </summary>
    public StorageAccountNetworkRuleSet()
    {
        _bypass = BicepValue<StorageNetworkBypass>.DefineProperty(this, "Bypass", ["bypass"]);
        _resourceAccessRules = BicepList<StorageAccountResourceAccessRule>.DefineProperty(this, "ResourceAccessRules", ["resourceAccessRules"]);
        _virtualNetworkRules = BicepList<StorageAccountVirtualNetworkRule>.DefineProperty(this, "VirtualNetworkRules", ["virtualNetworkRules"]);
        _iPRules = BicepList<StorageAccountIPRule>.DefineProperty(this, "IPRules", ["ipRules"]);
        _defaultAction = BicepValue<StorageNetworkDefaultAction>.DefineProperty(this, "DefaultAction", ["defaultAction"]);
    }
}
