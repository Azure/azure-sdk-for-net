// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Storage;

/// <summary>
/// Setting for SMB protocol.
/// </summary>
public partial class SmbSetting : ProvisioningConstruct
{
    /// <summary>
    /// Indicates whether multichannel is enabled.
    /// </summary>
    public BicepValue<bool> IsMultiChannelEnabled { get => _isMultiChannelEnabled; set => _isMultiChannelEnabled.Assign(value); }
    private readonly BicepValue<bool> _isMultiChannelEnabled;

    /// <summary>
    /// SMB protocol versions supported by server. Valid values are SMB2.1,
    /// SMB3.0, SMB3.1.1. Should be passed as a string with delimiter
    /// &apos;;&apos;.
    /// </summary>
    public BicepValue<string> Versions { get => _versions; set => _versions.Assign(value); }
    private readonly BicepValue<string> _versions;

    /// <summary>
    /// SMB authentication methods supported by server. Valid values are
    /// NTLMv2, Kerberos. Should be passed as a string with delimiter
    /// &apos;;&apos;.
    /// </summary>
    public BicepValue<string> AuthenticationMethods { get => _authenticationMethods; set => _authenticationMethods.Assign(value); }
    private readonly BicepValue<string> _authenticationMethods;

    /// <summary>
    /// Kerberos ticket encryption supported by server. Valid values are
    /// RC4-HMAC, AES-256. Should be passed as a string with delimiter
    /// &apos;;&apos;.
    /// </summary>
    public BicepValue<string> KerberosTicketEncryption { get => _kerberosTicketEncryption; set => _kerberosTicketEncryption.Assign(value); }
    private readonly BicepValue<string> _kerberosTicketEncryption;

    /// <summary>
    /// SMB channel encryption supported by server. Valid values are
    /// AES-128-CCM, AES-128-GCM, AES-256-GCM. Should be passed as a string
    /// with delimiter &apos;;&apos;.
    /// </summary>
    public BicepValue<string> ChannelEncryption { get => _channelEncryption; set => _channelEncryption.Assign(value); }
    private readonly BicepValue<string> _channelEncryption;

    /// <summary>
    /// Creates a new SmbSetting.
    /// </summary>
    public SmbSetting()
    {
        _isMultiChannelEnabled = BicepValue<bool>.DefineProperty(this, "IsMultiChannelEnabled", ["multichannel", "enabled"]);
        _versions = BicepValue<string>.DefineProperty(this, "Versions", ["versions"]);
        _authenticationMethods = BicepValue<string>.DefineProperty(this, "AuthenticationMethods", ["authenticationMethods"]);
        _kerberosTicketEncryption = BicepValue<string>.DefineProperty(this, "KerberosTicketEncryption", ["kerberosTicketEncryption"]);
        _channelEncryption = BicepValue<string>.DefineProperty(this, "ChannelEncryption", ["channelEncryption"]);
    }
}
