// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Storage;

/// <summary>
/// Encryption identity for the storage account.
/// </summary>
public partial class StorageAccountEncryptionIdentity : ProvisioningConstruct
{
    /// <summary>
    /// Resource identifier of the UserAssigned identity to be associated with
    /// server-side encryption on the storage account.
    /// </summary>
    public BicepValue<string> EncryptionUserAssignedIdentity { get => _encryptionUserAssignedIdentity; set => _encryptionUserAssignedIdentity.Assign(value); }
    private readonly BicepValue<string> _encryptionUserAssignedIdentity;

    /// <summary>
    /// ClientId of the multi-tenant application to be used in conjunction with
    /// the user-assigned identity for cross-tenant customer-managed-keys
    /// server-side encryption on the storage account.
    /// </summary>
    public BicepValue<string> EncryptionFederatedIdentityClientId { get => _encryptionFederatedIdentityClientId; set => _encryptionFederatedIdentityClientId.Assign(value); }
    private readonly BicepValue<string> _encryptionFederatedIdentityClientId;

    /// <summary>
    /// Creates a new StorageAccountEncryptionIdentity.
    /// </summary>
    public StorageAccountEncryptionIdentity()
    {
        _encryptionUserAssignedIdentity = BicepValue<string>.DefineProperty(this, "EncryptionUserAssignedIdentity", ["userAssignedIdentity"]);
        _encryptionFederatedIdentityClientId = BicepValue<string>.DefineProperty(this, "EncryptionFederatedIdentityClientId", ["federatedIdentityClientId"]);
    }
}
