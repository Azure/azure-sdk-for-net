// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Storage;

/// <summary>
/// SasPolicy assigned to the storage account.
/// </summary>
public partial class StorageAccountSasPolicy : ProvisionableConstruct
{
    /// <summary>
    /// The SAS expiration period, DD.HH:MM:SS.
    /// </summary>
    public BicepValue<string> SasExpirationPeriod 
    {
        get { Initialize(); return _sasExpirationPeriod!; }
        set { Initialize(); _sasExpirationPeriod!.Assign(value); }
    }
    private BicepValue<string>? _sasExpirationPeriod;

    /// <summary>
    /// The SAS Expiration Action defines the action to be performed when
    /// sasPolicy.sasExpirationPeriod is violated. The &apos;Log&apos; action
    /// can be used for audit purposes and the &apos;Block&apos; action can be
    /// used to block and deny the usage of SAS tokens that do not adhere to
    /// the sas policy expiration period.
    /// </summary>
    public BicepValue<ExpirationAction> ExpirationAction 
    {
        get { Initialize(); return _expirationAction!; }
        set { Initialize(); _expirationAction!.Assign(value); }
    }
    private BicepValue<ExpirationAction>? _expirationAction;

    /// <summary>
    /// Creates a new StorageAccountSasPolicy.
    /// </summary>
    public StorageAccountSasPolicy()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of StorageAccountSasPolicy.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _sasExpirationPeriod = DefineProperty<string>("SasExpirationPeriod", ["sasExpirationPeriod"]);
        _expirationAction = DefineProperty<ExpirationAction>("ExpirationAction", ["expirationAction"]);
    }
}
