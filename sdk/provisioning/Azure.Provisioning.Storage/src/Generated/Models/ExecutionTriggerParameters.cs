// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Storage;

/// <summary>
/// The trigger parameters update for the storage task assignment execution.
/// </summary>
public partial class ExecutionTriggerParameters : ProvisionableConstruct
{
    /// <summary>
    /// When to start task execution. This is a required field when
    /// ExecutionTrigger.properties.type is &apos;OnSchedule&apos;; this
    /// property should not be present when ExecutionTrigger.properties.type
    /// is &apos;RunOnce&apos;.
    /// </summary>
    public BicepValue<DateTimeOffset> StartFrom 
    {
        get { Initialize(); return _startFrom!; }
        set { Initialize(); _startFrom!.Assign(value); }
    }
    private BicepValue<DateTimeOffset>? _startFrom;

    /// <summary>
    /// Run interval of task execution. This is a required field when
    /// ExecutionTrigger.properties.type is &apos;OnSchedule&apos;; this
    /// property should not be present when ExecutionTrigger.properties.type
    /// is &apos;RunOnce&apos;.
    /// </summary>
    public BicepValue<int> Interval 
    {
        get { Initialize(); return _interval!; }
        set { Initialize(); _interval!.Assign(value); }
    }
    private BicepValue<int>? _interval;

    /// <summary>
    /// Run interval unit of task execution. This is a required field when
    /// ExecutionTrigger.properties.type is &apos;OnSchedule&apos;; this
    /// property should not be present when ExecutionTrigger.properties.type
    /// is &apos;RunOnce&apos;.
    /// </summary>
    public BicepValue<ExecutionIntervalUnit> IntervalUnit 
    {
        get { Initialize(); return _intervalUnit!; }
        set { Initialize(); _intervalUnit!.Assign(value); }
    }
    private BicepValue<ExecutionIntervalUnit>? _intervalUnit;

    /// <summary>
    /// When to end task execution. This is a required field when
    /// ExecutionTrigger.properties.type is &apos;OnSchedule&apos;; this
    /// property should not be present when ExecutionTrigger.properties.type
    /// is &apos;RunOnce&apos;.
    /// </summary>
    public BicepValue<DateTimeOffset> EndBy 
    {
        get { Initialize(); return _endBy!; }
        set { Initialize(); _endBy!.Assign(value); }
    }
    private BicepValue<DateTimeOffset>? _endBy;

    /// <summary>
    /// When to start task execution. This is an optional field when
    /// ExecutionTrigger.properties.type is &apos;RunOnce&apos;; this property
    /// should not be present when ExecutionTrigger.properties.type is
    /// &apos;OnSchedule&apos;.
    /// </summary>
    public BicepValue<DateTimeOffset> StartOn 
    {
        get { Initialize(); return _startOn!; }
        set { Initialize(); _startOn!.Assign(value); }
    }
    private BicepValue<DateTimeOffset>? _startOn;

    /// <summary>
    /// Creates a new ExecutionTriggerParameters.
    /// </summary>
    public ExecutionTriggerParameters()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of ExecutionTriggerParameters.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _startFrom = DefineProperty<DateTimeOffset>("StartFrom", ["startFrom"]);
        _interval = DefineProperty<int>("Interval", ["interval"]);
        _intervalUnit = DefineProperty<ExecutionIntervalUnit>("IntervalUnit", ["intervalUnit"]);
        _endBy = DefineProperty<DateTimeOffset>("EndBy", ["endBy"]);
        _startOn = DefineProperty<DateTimeOffset>("StartOn", ["startOn"]);
    }
}
