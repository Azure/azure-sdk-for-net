// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Storage;

/// <summary>
/// Storage task execution report for a run instance.
/// </summary>
public partial class StorageTaskReportProperties : ProvisionableConstruct
{
    /// <summary>
    /// Represents the Storage Task Assignment Id associated with the storage
    /// task that provided an execution context.
    /// </summary>
    public BicepValue<ResourceIdentifier> TaskAssignmentId 
    {
        get { Initialize(); return _taskAssignmentId!; }
    }
    private BicepValue<ResourceIdentifier>? _taskAssignmentId;

    /// <summary>
    /// Represents the Storage Account Id where the storage task definition was
    /// applied and executed.
    /// </summary>
    public BicepValue<ResourceIdentifier> StorageAccountId 
    {
        get { Initialize(); return _storageAccountId!; }
    }
    private BicepValue<ResourceIdentifier>? _storageAccountId;

    /// <summary>
    /// Start time of the run instance. Filter options such as startTime gt
    /// &apos;2023-06-26T20:51:24.4494016Z&apos; and other comparison
    /// operators can be used as described for DateTime properties in
    /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators.
    /// </summary>
    public BicepValue<DateTimeOffset> StartedOn 
    {
        get { Initialize(); return _startedOn!; }
    }
    private BicepValue<DateTimeOffset>? _startedOn;

    /// <summary>
    /// End time of the run instance. Filter options such as startTime gt
    /// &apos;2023-06-26T20:51:24.4494016Z&apos; and other comparison
    /// operators can be used as described for DateTime properties in
    /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators.
    /// </summary>
    public BicepValue<DateTimeOffset> FinishedOn 
    {
        get { Initialize(); return _finishedOn!; }
    }
    private BicepValue<DateTimeOffset>? _finishedOn;

    /// <summary>
    /// Total number of objects that meet the condition as defined in the
    /// storage task assignment execution context. Filter options such as
    /// objectsTargetedCount gt 50 and other comparison operators can be used
    /// as described for Numerical properties in
    /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators.
    /// </summary>
    public BicepValue<string> ObjectsTargetedCount 
    {
        get { Initialize(); return _objectsTargetedCount!; }
    }
    private BicepValue<string>? _objectsTargetedCount;

    /// <summary>
    /// Total number of objects that meet the storage tasks condition and were
    /// operated upon. Filter options such as objectsOperatedOnCount ge 100
    /// and other comparison operators can be used as described for Numerical
    /// properties in
    /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators.
    /// </summary>
    public BicepValue<string> ObjectsOperatedOnCount 
    {
        get { Initialize(); return _objectsOperatedOnCount!; }
    }
    private BicepValue<string>? _objectsOperatedOnCount;

    /// <summary>
    /// Total number of objects where task operation failed when was attempted.
    /// Filter options such as objectFailedCount eq 0 and other comparison
    /// operators can be used as described for Numerical properties in
    /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators.
    /// </summary>
    public BicepValue<string> ObjectFailedCount 
    {
        get { Initialize(); return _objectFailedCount!; }
    }
    private BicepValue<string>? _objectFailedCount;

    /// <summary>
    /// Total number of objects where task operation succeeded when was
    /// attempted.Filter options such as objectsSucceededCount gt 150 and
    /// other comparison operators can be used as described for Numerical
    /// properties in
    /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators.
    /// </summary>
    public BicepValue<string> ObjectsSucceededCount 
    {
        get { Initialize(); return _objectsSucceededCount!; }
    }
    private BicepValue<string>? _objectsSucceededCount;

    /// <summary>
    /// Well known Azure Storage error code that represents the error
    /// encountered during execution of the run instance.
    /// </summary>
    public BicepValue<string> RunStatusError 
    {
        get { Initialize(); return _runStatusError!; }
    }
    private BicepValue<string>? _runStatusError;

    /// <summary>
    /// Represents the status of the execution.
    /// </summary>
    public BicepValue<StorageTaskRunStatus> RunStatusEnum 
    {
        get { Initialize(); return _runStatusEnum!; }
    }
    private BicepValue<StorageTaskRunStatus>? _runStatusEnum;

    /// <summary>
    /// Full path to the verbose report stored in the reporting container as
    /// specified in the assignment execution context for the storage account.
    /// </summary>
    public BicepValue<string> SummaryReportPath 
    {
        get { Initialize(); return _summaryReportPath!; }
    }
    private BicepValue<string>? _summaryReportPath;

    /// <summary>
    /// Storage Task Arm Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> TaskId 
    {
        get { Initialize(); return _taskId!; }
    }
    private BicepValue<ResourceIdentifier>? _taskId;

    /// <summary>
    /// Storage Task Version.
    /// </summary>
    public BicepValue<string> TaskVersion 
    {
        get { Initialize(); return _taskVersion!; }
    }
    private BicepValue<string>? _taskVersion;

    /// <summary>
    /// Represents the overall result of the execution for the run instance.
    /// </summary>
    public BicepValue<StorageTaskRunResult> RunResult 
    {
        get { Initialize(); return _runResult!; }
    }
    private BicepValue<StorageTaskRunResult>? _runResult;

    /// <summary>
    /// Creates a new StorageTaskReportProperties.
    /// </summary>
    public StorageTaskReportProperties()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of StorageTaskReportProperties.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _taskAssignmentId = DefineProperty<ResourceIdentifier>("TaskAssignmentId", ["taskAssignmentId"], isOutput: true);
        _storageAccountId = DefineProperty<ResourceIdentifier>("StorageAccountId", ["storageAccountId"], isOutput: true);
        _startedOn = DefineProperty<DateTimeOffset>("StartedOn", ["startTime"], isOutput: true);
        _finishedOn = DefineProperty<DateTimeOffset>("FinishedOn", ["finishTime"], isOutput: true);
        _objectsTargetedCount = DefineProperty<string>("ObjectsTargetedCount", ["objectsTargetedCount"], isOutput: true);
        _objectsOperatedOnCount = DefineProperty<string>("ObjectsOperatedOnCount", ["objectsOperatedOnCount"], isOutput: true);
        _objectFailedCount = DefineProperty<string>("ObjectFailedCount", ["objectFailedCount"], isOutput: true);
        _objectsSucceededCount = DefineProperty<string>("ObjectsSucceededCount", ["objectsSucceededCount"], isOutput: true);
        _runStatusError = DefineProperty<string>("RunStatusError", ["runStatusError"], isOutput: true);
        _runStatusEnum = DefineProperty<StorageTaskRunStatus>("RunStatusEnum", ["runStatusEnum"], isOutput: true);
        _summaryReportPath = DefineProperty<string>("SummaryReportPath", ["summaryReportPath"], isOutput: true);
        _taskId = DefineProperty<ResourceIdentifier>("TaskId", ["taskId"], isOutput: true);
        _taskVersion = DefineProperty<string>("TaskVersion", ["taskVersion"], isOutput: true);
        _runResult = DefineProperty<StorageTaskRunResult>("RunResult", ["runResult"], isOutput: true);
    }
}
