// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.AppService;

/// <summary>
/// SlotConfigNames.
/// </summary>
public partial class SlotConfigNames : Resource
{
    /// <summary>
    /// Gets the Name.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// List of application settings names.
    /// </summary>
    public BicepList<string> AppSettingNames { get => _appSettingNames; set => _appSettingNames.Assign(value); }
    private readonly BicepList<string> _appSettingNames;

    /// <summary>
    /// List of external Azure storage account identifiers.
    /// </summary>
    public BicepList<string> AzureStorageConfigNames { get => _azureStorageConfigNames; set => _azureStorageConfigNames.Assign(value); }
    private readonly BicepList<string> _azureStorageConfigNames;

    /// <summary>
    /// List of connection string names.
    /// </summary>
    public BicepList<string> ConnectionStringNames { get => _connectionStringNames; set => _connectionStringNames.Assign(value); }
    private readonly BicepList<string> _connectionStringNames;

    /// <summary>
    /// Kind of resource.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; set => _kind.Assign(value); }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent WebSite.
    /// </summary>
    public WebSite? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<WebSite> _parent;

    /// <summary>
    /// Creates a new SlotConfigNames.
    /// </summary>
    /// <param name="resourceName">Name of the SlotConfigNames.</param>
    /// <param name="resourceVersion">Version of the SlotConfigNames.</param>
    /// <param name="context">Provisioning context for this resource.</param>
    public SlotConfigNames(string resourceName, string? resourceVersion = default, ProvisioningContext? context = default)
        : base(resourceName, "Microsoft.Web/sites/config", resourceVersion, context)
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _appSettingNames = BicepList<string>.DefineProperty(this, "AppSettingNames", ["properties", "appSettingNames"]);
        _azureStorageConfigNames = BicepList<string>.DefineProperty(this, "AzureStorageConfigNames", ["properties", "azureStorageConfigNames"]);
        _connectionStringNames = BicepList<string>.DefineProperty(this, "ConnectionStringNames", ["properties", "connectionStringNames"]);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<WebSite>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Creates a reference to an existing SlotConfigNames.
    /// </summary>
    /// <param name="resourceName">Name of the SlotConfigNames.</param>
    /// <param name="resourceVersion">Version of the SlotConfigNames.</param>
    /// <returns>The existing SlotConfigNames resource.</returns>
    public static SlotConfigNames FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
