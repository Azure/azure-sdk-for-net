// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.AppService;

/// <summary>
/// WebSiteSourceControl.
/// </summary>
public partial class WebSiteSourceControl : Resource
{
    /// <summary>
    /// Gets the Name.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Name of branch to use for deployment.
    /// </summary>
    public BicepValue<string> Branch { get => _branch; set => _branch.Assign(value); }
    private readonly BicepValue<string> _branch;

    /// <summary>
    /// If GitHub Action is selected, than the associated configuration.
    /// </summary>
    public BicepValue<GitHubActionConfiguration> GitHubActionConfiguration { get => _gitHubActionConfiguration; set => _gitHubActionConfiguration.Assign(value); }
    private readonly BicepValue<GitHubActionConfiguration> _gitHubActionConfiguration;

    /// <summary>
    /// &lt;code&gt;true&lt;/code&gt; to enable deployment rollback; otherwise,
    /// &lt;code&gt;false&lt;/code&gt;.
    /// </summary>
    public BicepValue<bool> IsDeploymentRollbackEnabled { get => _isDeploymentRollbackEnabled; set => _isDeploymentRollbackEnabled.Assign(value); }
    private readonly BicepValue<bool> _isDeploymentRollbackEnabled;

    /// <summary>
    /// &lt;code&gt;true&lt;/code&gt; if this is deployed via GitHub action.
    /// </summary>
    public BicepValue<bool> IsGitHubAction { get => _isGitHubAction; set => _isGitHubAction.Assign(value); }
    private readonly BicepValue<bool> _isGitHubAction;

    /// <summary>
    /// &lt;code&gt;true&lt;/code&gt; to limit to manual integration;
    /// &lt;code&gt;false&lt;/code&gt; to enable continuous integration (which
    /// configures webhooks into online repos like GitHub).
    /// </summary>
    public BicepValue<bool> IsManualIntegration { get => _isManualIntegration; set => _isManualIntegration.Assign(value); }
    private readonly BicepValue<bool> _isManualIntegration;

    /// <summary>
    /// &lt;code&gt;true&lt;/code&gt; for a Mercurial repository;
    /// &lt;code&gt;false&lt;/code&gt; for a Git repository.
    /// </summary>
    public BicepValue<bool> IsMercurial { get => _isMercurial; set => _isMercurial.Assign(value); }
    private readonly BicepValue<bool> _isMercurial;

    /// <summary>
    /// Kind of resource.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; set => _kind.Assign(value); }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// Repository or source control URL.
    /// </summary>
    public BicepValue<Uri> RepoUri { get => _repoUri; set => _repoUri.Assign(value); }
    private readonly BicepValue<Uri> _repoUri;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent WebSite.
    /// </summary>
    public WebSite? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<WebSite> _parent;

    /// <summary>
    /// Creates a new WebSiteSourceControl.
    /// </summary>
    /// <param name="resourceName">Name of the WebSiteSourceControl.</param>
    /// <param name="resourceVersion">Version of the WebSiteSourceControl.</param>
    /// <param name="context">Provisioning context for this resource.</param>
    public WebSiteSourceControl(string resourceName, string? resourceVersion = default, ProvisioningContext? context = default)
        : base(resourceName, "Microsoft.Web/sites/sourcecontrols", resourceVersion, context)
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _branch = BicepValue<string>.DefineProperty(this, "Branch", ["properties", "branch"]);
        _gitHubActionConfiguration = BicepValue<GitHubActionConfiguration>.DefineProperty(this, "GitHubActionConfiguration", ["properties", "gitHubActionConfiguration"]);
        _isDeploymentRollbackEnabled = BicepValue<bool>.DefineProperty(this, "IsDeploymentRollbackEnabled", ["properties", "deploymentRollbackEnabled"]);
        _isGitHubAction = BicepValue<bool>.DefineProperty(this, "IsGitHubAction", ["properties", "isGitHubAction"]);
        _isManualIntegration = BicepValue<bool>.DefineProperty(this, "IsManualIntegration", ["properties", "isManualIntegration"]);
        _isMercurial = BicepValue<bool>.DefineProperty(this, "IsMercurial", ["properties", "isMercurial"]);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"]);
        _repoUri = BicepValue<Uri>.DefineProperty(this, "RepoUri", ["properties", "repoUrl"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<WebSite>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Creates a reference to an existing WebSiteSourceControl.
    /// </summary>
    /// <param name="resourceName">Name of the WebSiteSourceControl.</param>
    /// <param name="resourceVersion">Version of the WebSiteSourceControl.</param>
    /// <returns>The existing WebSiteSourceControl resource.</returns>
    public static WebSiteSourceControl FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
