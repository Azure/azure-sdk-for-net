// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.AppService;

/// <summary>
/// AppServiceEnvironment.
/// </summary>
public partial class AppServiceEnvironment : Resource
{
    /// <summary>
    /// Name of the App Service Environment.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Custom settings for changing the behavior of the App Service
    /// Environment.
    /// </summary>
    public BicepList<AppServiceNameValuePair> ClusterSettings { get => _clusterSettings; set => _clusterSettings.Assign(value); }
    private readonly BicepList<AppServiceNameValuePair> _clusterSettings;

    /// <summary>
    /// Full view of the custom domain suffix configuration for ASEv3.
    /// </summary>
    public BicepValue<CustomDnsSuffixConfigurationData> CustomDnsSuffixConfiguration { get => _customDnsSuffixConfiguration; set => _customDnsSuffixConfiguration.Assign(value); }
    private readonly BicepValue<CustomDnsSuffixConfigurationData> _customDnsSuffixConfiguration;

    /// <summary>
    /// Dedicated Host Count.
    /// </summary>
    public BicepValue<int> DedicatedHostCount { get => _dedicatedHostCount; set => _dedicatedHostCount.Assign(value); }
    private readonly BicepValue<int> _dedicatedHostCount;

    /// <summary>
    /// DNS suffix of the App Service Environment.
    /// </summary>
    public BicepValue<string> DnsSuffix { get => _dnsSuffix; set => _dnsSuffix.Assign(value); }
    private readonly BicepValue<string> _dnsSuffix;

    /// <summary>
    /// Scale factor for front-ends.
    /// </summary>
    public BicepValue<int> FrontEndScaleFactor { get => _frontEndScaleFactor; set => _frontEndScaleFactor.Assign(value); }
    private readonly BicepValue<int> _frontEndScaleFactor;

    /// <summary>
    /// Specifies which endpoints to serve internally in the Virtual Network
    /// for the App Service Environment.
    /// </summary>
    public BicepValue<LoadBalancingMode> InternalLoadBalancingMode { get => _internalLoadBalancingMode; set => _internalLoadBalancingMode.Assign(value); }
    private readonly BicepValue<LoadBalancingMode> _internalLoadBalancingMode;

    /// <summary>
    /// Number of IP SSL addresses reserved for the App Service Environment.
    /// </summary>
    public BicepValue<int> IPSslAddressCount { get => _iPSslAddressCount; set => _iPSslAddressCount.Assign(value); }
    private readonly BicepValue<int> _iPSslAddressCount;

    /// <summary>
    /// Whether or not this App Service Environment is zone-redundant.
    /// </summary>
    public BicepValue<bool> IsZoneRedundant { get => _isZoneRedundant; set => _isZoneRedundant.Assign(value); }
    private readonly BicepValue<bool> _isZoneRedundant;

    /// <summary>
    /// Kind of resource.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; set => _kind.Assign(value); }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// Front-end VM size, e.g. &quot;Medium&quot;, &quot;Large&quot;.
    /// </summary>
    public BicepValue<string> MultiSize { get => _multiSize; set => _multiSize.Assign(value); }
    private readonly BicepValue<string> _multiSize;

    /// <summary>
    /// Full view of networking configuration for an ASE.
    /// </summary>
    public BicepValue<AseV3NetworkingConfigurationData> NetworkingConfiguration { get => _networkingConfiguration; set => _networkingConfiguration.Assign(value); }
    private readonly BicepValue<AseV3NetworkingConfigurationData> _networkingConfiguration;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Upgrade Preference.
    /// </summary>
    public BicepValue<AppServiceEnvironmentUpgradePreference> UpgradePreference { get => _upgradePreference; set => _upgradePreference.Assign(value); }
    private readonly BicepValue<AppServiceEnvironmentUpgradePreference> _upgradePreference;

    /// <summary>
    /// User added ip ranges to whitelist on ASE db.
    /// </summary>
    public BicepList<string> UserWhitelistedIPRanges { get => _userWhitelistedIPRanges; set => _userWhitelistedIPRanges.Assign(value); }
    private readonly BicepList<string> _userWhitelistedIPRanges;

    /// <summary>
    /// Description of the Virtual Network.
    /// </summary>
    public BicepValue<AppServiceVirtualNetworkProfile> VirtualNetwork { get => _virtualNetwork; set => _virtualNetwork.Assign(value); }
    private readonly BicepValue<AppServiceVirtualNetworkProfile> _virtualNetwork;

    /// <summary>
    /// Flag that displays whether an ASE has linux workers or not.
    /// </summary>
    public BicepValue<bool> HasLinuxWorkers { get => _hasLinuxWorkers; }
    private readonly BicepValue<bool> _hasLinuxWorkers;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// &lt;code&gt;true&lt;/code&gt; if the App Service Environment is
    /// suspended; otherwise, &lt;code&gt;false&lt;/code&gt;. The environment
    /// can be suspended, e.g. when the management endpoint is no longer
    /// available              (most likely because NSG blocked the incoming
    /// traffic).
    /// </summary>
    public BicepValue<bool> IsSuspended { get => _isSuspended; }
    private readonly BicepValue<bool> _isSuspended;

    /// <summary>
    /// Maximum number of VMs in the App Service Environment.
    /// </summary>
    public BicepValue<int> MaximumNumberOfMachines { get => _maximumNumberOfMachines; }
    private readonly BicepValue<int> _maximumNumberOfMachines;

    /// <summary>
    /// Number of front-end instances.
    /// </summary>
    public BicepValue<int> MultiRoleCount { get => _multiRoleCount; }
    private readonly BicepValue<int> _multiRoleCount;

    /// <summary>
    /// Provisioning state of the App Service Environment.
    /// </summary>
    public BicepValue<ProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<ProvisioningState> _provisioningState;

    /// <summary>
    /// Current status of the App Service Environment.
    /// </summary>
    public BicepValue<HostingEnvironmentStatus> Status { get => _status; }
    private readonly BicepValue<HostingEnvironmentStatus> _status;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Whether an upgrade is available for this App Service Environment.
    /// </summary>
    public BicepValue<AppServiceEnvironmentUpgradeAvailability> UpgradeAvailability { get => _upgradeAvailability; }
    private readonly BicepValue<AppServiceEnvironmentUpgradeAvailability> _upgradeAvailability;

    /// <summary>
    /// Creates a new AppServiceEnvironment.
    /// </summary>
    /// <param name="resourceName">Name of the AppServiceEnvironment.</param>
    /// <param name="resourceVersion">Version of the AppServiceEnvironment.</param>
    public AppServiceEnvironment(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Web/hostingEnvironments", resourceVersion ?? "2024-04-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _clusterSettings = BicepList<AppServiceNameValuePair>.DefineProperty(this, "ClusterSettings", ["properties", "clusterSettings"]);
        _customDnsSuffixConfiguration = BicepValue<CustomDnsSuffixConfigurationData>.DefineProperty(this, "CustomDnsSuffixConfiguration", ["properties", "customDnsSuffixConfiguration"]);
        _dedicatedHostCount = BicepValue<int>.DefineProperty(this, "DedicatedHostCount", ["properties", "dedicatedHostCount"]);
        _dnsSuffix = BicepValue<string>.DefineProperty(this, "DnsSuffix", ["properties", "dnsSuffix"]);
        _frontEndScaleFactor = BicepValue<int>.DefineProperty(this, "FrontEndScaleFactor", ["properties", "frontEndScaleFactor"]);
        _internalLoadBalancingMode = BicepValue<LoadBalancingMode>.DefineProperty(this, "InternalLoadBalancingMode", ["properties", "internalLoadBalancingMode"]);
        _iPSslAddressCount = BicepValue<int>.DefineProperty(this, "IPSslAddressCount", ["properties", "ipsslAddressCount"]);
        _isZoneRedundant = BicepValue<bool>.DefineProperty(this, "IsZoneRedundant", ["properties", "zoneRedundant"]);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"]);
        _multiSize = BicepValue<string>.DefineProperty(this, "MultiSize", ["properties", "multiSize"]);
        _networkingConfiguration = BicepValue<AseV3NetworkingConfigurationData>.DefineProperty(this, "NetworkingConfiguration", ["properties", "networkingConfiguration"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _upgradePreference = BicepValue<AppServiceEnvironmentUpgradePreference>.DefineProperty(this, "UpgradePreference", ["properties", "upgradePreference"]);
        _userWhitelistedIPRanges = BicepList<string>.DefineProperty(this, "UserWhitelistedIPRanges", ["properties", "userWhitelistedIpRanges"]);
        _virtualNetwork = BicepValue<AppServiceVirtualNetworkProfile>.DefineProperty(this, "VirtualNetwork", ["properties", "virtualNetwork"]);
        _hasLinuxWorkers = BicepValue<bool>.DefineProperty(this, "HasLinuxWorkers", ["properties", "hasLinuxWorkers"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _isSuspended = BicepValue<bool>.DefineProperty(this, "IsSuspended", ["properties", "suspended"], isOutput: true);
        _maximumNumberOfMachines = BicepValue<int>.DefineProperty(this, "MaximumNumberOfMachines", ["properties", "maximumNumberOfMachines"], isOutput: true);
        _multiRoleCount = BicepValue<int>.DefineProperty(this, "MultiRoleCount", ["properties", "multiRoleCount"], isOutput: true);
        _provisioningState = BicepValue<ProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _status = BicepValue<HostingEnvironmentStatus>.DefineProperty(this, "Status", ["properties", "status"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _upgradeAvailability = BicepValue<AppServiceEnvironmentUpgradeAvailability>.DefineProperty(this, "UpgradeAvailability", ["properties", "upgradeAvailability"], isOutput: true);
    }

    /// <summary>
    /// Supported AppServiceEnvironment resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-04-01.
        /// </summary>
        public static readonly string V2024_04_01 = "2024-04-01";

        /// <summary>
        /// 2023-12-01.
        /// </summary>
        public static readonly string V2023_12_01 = "2023-12-01";

        /// <summary>
        /// 2023-01-01.
        /// </summary>
        public static readonly string V2023_01_01 = "2023-01-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-03-01.
        /// </summary>
        public static readonly string V2022_03_01 = "2022-03-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2021-01-15.
        /// </summary>
        public static readonly string V2021_01_15 = "2021-01-15";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2020-12-01.
        /// </summary>
        public static readonly string V2020_12_01 = "2020-12-01";

        /// <summary>
        /// 2020-10-01.
        /// </summary>
        public static readonly string V2020_10_01 = "2020-10-01";

        /// <summary>
        /// 2020-09-01.
        /// </summary>
        public static readonly string V2020_09_01 = "2020-09-01";

        /// <summary>
        /// 2020-06-01.
        /// </summary>
        public static readonly string V2020_06_01 = "2020-06-01";

        /// <summary>
        /// 2019-08-01.
        /// </summary>
        public static readonly string V2019_08_01 = "2019-08-01";

        /// <summary>
        /// 2019-02-01.
        /// </summary>
        public static readonly string V2019_02_01 = "2019-02-01";

        /// <summary>
        /// 2019-01-01.
        /// </summary>
        public static readonly string V2019_01_01 = "2019-01-01";

        /// <summary>
        /// 2018-11-01.
        /// </summary>
        public static readonly string V2018_11_01 = "2018-11-01";

        /// <summary>
        /// 2018-08-01.
        /// </summary>
        public static readonly string V2018_08_01 = "2018-08-01";

        /// <summary>
        /// 2018-02-01.
        /// </summary>
        public static readonly string V2018_02_01 = "2018-02-01";

        /// <summary>
        /// 2017-08-01.
        /// </summary>
        public static readonly string V2017_08_01 = "2017-08-01";

        /// <summary>
        /// 2016-09-01.
        /// </summary>
        public static readonly string V2016_09_01 = "2016-09-01";

        /// <summary>
        /// 2016-03-01.
        /// </summary>
        public static readonly string V2016_03_01 = "2016-03-01";

        /// <summary>
        /// 2015-08-01.
        /// </summary>
        public static readonly string V2015_08_01 = "2015-08-01";

        /// <summary>
        /// 2015-07-01.
        /// </summary>
        public static readonly string V2015_07_01 = "2015-07-01";

        /// <summary>
        /// 2015-06-01.
        /// </summary>
        public static readonly string V2015_06_01 = "2015-06-01";

        /// <summary>
        /// 2015-05-01.
        /// </summary>
        public static readonly string V2015_05_01 = "2015-05-01";

        /// <summary>
        /// 2015-04-01.
        /// </summary>
        public static readonly string V2015_04_01 = "2015-04-01";

        /// <summary>
        /// 2015-02-01.
        /// </summary>
        public static readonly string V2015_02_01 = "2015-02-01";

        /// <summary>
        /// 2014-11-01.
        /// </summary>
        public static readonly string V2014_11_01 = "2014-11-01";

        /// <summary>
        /// 2014-06-01.
        /// </summary>
        public static readonly string V2014_06_01 = "2014-06-01";

        /// <summary>
        /// 2014-04-01.
        /// </summary>
        public static readonly string V2014_04_01 = "2014-04-01";
    }

    /// <summary>
    /// Creates a reference to an existing AppServiceEnvironment.
    /// </summary>
    /// <param name="resourceName">Name of the AppServiceEnvironment.</param>
    /// <param name="resourceVersion">Version of the AppServiceEnvironment.</param>
    /// <returns>The existing AppServiceEnvironment resource.</returns>
    public static AppServiceEnvironment FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
