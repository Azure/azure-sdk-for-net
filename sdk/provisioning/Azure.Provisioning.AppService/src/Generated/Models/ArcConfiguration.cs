// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppService;

/// <summary>
/// The ArcConfiguration.
/// </summary>
public partial class ArcConfiguration : ProvisioningConstruct
{
    /// <summary>
    /// Gets or sets the artifacts storage type.
    /// </summary>
    public BicepValue<ArtifactStorageType> ArtifactsStorageType { get => _artifactsStorageType; set => _artifactsStorageType.Assign(value); }
    private readonly BicepValue<ArtifactStorageType> _artifactsStorageType;

    /// <summary>
    /// Gets or sets the artifact storage class name.
    /// </summary>
    public BicepValue<string> ArtifactStorageClassName { get => _artifactStorageClassName; set => _artifactStorageClassName.Assign(value); }
    private readonly BicepValue<string> _artifactStorageClassName;

    /// <summary>
    /// Gets or sets the artifact storage mount path.
    /// </summary>
    public BicepValue<string> ArtifactStorageMountPath { get => _artifactStorageMountPath; set => _artifactStorageMountPath.Assign(value); }
    private readonly BicepValue<string> _artifactStorageMountPath;

    /// <summary>
    /// Gets or sets the artifact storage node name.
    /// </summary>
    public BicepValue<string> ArtifactStorageNodeName { get => _artifactStorageNodeName; set => _artifactStorageNodeName.Assign(value); }
    private readonly BicepValue<string> _artifactStorageNodeName;

    /// <summary>
    /// Gets or sets the artifact storage access mode.
    /// </summary>
    public BicepValue<string> ArtifactStorageAccessMode { get => _artifactStorageAccessMode; set => _artifactStorageAccessMode.Assign(value); }
    private readonly BicepValue<string> _artifactStorageAccessMode;

    /// <summary>
    /// Gets or sets the front end service kind.
    /// </summary>
    public BicepValue<FrontEndServiceType> FrontEndServiceKind { get => _frontEndServiceKind; set => _frontEndServiceKind.Assign(value); }
    private readonly BicepValue<FrontEndServiceType> _frontEndServiceKind;

    /// <summary>
    /// Gets or sets the kube config.
    /// </summary>
    public BicepValue<string> KubeConfig { get => _kubeConfig; set => _kubeConfig.Assign(value); }
    private readonly BicepValue<string> _kubeConfig;

    /// <summary>
    /// Creates a new ArcConfiguration.
    /// </summary>
    public ArcConfiguration()
    {
        _artifactsStorageType = BicepValue<ArtifactStorageType>.DefineProperty(this, "ArtifactsStorageType", ["artifactsStorageType"]);
        _artifactStorageClassName = BicepValue<string>.DefineProperty(this, "ArtifactStorageClassName", ["artifactStorageClassName"]);
        _artifactStorageMountPath = BicepValue<string>.DefineProperty(this, "ArtifactStorageMountPath", ["artifactStorageMountPath"]);
        _artifactStorageNodeName = BicepValue<string>.DefineProperty(this, "ArtifactStorageNodeName", ["artifactStorageNodeName"]);
        _artifactStorageAccessMode = BicepValue<string>.DefineProperty(this, "ArtifactStorageAccessMode", ["artifactStorageAccessMode"]);
        _frontEndServiceKind = BicepValue<FrontEndServiceType>.DefineProperty(this, "FrontEndServiceKind", ["frontEndServiceConfiguration", "kind"]);
        _kubeConfig = BicepValue<string>.DefineProperty(this, "KubeConfig", ["kubeConfig"]);
    }
}
