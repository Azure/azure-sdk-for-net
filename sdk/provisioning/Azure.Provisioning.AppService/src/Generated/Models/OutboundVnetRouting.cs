// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppService;

/// <summary>
/// Outbound traffic options over virtual network.
/// </summary>
public partial class OutboundVnetRouting : ProvisionableConstruct
{
    /// <summary>
    /// Enables all other routing options defined in OutboundVnetRouting if
    /// this setting is set to true.
    /// </summary>
    public BicepValue<bool> IsAllTrafficEnabled 
    {
        get { Initialize(); return _isAllTrafficEnabled!; }
        set { Initialize(); _isAllTrafficEnabled!.Assign(value); }
    }
    private BicepValue<bool>? _isAllTrafficEnabled;

    /// <summary>
    /// This causes all outbound traffic to have Virtual Network Security
    /// Groups and User Defined Routes applied. Previously called
    /// VnetRouteAllEnabled.
    /// </summary>
    public BicepValue<bool> IsApplicationTrafficEnabled 
    {
        get { Initialize(); return _isApplicationTrafficEnabled!; }
        set { Initialize(); _isApplicationTrafficEnabled!.Assign(value); }
    }
    private BicepValue<bool>? _isApplicationTrafficEnabled;

    /// <summary>
    /// Enables accessing content over virtual network. Previously called
    /// VnetContentShareEnabled.
    /// </summary>
    public BicepValue<bool> IsContentShareTrafficEnabled 
    {
        get { Initialize(); return _isContentShareTrafficEnabled!; }
        set { Initialize(); _isContentShareTrafficEnabled!.Assign(value); }
    }
    private BicepValue<bool>? _isContentShareTrafficEnabled;

    /// <summary>
    /// Enables pulling image over Virtual Network. Previously called
    /// VnetImagePullEnabled.
    /// </summary>
    public BicepValue<bool> IsImagePullTrafficEnabled 
    {
        get { Initialize(); return _isImagePullTrafficEnabled!; }
        set { Initialize(); _isImagePullTrafficEnabled!.Assign(value); }
    }
    private BicepValue<bool>? _isImagePullTrafficEnabled;

    /// <summary>
    /// Enables Backup and Restore operations over virtual network. Previously
    /// called VnetBackupRestoreEnabled.
    /// </summary>
    public BicepValue<bool> IsBackupRestoreTrafficEnabled 
    {
        get { Initialize(); return _isBackupRestoreTrafficEnabled!; }
        set { Initialize(); _isBackupRestoreTrafficEnabled!.Assign(value); }
    }
    private BicepValue<bool>? _isBackupRestoreTrafficEnabled;

    /// <summary>
    /// Creates a new OutboundVnetRouting.
    /// </summary>
    public OutboundVnetRouting()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of OutboundVnetRouting.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _isAllTrafficEnabled = DefineProperty<bool>("IsAllTrafficEnabled", ["allTraffic"]);
        _isApplicationTrafficEnabled = DefineProperty<bool>("IsApplicationTrafficEnabled", ["applicationTraffic"]);
        _isContentShareTrafficEnabled = DefineProperty<bool>("IsContentShareTrafficEnabled", ["contentShareTraffic"]);
        _isImagePullTrafficEnabled = DefineProperty<bool>("IsImagePullTrafficEnabled", ["imagePullTraffic"]);
        _isBackupRestoreTrafficEnabled = DefineProperty<bool>("IsBackupRestoreTrafficEnabled", ["backupRestoreTraffic"]);
    }
}
