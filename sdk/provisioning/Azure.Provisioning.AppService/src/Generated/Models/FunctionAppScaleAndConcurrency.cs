// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppService;

/// <summary>
/// Scale and concurrency settings for the function app.
/// </summary>
public partial class FunctionAppScaleAndConcurrency : ProvisioningConstruct
{
    /// <summary>
    /// &apos;Always Ready&apos; configuration for the function app.
    /// </summary>
    public BicepList<FunctionAppAlwaysReadyConfig> AlwaysReady { get => _alwaysReady; set => _alwaysReady.Assign(value); }
    private readonly BicepList<FunctionAppAlwaysReadyConfig> _alwaysReady;

    /// <summary>
    /// The maximum number of instances for the function app.
    /// </summary>
    public BicepValue<float> MaximumInstanceCount { get => _maximumInstanceCount; set => _maximumInstanceCount.Assign(value); }
    private readonly BicepValue<float> _maximumInstanceCount;

    /// <summary>
    /// Set the amount of memory allocated to each instance of the function app
    /// in MB. CPU and network bandwidth are allocated proportionally.
    /// </summary>
    public BicepValue<float> InstanceMemoryMB { get => _instanceMemoryMB; set => _instanceMemoryMB.Assign(value); }
    private readonly BicepValue<float> _instanceMemoryMB;

    /// <summary>
    /// The maximum number of concurrent HTTP trigger invocations per instance.
    /// </summary>
    public BicepValue<float> HttpPerInstanceConcurrency { get => _httpPerInstanceConcurrency; set => _httpPerInstanceConcurrency.Assign(value); }
    private readonly BicepValue<float> _httpPerInstanceConcurrency;

    /// <summary>
    /// Creates a new FunctionAppScaleAndConcurrency.
    /// </summary>
    public FunctionAppScaleAndConcurrency()
    {
        _alwaysReady = BicepList<FunctionAppAlwaysReadyConfig>.DefineProperty(this, "AlwaysReady", ["alwaysReady"]);
        _maximumInstanceCount = BicepValue<float>.DefineProperty(this, "MaximumInstanceCount", ["maximumInstanceCount"]);
        _instanceMemoryMB = BicepValue<float>.DefineProperty(this, "InstanceMemoryMB", ["instanceMemoryMB"]);
        _httpPerInstanceConcurrency = BicepValue<float>.DefineProperty(this, "HttpPerInstanceConcurrency", ["triggers", "http", "perInstanceConcurrency"]);
    }
}
