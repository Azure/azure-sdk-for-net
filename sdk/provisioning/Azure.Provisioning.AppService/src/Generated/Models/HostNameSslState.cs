// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppService;

/// <summary>
/// SSL-enabled hostname.
/// </summary>
public partial class HostNameSslState : ProvisioningConstruct
{
    /// <summary>
    /// Hostname.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// SSL type.
    /// </summary>
    public BicepValue<HostNameBindingSslState> SslState { get => _sslState; set => _sslState.Assign(value); }
    private readonly BicepValue<HostNameBindingSslState> _sslState;

    /// <summary>
    /// Virtual IP address assigned to the hostname if IP based SSL is enabled.
    /// </summary>
    public BicepValue<string> VirtualIP { get => _virtualIP; set => _virtualIP.Assign(value); }
    private readonly BicepValue<string> _virtualIP;

    /// <summary>
    /// SSL certificate thumbprint.
    /// </summary>
    public BicepValue<string> ThumbprintString { get => _thumbprintString; set => _thumbprintString.Assign(value); }
    private readonly BicepValue<string> _thumbprintString;

    /// <summary>
    /// Set to &lt;code&gt;true&lt;/code&gt; to update existing hostname.
    /// </summary>
    public BicepValue<bool> ToUpdate { get => _toUpdate; set => _toUpdate.Assign(value); }
    private readonly BicepValue<bool> _toUpdate;

    /// <summary>
    /// Indicates whether the hostname is a standard or repository hostname.
    /// </summary>
    public BicepValue<AppServiceHostType> HostType { get => _hostType; set => _hostType.Assign(value); }
    private readonly BicepValue<AppServiceHostType> _hostType;

    /// <summary>
    /// Creates a new HostNameSslState.
    /// </summary>
    public HostNameSslState()
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"]);
        _sslState = BicepValue<HostNameBindingSslState>.DefineProperty(this, "SslState", ["sslState"]);
        _virtualIP = BicepValue<string>.DefineProperty(this, "VirtualIP", ["virtualIP"]);
        _thumbprintString = BicepValue<string>.DefineProperty(this, "ThumbprintString", ["thumbprint"]);
        _toUpdate = BicepValue<bool>.DefineProperty(this, "ToUpdate", ["toUpdate"]);
        _hostType = BicepValue<AppServiceHostType>.DefineProperty(this, "HostType", ["hostType"]);
    }
}
