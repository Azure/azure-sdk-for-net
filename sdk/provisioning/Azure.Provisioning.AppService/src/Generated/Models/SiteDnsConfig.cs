// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppService;

/// <summary>
/// The SiteDnsConfig.
/// </summary>
public partial class SiteDnsConfig : ProvisioningConstruct
{
    /// <summary>
    /// List of custom DNS servers to be used by an app for lookups. Maximum 5
    /// dns servers can be set.
    /// </summary>
    public BicepList<string> DnsServers { get => _dnsServers; set => _dnsServers.Assign(value); }
    private readonly BicepList<string> _dnsServers;

    /// <summary>
    /// Alternate DNS server to be used by apps. This property replicates the
    /// WEBSITE_DNS_ALT_SERVER app setting.
    /// </summary>
    public BicepValue<string> DnsAltServer { get => _dnsAltServer; set => _dnsAltServer.Assign(value); }
    private readonly BicepValue<string> _dnsAltServer;

    /// <summary>
    /// Timeout for a single dns lookup in seconds. Allowed range: 1-30.
    /// Default is 3.
    /// </summary>
    public BicepValue<int> DnsRetryAttemptTimeout { get => _dnsRetryAttemptTimeout; set => _dnsRetryAttemptTimeout.Assign(value); }
    private readonly BicepValue<int> _dnsRetryAttemptTimeout;

    /// <summary>
    /// Total number of retries for dns lookup. Allowed range: 1-5. Default is
    /// 3.
    /// </summary>
    public BicepValue<int> DnsRetryAttemptCount { get => _dnsRetryAttemptCount; set => _dnsRetryAttemptCount.Assign(value); }
    private readonly BicepValue<int> _dnsRetryAttemptCount;

    /// <summary>
    /// Custom time for DNS to be cached in seconds. Allowed range: 0-60.
    /// Default is 30 seconds. 0 means caching disabled.
    /// </summary>
    public BicepValue<int> DnsMaxCacheTimeout { get => _dnsMaxCacheTimeout; set => _dnsMaxCacheTimeout.Assign(value); }
    private readonly BicepValue<int> _dnsMaxCacheTimeout;

    /// <summary>
    /// Indicates that sites using Virtual network custom DNS servers are still
    /// sorting the list of DNS servers. Read-Only.
    /// </summary>
    public BicepValue<bool> DnsLegacySortOrder { get => _dnsLegacySortOrder; }
    private readonly BicepValue<bool> _dnsLegacySortOrder;

    /// <summary>
    /// Creates a new SiteDnsConfig.
    /// </summary>
    public SiteDnsConfig()
    {
        _dnsServers = BicepList<string>.DefineProperty(this, "DnsServers", ["dnsServers"]);
        _dnsAltServer = BicepValue<string>.DefineProperty(this, "DnsAltServer", ["dnsAltServer"]);
        _dnsRetryAttemptTimeout = BicepValue<int>.DefineProperty(this, "DnsRetryAttemptTimeout", ["dnsRetryAttemptTimeout"]);
        _dnsRetryAttemptCount = BicepValue<int>.DefineProperty(this, "DnsRetryAttemptCount", ["dnsRetryAttemptCount"]);
        _dnsMaxCacheTimeout = BicepValue<int>.DefineProperty(this, "DnsMaxCacheTimeout", ["dnsMaxCacheTimeout"]);
        _dnsLegacySortOrder = BicepValue<bool>.DefineProperty(this, "DnsLegacySortOrder", ["dnsLegacySortOrder"], isOutput: true);
    }
}
