// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppService;

/// <summary>
/// IP security restriction on an app.
/// </summary>
public partial class AppServiceIPSecurityRestriction : ProvisioningConstruct
{
    /// <summary>
    /// IP address the security restriction is valid for.             It can be
    /// in form of pure ipv4 address (required SubnetMask property) or
    /// CIDR notation such as ipv4/mask (leading bit match). For
    /// CIDR,             SubnetMask property must not be specified.
    /// </summary>
    public BicepValue<string> IPAddressOrCidr { get => _iPAddressOrCidr; set => _iPAddressOrCidr.Assign(value); }
    private readonly BicepValue<string> _iPAddressOrCidr;

    /// <summary>
    /// Subnet mask for the range of IP addresses the restriction is valid for.
    /// </summary>
    public BicepValue<string> SubnetMask { get => _subnetMask; set => _subnetMask.Assign(value); }
    private readonly BicepValue<string> _subnetMask;

    /// <summary>
    /// Virtual network resource id.
    /// </summary>
    public BicepValue<ResourceIdentifier> VnetSubnetResourceId { get => _vnetSubnetResourceId; set => _vnetSubnetResourceId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _vnetSubnetResourceId;

    /// <summary>
    /// (internal) Vnet traffic tag.
    /// </summary>
    public BicepValue<int> VnetTrafficTag { get => _vnetTrafficTag; set => _vnetTrafficTag.Assign(value); }
    private readonly BicepValue<int> _vnetTrafficTag;

    /// <summary>
    /// (internal) Subnet traffic tag.
    /// </summary>
    public BicepValue<int> SubnetTrafficTag { get => _subnetTrafficTag; set => _subnetTrafficTag.Assign(value); }
    private readonly BicepValue<int> _subnetTrafficTag;

    /// <summary>
    /// Allow or Deny access for this IP range.
    /// </summary>
    public BicepValue<string> Action { get => _action; set => _action.Assign(value); }
    private readonly BicepValue<string> _action;

    /// <summary>
    /// Defines what this IP filter will be used for. This is to support IP
    /// filtering on proxies.
    /// </summary>
    public BicepValue<AppServiceIPFilterTag> Tag { get => _tag; set => _tag.Assign(value); }
    private readonly BicepValue<AppServiceIPFilterTag> _tag;

    /// <summary>
    /// Priority of IP restriction rule.
    /// </summary>
    public BicepValue<int> Priority { get => _priority; set => _priority.Assign(value); }
    private readonly BicepValue<int> _priority;

    /// <summary>
    /// IP restriction rule name.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// IP restriction rule description.
    /// </summary>
    public BicepValue<string> Description { get => _description; set => _description.Assign(value); }
    private readonly BicepValue<string> _description;

    /// <summary>
    /// IP restriction rule headers.              X-Forwarded-Host
    /// (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).
    /// The matching logic is ..              - If the property
    /// is null or empty (default), all hosts(or lack of) are allowed.
    /// - A value is compared using ordinal-ignore-case
    /// (excluding port number).              - Subdomain wildcards are
    /// permitted but don&apos;t match the root domain. For example,
    /// *.contoso.com matches the subdomain foo.contoso.com               but
    /// not the root domain contoso.com or multi-level foo.bar.contoso.com
    /// - Unicode host names are allowed but are converted to
    /// Punycode for matching.                           X-Forwarded-For
    /// (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).
    /// The matching logic is ..              - If the property
    /// is null or empty (default), any forwarded-for chains (or lack of) are
    /// allowed.              - If any address (excluding port number) in the
    /// chain (comma separated) matches the CIDR defined by the property.
    /// X-Azure-FDID and X-FD-HealthProbe.
    /// The matching logic is exact match.
    /// </summary>
    public BicepDictionary<BicepList<string>> Headers { get => _headers; set => _headers.Assign(value); }
    private readonly BicepDictionary<BicepList<string>> _headers;

    /// <summary>
    /// Creates a new AppServiceIPSecurityRestriction.
    /// </summary>
    public AppServiceIPSecurityRestriction()
    {
        _iPAddressOrCidr = BicepValue<string>.DefineProperty(this, "IPAddressOrCidr", ["ipAddress"]);
        _subnetMask = BicepValue<string>.DefineProperty(this, "SubnetMask", ["subnetMask"]);
        _vnetSubnetResourceId = BicepValue<ResourceIdentifier>.DefineProperty(this, "VnetSubnetResourceId", ["vnetSubnetResourceId"]);
        _vnetTrafficTag = BicepValue<int>.DefineProperty(this, "VnetTrafficTag", ["vnetTrafficTag"]);
        _subnetTrafficTag = BicepValue<int>.DefineProperty(this, "SubnetTrafficTag", ["subnetTrafficTag"]);
        _action = BicepValue<string>.DefineProperty(this, "Action", ["action"]);
        _tag = BicepValue<AppServiceIPFilterTag>.DefineProperty(this, "Tag", ["tag"]);
        _priority = BicepValue<int>.DefineProperty(this, "Priority", ["priority"]);
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"]);
        _description = BicepValue<string>.DefineProperty(this, "Description", ["description"]);
        _headers = BicepDictionary<BicepList<string>>.DefineProperty(this, "Headers", ["headers"]);
    }
}
