// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.AppService;

/// <summary>
/// Routing rules for ramp up testing. This rule allows to redirect static
/// traffic % to a slot or to gradually change routing % based on performance.
/// </summary>
public partial class RampUpRule : ProvisioningConstruct
{
    /// <summary>
    /// Hostname of a slot to which the traffic will be redirected if decided
    /// to. E.g. myapp-stage.azurewebsites.net.
    /// </summary>
    public BicepValue<string> ActionHostName { get => _actionHostName; set => _actionHostName.Assign(value); }
    private readonly BicepValue<string> _actionHostName;

    /// <summary>
    /// Percentage of the traffic which will be redirected to
    /// &lt;code&gt;ActionHostName&lt;/code&gt;.
    /// </summary>
    public BicepValue<double> ReroutePercentage { get => _reroutePercentage; set => _reroutePercentage.Assign(value); }
    private readonly BicepValue<double> _reroutePercentage;

    /// <summary>
    /// In auto ramp up scenario this is the step to add/remove from
    /// &lt;code&gt;ReroutePercentage&lt;/code&gt; until it reaches
    /// \n&lt;code&gt;MinReroutePercentage&lt;/code&gt; or
    /// &lt;code&gt;MaxReroutePercentage&lt;/code&gt;. Site
    /// metrics are checked every N minutes specified in
    /// &lt;code&gt;ChangeIntervalInMinutes&lt;/code&gt;.\nCustom decision
    /// algorithm             can be provided in TiPCallback site extension
    /// which URL can be specified in
    /// &lt;code&gt;ChangeDecisionCallbackUrl&lt;/code&gt;.
    /// </summary>
    public BicepValue<double> ChangeStep { get => _changeStep; set => _changeStep.Assign(value); }
    private readonly BicepValue<double> _changeStep;

    /// <summary>
    /// Specifies interval in minutes to reevaluate ReroutePercentage.
    /// </summary>
    public BicepValue<int> ChangeIntervalInMinutes { get => _changeIntervalInMinutes; set => _changeIntervalInMinutes.Assign(value); }
    private readonly BicepValue<int> _changeIntervalInMinutes;

    /// <summary>
    /// Specifies lower boundary above which ReroutePercentage will stay.
    /// </summary>
    public BicepValue<double> MinReroutePercentage { get => _minReroutePercentage; set => _minReroutePercentage.Assign(value); }
    private readonly BicepValue<double> _minReroutePercentage;

    /// <summary>
    /// Specifies upper boundary below which ReroutePercentage will stay.
    /// </summary>
    public BicepValue<double> MaxReroutePercentage { get => _maxReroutePercentage; set => _maxReroutePercentage.Assign(value); }
    private readonly BicepValue<double> _maxReroutePercentage;

    /// <summary>
    /// Custom decision algorithm can be provided in TiPCallback site extension
    /// which URL can be specified. See TiPCallback site extension for the
    /// scaffold and contracts.
    /// https://www.siteextensions.net/packages/TiPCallback/
    /// </summary>
    public BicepValue<Uri> ChangeDecisionCallbackUri { get => _changeDecisionCallbackUri; set => _changeDecisionCallbackUri.Assign(value); }
    private readonly BicepValue<Uri> _changeDecisionCallbackUri;

    /// <summary>
    /// Name of the routing rule. The recommended name would be to point to the
    /// slot which will receive the traffic in the experiment.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Creates a new RampUpRule.
    /// </summary>
    public RampUpRule()
    {
        _actionHostName = BicepValue<string>.DefineProperty(this, "ActionHostName", ["actionHostName"]);
        _reroutePercentage = BicepValue<double>.DefineProperty(this, "ReroutePercentage", ["reroutePercentage"]);
        _changeStep = BicepValue<double>.DefineProperty(this, "ChangeStep", ["changeStep"]);
        _changeIntervalInMinutes = BicepValue<int>.DefineProperty(this, "ChangeIntervalInMinutes", ["changeIntervalInMinutes"]);
        _minReroutePercentage = BicepValue<double>.DefineProperty(this, "MinReroutePercentage", ["minReroutePercentage"]);
        _maxReroutePercentage = BicepValue<double>.DefineProperty(this, "MaxReroutePercentage", ["maxReroutePercentage"]);
        _changeDecisionCallbackUri = BicepValue<Uri>.DefineProperty(this, "ChangeDecisionCallbackUri", ["changeDecisionCallbackUrl"]);
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"]);
    }
}
