// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.AppService;

/// <summary>
/// AppServiceCertificate.
/// </summary>
public partial class AppServiceCertificate : Resource
{
    /// <summary>
    /// Name of the certificate.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Key Vault resource Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> KeyVaultId { get => _keyVaultId; set => _keyVaultId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _keyVaultId;

    /// <summary>
    /// Key Vault secret name.
    /// </summary>
    public BicepValue<string> KeyVaultSecretName { get => _keyVaultSecretName; set => _keyVaultSecretName.Assign(value); }
    private readonly BicepValue<string> _keyVaultSecretName;

    /// <summary>
    /// Kind of resource.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; set => _kind.Assign(value); }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Status of the Key Vault secret.
    /// </summary>
    public BicepValue<KeyVaultSecretStatus> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<KeyVaultSecretStatus> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent AppServiceCertificateOrder.
    /// </summary>
    public AppServiceCertificateOrder? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<AppServiceCertificateOrder> _parent;

    /// <summary>
    /// Creates a new AppServiceCertificate.
    /// </summary>
    /// <param name="resourceName">Name of the AppServiceCertificate.</param>
    /// <param name="resourceVersion">Version of the AppServiceCertificate.</param>
    /// <param name="context">Provisioning context for this resource.</param>
    public AppServiceCertificate(string resourceName, string? resourceVersion = default, ProvisioningContext? context = default)
        : base(resourceName, "Microsoft.CertificateRegistration/certificateOrders/certificates", resourceVersion, context)
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _keyVaultId = BicepValue<ResourceIdentifier>.DefineProperty(this, "KeyVaultId", ["properties", "keyVaultId"]);
        _keyVaultSecretName = BicepValue<string>.DefineProperty(this, "KeyVaultSecretName", ["properties", "keyVaultSecretName"]);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningState = BicepValue<KeyVaultSecretStatus>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<AppServiceCertificateOrder>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Creates a reference to an existing AppServiceCertificate.
    /// </summary>
    /// <param name="resourceName">Name of the AppServiceCertificate.</param>
    /// <param name="resourceVersion">Version of the AppServiceCertificate.</param>
    /// <returns>The existing AppServiceCertificate resource.</returns>
    public static AppServiceCertificate FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
