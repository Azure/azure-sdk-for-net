// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.AppService;

/// <summary>
/// AppServicePlan.
/// </summary>
public partial class AppServicePlan : Resource
{
    /// <summary>
    /// Name of the App Service plan.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Extended Location.
    /// </summary>
    public BicepValue<ExtendedAzureLocation> ExtendedLocation { get => _extendedLocation; set => _extendedLocation.Assign(value); }
    private readonly BicepValue<ExtendedAzureLocation> _extendedLocation;

    /// <summary>
    /// The time when the server farm free offer expires.
    /// </summary>
    public BicepValue<DateTimeOffset> FreeOfferExpireOn { get => _freeOfferExpireOn; set => _freeOfferExpireOn.Assign(value); }
    private readonly BicepValue<DateTimeOffset> _freeOfferExpireOn;

    /// <summary>
    /// Specification for the App Service Environment to use for the App
    /// Service plan.
    /// </summary>
    public BicepValue<HostingEnvironmentProfile> HostingEnvironmentProfile { get => _hostingEnvironmentProfile; set => _hostingEnvironmentProfile.Assign(value); }
    private readonly BicepValue<HostingEnvironmentProfile> _hostingEnvironmentProfile;

    /// <summary>
    /// ServerFarm supports ElasticScale. Apps in this plan will scale as if
    /// the ServerFarm was ElasticPremium sku.
    /// </summary>
    public BicepValue<bool> IsElasticScaleEnabled { get => _isElasticScaleEnabled; set => _isElasticScaleEnabled.Assign(value); }
    private readonly BicepValue<bool> _isElasticScaleEnabled;

    /// <summary>
    /// If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;,
    /// &lt;code&gt;false&lt;/code&gt; otherwise.
    /// </summary>
    public BicepValue<bool> IsHyperV { get => _isHyperV; set => _isHyperV.Assign(value); }
    private readonly BicepValue<bool> _isHyperV;

    /// <summary>
    /// If &lt;code&gt;true&lt;/code&gt;, apps assigned to this App Service
    /// plan can be scaled independently.             If
    /// &lt;code&gt;false&lt;/code&gt;, apps assigned to this App Service plan
    /// will scale to all instances of the plan.
    /// </summary>
    public BicepValue<bool> IsPerSiteScaling { get => _isPerSiteScaling; set => _isPerSiteScaling.Assign(value); }
    private readonly BicepValue<bool> _isPerSiteScaling;

    /// <summary>
    /// If Linux app service plan &lt;code&gt;true&lt;/code&gt;,
    /// &lt;code&gt;false&lt;/code&gt; otherwise.
    /// </summary>
    public BicepValue<bool> IsReserved { get => _isReserved; set => _isReserved.Assign(value); }
    private readonly BicepValue<bool> _isReserved;

    /// <summary>
    /// If &lt;code&gt;true&lt;/code&gt;, this App Service Plan owns spot
    /// instances.
    /// </summary>
    public BicepValue<bool> IsSpot { get => _isSpot; set => _isSpot.Assign(value); }
    private readonly BicepValue<bool> _isSpot;

    /// <summary>
    /// Obsolete: If Hyper-V container app service plan
    /// &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;
    /// otherwise.
    /// </summary>
    public BicepValue<bool> IsXenon { get => _isXenon; set => _isXenon.Assign(value); }
    private readonly BicepValue<bool> _isXenon;

    /// <summary>
    /// If &lt;code&gt;true&lt;/code&gt;, this App Service Plan will perform
    /// availability zone balancing.             If
    /// &lt;code&gt;false&lt;/code&gt;, this App Service Plan will not perform
    /// availability zone balancing.
    /// </summary>
    public BicepValue<bool> IsZoneRedundant { get => _isZoneRedundant; set => _isZoneRedundant.Assign(value); }
    private readonly BicepValue<bool> _isZoneRedundant;

    /// <summary>
    /// Kind of resource.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; set => _kind.Assign(value); }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// Specification for the Kubernetes Environment to use for the App Service
    /// plan.
    /// </summary>
    public BicepValue<KubeEnvironmentProfile> KubeEnvironmentProfile { get => _kubeEnvironmentProfile; set => _kubeEnvironmentProfile.Assign(value); }
    private readonly BicepValue<KubeEnvironmentProfile> _kubeEnvironmentProfile;

    /// <summary>
    /// Maximum number of total workers allowed for this ElasticScaleEnabled
    /// App Service Plan.
    /// </summary>
    public BicepValue<int> MaximumElasticWorkerCount { get => _maximumElasticWorkerCount; set => _maximumElasticWorkerCount.Assign(value); }
    private readonly BicepValue<int> _maximumElasticWorkerCount;

    /// <summary>
    /// Description of a SKU for a scalable resource.
    /// </summary>
    public BicepValue<AppServiceSkuDescription> Sku { get => _sku; set => _sku.Assign(value); }
    private readonly BicepValue<AppServiceSkuDescription> _sku;

    /// <summary>
    /// The time when the server farm expires. Valid only if it is a spot
    /// server farm.
    /// </summary>
    public BicepValue<DateTimeOffset> SpotExpireOn { get => _spotExpireOn; set => _spotExpireOn.Assign(value); }
    private readonly BicepValue<DateTimeOffset> _spotExpireOn;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Scaling worker count.
    /// </summary>
    public BicepValue<int> TargetWorkerCount { get => _targetWorkerCount; set => _targetWorkerCount.Assign(value); }
    private readonly BicepValue<int> _targetWorkerCount;

    /// <summary>
    /// Scaling worker size ID.
    /// </summary>
    public BicepValue<int> TargetWorkerSizeId { get => _targetWorkerSizeId; set => _targetWorkerSizeId.Assign(value); }
    private readonly BicepValue<int> _targetWorkerSizeId;

    /// <summary>
    /// Target worker tier assigned to the App Service plan.
    /// </summary>
    public BicepValue<string> WorkerTierName { get => _workerTierName; set => _workerTierName.Assign(value); }
    private readonly BicepValue<string> _workerTierName;

    /// <summary>
    /// Geographical location for the App Service plan.
    /// </summary>
    public BicepValue<string> GeoRegion { get => _geoRegion; }
    private readonly BicepValue<string> _geoRegion;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Maximum number of instances that can be assigned to this App Service
    /// plan.
    /// </summary>
    public BicepValue<int> MaximumNumberOfWorkers { get => _maximumNumberOfWorkers; }
    private readonly BicepValue<int> _maximumNumberOfWorkers;

    /// <summary>
    /// Number of apps assigned to this App Service plan.
    /// </summary>
    public BicepValue<int> NumberOfSites { get => _numberOfSites; }
    private readonly BicepValue<int> _numberOfSites;

    /// <summary>
    /// The number of instances that are assigned to this App Service plan.
    /// </summary>
    public BicepValue<int> NumberOfWorkers { get => _numberOfWorkers; }
    private readonly BicepValue<int> _numberOfWorkers;

    /// <summary>
    /// Provisioning state of the App Service Plan.
    /// </summary>
    public BicepValue<ProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<ProvisioningState> _provisioningState;

    /// <summary>
    /// Resource group of the App Service plan.
    /// </summary>
    public BicepValue<string> ResourceGroup { get => _resourceGroup; }
    private readonly BicepValue<string> _resourceGroup;

    /// <summary>
    /// App Service plan status.
    /// </summary>
    public BicepValue<AppServicePlanStatus> Status { get => _status; }
    private readonly BicepValue<AppServicePlanStatus> _status;

    /// <summary>
    /// App Service plan subscription.
    /// </summary>
    public BicepValue<string> Subscription { get => _subscription; }
    private readonly BicepValue<string> _subscription;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new AppServicePlan.
    /// </summary>
    /// <param name="resourceName">Name of the AppServicePlan.</param>
    /// <param name="resourceVersion">Version of the AppServicePlan.</param>
    /// <param name="context">Provisioning context for this resource.</param>
    public AppServicePlan(string resourceName, string? resourceVersion = default, ProvisioningContext? context = default)
        : base(resourceName, "Microsoft.Web/serverfarms", resourceVersion, context)
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _extendedLocation = BicepValue<ExtendedAzureLocation>.DefineProperty(this, "ExtendedLocation", ["extendedLocation"]);
        _freeOfferExpireOn = BicepValue<DateTimeOffset>.DefineProperty(this, "FreeOfferExpireOn", ["properties", "freeOfferExpirationTime"]);
        _hostingEnvironmentProfile = BicepValue<HostingEnvironmentProfile>.DefineProperty(this, "HostingEnvironmentProfile", ["properties", "hostingEnvironmentProfile"]);
        _isElasticScaleEnabled = BicepValue<bool>.DefineProperty(this, "IsElasticScaleEnabled", ["properties", "elasticScaleEnabled"]);
        _isHyperV = BicepValue<bool>.DefineProperty(this, "IsHyperV", ["properties", "hyperV"]);
        _isPerSiteScaling = BicepValue<bool>.DefineProperty(this, "IsPerSiteScaling", ["properties", "perSiteScaling"]);
        _isReserved = BicepValue<bool>.DefineProperty(this, "IsReserved", ["properties", "reserved"]);
        _isSpot = BicepValue<bool>.DefineProperty(this, "IsSpot", ["properties", "isSpot"]);
        _isXenon = BicepValue<bool>.DefineProperty(this, "IsXenon", ["properties", "isXenon"]);
        _isZoneRedundant = BicepValue<bool>.DefineProperty(this, "IsZoneRedundant", ["properties", "zoneRedundant"]);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"]);
        _kubeEnvironmentProfile = BicepValue<KubeEnvironmentProfile>.DefineProperty(this, "KubeEnvironmentProfile", ["properties", "kubeEnvironmentProfile"]);
        _maximumElasticWorkerCount = BicepValue<int>.DefineProperty(this, "MaximumElasticWorkerCount", ["properties", "maximumElasticWorkerCount"]);
        _sku = BicepValue<AppServiceSkuDescription>.DefineProperty(this, "Sku", ["sku"]);
        _spotExpireOn = BicepValue<DateTimeOffset>.DefineProperty(this, "SpotExpireOn", ["properties", "spotExpirationTime"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _targetWorkerCount = BicepValue<int>.DefineProperty(this, "TargetWorkerCount", ["properties", "targetWorkerCount"]);
        _targetWorkerSizeId = BicepValue<int>.DefineProperty(this, "TargetWorkerSizeId", ["properties", "targetWorkerSizeId"]);
        _workerTierName = BicepValue<string>.DefineProperty(this, "WorkerTierName", ["properties", "workerTierName"]);
        _geoRegion = BicepValue<string>.DefineProperty(this, "GeoRegion", ["properties", "geoRegion"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _maximumNumberOfWorkers = BicepValue<int>.DefineProperty(this, "MaximumNumberOfWorkers", ["properties", "maximumNumberOfWorkers"], isOutput: true);
        _numberOfSites = BicepValue<int>.DefineProperty(this, "NumberOfSites", ["properties", "numberOfSites"], isOutput: true);
        _numberOfWorkers = BicepValue<int>.DefineProperty(this, "NumberOfWorkers", ["properties", "numberOfWorkers"], isOutput: true);
        _provisioningState = BicepValue<ProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _resourceGroup = BicepValue<string>.DefineProperty(this, "ResourceGroup", ["properties", "resourceGroup"], isOutput: true);
        _status = BicepValue<AppServicePlanStatus>.DefineProperty(this, "Status", ["properties", "status"], isOutput: true);
        _subscription = BicepValue<string>.DefineProperty(this, "Subscription", ["properties", "subscription"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Creates a reference to an existing AppServicePlan.
    /// </summary>
    /// <param name="resourceName">Name of the AppServicePlan.</param>
    /// <param name="resourceVersion">Version of the AppServicePlan.</param>
    /// <returns>The existing AppServicePlan resource.</returns>
    public static AppServicePlan FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this AppServicePlan resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 60, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen);
}
