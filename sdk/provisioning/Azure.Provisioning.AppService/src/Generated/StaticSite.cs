// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.AppService;

/// <summary>
/// StaticSite.
/// </summary>
public partial class StaticSite : Resource
{
    /// <summary>
    /// Name of the static site to create or update.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// &lt;code&gt;false&lt;/code&gt; if config file is locked for this static
    /// web app; otherwise, &lt;code&gt;true&lt;/code&gt;.
    /// </summary>
    public BicepValue<bool> AllowConfigFileUpdates { get => _allowConfigFileUpdates; set => _allowConfigFileUpdates.Assign(value); }
    private readonly BicepValue<bool> _allowConfigFileUpdates;

    /// <summary>
    /// The target branch in the repository.
    /// </summary>
    public BicepValue<string> Branch { get => _branch; set => _branch.Assign(value); }
    private readonly BicepValue<string> _branch;

    /// <summary>
    /// Build properties to configure on the repository.
    /// </summary>
    public BicepValue<StaticSiteBuildProperties> BuildProperties { get => _buildProperties; set => _buildProperties.Assign(value); }
    private readonly BicepValue<StaticSiteBuildProperties> _buildProperties;

    /// <summary>
    /// State indicating the status of the enterprise grade CDN serving traffic
    /// to the static web app.
    /// </summary>
    public BicepValue<EnterpriseGradeCdnStatus> EnterpriseGradeCdnStatus { get => _enterpriseGradeCdnStatus; set => _enterpriseGradeCdnStatus.Assign(value); }
    private readonly BicepValue<EnterpriseGradeCdnStatus> _enterpriseGradeCdnStatus;

    /// <summary>
    /// Managed service identity.
    /// </summary>
    public BicepValue<ManagedServiceIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<ManagedServiceIdentity> _identity;

    /// <summary>
    /// Kind of resource.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; set => _kind.Assign(value); }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// The provider that submitted the last deployment to the primary
    /// environment of the static site.
    /// </summary>
    public BicepValue<string> Provider { get => _provider; set => _provider.Assign(value); }
    private readonly BicepValue<string> _provider;

    /// <summary>
    /// State indicating whether public traffic are allowed or not for a static
    /// web app. Allowed Values: &apos;Enabled&apos;, &apos;Disabled&apos; or
    /// an empty string.
    /// </summary>
    public BicepValue<string> PublicNetworkAccess { get => _publicNetworkAccess; set => _publicNetworkAccess.Assign(value); }
    private readonly BicepValue<string> _publicNetworkAccess;

    /// <summary>
    /// A user&apos;s github repository token. This is used to setup the Github
    /// Actions workflow file and API secrets.
    /// </summary>
    public BicepValue<string> RepositoryToken { get => _repositoryToken; set => _repositoryToken.Assign(value); }
    private readonly BicepValue<string> _repositoryToken;

    /// <summary>
    /// URL for the repository of the static site.
    /// </summary>
    public BicepValue<Uri> RepositoryUri { get => _repositoryUri; set => _repositoryUri.Assign(value); }
    private readonly BicepValue<Uri> _repositoryUri;

    /// <summary>
    /// Description of a SKU for a scalable resource.
    /// </summary>
    public BicepValue<AppServiceSkuDescription> Sku { get => _sku; set => _sku.Assign(value); }
    private readonly BicepValue<AppServiceSkuDescription> _sku;

    /// <summary>
    /// State indicating whether staging environments are allowed or not
    /// allowed for a static web app.
    /// </summary>
    public BicepValue<StagingEnvironmentPolicy> StagingEnvironmentPolicy { get => _stagingEnvironmentPolicy; set => _stagingEnvironmentPolicy.Assign(value); }
    private readonly BicepValue<StagingEnvironmentPolicy> _stagingEnvironmentPolicy;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Template options for generating a new repository.
    /// </summary>
    public BicepValue<StaticSiteTemplate> TemplateProperties { get => _templateProperties; set => _templateProperties.Assign(value); }
    private readonly BicepValue<StaticSiteTemplate> _templateProperties;

    /// <summary>
    /// The content distribution endpoint for the static site.
    /// </summary>
    public BicepValue<string> ContentDistributionEndpoint { get => _contentDistributionEndpoint; }
    private readonly BicepValue<string> _contentDistributionEndpoint;

    /// <summary>
    /// The custom domains associated with this static site.
    /// </summary>
    public BicepList<string> CustomDomains { get => _customDomains; }
    private readonly BicepList<string> _customDomains;

    /// <summary>
    /// Database connections for the static site.
    /// </summary>
    public BicepList<StaticSiteDatabaseConnectionOverview> DatabaseConnections { get => _databaseConnections; }
    private readonly BicepList<StaticSiteDatabaseConnectionOverview> _databaseConnections;

    /// <summary>
    /// The default autogenerated hostname for the static site.
    /// </summary>
    public BicepValue<string> DefaultHostname { get => _defaultHostname; }
    private readonly BicepValue<string> _defaultHostname;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Identity to use for Key Vault Reference authentication.
    /// </summary>
    public BicepValue<string> KeyVaultReferenceIdentity { get => _keyVaultReferenceIdentity; }
    private readonly BicepValue<string> _keyVaultReferenceIdentity;

    /// <summary>
    /// Backends linked to the static side.
    /// </summary>
    public BicepList<StaticSiteLinkedBackendInfo> LinkedBackends { get => _linkedBackends; }
    private readonly BicepList<StaticSiteLinkedBackendInfo> _linkedBackends;

    /// <summary>
    /// Private endpoint connections.
    /// </summary>
    public BicepList<ResponseMessageEnvelopeRemotePrivateEndpointConnection> PrivateEndpointConnections { get => _privateEndpointConnections; }
    private readonly BicepList<ResponseMessageEnvelopeRemotePrivateEndpointConnection> _privateEndpointConnections;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// User provided function apps registered with the static site.
    /// </summary>
    public BicepList<StaticSiteUserProvidedFunctionAppData> UserProvidedFunctionApps { get => _userProvidedFunctionApps; }
    private readonly BicepList<StaticSiteUserProvidedFunctionAppData> _userProvidedFunctionApps;

    /// <summary>
    /// Creates a new StaticSite.
    /// </summary>
    /// <param name="resourceName">Name of the StaticSite.</param>
    /// <param name="resourceVersion">Version of the StaticSite.</param>
    public StaticSite(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Web/staticSites", resourceVersion ?? "2024-04-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _allowConfigFileUpdates = BicepValue<bool>.DefineProperty(this, "AllowConfigFileUpdates", ["properties", "allowConfigFileUpdates"]);
        _branch = BicepValue<string>.DefineProperty(this, "Branch", ["properties", "branch"]);
        _buildProperties = BicepValue<StaticSiteBuildProperties>.DefineProperty(this, "BuildProperties", ["properties", "buildProperties"]);
        _enterpriseGradeCdnStatus = BicepValue<EnterpriseGradeCdnStatus>.DefineProperty(this, "EnterpriseGradeCdnStatus", ["properties", "enterpriseGradeCdnStatus"]);
        _identity = BicepValue<ManagedServiceIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"]);
        _provider = BicepValue<string>.DefineProperty(this, "Provider", ["properties", "provider"]);
        _publicNetworkAccess = BicepValue<string>.DefineProperty(this, "PublicNetworkAccess", ["properties", "publicNetworkAccess"]);
        _repositoryToken = BicepValue<string>.DefineProperty(this, "RepositoryToken", ["properties", "repositoryToken"]);
        _repositoryUri = BicepValue<Uri>.DefineProperty(this, "RepositoryUri", ["properties", "repositoryUrl"]);
        _sku = BicepValue<AppServiceSkuDescription>.DefineProperty(this, "Sku", ["sku"]);
        _stagingEnvironmentPolicy = BicepValue<StagingEnvironmentPolicy>.DefineProperty(this, "StagingEnvironmentPolicy", ["properties", "stagingEnvironmentPolicy"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _templateProperties = BicepValue<StaticSiteTemplate>.DefineProperty(this, "TemplateProperties", ["properties", "templateProperties"]);
        _contentDistributionEndpoint = BicepValue<string>.DefineProperty(this, "ContentDistributionEndpoint", ["properties", "contentDistributionEndpoint"], isOutput: true);
        _customDomains = BicepList<string>.DefineProperty(this, "CustomDomains", ["properties", "customDomains"], isOutput: true);
        _databaseConnections = BicepList<StaticSiteDatabaseConnectionOverview>.DefineProperty(this, "DatabaseConnections", ["properties", "databaseConnections"], isOutput: true);
        _defaultHostname = BicepValue<string>.DefineProperty(this, "DefaultHostname", ["properties", "defaultHostname"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _keyVaultReferenceIdentity = BicepValue<string>.DefineProperty(this, "KeyVaultReferenceIdentity", ["properties", "keyVaultReferenceIdentity"], isOutput: true);
        _linkedBackends = BicepList<StaticSiteLinkedBackendInfo>.DefineProperty(this, "LinkedBackends", ["properties", "linkedBackends"], isOutput: true);
        _privateEndpointConnections = BicepList<ResponseMessageEnvelopeRemotePrivateEndpointConnection>.DefineProperty(this, "PrivateEndpointConnections", ["properties", "privateEndpointConnections"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _userProvidedFunctionApps = BicepList<StaticSiteUserProvidedFunctionAppData>.DefineProperty(this, "UserProvidedFunctionApps", ["properties", "userProvidedFunctionApps"], isOutput: true);
    }

    /// <summary>
    /// Supported StaticSite resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-04-01.
        /// </summary>
        public static readonly string V2024_04_01 = "2024-04-01";

        /// <summary>
        /// 2023-12-01.
        /// </summary>
        public static readonly string V2023_12_01 = "2023-12-01";

        /// <summary>
        /// 2023-01-01.
        /// </summary>
        public static readonly string V2023_01_01 = "2023-01-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-03-01.
        /// </summary>
        public static readonly string V2022_03_01 = "2022-03-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2021-01-15.
        /// </summary>
        public static readonly string V2021_01_15 = "2021-01-15";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2020-12-01.
        /// </summary>
        public static readonly string V2020_12_01 = "2020-12-01";

        /// <summary>
        /// 2020-10-01.
        /// </summary>
        public static readonly string V2020_10_01 = "2020-10-01";

        /// <summary>
        /// 2020-09-01.
        /// </summary>
        public static readonly string V2020_09_01 = "2020-09-01";

        /// <summary>
        /// 2020-06-01.
        /// </summary>
        public static readonly string V2020_06_01 = "2020-06-01";

        /// <summary>
        /// 2019-08-01.
        /// </summary>
        public static readonly string V2019_08_01 = "2019-08-01";
    }

    /// <summary>
    /// Creates a reference to an existing StaticSite.
    /// </summary>
    /// <param name="resourceName">Name of the StaticSite.</param>
    /// <param name="resourceVersion">Version of the StaticSite.</param>
    /// <returns>The existing StaticSite resource.</returns>
    public static StaticSite FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
