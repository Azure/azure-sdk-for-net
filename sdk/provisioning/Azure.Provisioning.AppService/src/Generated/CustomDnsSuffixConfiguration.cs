// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.AppService;

/// <summary>
/// CustomDnsSuffixConfiguration.
/// </summary>
public partial class CustomDnsSuffixConfiguration : Resource
{
    /// <summary>
    /// Gets the Name.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The URL referencing the Azure Key Vault certificate secret that should
    /// be used as the default SSL/TLS certificate for sites with the custom
    /// domain suffix.
    /// </summary>
    public BicepValue<Uri> CertificateUri { get => _certificateUri; set => _certificateUri.Assign(value); }
    private readonly BicepValue<Uri> _certificateUri;

    /// <summary>
    /// The default custom domain suffix to use for all sites deployed on the
    /// ASE.
    /// </summary>
    public BicepValue<string> DnsSuffix { get => _dnsSuffix; set => _dnsSuffix.Assign(value); }
    private readonly BicepValue<string> _dnsSuffix;

    /// <summary>
    /// The user-assigned identity to use for resolving the key vault
    /// certificate reference. If not specified, the system-assigned ASE
    /// identity will be used if available.
    /// </summary>
    public BicepValue<string> KeyVaultReferenceIdentity { get => _keyVaultReferenceIdentity; set => _keyVaultReferenceIdentity.Assign(value); }
    private readonly BicepValue<string> _keyVaultReferenceIdentity;

    /// <summary>
    /// Kind of resource.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; set => _kind.Assign(value); }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the provisioning details.
    /// </summary>
    public BicepValue<string> ProvisioningDetails { get => _provisioningDetails; }
    private readonly BicepValue<string> _provisioningDetails;

    /// <summary>
    /// Gets the provisioning state.
    /// </summary>
    public BicepValue<CustomDnsSuffixProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<CustomDnsSuffixProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent AppServiceEnvironment.
    /// </summary>
    public AppServiceEnvironment? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<AppServiceEnvironment> _parent;

    /// <summary>
    /// Creates a new CustomDnsSuffixConfiguration.
    /// </summary>
    /// <param name="resourceName">Name of the CustomDnsSuffixConfiguration.</param>
    /// <param name="resourceVersion">Version of the CustomDnsSuffixConfiguration.</param>
    /// <param name="context">Provisioning context for this resource.</param>
    public CustomDnsSuffixConfiguration(string resourceName, string? resourceVersion = default, ProvisioningContext? context = default)
        : base(resourceName, "Microsoft.Web/hostingEnvironments/configurations", resourceVersion, context)
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _certificateUri = BicepValue<Uri>.DefineProperty(this, "CertificateUri", ["properties", "certificateUrl"]);
        _dnsSuffix = BicepValue<string>.DefineProperty(this, "DnsSuffix", ["properties", "dnsSuffix"]);
        _keyVaultReferenceIdentity = BicepValue<string>.DefineProperty(this, "KeyVaultReferenceIdentity", ["properties", "keyVaultReferenceIdentity"]);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningDetails = BicepValue<string>.DefineProperty(this, "ProvisioningDetails", ["properties", "provisioningDetails"], isOutput: true);
        _provisioningState = BicepValue<CustomDnsSuffixProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<AppServiceEnvironment>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Creates a reference to an existing CustomDnsSuffixConfiguration.
    /// </summary>
    /// <param name="resourceName">Name of the CustomDnsSuffixConfiguration.</param>
    /// <param name="resourceVersion">Version of the CustomDnsSuffixConfiguration.</param>
    /// <returns>The existing CustomDnsSuffixConfiguration resource.</returns>
    public static CustomDnsSuffixConfiguration FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
