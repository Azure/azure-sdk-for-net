// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Sql;

/// <summary>
/// ManagedLedgerDigestUpload.
/// </summary>
public partial class ManagedLedgerDigestUpload : Resource
{
    /// <summary>
    /// Gets the Name.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The digest storage endpoint, which must be either an Azure blob storage
    /// endpoint or an URI for Azure Confidential Ledger.
    /// </summary>
    public BicepValue<string> DigestStorageEndpoint { get => _digestStorageEndpoint; set => _digestStorageEndpoint.Assign(value); }
    private readonly BicepValue<string> _digestStorageEndpoint;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Specifies the state of ledger digest upload.
    /// </summary>
    public BicepValue<ManagedLedgerDigestUploadsState> State { get => _state; }
    private readonly BicepValue<ManagedLedgerDigestUploadsState> _state;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent ManagedDatabase.
    /// </summary>
    public ManagedDatabase? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<ManagedDatabase> _parent;

    /// <summary>
    /// Creates a new ManagedLedgerDigestUpload.
    /// </summary>
    /// <param name="resourceName">Name of the ManagedLedgerDigestUpload.</param>
    /// <param name="resourceVersion">Version of the ManagedLedgerDigestUpload.</param>
    public ManagedLedgerDigestUpload(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Sql/managedInstances/databases/ledgerDigestUploads", resourceVersion ?? "2024-05-01-preview")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _digestStorageEndpoint = BicepValue<string>.DefineProperty(this, "DigestStorageEndpoint", ["properties", "digestStorageEndpoint"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _state = BicepValue<ManagedLedgerDigestUploadsState>.DefineProperty(this, "State", ["properties", "state"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<ManagedDatabase>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported ManagedLedgerDigestUpload resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-05-01-preview.
        /// </summary>
        public static readonly string V2024_05_01_preview = "2024-05-01-preview";
    }

    /// <summary>
    /// Creates a reference to an existing ManagedLedgerDigestUpload.
    /// </summary>
    /// <param name="resourceName">Name of the ManagedLedgerDigestUpload.</param>
    /// <param name="resourceVersion">Version of the ManagedLedgerDigestUpload.</param>
    /// <returns>The existing ManagedLedgerDigestUpload resource.</returns>
    public static ManagedLedgerDigestUpload FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
