// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Sql;

/// <summary>
/// ManagedDatabaseVulnerabilityAssessment.
/// </summary>
public partial class ManagedDatabaseVulnerabilityAssessment : Resource
{
    /// <summary>
    /// Gets the Name.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The recurring scans settings.
    /// </summary>
    public BicepValue<VulnerabilityAssessmentRecurringScansProperties> RecurringScans { get => _recurringScans; set => _recurringScans.Assign(value); }
    private readonly BicepValue<VulnerabilityAssessmentRecurringScansProperties> _recurringScans;

    /// <summary>
    /// Specifies the identifier key of the storage account for vulnerability
    /// assessment scan results. If &apos;StorageContainerSasKey&apos;
    /// isn&apos;t specified, storageAccountAccessKey is required.
    /// </summary>
    public BicepValue<string> StorageAccountAccessKey { get => _storageAccountAccessKey; set => _storageAccountAccessKey.Assign(value); }
    private readonly BicepValue<string> _storageAccountAccessKey;

    /// <summary>
    /// A blob storage container path to hold the scan results (e.g.
    /// https://myStorage.blob.core.windows.net/VaScans/).  It is required if
    /// server level vulnerability assessment policy doesn&apos;t set.
    /// </summary>
    public BicepValue<string> StorageContainerPath { get => _storageContainerPath; set => _storageContainerPath.Assign(value); }
    private readonly BicepValue<string> _storageContainerPath;

    /// <summary>
    /// A shared access signature (SAS Key) that has write access to the blob
    /// container specified in &apos;storageContainerPath&apos; parameter. If
    /// &apos;storageAccountAccessKey&apos; isn&apos;t specified,
    /// StorageContainerSasKey is required.
    /// </summary>
    public BicepValue<string> StorageContainerSasKey { get => _storageContainerSasKey; set => _storageContainerSasKey.Assign(value); }
    private readonly BicepValue<string> _storageContainerSasKey;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent ManagedDatabase.
    /// </summary>
    public ManagedDatabase? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<ManagedDatabase> _parent;

    /// <summary>
    /// Creates a new ManagedDatabaseVulnerabilityAssessment.
    /// </summary>
    /// <param name="resourceName">Name of the ManagedDatabaseVulnerabilityAssessment.</param>
    /// <param name="resourceVersion">Version of the ManagedDatabaseVulnerabilityAssessment.</param>
    public ManagedDatabaseVulnerabilityAssessment(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Sql/managedInstances/databases/vulnerabilityAssessments", resourceVersion ?? "2021-11-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _recurringScans = BicepValue<VulnerabilityAssessmentRecurringScansProperties>.DefineProperty(this, "RecurringScans", ["properties", "recurringScans"]);
        _storageAccountAccessKey = BicepValue<string>.DefineProperty(this, "StorageAccountAccessKey", ["properties", "storageAccountAccessKey"]);
        _storageContainerPath = BicepValue<string>.DefineProperty(this, "StorageContainerPath", ["properties", "storageContainerPath"]);
        _storageContainerSasKey = BicepValue<string>.DefineProperty(this, "StorageContainerSasKey", ["properties", "storageContainerSasKey"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<ManagedDatabase>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported ManagedDatabaseVulnerabilityAssessment resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-05-01-preview.
        /// </summary>
        public static readonly string V2024_05_01_preview = "2024-05-01-preview";

        /// <summary>
        /// 2021-11-01.
        /// </summary>
        public static readonly string V2021_11_01 = "2021-11-01";
    }

    /// <summary>
    /// Creates a reference to an existing
    /// ManagedDatabaseVulnerabilityAssessment.
    /// </summary>
    /// <param name="resourceName">Name of the ManagedDatabaseVulnerabilityAssessment.</param>
    /// <param name="resourceVersion">Version of the ManagedDatabaseVulnerabilityAssessment.</param>
    /// <returns>The existing ManagedDatabaseVulnerabilityAssessment resource.</returns>
    public static ManagedDatabaseVulnerabilityAssessment FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
