// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.Sql;

/// <summary>
/// SyncGroup.
/// </summary>
public partial class SyncGroup : Resource
{
    /// <summary>
    /// The name of the sync group.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Conflict logging retention period.
    /// </summary>
    public BicepValue<int> ConflictLoggingRetentionInDays { get => _conflictLoggingRetentionInDays; set => _conflictLoggingRetentionInDays.Assign(value); }
    private readonly BicepValue<int> _conflictLoggingRetentionInDays;

    /// <summary>
    /// Conflict resolution policy of the sync group.
    /// </summary>
    public BicepValue<SyncConflictResolutionPolicy> ConflictResolutionPolicy { get => _conflictResolutionPolicy; set => _conflictResolutionPolicy.Assign(value); }
    private readonly BicepValue<SyncConflictResolutionPolicy> _conflictResolutionPolicy;

    /// <summary>
    /// Password for the sync group hub database credential.
    /// </summary>
    public BicepValue<string> HubDatabasePassword { get => _hubDatabasePassword; set => _hubDatabasePassword.Assign(value); }
    private readonly BicepValue<string> _hubDatabasePassword;

    /// <summary>
    /// User name for the sync group hub database credential.
    /// </summary>
    public BicepValue<string> HubDatabaseUserName { get => _hubDatabaseUserName; set => _hubDatabaseUserName.Assign(value); }
    private readonly BicepValue<string> _hubDatabaseUserName;

    /// <summary>
    /// Sync interval of the sync group.
    /// </summary>
    public BicepValue<int> Interval { get => _interval; set => _interval.Assign(value); }
    private readonly BicepValue<int> _interval;

    /// <summary>
    /// If conflict logging is enabled.
    /// </summary>
    public BicepValue<bool> IsConflictLoggingEnabled { get => _isConflictLoggingEnabled; set => _isConflictLoggingEnabled.Assign(value); }
    private readonly BicepValue<bool> _isConflictLoggingEnabled;

    /// <summary>
    /// Sync schema of the sync group.
    /// </summary>
    public BicepValue<SyncGroupSchema> Schema { get => _schema; set => _schema.Assign(value); }
    private readonly BicepValue<SyncGroupSchema> _schema;

    /// <summary>
    /// The name and capacity of the SKU.
    /// </summary>
    public BicepValue<SqlSku> Sku { get => _sku; set => _sku.Assign(value); }
    private readonly BicepValue<SqlSku> _sku;

    /// <summary>
    /// ARM resource id of the sync database in the sync group.
    /// </summary>
    public BicepValue<ResourceIdentifier> SyncDatabaseId { get => _syncDatabaseId; set => _syncDatabaseId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _syncDatabaseId;

    /// <summary>
    /// If use private link connection is enabled.
    /// </summary>
    public BicepValue<bool> UsePrivateLinkConnection { get => _usePrivateLinkConnection; set => _usePrivateLinkConnection.Assign(value); }
    private readonly BicepValue<bool> _usePrivateLinkConnection;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Last sync time of the sync group.
    /// </summary>
    public BicepValue<DateTimeOffset> LastSyncOn { get => _lastSyncOn; }
    private readonly BicepValue<DateTimeOffset> _lastSyncOn;

    /// <summary>
    /// Private endpoint name of the sync group if use private link connection
    /// is enabled.
    /// </summary>
    public BicepValue<string> PrivateEndpointName { get => _privateEndpointName; }
    private readonly BicepValue<string> _privateEndpointName;

    /// <summary>
    /// Sync state of the sync group.
    /// </summary>
    public BicepValue<SyncGroupState> SyncState { get => _syncState; }
    private readonly BicepValue<SyncGroupState> _syncState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent SqlDatabase.
    /// </summary>
    public SqlDatabase? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<SqlDatabase> _parent;

    /// <summary>
    /// Creates a new SyncGroup.
    /// </summary>
    /// <param name="resourceName">Name of the SyncGroup.</param>
    /// <param name="resourceVersion">Version of the SyncGroup.</param>
    public SyncGroup(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Sql/servers/databases/syncGroups", resourceVersion ?? "2021-11-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _conflictLoggingRetentionInDays = BicepValue<int>.DefineProperty(this, "ConflictLoggingRetentionInDays", ["properties", "conflictLoggingRetentionInDays"]);
        _conflictResolutionPolicy = BicepValue<SyncConflictResolutionPolicy>.DefineProperty(this, "ConflictResolutionPolicy", ["properties", "conflictResolutionPolicy"]);
        _hubDatabasePassword = BicepValue<string>.DefineProperty(this, "HubDatabasePassword", ["properties", "hubDatabasePassword"]);
        _hubDatabaseUserName = BicepValue<string>.DefineProperty(this, "HubDatabaseUserName", ["properties", "hubDatabaseUserName"]);
        _interval = BicepValue<int>.DefineProperty(this, "Interval", ["properties", "interval"]);
        _isConflictLoggingEnabled = BicepValue<bool>.DefineProperty(this, "IsConflictLoggingEnabled", ["properties", "enableConflictLogging"]);
        _schema = BicepValue<SyncGroupSchema>.DefineProperty(this, "Schema", ["properties", "schema"]);
        _sku = BicepValue<SqlSku>.DefineProperty(this, "Sku", ["sku"]);
        _syncDatabaseId = BicepValue<ResourceIdentifier>.DefineProperty(this, "SyncDatabaseId", ["properties", "syncDatabaseId"]);
        _usePrivateLinkConnection = BicepValue<bool>.DefineProperty(this, "UsePrivateLinkConnection", ["properties", "usePrivateLinkConnection"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _lastSyncOn = BicepValue<DateTimeOffset>.DefineProperty(this, "LastSyncOn", ["properties", "lastSyncTime"], isOutput: true);
        _privateEndpointName = BicepValue<string>.DefineProperty(this, "PrivateEndpointName", ["properties", "privateEndpointName"], isOutput: true);
        _syncState = BicepValue<SyncGroupState>.DefineProperty(this, "SyncState", ["properties", "syncState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<SqlDatabase>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported SyncGroup resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-05-01-preview.
        /// </summary>
        public static readonly string V2024_05_01_preview = "2024-05-01-preview";

        /// <summary>
        /// 2021-11-01.
        /// </summary>
        public static readonly string V2021_11_01 = "2021-11-01";
    }

    /// <summary>
    /// Creates a reference to an existing SyncGroup.
    /// </summary>
    /// <param name="resourceName">Name of the SyncGroup.</param>
    /// <param name="resourceVersion">Version of the SyncGroup.</param>
    /// <returns>The existing SyncGroup resource.</returns>
    public static SyncGroup FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this SyncGroup resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 150, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen | ResourceNameCharacters.Underscore);
}
