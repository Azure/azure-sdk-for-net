// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Sql;

/// <summary>
/// ManagedInstanceKey.
/// </summary>
public partial class ManagedInstanceKey : Resource
{
    /// <summary>
    /// The name of the managed instance key to be operated on (updated or
    /// created).
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The key type like &apos;ServiceManaged&apos;, &apos;AzureKeyVault&apos;.
    /// </summary>
    public BicepValue<SqlServerKeyType> ServerKeyType { get => _serverKeyType; set => _serverKeyType.Assign(value); }
    private readonly BicepValue<SqlServerKeyType> _serverKeyType;

    /// <summary>
    /// The URI of the key. If the ServerKeyType is AzureKeyVault, then the URI
    /// is required.
    /// </summary>
    public BicepValue<Uri> Uri { get => _uri; set => _uri.Assign(value); }
    private readonly BicepValue<Uri> _uri;

    /// <summary>
    /// The key creation date.
    /// </summary>
    public BicepValue<DateTimeOffset> CreatedOn { get => _createdOn; }
    private readonly BicepValue<DateTimeOffset> _createdOn;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Key auto rotation opt-in flag. Either true or false.
    /// </summary>
    public BicepValue<bool> IsAutoRotationEnabled { get => _isAutoRotationEnabled; }
    private readonly BicepValue<bool> _isAutoRotationEnabled;

    /// <summary>
    /// Kind of encryption protector. This is metadata used for the Azure
    /// portal experience.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Thumbprint of the key.
    /// </summary>
    public BicepValue<string> Thumbprint { get => _thumbprint; }
    private readonly BicepValue<string> _thumbprint;

    /// <summary>
    /// Gets or sets a reference to the parent ManagedInstance.
    /// </summary>
    public ManagedInstance? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<ManagedInstance> _parent;

    /// <summary>
    /// Creates a new ManagedInstanceKey.
    /// </summary>
    /// <param name="resourceName">Name of the ManagedInstanceKey.</param>
    /// <param name="resourceVersion">Version of the ManagedInstanceKey.</param>
    public ManagedInstanceKey(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Sql/managedInstances/keys", resourceVersion ?? "2021-11-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _serverKeyType = BicepValue<SqlServerKeyType>.DefineProperty(this, "ServerKeyType", ["properties", "serverKeyType"]);
        _uri = BicepValue<Uri>.DefineProperty(this, "Uri", ["properties", "uri"]);
        _createdOn = BicepValue<DateTimeOffset>.DefineProperty(this, "CreatedOn", ["properties", "creationDate"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _isAutoRotationEnabled = BicepValue<bool>.DefineProperty(this, "IsAutoRotationEnabled", ["properties", "autoRotationEnabled"], isOutput: true);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _thumbprint = BicepValue<string>.DefineProperty(this, "Thumbprint", ["properties", "thumbprint"], isOutput: true);
        _parent = ResourceReference<ManagedInstance>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported ManagedInstanceKey resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-05-01-preview.
        /// </summary>
        public static readonly string V2024_05_01_preview = "2024-05-01-preview";

        /// <summary>
        /// 2021-11-01.
        /// </summary>
        public static readonly string V2021_11_01 = "2021-11-01";
    }

    /// <summary>
    /// Creates a reference to an existing ManagedInstanceKey.
    /// </summary>
    /// <param name="resourceName">Name of the ManagedInstanceKey.</param>
    /// <param name="resourceVersion">Version of the ManagedInstanceKey.</param>
    /// <returns>The existing ManagedInstanceKey resource.</returns>
    public static ManagedInstanceKey FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
