// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Sql;

/// <summary>
/// Database specific information.
/// </summary>
public partial class DistributedAvailabilityGroupDatabase : ProvisionableConstruct
{
    /// <summary>
    /// The name of the database in link.
    /// </summary>
    public BicepValue<string> DatabaseName 
    {
        get { Initialize(); return _databaseName!; }
        set { Initialize(); _databaseName!.Assign(value); }
    }
    private BicepValue<string>? _databaseName;

    /// <summary>
    /// Managed instance replica id.
    /// </summary>
    public BicepValue<Guid> InstanceReplicaId 
    {
        get { Initialize(); return _instanceReplicaId!; }
    }
    private BicepValue<Guid>? _instanceReplicaId;

    /// <summary>
    /// SQL server replica id.
    /// </summary>
    public BicepValue<Guid> PartnerReplicaId 
    {
        get { Initialize(); return _partnerReplicaId!; }
    }
    private BicepValue<Guid>? _partnerReplicaId;

    /// <summary>
    /// Current link state.
    /// </summary>
    public BicepValue<string> ReplicaState 
    {
        get { Initialize(); return _replicaState!; }
    }
    private BicepValue<string>? _replicaState;

    /// <summary>
    /// Seeding progress.
    /// </summary>
    public BicepValue<string> SeedingProgress 
    {
        get { Initialize(); return _seedingProgress!; }
    }
    private BicepValue<string>? _seedingProgress;

    /// <summary>
    /// Link health state.
    /// </summary>
    public BicepValue<SqlReplicaSynchronizationHealth> SynchronizationHealth 
    {
        get { Initialize(); return _synchronizationHealth!; }
    }
    private BicepValue<SqlReplicaSynchronizationHealth>? _synchronizationHealth;

    /// <summary>
    /// Link connected state.
    /// </summary>
    public BicepValue<SqlReplicaConnectedState> ConnectedState 
    {
        get { Initialize(); return _connectedState!; }
    }
    private BicepValue<SqlReplicaConnectedState>? _connectedState;

    /// <summary>
    /// Last received LSN.
    /// </summary>
    public BicepValue<string> LastReceivedLsn 
    {
        get { Initialize(); return _lastReceivedLsn!; }
    }
    private BicepValue<string>? _lastReceivedLsn;

    /// <summary>
    /// Last received LSN time.
    /// </summary>
    public BicepValue<DateTimeOffset> LastReceivedOn 
    {
        get { Initialize(); return _lastReceivedOn!; }
    }
    private BicepValue<DateTimeOffset>? _lastReceivedOn;

    /// <summary>
    /// Last sent LSN.
    /// </summary>
    public BicepValue<string> LastSentLsn 
    {
        get { Initialize(); return _lastSentLsn!; }
    }
    private BicepValue<string>? _lastSentLsn;

    /// <summary>
    /// Last sent LSN time.
    /// </summary>
    public BicepValue<DateTimeOffset> LastSentOn 
    {
        get { Initialize(); return _lastSentOn!; }
    }
    private BicepValue<DateTimeOffset>? _lastSentOn;

    /// <summary>
    /// Last commit LSN.
    /// </summary>
    public BicepValue<string> LastCommitLsn 
    {
        get { Initialize(); return _lastCommitLsn!; }
    }
    private BicepValue<string>? _lastCommitLsn;

    /// <summary>
    /// Last commit LSN time.
    /// </summary>
    public BicepValue<DateTimeOffset> LastCommitOn 
    {
        get { Initialize(); return _lastCommitOn!; }
    }
    private BicepValue<DateTimeOffset>? _lastCommitOn;

    /// <summary>
    /// Last hardened LSN.
    /// </summary>
    public BicepValue<string> LastHardenedLsn 
    {
        get { Initialize(); return _lastHardenedLsn!; }
    }
    private BicepValue<string>? _lastHardenedLsn;

    /// <summary>
    /// Last hardened LSN time.
    /// </summary>
    public BicepValue<DateTimeOffset> LastHardenedOn 
    {
        get { Initialize(); return _lastHardenedOn!; }
    }
    private BicepValue<DateTimeOffset>? _lastHardenedOn;

    /// <summary>
    /// Last backup LSN.
    /// </summary>
    public BicepValue<string> LastBackupLsn 
    {
        get { Initialize(); return _lastBackupLsn!; }
    }
    private BicepValue<string>? _lastBackupLsn;

    /// <summary>
    /// Last backup LSN time.
    /// </summary>
    public BicepValue<DateTimeOffset> LastBackupOn 
    {
        get { Initialize(); return _lastBackupOn!; }
    }
    private BicepValue<DateTimeOffset>? _lastBackupOn;

    /// <summary>
    /// The most recent link connection error description.
    /// </summary>
    public BicepValue<string> MostRecentLinkError 
    {
        get { Initialize(); return _mostRecentLinkError!; }
    }
    private BicepValue<string>? _mostRecentLinkError;

    /// <summary>
    /// SQL server certificate validity.
    /// </summary>
    public SqlServerCertificateInfo PartnerAuthCertValidity 
    {
        get { Initialize(); return _partnerAuthCertValidity!; }
    }
    private SqlServerCertificateInfo? _partnerAuthCertValidity;

    /// <summary>
    /// Replication lag when Managed Instance link side is primary.
    /// </summary>
    public BicepValue<int> InstanceSendReplicationLagSeconds 
    {
        get { Initialize(); return _instanceSendReplicationLagSeconds!; }
    }
    private BicepValue<int>? _instanceSendReplicationLagSeconds;

    /// <summary>
    /// Redo lag when Managed Instance link side is primary.
    /// </summary>
    public BicepValue<int> InstanceRedoReplicationLagSeconds 
    {
        get { Initialize(); return _instanceRedoReplicationLagSeconds!; }
    }
    private BicepValue<int>? _instanceRedoReplicationLagSeconds;

    /// <summary>
    /// Creates a new DistributedAvailabilityGroupDatabase.
    /// </summary>
    public DistributedAvailabilityGroupDatabase()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// DistributedAvailabilityGroupDatabase.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _databaseName = DefineProperty<string>("DatabaseName", ["databaseName"]);
        _instanceReplicaId = DefineProperty<Guid>("InstanceReplicaId", ["instanceReplicaId"], isOutput: true);
        _partnerReplicaId = DefineProperty<Guid>("PartnerReplicaId", ["partnerReplicaId"], isOutput: true);
        _replicaState = DefineProperty<string>("ReplicaState", ["replicaState"], isOutput: true);
        _seedingProgress = DefineProperty<string>("SeedingProgress", ["seedingProgress"], isOutput: true);
        _synchronizationHealth = DefineProperty<SqlReplicaSynchronizationHealth>("SynchronizationHealth", ["synchronizationHealth"], isOutput: true);
        _connectedState = DefineProperty<SqlReplicaConnectedState>("ConnectedState", ["connectedState"], isOutput: true);
        _lastReceivedLsn = DefineProperty<string>("LastReceivedLsn", ["lastReceivedLsn"], isOutput: true);
        _lastReceivedOn = DefineProperty<DateTimeOffset>("LastReceivedOn", ["lastReceivedTime"], isOutput: true);
        _lastSentLsn = DefineProperty<string>("LastSentLsn", ["lastSentLsn"], isOutput: true);
        _lastSentOn = DefineProperty<DateTimeOffset>("LastSentOn", ["lastSentTime"], isOutput: true);
        _lastCommitLsn = DefineProperty<string>("LastCommitLsn", ["lastCommitLsn"], isOutput: true);
        _lastCommitOn = DefineProperty<DateTimeOffset>("LastCommitOn", ["lastCommitTime"], isOutput: true);
        _lastHardenedLsn = DefineProperty<string>("LastHardenedLsn", ["lastHardenedLsn"], isOutput: true);
        _lastHardenedOn = DefineProperty<DateTimeOffset>("LastHardenedOn", ["lastHardenedTime"], isOutput: true);
        _lastBackupLsn = DefineProperty<string>("LastBackupLsn", ["lastBackupLsn"], isOutput: true);
        _lastBackupOn = DefineProperty<DateTimeOffset>("LastBackupOn", ["lastBackupTime"], isOutput: true);
        _mostRecentLinkError = DefineProperty<string>("MostRecentLinkError", ["mostRecentLinkError"], isOutput: true);
        _partnerAuthCertValidity = DefineModelProperty<SqlServerCertificateInfo>("PartnerAuthCertValidity", ["partnerAuthCertValidity"], isOutput: true);
        _instanceSendReplicationLagSeconds = DefineProperty<int>("InstanceSendReplicationLagSeconds", ["instanceSendReplicationLagSeconds"], isOutput: true);
        _instanceRedoReplicationLagSeconds = DefineProperty<int>("InstanceRedoReplicationLagSeconds", ["instanceRedoReplicationLagSeconds"], isOutput: true);
    }
}
