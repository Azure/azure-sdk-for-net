// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Sql;

/// <summary>
/// A job target, for example a specific database or a container of databases
/// that is evaluated during job execution.
/// </summary>
public partial class JobTarget : ProvisioningConstruct
{
    /// <summary>
    /// Whether the target is included or excluded from the group.
    /// </summary>
    public BicepValue<JobTargetGroupMembershipType> MembershipType { get => _membershipType; set => _membershipType.Assign(value); }
    private readonly BicepValue<JobTargetGroupMembershipType> _membershipType;

    /// <summary>
    /// The target type.
    /// </summary>
    public BicepValue<JobTargetType> TargetType { get => _targetType; set => _targetType.Assign(value); }
    private readonly BicepValue<JobTargetType> _targetType;

    /// <summary>
    /// The target server name.
    /// </summary>
    public BicepValue<string> ServerName { get => _serverName; set => _serverName.Assign(value); }
    private readonly BicepValue<string> _serverName;

    /// <summary>
    /// The target database name.
    /// </summary>
    public BicepValue<string> DatabaseName { get => _databaseName; set => _databaseName.Assign(value); }
    private readonly BicepValue<string> _databaseName;

    /// <summary>
    /// The target elastic pool name.
    /// </summary>
    public BicepValue<string> ElasticPoolName { get => _elasticPoolName; set => _elasticPoolName.Assign(value); }
    private readonly BicepValue<string> _elasticPoolName;

    /// <summary>
    /// The target shard map.
    /// </summary>
    public BicepValue<string> ShardMapName { get => _shardMapName; set => _shardMapName.Assign(value); }
    private readonly BicepValue<string> _shardMapName;

    /// <summary>
    /// The resource ID of the credential that is used during job execution to
    /// connect to the target and determine the list of databases inside the
    /// target.
    /// </summary>
    public BicepValue<string> RefreshCredential { get => _refreshCredential; set => _refreshCredential.Assign(value); }
    private readonly BicepValue<string> _refreshCredential;

    /// <summary>
    /// Creates a new JobTarget.
    /// </summary>
    public JobTarget()
    {
        _membershipType = BicepValue<JobTargetGroupMembershipType>.DefineProperty(this, "MembershipType", ["membershipType"]);
        _targetType = BicepValue<JobTargetType>.DefineProperty(this, "TargetType", ["type"]);
        _serverName = BicepValue<string>.DefineProperty(this, "ServerName", ["serverName"]);
        _databaseName = BicepValue<string>.DefineProperty(this, "DatabaseName", ["databaseName"]);
        _elasticPoolName = BicepValue<string>.DefineProperty(this, "ElasticPoolName", ["elasticPoolName"]);
        _shardMapName = BicepValue<string>.DefineProperty(this, "ShardMapName", ["shardMapName"]);
        _refreshCredential = BicepValue<string>.DefineProperty(this, "RefreshCredential", ["refreshCredential"]);
    }
}
