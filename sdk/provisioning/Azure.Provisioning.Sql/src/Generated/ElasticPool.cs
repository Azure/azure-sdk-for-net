// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.Sql;

/// <summary>
/// ElasticPool.
/// </summary>
public partial class ElasticPool : Resource
{
    /// <summary>
    /// The name of the elastic pool.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Specifies the availability zone the pool&apos;s primary replica is
    /// pinned to.
    /// </summary>
    public BicepValue<SqlAvailabilityZoneType> AvailabilityZone { get => _availabilityZone; set => _availabilityZone.Assign(value); }
    private readonly BicepValue<SqlAvailabilityZoneType> _availabilityZone;

    /// <summary>
    /// The number of secondary replicas associated with the elastic pool that
    /// are used to provide high availability. Applicable only to Hyperscale
    /// elastic pools.
    /// </summary>
    public BicepValue<int> HighAvailabilityReplicaCount { get => _highAvailabilityReplicaCount; set => _highAvailabilityReplicaCount.Assign(value); }
    private readonly BicepValue<int> _highAvailabilityReplicaCount;

    /// <summary>
    /// Whether or not this elastic pool is zone redundant, which means the
    /// replicas of this elastic pool will be spread across multiple
    /// availability zones.
    /// </summary>
    public BicepValue<bool> IsZoneRedundant { get => _isZoneRedundant; set => _isZoneRedundant.Assign(value); }
    private readonly BicepValue<bool> _isZoneRedundant;

    /// <summary>
    /// The license type to apply for this elastic pool.
    /// </summary>
    public BicepValue<ElasticPoolLicenseType> LicenseType { get => _licenseType; set => _licenseType.Assign(value); }
    private readonly BicepValue<ElasticPoolLicenseType> _licenseType;

    /// <summary>
    /// Maintenance configuration id assigned to the elastic pool. This
    /// configuration defines the period when the maintenance updates will
    /// will occur.
    /// </summary>
    public BicepValue<ResourceIdentifier> MaintenanceConfigurationId { get => _maintenanceConfigurationId; set => _maintenanceConfigurationId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _maintenanceConfigurationId;

    /// <summary>
    /// The storage limit for the database elastic pool in bytes.
    /// </summary>
    public BicepValue<long> MaxSizeBytes { get => _maxSizeBytes; set => _maxSizeBytes.Assign(value); }
    private readonly BicepValue<long> _maxSizeBytes;

    /// <summary>
    /// Minimal capacity that serverless pool will not shrink below, if not
    /// paused.
    /// </summary>
    public BicepValue<double> MinCapacity { get => _minCapacity; set => _minCapacity.Assign(value); }
    private readonly BicepValue<double> _minCapacity;

    /// <summary>
    /// The per database settings for the elastic pool.
    /// </summary>
    public BicepValue<ElasticPoolPerDatabaseSettings> PerDatabaseSettings { get => _perDatabaseSettings; set => _perDatabaseSettings.Assign(value); }
    private readonly BicepValue<ElasticPoolPerDatabaseSettings> _perDatabaseSettings;

    /// <summary>
    /// Type of enclave requested on the elastic pool.
    /// </summary>
    public BicepValue<SqlAlwaysEncryptedEnclaveType> PreferredEnclaveType { get => _preferredEnclaveType; set => _preferredEnclaveType.Assign(value); }
    private readonly BicepValue<SqlAlwaysEncryptedEnclaveType> _preferredEnclaveType;

    /// <summary>
    /// The elastic pool SKU.                           The list of SKUs may
    /// vary by region and support offer. To determine the SKUs (including the
    /// SKU name, tier/edition, family, and capacity) that are available to
    /// your subscription in an Azure region, use the
    /// `Capabilities_ListByLocation` REST API or the following command:
    /// ```azurecli              az sql elastic-pool
    /// list-editions -l &lt;location&gt; -o table              ````
    /// </summary>
    public BicepValue<SqlSku> Sku { get => _sku; set => _sku.Assign(value); }
    private readonly BicepValue<SqlSku> _sku;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// The creation date of the elastic pool (ISO8601 format).
    /// </summary>
    public BicepValue<DateTimeOffset> CreatedOn { get => _createdOn; }
    private readonly BicepValue<DateTimeOffset> _createdOn;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Kind of elastic pool. This is metadata used for the Azure portal
    /// experience.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// The state of the elastic pool.
    /// </summary>
    public BicepValue<ElasticPoolState> State { get => _state; }
    private readonly BicepValue<ElasticPoolState> _state;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent SqlServer.
    /// </summary>
    public SqlServer? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<SqlServer> _parent;

    /// <summary>
    /// Creates a new ElasticPool.
    /// </summary>
    /// <param name="resourceName">Name of the ElasticPool.</param>
    /// <param name="resourceVersion">Version of the ElasticPool.</param>
    public ElasticPool(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Sql/servers/elasticPools", resourceVersion ?? "2021-11-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _availabilityZone = BicepValue<SqlAvailabilityZoneType>.DefineProperty(this, "AvailabilityZone", ["properties", "availabilityZone"]);
        _highAvailabilityReplicaCount = BicepValue<int>.DefineProperty(this, "HighAvailabilityReplicaCount", ["properties", "highAvailabilityReplicaCount"]);
        _isZoneRedundant = BicepValue<bool>.DefineProperty(this, "IsZoneRedundant", ["properties", "zoneRedundant"]);
        _licenseType = BicepValue<ElasticPoolLicenseType>.DefineProperty(this, "LicenseType", ["properties", "licenseType"]);
        _maintenanceConfigurationId = BicepValue<ResourceIdentifier>.DefineProperty(this, "MaintenanceConfigurationId", ["properties", "maintenanceConfigurationId"]);
        _maxSizeBytes = BicepValue<long>.DefineProperty(this, "MaxSizeBytes", ["properties", "maxSizeBytes"]);
        _minCapacity = BicepValue<double>.DefineProperty(this, "MinCapacity", ["properties", "minCapacity"]);
        _perDatabaseSettings = BicepValue<ElasticPoolPerDatabaseSettings>.DefineProperty(this, "PerDatabaseSettings", ["properties", "perDatabaseSettings"]);
        _preferredEnclaveType = BicepValue<SqlAlwaysEncryptedEnclaveType>.DefineProperty(this, "PreferredEnclaveType", ["properties", "preferredEnclaveType"]);
        _sku = BicepValue<SqlSku>.DefineProperty(this, "Sku", ["sku"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _createdOn = BicepValue<DateTimeOffset>.DefineProperty(this, "CreatedOn", ["properties", "creationDate"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"], isOutput: true);
        _state = BicepValue<ElasticPoolState>.DefineProperty(this, "State", ["properties", "state"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<SqlServer>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported ElasticPool resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-05-01-preview.
        /// </summary>
        public static readonly string V2024_05_01_preview = "2024-05-01-preview";

        /// <summary>
        /// 2021-11-01.
        /// </summary>
        public static readonly string V2021_11_01 = "2021-11-01";

        /// <summary>
        /// 2015-05-01.
        /// </summary>
        public static readonly string V2015_05_01 = "2015-05-01";

        /// <summary>
        /// 2014-04-01.
        /// </summary>
        public static readonly string V2014_04_01 = "2014-04-01";

        /// <summary>
        /// 2014-01-01.
        /// </summary>
        public static readonly string V2014_01_01 = "2014-01-01";
    }

    /// <summary>
    /// Creates a reference to an existing ElasticPool.
    /// </summary>
    /// <param name="resourceName">Name of the ElasticPool.</param>
    /// <param name="resourceVersion">Version of the ElasticPool.</param>
    /// <returns>The existing ElasticPool resource.</returns>
    public static ElasticPool FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this ElasticPool resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 128, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen | ResourceNameCharacters.Underscore | ResourceNameCharacters.Period | ResourceNameCharacters.Parentheses);
}
