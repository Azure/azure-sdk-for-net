// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Sql;

/// <summary>
/// InstancePool.
/// </summary>
public partial class InstancePool : Resource
{
    /// <summary>
    /// The name of the instance pool to be created or updated.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// The license type. Possible values are &apos;LicenseIncluded&apos;
    /// (price for SQL license is included) and &apos;BasePrice&apos; (without
    /// SQL license price).
    /// </summary>
    public BicepValue<InstancePoolLicenseType> LicenseType { get => _licenseType; set => _licenseType.Assign(value); }
    private readonly BicepValue<InstancePoolLicenseType> _licenseType;

    /// <summary>
    /// Specifies maintenance configuration id to apply to this managed
    /// instance.
    /// </summary>
    public BicepValue<ResourceIdentifier> MaintenanceConfigurationId { get => _maintenanceConfigurationId; set => _maintenanceConfigurationId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _maintenanceConfigurationId;

    /// <summary>
    /// The name and tier of the SKU.
    /// </summary>
    public BicepValue<SqlSku> Sku { get => _sku; set => _sku.Assign(value); }
    private readonly BicepValue<SqlSku> _sku;

    /// <summary>
    /// Resource ID of the subnet to place this instance pool in.
    /// </summary>
    public BicepValue<ResourceIdentifier> SubnetId { get => _subnetId; set => _subnetId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _subnetId;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Count of vCores belonging to this instance pool.
    /// </summary>
    public BicepValue<int> VCores { get => _vCores; set => _vCores.Assign(value); }
    private readonly BicepValue<int> _vCores;

    /// <summary>
    /// The Dns Zone that the managed instance pool is in.
    /// </summary>
    public BicepValue<string> DnsZone { get => _dnsZone; }
    private readonly BicepValue<string> _dnsZone;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new InstancePool.
    /// </summary>
    /// <param name="resourceName">Name of the InstancePool.</param>
    /// <param name="resourceVersion">Version of the InstancePool.</param>
    public InstancePool(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Sql/instancePools", resourceVersion ?? "2021-11-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _licenseType = BicepValue<InstancePoolLicenseType>.DefineProperty(this, "LicenseType", ["properties", "licenseType"]);
        _maintenanceConfigurationId = BicepValue<ResourceIdentifier>.DefineProperty(this, "MaintenanceConfigurationId", ["properties", "maintenanceConfigurationId"]);
        _sku = BicepValue<SqlSku>.DefineProperty(this, "Sku", ["sku"]);
        _subnetId = BicepValue<ResourceIdentifier>.DefineProperty(this, "SubnetId", ["properties", "subnetId"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _vCores = BicepValue<int>.DefineProperty(this, "VCores", ["properties", "vCores"]);
        _dnsZone = BicepValue<string>.DefineProperty(this, "DnsZone", ["properties", "dnsZone"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported InstancePool resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-05-01-preview.
        /// </summary>
        public static readonly string V2024_05_01_preview = "2024-05-01-preview";

        /// <summary>
        /// 2021-11-01.
        /// </summary>
        public static readonly string V2021_11_01 = "2021-11-01";
    }

    /// <summary>
    /// Creates a reference to an existing InstancePool.
    /// </summary>
    /// <param name="resourceName">Name of the InstancePool.</param>
    /// <param name="resourceVersion">Version of the InstancePool.</param>
    /// <returns>The existing InstancePool resource.</returns>
    public static InstancePool FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
