// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.CognitiveServices;

/// <summary>
/// A rule governing the accessibility from a specific virtual network.
/// </summary>
public partial class CognitiveServicesVirtualNetworkRule : ProvisioningConstruct
{
    /// <summary>
    /// Full resource id of a vnet subnet, such as
    /// &apos;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1&apos;.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; set => _id.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the state of virtual network rule.
    /// </summary>
    public BicepValue<string> State { get => _state; set => _state.Assign(value); }
    private readonly BicepValue<string> _state;

    /// <summary>
    /// Ignore missing vnet service endpoint or not.
    /// </summary>
    public BicepValue<bool> IgnoreMissingVnetServiceEndpoint { get => _ignoreMissingVnetServiceEndpoint; set => _ignoreMissingVnetServiceEndpoint.Assign(value); }
    private readonly BicepValue<bool> _ignoreMissingVnetServiceEndpoint;

    /// <summary>
    /// Creates a new CognitiveServicesVirtualNetworkRule.
    /// </summary>
    public CognitiveServicesVirtualNetworkRule()
    {
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"]);
        _state = BicepValue<string>.DefineProperty(this, "State", ["state"]);
        _ignoreMissingVnetServiceEndpoint = BicepValue<bool>.DefineProperty(this, "IgnoreMissingVnetServiceEndpoint", ["ignoreMissingVnetServiceEndpoint"]);
    }
}
