// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.CognitiveServices;

/// <summary>
/// Properties of Cognitive Services account.
/// </summary>
public partial class CognitiveServicesAccountProperties : ProvisioningConstruct
{
    /// <summary>
    /// Gets the status of the cognitive services account at the time the
    /// operation was called.
    /// </summary>
    public BicepValue<ServiceAccountProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<ServiceAccountProvisioningState> _provisioningState;

    /// <summary>
    /// Endpoint of the created account.
    /// </summary>
    public BicepValue<string> Endpoint { get => _endpoint; }
    private readonly BicepValue<string> _endpoint;

    /// <summary>
    /// Gets the capabilities of the cognitive services account. Each item
    /// indicates the capability of a specific feature. The values are
    /// read-only and for reference only.
    /// </summary>
    public BicepList<CognitiveServicesSkuCapability> Capabilities { get => _capabilities; }
    private readonly BicepList<CognitiveServicesSkuCapability> _capabilities;

    /// <summary>
    /// If the resource is migrated from an existing key.
    /// </summary>
    public BicepValue<bool> IsMigrated { get => _isMigrated; }
    private readonly BicepValue<bool> _isMigrated;

    /// <summary>
    /// Resource migration token.
    /// </summary>
    public BicepValue<string> MigrationToken { get => _migrationToken; set => _migrationToken.Assign(value); }
    private readonly BicepValue<string> _migrationToken;

    /// <summary>
    /// Sku change info of account.
    /// </summary>
    public BicepValue<CognitiveServicesSkuChangeInfo> SkuChangeInfo { get => _skuChangeInfo; }
    private readonly BicepValue<CognitiveServicesSkuChangeInfo> _skuChangeInfo;

    /// <summary>
    /// Optional subdomain name used for token-based authentication.
    /// </summary>
    public BicepValue<string> CustomSubDomainName { get => _customSubDomainName; set => _customSubDomainName.Assign(value); }
    private readonly BicepValue<string> _customSubDomainName;

    /// <summary>
    /// A collection of rules governing the accessibility from specific network
    /// locations.
    /// </summary>
    public BicepValue<CognitiveServicesNetworkRuleSet> NetworkAcls { get => _networkAcls; set => _networkAcls.Assign(value); }
    private readonly BicepValue<CognitiveServicesNetworkRuleSet> _networkAcls;

    /// <summary>
    /// The encryption properties for this resource.
    /// </summary>
    public BicepValue<ServiceAccountEncryptionProperties> Encryption { get => _encryption; set => _encryption.Assign(value); }
    private readonly BicepValue<ServiceAccountEncryptionProperties> _encryption;

    /// <summary>
    /// The storage accounts for this resource.
    /// </summary>
    public BicepList<ServiceAccountUserOwnedStorage> UserOwnedStorage { get => _userOwnedStorage; set => _userOwnedStorage.Assign(value); }
    private readonly BicepList<ServiceAccountUserOwnedStorage> _userOwnedStorage;

    /// <summary>
    /// The private endpoint connection associated with the Cognitive Services
    /// account.
    /// </summary>
    public BicepList<CognitiveServicesPrivateEndpointConnectionData> PrivateEndpointConnections { get => _privateEndpointConnections; }
    private readonly BicepList<CognitiveServicesPrivateEndpointConnectionData> _privateEndpointConnections;

    /// <summary>
    /// Whether or not public endpoint access is allowed for this account.
    /// </summary>
    public BicepValue<ServiceAccountPublicNetworkAccess> PublicNetworkAccess { get => _publicNetworkAccess; set => _publicNetworkAccess.Assign(value); }
    private readonly BicepValue<ServiceAccountPublicNetworkAccess> _publicNetworkAccess;

    /// <summary>
    /// The api properties for special APIs.
    /// </summary>
    public BicepValue<ServiceAccountApiProperties> ApiProperties { get => _apiProperties; set => _apiProperties.Assign(value); }
    private readonly BicepValue<ServiceAccountApiProperties> _apiProperties;

    /// <summary>
    /// Gets the date of cognitive services account creation.
    /// </summary>
    public BicepValue<DateTimeOffset> CreatedOn { get => _createdOn; }
    private readonly BicepValue<DateTimeOffset> _createdOn;

    /// <summary>
    /// The call rate limit Cognitive Services account.
    /// </summary>
    public BicepValue<ServiceAccountCallRateLimit> CallRateLimit { get => _callRateLimit; }
    private readonly BicepValue<ServiceAccountCallRateLimit> _callRateLimit;

    /// <summary>
    /// The flag to enable dynamic throttling.
    /// </summary>
    public BicepValue<bool> EnableDynamicThrottling { get => _enableDynamicThrottling; set => _enableDynamicThrottling.Assign(value); }
    private readonly BicepValue<bool> _enableDynamicThrottling;

    /// <summary>
    /// Gets the quota limit.
    /// </summary>
    public BicepValue<ServiceAccountQuotaLimit> QuotaLimit { get => _quotaLimit; }
    private readonly BicepValue<ServiceAccountQuotaLimit> _quotaLimit;

    /// <summary>
    /// Gets or sets the restrict outbound network access.
    /// </summary>
    public BicepValue<bool> RestrictOutboundNetworkAccess { get => _restrictOutboundNetworkAccess; set => _restrictOutboundNetworkAccess.Assign(value); }
    private readonly BicepValue<bool> _restrictOutboundNetworkAccess;

    /// <summary>
    /// Gets the allowed fqdn list.
    /// </summary>
    public BicepList<string> AllowedFqdnList { get => _allowedFqdnList; set => _allowedFqdnList.Assign(value); }
    private readonly BicepList<string> _allowedFqdnList;

    /// <summary>
    /// Gets or sets the disable local auth.
    /// </summary>
    public BicepValue<bool> DisableLocalAuth { get => _disableLocalAuth; set => _disableLocalAuth.Assign(value); }
    private readonly BicepValue<bool> _disableLocalAuth;

    /// <summary>
    /// Dictionary of &lt;string&gt;.
    /// </summary>
    public BicepDictionary<string> Endpoints { get => _endpoints; }
    private readonly BicepDictionary<string> _endpoints;

    /// <summary>
    /// Gets or sets the restore.
    /// </summary>
    public BicepValue<bool> Restore { get => _restore; set => _restore.Assign(value); }
    private readonly BicepValue<bool> _restore;

    /// <summary>
    /// The deletion date, only available for deleted account.
    /// </summary>
    public BicepValue<DateTimeOffset> DeletedOn { get => _deletedOn; }
    private readonly BicepValue<DateTimeOffset> _deletedOn;

    /// <summary>
    /// The scheduled purge date, only available for deleted account.
    /// </summary>
    public BicepValue<string> ScheduledPurgeDate { get => _scheduledPurgeDate; }
    private readonly BicepValue<string> _scheduledPurgeDate;

    /// <summary>
    /// The multiregion settings of Cognitive Services account.
    /// </summary>
    public BicepValue<CognitiveServicesMultiRegionSettings> Locations { get => _locations; set => _locations.Assign(value); }
    private readonly BicepValue<CognitiveServicesMultiRegionSettings> _locations;

    /// <summary>
    /// The commitment plan associations of Cognitive Services account.
    /// </summary>
    public BicepList<CommitmentPlanAssociation> CommitmentPlanAssociations { get => _commitmentPlanAssociations; }
    private readonly BicepList<CommitmentPlanAssociation> _commitmentPlanAssociations;

    /// <summary>
    /// The abuse penalty.
    /// </summary>
    public BicepValue<AbusePenalty> AbusePenalty { get => _abusePenalty; }
    private readonly BicepValue<AbusePenalty> _abusePenalty;

    /// <summary>
    /// Creates a new CognitiveServicesAccountProperties.
    /// </summary>
    public CognitiveServicesAccountProperties()
    {
        _provisioningState = BicepValue<ServiceAccountProvisioningState>.DefineProperty(this, "ProvisioningState", ["provisioningState"], isOutput: true);
        _endpoint = BicepValue<string>.DefineProperty(this, "Endpoint", ["endpoint"], isOutput: true);
        _capabilities = BicepList<CognitiveServicesSkuCapability>.DefineProperty(this, "Capabilities", ["capabilities"], isOutput: true);
        _isMigrated = BicepValue<bool>.DefineProperty(this, "IsMigrated", ["isMigrated"], isOutput: true);
        _migrationToken = BicepValue<string>.DefineProperty(this, "MigrationToken", ["migrationToken"]);
        _skuChangeInfo = BicepValue<CognitiveServicesSkuChangeInfo>.DefineProperty(this, "SkuChangeInfo", ["skuChangeInfo"], isOutput: true);
        _customSubDomainName = BicepValue<string>.DefineProperty(this, "CustomSubDomainName", ["customSubDomainName"]);
        _networkAcls = BicepValue<CognitiveServicesNetworkRuleSet>.DefineProperty(this, "NetworkAcls", ["networkAcls"]);
        _encryption = BicepValue<ServiceAccountEncryptionProperties>.DefineProperty(this, "Encryption", ["encryption"]);
        _userOwnedStorage = BicepList<ServiceAccountUserOwnedStorage>.DefineProperty(this, "UserOwnedStorage", ["userOwnedStorage"]);
        _privateEndpointConnections = BicepList<CognitiveServicesPrivateEndpointConnectionData>.DefineProperty(this, "PrivateEndpointConnections", ["privateEndpointConnections"], isOutput: true);
        _publicNetworkAccess = BicepValue<ServiceAccountPublicNetworkAccess>.DefineProperty(this, "PublicNetworkAccess", ["publicNetworkAccess"]);
        _apiProperties = BicepValue<ServiceAccountApiProperties>.DefineProperty(this, "ApiProperties", ["apiProperties"]);
        _createdOn = BicepValue<DateTimeOffset>.DefineProperty(this, "CreatedOn", ["dateCreated"], isOutput: true);
        _callRateLimit = BicepValue<ServiceAccountCallRateLimit>.DefineProperty(this, "CallRateLimit", ["callRateLimit"], isOutput: true);
        _enableDynamicThrottling = BicepValue<bool>.DefineProperty(this, "EnableDynamicThrottling", ["dynamicThrottlingEnabled"]);
        _quotaLimit = BicepValue<ServiceAccountQuotaLimit>.DefineProperty(this, "QuotaLimit", ["quotaLimit"], isOutput: true);
        _restrictOutboundNetworkAccess = BicepValue<bool>.DefineProperty(this, "RestrictOutboundNetworkAccess", ["restrictOutboundNetworkAccess"]);
        _allowedFqdnList = BicepList<string>.DefineProperty(this, "AllowedFqdnList", ["allowedFqdnList"]);
        _disableLocalAuth = BicepValue<bool>.DefineProperty(this, "DisableLocalAuth", ["disableLocalAuth"]);
        _endpoints = BicepDictionary<string>.DefineProperty(this, "Endpoints", ["endpoints"], isOutput: true);
        _restore = BicepValue<bool>.DefineProperty(this, "Restore", ["restore"]);
        _deletedOn = BicepValue<DateTimeOffset>.DefineProperty(this, "DeletedOn", ["deletionDate"], isOutput: true);
        _scheduledPurgeDate = BicepValue<string>.DefineProperty(this, "ScheduledPurgeDate", ["scheduledPurgeDate"], isOutput: true);
        _locations = BicepValue<CognitiveServicesMultiRegionSettings>.DefineProperty(this, "Locations", ["locations"]);
        _commitmentPlanAssociations = BicepList<CommitmentPlanAssociation>.DefineProperty(this, "CommitmentPlanAssociations", ["commitmentPlanAssociations"], isOutput: true);
        _abusePenalty = BicepValue<AbusePenalty>.DefineProperty(this, "AbusePenalty", ["abusePenalty"], isOutput: true);
    }
}
