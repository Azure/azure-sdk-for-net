// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.CognitiveServices;

/// <summary>
/// The api properties for special APIs.
/// </summary>
public partial class ServiceAccountApiProperties : ProvisioningConstruct
{
    /// <summary>
    /// (QnAMaker Only) The runtime endpoint of QnAMaker.
    /// </summary>
    public BicepValue<string> QnaRuntimeEndpoint { get => _qnaRuntimeEndpoint; set => _qnaRuntimeEndpoint.Assign(value); }
    private readonly BicepValue<string> _qnaRuntimeEndpoint;

    /// <summary>
    /// (QnAMaker Only) The Azure Search endpoint key of QnAMaker.
    /// </summary>
    public BicepValue<string> QnaAzureSearchEndpointKey { get => _qnaAzureSearchEndpointKey; set => _qnaAzureSearchEndpointKey.Assign(value); }
    private readonly BicepValue<string> _qnaAzureSearchEndpointKey;

    /// <summary>
    /// (QnAMaker Only) The Azure Search endpoint id of QnAMaker.
    /// </summary>
    public BicepValue<ResourceIdentifier> QnaAzureSearchEndpointId { get => _qnaAzureSearchEndpointId; set => _qnaAzureSearchEndpointId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _qnaAzureSearchEndpointId;

    /// <summary>
    /// (Bing Search Only) The flag to enable statistics of Bing Search.
    /// </summary>
    public BicepValue<bool> EnableStatistics { get => _enableStatistics; set => _enableStatistics.Assign(value); }
    private readonly BicepValue<bool> _enableStatistics;

    /// <summary>
    /// (Personalization Only) The flag to enable statistics of Bing Search.
    /// </summary>
    public BicepValue<string> EventHubConnectionString { get => _eventHubConnectionString; set => _eventHubConnectionString.Assign(value); }
    private readonly BicepValue<string> _eventHubConnectionString;

    /// <summary>
    /// (Personalization Only) The storage account connection string.
    /// </summary>
    public BicepValue<string> StorageAccountConnectionString { get => _storageAccountConnectionString; set => _storageAccountConnectionString.Assign(value); }
    private readonly BicepValue<string> _storageAccountConnectionString;

    /// <summary>
    /// (Metrics Advisor Only) The Azure AD Client Id (Application Id).
    /// </summary>
    public BicepValue<Guid> AadClientId { get => _aadClientId; set => _aadClientId.Assign(value); }
    private readonly BicepValue<Guid> _aadClientId;

    /// <summary>
    /// (Metrics Advisor Only) The Azure AD Tenant Id.
    /// </summary>
    public BicepValue<Guid> AadTenantId { get => _aadTenantId; set => _aadTenantId.Assign(value); }
    private readonly BicepValue<Guid> _aadTenantId;

    /// <summary>
    /// (Metrics Advisor Only) The super user of Metrics Advisor.
    /// </summary>
    public BicepValue<string> SuperUser { get => _superUser; set => _superUser.Assign(value); }
    private readonly BicepValue<string> _superUser;

    /// <summary>
    /// (Metrics Advisor Only) The website name of Metrics Advisor.
    /// </summary>
    public BicepValue<string> WebsiteName { get => _websiteName; set => _websiteName.Assign(value); }
    private readonly BicepValue<string> _websiteName;

    /// <summary>
    /// Additional Properties                          To assign an object to
    /// the value of this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepDictionary<BinaryData> AdditionalProperties { get => _additionalProperties; set => _additionalProperties.Assign(value); }
    private readonly BicepDictionary<BinaryData> _additionalProperties;

    /// <summary>
    /// Creates a new ServiceAccountApiProperties.
    /// </summary>
    public ServiceAccountApiProperties()
    {
        _qnaRuntimeEndpoint = BicepValue<string>.DefineProperty(this, "QnaRuntimeEndpoint", ["qnaRuntimeEndpoint"]);
        _qnaAzureSearchEndpointKey = BicepValue<string>.DefineProperty(this, "QnaAzureSearchEndpointKey", ["qnaAzureSearchEndpointKey"]);
        _qnaAzureSearchEndpointId = BicepValue<ResourceIdentifier>.DefineProperty(this, "QnaAzureSearchEndpointId", ["qnaAzureSearchEndpointId"]);
        _enableStatistics = BicepValue<bool>.DefineProperty(this, "EnableStatistics", ["statisticsEnabled"]);
        _eventHubConnectionString = BicepValue<string>.DefineProperty(this, "EventHubConnectionString", ["eventHubConnectionString"]);
        _storageAccountConnectionString = BicepValue<string>.DefineProperty(this, "StorageAccountConnectionString", ["storageAccountConnectionString"]);
        _aadClientId = BicepValue<Guid>.DefineProperty(this, "AadClientId", ["aadClientId"]);
        _aadTenantId = BicepValue<Guid>.DefineProperty(this, "AadTenantId", ["aadTenantId"]);
        _superUser = BicepValue<string>.DefineProperty(this, "SuperUser", ["superUser"]);
        _websiteName = BicepValue<string>.DefineProperty(this, "WebsiteName", ["websiteName"]);
        _additionalProperties = BicepDictionary<BinaryData>.DefineProperty(this, "AdditionalProperties", ["AdditionalProperties"]);
    }
}
