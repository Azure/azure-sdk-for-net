// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.CognitiveServices;

/// <summary>
/// Azure OpenAI Content Filters properties.
/// </summary>
public partial class RaiPolicyProperties : ProvisionableConstruct
{
    /// <summary>
    /// Content Filters policy type.
    /// </summary>
    public BicepValue<RaiPolicyType> PolicyType 
    {
        get { Initialize(); return _policyType!; }
    }
    private BicepValue<RaiPolicyType>? _policyType;

    /// <summary>
    /// Rai policy mode. The enum value mapping is as below: Default = 0,
    /// Deferred=1, Blocking=2, Asynchronous_filter =3. Please use
    /// &apos;Asynchronous_filter&apos; after 2024-10-01. It is the same as
    /// &apos;Deferred&apos; in previous version.
    /// </summary>
    public BicepValue<RaiPolicyMode> Mode 
    {
        get { Initialize(); return _mode!; }
        set { Initialize(); _mode!.Assign(value); }
    }
    private BicepValue<RaiPolicyMode>? _mode;

    /// <summary>
    /// Name of Rai policy.
    /// </summary>
    public BicepValue<string> BasePolicyName 
    {
        get { Initialize(); return _basePolicyName!; }
        set { Initialize(); _basePolicyName!.Assign(value); }
    }
    private BicepValue<string>? _basePolicyName;

    /// <summary>
    /// The list of Content Filters.
    /// </summary>
    public BicepList<RaiPolicyContentFilter> ContentFilters 
    {
        get { Initialize(); return _contentFilters!; }
        set { Initialize(); _contentFilters!.Assign(value); }
    }
    private BicepList<RaiPolicyContentFilter>? _contentFilters;

    /// <summary>
    /// The list of custom Blocklist.
    /// </summary>
    public BicepList<CustomBlocklistConfig> CustomBlocklists 
    {
        get { Initialize(); return _customBlocklists!; }
        set { Initialize(); _customBlocklists!.Assign(value); }
    }
    private BicepList<CustomBlocklistConfig>? _customBlocklists;

    /// <summary>
    /// Creates a new RaiPolicyProperties.
    /// </summary>
    public RaiPolicyProperties()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of RaiPolicyProperties.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _policyType = DefineProperty<RaiPolicyType>("PolicyType", ["type"], isOutput: true);
        _mode = DefineProperty<RaiPolicyMode>("Mode", ["mode"]);
        _basePolicyName = DefineProperty<string>("BasePolicyName", ["basePolicyName"]);
        _contentFilters = DefineListProperty<RaiPolicyContentFilter>("ContentFilters", ["contentFilters"]);
        _customBlocklists = DefineListProperty<CustomBlocklistConfig>("CustomBlocklists", ["customBlocklists"]);
    }
}
