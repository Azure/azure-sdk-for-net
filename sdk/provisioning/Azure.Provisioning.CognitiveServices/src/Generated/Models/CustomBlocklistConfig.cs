// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.CognitiveServices;

/// <summary>
/// Gets or sets the source to which filter applies.
/// </summary>
public partial class CustomBlocklistConfig : ProvisionableConstruct
{
    /// <summary>
    /// Content source to apply the Content Filters.
    /// </summary>
    public BicepValue<RaiPolicyContentSource> Source 
    {
        get { Initialize(); return _source!; }
        set { Initialize(); _source!.Assign(value); }
    }
    private BicepValue<RaiPolicyContentSource>? _source;

    /// <summary>
    /// Name of ContentFilter.
    /// </summary>
    public BicepValue<string> BlocklistName 
    {
        get { Initialize(); return _blocklistName!; }
        set { Initialize(); _blocklistName!.Assign(value); }
    }
    private BicepValue<string>? _blocklistName;

    /// <summary>
    /// If blocking would occur.
    /// </summary>
    public BicepValue<bool> Blocking 
    {
        get { Initialize(); return _blocking!; }
        set { Initialize(); _blocking!.Assign(value); }
    }
    private BicepValue<bool>? _blocking;

    /// <summary>
    /// Creates a new CustomBlocklistConfig.
    /// </summary>
    public CustomBlocklistConfig()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of CustomBlocklistConfig.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _source = DefineProperty<RaiPolicyContentSource>("Source", ["source"]);
        _blocklistName = DefineProperty<string>("BlocklistName", ["blocklistName"]);
        _blocking = DefineProperty<bool>("Blocking", ["blocking"]);
    }
}
