// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.CognitiveServices;

/// <summary>
/// Cognitive Services account Model.
/// </summary>
public partial class CognitiveServicesAccountModel : CognitiveServicesAccountDeploymentModel
{
    /// <summary>
    /// Base Model Identifier.
    /// </summary>
    public BicepValue<CognitiveServicesAccountDeploymentModel> BaseModel { get => _baseModel; set => _baseModel.Assign(value); }
    private readonly BicepValue<CognitiveServicesAccountDeploymentModel> _baseModel;

    /// <summary>
    /// If the model is default version.
    /// </summary>
    public BicepValue<bool> IsDefaultVersion { get => _isDefaultVersion; set => _isDefaultVersion.Assign(value); }
    private readonly BicepValue<bool> _isDefaultVersion;

    /// <summary>
    /// The list of Model Sku.
    /// </summary>
    public BicepList<CognitiveServicesModelSku> Skus { get => _skus; set => _skus.Assign(value); }
    private readonly BicepList<CognitiveServicesModelSku> _skus;

    /// <summary>
    /// The max capacity.
    /// </summary>
    public BicepValue<int> MaxCapacity { get => _maxCapacity; set => _maxCapacity.Assign(value); }
    private readonly BicepValue<int> _maxCapacity;

    /// <summary>
    /// The capabilities.
    /// </summary>
    public BicepDictionary<string> Capabilities { get => _capabilities; set => _capabilities.Assign(value); }
    private readonly BicepDictionary<string> _capabilities;

    /// <summary>
    /// The capabilities for finetune models.
    /// </summary>
    public BicepDictionary<string> FinetuneCapabilities { get => _finetuneCapabilities; set => _finetuneCapabilities.Assign(value); }
    private readonly BicepDictionary<string> _finetuneCapabilities;

    /// <summary>
    /// Cognitive Services account ModelDeprecationInfo.
    /// </summary>
    public BicepValue<ServiceAccountModelDeprecationInfo> Deprecation { get => _deprecation; set => _deprecation.Assign(value); }
    private readonly BicepValue<ServiceAccountModelDeprecationInfo> _deprecation;

    /// <summary>
    /// Model lifecycle status.
    /// </summary>
    public BicepValue<ModelLifecycleStatus> LifecycleStatus { get => _lifecycleStatus; set => _lifecycleStatus.Assign(value); }
    private readonly BicepValue<ModelLifecycleStatus> _lifecycleStatus;

    /// <summary>
    /// Metadata pertaining to creation and last modification of the resource.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new CognitiveServicesAccountModel.
    /// </summary>
    public CognitiveServicesAccountModel() : base()
    {
        _baseModel = BicepValue<CognitiveServicesAccountDeploymentModel>.DefineProperty(this, "BaseModel", ["baseModel"]);
        _isDefaultVersion = BicepValue<bool>.DefineProperty(this, "IsDefaultVersion", ["isDefaultVersion"]);
        _skus = BicepList<CognitiveServicesModelSku>.DefineProperty(this, "Skus", ["skus"]);
        _maxCapacity = BicepValue<int>.DefineProperty(this, "MaxCapacity", ["maxCapacity"]);
        _capabilities = BicepDictionary<string>.DefineProperty(this, "Capabilities", ["capabilities"]);
        _finetuneCapabilities = BicepDictionary<string>.DefineProperty(this, "FinetuneCapabilities", ["finetuneCapabilities"]);
        _deprecation = BicepValue<ServiceAccountModelDeprecationInfo>.DefineProperty(this, "Deprecation", ["deprecation"]);
        _lifecycleStatus = BicepValue<ModelLifecycleStatus>.DefineProperty(this, "LifecycleStatus", ["lifecycleStatus"]);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }
}
