// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.CognitiveServices;

/// <summary>
/// Properties of Cognitive Services account deployment.
/// </summary>
public partial class CognitiveServicesAccountDeploymentProperties : ProvisioningConstruct
{
    /// <summary>
    /// Gets the status of the resource at the time the operation was called.
    /// </summary>
    public BicepValue<CognitiveServicesAccountDeploymentProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<CognitiveServicesAccountDeploymentProvisioningState> _provisioningState;

    /// <summary>
    /// Properties of Cognitive Services account deployment model.
    /// </summary>
    public BicepValue<CognitiveServicesAccountDeploymentModel> Model { get => _model; set => _model.Assign(value); }
    private readonly BicepValue<CognitiveServicesAccountDeploymentModel> _model;

    /// <summary>
    /// Properties of Cognitive Services account deployment model.
    /// </summary>
    public BicepValue<CognitiveServicesAccountDeploymentScaleSettings> ScaleSettings { get => _scaleSettings; set => _scaleSettings.Assign(value); }
    private readonly BicepValue<CognitiveServicesAccountDeploymentScaleSettings> _scaleSettings;

    /// <summary>
    /// The capabilities.
    /// </summary>
    public BicepDictionary<string> Capabilities { get => _capabilities; }
    private readonly BicepDictionary<string> _capabilities;

    /// <summary>
    /// The name of RAI policy.
    /// </summary>
    public BicepValue<string> RaiPolicyName { get => _raiPolicyName; set => _raiPolicyName.Assign(value); }
    private readonly BicepValue<string> _raiPolicyName;

    /// <summary>
    /// The call rate limit Cognitive Services account.
    /// </summary>
    public BicepValue<ServiceAccountCallRateLimit> CallRateLimit { get => _callRateLimit; }
    private readonly BicepValue<ServiceAccountCallRateLimit> _callRateLimit;

    /// <summary>
    /// Gets the rate limits.
    /// </summary>
    public BicepList<ServiceAccountThrottlingRule> RateLimits { get => _rateLimits; }
    private readonly BicepList<ServiceAccountThrottlingRule> _rateLimits;

    /// <summary>
    /// Deployment model version upgrade option.
    /// </summary>
    public BicepValue<DeploymentModelVersionUpgradeOption> VersionUpgradeOption { get => _versionUpgradeOption; set => _versionUpgradeOption.Assign(value); }
    private readonly BicepValue<DeploymentModelVersionUpgradeOption> _versionUpgradeOption;

    /// <summary>
    /// Creates a new CognitiveServicesAccountDeploymentProperties.
    /// </summary>
    public CognitiveServicesAccountDeploymentProperties()
    {
        _provisioningState = BicepValue<CognitiveServicesAccountDeploymentProvisioningState>.DefineProperty(this, "ProvisioningState", ["provisioningState"], isOutput: true);
        _model = BicepValue<CognitiveServicesAccountDeploymentModel>.DefineProperty(this, "Model", ["model"]);
        _scaleSettings = BicepValue<CognitiveServicesAccountDeploymentScaleSettings>.DefineProperty(this, "ScaleSettings", ["scaleSettings"]);
        _capabilities = BicepDictionary<string>.DefineProperty(this, "Capabilities", ["capabilities"], isOutput: true);
        _raiPolicyName = BicepValue<string>.DefineProperty(this, "RaiPolicyName", ["raiPolicyName"]);
        _callRateLimit = BicepValue<ServiceAccountCallRateLimit>.DefineProperty(this, "CallRateLimit", ["callRateLimit"], isOutput: true);
        _rateLimits = BicepList<ServiceAccountThrottlingRule>.DefineProperty(this, "RateLimits", ["rateLimits"], isOutput: true);
        _versionUpgradeOption = BicepValue<DeploymentModelVersionUpgradeOption>.DefineProperty(this, "VersionUpgradeOption", ["versionUpgradeOption"]);
    }
}
