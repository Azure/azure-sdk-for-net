// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;

namespace Azure.Provisioning.CognitiveServices;

/// <summary>
/// Properties to EncryptionScope.
/// </summary>
public partial class CognitiveServicesEncryptionScopeProperties : ServiceAccountEncryptionProperties
{
    /// <summary>
    /// Gets the status of the resource at the time the operation was called.
    /// </summary>
    public BicepValue<EncryptionScopeProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<EncryptionScopeProvisioningState>? _provisioningState;

    /// <summary>
    /// The encryptionScope state.
    /// </summary>
    public BicepValue<EncryptionScopeState> State 
    {
        get { Initialize(); return _state!; }
        set { Initialize(); _state!.Assign(value); }
    }
    private BicepValue<EncryptionScopeState>? _state;

    /// <summary>
    /// Creates a new CognitiveServicesEncryptionScopeProperties.
    /// </summary>
    public CognitiveServicesEncryptionScopeProperties() : base()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// CognitiveServicesEncryptionScopeProperties.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _provisioningState = DefineProperty<EncryptionScopeProvisioningState>("ProvisioningState", ["provisioningState"], isOutput: true);
        _state = DefineProperty<EncryptionScopeState>("State", ["state"]);
    }
}
