// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.EventGrid;

/// <summary>
/// PartnerConfiguration.
/// </summary>
public partial class PartnerConfiguration : Resource
{
    /// <summary>
    /// Gets the Name.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// The details of authorized partners.
    /// </summary>
    public BicepValue<PartnerAuthorization> PartnerAuthorization { get => _partnerAuthorization; set => _partnerAuthorization.Assign(value); }
    private readonly BicepValue<PartnerAuthorization> _partnerAuthorization;

    /// <summary>
    /// Provisioning state of the partner configuration.
    /// </summary>
    public BicepValue<PartnerConfigurationProvisioningState> ProvisioningState { get => _provisioningState; set => _provisioningState.Assign(value); }
    private readonly BicepValue<PartnerConfigurationProvisioningState> _provisioningState;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new PartnerConfiguration.
    /// </summary>
    /// <param name="resourceName">Name of the PartnerConfiguration.</param>
    /// <param name="resourceVersion">Version of the PartnerConfiguration.</param>
    public PartnerConfiguration(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.EventGrid/partnerConfigurations", resourceVersion ?? "2022-06-15")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _partnerAuthorization = BicepValue<PartnerAuthorization>.DefineProperty(this, "PartnerAuthorization", ["properties", "partnerAuthorization"]);
        _provisioningState = BicepValue<PartnerConfigurationProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported PartnerConfiguration resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-06-01-preview.
        /// </summary>
        public static readonly string V2024_06_01_preview = "2024-06-01-preview";

        /// <summary>
        /// 2022-06-15.
        /// </summary>
        public static readonly string V2022_06_15 = "2022-06-15";
    }

    /// <summary>
    /// Creates a reference to an existing PartnerConfiguration.
    /// </summary>
    /// <param name="resourceName">Name of the PartnerConfiguration.</param>
    /// <param name="resourceVersion">Version of the PartnerConfiguration.</param>
    /// <returns>The existing PartnerConfiguration resource.</returns>
    public static PartnerConfiguration FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
