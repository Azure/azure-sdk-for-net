// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.EventGrid;

/// <summary>
/// EventGridDomain.
/// </summary>
public partial class EventGridDomain : Resource
{
    /// <summary>
    /// Name of the domain.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// This Boolean is used to specify the creation mechanism for
    /// &apos;all&apos; the Event Grid Domain Topics associated with this
    /// Event Grid Domain resource.             In this context, creation of
    /// domain topic can be auto-managed (when true) or self-managed (when
    /// false). The default value for this property is true.             When
    /// this property is null or set to true, Event Grid is responsible of
    /// automatically creating the domain topic when the first event
    /// subscription is             created at the scope of the domain topic.
    /// If this property is set to false, then creating the first event
    /// subscription will require creating a domain topic             by the
    /// user. The self-management mode can be used if the user wants full
    /// control of when the domain topic is created, while auto-managed mode
    /// provides the             flexibility to perform less operations and
    /// manage fewer resources by the user. Also, note that in auto-managed
    /// creation mode, user is allowed to create the             domain topic
    /// on demand if needed.
    /// </summary>
    public BicepValue<bool> AutoCreateTopicWithFirstSubscription { get => _autoCreateTopicWithFirstSubscription; set => _autoCreateTopicWithFirstSubscription.Assign(value); }
    private readonly BicepValue<bool> _autoCreateTopicWithFirstSubscription;

    /// <summary>
    /// This Boolean is used to specify the deletion mechanism for
    /// &apos;all&apos; the Event Grid Domain Topics associated with this
    /// Event Grid Domain resource.             In this context, deletion of
    /// domain topic can be auto-managed (when true) or self-managed (when
    /// false). The default value for this property is true.             When
    /// this property is set to true, Event Grid is responsible of
    /// automatically deleting the domain topic when the last event
    /// subscription at the scope             of the domain topic is deleted.
    /// If this property is set to false, then the user needs to manually
    /// delete the domain topic when it is no longer needed             (e.g.,
    /// when last event subscription is deleted and the resource needs to be
    /// cleaned up). The self-management mode can be used if the user wants
    /// full             control of when the domain topic needs to be deleted,
    /// while auto-managed mode provides the flexibility to perform less
    /// operations and manage fewer             resources by the user.
    /// </summary>
    public BicepValue<bool> AutoDeleteTopicWithLastSubscription { get => _autoDeleteTopicWithLastSubscription; set => _autoDeleteTopicWithLastSubscription.Assign(value); }
    private readonly BicepValue<bool> _autoDeleteTopicWithLastSubscription;

    /// <summary>
    /// Data Residency Boundary of the resource.
    /// </summary>
    public BicepValue<DataResidencyBoundary> DataResidencyBoundary { get => _dataResidencyBoundary; set => _dataResidencyBoundary.Assign(value); }
    private readonly BicepValue<DataResidencyBoundary> _dataResidencyBoundary;

    /// <summary>
    /// Event Type Information for the domain. This information is provided by
    /// the publisher and can be used by the             subscriber to view
    /// different types of events that are published.
    /// </summary>
    public BicepValue<PartnerTopicEventTypeInfo> EventTypeInfo { get => _eventTypeInfo; set => _eventTypeInfo.Assign(value); }
    private readonly BicepValue<PartnerTopicEventTypeInfo> _eventTypeInfo;

    /// <summary>
    /// Identity information for the Event Grid Domain resource.
    /// </summary>
    public BicepValue<ManagedServiceIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<ManagedServiceIdentity> _identity;

    /// <summary>
    /// This can be used to restrict traffic from specific IPs instead of all
    /// IPs. Note: These are considered only if PublicNetworkAccess is enabled.
    /// </summary>
    public BicepList<EventGridInboundIPRule> InboundIPRules { get => _inboundIPRules; set => _inboundIPRules.Assign(value); }
    private readonly BicepList<EventGridInboundIPRule> _inboundIPRules;

    /// <summary>
    /// This determines the format that Event Grid should expect for incoming
    /// events published to the Event Grid Domain Resource.
    /// </summary>
    public BicepValue<EventGridInputSchema> InputSchema { get => _inputSchema; set => _inputSchema.Assign(value); }
    private readonly BicepValue<EventGridInputSchema> _inputSchema;

    /// <summary>
    /// Information about the InputSchemaMapping which specified the info about
    /// mapping event payload.             Please note
    /// Azure.ResourceManager.EventGrid.Models.EventGridInputSchemaMapping is
    /// the base class. According to the scenario, a derived class of the base
    /// class might need to be assigned here, or this property needs to be
    /// casted to one of the possible derived classes.             The
    /// available derived classes include
    /// Azure.ResourceManager.EventGrid.Models.EventGridJsonInputSchemaMapping.
    /// </summary>
    public BicepValue<EventGridInputSchemaMapping> InputSchemaMapping { get => _inputSchemaMapping; set => _inputSchemaMapping.Assign(value); }
    private readonly BicepValue<EventGridInputSchemaMapping> _inputSchemaMapping;

    /// <summary>
    /// This boolean is used to enable or disable local auth. Default value is
    /// false. When the property is set to true, only AAD token will be used
    /// to authenticate if user is allowed to publish to the domain.
    /// </summary>
    public BicepValue<bool> IsLocalAuthDisabled { get => _isLocalAuthDisabled; set => _isLocalAuthDisabled.Assign(value); }
    private readonly BicepValue<bool> _isLocalAuthDisabled;

    /// <summary>
    /// Minimum TLS version of the publisher allowed to publish to this domain.
    /// </summary>
    public BicepValue<TlsVersion> MinimumTlsVersionAllowed { get => _minimumTlsVersionAllowed; set => _minimumTlsVersionAllowed.Assign(value); }
    private readonly BicepValue<TlsVersion> _minimumTlsVersionAllowed;

    /// <summary>
    /// This determines if traffic is allowed over public network. By default
    /// it is enabled.             You can further restrict to specific IPs by
    /// configuring &lt;seealso
    /// cref=&quot;P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules&quot;
    /// /&gt;
    /// </summary>
    public BicepValue<EventGridPublicNetworkAccess> PublicNetworkAccess { get => _publicNetworkAccess; set => _publicNetworkAccess.Assign(value); }
    private readonly BicepValue<EventGridPublicNetworkAccess> _publicNetworkAccess;

    /// <summary>
    /// The Sku name of the resource. The possible values are: Basic or Premium.
    /// </summary>
    public BicepValue<EventGridSku> SkuName { get => _skuName; set => _skuName.Assign(value); }
    private readonly BicepValue<EventGridSku> _skuName;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Endpoint for the Event Grid Domain Resource which is used for
    /// publishing the events.
    /// </summary>
    public BicepValue<Uri> Endpoint { get => _endpoint; }
    private readonly BicepValue<Uri> _endpoint;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Metric resource id for the Event Grid Domain Resource.
    /// </summary>
    public BicepValue<string> MetricResourceId { get => _metricResourceId; }
    private readonly BicepValue<string> _metricResourceId;

    /// <summary>
    /// List of private endpoint connections.
    /// </summary>
    public BicepList<EventGridPrivateEndpointConnectionData> PrivateEndpointConnections { get => _privateEndpointConnections; }
    private readonly BicepList<EventGridPrivateEndpointConnectionData> _privateEndpointConnections;

    /// <summary>
    /// Provisioning state of the Event Grid Domain Resource.
    /// </summary>
    public BicepValue<EventGridDomainProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<EventGridDomainProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new EventGridDomain.
    /// </summary>
    /// <param name="resourceName">Name of the EventGridDomain.</param>
    /// <param name="resourceVersion">Version of the EventGridDomain.</param>
    public EventGridDomain(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.EventGrid/domains", resourceVersion ?? "2022-06-15")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _autoCreateTopicWithFirstSubscription = BicepValue<bool>.DefineProperty(this, "AutoCreateTopicWithFirstSubscription", ["properties", "autoCreateTopicWithFirstSubscription"]);
        _autoDeleteTopicWithLastSubscription = BicepValue<bool>.DefineProperty(this, "AutoDeleteTopicWithLastSubscription", ["properties", "autoDeleteTopicWithLastSubscription"]);
        _dataResidencyBoundary = BicepValue<DataResidencyBoundary>.DefineProperty(this, "DataResidencyBoundary", ["properties", "dataResidencyBoundary"]);
        _eventTypeInfo = BicepValue<PartnerTopicEventTypeInfo>.DefineProperty(this, "EventTypeInfo", ["properties", "eventTypeInfo"]);
        _identity = BicepValue<ManagedServiceIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _inboundIPRules = BicepList<EventGridInboundIPRule>.DefineProperty(this, "InboundIPRules", ["properties", "inboundIpRules"]);
        _inputSchema = BicepValue<EventGridInputSchema>.DefineProperty(this, "InputSchema", ["properties", "inputSchema"]);
        _inputSchemaMapping = BicepValue<EventGridInputSchemaMapping>.DefineProperty(this, "InputSchemaMapping", ["properties", "inputSchemaMapping"]);
        _isLocalAuthDisabled = BicepValue<bool>.DefineProperty(this, "IsLocalAuthDisabled", ["properties", "disableLocalAuth"]);
        _minimumTlsVersionAllowed = BicepValue<TlsVersion>.DefineProperty(this, "MinimumTlsVersionAllowed", ["properties", "minimumTlsVersionAllowed"]);
        _publicNetworkAccess = BicepValue<EventGridPublicNetworkAccess>.DefineProperty(this, "PublicNetworkAccess", ["properties", "publicNetworkAccess"]);
        _skuName = BicepValue<EventGridSku>.DefineProperty(this, "SkuName", ["sku", "name"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _endpoint = BicepValue<Uri>.DefineProperty(this, "Endpoint", ["properties", "endpoint"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _metricResourceId = BicepValue<string>.DefineProperty(this, "MetricResourceId", ["properties", "metricResourceId"], isOutput: true);
        _privateEndpointConnections = BicepList<EventGridPrivateEndpointConnectionData>.DefineProperty(this, "PrivateEndpointConnections", ["properties", "privateEndpointConnections"], isOutput: true);
        _provisioningState = BicepValue<EventGridDomainProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported EventGridDomain resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-06-01-preview.
        /// </summary>
        public static readonly string V2024_06_01_preview = "2024-06-01-preview";

        /// <summary>
        /// 2022-06-15.
        /// </summary>
        public static readonly string V2022_06_15 = "2022-06-15";

        /// <summary>
        /// 2021-12-01.
        /// </summary>
        public static readonly string V2021_12_01 = "2021-12-01";

        /// <summary>
        /// 2020-06-01.
        /// </summary>
        public static readonly string V2020_06_01 = "2020-06-01";

        /// <summary>
        /// 2019-06-01.
        /// </summary>
        public static readonly string V2019_06_01 = "2019-06-01";
    }

    /// <summary>
    /// Creates a reference to an existing EventGridDomain.
    /// </summary>
    /// <param name="resourceName">Name of the EventGridDomain.</param>
    /// <param name="resourceVersion">Version of the EventGridDomain.</param>
    /// <returns>The existing EventGridDomain resource.</returns>
    public static EventGridDomain FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this EventGridDomain resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 3, maxLength: 50, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen);
}
