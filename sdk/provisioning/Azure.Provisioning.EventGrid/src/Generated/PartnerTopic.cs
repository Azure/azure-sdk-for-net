// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.EventGrid;

/// <summary>
/// PartnerTopic.
/// </summary>
public partial class PartnerTopic : Resource
{
    /// <summary>
    /// Name of the partner topic.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Activation state of the partner topic.
    /// </summary>
    public BicepValue<PartnerTopicActivationState> ActivationState { get => _activationState; set => _activationState.Assign(value); }
    private readonly BicepValue<PartnerTopicActivationState> _activationState;

    /// <summary>
    /// Event Type information from the corresponding event channel.
    /// </summary>
    public BicepValue<PartnerTopicEventTypeInfo> EventTypeInfo { get => _eventTypeInfo; set => _eventTypeInfo.Assign(value); }
    private readonly BicepValue<PartnerTopicEventTypeInfo> _eventTypeInfo;

    /// <summary>
    /// Expiration time of the partner topic. If this timer expires while the
    /// partner topic is still never activated,             the partner topic
    /// and corresponding event channel are deleted.
    /// </summary>
    public BicepValue<DateTimeOffset> ExpireOnIfNotActivated { get => _expireOnIfNotActivated; set => _expireOnIfNotActivated.Assign(value); }
    private readonly BicepValue<DateTimeOffset> _expireOnIfNotActivated;

    /// <summary>
    /// Identity information for the Partner Topic resource.
    /// </summary>
    public BicepValue<ManagedServiceIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<ManagedServiceIdentity> _identity;

    /// <summary>
    /// Context or helpful message that can be used during the approval process
    /// by the subscriber.
    /// </summary>
    public BicepValue<string> MessageForActivation { get => _messageForActivation; set => _messageForActivation.Assign(value); }
    private readonly BicepValue<string> _messageForActivation;

    /// <summary>
    /// The immutableId of the corresponding partner registration.
    /// </summary>
    public BicepValue<Guid> PartnerRegistrationImmutableId { get => _partnerRegistrationImmutableId; set => _partnerRegistrationImmutableId.Assign(value); }
    private readonly BicepValue<Guid> _partnerRegistrationImmutableId;

    /// <summary>
    /// Friendly description about the topic. This can be set by the
    /// publisher/partner to show custom description for the customer partner
    /// topic.             This will be helpful to remove any ambiguity of the
    /// origin of creation of the partner topic for the customer.
    /// </summary>
    public BicepValue<string> PartnerTopicFriendlyDescription { get => _partnerTopicFriendlyDescription; set => _partnerTopicFriendlyDescription.Assign(value); }
    private readonly BicepValue<string> _partnerTopicFriendlyDescription;

    /// <summary>
    /// Source associated with this partner topic. This represents a unique
    /// partner resource.
    /// </summary>
    public BicepValue<string> Source { get => _source; set => _source.Assign(value); }
    private readonly BicepValue<string> _source;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Provisioning state of the partner topic.
    /// </summary>
    public BicepValue<PartnerTopicProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<PartnerTopicProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new PartnerTopic.
    /// </summary>
    /// <param name="resourceName">Name of the PartnerTopic.</param>
    /// <param name="resourceVersion">Version of the PartnerTopic.</param>
    public PartnerTopic(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.EventGrid/partnerTopics", resourceVersion ?? "2022-06-15")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _activationState = BicepValue<PartnerTopicActivationState>.DefineProperty(this, "ActivationState", ["properties", "activationState"]);
        _eventTypeInfo = BicepValue<PartnerTopicEventTypeInfo>.DefineProperty(this, "EventTypeInfo", ["properties", "eventTypeInfo"]);
        _expireOnIfNotActivated = BicepValue<DateTimeOffset>.DefineProperty(this, "ExpireOnIfNotActivated", ["properties", "expirationTimeIfNotActivatedUtc"]);
        _identity = BicepValue<ManagedServiceIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _messageForActivation = BicepValue<string>.DefineProperty(this, "MessageForActivation", ["properties", "messageForActivation"]);
        _partnerRegistrationImmutableId = BicepValue<Guid>.DefineProperty(this, "PartnerRegistrationImmutableId", ["properties", "partnerRegistrationImmutableId"]);
        _partnerTopicFriendlyDescription = BicepValue<string>.DefineProperty(this, "PartnerTopicFriendlyDescription", ["properties", "partnerTopicFriendlyDescription"]);
        _source = BicepValue<string>.DefineProperty(this, "Source", ["properties", "source"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningState = BicepValue<PartnerTopicProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported PartnerTopic resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-06-01-preview.
        /// </summary>
        public static readonly string V2024_06_01_preview = "2024-06-01-preview";

        /// <summary>
        /// 2022-06-15.
        /// </summary>
        public static readonly string V2022_06_15 = "2022-06-15";
    }

    /// <summary>
    /// Creates a reference to an existing PartnerTopic.
    /// </summary>
    /// <param name="resourceName">Name of the PartnerTopic.</param>
    /// <param name="resourceVersion">Version of the PartnerTopic.</param>
    /// <returns>The existing PartnerTopic resource.</returns>
    public static PartnerTopic FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
