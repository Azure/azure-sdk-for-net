// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.EventGrid;

/// <summary>
/// CaCertificate.
/// </summary>
public partial class CaCertificate : Resource
{
    /// <summary>
    /// The CA certificate name.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Description for the CA Certificate resource.
    /// </summary>
    public BicepValue<string> Description { get => _description; set => _description.Assign(value); }
    private readonly BicepValue<string> _description;

    /// <summary>
    /// Base64 encoded PEM (Privacy Enhanced Mail) format certificate data.
    /// </summary>
    public BicepValue<string> EncodedCertificate { get => _encodedCertificate; set => _encodedCertificate.Assign(value); }
    private readonly BicepValue<string> _encodedCertificate;

    /// <summary>
    /// Certificate expiry time in UTC. This is a read-only field.
    /// </summary>
    public BicepValue<DateTimeOffset> ExpiryTimeInUtc { get => _expiryTimeInUtc; }
    private readonly BicepValue<DateTimeOffset> _expiryTimeInUtc;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Certificate issue time in UTC. This is a read-only field.
    /// </summary>
    public BicepValue<DateTimeOffset> IssueTimeInUtc { get => _issueTimeInUtc; }
    private readonly BicepValue<DateTimeOffset> _issueTimeInUtc;

    /// <summary>
    /// Provisioning state of the CA Certificate resource.
    /// </summary>
    public BicepValue<CaCertificateProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<CaCertificateProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent EventGridNamespace.
    /// </summary>
    public EventGridNamespace? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<EventGridNamespace> _parent;

    /// <summary>
    /// Creates a new CaCertificate.
    /// </summary>
    /// <param name="resourceName">Name of the CaCertificate.</param>
    /// <param name="resourceVersion">Version of the CaCertificate.</param>
    public CaCertificate(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.EventGrid/namespaces/caCertificates", resourceVersion ?? "2024-06-01-preview")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _description = BicepValue<string>.DefineProperty(this, "Description", ["properties", "description"]);
        _encodedCertificate = BicepValue<string>.DefineProperty(this, "EncodedCertificate", ["properties", "encodedCertificate"]);
        _expiryTimeInUtc = BicepValue<DateTimeOffset>.DefineProperty(this, "ExpiryTimeInUtc", ["properties", "expiryTimeInUtc"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _issueTimeInUtc = BicepValue<DateTimeOffset>.DefineProperty(this, "IssueTimeInUtc", ["properties", "issueTimeInUtc"], isOutput: true);
        _provisioningState = BicepValue<CaCertificateProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<EventGridNamespace>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported CaCertificate resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-06-01-preview.
        /// </summary>
        public static readonly string V2024_06_01_preview = "2024-06-01-preview";
    }

    /// <summary>
    /// Creates a reference to an existing CaCertificate.
    /// </summary>
    /// <param name="resourceName">Name of the CaCertificate.</param>
    /// <param name="resourceVersion">Version of the CaCertificate.</param>
    /// <returns>The existing CaCertificate resource.</returns>
    public static CaCertificate FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
