// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.EventGrid;

/// <summary>
/// PartnerNamespace.
/// </summary>
public partial class PartnerNamespace : Resource
{
    /// <summary>
    /// Name of the partner namespace.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// This can be used to restrict traffic from specific IPs instead of all
    /// IPs. Note: These are considered only if PublicNetworkAccess is enabled.
    /// </summary>
    public BicepList<EventGridInboundIPRule> InboundIPRules { get => _inboundIPRules; set => _inboundIPRules.Assign(value); }
    private readonly BicepList<EventGridInboundIPRule> _inboundIPRules;

    /// <summary>
    /// This boolean is used to enable or disable local auth. Default value is
    /// false. When the property is set to true, only AAD token will be used
    /// to authenticate if user is allowed to publish to the partner namespace.
    /// </summary>
    public BicepValue<bool> IsLocalAuthDisabled { get => _isLocalAuthDisabled; set => _isLocalAuthDisabled.Assign(value); }
    private readonly BicepValue<bool> _isLocalAuthDisabled;

    /// <summary>
    /// Minimum TLS version of the publisher allowed to publish to this partner
    /// namespace.
    /// </summary>
    public BicepValue<TlsVersion> MinimumTlsVersionAllowed { get => _minimumTlsVersionAllowed; set => _minimumTlsVersionAllowed.Assign(value); }
    private readonly BicepValue<TlsVersion> _minimumTlsVersionAllowed;

    /// <summary>
    /// The fully qualified ARM Id of the partner registration that should be
    /// associated with this partner namespace. This takes the following
    /// format:
    /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}.
    /// </summary>
    public BicepValue<ResourceIdentifier> PartnerRegistrationFullyQualifiedId { get => _partnerRegistrationFullyQualifiedId; set => _partnerRegistrationFullyQualifiedId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _partnerRegistrationFullyQualifiedId;

    /// <summary>
    /// This determines if events published to this partner namespace should
    /// use the source attribute in the event payload             or use the
    /// channel name in the header when matching to the partner topic. If none
    /// is specified, source attribute routing will be used to match the
    /// partner topic.
    /// </summary>
    public BicepValue<PartnerTopicRoutingMode> PartnerTopicRoutingMode { get => _partnerTopicRoutingMode; set => _partnerTopicRoutingMode.Assign(value); }
    private readonly BicepValue<PartnerTopicRoutingMode> _partnerTopicRoutingMode;

    /// <summary>
    /// This determines if traffic is allowed over public network. By default
    /// it is enabled.             You can further restrict to specific IPs by
    /// configuring &lt;seealso
    /// cref=&quot;P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceProperties.InboundIpRules&quot;
    /// /&gt;
    /// </summary>
    public BicepValue<EventGridPublicNetworkAccess> PublicNetworkAccess { get => _publicNetworkAccess; set => _publicNetworkAccess.Assign(value); }
    private readonly BicepValue<EventGridPublicNetworkAccess> _publicNetworkAccess;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Endpoint for the partner namespace.
    /// </summary>
    public BicepValue<Uri> Endpoint { get => _endpoint; }
    private readonly BicepValue<Uri> _endpoint;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// List of private endpoint connections.
    /// </summary>
    public BicepList<EventGridPrivateEndpointConnectionData> PrivateEndpointConnections { get => _privateEndpointConnections; }
    private readonly BicepList<EventGridPrivateEndpointConnectionData> _privateEndpointConnections;

    /// <summary>
    /// Provisioning state of the partner namespace.
    /// </summary>
    public BicepValue<PartnerNamespaceProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<PartnerNamespaceProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new PartnerNamespace.
    /// </summary>
    /// <param name="resourceName">Name of the PartnerNamespace.</param>
    /// <param name="resourceVersion">Version of the PartnerNamespace.</param>
    public PartnerNamespace(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.EventGrid/partnerNamespaces", resourceVersion ?? "2022-06-15")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _inboundIPRules = BicepList<EventGridInboundIPRule>.DefineProperty(this, "InboundIPRules", ["properties", "inboundIpRules"]);
        _isLocalAuthDisabled = BicepValue<bool>.DefineProperty(this, "IsLocalAuthDisabled", ["properties", "disableLocalAuth"]);
        _minimumTlsVersionAllowed = BicepValue<TlsVersion>.DefineProperty(this, "MinimumTlsVersionAllowed", ["properties", "minimumTlsVersionAllowed"]);
        _partnerRegistrationFullyQualifiedId = BicepValue<ResourceIdentifier>.DefineProperty(this, "PartnerRegistrationFullyQualifiedId", ["properties", "partnerRegistrationFullyQualifiedId"]);
        _partnerTopicRoutingMode = BicepValue<PartnerTopicRoutingMode>.DefineProperty(this, "PartnerTopicRoutingMode", ["properties", "partnerTopicRoutingMode"]);
        _publicNetworkAccess = BicepValue<EventGridPublicNetworkAccess>.DefineProperty(this, "PublicNetworkAccess", ["properties", "publicNetworkAccess"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _endpoint = BicepValue<Uri>.DefineProperty(this, "Endpoint", ["properties", "endpoint"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _privateEndpointConnections = BicepList<EventGridPrivateEndpointConnectionData>.DefineProperty(this, "PrivateEndpointConnections", ["properties", "privateEndpointConnections"], isOutput: true);
        _provisioningState = BicepValue<PartnerNamespaceProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported PartnerNamespace resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-06-01-preview.
        /// </summary>
        public static readonly string V2024_06_01_preview = "2024-06-01-preview";

        /// <summary>
        /// 2022-06-15.
        /// </summary>
        public static readonly string V2022_06_15 = "2022-06-15";
    }

    /// <summary>
    /// Creates a reference to an existing PartnerNamespace.
    /// </summary>
    /// <param name="resourceName">Name of the PartnerNamespace.</param>
    /// <param name="resourceVersion">Version of the PartnerNamespace.</param>
    /// <returns>The existing PartnerNamespace resource.</returns>
    public static PartnerNamespace FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
