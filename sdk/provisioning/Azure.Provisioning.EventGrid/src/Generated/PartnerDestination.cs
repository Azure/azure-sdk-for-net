// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.EventGrid;

/// <summary>
/// PartnerDestination.
/// </summary>
public partial class PartnerDestination : Resource
{
    /// <summary>
    /// Name of the partner destination.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Activation state of the partner destination.
    /// </summary>
    public BicepValue<PartnerDestinationActivationState> ActivationState { get => _activationState; set => _activationState.Assign(value); }
    private readonly BicepValue<PartnerDestinationActivationState> _activationState;

    /// <summary>
    /// Endpoint Base URL of the partner destination.
    /// </summary>
    public BicepValue<Uri> EndpointBaseUri { get => _endpointBaseUri; set => _endpointBaseUri.Assign(value); }
    private readonly BicepValue<Uri> _endpointBaseUri;

    /// <summary>
    /// Endpoint context associated with this partner destination.
    /// </summary>
    public BicepValue<string> EndpointServiceContext { get => _endpointServiceContext; set => _endpointServiceContext.Assign(value); }
    private readonly BicepValue<string> _endpointServiceContext;

    /// <summary>
    /// Expiration time of the partner destination. If this timer expires and
    /// the partner destination was never activated,             the partner
    /// destination and corresponding channel are deleted.
    /// </summary>
    public BicepValue<DateTimeOffset> ExpirationTimeIfNotActivatedUtc { get => _expirationTimeIfNotActivatedUtc; set => _expirationTimeIfNotActivatedUtc.Assign(value); }
    private readonly BicepValue<DateTimeOffset> _expirationTimeIfNotActivatedUtc;

    /// <summary>
    /// Context or helpful message that can be used during the approval process.
    /// </summary>
    public BicepValue<string> MessageForActivation { get => _messageForActivation; set => _messageForActivation.Assign(value); }
    private readonly BicepValue<string> _messageForActivation;

    /// <summary>
    /// The immutable Id of the corresponding partner registration.
    /// </summary>
    public BicepValue<Guid> PartnerRegistrationImmutableId { get => _partnerRegistrationImmutableId; set => _partnerRegistrationImmutableId.Assign(value); }
    private readonly BicepValue<Guid> _partnerRegistrationImmutableId;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Provisioning state of the partner destination.
    /// </summary>
    public BicepValue<PartnerDestinationProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<PartnerDestinationProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new PartnerDestination.
    /// </summary>
    /// <param name="resourceName">Name of the PartnerDestination.</param>
    /// <param name="resourceVersion">Version of the PartnerDestination.</param>
    public PartnerDestination(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.EventGrid/partnerDestinations", resourceVersion ?? "2024-06-01-preview")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _activationState = BicepValue<PartnerDestinationActivationState>.DefineProperty(this, "ActivationState", ["properties", "activationState"]);
        _endpointBaseUri = BicepValue<Uri>.DefineProperty(this, "EndpointBaseUri", ["properties", "endpointBaseUrl"]);
        _endpointServiceContext = BicepValue<string>.DefineProperty(this, "EndpointServiceContext", ["properties", "endpointServiceContext"]);
        _expirationTimeIfNotActivatedUtc = BicepValue<DateTimeOffset>.DefineProperty(this, "ExpirationTimeIfNotActivatedUtc", ["properties", "expirationTimeIfNotActivatedUtc"]);
        _messageForActivation = BicepValue<string>.DefineProperty(this, "MessageForActivation", ["properties", "messageForActivation"]);
        _partnerRegistrationImmutableId = BicepValue<Guid>.DefineProperty(this, "PartnerRegistrationImmutableId", ["properties", "partnerRegistrationImmutableId"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningState = BicepValue<PartnerDestinationProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported PartnerDestination resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-06-01-preview.
        /// </summary>
        public static readonly string V2024_06_01_preview = "2024-06-01-preview";
    }

    /// <summary>
    /// Creates a reference to an existing PartnerDestination.
    /// </summary>
    /// <param name="resourceName">Name of the PartnerDestination.</param>
    /// <param name="resourceVersion">Version of the PartnerDestination.</param>
    /// <returns>The existing PartnerDestination resource.</returns>
    public static PartnerDestination FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
