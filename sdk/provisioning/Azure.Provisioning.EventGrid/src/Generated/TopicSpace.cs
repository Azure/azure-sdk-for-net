// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.EventGrid;

/// <summary>
/// TopicSpace.
/// </summary>
public partial class TopicSpace : Resource
{
    /// <summary>
    /// The topic space name.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Description for the Topic Space resource.
    /// </summary>
    public BicepValue<string> Description { get => _description; set => _description.Assign(value); }
    private readonly BicepValue<string> _description;

    /// <summary>
    /// The topic filters in the topic space.             Example:
    /// &quot;topicTemplates&quot;: [
    /// &quot;devices/foo/bar&quot;,
    /// &quot;devices/topic1/+&quot;,
    /// &quot;devices/${principal.name}/${principal.attributes.keyName}&quot;
    /// ].
    /// </summary>
    public BicepList<string> TopicTemplates { get => _topicTemplates; set => _topicTemplates.Assign(value); }
    private readonly BicepList<string> _topicTemplates;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Provisioning state of the TopicSpace resource.
    /// </summary>
    public BicepValue<TopicSpaceProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<TopicSpaceProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent EventGridNamespace.
    /// </summary>
    public EventGridNamespace? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<EventGridNamespace> _parent;

    /// <summary>
    /// Creates a new TopicSpace.
    /// </summary>
    /// <param name="resourceName">Name of the TopicSpace.</param>
    /// <param name="resourceVersion">Version of the TopicSpace.</param>
    public TopicSpace(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.EventGrid/namespaces/topicSpaces", resourceVersion ?? "2024-06-01-preview")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _description = BicepValue<string>.DefineProperty(this, "Description", ["properties", "description"]);
        _topicTemplates = BicepList<string>.DefineProperty(this, "TopicTemplates", ["properties", "topicTemplates"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningState = BicepValue<TopicSpaceProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<EventGridNamespace>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported TopicSpace resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-06-01-preview.
        /// </summary>
        public static readonly string V2024_06_01_preview = "2024-06-01-preview";
    }

    /// <summary>
    /// Creates a reference to an existing TopicSpace.
    /// </summary>
    /// <param name="resourceName">Name of the TopicSpace.</param>
    /// <param name="resourceVersion">Version of the TopicSpace.</param>
    /// <returns>The existing TopicSpace resource.</returns>
    public static TopicSpace FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
