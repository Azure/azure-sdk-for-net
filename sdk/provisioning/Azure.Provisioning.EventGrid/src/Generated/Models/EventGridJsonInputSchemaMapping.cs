// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.EventGrid;

/// <summary>
/// This enables publishing to Event Grid using a custom input schema. This can
/// be used to map properties from a custom input JSON schema to the Event
/// Grid event schema.
/// </summary>
public partial class EventGridJsonInputSchemaMapping : EventGridInputSchemaMapping
{
    /// <summary>
    /// Name of a field in the input event schema that&apos;s to be used as the
    /// source of a mapping.
    /// </summary>
    public BicepValue<string> IdSourceField { get => _idSourceField; set => _idSourceField.Assign(value); }
    private readonly BicepValue<string> _idSourceField;

    /// <summary>
    /// Name of a field in the input event schema that&apos;s to be used as the
    /// source of a mapping.
    /// </summary>
    public BicepValue<string> TopicSourceField { get => _topicSourceField; set => _topicSourceField.Assign(value); }
    private readonly BicepValue<string> _topicSourceField;

    /// <summary>
    /// Name of a field in the input event schema that&apos;s to be used as the
    /// source of a mapping.
    /// </summary>
    public BicepValue<string> EventTimeSourceField { get => _eventTimeSourceField; set => _eventTimeSourceField.Assign(value); }
    private readonly BicepValue<string> _eventTimeSourceField;

    /// <summary>
    /// The mapping information for the EventType property of the Event Grid
    /// Event.
    /// </summary>
    public BicepValue<JsonFieldWithDefault> EventType { get => _eventType; set => _eventType.Assign(value); }
    private readonly BicepValue<JsonFieldWithDefault> _eventType;

    /// <summary>
    /// The mapping information for the Subject property of the Event Grid
    /// Event.
    /// </summary>
    public BicepValue<JsonFieldWithDefault> Subject { get => _subject; set => _subject.Assign(value); }
    private readonly BicepValue<JsonFieldWithDefault> _subject;

    /// <summary>
    /// The mapping information for the DataVersion property of the Event Grid
    /// Event.
    /// </summary>
    public BicepValue<JsonFieldWithDefault> DataVersion { get => _dataVersion; set => _dataVersion.Assign(value); }
    private readonly BicepValue<JsonFieldWithDefault> _dataVersion;

    /// <summary>
    /// Creates a new EventGridJsonInputSchemaMapping.
    /// </summary>
    public EventGridJsonInputSchemaMapping() : base()
    {
        BicepValue<string>.DefineProperty(this, "inputSchemaMappingType", ["inputSchemaMappingType"], defaultValue: "Json");
        _idSourceField = BicepValue<string>.DefineProperty(this, "IdSourceField", ["properties", "id", "sourceField"]);
        _topicSourceField = BicepValue<string>.DefineProperty(this, "TopicSourceField", ["properties", "topic", "sourceField"]);
        _eventTimeSourceField = BicepValue<string>.DefineProperty(this, "EventTimeSourceField", ["properties", "eventTime", "sourceField"]);
        _eventType = BicepValue<JsonFieldWithDefault>.DefineProperty(this, "EventType", ["properties", "eventType"]);
        _subject = BicepValue<JsonFieldWithDefault>.DefineProperty(this, "Subject", ["properties", "subject"]);
        _dataVersion = BicepValue<JsonFieldWithDefault>.DefineProperty(this, "DataVersion", ["properties", "dataVersion"]);
    }
}
