// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.EventGrid;

/// <summary>
/// A custom domain configuration that allows users to publish to their own
/// domain name.
/// </summary>
public partial class CustomDomainConfiguration : ProvisioningConstruct
{
    /// <summary>
    /// Fully Qualified Domain Name (FQDN) for the custom domain.
    /// </summary>
    public BicepValue<string> FullyQualifiedDomainName { get => _fullyQualifiedDomainName; set => _fullyQualifiedDomainName.Assign(value); }
    private readonly BicepValue<string> _fullyQualifiedDomainName;

    /// <summary>
    /// Validation state for the custom domain. This is a read only property
    /// and is initially set to &apos;Pending&apos; and will be updated to
    /// &apos;Approved&apos; by Event Grid only after ownership of the domain
    /// name has been successfully validated.
    /// </summary>
    public BicepValue<CustomDomainValidationState> ValidationState { get => _validationState; set => _validationState.Assign(value); }
    private readonly BicepValue<CustomDomainValidationState> _validationState;

    /// <summary>
    /// Identity info for accessing the certificate for the custom domain. This
    /// identity info must match an identity that has been set on the
    /// namespace.
    /// </summary>
    public BicepValue<CustomDomainIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<CustomDomainIdentity> _identity;

    /// <summary>
    /// The URL for the certificate that is used for publishing to the custom
    /// domain. We currently support certificates stored in Azure Key Vault
    /// only. While certificate URL can be either             versioned URL of
    /// the following format
    /// https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}/{version-id},
    /// or unversioned URL of the following format (e.g.,
    /// https://contosovault.vault.azure.net/certificates/contosocert,
    /// we support unversioned certificate URL only (e.g.,
    /// https://contosovault.vault.azure.net/certificates/contosocert)
    /// </summary>
    public BicepValue<Uri> CertificateUri { get => _certificateUri; set => _certificateUri.Assign(value); }
    private readonly BicepValue<Uri> _certificateUri;

    /// <summary>
    /// Expected DNS TXT record name. Event Grid will check for a TXT record
    /// with this name in the DNS record set of the custom domain name to
    /// prove ownership over the domain.             The values under this TXT
    /// record must contain the expected TXT record value.
    /// </summary>
    public BicepValue<string> ExpectedTxtRecordName { get => _expectedTxtRecordName; set => _expectedTxtRecordName.Assign(value); }
    private readonly BicepValue<string> _expectedTxtRecordName;

    /// <summary>
    /// Expected DNS TXT record value. Event Grid will check for a TXT record
    /// with this value in the DNS record set of the custom domain name to
    /// prove ownership over the domain.
    /// </summary>
    public BicepValue<string> ExpectedTxtRecordValue { get => _expectedTxtRecordValue; set => _expectedTxtRecordValue.Assign(value); }
    private readonly BicepValue<string> _expectedTxtRecordValue;

    /// <summary>
    /// Creates a new CustomDomainConfiguration.
    /// </summary>
    public CustomDomainConfiguration()
    {
        _fullyQualifiedDomainName = BicepValue<string>.DefineProperty(this, "FullyQualifiedDomainName", ["fullyQualifiedDomainName"]);
        _validationState = BicepValue<CustomDomainValidationState>.DefineProperty(this, "ValidationState", ["validationState"]);
        _identity = BicepValue<CustomDomainIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _certificateUri = BicepValue<Uri>.DefineProperty(this, "CertificateUri", ["certificateUrl"]);
        _expectedTxtRecordName = BicepValue<string>.DefineProperty(this, "ExpectedTxtRecordName", ["expectedTxtRecordName"]);
        _expectedTxtRecordValue = BicepValue<string>.DefineProperty(this, "ExpectedTxtRecordValue", ["expectedTxtRecordValue"]);
    }
}
