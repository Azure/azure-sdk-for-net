// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.EventGrid;

/// <summary>
/// Information about the webhook destination for an event subscription.
/// </summary>
public partial class WebHookEventSubscriptionDestination : EventSubscriptionDestination
{
    /// <summary>
    /// The URL that represents the endpoint of the destination of an event
    /// subscription.
    /// </summary>
    public BicepValue<Uri> Endpoint { get => _endpoint; set => _endpoint.Assign(value); }
    private readonly BicepValue<Uri> _endpoint;

    /// <summary>
    /// The base URL that represents the endpoint of the destination of an
    /// event subscription.
    /// </summary>
    public BicepValue<Uri> BaseEndpoint { get => _baseEndpoint; }
    private readonly BicepValue<Uri> _baseEndpoint;

    /// <summary>
    /// Maximum number of events per batch.
    /// </summary>
    public BicepValue<int> MaxEventsPerBatch { get => _maxEventsPerBatch; set => _maxEventsPerBatch.Assign(value); }
    private readonly BicepValue<int> _maxEventsPerBatch;

    /// <summary>
    /// Preferred batch size in Kilobytes.
    /// </summary>
    public BicepValue<int> PreferredBatchSizeInKilobytes { get => _preferredBatchSizeInKilobytes; set => _preferredBatchSizeInKilobytes.Assign(value); }
    private readonly BicepValue<int> _preferredBatchSizeInKilobytes;

    /// <summary>
    /// The Azure Active Directory Tenant ID to get the access token that will
    /// be included as the bearer token in delivery requests.
    /// </summary>
    public BicepValue<Guid> AzureActiveDirectoryTenantId { get => _azureActiveDirectoryTenantId; set => _azureActiveDirectoryTenantId.Assign(value); }
    private readonly BicepValue<Guid> _azureActiveDirectoryTenantId;

    /// <summary>
    /// The Azure Active Directory Application ID or URI to get the access
    /// token that will be included as the bearer token in delivery requests.
    /// </summary>
    public BicepValue<string> UriOrAzureActiveDirectoryApplicationId { get => _uriOrAzureActiveDirectoryApplicationId; set => _uriOrAzureActiveDirectoryApplicationId.Assign(value); }
    private readonly BicepValue<string> _uriOrAzureActiveDirectoryApplicationId;

    /// <summary>
    /// Delivery attribute details.             Please note
    /// Azure.ResourceManager.EventGrid.Models.DeliveryAttributeMapping is the
    /// base class. According to the scenario, a derived class of the base
    /// class might need to be assigned here, or this property needs to be
    /// casted to one of the possible derived classes.             The
    /// available derived classes include
    /// Azure.ResourceManager.EventGrid.Models.DynamicDeliveryAttributeMapping
    /// and
    /// Azure.ResourceManager.EventGrid.Models.StaticDeliveryAttributeMapping.
    /// </summary>
    public BicepList<DeliveryAttributeMapping> DeliveryAttributeMappings { get => _deliveryAttributeMappings; set => _deliveryAttributeMappings.Assign(value); }
    private readonly BicepList<DeliveryAttributeMapping> _deliveryAttributeMappings;

    /// <summary>
    /// Minimum TLS version that should be supported by webhook endpoint.
    /// </summary>
    public BicepValue<TlsVersion> MinimumTlsVersionAllowed { get => _minimumTlsVersionAllowed; set => _minimumTlsVersionAllowed.Assign(value); }
    private readonly BicepValue<TlsVersion> _minimumTlsVersionAllowed;

    /// <summary>
    /// Creates a new WebHookEventSubscriptionDestination.
    /// </summary>
    public WebHookEventSubscriptionDestination() : base()
    {
        BicepValue<string>.DefineProperty(this, "endpointType", ["endpointType"], defaultValue: "WebHook");
        _endpoint = BicepValue<Uri>.DefineProperty(this, "Endpoint", ["properties", "endpointUrl"]);
        _baseEndpoint = BicepValue<Uri>.DefineProperty(this, "BaseEndpoint", ["properties", "endpointBaseUrl"], isOutput: true);
        _maxEventsPerBatch = BicepValue<int>.DefineProperty(this, "MaxEventsPerBatch", ["properties", "maxEventsPerBatch"]);
        _preferredBatchSizeInKilobytes = BicepValue<int>.DefineProperty(this, "PreferredBatchSizeInKilobytes", ["properties", "preferredBatchSizeInKilobytes"]);
        _azureActiveDirectoryTenantId = BicepValue<Guid>.DefineProperty(this, "AzureActiveDirectoryTenantId", ["properties", "azureActiveDirectoryTenantId"]);
        _uriOrAzureActiveDirectoryApplicationId = BicepValue<string>.DefineProperty(this, "UriOrAzureActiveDirectoryApplicationId", ["properties", "azureActiveDirectoryApplicationIdOrUri"]);
        _deliveryAttributeMappings = BicepList<DeliveryAttributeMapping>.DefineProperty(this, "DeliveryAttributeMappings", ["properties", "deliveryAttributeMappings"]);
        _minimumTlsVersionAllowed = BicepValue<TlsVersion>.DefineProperty(this, "MinimumTlsVersionAllowed", ["properties", "minimumTlsVersionAllowed"]);
    }
}
