// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Expressions;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.Communication;

/// <summary>
/// CommunicationService.
/// </summary>
public partial class CommunicationService : Resource
{
    /// <summary>
    /// The name of the CommunicationService resource.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// The location where the communication service stores its data at rest.
    /// </summary>
    public BicepValue<string> DataLocation { get => _dataLocation; set => _dataLocation.Assign(value); }
    private readonly BicepValue<string> _dataLocation;

    /// <summary>
    /// Managed service identity (system assigned and/or user assigned
    /// identities).
    /// </summary>
    public BicepValue<ManagedServiceIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<ManagedServiceIdentity> _identity;

    /// <summary>
    /// List of email Domain resource Ids.
    /// </summary>
    public BicepList<string> LinkedDomains { get => _linkedDomains; set => _linkedDomains.Assign(value); }
    private readonly BicepList<string> _linkedDomains;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// FQDN of the CommunicationService instance.
    /// </summary>
    public BicepValue<string> HostName { get => _hostName; }
    private readonly BicepValue<string> _hostName;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The immutable resource Id of the communication service.
    /// </summary>
    public BicepValue<Guid> ImmutableResourceId { get => _immutableResourceId; }
    private readonly BicepValue<Guid> _immutableResourceId;

    /// <summary>
    /// Resource ID of an Azure Notification Hub linked to this resource.
    /// </summary>
    public BicepValue<ResourceIdentifier> NotificationHubId { get => _notificationHubId; }
    private readonly BicepValue<ResourceIdentifier> _notificationHubId;

    /// <summary>
    /// Provisioning state of the resource.
    /// </summary>
    public BicepValue<CommunicationServicesProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<CommunicationServicesProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Version of the CommunicationService resource. Probably you need the
    /// same or higher version of client SDKs.
    /// </summary>
    public BicepValue<string> Version { get => _version; }
    private readonly BicepValue<string> _version;

    /// <summary>
    /// Creates a new CommunicationService.
    /// </summary>
    /// <param name="resourceName">Name of the CommunicationService.</param>
    /// <param name="resourceVersion">Version of the CommunicationService.</param>
    public CommunicationService(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Communication/communicationServices", resourceVersion ?? "2023-04-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _dataLocation = BicepValue<string>.DefineProperty(this, "DataLocation", ["properties", "dataLocation"]);
        _identity = BicepValue<ManagedServiceIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _linkedDomains = BicepList<string>.DefineProperty(this, "LinkedDomains", ["properties", "linkedDomains"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _hostName = BicepValue<string>.DefineProperty(this, "HostName", ["properties", "hostName"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _immutableResourceId = BicepValue<Guid>.DefineProperty(this, "ImmutableResourceId", ["properties", "immutableResourceId"], isOutput: true);
        _notificationHubId = BicepValue<ResourceIdentifier>.DefineProperty(this, "NotificationHubId", ["properties", "notificationHubId"], isOutput: true);
        _provisioningState = BicepValue<CommunicationServicesProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _version = BicepValue<string>.DefineProperty(this, "Version", ["properties", "version"], isOutput: true);
    }

    /// <summary>
    /// Supported CommunicationService resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2023-06-01-preview.
        /// </summary>
        public static readonly string V2023_06_01_preview = "2023-06-01-preview";

        /// <summary>
        /// 2023-04-01.
        /// </summary>
        public static readonly string V2023_04_01 = "2023-04-01";

        /// <summary>
        /// 2023-03-31.
        /// </summary>
        public static readonly string V2023_03_31 = "2023-03-31";

        /// <summary>
        /// 2020-08-20.
        /// </summary>
        public static readonly string V2020_08_20 = "2020-08-20";
    }

    /// <summary>
    /// Creates a reference to an existing CommunicationService.
    /// </summary>
    /// <param name="resourceName">Name of the CommunicationService.</param>
    /// <param name="resourceVersion">Version of the CommunicationService.</param>
    /// <returns>The existing CommunicationService resource.</returns>
    public static CommunicationService FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this CommunicationService resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 63, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen);

    /// <summary>
    /// Get access keys for this CommunicationService resource.
    /// </summary>
    /// <returns>The keys for this CommunicationService resource.</returns>
    public CommunicationServiceKeys GetKeys() =>
        CommunicationServiceKeys.FromExpression(
            new FunctionCallExpression(new MemberExpression(new IdentifierExpression(ResourceName), "listKeys")));
}
