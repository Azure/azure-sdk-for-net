// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.KeyVault;

/// <summary>
/// A rule governing the accessibility of a vault from a specific virtual
/// network.
/// </summary>
public partial class KeyVaultVirtualNetworkRule : ProvisioningConstruct
{
    /// <summary>
    /// Full resource id of a vnet subnet, such as
    /// &apos;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1&apos;.
    /// </summary>
    public BicepValue<string> Id { get => _id; set => _id.Assign(value); }
    private readonly BicepValue<string> _id;

    /// <summary>
    /// Property to specify whether NRP will ignore the check if parent subnet
    /// has serviceEndpoints configured.
    /// </summary>
    public BicepValue<bool> IgnoreMissingVnetServiceEndpoint { get => _ignoreMissingVnetServiceEndpoint; set => _ignoreMissingVnetServiceEndpoint.Assign(value); }
    private readonly BicepValue<bool> _ignoreMissingVnetServiceEndpoint;

    /// <summary>
    /// Creates a new KeyVaultVirtualNetworkRule.
    /// </summary>
    public KeyVaultVirtualNetworkRule()
    {
        _id = BicepValue<string>.DefineProperty(this, "Id", ["id"]);
        _ignoreMissingVnetServiceEndpoint = BicepValue<bool>.DefineProperty(this, "IgnoreMissingVnetServiceEndpoint", ["ignoreMissingVnetServiceEndpoint"]);
    }
}
