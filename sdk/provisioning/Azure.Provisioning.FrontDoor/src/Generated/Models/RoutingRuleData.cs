// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// A routing rule represents a specification for traffic to treat and where to
/// send it, along with health probe information.
/// </summary>
public partial class RoutingRuleData : ProvisionableConstruct
{
    /// <summary>
    /// Frontend endpoints associated with this rule.
    /// </summary>
    public BicepList<WritableSubResource> FrontendEndpoints 
    {
        get { Initialize(); return _frontendEndpoints!; }
        set { Initialize(); _frontendEndpoints!.Assign(value); }
    }
    private BicepList<WritableSubResource>? _frontendEndpoints;

    /// <summary>
    /// Protocol schemes to match for this rule.
    /// </summary>
    public BicepList<FrontDoorProtocol> AcceptedProtocols 
    {
        get { Initialize(); return _acceptedProtocols!; }
        set { Initialize(); _acceptedProtocols!.Assign(value); }
    }
    private BicepList<FrontDoorProtocol>? _acceptedProtocols;

    /// <summary>
    /// The route patterns of the rule.
    /// </summary>
    public BicepList<string> PatternsToMatch 
    {
        get { Initialize(); return _patternsToMatch!; }
        set { Initialize(); _patternsToMatch!.Assign(value); }
    }
    private BicepList<string>? _patternsToMatch;

    /// <summary>
    /// Whether to enable use of this rule. Permitted values are
    /// &apos;Enabled&apos; or &apos;Disabled&apos;.
    /// </summary>
    public BicepValue<RoutingRuleEnabledState> EnabledState 
    {
        get { Initialize(); return _enabledState!; }
        set { Initialize(); _enabledState!.Assign(value); }
    }
    private BicepValue<RoutingRuleEnabledState>? _enabledState;

    /// <summary>
    /// A reference to the routing configuration.             Please note
    /// Azure.ResourceManager.FrontDoor.Models.RouteConfiguration is the base
    /// class. According to the scenario, a derived class of the base class
    /// might need to be assigned here, or this property needs to be casted to
    /// one of the possible derived classes.             The available derived
    /// classes include
    /// Azure.ResourceManager.FrontDoor.Models.ForwardingConfiguration and
    /// Azure.ResourceManager.FrontDoor.Models.RedirectConfiguration.
    /// </summary>
    public RouteConfiguration RouteConfiguration 
    {
        get { Initialize(); return _routeConfiguration!; }
        set { Initialize(); AssignOrReplace(ref _routeConfiguration, value); }
    }
    private RouteConfiguration? _routeConfiguration;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> RulesEngineId 
    {
        get { Initialize(); return _rulesEngineId!; }
        set { Initialize(); _rulesEngineId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _rulesEngineId;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> WebApplicationFirewallPolicyLinkId 
    {
        get { Initialize(); return _webApplicationFirewallPolicyLinkId!; }
        set { Initialize(); _webApplicationFirewallPolicyLinkId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _webApplicationFirewallPolicyLinkId;

    /// <summary>
    /// Resource status.
    /// </summary>
    public BicepValue<FrontDoorResourceState> ResourceState 
    {
        get { Initialize(); return _resourceState!; }
    }
    private BicepValue<FrontDoorResourceState>? _resourceState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new RoutingRuleData.
    /// </summary>
    public RoutingRuleData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of RoutingRuleData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _frontendEndpoints = DefineListProperty<WritableSubResource>("FrontendEndpoints", ["properties", "frontendEndpoints"]);
        _acceptedProtocols = DefineListProperty<FrontDoorProtocol>("AcceptedProtocols", ["properties", "acceptedProtocols"]);
        _patternsToMatch = DefineListProperty<string>("PatternsToMatch", ["properties", "patternsToMatch"]);
        _enabledState = DefineProperty<RoutingRuleEnabledState>("EnabledState", ["properties", "enabledState"]);
        _routeConfiguration = DefineModelProperty<RouteConfiguration>("RouteConfiguration", ["properties", "routeConfiguration"]);
        _rulesEngineId = DefineProperty<ResourceIdentifier>("RulesEngineId", ["properties", "rulesEngine", "id"]);
        _webApplicationFirewallPolicyLinkId = DefineProperty<ResourceIdentifier>("WebApplicationFirewallPolicyLinkId", ["properties", "webApplicationFirewallPolicyLink", "id"]);
        _resourceState = DefineProperty<FrontDoorResourceState>("ResourceState", ["properties", "resourceState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"], isOutput: true);
    }
}
