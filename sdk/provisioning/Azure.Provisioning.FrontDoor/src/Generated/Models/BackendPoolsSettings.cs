// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// Settings that apply to all backend pools.
/// </summary>
public partial class BackendPoolsSettings : ProvisionableConstruct
{
    /// <summary>
    /// Whether to enforce certificate name check on HTTPS requests to all
    /// backend pools. No effect on non-HTTPS requests.
    /// </summary>
    public BicepValue<EnforceCertificateNameCheckEnabledState> EnforceCertificateNameCheck 
    {
        get { Initialize(); return _enforceCertificateNameCheck!; }
        set { Initialize(); _enforceCertificateNameCheck!.Assign(value); }
    }
    private BicepValue<EnforceCertificateNameCheckEnabledState>? _enforceCertificateNameCheck;

    /// <summary>
    /// Send and receive timeout on forwarding request to the backend. When
    /// timeout is reached, the request fails and returns.
    /// </summary>
    public BicepValue<int> SendRecvTimeoutInSeconds 
    {
        get { Initialize(); return _sendRecvTimeoutInSeconds!; }
        set { Initialize(); _sendRecvTimeoutInSeconds!.Assign(value); }
    }
    private BicepValue<int>? _sendRecvTimeoutInSeconds;

    /// <summary>
    /// Creates a new BackendPoolsSettings.
    /// </summary>
    public BackendPoolsSettings()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of BackendPoolsSettings.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _enforceCertificateNameCheck = DefineProperty<EnforceCertificateNameCheckEnabledState>("EnforceCertificateNameCheck", ["enforceCertificateNameCheck"]);
        _sendRecvTimeoutInSeconds = DefineProperty<int>("SendRecvTimeoutInSeconds", ["sendRecvTimeoutSeconds"]);
    }
}
