// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// A class representing the FrontendEndpoint data model.             A
/// frontend endpoint used for routing.
/// </summary>
public partial class FrontendEndpointData : ProvisionableConstruct
{
    /// <summary>
    /// The host name of the frontendEndpoint. Must be a domain name.
    /// </summary>
    public BicepValue<string> HostName 
    {
        get { Initialize(); return _hostName!; }
        set { Initialize(); _hostName!.Assign(value); }
    }
    private BicepValue<string>? _hostName;

    /// <summary>
    /// Whether to allow session affinity on this host. Valid options are
    /// &apos;Enabled&apos; or &apos;Disabled&apos;.
    /// </summary>
    public BicepValue<SessionAffinityEnabledState> SessionAffinityEnabledState 
    {
        get { Initialize(); return _sessionAffinityEnabledState!; }
        set { Initialize(); _sessionAffinityEnabledState!.Assign(value); }
    }
    private BicepValue<SessionAffinityEnabledState>? _sessionAffinityEnabledState;

    /// <summary>
    /// UNUSED. This field will be ignored. The TTL to use in seconds for
    /// session affinity, if applicable.
    /// </summary>
    public BicepValue<int> SessionAffinityTtlInSeconds 
    {
        get { Initialize(); return _sessionAffinityTtlInSeconds!; }
        set { Initialize(); _sessionAffinityTtlInSeconds!.Assign(value); }
    }
    private BicepValue<int>? _sessionAffinityTtlInSeconds;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> WebApplicationFirewallPolicyLinkId 
    {
        get { Initialize(); return _webApplicationFirewallPolicyLinkId!; }
        set { Initialize(); _webApplicationFirewallPolicyLinkId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _webApplicationFirewallPolicyLinkId;

    /// <summary>
    /// Resource status.
    /// </summary>
    public BicepValue<FrontDoorResourceState> ResourceState 
    {
        get { Initialize(); return _resourceState!; }
    }
    private BicepValue<FrontDoorResourceState>? _resourceState;

    /// <summary>
    /// Provisioning status of Custom Https of the frontendEndpoint.
    /// </summary>
    public BicepValue<FrontendEndpointCustomHttpsProvisioningState> CustomHttpsProvisioningState 
    {
        get { Initialize(); return _customHttpsProvisioningState!; }
    }
    private BicepValue<FrontendEndpointCustomHttpsProvisioningState>? _customHttpsProvisioningState;

    /// <summary>
    /// Provisioning substate shows the progress of custom HTTPS
    /// enabling/disabling process step by step.
    /// </summary>
    public BicepValue<FrontendEndpointCustomHttpsProvisioningSubstate> CustomHttpsProvisioningSubstate 
    {
        get { Initialize(); return _customHttpsProvisioningSubstate!; }
    }
    private BicepValue<FrontendEndpointCustomHttpsProvisioningSubstate>? _customHttpsProvisioningSubstate;

    /// <summary>
    /// The configuration specifying how to enable HTTPS.
    /// </summary>
    public CustomHttpsConfiguration CustomHttpsConfiguration 
    {
        get { Initialize(); return _customHttpsConfiguration!; }
    }
    private CustomHttpsConfiguration? _customHttpsConfiguration;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new FrontendEndpointData.
    /// </summary>
    public FrontendEndpointData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of FrontendEndpointData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _hostName = DefineProperty<string>("HostName", ["properties", "hostName"]);
        _sessionAffinityEnabledState = DefineProperty<SessionAffinityEnabledState>("SessionAffinityEnabledState", ["properties", "sessionAffinityEnabledState"]);
        _sessionAffinityTtlInSeconds = DefineProperty<int>("SessionAffinityTtlInSeconds", ["properties", "sessionAffinityTtlSeconds"]);
        _webApplicationFirewallPolicyLinkId = DefineProperty<ResourceIdentifier>("WebApplicationFirewallPolicyLinkId", ["properties", "webApplicationFirewallPolicyLink", "id"]);
        _resourceState = DefineProperty<FrontDoorResourceState>("ResourceState", ["properties", "resourceState"], isOutput: true);
        _customHttpsProvisioningState = DefineProperty<FrontendEndpointCustomHttpsProvisioningState>("CustomHttpsProvisioningState", ["properties", "customHttpsProvisioningState"], isOutput: true);
        _customHttpsProvisioningSubstate = DefineProperty<FrontendEndpointCustomHttpsProvisioningSubstate>("CustomHttpsProvisioningSubstate", ["properties", "customHttpsProvisioningSubstate"], isOutput: true);
        _customHttpsConfiguration = DefineModelProperty<CustomHttpsConfiguration>("CustomHttpsConfiguration", ["properties", "customHttpsConfiguration"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"], isOutput: true);
    }
}
