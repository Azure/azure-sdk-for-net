// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// Describes Redirect Route.
/// </summary>
public partial class RedirectConfiguration : RouteConfiguration
{
    /// <summary>
    /// The redirect type the rule will use when redirecting traffic.
    /// </summary>
    public BicepValue<FrontDoorRedirectType> RedirectType 
    {
        get { Initialize(); return _redirectType!; }
        set { Initialize(); _redirectType!.Assign(value); }
    }
    private BicepValue<FrontDoorRedirectType>? _redirectType;

    /// <summary>
    /// The protocol of the destination to where the traffic is redirected.
    /// </summary>
    public BicepValue<FrontDoorRedirectProtocol> RedirectProtocol 
    {
        get { Initialize(); return _redirectProtocol!; }
        set { Initialize(); _redirectProtocol!.Assign(value); }
    }
    private BicepValue<FrontDoorRedirectProtocol>? _redirectProtocol;

    /// <summary>
    /// Host to redirect. Leave empty to use the incoming host as the
    /// destination host.
    /// </summary>
    public BicepValue<string> CustomHost 
    {
        get { Initialize(); return _customHost!; }
        set { Initialize(); _customHost!.Assign(value); }
    }
    private BicepValue<string>? _customHost;

    /// <summary>
    /// The full path to redirect. Path cannot be empty and must start with /.
    /// Leave empty to use the incoming path as destination path.
    /// </summary>
    public BicepValue<string> CustomPath 
    {
        get { Initialize(); return _customPath!; }
        set { Initialize(); _customPath!.Assign(value); }
    }
    private BicepValue<string>? _customPath;

    /// <summary>
    /// Fragment to add to the redirect URL. Fragment is the part of the URL
    /// that comes after #. Do not include the #.
    /// </summary>
    public BicepValue<string> CustomFragment 
    {
        get { Initialize(); return _customFragment!; }
        set { Initialize(); _customFragment!.Assign(value); }
    }
    private BicepValue<string>? _customFragment;

    /// <summary>
    /// The set of query strings to be placed in the redirect URL. Setting this
    /// value would replace any existing query string; leave empty to preserve
    /// the incoming query string. Query string must be in
    /// &lt;key&gt;=&lt;value&gt; format. The first ? and &amp; will be added
    /// automatically so do not include them in the front, but do separate
    /// multiple query strings with &amp;.
    /// </summary>
    public BicepValue<string> CustomQueryString 
    {
        get { Initialize(); return _customQueryString!; }
        set { Initialize(); _customQueryString!.Assign(value); }
    }
    private BicepValue<string>? _customQueryString;

    /// <summary>
    /// Creates a new RedirectConfiguration.
    /// </summary>
    public RedirectConfiguration() : base()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of RedirectConfiguration.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        DefineProperty<string>("@odata.type", ["@odata.type"], defaultValue: "#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration");
        _redirectType = DefineProperty<FrontDoorRedirectType>("RedirectType", ["redirectType"]);
        _redirectProtocol = DefineProperty<FrontDoorRedirectProtocol>("RedirectProtocol", ["redirectProtocol"]);
        _customHost = DefineProperty<string>("CustomHost", ["customHost"]);
        _customPath = DefineProperty<string>("CustomPath", ["customPath"]);
        _customFragment = DefineProperty<string>("CustomFragment", ["customFragment"]);
        _customQueryString = DefineProperty<string>("CustomQueryString", ["customQueryString"]);
    }
}
