// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// Defines top-level WebApplicationFirewallPolicy configuration settings.
/// </summary>
public partial class FrontDoorWebApplicationFirewallPolicySettings : ProvisionableConstruct
{
    /// <summary>
    /// Describes if the policy is in enabled or disabled state. Defaults to
    /// Enabled if not specified.
    /// </summary>
    public BicepValue<PolicyEnabledState> EnabledState 
    {
        get { Initialize(); return _enabledState!; }
        set { Initialize(); _enabledState!.Assign(value); }
    }
    private BicepValue<PolicyEnabledState>? _enabledState;

    /// <summary>
    /// Describes if it is in detection mode or prevention mode at policy level.
    /// </summary>
    public BicepValue<FrontDoorWebApplicationFirewallPolicyMode> Mode 
    {
        get { Initialize(); return _mode!; }
        set { Initialize(); _mode!.Assign(value); }
    }
    private BicepValue<FrontDoorWebApplicationFirewallPolicyMode>? _mode;

    /// <summary>
    /// If action type is redirect, this field represents redirect URL for the
    /// client.
    /// </summary>
    public BicepValue<Uri> RedirectUri 
    {
        get { Initialize(); return _redirectUri!; }
        set { Initialize(); _redirectUri!.Assign(value); }
    }
    private BicepValue<Uri>? _redirectUri;

    /// <summary>
    /// If the action type is block, customer can override the response status
    /// code.
    /// </summary>
    public BicepValue<int> CustomBlockResponseStatusCode 
    {
        get { Initialize(); return _customBlockResponseStatusCode!; }
        set { Initialize(); _customBlockResponseStatusCode!.Assign(value); }
    }
    private BicepValue<int>? _customBlockResponseStatusCode;

    /// <summary>
    /// If the action type is block, customer can override the response body.
    /// The body must be specified in base64 encoding.
    /// </summary>
    public BicepValue<string> CustomBlockResponseBody 
    {
        get { Initialize(); return _customBlockResponseBody!; }
        set { Initialize(); _customBlockResponseBody!.Assign(value); }
    }
    private BicepValue<string>? _customBlockResponseBody;

    /// <summary>
    /// Describes if policy managed rules will inspect the request body content.
    /// </summary>
    public BicepValue<PolicyRequestBodyCheck> RequestBodyCheck 
    {
        get { Initialize(); return _requestBodyCheck!; }
        set { Initialize(); _requestBodyCheck!.Assign(value); }
    }
    private BicepValue<PolicyRequestBodyCheck>? _requestBodyCheck;

    /// <summary>
    /// Defines the JavaScript challenge cookie validity lifetime in minutes.
    /// This setting is only applicable to Premium_AzureFrontDoor. Value must
    /// be an integer between 5 and 1440 with the default value being 30.
    /// </summary>
    public BicepValue<int> JavascriptChallengeExpirationInMinutes 
    {
        get { Initialize(); return _javascriptChallengeExpirationInMinutes!; }
        set { Initialize(); _javascriptChallengeExpirationInMinutes!.Assign(value); }
    }
    private BicepValue<int>? _javascriptChallengeExpirationInMinutes;

    /// <summary>
    /// Defines the Captcha cookie validity lifetime in minutes. This setting
    /// is only applicable to Premium_AzureFrontDoor. Value must be an integer
    /// between 5 and 1440 with the default value being 30.
    /// </summary>
    public BicepValue<int> CaptchaExpirationInMinutes 
    {
        get { Initialize(); return _captchaExpirationInMinutes!; }
        set { Initialize(); _captchaExpirationInMinutes!.Assign(value); }
    }
    private BicepValue<int>? _captchaExpirationInMinutes;

    /// <summary>
    /// State of the log scrubbing config. Default value is Enabled.
    /// </summary>
    public BicepValue<WebApplicationFirewallScrubbingState> State 
    {
        get { Initialize(); return _state!; }
        set { Initialize(); _state!.Assign(value); }
    }
    private BicepValue<WebApplicationFirewallScrubbingState>? _state;

    /// <summary>
    /// List of log scrubbing rules applied to the Web Application Firewall
    /// logs.
    /// </summary>
    public BicepList<WebApplicationFirewallScrubbingRules> ScrubbingRules 
    {
        get { Initialize(); return _scrubbingRules!; }
        set { Initialize(); _scrubbingRules!.Assign(value); }
    }
    private BicepList<WebApplicationFirewallScrubbingRules>? _scrubbingRules;

    /// <summary>
    /// Creates a new FrontDoorWebApplicationFirewallPolicySettings.
    /// </summary>
    public FrontDoorWebApplicationFirewallPolicySettings()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// FrontDoorWebApplicationFirewallPolicySettings.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _enabledState = DefineProperty<PolicyEnabledState>("EnabledState", ["enabledState"]);
        _mode = DefineProperty<FrontDoorWebApplicationFirewallPolicyMode>("Mode", ["mode"]);
        _redirectUri = DefineProperty<Uri>("RedirectUri", ["redirectUrl"]);
        _customBlockResponseStatusCode = DefineProperty<int>("CustomBlockResponseStatusCode", ["customBlockResponseStatusCode"]);
        _customBlockResponseBody = DefineProperty<string>("CustomBlockResponseBody", ["customBlockResponseBody"]);
        _requestBodyCheck = DefineProperty<PolicyRequestBodyCheck>("RequestBodyCheck", ["requestBodyCheck"]);
        _javascriptChallengeExpirationInMinutes = DefineProperty<int>("JavascriptChallengeExpirationInMinutes", ["javascriptChallengeExpirationInMinutes"]);
        _captchaExpirationInMinutes = DefineProperty<int>("CaptchaExpirationInMinutes", ["captchaExpirationInMinutes"]);
        _state = DefineProperty<WebApplicationFirewallScrubbingState>("State", ["logScrubbing", "state"]);
        _scrubbingRules = DefineListProperty<WebApplicationFirewallScrubbingRules>("ScrubbingRules", ["logScrubbing", "scrubbingRules"]);
    }
}
