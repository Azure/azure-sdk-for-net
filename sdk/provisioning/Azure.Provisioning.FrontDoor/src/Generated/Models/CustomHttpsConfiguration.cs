// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// Https settings for a domain.
/// </summary>
public partial class CustomHttpsConfiguration : ProvisionableConstruct
{
    /// <summary>
    /// Defines the source of the SSL certificate.
    /// </summary>
    public BicepValue<FrontDoorCertificateSource> CertificateSource 
    {
        get { Initialize(); return _certificateSource!; }
        set { Initialize(); _certificateSource!.Assign(value); }
    }
    private BicepValue<FrontDoorCertificateSource>? _certificateSource;

    /// <summary>
    /// Defines the TLS extension protocol that is used for secure delivery.
    /// </summary>
    public BicepValue<FrontDoorTlsProtocolType> ProtocolType 
    {
        get { Initialize(); return _protocolType!; }
        set { Initialize(); _protocolType!.Assign(value); }
    }
    private BicepValue<FrontDoorTlsProtocolType>? _protocolType;

    /// <summary>
    /// The minimum TLS version required from the clients to establish an SSL
    /// handshake with Front Door.
    /// </summary>
    public BicepValue<FrontDoorRequiredMinimumTlsVersion> MinimumTlsVersion 
    {
        get { Initialize(); return _minimumTlsVersion!; }
        set { Initialize(); _minimumTlsVersion!.Assign(value); }
    }
    private BicepValue<FrontDoorRequiredMinimumTlsVersion>? _minimumTlsVersion;

    /// <summary>
    /// Defines the type of the certificate used for secure connections to a
    /// frontendEndpoint.
    /// </summary>
    public BicepValue<FrontDoorEndpointConnectionCertificateType> CertificateType 
    {
        get { Initialize(); return _certificateType!; }
        set { Initialize(); _certificateType!.Assign(value); }
    }
    private BicepValue<FrontDoorEndpointConnectionCertificateType>? _certificateType;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> VaultId 
    {
        get { Initialize(); return _vaultId!; }
        set { Initialize(); _vaultId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _vaultId;

    /// <summary>
    /// The name of the Key Vault secret representing the full certificate PFX.
    /// </summary>
    public BicepValue<string> SecretName 
    {
        get { Initialize(); return _secretName!; }
        set { Initialize(); _secretName!.Assign(value); }
    }
    private BicepValue<string>? _secretName;

    /// <summary>
    /// The version of the Key Vault secret representing the full certificate
    /// PFX.
    /// </summary>
    public BicepValue<string> SecretVersion 
    {
        get { Initialize(); return _secretVersion!; }
        set { Initialize(); _secretVersion!.Assign(value); }
    }
    private BicepValue<string>? _secretVersion;

    /// <summary>
    /// Creates a new CustomHttpsConfiguration.
    /// </summary>
    public CustomHttpsConfiguration()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of CustomHttpsConfiguration.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _certificateSource = DefineProperty<FrontDoorCertificateSource>("CertificateSource", ["certificateSource"]);
        _protocolType = DefineProperty<FrontDoorTlsProtocolType>("ProtocolType", ["protocolType"]);
        _minimumTlsVersion = DefineProperty<FrontDoorRequiredMinimumTlsVersion>("MinimumTlsVersion", ["minimumTlsVersion"]);
        _certificateType = DefineProperty<FrontDoorEndpointConnectionCertificateType>("CertificateType", ["frontDoorCertificateSourceParameters", "certificateType"]);
        _vaultId = DefineProperty<ResourceIdentifier>("VaultId", ["keyVaultCertificateSourceParameters", "vault", "id"]);
        _secretName = DefineProperty<string>("SecretName", ["keyVaultCertificateSourceParameters", "secretName"]);
        _secretVersion = DefineProperty<string>("SecretVersion", ["keyVaultCertificateSourceParameters", "secretVersion"]);
    }
}
