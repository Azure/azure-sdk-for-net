// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// Load balancing settings for a backend pool.
/// </summary>
public partial class FrontDoorLoadBalancingSettingsData : ProvisionableConstruct
{
    /// <summary>
    /// The number of samples to consider for load balancing decisions.
    /// </summary>
    public BicepValue<int> SampleSize 
    {
        get { Initialize(); return _sampleSize!; }
        set { Initialize(); _sampleSize!.Assign(value); }
    }
    private BicepValue<int>? _sampleSize;

    /// <summary>
    /// The number of samples within the sample period that must succeed.
    /// </summary>
    public BicepValue<int> SuccessfulSamplesRequired 
    {
        get { Initialize(); return _successfulSamplesRequired!; }
        set { Initialize(); _successfulSamplesRequired!.Assign(value); }
    }
    private BicepValue<int>? _successfulSamplesRequired;

    /// <summary>
    /// The additional latency in milliseconds for probes to fall into the
    /// lowest latency bucket.
    /// </summary>
    public BicepValue<int> AdditionalLatencyMilliseconds 
    {
        get { Initialize(); return _additionalLatencyMilliseconds!; }
        set { Initialize(); _additionalLatencyMilliseconds!.Assign(value); }
    }
    private BicepValue<int>? _additionalLatencyMilliseconds;

    /// <summary>
    /// Resource status.
    /// </summary>
    public BicepValue<FrontDoorResourceState> ResourceState 
    {
        get { Initialize(); return _resourceState!; }
    }
    private BicepValue<FrontDoorResourceState>? _resourceState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new FrontDoorLoadBalancingSettingsData.
    /// </summary>
    public FrontDoorLoadBalancingSettingsData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// FrontDoorLoadBalancingSettingsData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _sampleSize = DefineProperty<int>("SampleSize", ["properties", "sampleSize"]);
        _successfulSamplesRequired = DefineProperty<int>("SuccessfulSamplesRequired", ["properties", "successfulSamplesRequired"]);
        _additionalLatencyMilliseconds = DefineProperty<int>("AdditionalLatencyMilliseconds", ["properties", "additionalLatencyMilliseconds"]);
        _resourceState = DefineProperty<FrontDoorResourceState>("ResourceState", ["properties", "resourceState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"], isOutput: true);
    }
}
