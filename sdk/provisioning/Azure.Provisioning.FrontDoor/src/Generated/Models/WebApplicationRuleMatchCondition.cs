// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// Define a match condition.
/// </summary>
public partial class WebApplicationRuleMatchCondition : ProvisionableConstruct
{
    /// <summary>
    /// Request variable to compare with.
    /// </summary>
    public BicepValue<WebApplicationRuleMatchVariable> MatchVariable 
    {
        get { Initialize(); return _matchVariable!; }
        set { Initialize(); _matchVariable!.Assign(value); }
    }
    private BicepValue<WebApplicationRuleMatchVariable>? _matchVariable;

    /// <summary>
    /// Match against a specific key from the QueryString, PostArgs,
    /// RequestHeader or Cookies variables. Default is null.
    /// </summary>
    public BicepValue<string> Selector 
    {
        get { Initialize(); return _selector!; }
        set { Initialize(); _selector!.Assign(value); }
    }
    private BicepValue<string>? _selector;

    /// <summary>
    /// Comparison type to use for matching with the variable value.
    /// </summary>
    public BicepValue<WebApplicationRuleMatchOperator> Operator 
    {
        get { Initialize(); return _operator!; }
        set { Initialize(); _operator!.Assign(value); }
    }
    private BicepValue<WebApplicationRuleMatchOperator>? _operator;

    /// <summary>
    /// Describes if the result of this condition should be negated.
    /// </summary>
    public BicepValue<bool> IsNegateCondition 
    {
        get { Initialize(); return _isNegateCondition!; }
        set { Initialize(); _isNegateCondition!.Assign(value); }
    }
    private BicepValue<bool>? _isNegateCondition;

    /// <summary>
    /// List of possible match values.
    /// </summary>
    public BicepList<string> MatchValue 
    {
        get { Initialize(); return _matchValue!; }
        set { Initialize(); _matchValue!.Assign(value); }
    }
    private BicepList<string>? _matchValue;

    /// <summary>
    /// List of transforms.
    /// </summary>
    public BicepList<WebApplicationRuleMatchTransformType> Transforms 
    {
        get { Initialize(); return _transforms!; }
        set { Initialize(); _transforms!.Assign(value); }
    }
    private BicepList<WebApplicationRuleMatchTransformType>? _transforms;

    /// <summary>
    /// Creates a new WebApplicationRuleMatchCondition.
    /// </summary>
    public WebApplicationRuleMatchCondition()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// WebApplicationRuleMatchCondition.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _matchVariable = DefineProperty<WebApplicationRuleMatchVariable>("MatchVariable", ["matchVariable"]);
        _selector = DefineProperty<string>("Selector", ["selector"]);
        _operator = DefineProperty<WebApplicationRuleMatchOperator>("Operator", ["operator"]);
        _isNegateCondition = DefineProperty<bool>("IsNegateCondition", ["negateCondition"]);
        _matchValue = DefineListProperty<string>("MatchValue", ["matchValue"]);
        _transforms = DefineListProperty<WebApplicationRuleMatchTransformType>("Transforms", ["transforms"]);
    }
}
