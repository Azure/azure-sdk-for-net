// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// Defines a managed rule group override setting.
/// </summary>
public partial class ManagedRuleOverride : ProvisionableConstruct
{
    /// <summary>
    /// Identifier for the managed rule.
    /// </summary>
    public BicepValue<string> RuleId 
    {
        get { Initialize(); return _ruleId!; }
        set { Initialize(); _ruleId!.Assign(value); }
    }
    private BicepValue<string>? _ruleId;

    /// <summary>
    /// Describes if the managed rule is in enabled or disabled state. Defaults
    /// to Disabled if not specified.
    /// </summary>
    public BicepValue<ManagedRuleEnabledState> EnabledState 
    {
        get { Initialize(); return _enabledState!; }
        set { Initialize(); _enabledState!.Assign(value); }
    }
    private BicepValue<ManagedRuleEnabledState>? _enabledState;

    /// <summary>
    /// Describes the override action to be applied when rule matches.
    /// </summary>
    public BicepValue<RuleMatchActionType> Action 
    {
        get { Initialize(); return _action!; }
        set { Initialize(); _action!.Assign(value); }
    }
    private BicepValue<RuleMatchActionType>? _action;

    /// <summary>
    /// Describes the exclusions that are applied to this specific rule.
    /// </summary>
    public BicepList<ManagedRuleExclusion> Exclusions 
    {
        get { Initialize(); return _exclusions!; }
        set { Initialize(); _exclusions!.Assign(value); }
    }
    private BicepList<ManagedRuleExclusion>? _exclusions;

    /// <summary>
    /// Creates a new ManagedRuleOverride.
    /// </summary>
    public ManagedRuleOverride()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of ManagedRuleOverride.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _ruleId = DefineProperty<string>("RuleId", ["ruleId"]);
        _enabledState = DefineProperty<ManagedRuleEnabledState>("EnabledState", ["enabledState"]);
        _action = DefineProperty<RuleMatchActionType>("Action", ["action"]);
        _exclusions = DefineListProperty<ManagedRuleExclusion>("Exclusions", ["exclusions"]);
    }
}
