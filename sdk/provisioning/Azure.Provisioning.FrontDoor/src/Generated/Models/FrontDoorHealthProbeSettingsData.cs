// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// Load balancing settings for a backend pool.
/// </summary>
public partial class FrontDoorHealthProbeSettingsData : ProvisionableConstruct
{
    /// <summary>
    /// The path to use for the health probe. Default is /.
    /// </summary>
    public BicepValue<string> Path 
    {
        get { Initialize(); return _path!; }
        set { Initialize(); _path!.Assign(value); }
    }
    private BicepValue<string>? _path;

    /// <summary>
    /// Protocol scheme to use for this probe.
    /// </summary>
    public BicepValue<FrontDoorProtocol> Protocol 
    {
        get { Initialize(); return _protocol!; }
        set { Initialize(); _protocol!.Assign(value); }
    }
    private BicepValue<FrontDoorProtocol>? _protocol;

    /// <summary>
    /// The number of seconds between health probes.
    /// </summary>
    public BicepValue<int> IntervalInSeconds 
    {
        get { Initialize(); return _intervalInSeconds!; }
        set { Initialize(); _intervalInSeconds!.Assign(value); }
    }
    private BicepValue<int>? _intervalInSeconds;

    /// <summary>
    /// Configures which HTTP method to use to probe the backends defined under
    /// backendPools.
    /// </summary>
    public BicepValue<FrontDoorHealthProbeMethod> HealthProbeMethod 
    {
        get { Initialize(); return _healthProbeMethod!; }
        set { Initialize(); _healthProbeMethod!.Assign(value); }
    }
    private BicepValue<FrontDoorHealthProbeMethod>? _healthProbeMethod;

    /// <summary>
    /// Whether to enable health probes to be made against backends defined
    /// under backendPools. Health probes can only be disabled if there is a
    /// single enabled backend in single enabled backend pool.
    /// </summary>
    public BicepValue<HealthProbeEnabled> EnabledState 
    {
        get { Initialize(); return _enabledState!; }
        set { Initialize(); _enabledState!.Assign(value); }
    }
    private BicepValue<HealthProbeEnabled>? _enabledState;

    /// <summary>
    /// Resource status.
    /// </summary>
    public BicepValue<FrontDoorResourceState> ResourceState 
    {
        get { Initialize(); return _resourceState!; }
    }
    private BicepValue<FrontDoorResourceState>? _resourceState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new FrontDoorHealthProbeSettingsData.
    /// </summary>
    public FrontDoorHealthProbeSettingsData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// FrontDoorHealthProbeSettingsData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _path = DefineProperty<string>("Path", ["properties", "path"]);
        _protocol = DefineProperty<FrontDoorProtocol>("Protocol", ["properties", "protocol"]);
        _intervalInSeconds = DefineProperty<int>("IntervalInSeconds", ["properties", "intervalInSeconds"]);
        _healthProbeMethod = DefineProperty<FrontDoorHealthProbeMethod>("HealthProbeMethod", ["properties", "healthProbeMethod"]);
        _enabledState = DefineProperty<HealthProbeEnabled>("EnabledState", ["properties", "enabledState"]);
        _resourceState = DefineProperty<FrontDoorResourceState>("ResourceState", ["properties", "resourceState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"], isOutput: true);
    }
}
