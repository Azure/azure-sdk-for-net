// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// Backend address of a frontDoor load balancer.
/// </summary>
public partial class FrontDoorBackend : ProvisionableConstruct
{
    /// <summary>
    /// Location of the backend (IP address or FQDN).
    /// </summary>
    public BicepValue<string> Address 
    {
        get { Initialize(); return _address!; }
        set { Initialize(); _address!.Assign(value); }
    }
    private BicepValue<string>? _address;

    /// <summary>
    /// The Alias of the Private Link resource. Populating this optional field
    /// indicates that this backend is &apos;Private&apos;.
    /// </summary>
    public BicepValue<string> PrivateLinkAlias 
    {
        get { Initialize(); return _privateLinkAlias!; }
        set { Initialize(); _privateLinkAlias!.Assign(value); }
    }
    private BicepValue<string>? _privateLinkAlias;

    /// <summary>
    /// The Resource Id of the Private Link resource. Populating this optional
    /// field indicates that this backend is &apos;Private&apos;.
    /// </summary>
    public BicepValue<ResourceIdentifier> PrivateLinkResourceId 
    {
        get { Initialize(); return _privateLinkResourceId!; }
        set { Initialize(); _privateLinkResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _privateLinkResourceId;

    /// <summary>
    /// The location of the Private Link resource. Required only if
    /// &apos;privateLinkResourceId&apos; is populated.
    /// </summary>
    public BicepValue<AzureLocation> PrivateLinkLocation 
    {
        get { Initialize(); return _privateLinkLocation!; }
        set { Initialize(); _privateLinkLocation!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _privateLinkLocation;

    /// <summary>
    /// The Approval status for the connection to the Private Link.
    /// </summary>
    public BicepValue<BackendPrivateEndpointStatus> PrivateEndpointStatus 
    {
        get { Initialize(); return _privateEndpointStatus!; }
    }
    private BicepValue<BackendPrivateEndpointStatus>? _privateEndpointStatus;

    /// <summary>
    /// A custom message to be included in the approval request to connect to
    /// the Private Link.
    /// </summary>
    public BicepValue<string> PrivateLinkApprovalMessage 
    {
        get { Initialize(); return _privateLinkApprovalMessage!; }
        set { Initialize(); _privateLinkApprovalMessage!.Assign(value); }
    }
    private BicepValue<string>? _privateLinkApprovalMessage;

    /// <summary>
    /// The HTTP TCP port number. Must be between 1 and 65535.
    /// </summary>
    public BicepValue<int> HttpPort 
    {
        get { Initialize(); return _httpPort!; }
        set { Initialize(); _httpPort!.Assign(value); }
    }
    private BicepValue<int>? _httpPort;

    /// <summary>
    /// The HTTPS TCP port number. Must be between 1 and 65535.
    /// </summary>
    public BicepValue<int> HttpsPort 
    {
        get { Initialize(); return _httpsPort!; }
        set { Initialize(); _httpsPort!.Assign(value); }
    }
    private BicepValue<int>? _httpsPort;

    /// <summary>
    /// Whether to enable use of this backend. Permitted values are
    /// &apos;Enabled&apos; or &apos;Disabled&apos;.
    /// </summary>
    public BicepValue<BackendEnabledState> EnabledState 
    {
        get { Initialize(); return _enabledState!; }
        set { Initialize(); _enabledState!.Assign(value); }
    }
    private BicepValue<BackendEnabledState>? _enabledState;

    /// <summary>
    /// Priority to use for load balancing. Higher priorities will not be used
    /// for load balancing if any lower priority backend is healthy.
    /// </summary>
    public BicepValue<int> Priority 
    {
        get { Initialize(); return _priority!; }
        set { Initialize(); _priority!.Assign(value); }
    }
    private BicepValue<int>? _priority;

    /// <summary>
    /// Weight of this endpoint for load balancing purposes.
    /// </summary>
    public BicepValue<int> Weight 
    {
        get { Initialize(); return _weight!; }
        set { Initialize(); _weight!.Assign(value); }
    }
    private BicepValue<int>? _weight;

    /// <summary>
    /// The value to use as the host header sent to the backend. If blank or
    /// unspecified, this defaults to the incoming host.
    /// </summary>
    public BicepValue<string> BackendHostHeader 
    {
        get { Initialize(); return _backendHostHeader!; }
        set { Initialize(); _backendHostHeader!.Assign(value); }
    }
    private BicepValue<string>? _backendHostHeader;

    /// <summary>
    /// Creates a new FrontDoorBackend.
    /// </summary>
    public FrontDoorBackend()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of FrontDoorBackend.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _address = DefineProperty<string>("Address", ["address"]);
        _privateLinkAlias = DefineProperty<string>("PrivateLinkAlias", ["privateLinkAlias"]);
        _privateLinkResourceId = DefineProperty<ResourceIdentifier>("PrivateLinkResourceId", ["privateLinkResourceId"]);
        _privateLinkLocation = DefineProperty<AzureLocation>("PrivateLinkLocation", ["privateLinkLocation"]);
        _privateEndpointStatus = DefineProperty<BackendPrivateEndpointStatus>("PrivateEndpointStatus", ["privateEndpointStatus"], isOutput: true);
        _privateLinkApprovalMessage = DefineProperty<string>("PrivateLinkApprovalMessage", ["privateLinkApprovalMessage"]);
        _httpPort = DefineProperty<int>("HttpPort", ["httpPort"]);
        _httpsPort = DefineProperty<int>("HttpsPort", ["httpsPort"]);
        _enabledState = DefineProperty<BackendEnabledState>("EnabledState", ["enabledState"]);
        _priority = DefineProperty<int>("Priority", ["priority"]);
        _weight = DefineProperty<int>("Weight", ["weight"]);
        _backendHostHeader = DefineProperty<string>("BackendHostHeader", ["backendHostHeader"]);
    }
}
