// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// Contains a list of match conditions, and an action on how to modify the
/// request/response. If multiple rules match, the actions from one rule that
/// conflict with a previous rule overwrite for a singular action, or append
/// in the case of headers manipulation.
/// </summary>
public partial class RulesEngineRule : ProvisionableConstruct
{
    /// <summary>
    /// A name to refer to this specific rule.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// A priority assigned to this rule.
    /// </summary>
    public BicepValue<int> Priority 
    {
        get { Initialize(); return _priority!; }
        set { Initialize(); _priority!.Assign(value); }
    }
    private BicepValue<int>? _priority;

    /// <summary>
    /// Actions to perform on the request and response if all of the match
    /// conditions are met.
    /// </summary>
    public RulesEngineAction Action 
    {
        get { Initialize(); return _action!; }
        set { Initialize(); AssignOrReplace(ref _action, value); }
    }
    private RulesEngineAction? _action;

    /// <summary>
    /// A list of match conditions that must meet in order for the actions of
    /// this rule to run. Having no match conditions means the actions will
    /// always run.
    /// </summary>
    public BicepList<RulesEngineMatchCondition> MatchConditions 
    {
        get { Initialize(); return _matchConditions!; }
        set { Initialize(); _matchConditions!.Assign(value); }
    }
    private BicepList<RulesEngineMatchCondition>? _matchConditions;

    /// <summary>
    /// If this rule is a match should the rules engine continue running the
    /// remaining rules or stop. If not present, defaults to Continue.
    /// </summary>
    public BicepValue<MatchProcessingBehavior> MatchProcessingBehavior 
    {
        get { Initialize(); return _matchProcessingBehavior!; }
        set { Initialize(); _matchProcessingBehavior!.Assign(value); }
    }
    private BicepValue<MatchProcessingBehavior>? _matchProcessingBehavior;

    /// <summary>
    /// Creates a new RulesEngineRule.
    /// </summary>
    public RulesEngineRule()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of RulesEngineRule.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"]);
        _priority = DefineProperty<int>("Priority", ["priority"]);
        _action = DefineModelProperty<RulesEngineAction>("Action", ["action"]);
        _matchConditions = DefineListProperty<RulesEngineMatchCondition>("MatchConditions", ["matchConditions"]);
        _matchProcessingBehavior = DefineProperty<MatchProcessingBehavior>("MatchProcessingBehavior", ["matchProcessingBehavior"]);
    }
}
