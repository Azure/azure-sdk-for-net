// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// A backend pool is a collection of backends that can be routed to.
/// </summary>
public partial class FrontDoorBackendPool : ProvisionableConstruct
{
    /// <summary>
    /// The set of backends for this pool.
    /// </summary>
    public BicepList<FrontDoorBackend> Backends 
    {
        get { Initialize(); return _backends!; }
        set { Initialize(); _backends!.Assign(value); }
    }
    private BicepList<FrontDoorBackend>? _backends;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> LoadBalancingSettingsId 
    {
        get { Initialize(); return _loadBalancingSettingsId!; }
        set { Initialize(); _loadBalancingSettingsId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _loadBalancingSettingsId;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> HealthProbeSettingsId 
    {
        get { Initialize(); return _healthProbeSettingsId!; }
        set { Initialize(); _healthProbeSettingsId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _healthProbeSettingsId;

    /// <summary>
    /// Resource status.
    /// </summary>
    public BicepValue<FrontDoorResourceState> ResourceState 
    {
        get { Initialize(); return _resourceState!; }
    }
    private BicepValue<FrontDoorResourceState>? _resourceState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new FrontDoorBackendPool.
    /// </summary>
    public FrontDoorBackendPool()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of FrontDoorBackendPool.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _backends = DefineListProperty<FrontDoorBackend>("Backends", ["properties", "backends"]);
        _loadBalancingSettingsId = DefineProperty<ResourceIdentifier>("LoadBalancingSettingsId", ["properties", "loadBalancingSettings", "id"]);
        _healthProbeSettingsId = DefineProperty<ResourceIdentifier>("HealthProbeSettingsId", ["properties", "healthProbeSettings", "id"]);
        _resourceState = DefineProperty<FrontDoorResourceState>("ResourceState", ["properties", "resourceState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"], isOutput: true);
    }
}
