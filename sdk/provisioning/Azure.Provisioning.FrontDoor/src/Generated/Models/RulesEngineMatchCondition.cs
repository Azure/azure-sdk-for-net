// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// Define a match condition.
/// </summary>
public partial class RulesEngineMatchCondition : ProvisionableConstruct
{
    /// <summary>
    /// Match Variable.
    /// </summary>
    public BicepValue<RulesEngineMatchVariable> RulesEngineMatchVariable 
    {
        get { Initialize(); return _rulesEngineMatchVariable!; }
        set { Initialize(); _rulesEngineMatchVariable!.Assign(value); }
    }
    private BicepValue<RulesEngineMatchVariable>? _rulesEngineMatchVariable;

    /// <summary>
    /// Name of selector in RequestHeader or RequestBody to be matched.
    /// </summary>
    public BicepValue<string> Selector 
    {
        get { Initialize(); return _selector!; }
        set { Initialize(); _selector!.Assign(value); }
    }
    private BicepValue<string>? _selector;

    /// <summary>
    /// Describes operator to apply to the match condition.
    /// </summary>
    public BicepValue<RulesEngineOperator> RulesEngineOperator 
    {
        get { Initialize(); return _rulesEngineOperator!; }
        set { Initialize(); _rulesEngineOperator!.Assign(value); }
    }
    private BicepValue<RulesEngineOperator>? _rulesEngineOperator;

    /// <summary>
    /// Describes if this is negate condition or not.
    /// </summary>
    public BicepValue<bool> IsNegateCondition 
    {
        get { Initialize(); return _isNegateCondition!; }
        set { Initialize(); _isNegateCondition!.Assign(value); }
    }
    private BicepValue<bool>? _isNegateCondition;

    /// <summary>
    /// Match values to match against. The operator will apply to each value in
    /// here with OR semantics. If any of them match the variable with the
    /// given operator this match condition is considered a match.
    /// </summary>
    public BicepList<string> RulesEngineMatchValue 
    {
        get { Initialize(); return _rulesEngineMatchValue!; }
        set { Initialize(); _rulesEngineMatchValue!.Assign(value); }
    }
    private BicepList<string>? _rulesEngineMatchValue;

    /// <summary>
    /// List of transforms.
    /// </summary>
    public BicepList<RulesEngineMatchTransform> Transforms 
    {
        get { Initialize(); return _transforms!; }
        set { Initialize(); _transforms!.Assign(value); }
    }
    private BicepList<RulesEngineMatchTransform>? _transforms;

    /// <summary>
    /// Creates a new RulesEngineMatchCondition.
    /// </summary>
    public RulesEngineMatchCondition()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of RulesEngineMatchCondition.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _rulesEngineMatchVariable = DefineProperty<RulesEngineMatchVariable>("RulesEngineMatchVariable", ["rulesEngineMatchVariable"]);
        _selector = DefineProperty<string>("Selector", ["selector"]);
        _rulesEngineOperator = DefineProperty<RulesEngineOperator>("RulesEngineOperator", ["rulesEngineOperator"]);
        _isNegateCondition = DefineProperty<bool>("IsNegateCondition", ["negateCondition"]);
        _rulesEngineMatchValue = DefineListProperty<string>("RulesEngineMatchValue", ["rulesEngineMatchValue"]);
        _transforms = DefineListProperty<RulesEngineMatchTransform>("Transforms", ["transforms"]);
    }
}
