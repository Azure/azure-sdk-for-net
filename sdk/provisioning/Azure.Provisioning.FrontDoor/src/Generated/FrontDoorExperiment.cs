// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// FrontDoorExperiment.
/// </summary>
public partial class FrontDoorExperiment : ProvisionableResource
{
    /// <summary>
    /// The Experiment identifier associated with the Experiment.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// The description of the details or intents of the Experiment.
    /// </summary>
    public BicepValue<string> Description 
    {
        get { Initialize(); return _description!; }
        set { Initialize(); _description!.Assign(value); }
    }
    private BicepValue<string>? _description;

    /// <summary>
    /// The state of the Experiment.
    /// </summary>
    public BicepValue<FrontDoorExperimentState> EnabledState 
    {
        get { Initialize(); return _enabledState!; }
        set { Initialize(); _enabledState!.Assign(value); }
    }
    private BicepValue<FrontDoorExperimentState>? _enabledState;

    /// <summary>
    /// The endpoint A of an experiment.
    /// </summary>
    public FrontDoorExperimentEndpointProperties ExperimentEndpointA 
    {
        get { Initialize(); return _experimentEndpointA!; }
        set { Initialize(); AssignOrReplace(ref _experimentEndpointA, value); }
    }
    private FrontDoorExperimentEndpointProperties? _experimentEndpointA;

    /// <summary>
    /// The endpoint B of an experiment.
    /// </summary>
    public FrontDoorExperimentEndpointProperties ExperimentEndpointB 
    {
        get { Initialize(); return _experimentEndpointB!; }
        set { Initialize(); AssignOrReplace(ref _experimentEndpointB, value); }
    }
    private FrontDoorExperimentEndpointProperties? _experimentEndpointB;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource status.
    /// </summary>
    public BicepValue<NetworkExperimentResourceState> ResourceState 
    {
        get { Initialize(); return _resourceState!; }
    }
    private BicepValue<NetworkExperimentResourceState>? _resourceState;

    /// <summary>
    /// The uri to the Script used in the Experiment.
    /// </summary>
    public BicepValue<Uri> ScriptFileUri 
    {
        get { Initialize(); return _scriptFileUri!; }
    }
    private BicepValue<Uri>? _scriptFileUri;

    /// <summary>
    /// The description of Experiment status from the server side.
    /// </summary>
    public BicepValue<string> Status 
    {
        get { Initialize(); return _status!; }
    }
    private BicepValue<string>? _status;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent FrontDoorNetworkExperimentProfile.
    /// </summary>
    public FrontDoorNetworkExperimentProfile? Parent
    {
        get { Initialize(); return _parent!.Value; }
        set { Initialize(); _parent!.Value = value; }
    }
    private ResourceReference<FrontDoorNetworkExperimentProfile>? _parent;

    /// <summary>
    /// Creates a new FrontDoorExperiment.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the FrontDoorExperiment resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the FrontDoorExperiment.</param>
    public FrontDoorExperiment(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Network/NetworkExperimentProfiles/Experiments", resourceVersion ?? "2019-11-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of FrontDoorExperiment.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"], isRequired: true);
        _description = DefineProperty<string>("Description", ["properties", "description"]);
        _enabledState = DefineProperty<FrontDoorExperimentState>("EnabledState", ["properties", "enabledState"]);
        _experimentEndpointA = DefineModelProperty<FrontDoorExperimentEndpointProperties>("ExperimentEndpointA", ["properties", "endpointA"]);
        _experimentEndpointB = DefineModelProperty<FrontDoorExperimentEndpointProperties>("ExperimentEndpointB", ["properties", "endpointB"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _resourceState = DefineProperty<NetworkExperimentResourceState>("ResourceState", ["properties", "resourceState"], isOutput: true);
        _scriptFileUri = DefineProperty<Uri>("ScriptFileUri", ["properties", "scriptFileUri"], isOutput: true);
        _status = DefineProperty<string>("Status", ["properties", "status"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
        _parent = DefineResource<FrontDoorNetworkExperimentProfile>("Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported FrontDoorExperiment resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2019-11-01.
        /// </summary>
        public static readonly string V2019_11_01 = "2019-11-01";
    }

    /// <summary>
    /// Creates a reference to an existing FrontDoorExperiment.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the FrontDoorExperiment resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the FrontDoorExperiment.</param>
    /// <returns>The existing FrontDoorExperiment resource.</returns>
    public static FrontDoorExperiment FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
