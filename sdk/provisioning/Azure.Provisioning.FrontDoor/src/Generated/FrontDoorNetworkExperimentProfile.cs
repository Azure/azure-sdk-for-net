// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.FrontDoor;

/// <summary>
/// FrontDoorNetworkExperimentProfile.
/// </summary>
public partial class FrontDoorNetworkExperimentProfile : ProvisionableResource
{
    /// <summary>
    /// The Profile identifier associated with the Tenant and Partner.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// The state of the Experiment.
    /// </summary>
    public BicepValue<FrontDoorExperimentState> EnabledState 
    {
        get { Initialize(); return _enabledState!; }
        set { Initialize(); _enabledState!.Assign(value); }
    }
    private BicepValue<FrontDoorExperimentState>? _enabledState;

    /// <summary>
    /// Gets a unique read-only string that changes whenever the resource is
    /// updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
        set { Initialize(); _eTag!.Assign(value); }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource status.
    /// </summary>
    public BicepValue<NetworkExperimentResourceState> ResourceState 
    {
        get { Initialize(); return _resourceState!; }
    }
    private BicepValue<NetworkExperimentResourceState>? _resourceState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// Creates a new FrontDoorNetworkExperimentProfile.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the FrontDoorNetworkExperimentProfile
    /// resource.  This can be used to refer to the resource in expressions,
    /// but is not the Azure name of the resource.  This value can contain
    /// letters, numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the FrontDoorNetworkExperimentProfile.</param>
    public FrontDoorNetworkExperimentProfile(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Network/NetworkExperimentProfiles", resourceVersion ?? "2019-11-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// FrontDoorNetworkExperimentProfile.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"], isRequired: true);
        _enabledState = DefineProperty<FrontDoorExperimentState>("EnabledState", ["properties", "enabledState"]);
        _eTag = DefineProperty<ETag>("ETag", ["etag"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _resourceState = DefineProperty<NetworkExperimentResourceState>("ResourceState", ["properties", "resourceState"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported FrontDoorNetworkExperimentProfile resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2019-11-01.
        /// </summary>
        public static readonly string V2019_11_01 = "2019-11-01";
    }

    /// <summary>
    /// Creates a reference to an existing FrontDoorNetworkExperimentProfile.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the FrontDoorNetworkExperimentProfile
    /// resource.  This can be used to refer to the resource in expressions,
    /// but is not the Azure name of the resource.  This value can contain
    /// letters, numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the FrontDoorNetworkExperimentProfile.</param>
    /// <returns>The existing FrontDoorNetworkExperimentProfile resource.</returns>
    public static FrontDoorNetworkExperimentProfile FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
