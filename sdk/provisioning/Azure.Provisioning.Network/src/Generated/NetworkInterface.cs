// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// NetworkInterface.
/// </summary>
public partial class NetworkInterface : ProvisionableResource
{
    /// <summary>
    /// The name of the network interface.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Auxiliary mode of Network Interface resource.
    /// </summary>
    public BicepValue<NetworkInterfaceAuxiliaryMode> AuxiliaryMode 
    {
        get { Initialize(); return _auxiliaryMode!; }
        set { Initialize(); _auxiliaryMode!.Assign(value); }
    }
    private BicepValue<NetworkInterfaceAuxiliaryMode>? _auxiliaryMode;

    /// <summary>
    /// Auxiliary sku of Network Interface resource.
    /// </summary>
    public BicepValue<NetworkInterfaceAuxiliarySku> AuxiliarySku 
    {
        get { Initialize(); return _auxiliarySku!; }
        set { Initialize(); _auxiliarySku!.Assign(value); }
    }
    private BicepValue<NetworkInterfaceAuxiliarySku>? _auxiliarySku;

    /// <summary>
    /// Indicates whether to disable tcp state tracking.
    /// </summary>
    public BicepValue<bool> DisableTcpStateTracking 
    {
        get { Initialize(); return _disableTcpStateTracking!; }
        set { Initialize(); _disableTcpStateTracking!.Assign(value); }
    }
    private BicepValue<bool>? _disableTcpStateTracking;

    /// <summary>
    /// The DNS settings in network interface.
    /// </summary>
    public NetworkInterfaceDnsSettings DnsSettings 
    {
        get { Initialize(); return _dnsSettings!; }
        set { Initialize(); AssignOrReplace(ref _dnsSettings, value); }
    }
    private NetworkInterfaceDnsSettings? _dnsSettings;

    /// <summary>
    /// If the network interface is configured for accelerated networking. Not
    /// applicable to VM sizes which require accelerated networking.
    /// </summary>
    public BicepValue<bool> EnableAcceleratedNetworking 
    {
        get { Initialize(); return _enableAcceleratedNetworking!; }
        set { Initialize(); _enableAcceleratedNetworking!.Assign(value); }
    }
    private BicepValue<bool>? _enableAcceleratedNetworking;

    /// <summary>
    /// Indicates whether IP forwarding is enabled on this network interface.
    /// </summary>
    public BicepValue<bool> EnableIPForwarding 
    {
        get { Initialize(); return _enableIPForwarding!; }
        set { Initialize(); _enableIPForwarding!.Assign(value); }
    }
    private BicepValue<bool>? _enableIPForwarding;

    /// <summary>
    /// The extended location of the network interface.
    /// </summary>
    public ExtendedAzureLocation ExtendedLocation 
    {
        get { Initialize(); return _extendedLocation!; }
        set { Initialize(); AssignOrReplace(ref _extendedLocation, value); }
    }
    private ExtendedAzureLocation? _extendedLocation;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// A list of IPConfigurations of the network interface.
    /// </summary>
    public BicepList<NetworkInterfaceIPConfiguration> IPConfigurations 
    {
        get { Initialize(); return _iPConfigurations!; }
        set { Initialize(); _iPConfigurations!.Assign(value); }
    }
    private BicepList<NetworkInterfaceIPConfiguration>? _iPConfigurations;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Migration phase of Network Interface resource.
    /// </summary>
    public BicepValue<NetworkInterfaceMigrationPhase> MigrationPhase 
    {
        get { Initialize(); return _migrationPhase!; }
        set { Initialize(); _migrationPhase!.Assign(value); }
    }
    private BicepValue<NetworkInterfaceMigrationPhase>? _migrationPhase;

    /// <summary>
    /// The reference to the NetworkSecurityGroup resource.
    /// </summary>
    public NetworkSecurityGroup NetworkSecurityGroup 
    {
        get { Initialize(); return _networkSecurityGroup!; }
        set { Initialize(); AssignOrReplace(ref _networkSecurityGroup, value); }
    }
    private NetworkSecurityGroup? _networkSecurityGroup;

    /// <summary>
    /// Type of Network Interface resource.
    /// </summary>
    public BicepValue<NetworkInterfaceNicType> NicType 
    {
        get { Initialize(); return _nicType!; }
        set { Initialize(); _nicType!.Assign(value); }
    }
    private BicepValue<NetworkInterfaceNicType>? _nicType;

    /// <summary>
    /// Privatelinkservice of the network interface resource.
    /// </summary>
    public PrivateLinkService PrivateLinkService 
    {
        get { Initialize(); return _privateLinkService!; }
        set { Initialize(); AssignOrReplace(ref _privateLinkService, value); }
    }
    private PrivateLinkService? _privateLinkService;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// WorkloadType of the NetworkInterface for BareMetal resources.
    /// </summary>
    public BicepValue<string> WorkloadType 
    {
        get { Initialize(); return _workloadType!; }
        set { Initialize(); _workloadType!.Assign(value); }
    }
    private BicepValue<string>? _workloadType;

    /// <summary>
    /// Whether default outbound connectivity for nic was configured or not.
    /// </summary>
    public BicepValue<bool> DefaultOutboundConnectivityEnabled 
    {
        get { Initialize(); return _defaultOutboundConnectivityEnabled!; }
    }
    private BicepValue<bool>? _defaultOutboundConnectivityEnabled;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> DscpConfigurationId 
    {
        get { Initialize(); return _dscpConfigurationId!; }
    }
    private BicepValue<ResourceIdentifier>? _dscpConfigurationId;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// A list of references to linked BareMetal resources.
    /// </summary>
    public BicepList<string> HostedWorkloads 
    {
        get { Initialize(); return _hostedWorkloads!; }
    }
    private BicepList<string>? _hostedWorkloads;

    /// <summary>
    /// The MAC address of the network interface.
    /// </summary>
    public BicepValue<string> MacAddress 
    {
        get { Initialize(); return _macAddress!; }
    }
    private BicepValue<string>? _macAddress;

    /// <summary>
    /// Whether this is a primary network interface on a virtual machine.
    /// </summary>
    public BicepValue<bool> Primary 
    {
        get { Initialize(); return _primary!; }
    }
    private BicepValue<bool>? _primary;

    /// <summary>
    /// A reference to the private endpoint to which the network interface is
    /// linked.
    /// </summary>
    public PrivateEndpoint PrivateEndpoint 
    {
        get { Initialize(); return _privateEndpoint!; }
    }
    private PrivateEndpoint? _privateEndpoint;

    /// <summary>
    /// The provisioning state of the network interface resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// The resource GUID property of the network interface resource.
    /// </summary>
    public BicepValue<Guid> ResourceGuid 
    {
        get { Initialize(); return _resourceGuid!; }
    }
    private BicepValue<Guid>? _resourceGuid;

    /// <summary>
    /// A list of TapConfigurations of the network interface.
    /// </summary>
    public BicepList<NetworkInterfaceTapConfiguration> TapConfigurations 
    {
        get { Initialize(); return _tapConfigurations!; }
    }
    private BicepList<NetworkInterfaceTapConfiguration>? _tapConfigurations;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> VirtualMachineId 
    {
        get { Initialize(); return _virtualMachineId!; }
    }
    private BicepValue<ResourceIdentifier>? _virtualMachineId;

    /// <summary>
    /// Whether the virtual machine this nic is attached to supports encryption.
    /// </summary>
    public BicepValue<bool> VnetEncryptionSupported 
    {
        get { Initialize(); return _vnetEncryptionSupported!; }
    }
    private BicepValue<bool>? _vnetEncryptionSupported;

    /// <summary>
    /// Creates a new NetworkInterface.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the NetworkInterface resource.  This
    /// can be used to refer to the resource in expressions, but is not the
    /// Azure name of the resource.  This value can contain letters, numbers,
    /// and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the NetworkInterface.</param>
    public NetworkInterface(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Network/networkInterfaces", resourceVersion ?? "2025-01-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of NetworkInterface.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _auxiliaryMode = DefineProperty<NetworkInterfaceAuxiliaryMode>("AuxiliaryMode", ["properties", "auxiliaryMode"]);
        _auxiliarySku = DefineProperty<NetworkInterfaceAuxiliarySku>("AuxiliarySku", ["properties", "auxiliarySku"]);
        _disableTcpStateTracking = DefineProperty<bool>("DisableTcpStateTracking", ["properties", "disableTcpStateTracking"]);
        _dnsSettings = DefineModelProperty<NetworkInterfaceDnsSettings>("DnsSettings", ["properties", "dnsSettings"]);
        _enableAcceleratedNetworking = DefineProperty<bool>("EnableAcceleratedNetworking", ["properties", "enableAcceleratedNetworking"]);
        _enableIPForwarding = DefineProperty<bool>("EnableIPForwarding", ["properties", "enableIPForwarding"]);
        _extendedLocation = DefineModelProperty<ExtendedAzureLocation>("ExtendedLocation", ["extendedLocation"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _iPConfigurations = DefineListProperty<NetworkInterfaceIPConfiguration>("IPConfigurations", ["properties", "ipConfigurations"]);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _migrationPhase = DefineProperty<NetworkInterfaceMigrationPhase>("MigrationPhase", ["properties", "migrationPhase"]);
        _networkSecurityGroup = DefineModelProperty<NetworkSecurityGroup>("NetworkSecurityGroup", ["properties", "networkSecurityGroup"], new NetworkSecurityGroup("networkSecurityGroup"));
        _nicType = DefineProperty<NetworkInterfaceNicType>("NicType", ["properties", "nicType"]);
        _privateLinkService = DefineModelProperty<PrivateLinkService>("PrivateLinkService", ["properties", "privateLinkService"], new PrivateLinkService("privateLinkService"));
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
        _workloadType = DefineProperty<string>("WorkloadType", ["properties", "workloadType"]);
        _defaultOutboundConnectivityEnabled = DefineProperty<bool>("DefaultOutboundConnectivityEnabled", ["properties", "defaultOutboundConnectivityEnabled"], isOutput: true);
        _dscpConfigurationId = DefineProperty<ResourceIdentifier>("DscpConfigurationId", ["properties", "dscpConfiguration", "id"], isOutput: true);
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _hostedWorkloads = DefineListProperty<string>("HostedWorkloads", ["properties", "hostedWorkloads"], isOutput: true);
        _macAddress = DefineProperty<string>("MacAddress", ["properties", "macAddress"], isOutput: true);
        _primary = DefineProperty<bool>("Primary", ["properties", "primary"], isOutput: true);
        _privateEndpoint = DefineModelProperty<PrivateEndpoint>("PrivateEndpoint", ["properties", "privateEndpoint"], new PrivateEndpoint("privateEndpoint"), isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _resourceGuid = DefineProperty<Guid>("ResourceGuid", ["properties", "resourceGuid"], isOutput: true);
        _tapConfigurations = DefineListProperty<NetworkInterfaceTapConfiguration>("TapConfigurations", ["properties", "tapConfigurations"], isOutput: true);
        _virtualMachineId = DefineProperty<ResourceIdentifier>("VirtualMachineId", ["properties", "virtualMachine", "id"], isOutput: true);
        _vnetEncryptionSupported = DefineProperty<bool>("VnetEncryptionSupported", ["properties", "vnetEncryptionSupported"], isOutput: true);
    }

    /// <summary>
    /// Supported NetworkInterface resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-01-01.
        /// </summary>
        public static readonly string V2025_01_01 = "2025-01-01";

        /// <summary>
        /// 2024-10-01.
        /// </summary>
        public static readonly string V2024_10_01 = "2024-10-01";

        /// <summary>
        /// 2024-07-01.
        /// </summary>
        public static readonly string V2024_07_01 = "2024-07-01";

        /// <summary>
        /// 2024-05-01.
        /// </summary>
        public static readonly string V2024_05_01 = "2024-05-01";

        /// <summary>
        /// 2024-03-01.
        /// </summary>
        public static readonly string V2024_03_01 = "2024-03-01";

        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2023-09-01.
        /// </summary>
        public static readonly string V2023_09_01 = "2023-09-01";

        /// <summary>
        /// 2023-06-01.
        /// </summary>
        public static readonly string V2023_06_01 = "2023-06-01";

        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2023-04-01.
        /// </summary>
        public static readonly string V2023_04_01 = "2023-04-01";

        /// <summary>
        /// 2023-02-01.
        /// </summary>
        public static readonly string V2023_02_01 = "2023-02-01";

        /// <summary>
        /// 2022-11-01.
        /// </summary>
        public static readonly string V2022_11_01 = "2022-11-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-07-01.
        /// </summary>
        public static readonly string V2022_07_01 = "2022-07-01";

        /// <summary>
        /// 2022-05-01.
        /// </summary>
        public static readonly string V2022_05_01 = "2022-05-01";

        /// <summary>
        /// 2022-01-01.
        /// </summary>
        public static readonly string V2022_01_01 = "2022-01-01";

        /// <summary>
        /// 2021-12-01.
        /// </summary>
        public static readonly string V2021_12_01 = "2021-12-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-06-01.
        /// </summary>
        public static readonly string V2021_06_01 = "2021-06-01";

        /// <summary>
        /// 2021-05-01.
        /// </summary>
        public static readonly string V2021_05_01 = "2021-05-01";

        /// <summary>
        /// 2021-04-01.
        /// </summary>
        public static readonly string V2021_04_01 = "2021-04-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2020-11-01.
        /// </summary>
        public static readonly string V2020_11_01 = "2020-11-01";

        /// <summary>
        /// 2020-08-01.
        /// </summary>
        public static readonly string V2020_08_01 = "2020-08-01";

        /// <summary>
        /// 2020-07-01.
        /// </summary>
        public static readonly string V2020_07_01 = "2020-07-01";

        /// <summary>
        /// 2020-06-01.
        /// </summary>
        public static readonly string V2020_06_01 = "2020-06-01";

        /// <summary>
        /// 2020-05-01.
        /// </summary>
        public static readonly string V2020_05_01 = "2020-05-01";

        /// <summary>
        /// 2020-04-01.
        /// </summary>
        public static readonly string V2020_04_01 = "2020-04-01";

        /// <summary>
        /// 2020-03-01.
        /// </summary>
        public static readonly string V2020_03_01 = "2020-03-01";

        /// <summary>
        /// 2020-01-01.
        /// </summary>
        public static readonly string V2020_01_01 = "2020-01-01";

        /// <summary>
        /// 2019-12-01.
        /// </summary>
        public static readonly string V2019_12_01 = "2019-12-01";

        /// <summary>
        /// 2019-11-01.
        /// </summary>
        public static readonly string V2019_11_01 = "2019-11-01";

        /// <summary>
        /// 2019-09-01.
        /// </summary>
        public static readonly string V2019_09_01 = "2019-09-01";

        /// <summary>
        /// 2019-08-01.
        /// </summary>
        public static readonly string V2019_08_01 = "2019-08-01";

        /// <summary>
        /// 2019-07-01.
        /// </summary>
        public static readonly string V2019_07_01 = "2019-07-01";

        /// <summary>
        /// 2019-06-01.
        /// </summary>
        public static readonly string V2019_06_01 = "2019-06-01";

        /// <summary>
        /// 2019-04-01.
        /// </summary>
        public static readonly string V2019_04_01 = "2019-04-01";

        /// <summary>
        /// 2019-02-01.
        /// </summary>
        public static readonly string V2019_02_01 = "2019-02-01";

        /// <summary>
        /// 2018-12-01.
        /// </summary>
        public static readonly string V2018_12_01 = "2018-12-01";

        /// <summary>
        /// 2018-11-01.
        /// </summary>
        public static readonly string V2018_11_01 = "2018-11-01";

        /// <summary>
        /// 2018-10-01.
        /// </summary>
        public static readonly string V2018_10_01 = "2018-10-01";

        /// <summary>
        /// 2018-08-01.
        /// </summary>
        public static readonly string V2018_08_01 = "2018-08-01";

        /// <summary>
        /// 2018-07-01.
        /// </summary>
        public static readonly string V2018_07_01 = "2018-07-01";

        /// <summary>
        /// 2018-06-01.
        /// </summary>
        public static readonly string V2018_06_01 = "2018-06-01";

        /// <summary>
        /// 2018-05-01.
        /// </summary>
        public static readonly string V2018_05_01 = "2018-05-01";

        /// <summary>
        /// 2018-04-01.
        /// </summary>
        public static readonly string V2018_04_01 = "2018-04-01";

        /// <summary>
        /// 2018-03-01.
        /// </summary>
        public static readonly string V2018_03_01 = "2018-03-01";

        /// <summary>
        /// 2018-02-01.
        /// </summary>
        public static readonly string V2018_02_01 = "2018-02-01";

        /// <summary>
        /// 2018-01-01.
        /// </summary>
        public static readonly string V2018_01_01 = "2018-01-01";

        /// <summary>
        /// 2017-11-01.
        /// </summary>
        public static readonly string V2017_11_01 = "2017-11-01";

        /// <summary>
        /// 2017-10-01.
        /// </summary>
        public static readonly string V2017_10_01 = "2017-10-01";

        /// <summary>
        /// 2017-09-01.
        /// </summary>
        public static readonly string V2017_09_01 = "2017-09-01";

        /// <summary>
        /// 2017-08-01.
        /// </summary>
        public static readonly string V2017_08_01 = "2017-08-01";

        /// <summary>
        /// 2017-06-01.
        /// </summary>
        public static readonly string V2017_06_01 = "2017-06-01";

        /// <summary>
        /// 2017-04-01.
        /// </summary>
        public static readonly string V2017_04_01 = "2017-04-01";

        /// <summary>
        /// 2017-03-01.
        /// </summary>
        public static readonly string V2017_03_01 = "2017-03-01";

        /// <summary>
        /// 2016-12-01.
        /// </summary>
        public static readonly string V2016_12_01 = "2016-12-01";

        /// <summary>
        /// 2016-11-01.
        /// </summary>
        public static readonly string V2016_11_01 = "2016-11-01";

        /// <summary>
        /// 2016-10-01.
        /// </summary>
        public static readonly string V2016_10_01 = "2016-10-01";

        /// <summary>
        /// 2016-09-01.
        /// </summary>
        public static readonly string V2016_09_01 = "2016-09-01";

        /// <summary>
        /// 2016-08-01.
        /// </summary>
        public static readonly string V2016_08_01 = "2016-08-01";

        /// <summary>
        /// 2016-07-01.
        /// </summary>
        public static readonly string V2016_07_01 = "2016-07-01";

        /// <summary>
        /// 2016-06-01.
        /// </summary>
        public static readonly string V2016_06_01 = "2016-06-01";

        /// <summary>
        /// 2016-03-30.
        /// </summary>
        public static readonly string V2016_03_30 = "2016-03-30";

        /// <summary>
        /// 2015-06-15.
        /// </summary>
        public static readonly string V2015_06_15 = "2015-06-15";
    }

    /// <summary>
    /// Creates a reference to an existing NetworkInterface.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the NetworkInterface resource.  This
    /// can be used to refer to the resource in expressions, but is not the
    /// Azure name of the resource.  This value can contain letters, numbers,
    /// and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the NetworkInterface.</param>
    /// <returns>The existing NetworkInterface resource.</returns>
    public static NetworkInterface FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this NetworkInterface resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 80, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen | ResourceNameCharacters.Underscore | ResourceNameCharacters.Period);
}
