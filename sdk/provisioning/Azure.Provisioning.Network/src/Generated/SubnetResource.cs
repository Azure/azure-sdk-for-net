// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// SubnetResource.
/// </summary>
public partial class SubnetResource : ProvisionableResource
{
    /// <summary>
    /// The name of the subnet.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// The address prefix for the subnet.
    /// </summary>
    public BicepValue<string> AddressPrefix 
    {
        get { Initialize(); return _addressPrefix!; }
        set { Initialize(); _addressPrefix!.Assign(value); }
    }
    private BicepValue<string>? _addressPrefix;

    /// <summary>
    /// List of address prefixes for the subnet.
    /// </summary>
    public BicepList<string> AddressPrefixes 
    {
        get { Initialize(); return _addressPrefixes!; }
        set { Initialize(); _addressPrefixes!.Assign(value); }
    }
    private BicepList<string>? _addressPrefixes;

    /// <summary>
    /// Application gateway IP configurations of virtual network resource.
    /// </summary>
    public BicepList<ApplicationGatewayIPConfiguration> ApplicationGatewayIPConfigurations 
    {
        get { Initialize(); return _applicationGatewayIPConfigurations!; }
        set { Initialize(); _applicationGatewayIPConfigurations!.Assign(value); }
    }
    private BicepList<ApplicationGatewayIPConfiguration>? _applicationGatewayIPConfigurations;

    /// <summary>
    /// Set this property to false to disable default outbound connectivity for
    /// all VMs in the subnet. This property can only be set at the time of
    /// subnet creation and cannot be updated for an existing subnet.
    /// </summary>
    public BicepValue<bool> DefaultOutboundAccess 
    {
        get { Initialize(); return _defaultOutboundAccess!; }
        set { Initialize(); _defaultOutboundAccess!.Assign(value); }
    }
    private BicepValue<bool>? _defaultOutboundAccess;

    /// <summary>
    /// An array of references to the delegations on the subnet.
    /// </summary>
    public BicepList<ServiceDelegation> Delegations 
    {
        get { Initialize(); return _delegations!; }
        set { Initialize(); _delegations!.Assign(value); }
    }
    private BicepList<ServiceDelegation>? _delegations;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Array of IpAllocation which reference this subnet.
    /// </summary>
    public BicepList<WritableSubResource> IPAllocations 
    {
        get { Initialize(); return _iPAllocations!; }
        set { Initialize(); _iPAllocations!.Assign(value); }
    }
    private BicepList<WritableSubResource>? _iPAllocations;

    /// <summary>
    /// A list of IPAM Pools for allocating IP address prefixes.
    /// </summary>
    public BicepList<IpamPoolPrefixAllocation> IpamPoolPrefixAllocations 
    {
        get { Initialize(); return _ipamPoolPrefixAllocations!; }
        set { Initialize(); _ipamPoolPrefixAllocations!.Assign(value); }
    }
    private BicepList<IpamPoolPrefixAllocation>? _ipamPoolPrefixAllocations;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> NatGatewayId 
    {
        get { Initialize(); return _natGatewayId!; }
        set { Initialize(); _natGatewayId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _natGatewayId;

    /// <summary>
    /// The reference to the NetworkSecurityGroup resource.
    /// </summary>
    public NetworkSecurityGroup NetworkSecurityGroup 
    {
        get { Initialize(); return _networkSecurityGroup!; }
        set { Initialize(); AssignOrReplace(ref _networkSecurityGroup, value); }
    }
    private NetworkSecurityGroup? _networkSecurityGroup;

    /// <summary>
    /// Enable or Disable apply network policies on private end point in the
    /// subnet.
    /// </summary>
    public BicepValue<VirtualNetworkPrivateEndpointNetworkPolicy> PrivateEndpointNetworkPolicy 
    {
        get { Initialize(); return _privateEndpointNetworkPolicy!; }
        set { Initialize(); _privateEndpointNetworkPolicy!.Assign(value); }
    }
    private BicepValue<VirtualNetworkPrivateEndpointNetworkPolicy>? _privateEndpointNetworkPolicy;

    /// <summary>
    /// Enable or Disable apply network policies on private link service in the
    /// subnet.
    /// </summary>
    public BicepValue<VirtualNetworkPrivateLinkServiceNetworkPolicy> PrivateLinkServiceNetworkPolicy 
    {
        get { Initialize(); return _privateLinkServiceNetworkPolicy!; }
        set { Initialize(); _privateLinkServiceNetworkPolicy!.Assign(value); }
    }
    private BicepValue<VirtualNetworkPrivateLinkServiceNetworkPolicy>? _privateLinkServiceNetworkPolicy;

    /// <summary>
    /// The reference to the RouteTable resource.
    /// </summary>
    public RouteTable RouteTable 
    {
        get { Initialize(); return _routeTable!; }
        set { Initialize(); AssignOrReplace(ref _routeTable, value); }
    }
    private RouteTable? _routeTable;

    /// <summary>
    /// An array of service endpoint policies.
    /// </summary>
    public BicepList<ServiceEndpointPolicy> ServiceEndpointPolicies 
    {
        get { Initialize(); return _serviceEndpointPolicies!; }
        set { Initialize(); _serviceEndpointPolicies!.Assign(value); }
    }
    private BicepList<ServiceEndpointPolicy>? _serviceEndpointPolicies;

    /// <summary>
    /// An array of service endpoints.
    /// </summary>
    public BicepList<ServiceEndpointProperties> ServiceEndpoints 
    {
        get { Initialize(); return _serviceEndpoints!; }
        set { Initialize(); _serviceEndpoints!.Assign(value); }
    }
    private BicepList<ServiceEndpointProperties>? _serviceEndpoints;

    /// <summary>
    /// Set this property to Tenant to allow sharing subnet with other
    /// subscriptions in your AAD tenant. This property can only be set if
    /// defaultOutboundAccess is set to false, both properties can only be set
    /// if subnet is empty.
    /// </summary>
    public BicepValue<SharingScope> SharingScope 
    {
        get { Initialize(); return _sharingScope!; }
        set { Initialize(); _sharingScope!.Assign(value); }
    }
    private BicepValue<SharingScope>? _sharingScope;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// Array of IP configuration profiles which reference this subnet.
    /// </summary>
    public BicepList<NetworkIPConfigurationProfile> IPConfigurationProfiles 
    {
        get { Initialize(); return _iPConfigurationProfiles!; }
    }
    private BicepList<NetworkIPConfigurationProfile>? _iPConfigurationProfiles;

    /// <summary>
    /// An array of references to the network interface IP configurations using
    /// subnet.
    /// </summary>
    public BicepList<NetworkIPConfiguration> IPConfigurations 
    {
        get { Initialize(); return _iPConfigurations!; }
    }
    private BicepList<NetworkIPConfiguration>? _iPConfigurations;

    /// <summary>
    /// An array of references to private endpoints.
    /// </summary>
    public BicepList<PrivateEndpoint> PrivateEndpoints 
    {
        get { Initialize(); return _privateEndpoints!; }
    }
    private BicepList<PrivateEndpoint>? _privateEndpoints;

    /// <summary>
    /// The provisioning state of the subnet resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// A read-only string identifying the intention of use for this subnet
    /// based on delegations and other user-defined properties.
    /// </summary>
    public BicepValue<string> Purpose 
    {
        get { Initialize(); return _purpose!; }
    }
    private BicepValue<string>? _purpose;

    /// <summary>
    /// An array of references to the external resources using subnet.
    /// </summary>
    public BicepList<ResourceNavigationLink> ResourceNavigationLinks 
    {
        get { Initialize(); return _resourceNavigationLinks!; }
    }
    private BicepList<ResourceNavigationLink>? _resourceNavigationLinks;

    /// <summary>
    /// An array of references to services injecting into this subnet.
    /// </summary>
    public BicepList<ServiceAssociationLink> ServiceAssociationLinks 
    {
        get { Initialize(); return _serviceAssociationLinks!; }
    }
    private BicepList<ServiceAssociationLink>? _serviceAssociationLinks;

    /// <summary>
    /// Gets or sets a reference to the parent VirtualNetwork.
    /// </summary>
    public VirtualNetwork? Parent
    {
        get { Initialize(); return _parent!.Value; }
        set { Initialize(); _parent!.Value = value; }
    }
    private ResourceReference<VirtualNetwork>? _parent;

    /// <summary>
    /// Creates a new SubnetResource.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the SubnetResource resource.  This can
    /// be used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the SubnetResource.</param>
    public SubnetResource(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Network/virtualNetworks/subnets", resourceVersion ?? "2025-01-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of SubnetResource.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _addressPrefix = DefineProperty<string>("AddressPrefix", ["properties", "addressPrefix"]);
        _addressPrefixes = DefineListProperty<string>("AddressPrefixes", ["properties", "addressPrefixes"]);
        _applicationGatewayIPConfigurations = DefineListProperty<ApplicationGatewayIPConfiguration>("ApplicationGatewayIPConfigurations", ["properties", "applicationGatewayIPConfigurations"]);
        _defaultOutboundAccess = DefineProperty<bool>("DefaultOutboundAccess", ["properties", "defaultOutboundAccess"]);
        _delegations = DefineListProperty<ServiceDelegation>("Delegations", ["properties", "delegations"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _iPAllocations = DefineListProperty<WritableSubResource>("IPAllocations", ["properties", "ipAllocations"]);
        _ipamPoolPrefixAllocations = DefineListProperty<IpamPoolPrefixAllocation>("IpamPoolPrefixAllocations", ["properties", "ipamPoolPrefixAllocations"]);
        _natGatewayId = DefineProperty<ResourceIdentifier>("NatGatewayId", ["properties", "natGateway", "id"]);
        _networkSecurityGroup = DefineModelProperty<NetworkSecurityGroup>("NetworkSecurityGroup", ["properties", "networkSecurityGroup"], new NetworkSecurityGroup("networkSecurityGroup"));
        _privateEndpointNetworkPolicy = DefineProperty<VirtualNetworkPrivateEndpointNetworkPolicy>("PrivateEndpointNetworkPolicy", ["properties", "privateEndpointNetworkPolicies"]);
        _privateLinkServiceNetworkPolicy = DefineProperty<VirtualNetworkPrivateLinkServiceNetworkPolicy>("PrivateLinkServiceNetworkPolicy", ["properties", "privateLinkServiceNetworkPolicies"]);
        _routeTable = DefineModelProperty<RouteTable>("RouteTable", ["properties", "routeTable"], new RouteTable("routeTable"));
        _serviceEndpointPolicies = DefineListProperty<ServiceEndpointPolicy>("ServiceEndpointPolicies", ["properties", "serviceEndpointPolicies"]);
        _serviceEndpoints = DefineListProperty<ServiceEndpointProperties>("ServiceEndpoints", ["properties", "serviceEndpoints"]);
        _sharingScope = DefineProperty<SharingScope>("SharingScope", ["properties", "sharingScope"]);
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _iPConfigurationProfiles = DefineListProperty<NetworkIPConfigurationProfile>("IPConfigurationProfiles", ["properties", "ipConfigurationProfiles"], isOutput: true);
        _iPConfigurations = DefineListProperty<NetworkIPConfiguration>("IPConfigurations", ["properties", "ipConfigurations"], isOutput: true);
        _privateEndpoints = DefineListProperty<PrivateEndpoint>("PrivateEndpoints", ["properties", "privateEndpoints"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _purpose = DefineProperty<string>("Purpose", ["properties", "purpose"], isOutput: true);
        _resourceNavigationLinks = DefineListProperty<ResourceNavigationLink>("ResourceNavigationLinks", ["properties", "resourceNavigationLinks"], isOutput: true);
        _serviceAssociationLinks = DefineListProperty<ServiceAssociationLink>("ServiceAssociationLinks", ["properties", "serviceAssociationLinks"], isOutput: true);
        _parent = DefineResource<VirtualNetwork>("Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported SubnetResource resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-01-01.
        /// </summary>
        public static readonly string V2025_01_01 = "2025-01-01";

        /// <summary>
        /// 2024-10-01.
        /// </summary>
        public static readonly string V2024_10_01 = "2024-10-01";

        /// <summary>
        /// 2024-07-01.
        /// </summary>
        public static readonly string V2024_07_01 = "2024-07-01";

        /// <summary>
        /// 2024-05-01.
        /// </summary>
        public static readonly string V2024_05_01 = "2024-05-01";

        /// <summary>
        /// 2024-03-01.
        /// </summary>
        public static readonly string V2024_03_01 = "2024-03-01";

        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2023-09-01.
        /// </summary>
        public static readonly string V2023_09_01 = "2023-09-01";

        /// <summary>
        /// 2023-06-01.
        /// </summary>
        public static readonly string V2023_06_01 = "2023-06-01";

        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2023-04-01.
        /// </summary>
        public static readonly string V2023_04_01 = "2023-04-01";

        /// <summary>
        /// 2023-02-01.
        /// </summary>
        public static readonly string V2023_02_01 = "2023-02-01";

        /// <summary>
        /// 2022-11-01.
        /// </summary>
        public static readonly string V2022_11_01 = "2022-11-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-07-01.
        /// </summary>
        public static readonly string V2022_07_01 = "2022-07-01";

        /// <summary>
        /// 2022-05-01.
        /// </summary>
        public static readonly string V2022_05_01 = "2022-05-01";

        /// <summary>
        /// 2022-01-01.
        /// </summary>
        public static readonly string V2022_01_01 = "2022-01-01";

        /// <summary>
        /// 2021-12-01.
        /// </summary>
        public static readonly string V2021_12_01 = "2021-12-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-06-01.
        /// </summary>
        public static readonly string V2021_06_01 = "2021-06-01";

        /// <summary>
        /// 2021-05-01.
        /// </summary>
        public static readonly string V2021_05_01 = "2021-05-01";

        /// <summary>
        /// 2021-04-01.
        /// </summary>
        public static readonly string V2021_04_01 = "2021-04-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2020-11-01.
        /// </summary>
        public static readonly string V2020_11_01 = "2020-11-01";

        /// <summary>
        /// 2020-08-01.
        /// </summary>
        public static readonly string V2020_08_01 = "2020-08-01";

        /// <summary>
        /// 2020-07-01.
        /// </summary>
        public static readonly string V2020_07_01 = "2020-07-01";

        /// <summary>
        /// 2020-06-01.
        /// </summary>
        public static readonly string V2020_06_01 = "2020-06-01";

        /// <summary>
        /// 2020-05-01.
        /// </summary>
        public static readonly string V2020_05_01 = "2020-05-01";

        /// <summary>
        /// 2020-04-01.
        /// </summary>
        public static readonly string V2020_04_01 = "2020-04-01";

        /// <summary>
        /// 2020-03-01.
        /// </summary>
        public static readonly string V2020_03_01 = "2020-03-01";

        /// <summary>
        /// 2020-01-01.
        /// </summary>
        public static readonly string V2020_01_01 = "2020-01-01";

        /// <summary>
        /// 2019-12-01.
        /// </summary>
        public static readonly string V2019_12_01 = "2019-12-01";

        /// <summary>
        /// 2019-11-01.
        /// </summary>
        public static readonly string V2019_11_01 = "2019-11-01";

        /// <summary>
        /// 2019-09-01.
        /// </summary>
        public static readonly string V2019_09_01 = "2019-09-01";

        /// <summary>
        /// 2019-08-01.
        /// </summary>
        public static readonly string V2019_08_01 = "2019-08-01";

        /// <summary>
        /// 2019-07-01.
        /// </summary>
        public static readonly string V2019_07_01 = "2019-07-01";

        /// <summary>
        /// 2019-06-01.
        /// </summary>
        public static readonly string V2019_06_01 = "2019-06-01";

        /// <summary>
        /// 2019-04-01.
        /// </summary>
        public static readonly string V2019_04_01 = "2019-04-01";

        /// <summary>
        /// 2019-02-01.
        /// </summary>
        public static readonly string V2019_02_01 = "2019-02-01";

        /// <summary>
        /// 2018-12-01.
        /// </summary>
        public static readonly string V2018_12_01 = "2018-12-01";

        /// <summary>
        /// 2018-11-01.
        /// </summary>
        public static readonly string V2018_11_01 = "2018-11-01";

        /// <summary>
        /// 2018-10-01.
        /// </summary>
        public static readonly string V2018_10_01 = "2018-10-01";

        /// <summary>
        /// 2018-08-01.
        /// </summary>
        public static readonly string V2018_08_01 = "2018-08-01";

        /// <summary>
        /// 2018-07-01.
        /// </summary>
        public static readonly string V2018_07_01 = "2018-07-01";

        /// <summary>
        /// 2018-06-01.
        /// </summary>
        public static readonly string V2018_06_01 = "2018-06-01";

        /// <summary>
        /// 2018-05-01.
        /// </summary>
        public static readonly string V2018_05_01 = "2018-05-01";

        /// <summary>
        /// 2018-04-01.
        /// </summary>
        public static readonly string V2018_04_01 = "2018-04-01";

        /// <summary>
        /// 2018-03-01.
        /// </summary>
        public static readonly string V2018_03_01 = "2018-03-01";

        /// <summary>
        /// 2018-02-01.
        /// </summary>
        public static readonly string V2018_02_01 = "2018-02-01";

        /// <summary>
        /// 2018-01-01.
        /// </summary>
        public static readonly string V2018_01_01 = "2018-01-01";

        /// <summary>
        /// 2017-11-01.
        /// </summary>
        public static readonly string V2017_11_01 = "2017-11-01";

        /// <summary>
        /// 2017-10-01.
        /// </summary>
        public static readonly string V2017_10_01 = "2017-10-01";

        /// <summary>
        /// 2017-09-01.
        /// </summary>
        public static readonly string V2017_09_01 = "2017-09-01";

        /// <summary>
        /// 2017-08-01.
        /// </summary>
        public static readonly string V2017_08_01 = "2017-08-01";

        /// <summary>
        /// 2017-06-01.
        /// </summary>
        public static readonly string V2017_06_01 = "2017-06-01";

        /// <summary>
        /// 2017-04-01.
        /// </summary>
        public static readonly string V2017_04_01 = "2017-04-01";

        /// <summary>
        /// 2017-03-01.
        /// </summary>
        public static readonly string V2017_03_01 = "2017-03-01";

        /// <summary>
        /// 2016-12-01.
        /// </summary>
        public static readonly string V2016_12_01 = "2016-12-01";

        /// <summary>
        /// 2016-11-01.
        /// </summary>
        public static readonly string V2016_11_01 = "2016-11-01";

        /// <summary>
        /// 2016-10-01.
        /// </summary>
        public static readonly string V2016_10_01 = "2016-10-01";

        /// <summary>
        /// 2016-09-01.
        /// </summary>
        public static readonly string V2016_09_01 = "2016-09-01";

        /// <summary>
        /// 2016-08-01.
        /// </summary>
        public static readonly string V2016_08_01 = "2016-08-01";

        /// <summary>
        /// 2016-07-01.
        /// </summary>
        public static readonly string V2016_07_01 = "2016-07-01";

        /// <summary>
        /// 2016-06-01.
        /// </summary>
        public static readonly string V2016_06_01 = "2016-06-01";

        /// <summary>
        /// 2016-03-30.
        /// </summary>
        public static readonly string V2016_03_30 = "2016-03-30";

        /// <summary>
        /// 2015-06-15.
        /// </summary>
        public static readonly string V2015_06_15 = "2015-06-15";
    }

    /// <summary>
    /// Creates a reference to an existing SubnetResource.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the SubnetResource resource.  This can
    /// be used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the SubnetResource.</param>
    /// <returns>The existing SubnetResource resource.</returns>
    public static SubnetResource FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this SubnetResource resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 80, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen | ResourceNameCharacters.Underscore | ResourceNameCharacters.Period);
}
