// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.Network;

/// <summary>
/// VirtualNetworkPeering.
/// </summary>
public partial class VirtualNetworkPeering : ProvisionableResource
{
    /// <summary>
    /// Gets or sets the Name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Whether the forwarded traffic from the VMs in the local virtual network
    /// will be allowed/disallowed in remote virtual network.
    /// </summary>
    public BicepValue<bool> AllowForwardedTraffic 
    {
        get { Initialize(); return _allowForwardedTraffic!; }
        set { Initialize(); _allowForwardedTraffic!.Assign(value); }
    }
    private BicepValue<bool>? _allowForwardedTraffic;

    /// <summary>
    /// If gateway links can be used in remote virtual networking to link to
    /// this virtual network.
    /// </summary>
    public BicepValue<bool> AllowGatewayTransit 
    {
        get { Initialize(); return _allowGatewayTransit!; }
        set { Initialize(); _allowGatewayTransit!.Assign(value); }
    }
    private BicepValue<bool>? _allowGatewayTransit;

    /// <summary>
    /// Whether the VMs in the local virtual network space would be able to
    /// access the VMs in remote virtual network space.
    /// </summary>
    public BicepValue<bool> AllowVirtualNetworkAccess 
    {
        get { Initialize(); return _allowVirtualNetworkAccess!; }
        set { Initialize(); _allowVirtualNetworkAccess!.Assign(value); }
    }
    private BicepValue<bool>? _allowVirtualNetworkAccess;

    /// <summary>
    /// Whether complete virtual network address space is peered.
    /// </summary>
    public BicepValue<bool> AreCompleteVnetsPeered 
    {
        get { Initialize(); return _areCompleteVnetsPeered!; }
        set { Initialize(); _areCompleteVnetsPeered!.Assign(value); }
    }
    private BicepValue<bool>? _areCompleteVnetsPeered;

    /// <summary>
    /// If we need to verify the provisioning state of the remote gateway.
    /// </summary>
    public BicepValue<bool> DoNotVerifyRemoteGateways 
    {
        get { Initialize(); return _doNotVerifyRemoteGateways!; }
        set { Initialize(); _doNotVerifyRemoteGateways!.Assign(value); }
    }
    private BicepValue<bool>? _doNotVerifyRemoteGateways;

    /// <summary>
    /// Whether only Ipv6 address space is peered for subnet peering.
    /// </summary>
    public BicepValue<bool> EnableOnlyIPv6Peering 
    {
        get { Initialize(); return _enableOnlyIPv6Peering!; }
        set { Initialize(); _enableOnlyIPv6Peering!.Assign(value); }
    }
    private BicepValue<bool>? _enableOnlyIPv6Peering;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// The local address space of the local virtual network that is peered.
    /// </summary>
    public VirtualNetworkAddressSpace LocalAddressSpace 
    {
        get { Initialize(); return _localAddressSpace!; }
        set { Initialize(); AssignOrReplace(ref _localAddressSpace, value); }
    }
    private VirtualNetworkAddressSpace? _localAddressSpace;

    /// <summary>
    /// List of local subnet names that are subnet peered with remote virtual
    /// network.
    /// </summary>
    public BicepList<string> LocalSubnetNames 
    {
        get { Initialize(); return _localSubnetNames!; }
        set { Initialize(); _localSubnetNames!.Assign(value); }
    }
    private BicepList<string>? _localSubnetNames;

    /// <summary>
    /// The current local address space of the local virtual network that is
    /// peered.
    /// </summary>
    public VirtualNetworkAddressSpace LocalVirtualNetworkAddressSpace 
    {
        get { Initialize(); return _localVirtualNetworkAddressSpace!; }
        set { Initialize(); AssignOrReplace(ref _localVirtualNetworkAddressSpace, value); }
    }
    private VirtualNetworkAddressSpace? _localVirtualNetworkAddressSpace;

    /// <summary>
    /// The status of the virtual network peering.
    /// </summary>
    public BicepValue<VirtualNetworkPeeringState> PeeringState 
    {
        get { Initialize(); return _peeringState!; }
        set { Initialize(); _peeringState!.Assign(value); }
    }
    private BicepValue<VirtualNetworkPeeringState>? _peeringState;

    /// <summary>
    /// The peering sync status of the virtual network peering.
    /// </summary>
    public BicepValue<VirtualNetworkPeeringLevel> PeeringSyncLevel 
    {
        get { Initialize(); return _peeringSyncLevel!; }
        set { Initialize(); _peeringSyncLevel!.Assign(value); }
    }
    private BicepValue<VirtualNetworkPeeringLevel>? _peeringSyncLevel;

    /// <summary>
    /// The reference to the address space peered with the remote virtual
    /// network.
    /// </summary>
    public VirtualNetworkAddressSpace RemoteAddressSpace 
    {
        get { Initialize(); return _remoteAddressSpace!; }
        set { Initialize(); AssignOrReplace(ref _remoteAddressSpace, value); }
    }
    private VirtualNetworkAddressSpace? _remoteAddressSpace;

    /// <summary>
    /// The reference to the remote virtual network&apos;s Bgp Communities.
    /// </summary>
    public VirtualNetworkBgpCommunities RemoteBgpCommunities 
    {
        get { Initialize(); return _remoteBgpCommunities!; }
        set { Initialize(); AssignOrReplace(ref _remoteBgpCommunities, value); }
    }
    private VirtualNetworkBgpCommunities? _remoteBgpCommunities;

    /// <summary>
    /// List of remote subnet names from remote virtual network that are subnet
    /// peered.
    /// </summary>
    public BicepList<string> RemoteSubnetNames 
    {
        get { Initialize(); return _remoteSubnetNames!; }
        set { Initialize(); _remoteSubnetNames!.Assign(value); }
    }
    private BicepList<string>? _remoteSubnetNames;

    /// <summary>
    /// The reference to the current address space of the remote virtual
    /// network.
    /// </summary>
    public VirtualNetworkAddressSpace RemoteVirtualNetworkAddressSpace 
    {
        get { Initialize(); return _remoteVirtualNetworkAddressSpace!; }
        set { Initialize(); AssignOrReplace(ref _remoteVirtualNetworkAddressSpace, value); }
    }
    private VirtualNetworkAddressSpace? _remoteVirtualNetworkAddressSpace;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> RemoteVirtualNetworkId 
    {
        get { Initialize(); return _remoteVirtualNetworkId!; }
        set { Initialize(); _remoteVirtualNetworkId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _remoteVirtualNetworkId;

    /// <summary>
    /// If remote gateways can be used on this virtual network. If the flag is
    /// set to true, and allowGatewayTransit on remote peering is also true,
    /// virtual network will use gateways of remote virtual network for
    /// transit. Only one peering can have this flag set to true. This flag
    /// cannot be set if virtual network already has a gateway.
    /// </summary>
    public BicepValue<bool> UseRemoteGateways 
    {
        get { Initialize(); return _useRemoteGateways!; }
        set { Initialize(); _useRemoteGateways!.Assign(value); }
    }
    private BicepValue<bool>? _useRemoteGateways;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// The provisioning state of the virtual network peering resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// The reference to the remote virtual network&apos;s encryption.
    /// </summary>
    public VirtualNetworkEncryption RemoteVirtualNetworkEncryption 
    {
        get { Initialize(); return _remoteVirtualNetworkEncryption!; }
    }
    private VirtualNetworkEncryption? _remoteVirtualNetworkEncryption;

    /// <summary>
    /// The resourceGuid property of the Virtual Network peering resource.
    /// </summary>
    public BicepValue<Guid> ResourceGuid 
    {
        get { Initialize(); return _resourceGuid!; }
    }
    private BicepValue<Guid>? _resourceGuid;

    /// <summary>
    /// Gets or sets a reference to the parent VirtualNetwork.
    /// </summary>
    public VirtualNetwork? Parent
    {
        get { Initialize(); return _parent!.Value; }
        set { Initialize(); _parent!.Value = value; }
    }
    private ResourceReference<VirtualNetwork>? _parent;

    /// <summary>
    /// Creates a new VirtualNetworkPeering.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the VirtualNetworkPeering resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the VirtualNetworkPeering.</param>
    public VirtualNetworkPeering(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Network/virtualNetworks/virtualNetworkPeerings", resourceVersion ?? "2025-01-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of VirtualNetworkPeering.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _allowForwardedTraffic = DefineProperty<bool>("AllowForwardedTraffic", ["properties", "allowForwardedTraffic"]);
        _allowGatewayTransit = DefineProperty<bool>("AllowGatewayTransit", ["properties", "allowGatewayTransit"]);
        _allowVirtualNetworkAccess = DefineProperty<bool>("AllowVirtualNetworkAccess", ["properties", "allowVirtualNetworkAccess"]);
        _areCompleteVnetsPeered = DefineProperty<bool>("AreCompleteVnetsPeered", ["properties", "peerCompleteVnets"]);
        _doNotVerifyRemoteGateways = DefineProperty<bool>("DoNotVerifyRemoteGateways", ["properties", "doNotVerifyRemoteGateways"]);
        _enableOnlyIPv6Peering = DefineProperty<bool>("EnableOnlyIPv6Peering", ["properties", "enableOnlyIPv6Peering"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _localAddressSpace = DefineModelProperty<VirtualNetworkAddressSpace>("LocalAddressSpace", ["properties", "localAddressSpace"]);
        _localSubnetNames = DefineListProperty<string>("LocalSubnetNames", ["properties", "localSubnetNames"]);
        _localVirtualNetworkAddressSpace = DefineModelProperty<VirtualNetworkAddressSpace>("LocalVirtualNetworkAddressSpace", ["properties", "localVirtualNetworkAddressSpace"]);
        _peeringState = DefineProperty<VirtualNetworkPeeringState>("PeeringState", ["properties", "peeringState"]);
        _peeringSyncLevel = DefineProperty<VirtualNetworkPeeringLevel>("PeeringSyncLevel", ["properties", "peeringSyncLevel"]);
        _remoteAddressSpace = DefineModelProperty<VirtualNetworkAddressSpace>("RemoteAddressSpace", ["properties", "remoteAddressSpace"]);
        _remoteBgpCommunities = DefineModelProperty<VirtualNetworkBgpCommunities>("RemoteBgpCommunities", ["properties", "remoteBgpCommunities"]);
        _remoteSubnetNames = DefineListProperty<string>("RemoteSubnetNames", ["properties", "remoteSubnetNames"]);
        _remoteVirtualNetworkAddressSpace = DefineModelProperty<VirtualNetworkAddressSpace>("RemoteVirtualNetworkAddressSpace", ["properties", "remoteVirtualNetworkAddressSpace"]);
        _remoteVirtualNetworkId = DefineProperty<ResourceIdentifier>("RemoteVirtualNetworkId", ["properties", "remoteVirtualNetwork", "id"]);
        _useRemoteGateways = DefineProperty<bool>("UseRemoteGateways", ["properties", "useRemoteGateways"]);
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _remoteVirtualNetworkEncryption = DefineModelProperty<VirtualNetworkEncryption>("RemoteVirtualNetworkEncryption", ["properties", "remoteVirtualNetworkEncryption"], isOutput: true);
        _resourceGuid = DefineProperty<Guid>("ResourceGuid", ["properties", "resourceGuid"], isOutput: true);
        _parent = DefineResource<VirtualNetwork>("Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported VirtualNetworkPeering resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-01-01.
        /// </summary>
        public static readonly string V2025_01_01 = "2025-01-01";

        /// <summary>
        /// 2024-10-01.
        /// </summary>
        public static readonly string V2024_10_01 = "2024-10-01";

        /// <summary>
        /// 2024-07-01.
        /// </summary>
        public static readonly string V2024_07_01 = "2024-07-01";

        /// <summary>
        /// 2024-05-01.
        /// </summary>
        public static readonly string V2024_05_01 = "2024-05-01";

        /// <summary>
        /// 2024-03-01.
        /// </summary>
        public static readonly string V2024_03_01 = "2024-03-01";

        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2023-09-01.
        /// </summary>
        public static readonly string V2023_09_01 = "2023-09-01";

        /// <summary>
        /// 2023-06-01.
        /// </summary>
        public static readonly string V2023_06_01 = "2023-06-01";

        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2023-04-01.
        /// </summary>
        public static readonly string V2023_04_01 = "2023-04-01";

        /// <summary>
        /// 2023-02-01.
        /// </summary>
        public static readonly string V2023_02_01 = "2023-02-01";

        /// <summary>
        /// 2022-11-01.
        /// </summary>
        public static readonly string V2022_11_01 = "2022-11-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-07-01.
        /// </summary>
        public static readonly string V2022_07_01 = "2022-07-01";

        /// <summary>
        /// 2022-05-01.
        /// </summary>
        public static readonly string V2022_05_01 = "2022-05-01";

        /// <summary>
        /// 2022-01-01.
        /// </summary>
        public static readonly string V2022_01_01 = "2022-01-01";

        /// <summary>
        /// 2021-12-01.
        /// </summary>
        public static readonly string V2021_12_01 = "2021-12-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-06-01.
        /// </summary>
        public static readonly string V2021_06_01 = "2021-06-01";

        /// <summary>
        /// 2021-05-01.
        /// </summary>
        public static readonly string V2021_05_01 = "2021-05-01";

        /// <summary>
        /// 2021-04-01.
        /// </summary>
        public static readonly string V2021_04_01 = "2021-04-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2020-11-01.
        /// </summary>
        public static readonly string V2020_11_01 = "2020-11-01";

        /// <summary>
        /// 2020-08-01.
        /// </summary>
        public static readonly string V2020_08_01 = "2020-08-01";

        /// <summary>
        /// 2020-07-01.
        /// </summary>
        public static readonly string V2020_07_01 = "2020-07-01";

        /// <summary>
        /// 2020-06-01.
        /// </summary>
        public static readonly string V2020_06_01 = "2020-06-01";

        /// <summary>
        /// 2020-05-01.
        /// </summary>
        public static readonly string V2020_05_01 = "2020-05-01";

        /// <summary>
        /// 2020-04-01.
        /// </summary>
        public static readonly string V2020_04_01 = "2020-04-01";

        /// <summary>
        /// 2020-03-01.
        /// </summary>
        public static readonly string V2020_03_01 = "2020-03-01";

        /// <summary>
        /// 2020-01-01.
        /// </summary>
        public static readonly string V2020_01_01 = "2020-01-01";

        /// <summary>
        /// 2019-12-01.
        /// </summary>
        public static readonly string V2019_12_01 = "2019-12-01";

        /// <summary>
        /// 2019-11-01.
        /// </summary>
        public static readonly string V2019_11_01 = "2019-11-01";

        /// <summary>
        /// 2019-09-01.
        /// </summary>
        public static readonly string V2019_09_01 = "2019-09-01";

        /// <summary>
        /// 2019-08-01.
        /// </summary>
        public static readonly string V2019_08_01 = "2019-08-01";

        /// <summary>
        /// 2019-07-01.
        /// </summary>
        public static readonly string V2019_07_01 = "2019-07-01";

        /// <summary>
        /// 2019-06-01.
        /// </summary>
        public static readonly string V2019_06_01 = "2019-06-01";

        /// <summary>
        /// 2019-04-01.
        /// </summary>
        public static readonly string V2019_04_01 = "2019-04-01";

        /// <summary>
        /// 2019-02-01.
        /// </summary>
        public static readonly string V2019_02_01 = "2019-02-01";

        /// <summary>
        /// 2018-12-01.
        /// </summary>
        public static readonly string V2018_12_01 = "2018-12-01";

        /// <summary>
        /// 2018-11-01.
        /// </summary>
        public static readonly string V2018_11_01 = "2018-11-01";

        /// <summary>
        /// 2018-10-01.
        /// </summary>
        public static readonly string V2018_10_01 = "2018-10-01";

        /// <summary>
        /// 2018-08-01.
        /// </summary>
        public static readonly string V2018_08_01 = "2018-08-01";

        /// <summary>
        /// 2018-07-01.
        /// </summary>
        public static readonly string V2018_07_01 = "2018-07-01";

        /// <summary>
        /// 2018-06-01.
        /// </summary>
        public static readonly string V2018_06_01 = "2018-06-01";

        /// <summary>
        /// 2018-05-01.
        /// </summary>
        public static readonly string V2018_05_01 = "2018-05-01";

        /// <summary>
        /// 2018-04-01.
        /// </summary>
        public static readonly string V2018_04_01 = "2018-04-01";

        /// <summary>
        /// 2018-03-01.
        /// </summary>
        public static readonly string V2018_03_01 = "2018-03-01";

        /// <summary>
        /// 2018-02-01.
        /// </summary>
        public static readonly string V2018_02_01 = "2018-02-01";

        /// <summary>
        /// 2018-01-01.
        /// </summary>
        public static readonly string V2018_01_01 = "2018-01-01";

        /// <summary>
        /// 2017-11-01.
        /// </summary>
        public static readonly string V2017_11_01 = "2017-11-01";

        /// <summary>
        /// 2017-10-01.
        /// </summary>
        public static readonly string V2017_10_01 = "2017-10-01";

        /// <summary>
        /// 2017-09-01.
        /// </summary>
        public static readonly string V2017_09_01 = "2017-09-01";

        /// <summary>
        /// 2017-08-01.
        /// </summary>
        public static readonly string V2017_08_01 = "2017-08-01";

        /// <summary>
        /// 2017-06-01.
        /// </summary>
        public static readonly string V2017_06_01 = "2017-06-01";

        /// <summary>
        /// 2017-04-01.
        /// </summary>
        public static readonly string V2017_04_01 = "2017-04-01";

        /// <summary>
        /// 2017-03-01.
        /// </summary>
        public static readonly string V2017_03_01 = "2017-03-01";

        /// <summary>
        /// 2016-12-01.
        /// </summary>
        public static readonly string V2016_12_01 = "2016-12-01";

        /// <summary>
        /// 2016-11-01.
        /// </summary>
        public static readonly string V2016_11_01 = "2016-11-01";

        /// <summary>
        /// 2016-10-01.
        /// </summary>
        public static readonly string V2016_10_01 = "2016-10-01";

        /// <summary>
        /// 2016-09-01.
        /// </summary>
        public static readonly string V2016_09_01 = "2016-09-01";

        /// <summary>
        /// 2016-08-01.
        /// </summary>
        public static readonly string V2016_08_01 = "2016-08-01";

        /// <summary>
        /// 2016-07-01.
        /// </summary>
        public static readonly string V2016_07_01 = "2016-07-01";

        /// <summary>
        /// 2016-06-01.
        /// </summary>
        public static readonly string V2016_06_01 = "2016-06-01";

        /// <summary>
        /// 2016-03-30.
        /// </summary>
        public static readonly string V2016_03_30 = "2016-03-30";

        /// <summary>
        /// 2015-06-15.
        /// </summary>
        public static readonly string V2015_06_15 = "2015-06-15";
    }

    /// <summary>
    /// Creates a reference to an existing VirtualNetworkPeering.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the VirtualNetworkPeering resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the VirtualNetworkPeering.</param>
    /// <returns>The existing VirtualNetworkPeering resource.</returns>
    public static VirtualNetworkPeering FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this VirtualNetworkPeering resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 80, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen | ResourceNameCharacters.Underscore | ResourceNameCharacters.Period);
}
