// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// DNS settings of a network interface.
/// </summary>
public partial class NetworkInterfaceDnsSettings : ProvisionableConstruct
{
    /// <summary>
    /// List of DNS servers IP addresses. Use &apos;AzureProvidedDNS&apos; to
    /// switch to azure provided DNS resolution. &apos;AzureProvidedDNS&apos;
    /// value cannot be combined with other IPs, it must be the only value in
    /// dnsServers collection.
    /// </summary>
    public BicepList<string> DnsServers 
    {
        get { Initialize(); return _dnsServers!; }
        set { Initialize(); _dnsServers!.Assign(value); }
    }
    private BicepList<string>? _dnsServers;

    /// <summary>
    /// If the VM that uses this NIC is part of an Availability Set, then this
    /// list will have the union of all DNS servers from all NICs that are
    /// part of the Availability Set. This property is what is configured on
    /// each of those VMs.
    /// </summary>
    public BicepList<string> AppliedDnsServers 
    {
        get { Initialize(); return _appliedDnsServers!; }
    }
    private BicepList<string>? _appliedDnsServers;

    /// <summary>
    /// Relative DNS name for this NIC used for internal communications between
    /// VMs in the same virtual network.
    /// </summary>
    public BicepValue<string> InternalDnsNameLabel 
    {
        get { Initialize(); return _internalDnsNameLabel!; }
        set { Initialize(); _internalDnsNameLabel!.Assign(value); }
    }
    private BicepValue<string>? _internalDnsNameLabel;

    /// <summary>
    /// Fully qualified DNS name supporting internal communications between VMs
    /// in the same virtual network.
    /// </summary>
    public BicepValue<string> InternalFqdn 
    {
        get { Initialize(); return _internalFqdn!; }
    }
    private BicepValue<string>? _internalFqdn;

    /// <summary>
    /// Even if internalDnsNameLabel is not specified, a DNS entry is created
    /// for the primary NIC of the VM. This DNS name can be constructed by
    /// concatenating the VM name with the value of internalDomainNameSuffix.
    /// </summary>
    public BicepValue<string> InternalDomainNameSuffix 
    {
        get { Initialize(); return _internalDomainNameSuffix!; }
    }
    private BicepValue<string>? _internalDomainNameSuffix;

    /// <summary>
    /// Creates a new NetworkInterfaceDnsSettings.
    /// </summary>
    public NetworkInterfaceDnsSettings()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of NetworkInterfaceDnsSettings.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _dnsServers = DefineListProperty<string>("DnsServers", ["DnsServers"]);
        _appliedDnsServers = DefineListProperty<string>("AppliedDnsServers", ["AppliedDnsServers"], isOutput: true);
        _internalDnsNameLabel = DefineProperty<string>("InternalDnsNameLabel", ["InternalDnsNameLabel"]);
        _internalFqdn = DefineProperty<string>("InternalFqdn", ["InternalFqdn"], isOutput: true);
        _internalDomainNameSuffix = DefineProperty<string>("InternalDomainNameSuffix", ["InternalDomainNameSuffix"], isOutput: true);
    }
}
