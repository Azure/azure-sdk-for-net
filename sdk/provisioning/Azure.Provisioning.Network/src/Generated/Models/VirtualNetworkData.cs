// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the VirtualNetwork data model.             Virtual
/// Network resource.
/// </summary>
public partial class VirtualNetworkData : ProvisionableConstruct
{
    /// <summary>
    /// A list of address blocks reserved for this virtual network in CIDR
    /// notation.
    /// </summary>
    public BicepList<string> AddressPrefixes 
    {
        get { Initialize(); return _addressPrefixes!; }
        set { Initialize(); _addressPrefixes!.Assign(value); }
    }
    private BicepList<string>? _addressPrefixes;

    /// <summary>
    /// The extended location of the virtual network.
    /// </summary>
    public ExtendedAzureLocation ExtendedLocation 
    {
        get { Initialize(); return _extendedLocation!; }
        set { Initialize(); AssignOrReplace(ref _extendedLocation, value); }
    }
    private ExtendedAzureLocation? _extendedLocation;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// The AddressSpace that contains an array of IP address ranges that can
    /// be used by subnets.
    /// </summary>
    public VirtualNetworkAddressSpace AddressSpace 
    {
        get { Initialize(); return _addressSpace!; }
        set { Initialize(); AssignOrReplace(ref _addressSpace, value); }
    }
    private VirtualNetworkAddressSpace? _addressSpace;

    /// <summary>
    /// The list of DNS servers IP addresses.
    /// </summary>
    public BicepList<string> DhcpOptionsDnsServers 
    {
        get { Initialize(); return _dhcpOptionsDnsServers!; }
        set { Initialize(); _dhcpOptionsDnsServers!.Assign(value); }
    }
    private BicepList<string>? _dhcpOptionsDnsServers;

    /// <summary>
    /// The FlowTimeout value (in minutes) for the Virtual Network.
    /// </summary>
    public BicepValue<int> FlowTimeoutInMinutes 
    {
        get { Initialize(); return _flowTimeoutInMinutes!; }
        set { Initialize(); _flowTimeoutInMinutes!.Assign(value); }
    }
    private BicepValue<int>? _flowTimeoutInMinutes;

    /// <summary>
    /// A list of subnets in a Virtual Network.
    /// </summary>
    public BicepList<SubnetData> Subnets 
    {
        get { Initialize(); return _subnets!; }
        set { Initialize(); _subnets!.Assign(value); }
    }
    private BicepList<SubnetData>? _subnets;

    /// <summary>
    /// A list of peerings in a Virtual Network.
    /// </summary>
    public BicepList<VirtualNetworkPeeringData> VirtualNetworkPeerings 
    {
        get { Initialize(); return _virtualNetworkPeerings!; }
        set { Initialize(); _virtualNetworkPeerings!.Assign(value); }
    }
    private BicepList<VirtualNetworkPeeringData>? _virtualNetworkPeerings;

    /// <summary>
    /// The resourceGuid property of the Virtual Network resource.
    /// </summary>
    public BicepValue<Guid> ResourceGuid 
    {
        get { Initialize(); return _resourceGuid!; }
    }
    private BicepValue<Guid>? _resourceGuid;

    /// <summary>
    /// The provisioning state of the virtual network resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Indicates if DDoS protection is enabled for all the protected resources
    /// in the virtual network. It requires a DDoS protection plan associated
    /// with the resource.
    /// </summary>
    public BicepValue<bool> EnableDdosProtection 
    {
        get { Initialize(); return _enableDdosProtection!; }
        set { Initialize(); _enableDdosProtection!.Assign(value); }
    }
    private BicepValue<bool>? _enableDdosProtection;

    /// <summary>
    /// Indicates if VM protection is enabled for all the subnets in the
    /// virtual network.
    /// </summary>
    public BicepValue<bool> EnableVmProtection 
    {
        get { Initialize(); return _enableVmProtection!; }
        set { Initialize(); _enableVmProtection!.Assign(value); }
    }
    private BicepValue<bool>? _enableVmProtection;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> DdosProtectionPlanId 
    {
        get { Initialize(); return _ddosProtectionPlanId!; }
        set { Initialize(); _ddosProtectionPlanId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _ddosProtectionPlanId;

    /// <summary>
    /// Bgp Communities sent over ExpressRoute with each route corresponding to
    /// a prefix in this VNET.
    /// </summary>
    public VirtualNetworkBgpCommunities BgpCommunities 
    {
        get { Initialize(); return _bgpCommunities!; }
        set { Initialize(); AssignOrReplace(ref _bgpCommunities, value); }
    }
    private VirtualNetworkBgpCommunities? _bgpCommunities;

    /// <summary>
    /// Indicates if encryption is enabled on virtual network and if VM without
    /// encryption is allowed in encrypted VNet.
    /// </summary>
    public VirtualNetworkEncryption Encryption 
    {
        get { Initialize(); return _encryption!; }
        set { Initialize(); AssignOrReplace(ref _encryption, value); }
    }
    private VirtualNetworkEncryption? _encryption;

    /// <summary>
    /// Array of IpAllocation which reference this VNET.
    /// </summary>
    public BicepList<WritableSubResource> IPAllocations 
    {
        get { Initialize(); return _iPAllocations!; }
        set { Initialize(); _iPAllocations!.Assign(value); }
    }
    private BicepList<WritableSubResource>? _iPAllocations;

    /// <summary>
    /// A collection of references to flow log resources.
    /// </summary>
    public BicepList<FlowLogData> FlowLogs 
    {
        get { Initialize(); return _flowLogs!; }
    }
    private BicepList<FlowLogData>? _flowLogs;

    /// <summary>
    /// Private Endpoint VNet Policies.
    /// </summary>
    public BicepValue<PrivateEndpointVnetPolicy> PrivateEndpointVnetPolicy 
    {
        get { Initialize(); return _privateEndpointVnetPolicy!; }
        set { Initialize(); _privateEndpointVnetPolicy!.Assign(value); }
    }
    private BicepValue<PrivateEndpointVnetPolicy>? _privateEndpointVnetPolicy;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> DefaultPublicNatGatewayId 
    {
        get { Initialize(); return _defaultPublicNatGatewayId!; }
    }
    private BicepValue<ResourceIdentifier>? _defaultPublicNatGatewayId;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Creates a new VirtualNetworkData.
    /// </summary>
    public VirtualNetworkData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of VirtualNetworkData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _addressPrefixes = DefineListProperty<string>("AddressPrefixes", ["AddressPrefixes"]);
        _extendedLocation = DefineModelProperty<ExtendedAzureLocation>("ExtendedLocation", ["ExtendedLocation"]);
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _addressSpace = DefineModelProperty<VirtualNetworkAddressSpace>("AddressSpace", ["AddressSpace"]);
        _dhcpOptionsDnsServers = DefineListProperty<string>("DhcpOptionsDnsServers", ["DhcpOptionsDnsServers"]);
        _flowTimeoutInMinutes = DefineProperty<int>("FlowTimeoutInMinutes", ["FlowTimeoutInMinutes"]);
        _subnets = DefineListProperty<SubnetData>("Subnets", ["Subnets"]);
        _virtualNetworkPeerings = DefineListProperty<VirtualNetworkPeeringData>("VirtualNetworkPeerings", ["VirtualNetworkPeerings"]);
        _resourceGuid = DefineProperty<Guid>("ResourceGuid", ["ResourceGuid"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _enableDdosProtection = DefineProperty<bool>("EnableDdosProtection", ["EnableDdosProtection"]);
        _enableVmProtection = DefineProperty<bool>("EnableVmProtection", ["EnableVmProtection"]);
        _ddosProtectionPlanId = DefineProperty<ResourceIdentifier>("DdosProtectionPlanId", ["DdosProtectionPlanId"]);
        _bgpCommunities = DefineModelProperty<VirtualNetworkBgpCommunities>("BgpCommunities", ["BgpCommunities"]);
        _encryption = DefineModelProperty<VirtualNetworkEncryption>("Encryption", ["Encryption"]);
        _iPAllocations = DefineListProperty<WritableSubResource>("IPAllocations", ["IPAllocations"]);
        _flowLogs = DefineListProperty<FlowLogData>("FlowLogs", ["FlowLogs"], isOutput: true);
        _privateEndpointVnetPolicy = DefineProperty<PrivateEndpointVnetPolicy>("PrivateEndpointVnetPolicy", ["PrivateEndpointVnetPolicy"]);
        _defaultPublicNatGatewayId = DefineProperty<ResourceIdentifier>("DefaultPublicNatGatewayId", ["DefaultPublicNatGatewayId"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"], isOutput: true);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["ResourceType"], isOutput: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
    }
}
