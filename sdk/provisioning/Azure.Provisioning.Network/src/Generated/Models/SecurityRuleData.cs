// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the SecurityRule data model.             Network
/// security rule.
/// </summary>
public partial class SecurityRuleData : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// A description for this rule. Restricted to 140 chars.
    /// </summary>
    public BicepValue<string> Description 
    {
        get { Initialize(); return _description!; }
        set { Initialize(); _description!.Assign(value); }
    }
    private BicepValue<string>? _description;

    /// <summary>
    /// Network protocol this rule applies to.
    /// </summary>
    public BicepValue<SecurityRuleProtocol> Protocol 
    {
        get { Initialize(); return _protocol!; }
        set { Initialize(); _protocol!.Assign(value); }
    }
    private BicepValue<SecurityRuleProtocol>? _protocol;

    /// <summary>
    /// The source port or range. Integer or range between 0 and 65535.
    /// Asterisk &apos;*&apos; can also be used to match all ports.
    /// </summary>
    public BicepValue<string> SourcePortRange 
    {
        get { Initialize(); return _sourcePortRange!; }
        set { Initialize(); _sourcePortRange!.Assign(value); }
    }
    private BicepValue<string>? _sourcePortRange;

    /// <summary>
    /// The destination port or range. Integer or range between 0 and 65535.
    /// Asterisk &apos;*&apos; can also be used to match all ports.
    /// </summary>
    public BicepValue<string> DestinationPortRange 
    {
        get { Initialize(); return _destinationPortRange!; }
        set { Initialize(); _destinationPortRange!.Assign(value); }
    }
    private BicepValue<string>? _destinationPortRange;

    /// <summary>
    /// The CIDR or source IP range. Asterisk &apos;*&apos; can also be used to
    /// match all source IPs. Default tags such as &apos;VirtualNetwork&apos;,
    /// &apos;AzureLoadBalancer&apos; and &apos;Internet&apos; can also be
    /// used. If this is an ingress rule, specifies where network traffic
    /// originates from.
    /// </summary>
    public BicepValue<string> SourceAddressPrefix 
    {
        get { Initialize(); return _sourceAddressPrefix!; }
        set { Initialize(); _sourceAddressPrefix!.Assign(value); }
    }
    private BicepValue<string>? _sourceAddressPrefix;

    /// <summary>
    /// The CIDR or source IP ranges.
    /// </summary>
    public BicepList<string> SourceAddressPrefixes 
    {
        get { Initialize(); return _sourceAddressPrefixes!; }
        set { Initialize(); _sourceAddressPrefixes!.Assign(value); }
    }
    private BicepList<string>? _sourceAddressPrefixes;

    /// <summary>
    /// The application security group specified as source.
    /// </summary>
    public BicepList<ApplicationSecurityGroupData> SourceApplicationSecurityGroups 
    {
        get { Initialize(); return _sourceApplicationSecurityGroups!; }
        set { Initialize(); _sourceApplicationSecurityGroups!.Assign(value); }
    }
    private BicepList<ApplicationSecurityGroupData>? _sourceApplicationSecurityGroups;

    /// <summary>
    /// The destination address prefix. CIDR or destination IP range. Asterisk
    /// &apos;*&apos; can also be used to match all source IPs. Default tags
    /// such as &apos;VirtualNetwork&apos;, &apos;AzureLoadBalancer&apos; and
    /// &apos;Internet&apos; can also be used.
    /// </summary>
    public BicepValue<string> DestinationAddressPrefix 
    {
        get { Initialize(); return _destinationAddressPrefix!; }
        set { Initialize(); _destinationAddressPrefix!.Assign(value); }
    }
    private BicepValue<string>? _destinationAddressPrefix;

    /// <summary>
    /// The destination address prefixes. CIDR or destination IP ranges.
    /// </summary>
    public BicepList<string> DestinationAddressPrefixes 
    {
        get { Initialize(); return _destinationAddressPrefixes!; }
        set { Initialize(); _destinationAddressPrefixes!.Assign(value); }
    }
    private BicepList<string>? _destinationAddressPrefixes;

    /// <summary>
    /// The application security group specified as destination.
    /// </summary>
    public BicepList<ApplicationSecurityGroupData> DestinationApplicationSecurityGroups 
    {
        get { Initialize(); return _destinationApplicationSecurityGroups!; }
        set { Initialize(); _destinationApplicationSecurityGroups!.Assign(value); }
    }
    private BicepList<ApplicationSecurityGroupData>? _destinationApplicationSecurityGroups;

    /// <summary>
    /// The source port ranges.
    /// </summary>
    public BicepList<string> SourcePortRanges 
    {
        get { Initialize(); return _sourcePortRanges!; }
        set { Initialize(); _sourcePortRanges!.Assign(value); }
    }
    private BicepList<string>? _sourcePortRanges;

    /// <summary>
    /// The destination port ranges.
    /// </summary>
    public BicepList<string> DestinationPortRanges 
    {
        get { Initialize(); return _destinationPortRanges!; }
        set { Initialize(); _destinationPortRanges!.Assign(value); }
    }
    private BicepList<string>? _destinationPortRanges;

    /// <summary>
    /// The network traffic is allowed or denied.
    /// </summary>
    public BicepValue<SecurityRuleAccess> Access 
    {
        get { Initialize(); return _access!; }
        set { Initialize(); _access!.Assign(value); }
    }
    private BicepValue<SecurityRuleAccess>? _access;

    /// <summary>
    /// The priority of the rule. The value can be between 100 and 4096. The
    /// priority number must be unique for each rule in the collection. The
    /// lower the priority number, the higher the priority of the rule.
    /// </summary>
    public BicepValue<int> Priority 
    {
        get { Initialize(); return _priority!; }
        set { Initialize(); _priority!.Assign(value); }
    }
    private BicepValue<int>? _priority;

    /// <summary>
    /// The direction of the rule. The direction specifies if rule will be
    /// evaluated on incoming or outgoing traffic.
    /// </summary>
    public BicepValue<SecurityRuleDirection> Direction 
    {
        get { Initialize(); return _direction!; }
        set { Initialize(); _direction!.Assign(value); }
    }
    private BicepValue<SecurityRuleDirection>? _direction;

    /// <summary>
    /// The provisioning state of the security rule resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
        set { Initialize(); _resourceType!.Assign(value); }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new SecurityRuleData.
    /// </summary>
    public SecurityRuleData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of SecurityRuleData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _description = DefineProperty<string>("Description", ["properties", "description"]);
        _protocol = DefineProperty<SecurityRuleProtocol>("Protocol", ["properties", "protocol"]);
        _sourcePortRange = DefineProperty<string>("SourcePortRange", ["properties", "sourcePortRange"]);
        _destinationPortRange = DefineProperty<string>("DestinationPortRange", ["properties", "destinationPortRange"]);
        _sourceAddressPrefix = DefineProperty<string>("SourceAddressPrefix", ["properties", "sourceAddressPrefix"]);
        _sourceAddressPrefixes = DefineListProperty<string>("SourceAddressPrefixes", ["properties", "sourceAddressPrefixes"]);
        _sourceApplicationSecurityGroups = DefineListProperty<ApplicationSecurityGroupData>("SourceApplicationSecurityGroups", ["properties", "sourceApplicationSecurityGroups"]);
        _destinationAddressPrefix = DefineProperty<string>("DestinationAddressPrefix", ["properties", "destinationAddressPrefix"]);
        _destinationAddressPrefixes = DefineListProperty<string>("DestinationAddressPrefixes", ["properties", "destinationAddressPrefixes"]);
        _destinationApplicationSecurityGroups = DefineListProperty<ApplicationSecurityGroupData>("DestinationApplicationSecurityGroups", ["properties", "destinationApplicationSecurityGroups"]);
        _sourcePortRanges = DefineListProperty<string>("SourcePortRanges", ["properties", "sourcePortRanges"]);
        _destinationPortRanges = DefineListProperty<string>("DestinationPortRanges", ["properties", "destinationPortRanges"]);
        _access = DefineProperty<SecurityRuleAccess>("Access", ["properties", "access"]);
        _priority = DefineProperty<int>("Priority", ["properties", "priority"]);
        _direction = DefineProperty<SecurityRuleDirection>("Direction", ["properties", "direction"]);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"]);
    }
}
