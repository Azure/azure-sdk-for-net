// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Provisioning.Primitives;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// An IP Configuration of the private endpoint.
/// </summary>
public partial class PrivateEndpointIPConfiguration : ProvisionableConstruct
{
    /// <summary>
    /// The name of the resource that is unique within a resource group.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// The resource type.
    /// </summary>
    public BicepValue<string> PrivateEndpointIPConfigurationType 
    {
        get { Initialize(); return _privateEndpointIPConfigurationType!; }
    }
    private BicepValue<string>? _privateEndpointIPConfigurationType;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// The ID of a group obtained from the remote resource that this private
    /// endpoint should connect to.
    /// </summary>
    public BicepValue<string> GroupId 
    {
        get { Initialize(); return _groupId!; }
        set { Initialize(); _groupId!.Assign(value); }
    }
    private BicepValue<string>? _groupId;

    /// <summary>
    /// The member name of a group obtained from the remote resource that this
    /// private endpoint should connect to.
    /// </summary>
    public BicepValue<string> MemberName 
    {
        get { Initialize(); return _memberName!; }
        set { Initialize(); _memberName!.Assign(value); }
    }
    private BicepValue<string>? _memberName;

    /// <summary>
    /// A private ip address obtained from the private endpoint&apos;s subnet.
    /// </summary>
    public BicepValue<IPAddress> PrivateIPAddress 
    {
        get { Initialize(); return _privateIPAddress!; }
        set { Initialize(); _privateIPAddress!.Assign(value); }
    }
    private BicepValue<IPAddress>? _privateIPAddress;

    /// <summary>
    /// Creates a new PrivateEndpointIPConfiguration.
    /// </summary>
    public PrivateEndpointIPConfiguration()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// PrivateEndpointIPConfiguration.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"]);
        _privateEndpointIPConfigurationType = DefineProperty<string>("PrivateEndpointIPConfigurationType", ["PrivateEndpointIPConfigurationType"], isOutput: true);
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _groupId = DefineProperty<string>("GroupId", ["GroupId"]);
        _memberName = DefineProperty<string>("MemberName", ["MemberName"]);
        _privateIPAddress = DefineProperty<IPAddress>("PrivateIPAddress", ["PrivateIPAddress"]);
    }
}
