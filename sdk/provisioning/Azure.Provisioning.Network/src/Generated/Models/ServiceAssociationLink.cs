// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// ServiceAssociationLink resource.
/// </summary>
public partial class ServiceAssociationLink : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// Resource type of the linked resource.
    /// </summary>
    public BicepValue<ResourceType> LinkedResourceType 
    {
        get { Initialize(); return _linkedResourceType!; }
        set { Initialize(); _linkedResourceType!.Assign(value); }
    }
    private BicepValue<ResourceType>? _linkedResourceType;

    /// <summary>
    /// Link to the external resource.
    /// </summary>
    public BicepValue<ResourceIdentifier> Link 
    {
        get { Initialize(); return _link!; }
        set { Initialize(); _link!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _link;

    /// <summary>
    /// The provisioning state of the service association link resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// If true, the resource can be deleted.
    /// </summary>
    public BicepValue<bool> AllowDelete 
    {
        get { Initialize(); return _allowDelete!; }
        set { Initialize(); _allowDelete!.Assign(value); }
    }
    private BicepValue<bool>? _allowDelete;

    /// <summary>
    /// A list of locations.
    /// </summary>
    public BicepList<AzureLocation> Locations 
    {
        get { Initialize(); return _locations!; }
        set { Initialize(); _locations!.Assign(value); }
    }
    private BicepList<AzureLocation>? _locations;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new ServiceAssociationLink.
    /// </summary>
    public ServiceAssociationLink()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of ServiceAssociationLink.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _linkedResourceType = DefineProperty<ResourceType>("LinkedResourceType", ["LinkedResourceType"]);
        _link = DefineProperty<ResourceIdentifier>("Link", ["Link"]);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _allowDelete = DefineProperty<bool>("AllowDelete", ["AllowDelete"]);
        _locations = DefineListProperty<AzureLocation>("Locations", ["Locations"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["ResourceType"], isOutput: true);
    }
}
