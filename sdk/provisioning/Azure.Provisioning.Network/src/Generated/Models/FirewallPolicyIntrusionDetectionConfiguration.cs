// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// The operation for configuring intrusion detection.
/// </summary>
public partial class FirewallPolicyIntrusionDetectionConfiguration : ProvisionableConstruct
{
    /// <summary>
    /// List of specific signatures states.
    /// </summary>
    public BicepList<FirewallPolicyIntrusionDetectionSignatureSpecification> SignatureOverrides 
    {
        get { Initialize(); return _signatureOverrides!; }
        set { Initialize(); _signatureOverrides!.Assign(value); }
    }
    private BicepList<FirewallPolicyIntrusionDetectionSignatureSpecification>? _signatureOverrides;

    /// <summary>
    /// List of rules for traffic to bypass.
    /// </summary>
    public BicepList<FirewallPolicyIntrusionDetectionBypassTrafficSpecifications> BypassTrafficSettings 
    {
        get { Initialize(); return _bypassTrafficSettings!; }
        set { Initialize(); _bypassTrafficSettings!.Assign(value); }
    }
    private BicepList<FirewallPolicyIntrusionDetectionBypassTrafficSpecifications>? _bypassTrafficSettings;

    /// <summary>
    /// IDPS Private IP address ranges are used to identify traffic direction
    /// (i.e. inbound, outbound, etc.). By default, only ranges defined by
    /// IANA RFC 1918 are considered private IP addresses. To modify default
    /// ranges, specify your Private IP address ranges with this property.
    /// </summary>
    public BicepList<string> PrivateRanges 
    {
        get { Initialize(); return _privateRanges!; }
        set { Initialize(); _privateRanges!.Assign(value); }
    }
    private BicepList<string>? _privateRanges;

    /// <summary>
    /// Creates a new FirewallPolicyIntrusionDetectionConfiguration.
    /// </summary>
    public FirewallPolicyIntrusionDetectionConfiguration()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// FirewallPolicyIntrusionDetectionConfiguration.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _signatureOverrides = DefineListProperty<FirewallPolicyIntrusionDetectionSignatureSpecification>("SignatureOverrides", ["signatureOverrides"]);
        _bypassTrafficSettings = DefineListProperty<FirewallPolicyIntrusionDetectionBypassTrafficSpecifications>("BypassTrafficSettings", ["bypassTrafficSettings"]);
        _privateRanges = DefineListProperty<string>("PrivateRanges", ["privateRanges"]);
    }
}
