// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the InboundNatRule data model.             Inbound NAT
/// rule of the load balancer.
/// </summary>
public partial class InboundNatRuleData : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> FrontendIPConfigurationId 
    {
        get { Initialize(); return _frontendIPConfigurationId!; }
        set { Initialize(); _frontendIPConfigurationId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _frontendIPConfigurationId;

    /// <summary>
    /// A reference to a private IP address defined on a network interface of a
    /// VM. Traffic sent to the frontend port of each of the frontend IP
    /// configurations is forwarded to the backend IP.
    /// </summary>
    public NetworkInterfaceIPConfigurationData BackendIPConfiguration 
    {
        get { Initialize(); return _backendIPConfiguration!; }
    }
    private NetworkInterfaceIPConfigurationData? _backendIPConfiguration;

    /// <summary>
    /// The reference to the transport protocol used by the load balancing rule.
    /// </summary>
    public BicepValue<LoadBalancingTransportProtocol> Protocol 
    {
        get { Initialize(); return _protocol!; }
        set { Initialize(); _protocol!.Assign(value); }
    }
    private BicepValue<LoadBalancingTransportProtocol>? _protocol;

    /// <summary>
    /// The port for the external endpoint. Port numbers for each rule must be
    /// unique within the Load Balancer. Acceptable values range from 1 to
    /// 65534.
    /// </summary>
    public BicepValue<int> FrontendPort 
    {
        get { Initialize(); return _frontendPort!; }
        set { Initialize(); _frontendPort!.Assign(value); }
    }
    private BicepValue<int>? _frontendPort;

    /// <summary>
    /// The port used for the internal endpoint. Acceptable values range from 1
    /// to 65535.
    /// </summary>
    public BicepValue<int> BackendPort 
    {
        get { Initialize(); return _backendPort!; }
        set { Initialize(); _backendPort!.Assign(value); }
    }
    private BicepValue<int>? _backendPort;

    /// <summary>
    /// The timeout for the TCP idle connection. The value can be set between 4
    /// and 30 minutes. The default value is 4 minutes. This element is only
    /// used when the protocol is set to TCP.
    /// </summary>
    public BicepValue<int> IdleTimeoutInMinutes 
    {
        get { Initialize(); return _idleTimeoutInMinutes!; }
        set { Initialize(); _idleTimeoutInMinutes!.Assign(value); }
    }
    private BicepValue<int>? _idleTimeoutInMinutes;

    /// <summary>
    /// Configures a virtual machine&apos;s endpoint for the floating IP
    /// capability required to configure a SQL AlwaysOn Availability Group.
    /// This setting is required when using the SQL AlwaysOn Availability
    /// Groups in SQL server. This setting can&apos;t be changed after you
    /// create the endpoint.
    /// </summary>
    public BicepValue<bool> EnableFloatingIP 
    {
        get { Initialize(); return _enableFloatingIP!; }
        set { Initialize(); _enableFloatingIP!.Assign(value); }
    }
    private BicepValue<bool>? _enableFloatingIP;

    /// <summary>
    /// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
    /// connection termination. This element is only used when the protocol is
    /// set to TCP.
    /// </summary>
    public BicepValue<bool> EnableTcpReset 
    {
        get { Initialize(); return _enableTcpReset!; }
        set { Initialize(); _enableTcpReset!.Assign(value); }
    }
    private BicepValue<bool>? _enableTcpReset;

    /// <summary>
    /// The port range start for the external endpoint. This property is used
    /// together with BackendAddressPool and FrontendPortRangeEnd. Individual
    /// inbound NAT rule port mappings will be created for each backend
    /// address from BackendAddressPool. Acceptable values range from 1 to
    /// 65534.
    /// </summary>
    public BicepValue<int> FrontendPortRangeStart 
    {
        get { Initialize(); return _frontendPortRangeStart!; }
        set { Initialize(); _frontendPortRangeStart!.Assign(value); }
    }
    private BicepValue<int>? _frontendPortRangeStart;

    /// <summary>
    /// The port range end for the external endpoint. This property is used
    /// together with BackendAddressPool and FrontendPortRangeStart.
    /// Individual inbound NAT rule port mappings will be created for each
    /// backend address from BackendAddressPool. Acceptable values range from
    /// 1 to 65534.
    /// </summary>
    public BicepValue<int> FrontendPortRangeEnd 
    {
        get { Initialize(); return _frontendPortRangeEnd!; }
        set { Initialize(); _frontendPortRangeEnd!.Assign(value); }
    }
    private BicepValue<int>? _frontendPortRangeEnd;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> BackendAddressPoolId 
    {
        get { Initialize(); return _backendAddressPoolId!; }
        set { Initialize(); _backendAddressPoolId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _backendAddressPoolId;

    /// <summary>
    /// The provisioning state of the inbound NAT rule resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new InboundNatRuleData.
    /// </summary>
    public InboundNatRuleData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of InboundNatRuleData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _frontendIPConfigurationId = DefineProperty<ResourceIdentifier>("FrontendIPConfigurationId", ["FrontendIPConfigurationId"]);
        _backendIPConfiguration = DefineModelProperty<NetworkInterfaceIPConfigurationData>("BackendIPConfiguration", ["BackendIPConfiguration"], isOutput: true);
        _protocol = DefineProperty<LoadBalancingTransportProtocol>("Protocol", ["Protocol"]);
        _frontendPort = DefineProperty<int>("FrontendPort", ["FrontendPort"]);
        _backendPort = DefineProperty<int>("BackendPort", ["BackendPort"]);
        _idleTimeoutInMinutes = DefineProperty<int>("IdleTimeoutInMinutes", ["IdleTimeoutInMinutes"]);
        _enableFloatingIP = DefineProperty<bool>("EnableFloatingIP", ["EnableFloatingIP"]);
        _enableTcpReset = DefineProperty<bool>("EnableTcpReset", ["EnableTcpReset"]);
        _frontendPortRangeStart = DefineProperty<int>("FrontendPortRangeStart", ["FrontendPortRangeStart"]);
        _frontendPortRangeEnd = DefineProperty<int>("FrontendPortRangeEnd", ["FrontendPortRangeEnd"]);
        _backendAddressPoolId = DefineProperty<ResourceIdentifier>("BackendAddressPoolId", ["BackendAddressPoolId"]);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["ResourceType"], isOutput: true);
    }
}
