// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// Properties of the load balancer.
/// </summary>
public partial class LoadBalancingRuleProperties : ProvisionableConstruct
{
    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> FrontendIPConfigurationId 
    {
        get { Initialize(); return _frontendIPConfigurationId!; }
        set { Initialize(); _frontendIPConfigurationId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _frontendIPConfigurationId;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> BackendAddressPoolId 
    {
        get { Initialize(); return _backendAddressPoolId!; }
        set { Initialize(); _backendAddressPoolId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _backendAddressPoolId;

    /// <summary>
    /// An array of references to pool of DIPs.
    /// </summary>
    public BicepList<WritableSubResource> BackendAddressPools 
    {
        get { Initialize(); return _backendAddressPools!; }
        set { Initialize(); _backendAddressPools!.Assign(value); }
    }
    private BicepList<WritableSubResource>? _backendAddressPools;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> ProbeId 
    {
        get { Initialize(); return _probeId!; }
        set { Initialize(); _probeId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _probeId;

    /// <summary>
    /// The reference to the transport protocol used by the load balancing rule.
    /// </summary>
    public BicepValue<LoadBalancingTransportProtocol> Protocol 
    {
        get { Initialize(); return _protocol!; }
        set { Initialize(); _protocol!.Assign(value); }
    }
    private BicepValue<LoadBalancingTransportProtocol>? _protocol;

    /// <summary>
    /// The load distribution policy for this rule.
    /// </summary>
    public BicepValue<LoadDistribution> LoadDistribution 
    {
        get { Initialize(); return _loadDistribution!; }
        set { Initialize(); _loadDistribution!.Assign(value); }
    }
    private BicepValue<LoadDistribution>? _loadDistribution;

    /// <summary>
    /// The port for the external endpoint. Port numbers for each rule must be
    /// unique within the Load Balancer. Acceptable values are between 0 and
    /// 65534. Note that value 0 enables &quot;Any Port&quot;.
    /// </summary>
    public BicepValue<int> FrontendPort 
    {
        get { Initialize(); return _frontendPort!; }
        set { Initialize(); _frontendPort!.Assign(value); }
    }
    private BicepValue<int>? _frontendPort;

    /// <summary>
    /// The port used for internal connections on the endpoint. Acceptable
    /// values are between 0 and 65535. Note that value 0 enables &quot;Any
    /// Port&quot;.
    /// </summary>
    public BicepValue<int> BackendPort 
    {
        get { Initialize(); return _backendPort!; }
        set { Initialize(); _backendPort!.Assign(value); }
    }
    private BicepValue<int>? _backendPort;

    /// <summary>
    /// The timeout for the TCP idle connection. The value can be set between 4
    /// and 30 minutes. The default value is 4 minutes. This element is only
    /// used when the protocol is set to TCP.
    /// </summary>
    public BicepValue<int> IdleTimeoutInMinutes 
    {
        get { Initialize(); return _idleTimeoutInMinutes!; }
        set { Initialize(); _idleTimeoutInMinutes!.Assign(value); }
    }
    private BicepValue<int>? _idleTimeoutInMinutes;

    /// <summary>
    /// Configures a virtual machine&apos;s endpoint for the floating IP
    /// capability required to configure a SQL AlwaysOn Availability Group.
    /// This setting is required when using the SQL AlwaysOn Availability
    /// Groups in SQL server. This setting can&apos;t be changed after you
    /// create the endpoint.
    /// </summary>
    public BicepValue<bool> EnableFloatingIP 
    {
        get { Initialize(); return _enableFloatingIP!; }
        set { Initialize(); _enableFloatingIP!.Assign(value); }
    }
    private BicepValue<bool>? _enableFloatingIP;

    /// <summary>
    /// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
    /// connection termination. This element is only used when the protocol is
    /// set to TCP.
    /// </summary>
    public BicepValue<bool> EnableTcpReset 
    {
        get { Initialize(); return _enableTcpReset!; }
        set { Initialize(); _enableTcpReset!.Assign(value); }
    }
    private BicepValue<bool>? _enableTcpReset;

    /// <summary>
    /// Configures SNAT for the VMs in the backend pool to use the publicIP
    /// address specified in the frontend of the load balancing rule.
    /// </summary>
    public BicepValue<bool> DisableOutboundSnat 
    {
        get { Initialize(); return _disableOutboundSnat!; }
        set { Initialize(); _disableOutboundSnat!.Assign(value); }
    }
    private BicepValue<bool>? _disableOutboundSnat;

    /// <summary>
    /// Defines whether connections between 2 communicating endpoints can be
    /// tracked and associated to the same backend VM over its lifetime when
    /// using UDP protocol.
    /// </summary>
    public BicepValue<bool> EnableConnectionTracking 
    {
        get { Initialize(); return _enableConnectionTracking!; }
        set { Initialize(); _enableConnectionTracking!.Assign(value); }
    }
    private BicepValue<bool>? _enableConnectionTracking;

    /// <summary>
    /// The provisioning state of the load balancing rule resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Additional Properties                          To assign an object to
    /// the value of this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepDictionary<BinaryData> AdditionalProperties 
    {
        get { Initialize(); return _additionalProperties!; }
        set { Initialize(); _additionalProperties!.Assign(value); }
    }
    private BicepDictionary<BinaryData>? _additionalProperties;

    /// <summary>
    /// Creates a new LoadBalancingRuleProperties.
    /// </summary>
    public LoadBalancingRuleProperties()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of LoadBalancingRuleProperties.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _frontendIPConfigurationId = DefineProperty<ResourceIdentifier>("FrontendIPConfigurationId", ["frontendIPConfiguration", "id"]);
        _backendAddressPoolId = DefineProperty<ResourceIdentifier>("BackendAddressPoolId", ["backendAddressPool", "id"]);
        _backendAddressPools = DefineListProperty<WritableSubResource>("BackendAddressPools", ["backendAddressPools"]);
        _probeId = DefineProperty<ResourceIdentifier>("ProbeId", ["probe", "id"]);
        _protocol = DefineProperty<LoadBalancingTransportProtocol>("Protocol", ["protocol"]);
        _loadDistribution = DefineProperty<LoadDistribution>("LoadDistribution", ["loadDistribution"]);
        _frontendPort = DefineProperty<int>("FrontendPort", ["frontendPort"]);
        _backendPort = DefineProperty<int>("BackendPort", ["backendPort"]);
        _idleTimeoutInMinutes = DefineProperty<int>("IdleTimeoutInMinutes", ["idleTimeoutInMinutes"]);
        _enableFloatingIP = DefineProperty<bool>("EnableFloatingIP", ["enableFloatingIP"]);
        _enableTcpReset = DefineProperty<bool>("EnableTcpReset", ["enableTcpReset"]);
        _disableOutboundSnat = DefineProperty<bool>("DisableOutboundSnat", ["disableOutboundSnat"]);
        _enableConnectionTracking = DefineProperty<bool>("EnableConnectionTracking", ["enableConnectionTracking"]);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["provisioningState"], isOutput: true);
        _additionalProperties = DefineDictionaryProperty<BinaryData>("AdditionalProperties", ["AdditionalProperties"]);
    }
}
