// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the NetworkInterfaceIPConfiguration data model.
/// IPConfiguration in a network interface.
/// </summary>
public partial class NetworkInterfaceIPConfigurationData : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> GatewayLoadBalancerId 
    {
        get { Initialize(); return _gatewayLoadBalancerId!; }
        set { Initialize(); _gatewayLoadBalancerId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _gatewayLoadBalancerId;

    /// <summary>
    /// The reference to Virtual Network Taps.
    /// </summary>
    public BicepList<VirtualNetworkTapData> VirtualNetworkTaps 
    {
        get { Initialize(); return _virtualNetworkTaps!; }
        set { Initialize(); _virtualNetworkTaps!.Assign(value); }
    }
    private BicepList<VirtualNetworkTapData>? _virtualNetworkTaps;

    /// <summary>
    /// The reference to ApplicationGatewayBackendAddressPool resource.
    /// </summary>
    public BicepList<ApplicationGatewayBackendAddressPool> ApplicationGatewayBackendAddressPools 
    {
        get { Initialize(); return _applicationGatewayBackendAddressPools!; }
        set { Initialize(); _applicationGatewayBackendAddressPools!.Assign(value); }
    }
    private BicepList<ApplicationGatewayBackendAddressPool>? _applicationGatewayBackendAddressPools;

    /// <summary>
    /// The reference to LoadBalancerBackendAddressPool resource.
    /// </summary>
    public BicepList<BackendAddressPoolData> LoadBalancerBackendAddressPools 
    {
        get { Initialize(); return _loadBalancerBackendAddressPools!; }
        set { Initialize(); _loadBalancerBackendAddressPools!.Assign(value); }
    }
    private BicepList<BackendAddressPoolData>? _loadBalancerBackendAddressPools;

    /// <summary>
    /// A list of references of LoadBalancerInboundNatRules.
    /// </summary>
    public BicepList<InboundNatRuleData> LoadBalancerInboundNatRules 
    {
        get { Initialize(); return _loadBalancerInboundNatRules!; }
        set { Initialize(); _loadBalancerInboundNatRules!.Assign(value); }
    }
    private BicepList<InboundNatRuleData>? _loadBalancerInboundNatRules;

    /// <summary>
    /// Private IP address of the IP configuration. It can be a single IP
    /// address or a CIDR block in the format
    /// &lt;address&gt;/&lt;prefix-length&gt;.
    /// </summary>
    public BicepValue<string> PrivateIPAddress 
    {
        get { Initialize(); return _privateIPAddress!; }
        set { Initialize(); _privateIPAddress!.Assign(value); }
    }
    private BicepValue<string>? _privateIPAddress;

    /// <summary>
    /// The private IP address prefix length. If specified and the allocation
    /// method is dynamic, the service will allocate a CIDR block instead of a
    /// single IP address.
    /// </summary>
    public BicepValue<int> PrivateIPAddressPrefixLength 
    {
        get { Initialize(); return _privateIPAddressPrefixLength!; }
        set { Initialize(); _privateIPAddressPrefixLength!.Assign(value); }
    }
    private BicepValue<int>? _privateIPAddressPrefixLength;

    /// <summary>
    /// The private IP address allocation method.
    /// </summary>
    public BicepValue<NetworkIPAllocationMethod> PrivateIPAllocationMethod 
    {
        get { Initialize(); return _privateIPAllocationMethod!; }
        set { Initialize(); _privateIPAllocationMethod!.Assign(value); }
    }
    private BicepValue<NetworkIPAllocationMethod>? _privateIPAllocationMethod;

    /// <summary>
    /// Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
    /// </summary>
    public BicepValue<NetworkIPVersion> PrivateIPAddressVersion 
    {
        get { Initialize(); return _privateIPAddressVersion!; }
        set { Initialize(); _privateIPAddressVersion!.Assign(value); }
    }
    private BicepValue<NetworkIPVersion>? _privateIPAddressVersion;

    /// <summary>
    /// Subnet bound to the IP configuration.
    /// </summary>
    public SubnetData Subnet 
    {
        get { Initialize(); return _subnet!; }
        set { Initialize(); AssignOrReplace(ref _subnet, value); }
    }
    private SubnetData? _subnet;

    /// <summary>
    /// Whether this is a primary customer address on the network interface.
    /// </summary>
    public BicepValue<bool> Primary 
    {
        get { Initialize(); return _primary!; }
        set { Initialize(); _primary!.Assign(value); }
    }
    private BicepValue<bool>? _primary;

    /// <summary>
    /// Public IP address bound to the IP configuration.
    /// </summary>
    public PublicIPAddressData PublicIPAddress 
    {
        get { Initialize(); return _publicIPAddress!; }
        set { Initialize(); AssignOrReplace(ref _publicIPAddress, value); }
    }
    private PublicIPAddressData? _publicIPAddress;

    /// <summary>
    /// Application security groups in which the IP configuration is included.
    /// </summary>
    public BicepList<ApplicationSecurityGroupData> ApplicationSecurityGroups 
    {
        get { Initialize(); return _applicationSecurityGroups!; }
        set { Initialize(); _applicationSecurityGroups!.Assign(value); }
    }
    private BicepList<ApplicationSecurityGroupData>? _applicationSecurityGroups;

    /// <summary>
    /// The provisioning state of the network interface IP configuration.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// PrivateLinkConnection properties for the network interface.
    /// </summary>
    public NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties PrivateLinkConnectionProperties 
    {
        get { Initialize(); return _privateLinkConnectionProperties!; }
    }
    private NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties? _privateLinkConnectionProperties;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
        set { Initialize(); _resourceType!.Assign(value); }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new NetworkInterfaceIPConfigurationData.
    /// </summary>
    public NetworkInterfaceIPConfigurationData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// NetworkInterfaceIPConfigurationData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _gatewayLoadBalancerId = DefineProperty<ResourceIdentifier>("GatewayLoadBalancerId", ["properties", "gatewayLoadBalancer", "id"]);
        _virtualNetworkTaps = DefineListProperty<VirtualNetworkTapData>("VirtualNetworkTaps", ["properties", "virtualNetworkTaps"]);
        _applicationGatewayBackendAddressPools = DefineListProperty<ApplicationGatewayBackendAddressPool>("ApplicationGatewayBackendAddressPools", ["properties", "applicationGatewayBackendAddressPools"]);
        _loadBalancerBackendAddressPools = DefineListProperty<BackendAddressPoolData>("LoadBalancerBackendAddressPools", ["properties", "loadBalancerBackendAddressPools"]);
        _loadBalancerInboundNatRules = DefineListProperty<InboundNatRuleData>("LoadBalancerInboundNatRules", ["properties", "loadBalancerInboundNatRules"]);
        _privateIPAddress = DefineProperty<string>("PrivateIPAddress", ["properties", "privateIPAddress"]);
        _privateIPAddressPrefixLength = DefineProperty<int>("PrivateIPAddressPrefixLength", ["properties", "privateIPAddressPrefixLength"]);
        _privateIPAllocationMethod = DefineProperty<NetworkIPAllocationMethod>("PrivateIPAllocationMethod", ["properties", "privateIPAllocationMethod"]);
        _privateIPAddressVersion = DefineProperty<NetworkIPVersion>("PrivateIPAddressVersion", ["properties", "privateIPAddressVersion"]);
        _subnet = DefineModelProperty<SubnetData>("Subnet", ["properties", "subnet"]);
        _primary = DefineProperty<bool>("Primary", ["properties", "primary"]);
        _publicIPAddress = DefineModelProperty<PublicIPAddressData>("PublicIPAddress", ["properties", "publicIPAddress"]);
        _applicationSecurityGroups = DefineListProperty<ApplicationSecurityGroupData>("ApplicationSecurityGroups", ["properties", "applicationSecurityGroups"]);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _privateLinkConnectionProperties = DefineModelProperty<NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties>("PrivateLinkConnectionProperties", ["properties", "privateLinkConnectionProperties"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"]);
    }
}
