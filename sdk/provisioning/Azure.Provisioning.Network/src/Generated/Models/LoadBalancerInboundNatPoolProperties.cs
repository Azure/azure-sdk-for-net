// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// Properties of Inbound NAT pool.
/// </summary>
public partial class LoadBalancerInboundNatPoolProperties : ProvisionableConstruct
{
    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> FrontendIPConfigurationId 
    {
        get { Initialize(); return _frontendIPConfigurationId!; }
        set { Initialize(); _frontendIPConfigurationId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _frontendIPConfigurationId;

    /// <summary>
    /// The reference to the transport protocol used by the inbound NAT pool.
    /// </summary>
    public BicepValue<LoadBalancingTransportProtocol> Protocol 
    {
        get { Initialize(); return _protocol!; }
        set { Initialize(); _protocol!.Assign(value); }
    }
    private BicepValue<LoadBalancingTransportProtocol>? _protocol;

    /// <summary>
    /// The first port number in the range of external ports that will be used
    /// to provide Inbound Nat to NICs associated with a load balancer.
    /// Acceptable values range between 1 and 65534.
    /// </summary>
    public BicepValue<int> FrontendPortRangeStart 
    {
        get { Initialize(); return _frontendPortRangeStart!; }
        set { Initialize(); _frontendPortRangeStart!.Assign(value); }
    }
    private BicepValue<int>? _frontendPortRangeStart;

    /// <summary>
    /// The last port number in the range of external ports that will be used
    /// to provide Inbound Nat to NICs associated with a load balancer.
    /// Acceptable values range between 1 and 65535.
    /// </summary>
    public BicepValue<int> FrontendPortRangeEnd 
    {
        get { Initialize(); return _frontendPortRangeEnd!; }
        set { Initialize(); _frontendPortRangeEnd!.Assign(value); }
    }
    private BicepValue<int>? _frontendPortRangeEnd;

    /// <summary>
    /// The port used for internal connections on the endpoint. Acceptable
    /// values are between 1 and 65535.
    /// </summary>
    public BicepValue<int> BackendPort 
    {
        get { Initialize(); return _backendPort!; }
        set { Initialize(); _backendPort!.Assign(value); }
    }
    private BicepValue<int>? _backendPort;

    /// <summary>
    /// The timeout for the TCP idle connection. The value can be set between 4
    /// and 30 minutes. The default value is 4 minutes. This element is only
    /// used when the protocol is set to TCP.
    /// </summary>
    public BicepValue<int> IdleTimeoutInMinutes 
    {
        get { Initialize(); return _idleTimeoutInMinutes!; }
        set { Initialize(); _idleTimeoutInMinutes!.Assign(value); }
    }
    private BicepValue<int>? _idleTimeoutInMinutes;

    /// <summary>
    /// Configures a virtual machine&apos;s endpoint for the floating IP
    /// capability required to configure a SQL AlwaysOn Availability Group.
    /// This setting is required when using the SQL AlwaysOn Availability
    /// Groups in SQL server. This setting can&apos;t be changed after you
    /// create the endpoint.
    /// </summary>
    public BicepValue<bool> EnableFloatingIP 
    {
        get { Initialize(); return _enableFloatingIP!; }
        set { Initialize(); _enableFloatingIP!.Assign(value); }
    }
    private BicepValue<bool>? _enableFloatingIP;

    /// <summary>
    /// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
    /// connection termination. This element is only used when the protocol is
    /// set to TCP.
    /// </summary>
    public BicepValue<bool> EnableTcpReset 
    {
        get { Initialize(); return _enableTcpReset!; }
        set { Initialize(); _enableTcpReset!.Assign(value); }
    }
    private BicepValue<bool>? _enableTcpReset;

    /// <summary>
    /// The provisioning state of the inbound NAT pool resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Additional Properties                          To assign an object to
    /// the value of this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepDictionary<BinaryData> AdditionalProperties 
    {
        get { Initialize(); return _additionalProperties!; }
        set { Initialize(); _additionalProperties!.Assign(value); }
    }
    private BicepDictionary<BinaryData>? _additionalProperties;

    /// <summary>
    /// Creates a new LoadBalancerInboundNatPoolProperties.
    /// </summary>
    public LoadBalancerInboundNatPoolProperties()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// LoadBalancerInboundNatPoolProperties.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _frontendIPConfigurationId = DefineProperty<ResourceIdentifier>("FrontendIPConfigurationId", ["frontendIPConfiguration", "id"]);
        _protocol = DefineProperty<LoadBalancingTransportProtocol>("Protocol", ["protocol"]);
        _frontendPortRangeStart = DefineProperty<int>("FrontendPortRangeStart", ["frontendPortRangeStart"]);
        _frontendPortRangeEnd = DefineProperty<int>("FrontendPortRangeEnd", ["frontendPortRangeEnd"]);
        _backendPort = DefineProperty<int>("BackendPort", ["backendPort"]);
        _idleTimeoutInMinutes = DefineProperty<int>("IdleTimeoutInMinutes", ["idleTimeoutInMinutes"]);
        _enableFloatingIP = DefineProperty<bool>("EnableFloatingIP", ["enableFloatingIP"]);
        _enableTcpReset = DefineProperty<bool>("EnableTcpReset", ["enableTcpReset"]);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["provisioningState"], isOutput: true);
        _additionalProperties = DefineDictionaryProperty<BinaryData>("AdditionalProperties", ["AdditionalProperties"]);
    }
}
