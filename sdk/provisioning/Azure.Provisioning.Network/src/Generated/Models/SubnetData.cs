// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the Subnet data model.             Subnet in a virtual
/// network resource.
/// </summary>
public partial class SubnetData : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// The address prefix for the subnet.
    /// </summary>
    public BicepValue<string> AddressPrefix 
    {
        get { Initialize(); return _addressPrefix!; }
        set { Initialize(); _addressPrefix!.Assign(value); }
    }
    private BicepValue<string>? _addressPrefix;

    /// <summary>
    /// List of address prefixes for the subnet.
    /// </summary>
    public BicepList<string> AddressPrefixes 
    {
        get { Initialize(); return _addressPrefixes!; }
        set { Initialize(); _addressPrefixes!.Assign(value); }
    }
    private BicepList<string>? _addressPrefixes;

    /// <summary>
    /// The reference to the NetworkSecurityGroup resource.
    /// </summary>
    public NetworkSecurityGroupData NetworkSecurityGroup 
    {
        get { Initialize(); return _networkSecurityGroup!; }
        set { Initialize(); AssignOrReplace(ref _networkSecurityGroup, value); }
    }
    private NetworkSecurityGroupData? _networkSecurityGroup;

    /// <summary>
    /// The reference to the RouteTable resource.
    /// </summary>
    public RouteTableData RouteTable 
    {
        get { Initialize(); return _routeTable!; }
        set { Initialize(); AssignOrReplace(ref _routeTable, value); }
    }
    private RouteTableData? _routeTable;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> NatGatewayId 
    {
        get { Initialize(); return _natGatewayId!; }
        set { Initialize(); _natGatewayId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _natGatewayId;

    /// <summary>
    /// An array of service endpoints.
    /// </summary>
    public BicepList<ServiceEndpointProperties> ServiceEndpoints 
    {
        get { Initialize(); return _serviceEndpoints!; }
        set { Initialize(); _serviceEndpoints!.Assign(value); }
    }
    private BicepList<ServiceEndpointProperties>? _serviceEndpoints;

    /// <summary>
    /// An array of service endpoint policies.
    /// </summary>
    public BicepList<ServiceEndpointPolicyData> ServiceEndpointPolicies 
    {
        get { Initialize(); return _serviceEndpointPolicies!; }
        set { Initialize(); _serviceEndpointPolicies!.Assign(value); }
    }
    private BicepList<ServiceEndpointPolicyData>? _serviceEndpointPolicies;

    /// <summary>
    /// An array of references to private endpoints.
    /// </summary>
    public BicepList<PrivateEndpointData> PrivateEndpoints 
    {
        get { Initialize(); return _privateEndpoints!; }
    }
    private BicepList<PrivateEndpointData>? _privateEndpoints;

    /// <summary>
    /// An array of references to the network interface IP configurations using
    /// subnet.
    /// </summary>
    public BicepList<NetworkIPConfiguration> IPConfigurations 
    {
        get { Initialize(); return _iPConfigurations!; }
    }
    private BicepList<NetworkIPConfiguration>? _iPConfigurations;

    /// <summary>
    /// Array of IP configuration profiles which reference this subnet.
    /// </summary>
    public BicepList<NetworkIPConfigurationProfile> IPConfigurationProfiles 
    {
        get { Initialize(); return _iPConfigurationProfiles!; }
    }
    private BicepList<NetworkIPConfigurationProfile>? _iPConfigurationProfiles;

    /// <summary>
    /// Array of IpAllocation which reference this subnet.
    /// </summary>
    public BicepList<WritableSubResource> IPAllocations 
    {
        get { Initialize(); return _iPAllocations!; }
        set { Initialize(); _iPAllocations!.Assign(value); }
    }
    private BicepList<WritableSubResource>? _iPAllocations;

    /// <summary>
    /// An array of references to the external resources using subnet.
    /// </summary>
    public BicepList<ResourceNavigationLink> ResourceNavigationLinks 
    {
        get { Initialize(); return _resourceNavigationLinks!; }
    }
    private BicepList<ResourceNavigationLink>? _resourceNavigationLinks;

    /// <summary>
    /// An array of references to services injecting into this subnet.
    /// </summary>
    public BicepList<ServiceAssociationLink> ServiceAssociationLinks 
    {
        get { Initialize(); return _serviceAssociationLinks!; }
    }
    private BicepList<ServiceAssociationLink>? _serviceAssociationLinks;

    /// <summary>
    /// An array of references to the delegations on the subnet.
    /// </summary>
    public BicepList<ServiceDelegation> Delegations 
    {
        get { Initialize(); return _delegations!; }
        set { Initialize(); _delegations!.Assign(value); }
    }
    private BicepList<ServiceDelegation>? _delegations;

    /// <summary>
    /// A read-only string identifying the intention of use for this subnet
    /// based on delegations and other user-defined properties.
    /// </summary>
    public BicepValue<string> Purpose 
    {
        get { Initialize(); return _purpose!; }
    }
    private BicepValue<string>? _purpose;

    /// <summary>
    /// The provisioning state of the subnet resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Enable or Disable apply network policies on private end point in the
    /// subnet.
    /// </summary>
    public BicepValue<VirtualNetworkPrivateEndpointNetworkPolicy> PrivateEndpointNetworkPolicy 
    {
        get { Initialize(); return _privateEndpointNetworkPolicy!; }
        set { Initialize(); _privateEndpointNetworkPolicy!.Assign(value); }
    }
    private BicepValue<VirtualNetworkPrivateEndpointNetworkPolicy>? _privateEndpointNetworkPolicy;

    /// <summary>
    /// Enable or Disable apply network policies on private link service in the
    /// subnet.
    /// </summary>
    public BicepValue<VirtualNetworkPrivateLinkServiceNetworkPolicy> PrivateLinkServiceNetworkPolicy 
    {
        get { Initialize(); return _privateLinkServiceNetworkPolicy!; }
        set { Initialize(); _privateLinkServiceNetworkPolicy!.Assign(value); }
    }
    private BicepValue<VirtualNetworkPrivateLinkServiceNetworkPolicy>? _privateLinkServiceNetworkPolicy;

    /// <summary>
    /// Application gateway IP configurations of virtual network resource.
    /// </summary>
    public BicepList<ApplicationGatewayIPConfiguration> ApplicationGatewayIPConfigurations 
    {
        get { Initialize(); return _applicationGatewayIPConfigurations!; }
        set { Initialize(); _applicationGatewayIPConfigurations!.Assign(value); }
    }
    private BicepList<ApplicationGatewayIPConfiguration>? _applicationGatewayIPConfigurations;

    /// <summary>
    /// Set this property to Tenant to allow sharing subnet with other
    /// subscriptions in your AAD tenant. This property can only be set if
    /// defaultOutboundAccess is set to false, both properties can only be set
    /// if subnet is empty.
    /// </summary>
    public BicepValue<SharingScope> SharingScope 
    {
        get { Initialize(); return _sharingScope!; }
        set { Initialize(); _sharingScope!.Assign(value); }
    }
    private BicepValue<SharingScope>? _sharingScope;

    /// <summary>
    /// Set this property to false to disable default outbound connectivity for
    /// all VMs in the subnet. This property can only be set at the time of
    /// subnet creation and cannot be updated for an existing subnet.
    /// </summary>
    public BicepValue<bool> DefaultOutboundAccess 
    {
        get { Initialize(); return _defaultOutboundAccess!; }
        set { Initialize(); _defaultOutboundAccess!.Assign(value); }
    }
    private BicepValue<bool>? _defaultOutboundAccess;

    /// <summary>
    /// A list of IPAM Pools for allocating IP address prefixes.
    /// </summary>
    public BicepList<IpamPoolPrefixAllocation> IpamPoolPrefixAllocations 
    {
        get { Initialize(); return _ipamPoolPrefixAllocations!; }
        set { Initialize(); _ipamPoolPrefixAllocations!.Assign(value); }
    }
    private BicepList<IpamPoolPrefixAllocation>? _ipamPoolPrefixAllocations;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
        set { Initialize(); _resourceType!.Assign(value); }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new SubnetData.
    /// </summary>
    public SubnetData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of SubnetData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _addressPrefix = DefineProperty<string>("AddressPrefix", ["properties", "addressPrefix"]);
        _addressPrefixes = DefineListProperty<string>("AddressPrefixes", ["properties", "addressPrefixes"]);
        _networkSecurityGroup = DefineModelProperty<NetworkSecurityGroupData>("NetworkSecurityGroup", ["properties", "networkSecurityGroup"]);
        _routeTable = DefineModelProperty<RouteTableData>("RouteTable", ["properties", "routeTable"]);
        _natGatewayId = DefineProperty<ResourceIdentifier>("NatGatewayId", ["properties", "natGateway", "id"]);
        _serviceEndpoints = DefineListProperty<ServiceEndpointProperties>("ServiceEndpoints", ["properties", "serviceEndpoints"]);
        _serviceEndpointPolicies = DefineListProperty<ServiceEndpointPolicyData>("ServiceEndpointPolicies", ["properties", "serviceEndpointPolicies"]);
        _privateEndpoints = DefineListProperty<PrivateEndpointData>("PrivateEndpoints", ["properties", "privateEndpoints"], isOutput: true);
        _iPConfigurations = DefineListProperty<NetworkIPConfiguration>("IPConfigurations", ["properties", "ipConfigurations"], isOutput: true);
        _iPConfigurationProfiles = DefineListProperty<NetworkIPConfigurationProfile>("IPConfigurationProfiles", ["properties", "ipConfigurationProfiles"], isOutput: true);
        _iPAllocations = DefineListProperty<WritableSubResource>("IPAllocations", ["properties", "ipAllocations"]);
        _resourceNavigationLinks = DefineListProperty<ResourceNavigationLink>("ResourceNavigationLinks", ["properties", "resourceNavigationLinks"], isOutput: true);
        _serviceAssociationLinks = DefineListProperty<ServiceAssociationLink>("ServiceAssociationLinks", ["properties", "serviceAssociationLinks"], isOutput: true);
        _delegations = DefineListProperty<ServiceDelegation>("Delegations", ["properties", "delegations"]);
        _purpose = DefineProperty<string>("Purpose", ["properties", "purpose"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _privateEndpointNetworkPolicy = DefineProperty<VirtualNetworkPrivateEndpointNetworkPolicy>("PrivateEndpointNetworkPolicy", ["properties", "privateEndpointNetworkPolicies"]);
        _privateLinkServiceNetworkPolicy = DefineProperty<VirtualNetworkPrivateLinkServiceNetworkPolicy>("PrivateLinkServiceNetworkPolicy", ["properties", "privateLinkServiceNetworkPolicies"]);
        _applicationGatewayIPConfigurations = DefineListProperty<ApplicationGatewayIPConfiguration>("ApplicationGatewayIPConfigurations", ["properties", "applicationGatewayIPConfigurations"]);
        _sharingScope = DefineProperty<SharingScope>("SharingScope", ["properties", "sharingScope"]);
        _defaultOutboundAccess = DefineProperty<bool>("DefaultOutboundAccess", ["properties", "defaultOutboundAccess"]);
        _ipamPoolPrefixAllocations = DefineListProperty<IpamPoolPrefixAllocation>("IpamPoolPrefixAllocations", ["properties", "ipamPoolPrefixAllocations"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"]);
    }
}
