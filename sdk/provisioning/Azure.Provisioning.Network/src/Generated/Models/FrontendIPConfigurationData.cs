// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the FrontendIPConfiguration data model.
/// Frontend IP address of the load balancer.
/// </summary>
public partial class FrontendIPConfigurationData : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// A list of availability zones denoting the IP allocated for the resource
    /// needs to come from.
    /// </summary>
    public BicepList<string> Zones 
    {
        get { Initialize(); return _zones!; }
        set { Initialize(); _zones!.Assign(value); }
    }
    private BicepList<string>? _zones;

    /// <summary>
    /// An array of references to inbound rules that use this frontend IP.
    /// </summary>
    public BicepList<WritableSubResource> InboundNatRules 
    {
        get { Initialize(); return _inboundNatRules!; }
    }
    private BicepList<WritableSubResource>? _inboundNatRules;

    /// <summary>
    /// An array of references to inbound pools that use this frontend IP.
    /// </summary>
    public BicepList<WritableSubResource> InboundNatPools 
    {
        get { Initialize(); return _inboundNatPools!; }
    }
    private BicepList<WritableSubResource>? _inboundNatPools;

    /// <summary>
    /// An array of references to outbound rules that use this frontend IP.
    /// </summary>
    public BicepList<WritableSubResource> OutboundRules 
    {
        get { Initialize(); return _outboundRules!; }
    }
    private BicepList<WritableSubResource>? _outboundRules;

    /// <summary>
    /// An array of references to load balancing rules that use this frontend
    /// IP.
    /// </summary>
    public BicepList<WritableSubResource> LoadBalancingRules 
    {
        get { Initialize(); return _loadBalancingRules!; }
    }
    private BicepList<WritableSubResource>? _loadBalancingRules;

    /// <summary>
    /// The private IP address of the IP configuration.
    /// </summary>
    public BicepValue<string> PrivateIPAddress 
    {
        get { Initialize(); return _privateIPAddress!; }
        set { Initialize(); _privateIPAddress!.Assign(value); }
    }
    private BicepValue<string>? _privateIPAddress;

    /// <summary>
    /// The Private IP allocation method.
    /// </summary>
    public BicepValue<NetworkIPAllocationMethod> PrivateIPAllocationMethod 
    {
        get { Initialize(); return _privateIPAllocationMethod!; }
        set { Initialize(); _privateIPAllocationMethod!.Assign(value); }
    }
    private BicepValue<NetworkIPAllocationMethod>? _privateIPAllocationMethod;

    /// <summary>
    /// Whether the specific ipconfiguration is IPv4 or IPv6. Default is taken
    /// as IPv4.
    /// </summary>
    public BicepValue<NetworkIPVersion> PrivateIPAddressVersion 
    {
        get { Initialize(); return _privateIPAddressVersion!; }
        set { Initialize(); _privateIPAddressVersion!.Assign(value); }
    }
    private BicepValue<NetworkIPVersion>? _privateIPAddressVersion;

    /// <summary>
    /// The reference to the subnet resource.
    /// </summary>
    public SubnetData Subnet 
    {
        get { Initialize(); return _subnet!; }
        set { Initialize(); AssignOrReplace(ref _subnet, value); }
    }
    private SubnetData? _subnet;

    /// <summary>
    /// The reference to the Public IP resource.
    /// </summary>
    public PublicIPAddressData PublicIPAddress 
    {
        get { Initialize(); return _publicIPAddress!; }
        set { Initialize(); AssignOrReplace(ref _publicIPAddress, value); }
    }
    private PublicIPAddressData? _publicIPAddress;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> PublicIPPrefixId 
    {
        get { Initialize(); return _publicIPPrefixId!; }
        set { Initialize(); _publicIPPrefixId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _publicIPPrefixId;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> GatewayLoadBalancerId 
    {
        get { Initialize(); return _gatewayLoadBalancerId!; }
        set { Initialize(); _gatewayLoadBalancerId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _gatewayLoadBalancerId;

    /// <summary>
    /// The provisioning state of the frontend IP configuration resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new FrontendIPConfigurationData.
    /// </summary>
    public FrontendIPConfigurationData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of FrontendIPConfigurationData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _zones = DefineListProperty<string>("Zones", ["zones"]);
        _inboundNatRules = DefineListProperty<WritableSubResource>("InboundNatRules", ["properties", "inboundNatRules"], isOutput: true);
        _inboundNatPools = DefineListProperty<WritableSubResource>("InboundNatPools", ["properties", "inboundNatPools"], isOutput: true);
        _outboundRules = DefineListProperty<WritableSubResource>("OutboundRules", ["properties", "outboundRules"], isOutput: true);
        _loadBalancingRules = DefineListProperty<WritableSubResource>("LoadBalancingRules", ["properties", "loadBalancingRules"], isOutput: true);
        _privateIPAddress = DefineProperty<string>("PrivateIPAddress", ["properties", "privateIPAddress"]);
        _privateIPAllocationMethod = DefineProperty<NetworkIPAllocationMethod>("PrivateIPAllocationMethod", ["properties", "privateIPAllocationMethod"]);
        _privateIPAddressVersion = DefineProperty<NetworkIPVersion>("PrivateIPAddressVersion", ["properties", "privateIPAddressVersion"]);
        _subnet = DefineModelProperty<SubnetData>("Subnet", ["properties", "subnet"]);
        _publicIPAddress = DefineModelProperty<PublicIPAddressData>("PublicIPAddress", ["properties", "publicIPAddress"]);
        _publicIPPrefixId = DefineProperty<ResourceIdentifier>("PublicIPPrefixId", ["properties", "publicIPPrefix", "id"]);
        _gatewayLoadBalancerId = DefineProperty<ResourceIdentifier>("GatewayLoadBalancerId", ["properties", "gatewayLoadBalancer", "id"]);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"], isOutput: true);
    }
}
