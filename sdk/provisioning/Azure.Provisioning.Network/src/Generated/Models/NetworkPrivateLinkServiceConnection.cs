// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// PrivateLinkServiceConnection resource.
/// </summary>
public partial class NetworkPrivateLinkServiceConnection : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// The provisioning state of the private link service connection resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// The resource id of private link service.
    /// </summary>
    public BicepValue<ResourceIdentifier> PrivateLinkServiceId 
    {
        get { Initialize(); return _privateLinkServiceId!; }
        set { Initialize(); _privateLinkServiceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _privateLinkServiceId;

    /// <summary>
    /// The ID(s) of the group(s) obtained from the remote resource that this
    /// private endpoint should connect to.
    /// </summary>
    public BicepList<string> GroupIds 
    {
        get { Initialize(); return _groupIds!; }
        set { Initialize(); _groupIds!.Assign(value); }
    }
    private BicepList<string>? _groupIds;

    /// <summary>
    /// A message passed to the owner of the remote resource with this
    /// connection request. Restricted to 140 chars.
    /// </summary>
    public BicepValue<string> RequestMessage 
    {
        get { Initialize(); return _requestMessage!; }
        set { Initialize(); _requestMessage!.Assign(value); }
    }
    private BicepValue<string>? _requestMessage;

    /// <summary>
    /// A collection of read-only information about the state of the connection
    /// to the remote resource.
    /// </summary>
    public NetworkPrivateLinkServiceConnectionState ConnectionState 
    {
        get { Initialize(); return _connectionState!; }
        set { Initialize(); AssignOrReplace(ref _connectionState, value); }
    }
    private NetworkPrivateLinkServiceConnectionState? _connectionState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new NetworkPrivateLinkServiceConnection.
    /// </summary>
    public NetworkPrivateLinkServiceConnection()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// NetworkPrivateLinkServiceConnection.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _privateLinkServiceId = DefineProperty<ResourceIdentifier>("PrivateLinkServiceId", ["PrivateLinkServiceId"]);
        _groupIds = DefineListProperty<string>("GroupIds", ["GroupIds"]);
        _requestMessage = DefineProperty<string>("RequestMessage", ["RequestMessage"]);
        _connectionState = DefineModelProperty<NetworkPrivateLinkServiceConnectionState>("ConnectionState", ["ConnectionState"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["ResourceType"], isOutput: true);
    }
}
