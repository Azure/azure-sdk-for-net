// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the NatGateway data model.             Nat Gateway
/// resource.
/// </summary>
public partial class NatGatewayData : ProvisionableConstruct
{
    /// <summary>
    /// Name of Nat Gateway SKU.
    /// </summary>
    public BicepValue<NatGatewaySkuName> SkuName 
    {
        get { Initialize(); return _skuName!; }
        set { Initialize(); _skuName!.Assign(value); }
    }
    private BicepValue<NatGatewaySkuName>? _skuName;

    /// <summary>
    /// A list of availability zones denoting the zone in which Nat Gateway
    /// should be deployed.
    /// </summary>
    public BicepList<string> Zones 
    {
        get { Initialize(); return _zones!; }
        set { Initialize(); _zones!.Assign(value); }
    }
    private BicepList<string>? _zones;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// The idle timeout of the nat gateway.
    /// </summary>
    public BicepValue<int> IdleTimeoutInMinutes 
    {
        get { Initialize(); return _idleTimeoutInMinutes!; }
        set { Initialize(); _idleTimeoutInMinutes!.Assign(value); }
    }
    private BicepValue<int>? _idleTimeoutInMinutes;

    /// <summary>
    /// An array of public ip addresses V4 associated with the nat gateway
    /// resource.
    /// </summary>
    public BicepList<WritableSubResource> PublicIPAddresses 
    {
        get { Initialize(); return _publicIPAddresses!; }
        set { Initialize(); _publicIPAddresses!.Assign(value); }
    }
    private BicepList<WritableSubResource>? _publicIPAddresses;

    /// <summary>
    /// An array of public ip addresses V6 associated with the nat gateway
    /// resource.
    /// </summary>
    public BicepList<WritableSubResource> PublicIPAddressesV6 
    {
        get { Initialize(); return _publicIPAddressesV6!; }
        set { Initialize(); _publicIPAddressesV6!.Assign(value); }
    }
    private BicepList<WritableSubResource>? _publicIPAddressesV6;

    /// <summary>
    /// An array of public ip prefixes V4 associated with the nat gateway
    /// resource.
    /// </summary>
    public BicepList<WritableSubResource> PublicIPPrefixes 
    {
        get { Initialize(); return _publicIPPrefixes!; }
        set { Initialize(); _publicIPPrefixes!.Assign(value); }
    }
    private BicepList<WritableSubResource>? _publicIPPrefixes;

    /// <summary>
    /// An array of public ip prefixes V6 associated with the nat gateway
    /// resource.
    /// </summary>
    public BicepList<WritableSubResource> PublicIPPrefixesV6 
    {
        get { Initialize(); return _publicIPPrefixesV6!; }
        set { Initialize(); _publicIPPrefixesV6!.Assign(value); }
    }
    private BicepList<WritableSubResource>? _publicIPPrefixesV6;

    /// <summary>
    /// An array of references to the subnets using this nat gateway resource.
    /// </summary>
    public BicepList<WritableSubResource> Subnets 
    {
        get { Initialize(); return _subnets!; }
    }
    private BicepList<WritableSubResource>? _subnets;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> SourceVirtualNetworkId 
    {
        get { Initialize(); return _sourceVirtualNetworkId!; }
        set { Initialize(); _sourceVirtualNetworkId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _sourceVirtualNetworkId;

    /// <summary>
    /// The resource GUID property of the NAT gateway resource.
    /// </summary>
    public BicepValue<Guid> ResourceGuid 
    {
        get { Initialize(); return _resourceGuid!; }
    }
    private BicepValue<Guid>? _resourceGuid;

    /// <summary>
    /// The provisioning state of the NAT gateway resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Creates a new NatGatewayData.
    /// </summary>
    public NatGatewayData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of NatGatewayData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _skuName = DefineProperty<NatGatewaySkuName>("SkuName", ["SkuName"]);
        _zones = DefineListProperty<string>("Zones", ["Zones"]);
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _idleTimeoutInMinutes = DefineProperty<int>("IdleTimeoutInMinutes", ["IdleTimeoutInMinutes"]);
        _publicIPAddresses = DefineListProperty<WritableSubResource>("PublicIPAddresses", ["PublicIPAddresses"]);
        _publicIPAddressesV6 = DefineListProperty<WritableSubResource>("PublicIPAddressesV6", ["PublicIPAddressesV6"]);
        _publicIPPrefixes = DefineListProperty<WritableSubResource>("PublicIPPrefixes", ["PublicIPPrefixes"]);
        _publicIPPrefixesV6 = DefineListProperty<WritableSubResource>("PublicIPPrefixesV6", ["PublicIPPrefixesV6"]);
        _subnets = DefineListProperty<WritableSubResource>("Subnets", ["Subnets"], isOutput: true);
        _sourceVirtualNetworkId = DefineProperty<ResourceIdentifier>("SourceVirtualNetworkId", ["SourceVirtualNetworkId"]);
        _resourceGuid = DefineProperty<Guid>("ResourceGuid", ["ResourceGuid"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"], isOutput: true);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["ResourceType"], isOutput: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
    }
}
