// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the NetworkSecurityGroup data model.
/// NetworkSecurityGroup resource.
/// </summary>
public partial class NetworkSecurityGroupData : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// When enabled, flows created from Network Security Group connections
    /// will be re-evaluated when rules are updates. Initial enablement will
    /// trigger re-evaluation.
    /// </summary>
    public BicepValue<bool> FlushConnection 
    {
        get { Initialize(); return _flushConnection!; }
        set { Initialize(); _flushConnection!.Assign(value); }
    }
    private BicepValue<bool>? _flushConnection;

    /// <summary>
    /// A collection of security rules of the network security group.
    /// </summary>
    public BicepList<SecurityRuleData> SecurityRules 
    {
        get { Initialize(); return _securityRules!; }
        set { Initialize(); _securityRules!.Assign(value); }
    }
    private BicepList<SecurityRuleData>? _securityRules;

    /// <summary>
    /// The default security rules of network security group.
    /// </summary>
    public BicepList<SecurityRuleData> DefaultSecurityRules 
    {
        get { Initialize(); return _defaultSecurityRules!; }
    }
    private BicepList<SecurityRuleData>? _defaultSecurityRules;

    /// <summary>
    /// A collection of references to network interfaces.
    /// </summary>
    public BicepList<NetworkInterfaceData> NetworkInterfaces 
    {
        get { Initialize(); return _networkInterfaces!; }
    }
    private BicepList<NetworkInterfaceData>? _networkInterfaces;

    /// <summary>
    /// A collection of references to subnets.
    /// </summary>
    public BicepList<SubnetData> Subnets 
    {
        get { Initialize(); return _subnets!; }
    }
    private BicepList<SubnetData>? _subnets;

    /// <summary>
    /// A collection of references to flow log resources.
    /// </summary>
    public BicepList<FlowLogData> FlowLogs 
    {
        get { Initialize(); return _flowLogs!; }
    }
    private BicepList<FlowLogData>? _flowLogs;

    /// <summary>
    /// The resource GUID property of the network security group resource.
    /// </summary>
    public BicepValue<Guid> ResourceGuid 
    {
        get { Initialize(); return _resourceGuid!; }
    }
    private BicepValue<Guid>? _resourceGuid;

    /// <summary>
    /// The provisioning state of the network security group resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Creates a new NetworkSecurityGroupData.
    /// </summary>
    public NetworkSecurityGroupData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of NetworkSecurityGroupData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _flushConnection = DefineProperty<bool>("FlushConnection", ["FlushConnection"]);
        _securityRules = DefineListProperty<SecurityRuleData>("SecurityRules", ["SecurityRules"]);
        _defaultSecurityRules = DefineListProperty<SecurityRuleData>("DefaultSecurityRules", ["DefaultSecurityRules"], isOutput: true);
        _networkInterfaces = DefineListProperty<NetworkInterfaceData>("NetworkInterfaces", ["NetworkInterfaces"], isOutput: true);
        _subnets = DefineListProperty<SubnetData>("Subnets", ["Subnets"], isOutput: true);
        _flowLogs = DefineListProperty<FlowLogData>("FlowLogs", ["FlowLogs"], isOutput: true);
        _resourceGuid = DefineProperty<Guid>("ResourceGuid", ["ResourceGuid"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"], isOutput: true);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["ResourceType"], isOutput: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
    }
}
