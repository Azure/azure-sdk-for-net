// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// Parameters that define the configuration of traffic analytics.
/// </summary>
public partial class TrafficAnalyticsConfigurationProperties : ProvisionableConstruct
{
    /// <summary>
    /// Flag to enable/disable traffic analytics.
    /// </summary>
    public BicepValue<bool> Enabled 
    {
        get { Initialize(); return _enabled!; }
        set { Initialize(); _enabled!.Assign(value); }
    }
    private BicepValue<bool>? _enabled;

    /// <summary>
    /// The resource guid of the attached workspace.
    /// </summary>
    public BicepValue<string> WorkspaceId 
    {
        get { Initialize(); return _workspaceId!; }
        set { Initialize(); _workspaceId!.Assign(value); }
    }
    private BicepValue<string>? _workspaceId;

    /// <summary>
    /// The location of the attached workspace.
    /// </summary>
    public BicepValue<string> WorkspaceRegion 
    {
        get { Initialize(); return _workspaceRegion!; }
        set { Initialize(); _workspaceRegion!.Assign(value); }
    }
    private BicepValue<string>? _workspaceRegion;

    /// <summary>
    /// Resource Id of the attached workspace.
    /// </summary>
    public BicepValue<ResourceIdentifier> WorkspaceResourceId 
    {
        get { Initialize(); return _workspaceResourceId!; }
        set { Initialize(); _workspaceResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _workspaceResourceId;

    /// <summary>
    /// The interval in minutes which would decide how frequently TA service
    /// should do flow analytics.
    /// </summary>
    public BicepValue<int> TrafficAnalyticsIntervalInMinutes 
    {
        get { Initialize(); return _trafficAnalyticsIntervalInMinutes!; }
        set { Initialize(); _trafficAnalyticsIntervalInMinutes!.Assign(value); }
    }
    private BicepValue<int>? _trafficAnalyticsIntervalInMinutes;

    /// <summary>
    /// Creates a new TrafficAnalyticsConfigurationProperties.
    /// </summary>
    public TrafficAnalyticsConfigurationProperties()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// TrafficAnalyticsConfigurationProperties.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _enabled = DefineProperty<bool>("Enabled", ["Enabled"]);
        _workspaceId = DefineProperty<string>("WorkspaceId", ["WorkspaceId"]);
        _workspaceRegion = DefineProperty<string>("WorkspaceRegion", ["WorkspaceRegion"]);
        _workspaceResourceId = DefineProperty<ResourceIdentifier>("WorkspaceResourceId", ["WorkspaceResourceId"]);
        _trafficAnalyticsIntervalInMinutes = DefineProperty<int>("TrafficAnalyticsIntervalInMinutes", ["TrafficAnalyticsIntervalInMinutes"]);
    }
}
