// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the PrivateLinkService data model.             Private
/// link service resource.
/// </summary>
public partial class PrivateLinkServiceData : ProvisionableConstruct
{
    /// <summary>
    /// The extended location of the load balancer.
    /// </summary>
    public ExtendedAzureLocation ExtendedLocation 
    {
        get { Initialize(); return _extendedLocation!; }
        set { Initialize(); AssignOrReplace(ref _extendedLocation, value); }
    }
    private ExtendedAzureLocation? _extendedLocation;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// An array of references to the load balancer IP configurations.
    /// </summary>
    public BicepList<FrontendIPConfigurationData> LoadBalancerFrontendIPConfigurations 
    {
        get { Initialize(); return _loadBalancerFrontendIPConfigurations!; }
        set { Initialize(); _loadBalancerFrontendIPConfigurations!.Assign(value); }
    }
    private BicepList<FrontendIPConfigurationData>? _loadBalancerFrontendIPConfigurations;

    /// <summary>
    /// An array of private link service IP configurations.
    /// </summary>
    public BicepList<PrivateLinkServiceIPConfiguration> IPConfigurations 
    {
        get { Initialize(); return _iPConfigurations!; }
        set { Initialize(); _iPConfigurations!.Assign(value); }
    }
    private BicepList<PrivateLinkServiceIPConfiguration>? _iPConfigurations;

    /// <summary>
    /// The destination IP address of the private link service.
    /// </summary>
    public BicepValue<string> DestinationIPAddress 
    {
        get { Initialize(); return _destinationIPAddress!; }
        set { Initialize(); _destinationIPAddress!.Assign(value); }
    }
    private BicepValue<string>? _destinationIPAddress;

    /// <summary>
    /// An array of references to the network interfaces created for this
    /// private link service.
    /// </summary>
    public BicepList<NetworkInterfaceData> NetworkInterfaces 
    {
        get { Initialize(); return _networkInterfaces!; }
    }
    private BicepList<NetworkInterfaceData>? _networkInterfaces;

    /// <summary>
    /// The provisioning state of the private link service resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// An array of list about connections to the private endpoint.
    /// </summary>
    public BicepList<NetworkPrivateEndpointConnectionData> PrivateEndpointConnections 
    {
        get { Initialize(); return _privateEndpointConnections!; }
    }
    private BicepList<NetworkPrivateEndpointConnectionData>? _privateEndpointConnections;

    /// <summary>
    /// The list of subscriptions.
    /// </summary>
    public BicepList<string> VisibilitySubscriptions 
    {
        get { Initialize(); return _visibilitySubscriptions!; }
        set { Initialize(); _visibilitySubscriptions!.Assign(value); }
    }
    private BicepList<string>? _visibilitySubscriptions;

    /// <summary>
    /// The list of subscriptions.
    /// </summary>
    public BicepList<string> AutoApprovalSubscriptions 
    {
        get { Initialize(); return _autoApprovalSubscriptions!; }
        set { Initialize(); _autoApprovalSubscriptions!.Assign(value); }
    }
    private BicepList<string>? _autoApprovalSubscriptions;

    /// <summary>
    /// The list of Fqdn.
    /// </summary>
    public BicepList<string> Fqdns 
    {
        get { Initialize(); return _fqdns!; }
        set { Initialize(); _fqdns!.Assign(value); }
    }
    private BicepList<string>? _fqdns;

    /// <summary>
    /// The alias of the private link service.
    /// </summary>
    public BicepValue<string> Alias 
    {
        get { Initialize(); return _alias!; }
    }
    private BicepValue<string>? _alias;

    /// <summary>
    /// Whether the private link service is enabled for proxy protocol or not.
    /// </summary>
    public BicepValue<bool> EnableProxyProtocol 
    {
        get { Initialize(); return _enableProxyProtocol!; }
        set { Initialize(); _enableProxyProtocol!.Assign(value); }
    }
    private BicepValue<bool>? _enableProxyProtocol;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Creates a new PrivateLinkServiceData.
    /// </summary>
    public PrivateLinkServiceData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of PrivateLinkServiceData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _extendedLocation = DefineModelProperty<ExtendedAzureLocation>("ExtendedLocation", ["ExtendedLocation"]);
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _loadBalancerFrontendIPConfigurations = DefineListProperty<FrontendIPConfigurationData>("LoadBalancerFrontendIPConfigurations", ["LoadBalancerFrontendIPConfigurations"]);
        _iPConfigurations = DefineListProperty<PrivateLinkServiceIPConfiguration>("IPConfigurations", ["IPConfigurations"]);
        _destinationIPAddress = DefineProperty<string>("DestinationIPAddress", ["DestinationIPAddress"]);
        _networkInterfaces = DefineListProperty<NetworkInterfaceData>("NetworkInterfaces", ["NetworkInterfaces"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _privateEndpointConnections = DefineListProperty<NetworkPrivateEndpointConnectionData>("PrivateEndpointConnections", ["PrivateEndpointConnections"], isOutput: true);
        _visibilitySubscriptions = DefineListProperty<string>("VisibilitySubscriptions", ["VisibilitySubscriptions"]);
        _autoApprovalSubscriptions = DefineListProperty<string>("AutoApprovalSubscriptions", ["AutoApprovalSubscriptions"]);
        _fqdns = DefineListProperty<string>("Fqdns", ["Fqdns"]);
        _alias = DefineProperty<string>("Alias", ["Alias"], isOutput: true);
        _enableProxyProtocol = DefineProperty<bool>("EnableProxyProtocol", ["EnableProxyProtocol"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"], isOutput: true);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["ResourceType"], isOutput: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
    }
}
