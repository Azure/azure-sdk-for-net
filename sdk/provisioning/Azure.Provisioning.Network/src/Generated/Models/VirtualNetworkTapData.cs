// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the VirtualNetworkTap data model.             Virtual
/// Network Tap resource.
/// </summary>
public partial class VirtualNetworkTapData : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// Specifies the list of resource IDs for the network interface IP
    /// configuration that needs to be tapped.
    /// </summary>
    public BicepList<NetworkInterfaceTapConfigurationData> NetworkInterfaceTapConfigurations 
    {
        get { Initialize(); return _networkInterfaceTapConfigurations!; }
    }
    private BicepList<NetworkInterfaceTapConfigurationData>? _networkInterfaceTapConfigurations;

    /// <summary>
    /// The resource GUID property of the virtual network tap resource.
    /// </summary>
    public BicepValue<Guid> ResourceGuid 
    {
        get { Initialize(); return _resourceGuid!; }
    }
    private BicepValue<Guid>? _resourceGuid;

    /// <summary>
    /// The provisioning state of the virtual network tap resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// The reference to the private IP Address of the collector nic that will
    /// receive the tap.
    /// </summary>
    public NetworkInterfaceIPConfigurationData DestinationNetworkInterfaceIPConfiguration 
    {
        get { Initialize(); return _destinationNetworkInterfaceIPConfiguration!; }
        set { Initialize(); AssignOrReplace(ref _destinationNetworkInterfaceIPConfiguration, value); }
    }
    private NetworkInterfaceIPConfigurationData? _destinationNetworkInterfaceIPConfiguration;

    /// <summary>
    /// The reference to the private IP address on the internal Load Balancer
    /// that will receive the tap.
    /// </summary>
    public FrontendIPConfigurationData DestinationLoadBalancerFrontEndIPConfiguration 
    {
        get { Initialize(); return _destinationLoadBalancerFrontEndIPConfiguration!; }
        set { Initialize(); AssignOrReplace(ref _destinationLoadBalancerFrontEndIPConfiguration, value); }
    }
    private FrontendIPConfigurationData? _destinationLoadBalancerFrontEndIPConfiguration;

    /// <summary>
    /// The VXLAN destination port that will receive the tapped traffic.
    /// </summary>
    public BicepValue<int> DestinationPort 
    {
        get { Initialize(); return _destinationPort!; }
        set { Initialize(); _destinationPort!.Assign(value); }
    }
    private BicepValue<int>? _destinationPort;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Creates a new VirtualNetworkTapData.
    /// </summary>
    public VirtualNetworkTapData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of VirtualNetworkTapData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _networkInterfaceTapConfigurations = DefineListProperty<NetworkInterfaceTapConfigurationData>("NetworkInterfaceTapConfigurations", ["properties", "networkInterfaceTapConfigurations"], isOutput: true);
        _resourceGuid = DefineProperty<Guid>("ResourceGuid", ["properties", "resourceGuid"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _destinationNetworkInterfaceIPConfiguration = DefineModelProperty<NetworkInterfaceIPConfigurationData>("DestinationNetworkInterfaceIPConfiguration", ["properties", "destinationNetworkInterfaceIPConfiguration"]);
        _destinationLoadBalancerFrontEndIPConfiguration = DefineModelProperty<FrontendIPConfigurationData>("DestinationLoadBalancerFrontEndIPConfiguration", ["properties", "destinationLoadBalancerFrontEndIPConfiguration"]);
        _destinationPort = DefineProperty<int>("DestinationPort", ["properties", "destinationPort"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"], isOutput: true);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"], isOutput: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
    }
}
