// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the NetworkInterface data model.             A network
/// interface in a resource group.
/// </summary>
public partial class NetworkInterfaceData : ProvisionableConstruct
{
    /// <summary>
    /// The extended location of the network interface.
    /// </summary>
    public ExtendedAzureLocation ExtendedLocation 
    {
        get { Initialize(); return _extendedLocation!; }
        set { Initialize(); AssignOrReplace(ref _extendedLocation, value); }
    }
    private ExtendedAzureLocation? _extendedLocation;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> VirtualMachineId 
    {
        get { Initialize(); return _virtualMachineId!; }
    }
    private BicepValue<ResourceIdentifier>? _virtualMachineId;

    /// <summary>
    /// The reference to the NetworkSecurityGroup resource.
    /// </summary>
    public NetworkSecurityGroupData NetworkSecurityGroup 
    {
        get { Initialize(); return _networkSecurityGroup!; }
        set { Initialize(); AssignOrReplace(ref _networkSecurityGroup, value); }
    }
    private NetworkSecurityGroupData? _networkSecurityGroup;

    /// <summary>
    /// A reference to the private endpoint to which the network interface is
    /// linked.
    /// </summary>
    public PrivateEndpointData PrivateEndpoint 
    {
        get { Initialize(); return _privateEndpoint!; }
    }
    private PrivateEndpointData? _privateEndpoint;

    /// <summary>
    /// A list of IPConfigurations of the network interface.
    /// </summary>
    public BicepList<NetworkInterfaceIPConfigurationData> IPConfigurations 
    {
        get { Initialize(); return _iPConfigurations!; }
        set { Initialize(); _iPConfigurations!.Assign(value); }
    }
    private BicepList<NetworkInterfaceIPConfigurationData>? _iPConfigurations;

    /// <summary>
    /// A list of TapConfigurations of the network interface.
    /// </summary>
    public BicepList<NetworkInterfaceTapConfigurationData> TapConfigurations 
    {
        get { Initialize(); return _tapConfigurations!; }
    }
    private BicepList<NetworkInterfaceTapConfigurationData>? _tapConfigurations;

    /// <summary>
    /// The DNS settings in network interface.
    /// </summary>
    public NetworkInterfaceDnsSettings DnsSettings 
    {
        get { Initialize(); return _dnsSettings!; }
        set { Initialize(); AssignOrReplace(ref _dnsSettings, value); }
    }
    private NetworkInterfaceDnsSettings? _dnsSettings;

    /// <summary>
    /// The MAC address of the network interface.
    /// </summary>
    public BicepValue<string> MacAddress 
    {
        get { Initialize(); return _macAddress!; }
    }
    private BicepValue<string>? _macAddress;

    /// <summary>
    /// Whether this is a primary network interface on a virtual machine.
    /// </summary>
    public BicepValue<bool> Primary 
    {
        get { Initialize(); return _primary!; }
    }
    private BicepValue<bool>? _primary;

    /// <summary>
    /// Whether the virtual machine this nic is attached to supports encryption.
    /// </summary>
    public BicepValue<bool> VnetEncryptionSupported 
    {
        get { Initialize(); return _vnetEncryptionSupported!; }
    }
    private BicepValue<bool>? _vnetEncryptionSupported;

    /// <summary>
    /// Whether default outbound connectivity for nic was configured or not.
    /// </summary>
    public BicepValue<bool> DefaultOutboundConnectivityEnabled 
    {
        get { Initialize(); return _defaultOutboundConnectivityEnabled!; }
    }
    private BicepValue<bool>? _defaultOutboundConnectivityEnabled;

    /// <summary>
    /// If the network interface is configured for accelerated networking. Not
    /// applicable to VM sizes which require accelerated networking.
    /// </summary>
    public BicepValue<bool> EnableAcceleratedNetworking 
    {
        get { Initialize(); return _enableAcceleratedNetworking!; }
        set { Initialize(); _enableAcceleratedNetworking!.Assign(value); }
    }
    private BicepValue<bool>? _enableAcceleratedNetworking;

    /// <summary>
    /// Indicates whether to disable tcp state tracking.
    /// </summary>
    public BicepValue<bool> DisableTcpStateTracking 
    {
        get { Initialize(); return _disableTcpStateTracking!; }
        set { Initialize(); _disableTcpStateTracking!.Assign(value); }
    }
    private BicepValue<bool>? _disableTcpStateTracking;

    /// <summary>
    /// Indicates whether IP forwarding is enabled on this network interface.
    /// </summary>
    public BicepValue<bool> EnableIPForwarding 
    {
        get { Initialize(); return _enableIPForwarding!; }
        set { Initialize(); _enableIPForwarding!.Assign(value); }
    }
    private BicepValue<bool>? _enableIPForwarding;

    /// <summary>
    /// A list of references to linked BareMetal resources.
    /// </summary>
    public BicepList<string> HostedWorkloads 
    {
        get { Initialize(); return _hostedWorkloads!; }
    }
    private BicepList<string>? _hostedWorkloads;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> DscpConfigurationId 
    {
        get { Initialize(); return _dscpConfigurationId!; }
    }
    private BicepValue<ResourceIdentifier>? _dscpConfigurationId;

    /// <summary>
    /// The resource GUID property of the network interface resource.
    /// </summary>
    public BicepValue<Guid> ResourceGuid 
    {
        get { Initialize(); return _resourceGuid!; }
    }
    private BicepValue<Guid>? _resourceGuid;

    /// <summary>
    /// The provisioning state of the network interface resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// WorkloadType of the NetworkInterface for BareMetal resources.
    /// </summary>
    public BicepValue<string> WorkloadType 
    {
        get { Initialize(); return _workloadType!; }
        set { Initialize(); _workloadType!.Assign(value); }
    }
    private BicepValue<string>? _workloadType;

    /// <summary>
    /// Type of Network Interface resource.
    /// </summary>
    public BicepValue<NetworkInterfaceNicType> NicType 
    {
        get { Initialize(); return _nicType!; }
        set { Initialize(); _nicType!.Assign(value); }
    }
    private BicepValue<NetworkInterfaceNicType>? _nicType;

    /// <summary>
    /// Privatelinkservice of the network interface resource.
    /// </summary>
    public PrivateLinkServiceData PrivateLinkService 
    {
        get { Initialize(); return _privateLinkService!; }
        set { Initialize(); AssignOrReplace(ref _privateLinkService, value); }
    }
    private PrivateLinkServiceData? _privateLinkService;

    /// <summary>
    /// Migration phase of Network Interface resource.
    /// </summary>
    public BicepValue<NetworkInterfaceMigrationPhase> MigrationPhase 
    {
        get { Initialize(); return _migrationPhase!; }
        set { Initialize(); _migrationPhase!.Assign(value); }
    }
    private BicepValue<NetworkInterfaceMigrationPhase>? _migrationPhase;

    /// <summary>
    /// Auxiliary mode of Network Interface resource.
    /// </summary>
    public BicepValue<NetworkInterfaceAuxiliaryMode> AuxiliaryMode 
    {
        get { Initialize(); return _auxiliaryMode!; }
        set { Initialize(); _auxiliaryMode!.Assign(value); }
    }
    private BicepValue<NetworkInterfaceAuxiliaryMode>? _auxiliaryMode;

    /// <summary>
    /// Auxiliary sku of Network Interface resource.
    /// </summary>
    public BicepValue<NetworkInterfaceAuxiliarySku> AuxiliarySku 
    {
        get { Initialize(); return _auxiliarySku!; }
        set { Initialize(); _auxiliarySku!.Assign(value); }
    }
    private BicepValue<NetworkInterfaceAuxiliarySku>? _auxiliarySku;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Creates a new NetworkInterfaceData.
    /// </summary>
    public NetworkInterfaceData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of NetworkInterfaceData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _extendedLocation = DefineModelProperty<ExtendedAzureLocation>("ExtendedLocation", ["ExtendedLocation"]);
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _virtualMachineId = DefineProperty<ResourceIdentifier>("VirtualMachineId", ["VirtualMachineId"], isOutput: true);
        _networkSecurityGroup = DefineModelProperty<NetworkSecurityGroupData>("NetworkSecurityGroup", ["NetworkSecurityGroup"]);
        _privateEndpoint = DefineModelProperty<PrivateEndpointData>("PrivateEndpoint", ["PrivateEndpoint"], isOutput: true);
        _iPConfigurations = DefineListProperty<NetworkInterfaceIPConfigurationData>("IPConfigurations", ["IPConfigurations"]);
        _tapConfigurations = DefineListProperty<NetworkInterfaceTapConfigurationData>("TapConfigurations", ["TapConfigurations"], isOutput: true);
        _dnsSettings = DefineModelProperty<NetworkInterfaceDnsSettings>("DnsSettings", ["DnsSettings"]);
        _macAddress = DefineProperty<string>("MacAddress", ["MacAddress"], isOutput: true);
        _primary = DefineProperty<bool>("Primary", ["Primary"], isOutput: true);
        _vnetEncryptionSupported = DefineProperty<bool>("VnetEncryptionSupported", ["VnetEncryptionSupported"], isOutput: true);
        _defaultOutboundConnectivityEnabled = DefineProperty<bool>("DefaultOutboundConnectivityEnabled", ["DefaultOutboundConnectivityEnabled"], isOutput: true);
        _enableAcceleratedNetworking = DefineProperty<bool>("EnableAcceleratedNetworking", ["EnableAcceleratedNetworking"]);
        _disableTcpStateTracking = DefineProperty<bool>("DisableTcpStateTracking", ["DisableTcpStateTracking"]);
        _enableIPForwarding = DefineProperty<bool>("EnableIPForwarding", ["EnableIPForwarding"]);
        _hostedWorkloads = DefineListProperty<string>("HostedWorkloads", ["HostedWorkloads"], isOutput: true);
        _dscpConfigurationId = DefineProperty<ResourceIdentifier>("DscpConfigurationId", ["DscpConfigurationId"], isOutput: true);
        _resourceGuid = DefineProperty<Guid>("ResourceGuid", ["ResourceGuid"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _workloadType = DefineProperty<string>("WorkloadType", ["WorkloadType"]);
        _nicType = DefineProperty<NetworkInterfaceNicType>("NicType", ["NicType"]);
        _privateLinkService = DefineModelProperty<PrivateLinkServiceData>("PrivateLinkService", ["PrivateLinkService"]);
        _migrationPhase = DefineProperty<NetworkInterfaceMigrationPhase>("MigrationPhase", ["MigrationPhase"]);
        _auxiliaryMode = DefineProperty<NetworkInterfaceAuxiliaryMode>("AuxiliaryMode", ["AuxiliaryMode"]);
        _auxiliarySku = DefineProperty<NetworkInterfaceAuxiliarySku>("AuxiliarySku", ["AuxiliarySku"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"], isOutput: true);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["ResourceType"], isOutput: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
    }
}
