// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// Trusted Root certificates properties for tls.
/// </summary>
public partial class FirewallPolicyCertificateAuthority : ProvisionableConstruct
{
    /// <summary>
    /// Secret Id of (base-64 encoded unencrypted pfx) &apos;Secret&apos; or
    /// &apos;Certificate&apos; object stored in KeyVault.
    /// </summary>
    public BicepValue<string> KeyVaultSecretId 
    {
        get { Initialize(); return _keyVaultSecretId!; }
        set { Initialize(); _keyVaultSecretId!.Assign(value); }
    }
    private BicepValue<string>? _keyVaultSecretId;

    /// <summary>
    /// Name of the CA certificate.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Creates a new FirewallPolicyCertificateAuthority.
    /// </summary>
    public FirewallPolicyCertificateAuthority()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// FirewallPolicyCertificateAuthority.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _keyVaultSecretId = DefineProperty<string>("KeyVaultSecretId", ["keyVaultSecretId"]);
        _name = DefineProperty<string>("Name", ["name"]);
    }
}
