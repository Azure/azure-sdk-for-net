// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// Load balancer backend addresses.
/// </summary>
public partial class LoadBalancerBackendAddress : ProvisionableConstruct
{
    /// <summary>
    /// Name of the backend address.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> VirtualNetworkId 
    {
        get { Initialize(); return _virtualNetworkId!; }
        set { Initialize(); _virtualNetworkId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _virtualNetworkId;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> SubnetId 
    {
        get { Initialize(); return _subnetId!; }
        set { Initialize(); _subnetId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _subnetId;

    /// <summary>
    /// IP Address belonging to the referenced virtual network.
    /// </summary>
    public BicepValue<string> IPAddress 
    {
        get { Initialize(); return _iPAddress!; }
        set { Initialize(); _iPAddress!.Assign(value); }
    }
    private BicepValue<string>? _iPAddress;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> NetworkInterfaceIPConfigurationId 
    {
        get { Initialize(); return _networkInterfaceIPConfigurationId!; }
    }
    private BicepValue<ResourceIdentifier>? _networkInterfaceIPConfigurationId;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> LoadBalancerFrontendIPConfigurationId 
    {
        get { Initialize(); return _loadBalancerFrontendIPConfigurationId!; }
        set { Initialize(); _loadBalancerFrontendIPConfigurationId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _loadBalancerFrontendIPConfigurationId;

    /// <summary>
    /// Collection of inbound NAT rule port mappings.
    /// </summary>
    public BicepList<NatRulePortMapping> InboundNatRulesPortMapping 
    {
        get { Initialize(); return _inboundNatRulesPortMapping!; }
    }
    private BicepList<NatRulePortMapping>? _inboundNatRulesPortMapping;

    /// <summary>
    /// A list of administrative states which once set can override health
    /// probe so that Load Balancer will always forward new connections to
    /// backend, or deny new connections and reset existing connections.
    /// </summary>
    public BicepValue<LoadBalancerBackendAddressAdminState> AdminState 
    {
        get { Initialize(); return _adminState!; }
        set { Initialize(); _adminState!.Assign(value); }
    }
    private BicepValue<LoadBalancerBackendAddressAdminState>? _adminState;

    /// <summary>
    /// Creates a new LoadBalancerBackendAddress.
    /// </summary>
    public LoadBalancerBackendAddress()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of LoadBalancerBackendAddress.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"]);
        _virtualNetworkId = DefineProperty<ResourceIdentifier>("VirtualNetworkId", ["properties", "virtualNetwork", "id"]);
        _subnetId = DefineProperty<ResourceIdentifier>("SubnetId", ["properties", "subnet", "id"]);
        _iPAddress = DefineProperty<string>("IPAddress", ["properties", "ipAddress"]);
        _networkInterfaceIPConfigurationId = DefineProperty<ResourceIdentifier>("NetworkInterfaceIPConfigurationId", ["properties", "networkInterfaceIPConfiguration", "id"], isOutput: true);
        _loadBalancerFrontendIPConfigurationId = DefineProperty<ResourceIdentifier>("LoadBalancerFrontendIPConfigurationId", ["properties", "loadBalancerFrontendIPConfiguration", "id"]);
        _inboundNatRulesPortMapping = DefineListProperty<NatRulePortMapping>("InboundNatRulesPortMapping", ["properties", "inboundNatRulesPortMapping"], isOutput: true);
        _adminState = DefineProperty<LoadBalancerBackendAddressAdminState>("AdminState", ["properties", "adminState"]);
    }
}
