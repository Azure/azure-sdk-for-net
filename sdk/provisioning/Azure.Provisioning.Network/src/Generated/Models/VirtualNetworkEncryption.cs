// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// Indicates if encryption is enabled on virtual network and if VM without
/// encryption is allowed in encrypted VNet.
/// </summary>
public partial class VirtualNetworkEncryption : ProvisionableConstruct
{
    /// <summary>
    /// Indicates if encryption is enabled on the virtual network.
    /// </summary>
    public BicepValue<bool> IsEnabled 
    {
        get { Initialize(); return _isEnabled!; }
        set { Initialize(); _isEnabled!.Assign(value); }
    }
    private BicepValue<bool>? _isEnabled;

    /// <summary>
    /// If the encrypted VNet allows VM that does not support encryption. This
    /// field is for future support, AllowUnencrypted is the only supported
    /// value at general availability.
    /// </summary>
    public BicepValue<VirtualNetworkEncryptionEnforcement> Enforcement 
    {
        get { Initialize(); return _enforcement!; }
        set { Initialize(); _enforcement!.Assign(value); }
    }
    private BicepValue<VirtualNetworkEncryptionEnforcement>? _enforcement;

    /// <summary>
    /// Creates a new VirtualNetworkEncryption.
    /// </summary>
    public VirtualNetworkEncryption()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of VirtualNetworkEncryption.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _isEnabled = DefineProperty<bool>("IsEnabled", ["IsEnabled"]);
        _enforcement = DefineProperty<VirtualNetworkEncryptionEnforcement>("Enforcement", ["Enforcement"]);
    }
}
