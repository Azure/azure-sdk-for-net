// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the PublicIPAddress data model.             Public IP
/// address resource.
/// </summary>
public partial class PublicIPAddressData : ProvisionableConstruct
{
    /// <summary>
    /// The extended location of the public ip address.
    /// </summary>
    public ExtendedAzureLocation ExtendedLocation 
    {
        get { Initialize(); return _extendedLocation!; }
        set { Initialize(); AssignOrReplace(ref _extendedLocation, value); }
    }
    private ExtendedAzureLocation? _extendedLocation;

    /// <summary>
    /// The public IP address SKU.
    /// </summary>
    public PublicIPAddressSku Sku 
    {
        get { Initialize(); return _sku!; }
        set { Initialize(); AssignOrReplace(ref _sku, value); }
    }
    private PublicIPAddressSku? _sku;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// A list of availability zones denoting the IP allocated for the resource
    /// needs to come from.
    /// </summary>
    public BicepList<string> Zones 
    {
        get { Initialize(); return _zones!; }
        set { Initialize(); _zones!.Assign(value); }
    }
    private BicepList<string>? _zones;

    /// <summary>
    /// The public IP address allocation method.
    /// </summary>
    public BicepValue<NetworkIPAllocationMethod> PublicIPAllocationMethod 
    {
        get { Initialize(); return _publicIPAllocationMethod!; }
        set { Initialize(); _publicIPAllocationMethod!.Assign(value); }
    }
    private BicepValue<NetworkIPAllocationMethod>? _publicIPAllocationMethod;

    /// <summary>
    /// The public IP address version.
    /// </summary>
    public BicepValue<NetworkIPVersion> PublicIPAddressVersion 
    {
        get { Initialize(); return _publicIPAddressVersion!; }
        set { Initialize(); _publicIPAddressVersion!.Assign(value); }
    }
    private BicepValue<NetworkIPVersion>? _publicIPAddressVersion;

    /// <summary>
    /// The IP configuration associated with the public IP address.
    /// </summary>
    public NetworkIPConfiguration IPConfiguration 
    {
        get { Initialize(); return _iPConfiguration!; }
    }
    private NetworkIPConfiguration? _iPConfiguration;

    /// <summary>
    /// The FQDN of the DNS record associated with the public IP address.
    /// </summary>
    public PublicIPAddressDnsSettings DnsSettings 
    {
        get { Initialize(); return _dnsSettings!; }
        set { Initialize(); AssignOrReplace(ref _dnsSettings, value); }
    }
    private PublicIPAddressDnsSettings? _dnsSettings;

    /// <summary>
    /// The DDoS protection custom policy associated with the public IP address.
    /// </summary>
    public DdosSettings DdosSettings 
    {
        get { Initialize(); return _ddosSettings!; }
        set { Initialize(); AssignOrReplace(ref _ddosSettings, value); }
    }
    private DdosSettings? _ddosSettings;

    /// <summary>
    /// The list of tags associated with the public IP address.
    /// </summary>
    public BicepList<IPTag> IPTags 
    {
        get { Initialize(); return _iPTags!; }
        set { Initialize(); _iPTags!.Assign(value); }
    }
    private BicepList<IPTag>? _iPTags;

    /// <summary>
    /// The IP address associated with the public IP address resource.
    /// </summary>
    public BicepValue<string> IPAddress 
    {
        get { Initialize(); return _iPAddress!; }
        set { Initialize(); _iPAddress!.Assign(value); }
    }
    private BicepValue<string>? _iPAddress;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> PublicIPPrefixId 
    {
        get { Initialize(); return _publicIPPrefixId!; }
        set { Initialize(); _publicIPPrefixId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _publicIPPrefixId;

    /// <summary>
    /// The idle timeout of the public IP address.
    /// </summary>
    public BicepValue<int> IdleTimeoutInMinutes 
    {
        get { Initialize(); return _idleTimeoutInMinutes!; }
        set { Initialize(); _idleTimeoutInMinutes!.Assign(value); }
    }
    private BicepValue<int>? _idleTimeoutInMinutes;

    /// <summary>
    /// The resource GUID property of the public IP address resource.
    /// </summary>
    public BicepValue<Guid> ResourceGuid 
    {
        get { Initialize(); return _resourceGuid!; }
    }
    private BicepValue<Guid>? _resourceGuid;

    /// <summary>
    /// The provisioning state of the public IP address resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// The service public IP address of the public IP address resource.
    /// </summary>
    public PublicIPAddressData ServicePublicIPAddress 
    {
        get { Initialize(); return _servicePublicIPAddress!; }
        set { Initialize(); AssignOrReplace(ref _servicePublicIPAddress, value); }
    }
    private PublicIPAddressData? _servicePublicIPAddress;

    /// <summary>
    /// The NatGateway for the Public IP address.
    /// </summary>
    public NatGatewayData NatGateway 
    {
        get { Initialize(); return _natGateway!; }
        set { Initialize(); AssignOrReplace(ref _natGateway, value); }
    }
    private NatGatewayData? _natGateway;

    /// <summary>
    /// Migration phase of Public IP Address.
    /// </summary>
    public BicepValue<PublicIPAddressMigrationPhase> MigrationPhase 
    {
        get { Initialize(); return _migrationPhase!; }
        set { Initialize(); _migrationPhase!.Assign(value); }
    }
    private BicepValue<PublicIPAddressMigrationPhase>? _migrationPhase;

    /// <summary>
    /// The linked public IP address of the public IP address resource.
    /// </summary>
    public PublicIPAddressData LinkedPublicIPAddress 
    {
        get { Initialize(); return _linkedPublicIPAddress!; }
        set { Initialize(); AssignOrReplace(ref _linkedPublicIPAddress, value); }
    }
    private PublicIPAddressData? _linkedPublicIPAddress;

    /// <summary>
    /// Specify what happens to the public IP address when the VM using it is
    /// deleted.
    /// </summary>
    public BicepValue<IPAddressDeleteOption> DeleteOption 
    {
        get { Initialize(); return _deleteOption!; }
        set { Initialize(); _deleteOption!.Assign(value); }
    }
    private BicepValue<IPAddressDeleteOption>? _deleteOption;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Creates a new PublicIPAddressData.
    /// </summary>
    public PublicIPAddressData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of PublicIPAddressData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _extendedLocation = DefineModelProperty<ExtendedAzureLocation>("ExtendedLocation", ["extendedLocation"]);
        _sku = DefineModelProperty<PublicIPAddressSku>("Sku", ["sku"]);
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _zones = DefineListProperty<string>("Zones", ["zones"]);
        _publicIPAllocationMethod = DefineProperty<NetworkIPAllocationMethod>("PublicIPAllocationMethod", ["properties", "publicIPAllocationMethod"]);
        _publicIPAddressVersion = DefineProperty<NetworkIPVersion>("PublicIPAddressVersion", ["properties", "publicIPAddressVersion"]);
        _iPConfiguration = DefineModelProperty<NetworkIPConfiguration>("IPConfiguration", ["properties", "ipConfiguration"], isOutput: true);
        _dnsSettings = DefineModelProperty<PublicIPAddressDnsSettings>("DnsSettings", ["properties", "dnsSettings"]);
        _ddosSettings = DefineModelProperty<DdosSettings>("DdosSettings", ["properties", "ddosSettings"]);
        _iPTags = DefineListProperty<IPTag>("IPTags", ["properties", "ipTags"]);
        _iPAddress = DefineProperty<string>("IPAddress", ["properties", "ipAddress"]);
        _publicIPPrefixId = DefineProperty<ResourceIdentifier>("PublicIPPrefixId", ["properties", "publicIPPrefix", "id"]);
        _idleTimeoutInMinutes = DefineProperty<int>("IdleTimeoutInMinutes", ["properties", "idleTimeoutInMinutes"]);
        _resourceGuid = DefineProperty<Guid>("ResourceGuid", ["properties", "resourceGuid"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _servicePublicIPAddress = DefineModelProperty<PublicIPAddressData>("ServicePublicIPAddress", ["properties", "servicePublicIPAddress"]);
        _natGateway = DefineModelProperty<NatGatewayData>("NatGateway", ["properties", "natGateway"]);
        _migrationPhase = DefineProperty<PublicIPAddressMigrationPhase>("MigrationPhase", ["properties", "migrationPhase"]);
        _linkedPublicIPAddress = DefineModelProperty<PublicIPAddressData>("LinkedPublicIPAddress", ["properties", "linkedPublicIPAddress"]);
        _deleteOption = DefineProperty<IPAddressDeleteOption>("DeleteOption", ["properties", "deleteOption"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"], isOutput: true);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"], isOutput: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
    }
}
