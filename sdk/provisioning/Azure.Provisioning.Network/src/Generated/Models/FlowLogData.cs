// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the FlowLog data model.             A flow log
/// resource.
/// </summary>
public partial class FlowLogData : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// FlowLog resource Managed Identity.
    /// </summary>
    public ManagedServiceIdentity Identity 
    {
        get { Initialize(); return _identity!; }
        set { Initialize(); AssignOrReplace(ref _identity, value); }
    }
    private ManagedServiceIdentity? _identity;

    /// <summary>
    /// ID of network security group to which flow log will be applied.
    /// </summary>
    public BicepValue<ResourceIdentifier> TargetResourceId 
    {
        get { Initialize(); return _targetResourceId!; }
        set { Initialize(); _targetResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _targetResourceId;

    /// <summary>
    /// Guid of network security group to which flow log will be applied.
    /// </summary>
    public BicepValue<Guid> TargetResourceGuid 
    {
        get { Initialize(); return _targetResourceGuid!; }
    }
    private BicepValue<Guid>? _targetResourceGuid;

    /// <summary>
    /// ID of the storage account which is used to store the flow log.
    /// </summary>
    public BicepValue<ResourceIdentifier> StorageId 
    {
        get { Initialize(); return _storageId!; }
        set { Initialize(); _storageId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _storageId;

    /// <summary>
    /// Optional field to filter network traffic logs based on SrcIP, SrcPort,
    /// DstIP, DstPort, Protocol, Encryption, Direction and Action. If not
    /// specified, all network traffic will be logged.
    /// </summary>
    public BicepValue<string> EnabledFilteringCriteria 
    {
        get { Initialize(); return _enabledFilteringCriteria!; }
        set { Initialize(); _enabledFilteringCriteria!.Assign(value); }
    }
    private BicepValue<string>? _enabledFilteringCriteria;

    /// <summary>
    /// Flag to enable/disable flow logging.
    /// </summary>
    public BicepValue<bool> Enabled 
    {
        get { Initialize(); return _enabled!; }
        set { Initialize(); _enabled!.Assign(value); }
    }
    private BicepValue<bool>? _enabled;

    /// <summary>
    /// Parameters that define the retention policy for flow log.
    /// </summary>
    public RetentionPolicyParameters RetentionPolicy 
    {
        get { Initialize(); return _retentionPolicy!; }
        set { Initialize(); AssignOrReplace(ref _retentionPolicy, value); }
    }
    private RetentionPolicyParameters? _retentionPolicy;

    /// <summary>
    /// Parameters that define the flow log format.
    /// </summary>
    public FlowLogProperties Format 
    {
        get { Initialize(); return _format!; }
        set { Initialize(); AssignOrReplace(ref _format, value); }
    }
    private FlowLogProperties? _format;

    /// <summary>
    /// Parameters that define the configuration of traffic analytics.
    /// </summary>
    public TrafficAnalyticsConfigurationProperties TrafficAnalyticsConfiguration 
    {
        get { Initialize(); return _trafficAnalyticsConfiguration!; }
        set { Initialize(); AssignOrReplace(ref _trafficAnalyticsConfiguration, value); }
    }
    private TrafficAnalyticsConfigurationProperties? _trafficAnalyticsConfiguration;

    /// <summary>
    /// The provisioning state of the flow log.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Creates a new FlowLogData.
    /// </summary>
    public FlowLogData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of FlowLogData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _identity = DefineModelProperty<ManagedServiceIdentity>("Identity", ["Identity"]);
        _targetResourceId = DefineProperty<ResourceIdentifier>("TargetResourceId", ["TargetResourceId"]);
        _targetResourceGuid = DefineProperty<Guid>("TargetResourceGuid", ["TargetResourceGuid"], isOutput: true);
        _storageId = DefineProperty<ResourceIdentifier>("StorageId", ["StorageId"]);
        _enabledFilteringCriteria = DefineProperty<string>("EnabledFilteringCriteria", ["EnabledFilteringCriteria"]);
        _enabled = DefineProperty<bool>("Enabled", ["Enabled"]);
        _retentionPolicy = DefineModelProperty<RetentionPolicyParameters>("RetentionPolicy", ["RetentionPolicy"]);
        _format = DefineModelProperty<FlowLogProperties>("Format", ["Format"]);
        _trafficAnalyticsConfiguration = DefineModelProperty<TrafficAnalyticsConfigurationProperties>("TrafficAnalyticsConfiguration", ["TrafficAnalyticsConfiguration"]);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"], isOutput: true);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["ResourceType"], isOutput: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
    }
}
