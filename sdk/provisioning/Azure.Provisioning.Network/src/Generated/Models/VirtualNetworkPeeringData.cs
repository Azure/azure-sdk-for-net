// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the VirtualNetworkPeering data model.
/// Peerings in a virtual network resource.
/// </summary>
public partial class VirtualNetworkPeeringData : ProvisionableConstruct
{
    /// <summary>
    /// A list of address blocks reserved for this virtual network in CIDR
    /// notation.
    /// </summary>
    public BicepList<string> LocalAddressPrefixes 
    {
        get { Initialize(); return _localAddressPrefixes!; }
        set { Initialize(); _localAddressPrefixes!.Assign(value); }
    }
    private BicepList<string>? _localAddressPrefixes;

    /// <summary>
    /// A list of address blocks reserved for this virtual network in CIDR
    /// notation.
    /// </summary>
    public BicepList<string> LocalVirtualNetworkAddressPrefixes 
    {
        get { Initialize(); return _localVirtualNetworkAddressPrefixes!; }
        set { Initialize(); _localVirtualNetworkAddressPrefixes!.Assign(value); }
    }
    private BicepList<string>? _localVirtualNetworkAddressPrefixes;

    /// <summary>
    /// A list of address blocks reserved for this virtual network in CIDR
    /// notation.
    /// </summary>
    public BicepList<string> RemoteAddressPrefixes 
    {
        get { Initialize(); return _remoteAddressPrefixes!; }
        set { Initialize(); _remoteAddressPrefixes!.Assign(value); }
    }
    private BicepList<string>? _remoteAddressPrefixes;

    /// <summary>
    /// A list of address blocks reserved for this virtual network in CIDR
    /// notation.
    /// </summary>
    public BicepList<string> RemoteVirtualNetworkAddressPrefixes 
    {
        get { Initialize(); return _remoteVirtualNetworkAddressPrefixes!; }
        set { Initialize(); _remoteVirtualNetworkAddressPrefixes!.Assign(value); }
    }
    private BicepList<string>? _remoteVirtualNetworkAddressPrefixes;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// Whether the VMs in the local virtual network space would be able to
    /// access the VMs in remote virtual network space.
    /// </summary>
    public BicepValue<bool> AllowVirtualNetworkAccess 
    {
        get { Initialize(); return _allowVirtualNetworkAccess!; }
        set { Initialize(); _allowVirtualNetworkAccess!.Assign(value); }
    }
    private BicepValue<bool>? _allowVirtualNetworkAccess;

    /// <summary>
    /// Whether the forwarded traffic from the VMs in the local virtual network
    /// will be allowed/disallowed in remote virtual network.
    /// </summary>
    public BicepValue<bool> AllowForwardedTraffic 
    {
        get { Initialize(); return _allowForwardedTraffic!; }
        set { Initialize(); _allowForwardedTraffic!.Assign(value); }
    }
    private BicepValue<bool>? _allowForwardedTraffic;

    /// <summary>
    /// If gateway links can be used in remote virtual networking to link to
    /// this virtual network.
    /// </summary>
    public BicepValue<bool> AllowGatewayTransit 
    {
        get { Initialize(); return _allowGatewayTransit!; }
        set { Initialize(); _allowGatewayTransit!.Assign(value); }
    }
    private BicepValue<bool>? _allowGatewayTransit;

    /// <summary>
    /// If remote gateways can be used on this virtual network. If the flag is
    /// set to true, and allowGatewayTransit on remote peering is also true,
    /// virtual network will use gateways of remote virtual network for
    /// transit. Only one peering can have this flag set to true. This flag
    /// cannot be set if virtual network already has a gateway.
    /// </summary>
    public BicepValue<bool> UseRemoteGateways 
    {
        get { Initialize(); return _useRemoteGateways!; }
        set { Initialize(); _useRemoteGateways!.Assign(value); }
    }
    private BicepValue<bool>? _useRemoteGateways;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> RemoteVirtualNetworkId 
    {
        get { Initialize(); return _remoteVirtualNetworkId!; }
        set { Initialize(); _remoteVirtualNetworkId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _remoteVirtualNetworkId;

    /// <summary>
    /// The local address space of the local virtual network that is peered.
    /// </summary>
    public VirtualNetworkAddressSpace LocalAddressSpace 
    {
        get { Initialize(); return _localAddressSpace!; }
        set { Initialize(); AssignOrReplace(ref _localAddressSpace, value); }
    }
    private VirtualNetworkAddressSpace? _localAddressSpace;

    /// <summary>
    /// The current local address space of the local virtual network that is
    /// peered.
    /// </summary>
    public VirtualNetworkAddressSpace LocalVirtualNetworkAddressSpace 
    {
        get { Initialize(); return _localVirtualNetworkAddressSpace!; }
        set { Initialize(); AssignOrReplace(ref _localVirtualNetworkAddressSpace, value); }
    }
    private VirtualNetworkAddressSpace? _localVirtualNetworkAddressSpace;

    /// <summary>
    /// The reference to the address space peered with the remote virtual
    /// network.
    /// </summary>
    public VirtualNetworkAddressSpace RemoteAddressSpace 
    {
        get { Initialize(); return _remoteAddressSpace!; }
        set { Initialize(); AssignOrReplace(ref _remoteAddressSpace, value); }
    }
    private VirtualNetworkAddressSpace? _remoteAddressSpace;

    /// <summary>
    /// The reference to the current address space of the remote virtual
    /// network.
    /// </summary>
    public VirtualNetworkAddressSpace RemoteVirtualNetworkAddressSpace 
    {
        get { Initialize(); return _remoteVirtualNetworkAddressSpace!; }
        set { Initialize(); AssignOrReplace(ref _remoteVirtualNetworkAddressSpace, value); }
    }
    private VirtualNetworkAddressSpace? _remoteVirtualNetworkAddressSpace;

    /// <summary>
    /// The reference to the remote virtual network&apos;s Bgp Communities.
    /// </summary>
    public VirtualNetworkBgpCommunities RemoteBgpCommunities 
    {
        get { Initialize(); return _remoteBgpCommunities!; }
        set { Initialize(); AssignOrReplace(ref _remoteBgpCommunities, value); }
    }
    private VirtualNetworkBgpCommunities? _remoteBgpCommunities;

    /// <summary>
    /// The reference to the remote virtual network&apos;s encryption.
    /// </summary>
    public VirtualNetworkEncryption RemoteVirtualNetworkEncryption 
    {
        get { Initialize(); return _remoteVirtualNetworkEncryption!; }
    }
    private VirtualNetworkEncryption? _remoteVirtualNetworkEncryption;

    /// <summary>
    /// The status of the virtual network peering.
    /// </summary>
    public BicepValue<VirtualNetworkPeeringState> PeeringState 
    {
        get { Initialize(); return _peeringState!; }
        set { Initialize(); _peeringState!.Assign(value); }
    }
    private BicepValue<VirtualNetworkPeeringState>? _peeringState;

    /// <summary>
    /// The peering sync status of the virtual network peering.
    /// </summary>
    public BicepValue<VirtualNetworkPeeringLevel> PeeringSyncLevel 
    {
        get { Initialize(); return _peeringSyncLevel!; }
        set { Initialize(); _peeringSyncLevel!.Assign(value); }
    }
    private BicepValue<VirtualNetworkPeeringLevel>? _peeringSyncLevel;

    /// <summary>
    /// The provisioning state of the virtual network peering resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// If we need to verify the provisioning state of the remote gateway.
    /// </summary>
    public BicepValue<bool> DoNotVerifyRemoteGateways 
    {
        get { Initialize(); return _doNotVerifyRemoteGateways!; }
        set { Initialize(); _doNotVerifyRemoteGateways!.Assign(value); }
    }
    private BicepValue<bool>? _doNotVerifyRemoteGateways;

    /// <summary>
    /// The resourceGuid property of the Virtual Network peering resource.
    /// </summary>
    public BicepValue<Guid> ResourceGuid 
    {
        get { Initialize(); return _resourceGuid!; }
    }
    private BicepValue<Guid>? _resourceGuid;

    /// <summary>
    /// Whether complete virtual network address space is peered.
    /// </summary>
    public BicepValue<bool> AreCompleteVnetsPeered 
    {
        get { Initialize(); return _areCompleteVnetsPeered!; }
        set { Initialize(); _areCompleteVnetsPeered!.Assign(value); }
    }
    private BicepValue<bool>? _areCompleteVnetsPeered;

    /// <summary>
    /// Whether only Ipv6 address space is peered for subnet peering.
    /// </summary>
    public BicepValue<bool> EnableOnlyIPv6Peering 
    {
        get { Initialize(); return _enableOnlyIPv6Peering!; }
        set { Initialize(); _enableOnlyIPv6Peering!.Assign(value); }
    }
    private BicepValue<bool>? _enableOnlyIPv6Peering;

    /// <summary>
    /// List of local subnet names that are subnet peered with remote virtual
    /// network.
    /// </summary>
    public BicepList<string> LocalSubnetNames 
    {
        get { Initialize(); return _localSubnetNames!; }
        set { Initialize(); _localSubnetNames!.Assign(value); }
    }
    private BicepList<string>? _localSubnetNames;

    /// <summary>
    /// List of remote subnet names from remote virtual network that are subnet
    /// peered.
    /// </summary>
    public BicepList<string> RemoteSubnetNames 
    {
        get { Initialize(); return _remoteSubnetNames!; }
        set { Initialize(); _remoteSubnetNames!.Assign(value); }
    }
    private BicepList<string>? _remoteSubnetNames;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
        set { Initialize(); _resourceType!.Assign(value); }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new VirtualNetworkPeeringData.
    /// </summary>
    public VirtualNetworkPeeringData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of VirtualNetworkPeeringData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _localAddressPrefixes = DefineListProperty<string>("LocalAddressPrefixes", ["LocalAddressPrefixes"]);
        _localVirtualNetworkAddressPrefixes = DefineListProperty<string>("LocalVirtualNetworkAddressPrefixes", ["LocalVirtualNetworkAddressPrefixes"]);
        _remoteAddressPrefixes = DefineListProperty<string>("RemoteAddressPrefixes", ["RemoteAddressPrefixes"]);
        _remoteVirtualNetworkAddressPrefixes = DefineListProperty<string>("RemoteVirtualNetworkAddressPrefixes", ["RemoteVirtualNetworkAddressPrefixes"]);
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _allowVirtualNetworkAccess = DefineProperty<bool>("AllowVirtualNetworkAccess", ["properties", "allowVirtualNetworkAccess"]);
        _allowForwardedTraffic = DefineProperty<bool>("AllowForwardedTraffic", ["properties", "allowForwardedTraffic"]);
        _allowGatewayTransit = DefineProperty<bool>("AllowGatewayTransit", ["properties", "allowGatewayTransit"]);
        _useRemoteGateways = DefineProperty<bool>("UseRemoteGateways", ["properties", "useRemoteGateways"]);
        _remoteVirtualNetworkId = DefineProperty<ResourceIdentifier>("RemoteVirtualNetworkId", ["properties", "remoteVirtualNetwork", "id"]);
        _localAddressSpace = DefineModelProperty<VirtualNetworkAddressSpace>("LocalAddressSpace", ["properties", "localAddressSpace"]);
        _localVirtualNetworkAddressSpace = DefineModelProperty<VirtualNetworkAddressSpace>("LocalVirtualNetworkAddressSpace", ["properties", "localVirtualNetworkAddressSpace"]);
        _remoteAddressSpace = DefineModelProperty<VirtualNetworkAddressSpace>("RemoteAddressSpace", ["properties", "remoteAddressSpace"]);
        _remoteVirtualNetworkAddressSpace = DefineModelProperty<VirtualNetworkAddressSpace>("RemoteVirtualNetworkAddressSpace", ["properties", "remoteVirtualNetworkAddressSpace"]);
        _remoteBgpCommunities = DefineModelProperty<VirtualNetworkBgpCommunities>("RemoteBgpCommunities", ["properties", "remoteBgpCommunities"]);
        _remoteVirtualNetworkEncryption = DefineModelProperty<VirtualNetworkEncryption>("RemoteVirtualNetworkEncryption", ["properties", "remoteVirtualNetworkEncryption"], isOutput: true);
        _peeringState = DefineProperty<VirtualNetworkPeeringState>("PeeringState", ["properties", "peeringState"]);
        _peeringSyncLevel = DefineProperty<VirtualNetworkPeeringLevel>("PeeringSyncLevel", ["properties", "peeringSyncLevel"]);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _doNotVerifyRemoteGateways = DefineProperty<bool>("DoNotVerifyRemoteGateways", ["properties", "doNotVerifyRemoteGateways"]);
        _resourceGuid = DefineProperty<Guid>("ResourceGuid", ["properties", "resourceGuid"], isOutput: true);
        _areCompleteVnetsPeered = DefineProperty<bool>("AreCompleteVnetsPeered", ["properties", "peerCompleteVnets"]);
        _enableOnlyIPv6Peering = DefineProperty<bool>("EnableOnlyIPv6Peering", ["properties", "enableOnlyIPv6Peering"]);
        _localSubnetNames = DefineListProperty<string>("LocalSubnetNames", ["properties", "localSubnetNames"]);
        _remoteSubnetNames = DefineListProperty<string>("RemoteSubnetNames", ["properties", "remoteSubnetNames"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"]);
    }
}
