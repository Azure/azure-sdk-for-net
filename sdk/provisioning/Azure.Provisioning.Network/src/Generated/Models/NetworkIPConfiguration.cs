// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// IP configuration.
/// </summary>
public partial class NetworkIPConfiguration : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// The private IP address of the IP configuration.
    /// </summary>
    public BicepValue<string> PrivateIPAddress 
    {
        get { Initialize(); return _privateIPAddress!; }
        set { Initialize(); _privateIPAddress!.Assign(value); }
    }
    private BicepValue<string>? _privateIPAddress;

    /// <summary>
    /// The private IP address allocation method.
    /// </summary>
    public BicepValue<NetworkIPAllocationMethod> PrivateIPAllocationMethod 
    {
        get { Initialize(); return _privateIPAllocationMethod!; }
        set { Initialize(); _privateIPAllocationMethod!.Assign(value); }
    }
    private BicepValue<NetworkIPAllocationMethod>? _privateIPAllocationMethod;

    /// <summary>
    /// The reference to the subnet resource.
    /// </summary>
    public SubnetData Subnet 
    {
        get { Initialize(); return _subnet!; }
        set { Initialize(); AssignOrReplace(ref _subnet, value); }
    }
    private SubnetData? _subnet;

    /// <summary>
    /// The reference to the public IP resource.
    /// </summary>
    public PublicIPAddressData PublicIPAddress 
    {
        get { Initialize(); return _publicIPAddress!; }
        set { Initialize(); AssignOrReplace(ref _publicIPAddress, value); }
    }
    private PublicIPAddressData? _publicIPAddress;

    /// <summary>
    /// The provisioning state of the IP configuration resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new NetworkIPConfiguration.
    /// </summary>
    public NetworkIPConfiguration()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of NetworkIPConfiguration.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _privateIPAddress = DefineProperty<string>("PrivateIPAddress", ["PrivateIPAddress"]);
        _privateIPAllocationMethod = DefineProperty<NetworkIPAllocationMethod>("PrivateIPAllocationMethod", ["PrivateIPAllocationMethod"]);
        _subnet = DefineModelProperty<SubnetData>("Subnet", ["Subnet"]);
        _publicIPAddress = DefineModelProperty<PublicIPAddressData>("PublicIPAddress", ["PublicIPAddress"]);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["ResourceType"], isOutput: true);
    }
}
