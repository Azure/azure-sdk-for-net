// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the Route data model.             Route resource.
/// </summary>
public partial class RouteData : ProvisionableConstruct
{
    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// The destination CIDR to which the route applies.
    /// </summary>
    public BicepValue<string> AddressPrefix 
    {
        get { Initialize(); return _addressPrefix!; }
        set { Initialize(); _addressPrefix!.Assign(value); }
    }
    private BicepValue<string>? _addressPrefix;

    /// <summary>
    /// The type of Azure hop the packet should be sent to.
    /// </summary>
    public BicepValue<RouteNextHopType> NextHopType 
    {
        get { Initialize(); return _nextHopType!; }
        set { Initialize(); _nextHopType!.Assign(value); }
    }
    private BicepValue<RouteNextHopType>? _nextHopType;

    /// <summary>
    /// The IP address packets should be forwarded to. Next hop values are only
    /// allowed in routes where the next hop type is VirtualAppliance.
    /// </summary>
    public BicepValue<string> NextHopIPAddress 
    {
        get { Initialize(); return _nextHopIPAddress!; }
        set { Initialize(); _nextHopIPAddress!.Assign(value); }
    }
    private BicepValue<string>? _nextHopIPAddress;

    /// <summary>
    /// The provisioning state of the route resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// A value indicating whether this route overrides overlapping BGP routes
    /// regardless of LPM.
    /// </summary>
    public BicepValue<bool> HasBgpOverride 
    {
        get { Initialize(); return _hasBgpOverride!; }
        set { Initialize(); _hasBgpOverride!.Assign(value); }
    }
    private BicepValue<bool>? _hasBgpOverride;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
        set { Initialize(); _resourceType!.Assign(value); }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Creates a new RouteData.
    /// </summary>
    public RouteData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of RouteData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _addressPrefix = DefineProperty<string>("AddressPrefix", ["properties", "addressPrefix"]);
        _nextHopType = DefineProperty<RouteNextHopType>("NextHopType", ["properties", "nextHopType"]);
        _nextHopIPAddress = DefineProperty<string>("NextHopIPAddress", ["properties", "nextHopIpAddress"]);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _hasBgpOverride = DefineProperty<bool>("HasBgpOverride", ["properties", "hasBgpOverride"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"]);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["type"]);
    }
}
