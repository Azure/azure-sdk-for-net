// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// A class representing the PrivateEndpoint data model.             Private
/// endpoint resource.
/// </summary>
public partial class PrivateEndpointData : ProvisionableConstruct
{
    /// <summary>
    /// The extended location of the load balancer.
    /// </summary>
    public ExtendedAzureLocation ExtendedLocation 
    {
        get { Initialize(); return _extendedLocation!; }
        set { Initialize(); AssignOrReplace(ref _extendedLocation, value); }
    }
    private ExtendedAzureLocation? _extendedLocation;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// The ID of the subnet from which the private IP will be allocated.
    /// </summary>
    public SubnetData Subnet 
    {
        get { Initialize(); return _subnet!; }
        set { Initialize(); AssignOrReplace(ref _subnet, value); }
    }
    private SubnetData? _subnet;

    /// <summary>
    /// An array of references to the network interfaces created for this
    /// private endpoint.
    /// </summary>
    public BicepList<NetworkInterfaceData> NetworkInterfaces 
    {
        get { Initialize(); return _networkInterfaces!; }
    }
    private BicepList<NetworkInterfaceData>? _networkInterfaces;

    /// <summary>
    /// The provisioning state of the private endpoint resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// A grouping of information about the connection to the remote resource.
    /// </summary>
    public BicepList<NetworkPrivateLinkServiceConnection> PrivateLinkServiceConnections 
    {
        get { Initialize(); return _privateLinkServiceConnections!; }
        set { Initialize(); _privateLinkServiceConnections!.Assign(value); }
    }
    private BicepList<NetworkPrivateLinkServiceConnection>? _privateLinkServiceConnections;

    /// <summary>
    /// A grouping of information about the connection to the remote resource.
    /// Used when the network admin does not have access to approve
    /// connections to the remote resource.
    /// </summary>
    public BicepList<NetworkPrivateLinkServiceConnection> ManualPrivateLinkServiceConnections 
    {
        get { Initialize(); return _manualPrivateLinkServiceConnections!; }
        set { Initialize(); _manualPrivateLinkServiceConnections!.Assign(value); }
    }
    private BicepList<NetworkPrivateLinkServiceConnection>? _manualPrivateLinkServiceConnections;

    /// <summary>
    /// An array of custom dns configurations.
    /// </summary>
    public BicepList<CustomDnsConfigProperties> CustomDnsConfigs 
    {
        get { Initialize(); return _customDnsConfigs!; }
        set { Initialize(); _customDnsConfigs!.Assign(value); }
    }
    private BicepList<CustomDnsConfigProperties>? _customDnsConfigs;

    /// <summary>
    /// Application security groups in which the private endpoint IP
    /// configuration is included.
    /// </summary>
    public BicepList<ApplicationSecurityGroupData> ApplicationSecurityGroups 
    {
        get { Initialize(); return _applicationSecurityGroups!; }
        set { Initialize(); _applicationSecurityGroups!.Assign(value); }
    }
    private BicepList<ApplicationSecurityGroupData>? _applicationSecurityGroups;

    /// <summary>
    /// A list of IP configurations of the private endpoint. This will be used
    /// to map to the First Party Service&apos;s endpoints.
    /// </summary>
    public BicepList<PrivateEndpointIPConfiguration> IPConfigurations 
    {
        get { Initialize(); return _iPConfigurations!; }
        set { Initialize(); _iPConfigurations!.Assign(value); }
    }
    private BicepList<PrivateEndpointIPConfiguration>? _iPConfigurations;

    /// <summary>
    /// The custom name of the network interface attached to the private
    /// endpoint.
    /// </summary>
    public BicepValue<string> CustomNetworkInterfaceName 
    {
        get { Initialize(); return _customNetworkInterfaceName!; }
        set { Initialize(); _customNetworkInterfaceName!.Assign(value); }
    }
    private BicepValue<string>? _customNetworkInterfaceName;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Resource type.
    /// </summary>
    public BicepValue<ResourceType> ResourceType 
    {
        get { Initialize(); return _resourceType!; }
    }
    private BicepValue<ResourceType>? _resourceType;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// Creates a new PrivateEndpointData.
    /// </summary>
    public PrivateEndpointData()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of PrivateEndpointData.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _extendedLocation = DefineModelProperty<ExtendedAzureLocation>("ExtendedLocation", ["ExtendedLocation"]);
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _subnet = DefineModelProperty<SubnetData>("Subnet", ["Subnet"]);
        _networkInterfaces = DefineListProperty<NetworkInterfaceData>("NetworkInterfaces", ["NetworkInterfaces"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _privateLinkServiceConnections = DefineListProperty<NetworkPrivateLinkServiceConnection>("PrivateLinkServiceConnections", ["PrivateLinkServiceConnections"]);
        _manualPrivateLinkServiceConnections = DefineListProperty<NetworkPrivateLinkServiceConnection>("ManualPrivateLinkServiceConnections", ["ManualPrivateLinkServiceConnections"]);
        _customDnsConfigs = DefineListProperty<CustomDnsConfigProperties>("CustomDnsConfigs", ["CustomDnsConfigs"]);
        _applicationSecurityGroups = DefineListProperty<ApplicationSecurityGroupData>("ApplicationSecurityGroups", ["ApplicationSecurityGroups"]);
        _iPConfigurations = DefineListProperty<PrivateEndpointIPConfiguration>("IPConfigurations", ["IPConfigurations"]);
        _customNetworkInterfaceName = DefineProperty<string>("CustomNetworkInterfaceName", ["CustomNetworkInterfaceName"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _name = DefineProperty<string>("Name", ["name"], isOutput: true);
        _resourceType = DefineProperty<ResourceType>("ResourceType", ["ResourceType"], isOutput: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
    }
}
