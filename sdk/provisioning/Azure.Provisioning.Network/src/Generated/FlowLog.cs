// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Network;

/// <summary>
/// FlowLog.
/// </summary>
public partial class FlowLog : ProvisionableResource
{
    /// <summary>
    /// The name of the flow log.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Flag to enable/disable flow logging.
    /// </summary>
    public BicepValue<bool> Enabled 
    {
        get { Initialize(); return _enabled!; }
        set { Initialize(); _enabled!.Assign(value); }
    }
    private BicepValue<bool>? _enabled;

    /// <summary>
    /// Optional field to filter network traffic logs based on SrcIP, SrcPort,
    /// DstIP, DstPort, Protocol, Encryption, Direction and Action. If not
    /// specified, all network traffic will be logged.
    /// </summary>
    public BicepValue<string> EnabledFilteringCriteria 
    {
        get { Initialize(); return _enabledFilteringCriteria!; }
        set { Initialize(); _enabledFilteringCriteria!.Assign(value); }
    }
    private BicepValue<string>? _enabledFilteringCriteria;

    /// <summary>
    /// Parameters that define the flow log format.
    /// </summary>
    public FlowLogProperties Format 
    {
        get { Initialize(); return _format!; }
        set { Initialize(); AssignOrReplace(ref _format, value); }
    }
    private FlowLogProperties? _format;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// FlowLog resource Managed Identity.
    /// </summary>
    public ManagedServiceIdentity Identity 
    {
        get { Initialize(); return _identity!; }
        set { Initialize(); AssignOrReplace(ref _identity, value); }
    }
    private ManagedServiceIdentity? _identity;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Parameters that define the retention policy for flow log.
    /// </summary>
    public RetentionPolicyParameters RetentionPolicy 
    {
        get { Initialize(); return _retentionPolicy!; }
        set { Initialize(); AssignOrReplace(ref _retentionPolicy, value); }
    }
    private RetentionPolicyParameters? _retentionPolicy;

    /// <summary>
    /// ID of the storage account which is used to store the flow log.
    /// </summary>
    public BicepValue<ResourceIdentifier> StorageId 
    {
        get { Initialize(); return _storageId!; }
        set { Initialize(); _storageId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _storageId;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// ID of network security group to which flow log will be applied.
    /// </summary>
    public BicepValue<ResourceIdentifier> TargetResourceId 
    {
        get { Initialize(); return _targetResourceId!; }
        set { Initialize(); _targetResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _targetResourceId;

    /// <summary>
    /// Parameters that define the configuration of traffic analytics.
    /// </summary>
    public TrafficAnalyticsConfigurationProperties TrafficAnalyticsConfiguration 
    {
        get { Initialize(); return _trafficAnalyticsConfiguration!; }
        set { Initialize(); AssignOrReplace(ref _trafficAnalyticsConfiguration, value); }
    }
    private TrafficAnalyticsConfigurationProperties? _trafficAnalyticsConfiguration;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// The provisioning state of the flow log.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Guid of network security group to which flow log will be applied.
    /// </summary>
    public BicepValue<Guid> TargetResourceGuid 
    {
        get { Initialize(); return _targetResourceGuid!; }
    }
    private BicepValue<Guid>? _targetResourceGuid;

    /// <summary>
    /// Gets or sets a reference to the parent NetworkWatcher.
    /// </summary>
    public NetworkWatcher? Parent
    {
        get { Initialize(); return _parent!.Value; }
        set { Initialize(); _parent!.Value = value; }
    }
    private ResourceReference<NetworkWatcher>? _parent;

    /// <summary>
    /// Creates a new FlowLog.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the FlowLog resource.  This can be
    /// used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the FlowLog.</param>
    public FlowLog(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Network/networkWatchers/flowLogs", resourceVersion ?? "2025-01-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of FlowLog.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _enabled = DefineProperty<bool>("Enabled", ["properties", "enabled"]);
        _enabledFilteringCriteria = DefineProperty<string>("EnabledFilteringCriteria", ["properties", "enabledFilteringCriteria"]);
        _format = DefineModelProperty<FlowLogProperties>("Format", ["properties", "format"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _identity = DefineModelProperty<ManagedServiceIdentity>("Identity", ["identity"]);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _retentionPolicy = DefineModelProperty<RetentionPolicyParameters>("RetentionPolicy", ["properties", "retentionPolicy"]);
        _storageId = DefineProperty<ResourceIdentifier>("StorageId", ["properties", "storageId"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
        _targetResourceId = DefineProperty<ResourceIdentifier>("TargetResourceId", ["properties", "targetResourceId"]);
        _trafficAnalyticsConfiguration = DefineModelProperty<TrafficAnalyticsConfigurationProperties>("TrafficAnalyticsConfiguration", ["properties", "flowAnalyticsConfiguration", "networkWatcherFlowAnalyticsConfiguration"]);
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _targetResourceGuid = DefineProperty<Guid>("TargetResourceGuid", ["properties", "targetResourceGuid"], isOutput: true);
        _parent = DefineResource<NetworkWatcher>("Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported FlowLog resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-01-01.
        /// </summary>
        public static readonly string V2025_01_01 = "2025-01-01";

        /// <summary>
        /// 2024-10-01.
        /// </summary>
        public static readonly string V2024_10_01 = "2024-10-01";

        /// <summary>
        /// 2024-07-01.
        /// </summary>
        public static readonly string V2024_07_01 = "2024-07-01";

        /// <summary>
        /// 2024-05-01.
        /// </summary>
        public static readonly string V2024_05_01 = "2024-05-01";

        /// <summary>
        /// 2024-03-01.
        /// </summary>
        public static readonly string V2024_03_01 = "2024-03-01";

        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2023-09-01.
        /// </summary>
        public static readonly string V2023_09_01 = "2023-09-01";

        /// <summary>
        /// 2023-06-01.
        /// </summary>
        public static readonly string V2023_06_01 = "2023-06-01";

        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2023-04-01.
        /// </summary>
        public static readonly string V2023_04_01 = "2023-04-01";

        /// <summary>
        /// 2023-02-01.
        /// </summary>
        public static readonly string V2023_02_01 = "2023-02-01";

        /// <summary>
        /// 2022-11-01.
        /// </summary>
        public static readonly string V2022_11_01 = "2022-11-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-07-01.
        /// </summary>
        public static readonly string V2022_07_01 = "2022-07-01";

        /// <summary>
        /// 2022-05-01.
        /// </summary>
        public static readonly string V2022_05_01 = "2022-05-01";

        /// <summary>
        /// 2022-01-01.
        /// </summary>
        public static readonly string V2022_01_01 = "2022-01-01";

        /// <summary>
        /// 2021-12-01.
        /// </summary>
        public static readonly string V2021_12_01 = "2021-12-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-06-01.
        /// </summary>
        public static readonly string V2021_06_01 = "2021-06-01";

        /// <summary>
        /// 2021-05-01.
        /// </summary>
        public static readonly string V2021_05_01 = "2021-05-01";

        /// <summary>
        /// 2021-04-01.
        /// </summary>
        public static readonly string V2021_04_01 = "2021-04-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2020-11-01.
        /// </summary>
        public static readonly string V2020_11_01 = "2020-11-01";

        /// <summary>
        /// 2020-08-01.
        /// </summary>
        public static readonly string V2020_08_01 = "2020-08-01";

        /// <summary>
        /// 2020-07-01.
        /// </summary>
        public static readonly string V2020_07_01 = "2020-07-01";

        /// <summary>
        /// 2020-06-01.
        /// </summary>
        public static readonly string V2020_06_01 = "2020-06-01";

        /// <summary>
        /// 2020-05-01.
        /// </summary>
        public static readonly string V2020_05_01 = "2020-05-01";

        /// <summary>
        /// 2020-04-01.
        /// </summary>
        public static readonly string V2020_04_01 = "2020-04-01";

        /// <summary>
        /// 2020-03-01.
        /// </summary>
        public static readonly string V2020_03_01 = "2020-03-01";

        /// <summary>
        /// 2020-01-01.
        /// </summary>
        public static readonly string V2020_01_01 = "2020-01-01";

        /// <summary>
        /// 2019-12-01.
        /// </summary>
        public static readonly string V2019_12_01 = "2019-12-01";

        /// <summary>
        /// 2019-11-01.
        /// </summary>
        public static readonly string V2019_11_01 = "2019-11-01";

        /// <summary>
        /// 2019-09-01.
        /// </summary>
        public static readonly string V2019_09_01 = "2019-09-01";

        /// <summary>
        /// 2019-08-01.
        /// </summary>
        public static readonly string V2019_08_01 = "2019-08-01";

        /// <summary>
        /// 2019-07-01.
        /// </summary>
        public static readonly string V2019_07_01 = "2019-07-01";

        /// <summary>
        /// 2019-06-01.
        /// </summary>
        public static readonly string V2019_06_01 = "2019-06-01";

        /// <summary>
        /// 2019-04-01.
        /// </summary>
        public static readonly string V2019_04_01 = "2019-04-01";

        /// <summary>
        /// 2019-02-01.
        /// </summary>
        public static readonly string V2019_02_01 = "2019-02-01";

        /// <summary>
        /// 2018-12-01.
        /// </summary>
        public static readonly string V2018_12_01 = "2018-12-01";

        /// <summary>
        /// 2018-11-01.
        /// </summary>
        public static readonly string V2018_11_01 = "2018-11-01";

        /// <summary>
        /// 2018-10-01.
        /// </summary>
        public static readonly string V2018_10_01 = "2018-10-01";

        /// <summary>
        /// 2018-08-01.
        /// </summary>
        public static readonly string V2018_08_01 = "2018-08-01";

        /// <summary>
        /// 2018-07-01.
        /// </summary>
        public static readonly string V2018_07_01 = "2018-07-01";

        /// <summary>
        /// 2018-06-01.
        /// </summary>
        public static readonly string V2018_06_01 = "2018-06-01";

        /// <summary>
        /// 2018-05-01.
        /// </summary>
        public static readonly string V2018_05_01 = "2018-05-01";

        /// <summary>
        /// 2018-04-01.
        /// </summary>
        public static readonly string V2018_04_01 = "2018-04-01";

        /// <summary>
        /// 2018-03-01.
        /// </summary>
        public static readonly string V2018_03_01 = "2018-03-01";

        /// <summary>
        /// 2018-02-01.
        /// </summary>
        public static readonly string V2018_02_01 = "2018-02-01";

        /// <summary>
        /// 2018-01-01.
        /// </summary>
        public static readonly string V2018_01_01 = "2018-01-01";

        /// <summary>
        /// 2017-11-01.
        /// </summary>
        public static readonly string V2017_11_01 = "2017-11-01";

        /// <summary>
        /// 2017-10-01.
        /// </summary>
        public static readonly string V2017_10_01 = "2017-10-01";

        /// <summary>
        /// 2017-09-01.
        /// </summary>
        public static readonly string V2017_09_01 = "2017-09-01";
    }

    /// <summary>
    /// Creates a reference to an existing FlowLog.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the FlowLog resource.  This can be
    /// used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the FlowLog.</param>
    /// <returns>The existing FlowLog resource.</returns>
    public static FlowLog FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
