// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// NetworkInterfaceIPConfiguration.
/// </summary>
public partial class NetworkInterfaceIPConfiguration : ProvisionableResource
{
    /// <summary>
    /// Resource name.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// The reference to ApplicationGatewayBackendAddressPool resource.
    /// </summary>
    public BicepList<ApplicationGatewayBackendAddressPool> ApplicationGatewayBackendAddressPools 
    {
        get { Initialize(); return _applicationGatewayBackendAddressPools!; }
    }
    private BicepList<ApplicationGatewayBackendAddressPool>? _applicationGatewayBackendAddressPools;

    /// <summary>
    /// Application security groups in which the IP configuration is included.
    /// </summary>
    public BicepList<ApplicationSecurityGroup> ApplicationSecurityGroups 
    {
        get { Initialize(); return _applicationSecurityGroups!; }
    }
    private BicepList<ApplicationSecurityGroup>? _applicationSecurityGroups;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> GatewayLoadBalancerId 
    {
        get { Initialize(); return _gatewayLoadBalancerId!; }
    }
    private BicepValue<ResourceIdentifier>? _gatewayLoadBalancerId;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// The reference to LoadBalancerBackendAddressPool resource.
    /// </summary>
    public BicepList<BackendAddressPool> LoadBalancerBackendAddressPools 
    {
        get { Initialize(); return _loadBalancerBackendAddressPools!; }
    }
    private BicepList<BackendAddressPool>? _loadBalancerBackendAddressPools;

    /// <summary>
    /// A list of references of LoadBalancerInboundNatRules.
    /// </summary>
    public BicepList<InboundNatRule> LoadBalancerInboundNatRules 
    {
        get { Initialize(); return _loadBalancerInboundNatRules!; }
    }
    private BicepList<InboundNatRule>? _loadBalancerInboundNatRules;

    /// <summary>
    /// Whether this is a primary customer address on the network interface.
    /// </summary>
    public BicepValue<bool> Primary 
    {
        get { Initialize(); return _primary!; }
    }
    private BicepValue<bool>? _primary;

    /// <summary>
    /// Private IP address of the IP configuration. It can be a single IP
    /// address or a CIDR block in the format
    /// &lt;address&gt;/&lt;prefix-length&gt;.
    /// </summary>
    public BicepValue<string> PrivateIPAddress 
    {
        get { Initialize(); return _privateIPAddress!; }
    }
    private BicepValue<string>? _privateIPAddress;

    /// <summary>
    /// The private IP address prefix length. If specified and the allocation
    /// method is dynamic, the service will allocate a CIDR block instead of a
    /// single IP address.
    /// </summary>
    public BicepValue<int> PrivateIPAddressPrefixLength 
    {
        get { Initialize(); return _privateIPAddressPrefixLength!; }
    }
    private BicepValue<int>? _privateIPAddressPrefixLength;

    /// <summary>
    /// Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
    /// </summary>
    public BicepValue<NetworkIPVersion> PrivateIPAddressVersion 
    {
        get { Initialize(); return _privateIPAddressVersion!; }
    }
    private BicepValue<NetworkIPVersion>? _privateIPAddressVersion;

    /// <summary>
    /// The private IP address allocation method.
    /// </summary>
    public BicepValue<NetworkIPAllocationMethod> PrivateIPAllocationMethod 
    {
        get { Initialize(); return _privateIPAllocationMethod!; }
    }
    private BicepValue<NetworkIPAllocationMethod>? _privateIPAllocationMethod;

    /// <summary>
    /// PrivateLinkConnection properties for the network interface.
    /// </summary>
    public NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties PrivateLinkConnectionProperties 
    {
        get { Initialize(); return _privateLinkConnectionProperties!; }
    }
    private NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties? _privateLinkConnectionProperties;

    /// <summary>
    /// The provisioning state of the network interface IP configuration.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// Public IP address bound to the IP configuration.
    /// </summary>
    public PublicIPAddress PublicIPAddress 
    {
        get { Initialize(); return _publicIPAddress!; }
    }
    private PublicIPAddress? _publicIPAddress;

    /// <summary>
    /// Subnet bound to the IP configuration.
    /// </summary>
    public SubnetResource Subnet 
    {
        get { Initialize(); return _subnet!; }
    }
    private SubnetResource? _subnet;

    /// <summary>
    /// The reference to Virtual Network Taps.
    /// </summary>
    public BicepList<VirtualNetworkTap> VirtualNetworkTaps 
    {
        get { Initialize(); return _virtualNetworkTaps!; }
    }
    private BicepList<VirtualNetworkTap>? _virtualNetworkTaps;

    /// <summary>
    /// Gets or sets a reference to the parent NetworkInterface.
    /// </summary>
    public NetworkInterface? Parent
    {
        get { Initialize(); return _parent!.Value; }
        set { Initialize(); _parent!.Value = value; }
    }
    private ResourceReference<NetworkInterface>? _parent;

    /// <summary>
    /// Creates a new NetworkInterfaceIPConfiguration.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the NetworkInterfaceIPConfiguration
    /// resource.  This can be used to refer to the resource in expressions,
    /// but is not the Azure name of the resource.  This value can contain
    /// letters, numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the NetworkInterfaceIPConfiguration.</param>
    public NetworkInterfaceIPConfiguration(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Network/networkInterfaces/ipConfigurations", resourceVersion ?? "2025-01-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// NetworkInterfaceIPConfiguration.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isOutput: true);
        _applicationGatewayBackendAddressPools = DefineListProperty<ApplicationGatewayBackendAddressPool>("ApplicationGatewayBackendAddressPools", ["properties", "applicationGatewayBackendAddressPools"], isOutput: true);
        _applicationSecurityGroups = DefineListProperty<ApplicationSecurityGroup>("ApplicationSecurityGroups", ["properties", "applicationSecurityGroups"], isOutput: true);
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _gatewayLoadBalancerId = DefineProperty<ResourceIdentifier>("GatewayLoadBalancerId", ["properties", "gatewayLoadBalancer", "id"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _loadBalancerBackendAddressPools = DefineListProperty<BackendAddressPool>("LoadBalancerBackendAddressPools", ["properties", "loadBalancerBackendAddressPools"], isOutput: true);
        _loadBalancerInboundNatRules = DefineListProperty<InboundNatRule>("LoadBalancerInboundNatRules", ["properties", "loadBalancerInboundNatRules"], isOutput: true);
        _primary = DefineProperty<bool>("Primary", ["properties", "primary"], isOutput: true);
        _privateIPAddress = DefineProperty<string>("PrivateIPAddress", ["properties", "privateIPAddress"], isOutput: true);
        _privateIPAddressPrefixLength = DefineProperty<int>("PrivateIPAddressPrefixLength", ["properties", "privateIPAddressPrefixLength"], isOutput: true);
        _privateIPAddressVersion = DefineProperty<NetworkIPVersion>("PrivateIPAddressVersion", ["properties", "privateIPAddressVersion"], isOutput: true);
        _privateIPAllocationMethod = DefineProperty<NetworkIPAllocationMethod>("PrivateIPAllocationMethod", ["properties", "privateIPAllocationMethod"], isOutput: true);
        _privateLinkConnectionProperties = DefineModelProperty<NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties>("PrivateLinkConnectionProperties", ["properties", "privateLinkConnectionProperties"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _publicIPAddress = DefineModelProperty<PublicIPAddress>("PublicIPAddress", ["properties", "publicIPAddress"], new PublicIPAddress("publicIPAddress"), isOutput: true);
        _subnet = DefineModelProperty<SubnetResource>("Subnet", ["properties", "subnet"], new SubnetResource("subnetResource"), isOutput: true);
        _virtualNetworkTaps = DefineListProperty<VirtualNetworkTap>("VirtualNetworkTaps", ["properties", "virtualNetworkTaps"], isOutput: true);
        _parent = DefineResource<NetworkInterface>("Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported NetworkInterfaceIPConfiguration resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-01-01.
        /// </summary>
        public static readonly string V2025_01_01 = "2025-01-01";

        /// <summary>
        /// 2024-10-01.
        /// </summary>
        public static readonly string V2024_10_01 = "2024-10-01";

        /// <summary>
        /// 2024-07-01.
        /// </summary>
        public static readonly string V2024_07_01 = "2024-07-01";

        /// <summary>
        /// 2024-05-01.
        /// </summary>
        public static readonly string V2024_05_01 = "2024-05-01";

        /// <summary>
        /// 2024-03-01.
        /// </summary>
        public static readonly string V2024_03_01 = "2024-03-01";

        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2023-09-01.
        /// </summary>
        public static readonly string V2023_09_01 = "2023-09-01";

        /// <summary>
        /// 2023-06-01.
        /// </summary>
        public static readonly string V2023_06_01 = "2023-06-01";

        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2023-04-01.
        /// </summary>
        public static readonly string V2023_04_01 = "2023-04-01";

        /// <summary>
        /// 2023-02-01.
        /// </summary>
        public static readonly string V2023_02_01 = "2023-02-01";

        /// <summary>
        /// 2022-11-01.
        /// </summary>
        public static readonly string V2022_11_01 = "2022-11-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-07-01.
        /// </summary>
        public static readonly string V2022_07_01 = "2022-07-01";

        /// <summary>
        /// 2022-05-01.
        /// </summary>
        public static readonly string V2022_05_01 = "2022-05-01";

        /// <summary>
        /// 2022-01-01.
        /// </summary>
        public static readonly string V2022_01_01 = "2022-01-01";

        /// <summary>
        /// 2021-12-01.
        /// </summary>
        public static readonly string V2021_12_01 = "2021-12-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-06-01.
        /// </summary>
        public static readonly string V2021_06_01 = "2021-06-01";

        /// <summary>
        /// 2021-05-01.
        /// </summary>
        public static readonly string V2021_05_01 = "2021-05-01";

        /// <summary>
        /// 2021-04-01.
        /// </summary>
        public static readonly string V2021_04_01 = "2021-04-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2020-11-01.
        /// </summary>
        public static readonly string V2020_11_01 = "2020-11-01";

        /// <summary>
        /// 2020-08-01.
        /// </summary>
        public static readonly string V2020_08_01 = "2020-08-01";

        /// <summary>
        /// 2020-07-01.
        /// </summary>
        public static readonly string V2020_07_01 = "2020-07-01";

        /// <summary>
        /// 2020-06-01.
        /// </summary>
        public static readonly string V2020_06_01 = "2020-06-01";

        /// <summary>
        /// 2020-05-01.
        /// </summary>
        public static readonly string V2020_05_01 = "2020-05-01";

        /// <summary>
        /// 2020-04-01.
        /// </summary>
        public static readonly string V2020_04_01 = "2020-04-01";

        /// <summary>
        /// 2020-03-01.
        /// </summary>
        public static readonly string V2020_03_01 = "2020-03-01";

        /// <summary>
        /// 2020-01-01.
        /// </summary>
        public static readonly string V2020_01_01 = "2020-01-01";

        /// <summary>
        /// 2019-12-01.
        /// </summary>
        public static readonly string V2019_12_01 = "2019-12-01";

        /// <summary>
        /// 2019-11-01.
        /// </summary>
        public static readonly string V2019_11_01 = "2019-11-01";

        /// <summary>
        /// 2019-09-01.
        /// </summary>
        public static readonly string V2019_09_01 = "2019-09-01";

        /// <summary>
        /// 2019-08-01.
        /// </summary>
        public static readonly string V2019_08_01 = "2019-08-01";

        /// <summary>
        /// 2019-07-01.
        /// </summary>
        public static readonly string V2019_07_01 = "2019-07-01";

        /// <summary>
        /// 2019-06-01.
        /// </summary>
        public static readonly string V2019_06_01 = "2019-06-01";

        /// <summary>
        /// 2019-04-01.
        /// </summary>
        public static readonly string V2019_04_01 = "2019-04-01";

        /// <summary>
        /// 2019-02-01.
        /// </summary>
        public static readonly string V2019_02_01 = "2019-02-01";

        /// <summary>
        /// 2018-12-01.
        /// </summary>
        public static readonly string V2018_12_01 = "2018-12-01";

        /// <summary>
        /// 2018-11-01.
        /// </summary>
        public static readonly string V2018_11_01 = "2018-11-01";

        /// <summary>
        /// 2018-10-01.
        /// </summary>
        public static readonly string V2018_10_01 = "2018-10-01";

        /// <summary>
        /// 2018-08-01.
        /// </summary>
        public static readonly string V2018_08_01 = "2018-08-01";

        /// <summary>
        /// 2018-07-01.
        /// </summary>
        public static readonly string V2018_07_01 = "2018-07-01";

        /// <summary>
        /// 2018-06-01.
        /// </summary>
        public static readonly string V2018_06_01 = "2018-06-01";

        /// <summary>
        /// 2018-05-01.
        /// </summary>
        public static readonly string V2018_05_01 = "2018-05-01";

        /// <summary>
        /// 2018-04-01.
        /// </summary>
        public static readonly string V2018_04_01 = "2018-04-01";

        /// <summary>
        /// 2018-03-01.
        /// </summary>
        public static readonly string V2018_03_01 = "2018-03-01";

        /// <summary>
        /// 2018-02-01.
        /// </summary>
        public static readonly string V2018_02_01 = "2018-02-01";

        /// <summary>
        /// 2018-01-01.
        /// </summary>
        public static readonly string V2018_01_01 = "2018-01-01";

        /// <summary>
        /// 2017-11-01.
        /// </summary>
        public static readonly string V2017_11_01 = "2017-11-01";

        /// <summary>
        /// 2017-10-01.
        /// </summary>
        public static readonly string V2017_10_01 = "2017-10-01";

        /// <summary>
        /// 2017-09-01.
        /// </summary>
        public static readonly string V2017_09_01 = "2017-09-01";

        /// <summary>
        /// 2017-08-01.
        /// </summary>
        public static readonly string V2017_08_01 = "2017-08-01";

        /// <summary>
        /// 2017-06-01.
        /// </summary>
        public static readonly string V2017_06_01 = "2017-06-01";

        /// <summary>
        /// 2017-04-01.
        /// </summary>
        public static readonly string V2017_04_01 = "2017-04-01";

        /// <summary>
        /// 2017-03-01.
        /// </summary>
        public static readonly string V2017_03_01 = "2017-03-01";

        /// <summary>
        /// 2016-12-01.
        /// </summary>
        public static readonly string V2016_12_01 = "2016-12-01";

        /// <summary>
        /// 2016-11-01.
        /// </summary>
        public static readonly string V2016_11_01 = "2016-11-01";

        /// <summary>
        /// 2016-10-01.
        /// </summary>
        public static readonly string V2016_10_01 = "2016-10-01";

        /// <summary>
        /// 2016-09-01.
        /// </summary>
        public static readonly string V2016_09_01 = "2016-09-01";

        /// <summary>
        /// 2016-08-01.
        /// </summary>
        public static readonly string V2016_08_01 = "2016-08-01";

        /// <summary>
        /// 2016-07-01.
        /// </summary>
        public static readonly string V2016_07_01 = "2016-07-01";

        /// <summary>
        /// 2016-06-01.
        /// </summary>
        public static readonly string V2016_06_01 = "2016-06-01";

        /// <summary>
        /// 2016-03-30.
        /// </summary>
        public static readonly string V2016_03_30 = "2016-03-30";

        /// <summary>
        /// 2015-06-15.
        /// </summary>
        public static readonly string V2015_06_15 = "2015-06-15";
    }

    /// <summary>
    /// Creates a reference to an existing NetworkInterfaceIPConfiguration.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the NetworkInterfaceIPConfiguration
    /// resource.  This can be used to refer to the resource in expressions,
    /// but is not the Azure name of the resource.  This value can contain
    /// letters, numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the NetworkInterfaceIPConfiguration.</param>
    /// <returns>The existing NetworkInterfaceIPConfiguration resource.</returns>
    public static NetworkInterfaceIPConfiguration FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
