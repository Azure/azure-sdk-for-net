// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;
using System.Net;

namespace Azure.Provisioning.Network;

/// <summary>
/// VirtualNetwork.
/// </summary>
public partial class VirtualNetwork : ProvisionableResource
{
    /// <summary>
    /// The name of the virtual network.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Parameters supplied to the create or update virtual network operation.
    /// </summary>
    public VirtualNetworkData Data 
    {
        get { Initialize(); return _data!; }
        set { Initialize(); AssignOrReplace(ref _data, value); }
    }
    private VirtualNetworkData? _data;

    /// <summary>
    /// A list of address blocks reserved for this virtual network in CIDR
    /// notation.
    /// </summary>
    public BicepList<string> AddressPrefixes 
    {
        get { Initialize(); return _addressPrefixes!; }
    }
    private BicepList<string>? _addressPrefixes;

    /// <summary>
    /// The AddressSpace that contains an array of IP address ranges that can
    /// be used by subnets.
    /// </summary>
    public VirtualNetworkAddressSpace AddressSpace 
    {
        get { Initialize(); return _addressSpace!; }
    }
    private VirtualNetworkAddressSpace? _addressSpace;

    /// <summary>
    /// Bgp Communities sent over ExpressRoute with each route corresponding to
    /// a prefix in this VNET.
    /// </summary>
    public VirtualNetworkBgpCommunities BgpCommunities 
    {
        get { Initialize(); return _bgpCommunities!; }
    }
    private VirtualNetworkBgpCommunities? _bgpCommunities;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> DdosProtectionPlanId 
    {
        get { Initialize(); return _ddosProtectionPlanId!; }
    }
    private BicepValue<ResourceIdentifier>? _ddosProtectionPlanId;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> DefaultPublicNatGatewayId 
    {
        get { Initialize(); return _defaultPublicNatGatewayId!; }
    }
    private BicepValue<ResourceIdentifier>? _defaultPublicNatGatewayId;

    /// <summary>
    /// The list of DNS servers IP addresses.
    /// </summary>
    public BicepList<string> DhcpOptionsDnsServers 
    {
        get { Initialize(); return _dhcpOptionsDnsServers!; }
    }
    private BicepList<string>? _dhcpOptionsDnsServers;

    /// <summary>
    /// Indicates if DDoS protection is enabled for all the protected resources
    /// in the virtual network. It requires a DDoS protection plan associated
    /// with the resource.
    /// </summary>
    public BicepValue<bool> EnableDdosProtection 
    {
        get { Initialize(); return _enableDdosProtection!; }
    }
    private BicepValue<bool>? _enableDdosProtection;

    /// <summary>
    /// Indicates if VM protection is enabled for all the subnets in the
    /// virtual network.
    /// </summary>
    public BicepValue<bool> EnableVmProtection 
    {
        get { Initialize(); return _enableVmProtection!; }
    }
    private BicepValue<bool>? _enableVmProtection;

    /// <summary>
    /// Indicates if encryption is enabled on virtual network and if VM without
    /// encryption is allowed in encrypted VNet.
    /// </summary>
    public VirtualNetworkEncryption Encryption 
    {
        get { Initialize(); return _encryption!; }
    }
    private VirtualNetworkEncryption? _encryption;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// The extended location of the virtual network.
    /// </summary>
    public ExtendedAzureLocation ExtendedLocation 
    {
        get { Initialize(); return _extendedLocation!; }
    }
    private ExtendedAzureLocation? _extendedLocation;

    /// <summary>
    /// A collection of references to flow log resources.
    /// </summary>
    public BicepList<FlowLogData> FlowLogs 
    {
        get { Initialize(); return _flowLogs!; }
    }
    private BicepList<FlowLogData>? _flowLogs;

    /// <summary>
    /// The FlowTimeout value (in minutes) for the Virtual Network.
    /// </summary>
    public BicepValue<int> FlowTimeoutInMinutes 
    {
        get { Initialize(); return _flowTimeoutInMinutes!; }
    }
    private BicepValue<int>? _flowTimeoutInMinutes;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Array of IpAllocation which reference this VNET.
    /// </summary>
    public BicepList<WritableSubResource> IPAllocations 
    {
        get { Initialize(); return _iPAllocations!; }
    }
    private BicepList<WritableSubResource>? _iPAllocations;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Private Endpoint VNet Policies.
    /// </summary>
    public BicepValue<PrivateEndpointVnetPolicy> PrivateEndpointVnetPolicy 
    {
        get { Initialize(); return _privateEndpointVnetPolicy!; }
    }
    private BicepValue<PrivateEndpointVnetPolicy>? _privateEndpointVnetPolicy;

    /// <summary>
    /// The provisioning state of the virtual network resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// The resourceGuid property of the Virtual Network resource.
    /// </summary>
    public BicepValue<Guid> ResourceGuid 
    {
        get { Initialize(); return _resourceGuid!; }
    }
    private BicepValue<Guid>? _resourceGuid;

    /// <summary>
    /// A list of subnets in a Virtual Network.
    /// </summary>
    public BicepList<SubnetData> Subnets 
    {
        get { Initialize(); return _subnets!; }
    }
    private BicepList<SubnetData>? _subnets;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// A list of peerings in a Virtual Network.
    /// </summary>
    public BicepList<VirtualNetworkPeeringData> VirtualNetworkPeerings 
    {
        get { Initialize(); return _virtualNetworkPeerings!; }
    }
    private BicepList<VirtualNetworkPeeringData>? _virtualNetworkPeerings;

    /// <summary>
    /// Creates a new VirtualNetwork.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the VirtualNetwork resource.  This can
    /// be used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the VirtualNetwork.</param>
    public VirtualNetwork(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Network/virtualNetworks", resourceVersion ?? "2025-01-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of VirtualNetwork.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _data = DefineModelProperty<VirtualNetworkData>("Data", ["Data"]);
        _addressPrefixes = DefineListProperty<string>("AddressPrefixes", ["AddressPrefixes"], isOutput: true);
        _addressSpace = DefineModelProperty<VirtualNetworkAddressSpace>("AddressSpace", ["AddressSpace"], isOutput: true);
        _bgpCommunities = DefineModelProperty<VirtualNetworkBgpCommunities>("BgpCommunities", ["BgpCommunities"], isOutput: true);
        _ddosProtectionPlanId = DefineProperty<ResourceIdentifier>("DdosProtectionPlanId", ["DdosProtectionPlanId"], isOutput: true);
        _defaultPublicNatGatewayId = DefineProperty<ResourceIdentifier>("DefaultPublicNatGatewayId", ["DefaultPublicNatGatewayId"], isOutput: true);
        _dhcpOptionsDnsServers = DefineListProperty<string>("DhcpOptionsDnsServers", ["DhcpOptionsDnsServers"], isOutput: true);
        _enableDdosProtection = DefineProperty<bool>("EnableDdosProtection", ["EnableDdosProtection"], isOutput: true);
        _enableVmProtection = DefineProperty<bool>("EnableVmProtection", ["EnableVmProtection"], isOutput: true);
        _encryption = DefineModelProperty<VirtualNetworkEncryption>("Encryption", ["Encryption"], isOutput: true);
        _eTag = DefineProperty<ETag>("ETag", ["ETag"], isOutput: true);
        _extendedLocation = DefineModelProperty<ExtendedAzureLocation>("ExtendedLocation", ["ExtendedLocation"], isOutput: true);
        _flowLogs = DefineListProperty<FlowLogData>("FlowLogs", ["FlowLogs"], isOutput: true);
        _flowTimeoutInMinutes = DefineProperty<int>("FlowTimeoutInMinutes", ["FlowTimeoutInMinutes"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _iPAllocations = DefineListProperty<WritableSubResource>("IPAllocations", ["IPAllocations"], isOutput: true);
        _location = DefineProperty<AzureLocation>("Location", ["location"], isOutput: true);
        _privateEndpointVnetPolicy = DefineProperty<PrivateEndpointVnetPolicy>("PrivateEndpointVnetPolicy", ["PrivateEndpointVnetPolicy"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["ProvisioningState"], isOutput: true);
        _resourceGuid = DefineProperty<Guid>("ResourceGuid", ["ResourceGuid"], isOutput: true);
        _subnets = DefineListProperty<SubnetData>("Subnets", ["Subnets"], isOutput: true);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"], isOutput: true);
        _virtualNetworkPeerings = DefineListProperty<VirtualNetworkPeeringData>("VirtualNetworkPeerings", ["VirtualNetworkPeerings"], isOutput: true);
    }

    /// <summary>
    /// Supported VirtualNetwork resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-01-01.
        /// </summary>
        public static readonly string V2025_01_01 = "2025-01-01";

        /// <summary>
        /// 2024-10-01.
        /// </summary>
        public static readonly string V2024_10_01 = "2024-10-01";

        /// <summary>
        /// 2024-07-01.
        /// </summary>
        public static readonly string V2024_07_01 = "2024-07-01";

        /// <summary>
        /// 2024-05-01.
        /// </summary>
        public static readonly string V2024_05_01 = "2024-05-01";

        /// <summary>
        /// 2024-03-01.
        /// </summary>
        public static readonly string V2024_03_01 = "2024-03-01";

        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2023-09-01.
        /// </summary>
        public static readonly string V2023_09_01 = "2023-09-01";

        /// <summary>
        /// 2023-06-01.
        /// </summary>
        public static readonly string V2023_06_01 = "2023-06-01";

        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2023-04-01.
        /// </summary>
        public static readonly string V2023_04_01 = "2023-04-01";

        /// <summary>
        /// 2023-02-01.
        /// </summary>
        public static readonly string V2023_02_01 = "2023-02-01";

        /// <summary>
        /// 2022-11-01.
        /// </summary>
        public static readonly string V2022_11_01 = "2022-11-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-07-01.
        /// </summary>
        public static readonly string V2022_07_01 = "2022-07-01";

        /// <summary>
        /// 2022-05-01.
        /// </summary>
        public static readonly string V2022_05_01 = "2022-05-01";

        /// <summary>
        /// 2022-01-01.
        /// </summary>
        public static readonly string V2022_01_01 = "2022-01-01";

        /// <summary>
        /// 2021-12-01.
        /// </summary>
        public static readonly string V2021_12_01 = "2021-12-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-06-01.
        /// </summary>
        public static readonly string V2021_06_01 = "2021-06-01";

        /// <summary>
        /// 2021-05-01.
        /// </summary>
        public static readonly string V2021_05_01 = "2021-05-01";

        /// <summary>
        /// 2021-04-01.
        /// </summary>
        public static readonly string V2021_04_01 = "2021-04-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2020-11-01.
        /// </summary>
        public static readonly string V2020_11_01 = "2020-11-01";

        /// <summary>
        /// 2020-08-01.
        /// </summary>
        public static readonly string V2020_08_01 = "2020-08-01";

        /// <summary>
        /// 2020-07-01.
        /// </summary>
        public static readonly string V2020_07_01 = "2020-07-01";

        /// <summary>
        /// 2020-06-01.
        /// </summary>
        public static readonly string V2020_06_01 = "2020-06-01";

        /// <summary>
        /// 2020-05-01.
        /// </summary>
        public static readonly string V2020_05_01 = "2020-05-01";

        /// <summary>
        /// 2020-04-01.
        /// </summary>
        public static readonly string V2020_04_01 = "2020-04-01";

        /// <summary>
        /// 2020-03-01.
        /// </summary>
        public static readonly string V2020_03_01 = "2020-03-01";

        /// <summary>
        /// 2020-01-01.
        /// </summary>
        public static readonly string V2020_01_01 = "2020-01-01";

        /// <summary>
        /// 2019-12-01.
        /// </summary>
        public static readonly string V2019_12_01 = "2019-12-01";

        /// <summary>
        /// 2019-11-01.
        /// </summary>
        public static readonly string V2019_11_01 = "2019-11-01";

        /// <summary>
        /// 2019-09-01.
        /// </summary>
        public static readonly string V2019_09_01 = "2019-09-01";

        /// <summary>
        /// 2019-08-01.
        /// </summary>
        public static readonly string V2019_08_01 = "2019-08-01";

        /// <summary>
        /// 2019-07-01.
        /// </summary>
        public static readonly string V2019_07_01 = "2019-07-01";

        /// <summary>
        /// 2019-06-01.
        /// </summary>
        public static readonly string V2019_06_01 = "2019-06-01";

        /// <summary>
        /// 2019-04-01.
        /// </summary>
        public static readonly string V2019_04_01 = "2019-04-01";

        /// <summary>
        /// 2019-02-01.
        /// </summary>
        public static readonly string V2019_02_01 = "2019-02-01";

        /// <summary>
        /// 2018-12-01.
        /// </summary>
        public static readonly string V2018_12_01 = "2018-12-01";

        /// <summary>
        /// 2018-11-01.
        /// </summary>
        public static readonly string V2018_11_01 = "2018-11-01";

        /// <summary>
        /// 2018-10-01.
        /// </summary>
        public static readonly string V2018_10_01 = "2018-10-01";

        /// <summary>
        /// 2018-08-01.
        /// </summary>
        public static readonly string V2018_08_01 = "2018-08-01";

        /// <summary>
        /// 2018-07-01.
        /// </summary>
        public static readonly string V2018_07_01 = "2018-07-01";

        /// <summary>
        /// 2018-06-01.
        /// </summary>
        public static readonly string V2018_06_01 = "2018-06-01";

        /// <summary>
        /// 2018-05-01.
        /// </summary>
        public static readonly string V2018_05_01 = "2018-05-01";

        /// <summary>
        /// 2018-04-01.
        /// </summary>
        public static readonly string V2018_04_01 = "2018-04-01";

        /// <summary>
        /// 2018-03-01.
        /// </summary>
        public static readonly string V2018_03_01 = "2018-03-01";

        /// <summary>
        /// 2018-02-01.
        /// </summary>
        public static readonly string V2018_02_01 = "2018-02-01";

        /// <summary>
        /// 2018-01-01.
        /// </summary>
        public static readonly string V2018_01_01 = "2018-01-01";

        /// <summary>
        /// 2017-11-01.
        /// </summary>
        public static readonly string V2017_11_01 = "2017-11-01";

        /// <summary>
        /// 2017-10-01.
        /// </summary>
        public static readonly string V2017_10_01 = "2017-10-01";

        /// <summary>
        /// 2017-09-01.
        /// </summary>
        public static readonly string V2017_09_01 = "2017-09-01";

        /// <summary>
        /// 2017-08-01.
        /// </summary>
        public static readonly string V2017_08_01 = "2017-08-01";

        /// <summary>
        /// 2017-06-01.
        /// </summary>
        public static readonly string V2017_06_01 = "2017-06-01";

        /// <summary>
        /// 2017-04-01.
        /// </summary>
        public static readonly string V2017_04_01 = "2017-04-01";

        /// <summary>
        /// 2017-03-01.
        /// </summary>
        public static readonly string V2017_03_01 = "2017-03-01";

        /// <summary>
        /// 2016-12-01.
        /// </summary>
        public static readonly string V2016_12_01 = "2016-12-01";

        /// <summary>
        /// 2016-11-01.
        /// </summary>
        public static readonly string V2016_11_01 = "2016-11-01";

        /// <summary>
        /// 2016-10-01.
        /// </summary>
        public static readonly string V2016_10_01 = "2016-10-01";

        /// <summary>
        /// 2016-09-01.
        /// </summary>
        public static readonly string V2016_09_01 = "2016-09-01";

        /// <summary>
        /// 2016-08-01.
        /// </summary>
        public static readonly string V2016_08_01 = "2016-08-01";

        /// <summary>
        /// 2016-07-01.
        /// </summary>
        public static readonly string V2016_07_01 = "2016-07-01";

        /// <summary>
        /// 2016-06-01.
        /// </summary>
        public static readonly string V2016_06_01 = "2016-06-01";

        /// <summary>
        /// 2016-03-30.
        /// </summary>
        public static readonly string V2016_03_30 = "2016-03-30";

        /// <summary>
        /// 2015-06-15.
        /// </summary>
        public static readonly string V2015_06_15 = "2015-06-15";
    }

    /// <summary>
    /// Creates a reference to an existing VirtualNetwork.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the VirtualNetwork resource.  This can
    /// be used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the VirtualNetwork.</param>
    /// <returns>The existing VirtualNetwork resource.</returns>
    public static VirtualNetwork FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this VirtualNetwork resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 2, maxLength: 64, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen | ResourceNameCharacters.Underscore | ResourceNameCharacters.Period);
}
