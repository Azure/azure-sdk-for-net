// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.Network;

/// <summary>
/// FirewallPolicy.
/// </summary>
public partial class FirewallPolicy : ProvisionableResource
{
    /// <summary>
    /// The name of the Firewall Policy.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// A flag to indicate if SQL Redirect traffic filtering is enabled.
    /// Turning on the flag requires no rule using port 11000-11999.
    /// </summary>
    public BicepValue<bool> AllowSqlRedirect 
    {
        get { Initialize(); return _allowSqlRedirect!; }
        set { Initialize(); _allowSqlRedirect!.Assign(value); }
    }
    private BicepValue<bool>? _allowSqlRedirect;

    /// <summary>
    /// Gets or sets Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> BasePolicyId 
    {
        get { Initialize(); return _basePolicyId!; }
        set { Initialize(); _basePolicyId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _basePolicyId;

    /// <summary>
    /// DNS Proxy Settings definition.
    /// </summary>
    public DnsSettings DnsSettings 
    {
        get { Initialize(); return _dnsSettings!; }
        set { Initialize(); AssignOrReplace(ref _dnsSettings, value); }
    }
    private DnsSettings? _dnsSettings;

    /// <summary>
    /// Explicit Proxy Settings definition.
    /// </summary>
    public FirewallPolicyExplicitProxy ExplicitProxy 
    {
        get { Initialize(); return _explicitProxy!; }
        set { Initialize(); AssignOrReplace(ref _explicitProxy, value); }
    }
    private FirewallPolicyExplicitProxy? _explicitProxy;

    /// <summary>
    /// Resource ID.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
        set { Initialize(); _id!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// The identity of the firewall policy.
    /// </summary>
    public ManagedServiceIdentity Identity 
    {
        get { Initialize(); return _identity!; }
        set { Initialize(); AssignOrReplace(ref _identity, value); }
    }
    private ManagedServiceIdentity? _identity;

    /// <summary>
    /// Insights on Firewall Policy.
    /// </summary>
    public FirewallPolicyInsights Insights 
    {
        get { Initialize(); return _insights!; }
        set { Initialize(); AssignOrReplace(ref _insights, value); }
    }
    private FirewallPolicyInsights? _insights;

    /// <summary>
    /// The configuration for Intrusion detection.
    /// </summary>
    public FirewallPolicyIntrusionDetection IntrusionDetection 
    {
        get { Initialize(); return _intrusionDetection!; }
        set { Initialize(); AssignOrReplace(ref _intrusionDetection, value); }
    }
    private FirewallPolicyIntrusionDetection? _intrusionDetection;

    /// <summary>
    /// Resource location.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Tier of Firewall Policy.
    /// </summary>
    public BicepValue<FirewallPolicySkuTier> SkuTier 
    {
        get { Initialize(); return _skuTier!; }
        set { Initialize(); _skuTier!.Assign(value); }
    }
    private BicepValue<FirewallPolicySkuTier>? _skuTier;

    /// <summary>
    /// The private IP addresses/IP ranges to which traffic will not be SNAT.
    /// </summary>
    public FirewallPolicySnat Snat 
    {
        get { Initialize(); return _snat!; }
        set { Initialize(); AssignOrReplace(ref _snat, value); }
    }
    private FirewallPolicySnat? _snat;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// The operation mode for Threat Intelligence.
    /// </summary>
    public BicepValue<AzureFirewallThreatIntelMode> ThreatIntelMode 
    {
        get { Initialize(); return _threatIntelMode!; }
        set { Initialize(); _threatIntelMode!.Assign(value); }
    }
    private BicepValue<AzureFirewallThreatIntelMode>? _threatIntelMode;

    /// <summary>
    /// ThreatIntel Whitelist for Firewall Policy.
    /// </summary>
    public FirewallPolicyThreatIntelWhitelist ThreatIntelWhitelist 
    {
        get { Initialize(); return _threatIntelWhitelist!; }
        set { Initialize(); AssignOrReplace(ref _threatIntelWhitelist, value); }
    }
    private FirewallPolicyThreatIntelWhitelist? _threatIntelWhitelist;

    /// <summary>
    /// The CA used for intermediate CA generation.
    /// </summary>
    public FirewallPolicyCertificateAuthority TransportSecurityCertificateAuthority 
    {
        get { Initialize(); return _transportSecurityCertificateAuthority!; }
        set { Initialize(); AssignOrReplace(ref _transportSecurityCertificateAuthority, value); }
    }
    private FirewallPolicyCertificateAuthority? _transportSecurityCertificateAuthority;

    /// <summary>
    /// List of references to Child Firewall Policies.
    /// </summary>
    public BicepList<WritableSubResource> ChildPolicies 
    {
        get { Initialize(); return _childPolicies!; }
    }
    private BicepList<WritableSubResource>? _childPolicies;

    /// <summary>
    /// A unique read-only string that changes whenever the resource is updated.
    /// </summary>
    public BicepValue<ETag> ETag 
    {
        get { Initialize(); return _eTag!; }
    }
    private BicepValue<ETag>? _eTag;

    /// <summary>
    /// List of references to Azure Firewalls that this Firewall Policy is
    /// associated with.
    /// </summary>
    public BicepList<WritableSubResource> Firewalls 
    {
        get { Initialize(); return _firewalls!; }
    }
    private BicepList<WritableSubResource>? _firewalls;

    /// <summary>
    /// The provisioning state of the firewall policy resource.
    /// </summary>
    public BicepValue<NetworkProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<NetworkProvisioningState>? _provisioningState;

    /// <summary>
    /// List of references to FirewallPolicyRuleCollectionGroups.
    /// </summary>
    public BicepList<WritableSubResource> RuleCollectionGroups 
    {
        get { Initialize(); return _ruleCollectionGroups!; }
    }
    private BicepList<WritableSubResource>? _ruleCollectionGroups;

    /// <summary>
    /// A read-only string that represents the size of the
    /// FirewallPolicyPropertiesFormat in MB. (ex 0.5MB).
    /// </summary>
    public BicepValue<string> Size 
    {
        get { Initialize(); return _size!; }
    }
    private BicepValue<string>? _size;

    /// <summary>
    /// Creates a new FirewallPolicy.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the FirewallPolicy resource.  This can
    /// be used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the FirewallPolicy.</param>
    public FirewallPolicy(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Network/firewallPolicies", resourceVersion ?? "2025-03-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of FirewallPolicy.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _allowSqlRedirect = DefineProperty<bool>("AllowSqlRedirect", ["properties", "sql", "allowSqlRedirect"]);
        _basePolicyId = DefineProperty<ResourceIdentifier>("BasePolicyId", ["properties", "basePolicy", "id"]);
        _dnsSettings = DefineModelProperty<DnsSettings>("DnsSettings", ["properties", "dnsSettings"]);
        _explicitProxy = DefineModelProperty<FirewallPolicyExplicitProxy>("ExplicitProxy", ["properties", "explicitProxy"]);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"]);
        _identity = DefineModelProperty<ManagedServiceIdentity>("Identity", ["identity"]);
        _insights = DefineModelProperty<FirewallPolicyInsights>("Insights", ["properties", "insights"]);
        _intrusionDetection = DefineModelProperty<FirewallPolicyIntrusionDetection>("IntrusionDetection", ["properties", "intrusionDetection"]);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _skuTier = DefineProperty<FirewallPolicySkuTier>("SkuTier", ["properties", "sku", "tier"]);
        _snat = DefineModelProperty<FirewallPolicySnat>("Snat", ["properties", "snat"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
        _threatIntelMode = DefineProperty<AzureFirewallThreatIntelMode>("ThreatIntelMode", ["properties", "threatIntelMode"]);
        _threatIntelWhitelist = DefineModelProperty<FirewallPolicyThreatIntelWhitelist>("ThreatIntelWhitelist", ["properties", "threatIntelWhitelist"]);
        _transportSecurityCertificateAuthority = DefineModelProperty<FirewallPolicyCertificateAuthority>("TransportSecurityCertificateAuthority", ["properties", "transportSecurity", "certificateAuthority"]);
        _childPolicies = DefineListProperty<WritableSubResource>("ChildPolicies", ["properties", "childPolicies"], isOutput: true);
        _eTag = DefineProperty<ETag>("ETag", ["etag"], isOutput: true);
        _firewalls = DefineListProperty<WritableSubResource>("Firewalls", ["properties", "firewalls"], isOutput: true);
        _provisioningState = DefineProperty<NetworkProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _ruleCollectionGroups = DefineListProperty<WritableSubResource>("RuleCollectionGroups", ["properties", "ruleCollectionGroups"], isOutput: true);
        _size = DefineProperty<string>("Size", ["properties", "size"], isOutput: true);
    }

    /// <summary>
    /// Supported FirewallPolicy resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-03-01.
        /// </summary>
        public static readonly string V2025_03_01 = "2025-03-01";

        /// <summary>
        /// 2025-01-01.
        /// </summary>
        public static readonly string V2025_01_01 = "2025-01-01";

        /// <summary>
        /// 2024-10-01.
        /// </summary>
        public static readonly string V2024_10_01 = "2024-10-01";

        /// <summary>
        /// 2024-07-01.
        /// </summary>
        public static readonly string V2024_07_01 = "2024-07-01";

        /// <summary>
        /// 2024-05-01.
        /// </summary>
        public static readonly string V2024_05_01 = "2024-05-01";

        /// <summary>
        /// 2024-03-01.
        /// </summary>
        public static readonly string V2024_03_01 = "2024-03-01";

        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2023-09-01.
        /// </summary>
        public static readonly string V2023_09_01 = "2023-09-01";

        /// <summary>
        /// 2023-06-01.
        /// </summary>
        public static readonly string V2023_06_01 = "2023-06-01";

        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2023-04-01.
        /// </summary>
        public static readonly string V2023_04_01 = "2023-04-01";

        /// <summary>
        /// 2023-02-01.
        /// </summary>
        public static readonly string V2023_02_01 = "2023-02-01";

        /// <summary>
        /// 2022-11-01.
        /// </summary>
        public static readonly string V2022_11_01 = "2022-11-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-07-01.
        /// </summary>
        public static readonly string V2022_07_01 = "2022-07-01";

        /// <summary>
        /// 2022-05-01.
        /// </summary>
        public static readonly string V2022_05_01 = "2022-05-01";

        /// <summary>
        /// 2022-01-01.
        /// </summary>
        public static readonly string V2022_01_01 = "2022-01-01";

        /// <summary>
        /// 2021-12-01.
        /// </summary>
        public static readonly string V2021_12_01 = "2021-12-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-06-01.
        /// </summary>
        public static readonly string V2021_06_01 = "2021-06-01";

        /// <summary>
        /// 2021-05-01.
        /// </summary>
        public static readonly string V2021_05_01 = "2021-05-01";

        /// <summary>
        /// 2021-04-01.
        /// </summary>
        public static readonly string V2021_04_01 = "2021-04-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2021-01-01.
        /// </summary>
        public static readonly string V2021_01_01 = "2021-01-01";

        /// <summary>
        /// 2020-11-01.
        /// </summary>
        public static readonly string V2020_11_01 = "2020-11-01";

        /// <summary>
        /// 2020-08-01.
        /// </summary>
        public static readonly string V2020_08_01 = "2020-08-01";

        /// <summary>
        /// 2020-07-01.
        /// </summary>
        public static readonly string V2020_07_01 = "2020-07-01";

        /// <summary>
        /// 2020-06-01.
        /// </summary>
        public static readonly string V2020_06_01 = "2020-06-01";

        /// <summary>
        /// 2020-05-01.
        /// </summary>
        public static readonly string V2020_05_01 = "2020-05-01";

        /// <summary>
        /// 2020-04-01.
        /// </summary>
        public static readonly string V2020_04_01 = "2020-04-01";

        /// <summary>
        /// 2020-03-01.
        /// </summary>
        public static readonly string V2020_03_01 = "2020-03-01";

        /// <summary>
        /// 2020-01-01.
        /// </summary>
        public static readonly string V2020_01_01 = "2020-01-01";

        /// <summary>
        /// 2019-12-01.
        /// </summary>
        public static readonly string V2019_12_01 = "2019-12-01";

        /// <summary>
        /// 2019-11-01.
        /// </summary>
        public static readonly string V2019_11_01 = "2019-11-01";

        /// <summary>
        /// 2019-09-01.
        /// </summary>
        public static readonly string V2019_09_01 = "2019-09-01";

        /// <summary>
        /// 2019-08-01.
        /// </summary>
        public static readonly string V2019_08_01 = "2019-08-01";

        /// <summary>
        /// 2019-07-01.
        /// </summary>
        public static readonly string V2019_07_01 = "2019-07-01";

        /// <summary>
        /// 2019-06-01.
        /// </summary>
        public static readonly string V2019_06_01 = "2019-06-01";
    }

    /// <summary>
    /// Creates a reference to an existing FirewallPolicy.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the FirewallPolicy resource.  This can
    /// be used to refer to the resource in expressions, but is not the Azure
    /// name of the resource.  This value can contain letters, numbers, and
    /// underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the FirewallPolicy.</param>
    /// <returns>The existing FirewallPolicy resource.</returns>
    public static FirewallPolicy FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this FirewallPolicy resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 80, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen | ResourceNameCharacters.Underscore | ResourceNameCharacters.Period);
}
