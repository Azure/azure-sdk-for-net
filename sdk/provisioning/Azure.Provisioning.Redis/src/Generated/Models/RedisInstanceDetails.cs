// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Redis;

/// <summary>
/// Details of single instance of redis.
/// </summary>
public partial class RedisInstanceDetails : ProvisioningConstruct
{
    /// <summary>
    /// Redis instance SSL port.
    /// </summary>
    public BicepValue<int> SslPort { get => _sslPort; }
    private readonly BicepValue<int> _sslPort;

    /// <summary>
    /// If enableNonSslPort is true, provides Redis instance Non-SSL port.
    /// </summary>
    public BicepValue<int> NonSslPort { get => _nonSslPort; }
    private readonly BicepValue<int> _nonSslPort;

    /// <summary>
    /// If the Cache uses availability zones, specifies availability zone where
    /// this instance is located.
    /// </summary>
    public BicepValue<string> Zone { get => _zone; }
    private readonly BicepValue<string> _zone;

    /// <summary>
    /// If clustering is enabled, the Shard ID of Redis Instance.
    /// </summary>
    public BicepValue<int> ShardId { get => _shardId; }
    private readonly BicepValue<int> _shardId;

    /// <summary>
    /// Specifies whether the instance is a primary node.
    /// </summary>
    public BicepValue<bool> IsMaster { get => _isMaster; }
    private readonly BicepValue<bool> _isMaster;

    /// <summary>
    /// Specifies whether the instance is a primary node.
    /// </summary>
    public BicepValue<bool> IsPrimary { get => _isPrimary; }
    private readonly BicepValue<bool> _isPrimary;

    /// <summary>
    /// Creates a new RedisInstanceDetails.
    /// </summary>
    public RedisInstanceDetails()
    {
        _sslPort = BicepValue<int>.DefineProperty(this, "SslPort", ["sslPort"], isOutput: true);
        _nonSslPort = BicepValue<int>.DefineProperty(this, "NonSslPort", ["nonSslPort"], isOutput: true);
        _zone = BicepValue<string>.DefineProperty(this, "Zone", ["zone"], isOutput: true);
        _shardId = BicepValue<int>.DefineProperty(this, "ShardId", ["shardId"], isOutput: true);
        _isMaster = BicepValue<bool>.DefineProperty(this, "IsMaster", ["isMaster"], isOutput: true);
        _isPrimary = BicepValue<bool>.DefineProperty(this, "IsPrimary", ["isPrimary"], isOutput: true);
    }
}
