// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Redis;

/// <summary>
/// All Redis Settings. Few possible keys:
/// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
/// etc.
/// </summary>
public partial class RedisCommonConfiguration : ProvisioningConstruct
{
    /// <summary>
    /// Specifies whether the rdb backup is enabled.
    /// </summary>
    public BicepValue<bool> IsRdbBackupEnabled { get => _isRdbBackupEnabled; set => _isRdbBackupEnabled.Assign(value); }
    private readonly BicepValue<bool> _isRdbBackupEnabled;

    /// <summary>
    /// Specifies the frequency for creating rdb backup in minutes. Valid
    /// values: (15, 30, 60, 360, 720, 1440).
    /// </summary>
    public BicepValue<string> RdbBackupFrequency { get => _rdbBackupFrequency; set => _rdbBackupFrequency.Assign(value); }
    private readonly BicepValue<string> _rdbBackupFrequency;

    /// <summary>
    /// Specifies the maximum number of snapshots for rdb backup.
    /// </summary>
    public BicepValue<int> RdbBackupMaxSnapshotCount { get => _rdbBackupMaxSnapshotCount; set => _rdbBackupMaxSnapshotCount.Assign(value); }
    private readonly BicepValue<int> _rdbBackupMaxSnapshotCount;

    /// <summary>
    /// The storage account connection string for storing rdb file.
    /// </summary>
    public BicepValue<string> RdbStorageConnectionString { get => _rdbStorageConnectionString; set => _rdbStorageConnectionString.Assign(value); }
    private readonly BicepValue<string> _rdbStorageConnectionString;

    /// <summary>
    /// Specifies whether the aof backup is enabled.
    /// </summary>
    public BicepValue<bool> IsAofBackupEnabled { get => _isAofBackupEnabled; set => _isAofBackupEnabled.Assign(value); }
    private readonly BicepValue<bool> _isAofBackupEnabled;

    /// <summary>
    /// First storage account connection string.
    /// </summary>
    public BicepValue<string> AofStorageConnectionString0 { get => _aofStorageConnectionString0; set => _aofStorageConnectionString0.Assign(value); }
    private readonly BicepValue<string> _aofStorageConnectionString0;

    /// <summary>
    /// Second storage account connection string.
    /// </summary>
    public BicepValue<string> AofStorageConnectionString1 { get => _aofStorageConnectionString1; set => _aofStorageConnectionString1.Assign(value); }
    private readonly BicepValue<string> _aofStorageConnectionString1;

    /// <summary>
    /// Value in megabytes reserved for fragmentation per shard.
    /// </summary>
    public BicepValue<string> MaxFragmentationMemoryReserved { get => _maxFragmentationMemoryReserved; set => _maxFragmentationMemoryReserved.Assign(value); }
    private readonly BicepValue<string> _maxFragmentationMemoryReserved;

    /// <summary>
    /// The eviction strategy used when your data won&apos;t fit within its
    /// memory limit.
    /// </summary>
    public BicepValue<string> MaxMemoryPolicy { get => _maxMemoryPolicy; set => _maxMemoryPolicy.Assign(value); }
    private readonly BicepValue<string> _maxMemoryPolicy;

    /// <summary>
    /// Value in megabytes reserved for non-cache usage per shard e.g. failover.
    /// </summary>
    public BicepValue<string> MaxMemoryReserved { get => _maxMemoryReserved; set => _maxMemoryReserved.Assign(value); }
    private readonly BicepValue<string> _maxMemoryReserved;

    /// <summary>
    /// Value in megabytes reserved for non-cache usage per shard e.g. failover.
    /// </summary>
    public BicepValue<string> MaxMemoryDelta { get => _maxMemoryDelta; set => _maxMemoryDelta.Assign(value); }
    private readonly BicepValue<string> _maxMemoryDelta;

    /// <summary>
    /// The max clients config.
    /// </summary>
    public BicepValue<string> MaxClients { get => _maxClients; }
    private readonly BicepValue<string> _maxClients;

    /// <summary>
    /// Preferred auth method to communicate to storage account used for data
    /// archive, specify SAS or ManagedIdentity, default value is SAS.
    /// </summary>
    public BicepValue<string> PreferredDataArchiveAuthMethod { get => _preferredDataArchiveAuthMethod; }
    private readonly BicepValue<string> _preferredDataArchiveAuthMethod;

    /// <summary>
    /// Preferred auth method to communicate to storage account used for data
    /// persistence, specify SAS or ManagedIdentity, default value is SAS.
    /// </summary>
    public BicepValue<string> PreferredDataPersistenceAuthMethod { get => _preferredDataPersistenceAuthMethod; set => _preferredDataPersistenceAuthMethod.Assign(value); }
    private readonly BicepValue<string> _preferredDataPersistenceAuthMethod;

    /// <summary>
    /// Zonal Configuration.
    /// </summary>
    public BicepValue<string> ZonalConfiguration { get => _zonalConfiguration; }
    private readonly BicepValue<string> _zonalConfiguration;

    /// <summary>
    /// Specifies whether the authentication is disabled. Setting this property
    /// is highly discouraged from security point of view.
    /// </summary>
    public BicepValue<string> AuthNotRequired { get => _authNotRequired; set => _authNotRequired.Assign(value); }
    private readonly BicepValue<string> _authNotRequired;

    /// <summary>
    /// SubscriptionId of the storage account for persistence (aof/rdb) using
    /// ManagedIdentity.
    /// </summary>
    public BicepValue<string> StorageSubscriptionId { get => _storageSubscriptionId; set => _storageSubscriptionId.Assign(value); }
    private readonly BicepValue<string> _storageSubscriptionId;

    /// <summary>
    /// Specifies whether AAD based authentication has been enabled or disabled
    /// for the cache.
    /// </summary>
    public BicepValue<string> IsAadEnabled { get => _isAadEnabled; set => _isAadEnabled.Assign(value); }
    private readonly BicepValue<string> _isAadEnabled;

    /// <summary>
    /// Additional Properties                          To assign an object to
    /// the value of this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepDictionary<BinaryData> AdditionalProperties { get => _additionalProperties; set => _additionalProperties.Assign(value); }
    private readonly BicepDictionary<BinaryData> _additionalProperties;

    /// <summary>
    /// Creates a new RedisCommonConfiguration.
    /// </summary>
    public RedisCommonConfiguration()
    {
        _isRdbBackupEnabled = BicepValue<bool>.DefineProperty(this, "IsRdbBackupEnabled", ["rdb-backup-enabled"]);
        _rdbBackupFrequency = BicepValue<string>.DefineProperty(this, "RdbBackupFrequency", ["rdb-backup-frequency"]);
        _rdbBackupMaxSnapshotCount = BicepValue<int>.DefineProperty(this, "RdbBackupMaxSnapshotCount", ["rdb-backup-max-snapshot-count"]);
        _rdbStorageConnectionString = BicepValue<string>.DefineProperty(this, "RdbStorageConnectionString", ["rdb-storage-connection-string"]);
        _isAofBackupEnabled = BicepValue<bool>.DefineProperty(this, "IsAofBackupEnabled", ["aof-backup-enabled"]);
        _aofStorageConnectionString0 = BicepValue<string>.DefineProperty(this, "AofStorageConnectionString0", ["aof-storage-connection-string-0"]);
        _aofStorageConnectionString1 = BicepValue<string>.DefineProperty(this, "AofStorageConnectionString1", ["aof-storage-connection-string-1"]);
        _maxFragmentationMemoryReserved = BicepValue<string>.DefineProperty(this, "MaxFragmentationMemoryReserved", ["maxfragmentationmemory-reserved"]);
        _maxMemoryPolicy = BicepValue<string>.DefineProperty(this, "MaxMemoryPolicy", ["maxmemory-policy"]);
        _maxMemoryReserved = BicepValue<string>.DefineProperty(this, "MaxMemoryReserved", ["maxmemory-reserved"]);
        _maxMemoryDelta = BicepValue<string>.DefineProperty(this, "MaxMemoryDelta", ["maxmemory-delta"]);
        _maxClients = BicepValue<string>.DefineProperty(this, "MaxClients", ["maxclients"], isOutput: true);
        _preferredDataArchiveAuthMethod = BicepValue<string>.DefineProperty(this, "PreferredDataArchiveAuthMethod", ["preferred-data-archive-auth-method"], isOutput: true);
        _preferredDataPersistenceAuthMethod = BicepValue<string>.DefineProperty(this, "PreferredDataPersistenceAuthMethod", ["preferred-data-persistence-auth-method"]);
        _zonalConfiguration = BicepValue<string>.DefineProperty(this, "ZonalConfiguration", ["zonal-configuration"], isOutput: true);
        _authNotRequired = BicepValue<string>.DefineProperty(this, "AuthNotRequired", ["authnotrequired"]);
        _storageSubscriptionId = BicepValue<string>.DefineProperty(this, "StorageSubscriptionId", ["storage-subscription-id"]);
        _isAadEnabled = BicepValue<string>.DefineProperty(this, "IsAadEnabled", ["aad-enabled"]);
        _additionalProperties = BicepDictionary<BinaryData>.DefineProperty(this, "AdditionalProperties", ["AdditionalProperties"]);
    }
}
