// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.Redis;

/// <summary>
/// RedisCacheAccessPolicyAssignment.
/// </summary>
public partial class RedisCacheAccessPolicyAssignment : Resource
{
    /// <summary>
    /// The name of the access policy assignment.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The name of the access policy that is being assigned.
    /// </summary>
    public BicepValue<string> AccessPolicyName { get => _accessPolicyName; set => _accessPolicyName.Assign(value); }
    private readonly BicepValue<string> _accessPolicyName;

    /// <summary>
    /// Object Id to assign access policy to.
    /// </summary>
    public BicepValue<Guid> ObjectId { get => _objectId; set => _objectId.Assign(value); }
    private readonly BicepValue<Guid> _objectId;

    /// <summary>
    /// User friendly name for object id. Also represents username for token
    /// based authentication.
    /// </summary>
    public BicepValue<string> ObjectIdAlias { get => _objectIdAlias; set => _objectIdAlias.Assign(value); }
    private readonly BicepValue<string> _objectIdAlias;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Provisioning state of an access policy assignment set.
    /// </summary>
    public BicepValue<AccessPolicyAssignmentProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<AccessPolicyAssignmentProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent RedisResource.
    /// </summary>
    public RedisResource? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<RedisResource> _parent;

    /// <summary>
    /// Creates a new RedisCacheAccessPolicyAssignment.
    /// </summary>
    /// <param name="resourceName">Name of the RedisCacheAccessPolicyAssignment.</param>
    /// <param name="resourceVersion">Version of the RedisCacheAccessPolicyAssignment.</param>
    /// <param name="context">Provisioning context for this resource.</param>
    public RedisCacheAccessPolicyAssignment(string resourceName, string? resourceVersion = default, ProvisioningContext? context = default)
        : base(resourceName, "Microsoft.Cache/redis/accessPolicyAssignments", resourceVersion, context)
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _accessPolicyName = BicepValue<string>.DefineProperty(this, "AccessPolicyName", ["properties", "accessPolicyName"]);
        _objectId = BicepValue<Guid>.DefineProperty(this, "ObjectId", ["properties", "objectId"]);
        _objectIdAlias = BicepValue<string>.DefineProperty(this, "ObjectIdAlias", ["properties", "objectIdAlias"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningState = BicepValue<AccessPolicyAssignmentProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<RedisResource>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Creates a reference to an existing RedisCacheAccessPolicyAssignment.
    /// </summary>
    /// <param name="resourceName">Name of the RedisCacheAccessPolicyAssignment.</param>
    /// <param name="resourceVersion">Version of the RedisCacheAccessPolicyAssignment.</param>
    /// <returns>The existing RedisCacheAccessPolicyAssignment resource.</returns>
    public static RedisCacheAccessPolicyAssignment FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
