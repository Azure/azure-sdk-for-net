// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.PostgreSql;

/// <summary>
/// PostgreSqlServer.
/// </summary>
public partial class PostgreSqlServer : Resource
{
    /// <summary>
    /// The name of the server.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The location the resource resides in.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Properties of the server.             Please note
    /// Azure.ResourceManager.PostgreSql.Models.PostgreSqlServerPropertiesForCreate
    /// is the base class. According to the scenario, a derived class of the
    /// base class might need to be assigned here, or this property needs to
    /// be casted to one of the possible derived classes.             The
    /// available derived classes include
    /// Azure.ResourceManager.PostgreSql.Models.PostgreSqlServerPropertiesForDefaultCreate,
    /// Azure.ResourceManager.PostgreSql.Models.PostgreSqlServerPropertiesForGeoRestore,
    /// Azure.ResourceManager.PostgreSql.Models.PostgreSqlServerPropertiesForRestore
    /// and
    /// Azure.ResourceManager.PostgreSql.Models.PostgreSqlServerPropertiesForReplica.
    /// </summary>
    public BicepValue<PostgreSqlServerPropertiesForCreate> Properties { get => _properties; set => _properties.Assign(value); }
    private readonly BicepValue<PostgreSqlServerPropertiesForCreate> _properties;

    /// <summary>
    /// The Azure Active Directory identity of the server. Current supported
    /// identity types: SystemAssigned.
    /// </summary>
    public BicepValue<ManagedServiceIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<ManagedServiceIdentity> _identity;

    /// <summary>
    /// The SKU (pricing tier) of the server.
    /// </summary>
    public BicepValue<PostgreSqlSku> Sku { get => _sku; set => _sku.Assign(value); }
    private readonly BicepValue<PostgreSqlSku> _sku;

    /// <summary>
    /// Application-specific metadata in the form of key-value pairs.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// The administrator&apos;s login name of a server. Can only be specified
    /// when the server is being created (and is required for creation).
    /// </summary>
    public BicepValue<string> AdministratorLogin { get => _administratorLogin; }
    private readonly BicepValue<string> _administratorLogin;

    /// <summary>
    /// Status showing whether the server data encryption is enabled with
    /// customer-managed keys.
    /// </summary>
    public BicepValue<string> ByokEnforcement { get => _byokEnforcement; }
    private readonly BicepValue<string> _byokEnforcement;

    /// <summary>
    /// Earliest restore point creation time (ISO8601 format).
    /// </summary>
    public BicepValue<DateTimeOffset> EarliestRestoreOn { get => _earliestRestoreOn; }
    private readonly BicepValue<DateTimeOffset> _earliestRestoreOn;

    /// <summary>
    /// The fully qualified domain name of a server.
    /// </summary>
    public BicepValue<string> FullyQualifiedDomainName { get => _fullyQualifiedDomainName; }
    private readonly BicepValue<string> _fullyQualifiedDomainName;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Status showing whether the server enabled infrastructure encryption.
    /// </summary>
    public BicepValue<PostgreSqlInfrastructureEncryption> InfrastructureEncryption { get => _infrastructureEncryption; }
    private readonly BicepValue<PostgreSqlInfrastructureEncryption> _infrastructureEncryption;

    /// <summary>
    /// The master server id of a replica server.
    /// </summary>
    public BicepValue<ResourceIdentifier> MasterServerId { get => _masterServerId; }
    private readonly BicepValue<ResourceIdentifier> _masterServerId;

    /// <summary>
    /// Enforce a minimal Tls version for the server.
    /// </summary>
    public BicepValue<PostgreSqlMinimalTlsVersionEnum> MinimalTlsVersion { get => _minimalTlsVersion; }
    private readonly BicepValue<PostgreSqlMinimalTlsVersionEnum> _minimalTlsVersion;

    /// <summary>
    /// List of private endpoint connections on a server.
    /// </summary>
    public BicepList<PostgreSqlServerPrivateEndpointConnection> PrivateEndpointConnections { get => _privateEndpointConnections; }
    private readonly BicepList<PostgreSqlServerPrivateEndpointConnection> _privateEndpointConnections;

    /// <summary>
    /// Whether or not public network access is allowed for this server. Value
    /// is optional but if passed in, must be &apos;Enabled&apos; or
    /// &apos;Disabled&apos;.
    /// </summary>
    public BicepValue<PostgreSqlPublicNetworkAccessEnum> PublicNetworkAccess { get => _publicNetworkAccess; }
    private readonly BicepValue<PostgreSqlPublicNetworkAccessEnum> _publicNetworkAccess;

    /// <summary>
    /// The maximum number of replicas that a master server can have.
    /// </summary>
    public BicepValue<int> ReplicaCapacity { get => _replicaCapacity; }
    private readonly BicepValue<int> _replicaCapacity;

    /// <summary>
    /// The replication role of the server.
    /// </summary>
    public BicepValue<string> ReplicationRole { get => _replicationRole; }
    private readonly BicepValue<string> _replicationRole;

    /// <summary>
    /// Enable ssl enforcement or not when connect to server.
    /// </summary>
    public BicepValue<PostgreSqlSslEnforcementEnum> SslEnforcement { get => _sslEnforcement; }
    private readonly BicepValue<PostgreSqlSslEnforcementEnum> _sslEnforcement;

    /// <summary>
    /// Storage profile of a server.
    /// </summary>
    public BicepValue<PostgreSqlStorageProfile> StorageProfile { get => _storageProfile; }
    private readonly BicepValue<PostgreSqlStorageProfile> _storageProfile;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// A state of a server that is visible to user.
    /// </summary>
    public BicepValue<PostgreSqlServerState> UserVisibleState { get => _userVisibleState; }
    private readonly BicepValue<PostgreSqlServerState> _userVisibleState;

    /// <summary>
    /// Server version.
    /// </summary>
    public BicepValue<PostgreSqlServerVersion> Version { get => _version; }
    private readonly BicepValue<PostgreSqlServerVersion> _version;

    /// <summary>
    /// Creates a new PostgreSqlServer.
    /// </summary>
    /// <param name="resourceName">Name of the PostgreSqlServer.</param>
    /// <param name="resourceVersion">Version of the PostgreSqlServer.</param>
    public PostgreSqlServer(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.DBforPostgreSQL/servers", resourceVersion ?? "2017-12-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _properties = BicepValue<PostgreSqlServerPropertiesForCreate>.DefineProperty(this, "Properties", ["properties"], isRequired: true);
        _identity = BicepValue<ManagedServiceIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _sku = BicepValue<PostgreSqlSku>.DefineProperty(this, "Sku", ["sku"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _administratorLogin = BicepValue<string>.DefineProperty(this, "AdministratorLogin", ["properties", "administratorLogin"], isOutput: true);
        _byokEnforcement = BicepValue<string>.DefineProperty(this, "ByokEnforcement", ["properties", "byokEnforcement"], isOutput: true);
        _earliestRestoreOn = BicepValue<DateTimeOffset>.DefineProperty(this, "EarliestRestoreOn", ["properties", "earliestRestoreDate"], isOutput: true);
        _fullyQualifiedDomainName = BicepValue<string>.DefineProperty(this, "FullyQualifiedDomainName", ["properties", "fullyQualifiedDomainName"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _infrastructureEncryption = BicepValue<PostgreSqlInfrastructureEncryption>.DefineProperty(this, "InfrastructureEncryption", ["properties", "infrastructureEncryption"], isOutput: true);
        _masterServerId = BicepValue<ResourceIdentifier>.DefineProperty(this, "MasterServerId", ["properties", "masterServerId"], isOutput: true);
        _minimalTlsVersion = BicepValue<PostgreSqlMinimalTlsVersionEnum>.DefineProperty(this, "MinimalTlsVersion", ["properties", "minimalTlsVersion"], isOutput: true);
        _privateEndpointConnections = BicepList<PostgreSqlServerPrivateEndpointConnection>.DefineProperty(this, "PrivateEndpointConnections", ["properties", "privateEndpointConnections"], isOutput: true);
        _publicNetworkAccess = BicepValue<PostgreSqlPublicNetworkAccessEnum>.DefineProperty(this, "PublicNetworkAccess", ["properties", "publicNetworkAccess"], isOutput: true);
        _replicaCapacity = BicepValue<int>.DefineProperty(this, "ReplicaCapacity", ["properties", "replicaCapacity"], isOutput: true);
        _replicationRole = BicepValue<string>.DefineProperty(this, "ReplicationRole", ["properties", "replicationRole"], isOutput: true);
        _sslEnforcement = BicepValue<PostgreSqlSslEnforcementEnum>.DefineProperty(this, "SslEnforcement", ["properties", "sslEnforcement"], isOutput: true);
        _storageProfile = BicepValue<PostgreSqlStorageProfile>.DefineProperty(this, "StorageProfile", ["properties", "storageProfile"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _userVisibleState = BicepValue<PostgreSqlServerState>.DefineProperty(this, "UserVisibleState", ["properties", "userVisibleState"], isOutput: true);
        _version = BicepValue<PostgreSqlServerVersion>.DefineProperty(this, "Version", ["properties", "version"], isOutput: true);
    }

    /// <summary>
    /// Supported PostgreSqlServer resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2017-12-01-preview.
        /// </summary>
        public static readonly string V2017_12_01_preview = "2017-12-01-preview";

        /// <summary>
        /// 2017-12-01.
        /// </summary>
        public static readonly string V2017_12_01 = "2017-12-01";
    }

    /// <summary>
    /// Creates a reference to an existing PostgreSqlServer.
    /// </summary>
    /// <param name="resourceName">Name of the PostgreSqlServer.</param>
    /// <param name="resourceVersion">Version of the PostgreSqlServer.</param>
    /// <returns>The existing PostgreSqlServer resource.</returns>
    public static PostgreSqlServer FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this PostgreSqlServer resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 3, maxLength: 63, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen);
}
