// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.PostgreSql;

/// <summary>
/// Data encryption properties of a server.
/// </summary>
public partial class PostgreSqlFlexibleServerDataEncryption : ProvisioningConstruct
{
    /// <summary>
    /// URI for the key in keyvault for data encryption of the primary server.
    /// </summary>
    public BicepValue<Uri> PrimaryKeyUri { get => _primaryKeyUri; set => _primaryKeyUri.Assign(value); }
    private readonly BicepValue<Uri> _primaryKeyUri;

    /// <summary>
    /// Resource Id for the User assigned identity to be used for data
    /// encryption of the primary server.
    /// </summary>
    public BicepValue<ResourceIdentifier> PrimaryUserAssignedIdentityId { get => _primaryUserAssignedIdentityId; set => _primaryUserAssignedIdentityId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _primaryUserAssignedIdentityId;

    /// <summary>
    /// URI for the key in keyvault for data encryption for geo-backup of
    /// server.
    /// </summary>
    public BicepValue<Uri> GeoBackupKeyUri { get => _geoBackupKeyUri; set => _geoBackupKeyUri.Assign(value); }
    private readonly BicepValue<Uri> _geoBackupKeyUri;

    /// <summary>
    /// Resource Id for the User assigned identity to be used for data
    /// encryption for geo-backup of server.
    /// </summary>
    public BicepValue<string> GeoBackupUserAssignedIdentityId { get => _geoBackupUserAssignedIdentityId; set => _geoBackupUserAssignedIdentityId.Assign(value); }
    private readonly BicepValue<string> _geoBackupUserAssignedIdentityId;

    /// <summary>
    /// Data encryption type to depict if it is System Managed vs Azure Key
    /// vault.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerKeyType> KeyType { get => _keyType; set => _keyType.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerKeyType> _keyType;

    /// <summary>
    /// Primary encryption key status for Data encryption enabled server.
    /// </summary>
    public BicepValue<PostgreSqlKeyStatus> PrimaryEncryptionKeyStatus { get => _primaryEncryptionKeyStatus; set => _primaryEncryptionKeyStatus.Assign(value); }
    private readonly BicepValue<PostgreSqlKeyStatus> _primaryEncryptionKeyStatus;

    /// <summary>
    /// Geo-backup encryption key status for Data encryption enabled server.
    /// </summary>
    public BicepValue<PostgreSqlKeyStatus> GeoBackupEncryptionKeyStatus { get => _geoBackupEncryptionKeyStatus; set => _geoBackupEncryptionKeyStatus.Assign(value); }
    private readonly BicepValue<PostgreSqlKeyStatus> _geoBackupEncryptionKeyStatus;

    /// <summary>
    /// Creates a new PostgreSqlFlexibleServerDataEncryption.
    /// </summary>
    public PostgreSqlFlexibleServerDataEncryption()
    {
        _primaryKeyUri = BicepValue<Uri>.DefineProperty(this, "PrimaryKeyUri", ["primaryKeyURI"]);
        _primaryUserAssignedIdentityId = BicepValue<ResourceIdentifier>.DefineProperty(this, "PrimaryUserAssignedIdentityId", ["primaryUserAssignedIdentityId"]);
        _geoBackupKeyUri = BicepValue<Uri>.DefineProperty(this, "GeoBackupKeyUri", ["geoBackupKeyURI"]);
        _geoBackupUserAssignedIdentityId = BicepValue<string>.DefineProperty(this, "GeoBackupUserAssignedIdentityId", ["geoBackupUserAssignedIdentityId"]);
        _keyType = BicepValue<PostgreSqlFlexibleServerKeyType>.DefineProperty(this, "KeyType", ["type"]);
        _primaryEncryptionKeyStatus = BicepValue<PostgreSqlKeyStatus>.DefineProperty(this, "PrimaryEncryptionKeyStatus", ["primaryEncryptionKeyStatus"]);
        _geoBackupEncryptionKeyStatus = BicepValue<PostgreSqlKeyStatus>.DefineProperty(this, "GeoBackupEncryptionKeyStatus", ["geoBackupEncryptionKeyStatus"]);
    }
}
