// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.PostgreSql;

/// <summary>
/// PostgreSqlFlexibleServer.
/// </summary>
public partial class PostgreSqlFlexibleServer : Resource
{
    /// <summary>
    /// The name of the server.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// The administrator&apos;s login name of a server. Can only be specified
    /// when the server is being created (and is required for creation).
    /// </summary>
    public BicepValue<string> AdministratorLogin { get => _administratorLogin; set => _administratorLogin.Assign(value); }
    private readonly BicepValue<string> _administratorLogin;

    /// <summary>
    /// The administrator login password (required for server creation).
    /// </summary>
    public BicepValue<string> AdministratorLoginPassword { get => _administratorLoginPassword; set => _administratorLoginPassword.Assign(value); }
    private readonly BicepValue<string> _administratorLoginPassword;

    /// <summary>
    /// AuthConfig properties of a server.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerAuthConfig> AuthConfig { get => _authConfig; set => _authConfig.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerAuthConfig> _authConfig;

    /// <summary>
    /// availability zone information of the server.
    /// </summary>
    public BicepValue<string> AvailabilityZone { get => _availabilityZone; set => _availabilityZone.Assign(value); }
    private readonly BicepValue<string> _availabilityZone;

    /// <summary>
    /// Backup properties of a server.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerBackupProperties> Backup { get => _backup; set => _backup.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerBackupProperties> _backup;

    /// <summary>
    /// The mode to create a new PostgreSQL server.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerCreateMode> CreateMode { get => _createMode; set => _createMode.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerCreateMode> _createMode;

    /// <summary>
    /// Data encryption properties of a server.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerDataEncryption> DataEncryption { get => _dataEncryption; set => _dataEncryption.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerDataEncryption> _dataEncryption;

    /// <summary>
    /// High availability properties of a server.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerHighAvailability> HighAvailability { get => _highAvailability; set => _highAvailability.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerHighAvailability> _highAvailability;

    /// <summary>
    /// Describes the identity of the application.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerUserAssignedIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerUserAssignedIdentity> _identity;

    /// <summary>
    /// Maintenance window properties of a server.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerMaintenanceWindow> MaintenanceWindow { get => _maintenanceWindow; set => _maintenanceWindow.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerMaintenanceWindow> _maintenanceWindow;

    /// <summary>
    /// Network properties of a server. This Network property is required to be
    /// passed only in case you want the server to be Private access server.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerNetwork> Network { get => _network; set => _network.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerNetwork> _network;

    /// <summary>
    /// Restore point creation time (ISO8601 format), specifying the time to
    /// restore from. It&apos;s required when &apos;createMode&apos; is
    /// &apos;PointInTimeRestore&apos; or &apos;GeoRestore&apos; or
    /// &apos;ReviveDropped&apos;.
    /// </summary>
    public BicepValue<DateTimeOffset> PointInTimeUtc { get => _pointInTimeUtc; set => _pointInTimeUtc.Assign(value); }
    private readonly BicepValue<DateTimeOffset> _pointInTimeUtc;

    /// <summary>
    /// Replicas allowed for a server.
    /// </summary>
    public BicepValue<int> ReplicaCapacity { get => _replicaCapacity; set => _replicaCapacity.Assign(value); }
    private readonly BicepValue<int> _replicaCapacity;

    /// <summary>
    /// Replication role of the server.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerReplicationRole> ReplicationRole { get => _replicationRole; set => _replicationRole.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerReplicationRole> _replicationRole;

    /// <summary>
    /// The SKU (pricing tier) of the server.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerSku> Sku { get => _sku; set => _sku.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerSku> _sku;

    /// <summary>
    /// The source server resource ID to restore from. It&apos;s required when
    /// &apos;createMode&apos; is &apos;PointInTimeRestore&apos; or
    /// &apos;GeoRestore&apos; or &apos;Replica&apos; or
    /// &apos;ReviveDropped&apos;. This property is returned only for Replica
    /// server.
    /// </summary>
    public BicepValue<ResourceIdentifier> SourceServerResourceId { get => _sourceServerResourceId; set => _sourceServerResourceId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _sourceServerResourceId;

    /// <summary>
    /// Storage properties of a server.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerStorage> Storage { get => _storage; set => _storage.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerStorage> _storage;

    /// <summary>
    /// Max storage allowed for a server.
    /// </summary>
    public BicepValue<int> StorageSizeInGB { get => _storageSizeInGB; set => _storageSizeInGB.Assign(value); }
    private readonly BicepValue<int> _storageSizeInGB;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// PostgreSQL Server version.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerVersion> Version { get => _version; set => _version.Assign(value); }
    private readonly BicepValue<PostgreSqlFlexibleServerVersion> _version;

    /// <summary>
    /// The fully qualified domain name of a server.
    /// </summary>
    public BicepValue<string> FullyQualifiedDomainName { get => _fullyQualifiedDomainName; }
    private readonly BicepValue<string> _fullyQualifiedDomainName;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The minor version of the server.
    /// </summary>
    public BicepValue<string> MinorVersion { get => _minorVersion; }
    private readonly BicepValue<string> _minorVersion;

    /// <summary>
    /// A state of a server that is visible to user.
    /// </summary>
    public BicepValue<PostgreSqlFlexibleServerState> State { get => _state; }
    private readonly BicepValue<PostgreSqlFlexibleServerState> _state;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new PostgreSqlFlexibleServer.
    /// </summary>
    /// <param name="resourceName">Name of the PostgreSqlFlexibleServer.</param>
    /// <param name="resourceVersion">Version of the PostgreSqlFlexibleServer.</param>
    public PostgreSqlFlexibleServer(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.DBforPostgreSQL/flexibleServers", resourceVersion ?? "2024-08-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _administratorLogin = BicepValue<string>.DefineProperty(this, "AdministratorLogin", ["properties", "administratorLogin"]);
        _administratorLoginPassword = BicepValue<string>.DefineProperty(this, "AdministratorLoginPassword", ["properties", "administratorLoginPassword"]);
        _authConfig = BicepValue<PostgreSqlFlexibleServerAuthConfig>.DefineProperty(this, "AuthConfig", ["properties", "authConfig"]);
        _availabilityZone = BicepValue<string>.DefineProperty(this, "AvailabilityZone", ["properties", "availabilityZone"]);
        _backup = BicepValue<PostgreSqlFlexibleServerBackupProperties>.DefineProperty(this, "Backup", ["properties", "backup"]);
        _createMode = BicepValue<PostgreSqlFlexibleServerCreateMode>.DefineProperty(this, "CreateMode", ["properties", "createMode"]);
        _dataEncryption = BicepValue<PostgreSqlFlexibleServerDataEncryption>.DefineProperty(this, "DataEncryption", ["properties", "dataEncryption"]);
        _highAvailability = BicepValue<PostgreSqlFlexibleServerHighAvailability>.DefineProperty(this, "HighAvailability", ["properties", "highAvailability"]);
        _identity = BicepValue<PostgreSqlFlexibleServerUserAssignedIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _maintenanceWindow = BicepValue<PostgreSqlFlexibleServerMaintenanceWindow>.DefineProperty(this, "MaintenanceWindow", ["properties", "maintenanceWindow"]);
        _network = BicepValue<PostgreSqlFlexibleServerNetwork>.DefineProperty(this, "Network", ["properties", "network"]);
        _pointInTimeUtc = BicepValue<DateTimeOffset>.DefineProperty(this, "PointInTimeUtc", ["properties", "pointInTimeUTC"]);
        _replicaCapacity = BicepValue<int>.DefineProperty(this, "ReplicaCapacity", ["properties", "replicaCapacity"]);
        _replicationRole = BicepValue<PostgreSqlFlexibleServerReplicationRole>.DefineProperty(this, "ReplicationRole", ["properties", "replicationRole"]);
        _sku = BicepValue<PostgreSqlFlexibleServerSku>.DefineProperty(this, "Sku", ["sku"]);
        _sourceServerResourceId = BicepValue<ResourceIdentifier>.DefineProperty(this, "SourceServerResourceId", ["properties", "sourceServerResourceId"]);
        _storage = BicepValue<PostgreSqlFlexibleServerStorage>.DefineProperty(this, "Storage", ["properties", "storage"]);
        _storageSizeInGB = BicepValue<int>.DefineProperty(this, "StorageSizeInGB", ["properties", "storage", "storageSizeGB"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _version = BicepValue<PostgreSqlFlexibleServerVersion>.DefineProperty(this, "Version", ["properties", "version"]);
        _fullyQualifiedDomainName = BicepValue<string>.DefineProperty(this, "FullyQualifiedDomainName", ["properties", "fullyQualifiedDomainName"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _minorVersion = BicepValue<string>.DefineProperty(this, "MinorVersion", ["properties", "minorVersion"], isOutput: true);
        _state = BicepValue<PostgreSqlFlexibleServerState>.DefineProperty(this, "State", ["properties", "state"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported PostgreSqlFlexibleServer resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-08-01.
        /// </summary>
        public static readonly string V2024_08_01 = "2024-08-01";

        /// <summary>
        /// 2022-12-01.
        /// </summary>
        public static readonly string V2022_12_01 = "2022-12-01";

        /// <summary>
        /// 2021-06-01.
        /// </summary>
        public static readonly string V2021_06_01 = "2021-06-01";
    }

    /// <summary>
    /// Creates a reference to an existing PostgreSqlFlexibleServer.
    /// </summary>
    /// <param name="resourceName">Name of the PostgreSqlFlexibleServer.</param>
    /// <param name="resourceVersion">Version of the PostgreSqlFlexibleServer.</param>
    /// <returns>The existing PostgreSqlFlexibleServer resource.</returns>
    public static PostgreSqlFlexibleServer FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this PostgreSqlFlexibleServer resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 3, maxLength: 63, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen);
}
