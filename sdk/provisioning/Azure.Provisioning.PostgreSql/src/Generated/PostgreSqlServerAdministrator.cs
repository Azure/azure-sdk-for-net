// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.PostgreSql;

/// <summary>
/// PostgreSqlServerAdministrator.
/// </summary>
public partial class PostgreSqlServerAdministrator : Resource
{
    /// <summary>
    /// Gets the Name.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The type of administrator.
    /// </summary>
    public BicepValue<PostgreSqlAdministratorType> AdministratorType { get => _administratorType; set => _administratorType.Assign(value); }
    private readonly BicepValue<PostgreSqlAdministratorType> _administratorType;

    /// <summary>
    /// The server administrator login account name.
    /// </summary>
    public BicepValue<string> LoginAccountName { get => _loginAccountName; set => _loginAccountName.Assign(value); }
    private readonly BicepValue<string> _loginAccountName;

    /// <summary>
    /// The server administrator Sid (Secure ID).
    /// </summary>
    public BicepValue<Guid> SecureId { get => _secureId; set => _secureId.Assign(value); }
    private readonly BicepValue<Guid> _secureId;

    /// <summary>
    /// The server Active Directory Administrator tenant id.
    /// </summary>
    public BicepValue<Guid> TenantId { get => _tenantId; set => _tenantId.Assign(value); }
    private readonly BicepValue<Guid> _tenantId;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent PostgreSqlServer.
    /// </summary>
    public PostgreSqlServer? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<PostgreSqlServer> _parent;

    /// <summary>
    /// Creates a new PostgreSqlServerAdministrator.
    /// </summary>
    /// <param name="resourceName">Name of the PostgreSqlServerAdministrator.</param>
    /// <param name="resourceVersion">Version of the PostgreSqlServerAdministrator.</param>
    public PostgreSqlServerAdministrator(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.DBforPostgreSQL/servers/administrators", resourceVersion ?? "2017-12-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _administratorType = BicepValue<PostgreSqlAdministratorType>.DefineProperty(this, "AdministratorType", ["properties", "administratorType"]);
        _loginAccountName = BicepValue<string>.DefineProperty(this, "LoginAccountName", ["properties", "login"]);
        _secureId = BicepValue<Guid>.DefineProperty(this, "SecureId", ["properties", "sid"]);
        _tenantId = BicepValue<Guid>.DefineProperty(this, "TenantId", ["properties", "tenantId"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<PostgreSqlServer>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported PostgreSqlServerAdministrator resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2017-12-01-preview.
        /// </summary>
        public static readonly string V2017_12_01_preview = "2017-12-01-preview";

        /// <summary>
        /// 2017-12-01.
        /// </summary>
        public static readonly string V2017_12_01 = "2017-12-01";
    }

    /// <summary>
    /// Creates a reference to an existing PostgreSqlServerAdministrator.
    /// </summary>
    /// <param name="resourceName">Name of the PostgreSqlServerAdministrator.</param>
    /// <param name="resourceVersion">Version of the PostgreSqlServerAdministrator.</param>
    /// <returns>The existing PostgreSqlServerAdministrator resource.</returns>
    public static PostgreSqlServerAdministrator FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
