// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.EventHubs;

/// <summary>
/// EventHubsNetworkRuleSet.
/// </summary>
public partial class EventHubsNetworkRuleSet : Resource
{
    /// <summary>
    /// Gets the Name.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Default Action for Network Rule Set.
    /// </summary>
    public BicepValue<EventHubsNetworkRuleSetDefaultAction> DefaultAction { get => _defaultAction; set => _defaultAction.Assign(value); }
    private readonly BicepValue<EventHubsNetworkRuleSetDefaultAction> _defaultAction;

    /// <summary>
    /// List of IpRules.
    /// </summary>
    public BicepList<EventHubsNetworkRuleSetIPRules> IPRules { get => _iPRules; set => _iPRules.Assign(value); }
    private readonly BicepList<EventHubsNetworkRuleSetIPRules> _iPRules;

    /// <summary>
    /// This determines if traffic is allowed over public network. By default
    /// it is enabled. If value is SecuredByPerimeter then Inbound and
    /// Outbound communication is controlled by the network security perimeter
    /// and profile&apos;s access rules.
    /// </summary>
    public BicepValue<EventHubsPublicNetworkAccessFlag> PublicNetworkAccess { get => _publicNetworkAccess; set => _publicNetworkAccess.Assign(value); }
    private readonly BicepValue<EventHubsPublicNetworkAccessFlag> _publicNetworkAccess;

    /// <summary>
    /// Value that indicates whether Trusted Service Access is Enabled or not.
    /// </summary>
    public BicepValue<bool> TrustedServiceAccessEnabled { get => _trustedServiceAccessEnabled; set => _trustedServiceAccessEnabled.Assign(value); }
    private readonly BicepValue<bool> _trustedServiceAccessEnabled;

    /// <summary>
    /// List VirtualNetwork Rules.
    /// </summary>
    public BicepList<EventHubsNetworkRuleSetVirtualNetworkRules> VirtualNetworkRules { get => _virtualNetworkRules; set => _virtualNetworkRules.Assign(value); }
    private readonly BicepList<EventHubsNetworkRuleSetVirtualNetworkRules> _virtualNetworkRules;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The geo-location where the resource lives.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent EventHubsNamespace.
    /// </summary>
    public EventHubsNamespace? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<EventHubsNamespace> _parent;

    /// <summary>
    /// Creates a new EventHubsNetworkRuleSet.
    /// </summary>
    /// <param name="resourceName">Name of the EventHubsNetworkRuleSet.</param>
    /// <param name="resourceVersion">Version of the EventHubsNetworkRuleSet.</param>
    public EventHubsNetworkRuleSet(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.EventHub/namespaces/networkRuleSets", resourceVersion ?? "2024-01-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _defaultAction = BicepValue<EventHubsNetworkRuleSetDefaultAction>.DefineProperty(this, "DefaultAction", ["properties", "defaultAction"]);
        _iPRules = BicepList<EventHubsNetworkRuleSetIPRules>.DefineProperty(this, "IPRules", ["properties", "ipRules"]);
        _publicNetworkAccess = BicepValue<EventHubsPublicNetworkAccessFlag>.DefineProperty(this, "PublicNetworkAccess", ["properties", "publicNetworkAccess"]);
        _trustedServiceAccessEnabled = BicepValue<bool>.DefineProperty(this, "TrustedServiceAccessEnabled", ["properties", "trustedServiceAccessEnabled"]);
        _virtualNetworkRules = BicepList<EventHubsNetworkRuleSetVirtualNetworkRules>.DefineProperty(this, "VirtualNetworkRules", ["properties", "virtualNetworkRules"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<EventHubsNamespace>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported EventHubsNetworkRuleSet resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-05-01-preview.
        /// </summary>
        public static readonly string V2024_05_01_preview = "2024-05-01-preview";

        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2021-11-01.
        /// </summary>
        public static readonly string V2021_11_01 = "2021-11-01";

        /// <summary>
        /// 2017-04-01.
        /// </summary>
        public static readonly string V2017_04_01 = "2017-04-01";
    }

    /// <summary>
    /// Creates a reference to an existing EventHubsNetworkRuleSet.
    /// </summary>
    /// <param name="resourceName">Name of the EventHubsNetworkRuleSet.</param>
    /// <param name="resourceVersion">Version of the EventHubsNetworkRuleSet.</param>
    /// <returns>The existing EventHubsNetworkRuleSet resource.</returns>
    public static EventHubsNetworkRuleSet FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
