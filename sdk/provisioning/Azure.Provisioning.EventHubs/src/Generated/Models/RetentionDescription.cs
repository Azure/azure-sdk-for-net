// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.EventHubs;

/// <summary>
/// Properties to configure retention settings for the  eventhub.
/// </summary>
public partial class RetentionDescription : ProvisioningConstruct
{
    /// <summary>
    /// Enumerates the possible values for cleanup policy.
    /// </summary>
    public BicepValue<CleanupPolicyRetentionDescription> CleanupPolicy { get => _cleanupPolicy; set => _cleanupPolicy.Assign(value); }
    private readonly BicepValue<CleanupPolicyRetentionDescription> _cleanupPolicy;

    /// <summary>
    /// Number of hours to retain the events for this Event Hub. This value is
    /// only used when cleanupPolicy is Delete. If cleanupPolicy is Compact
    /// the returned value of this property is Long.MaxValue.
    /// </summary>
    public BicepValue<long> RetentionTimeInHours { get => _retentionTimeInHours; set => _retentionTimeInHours.Assign(value); }
    private readonly BicepValue<long> _retentionTimeInHours;

    /// <summary>
    /// Number of hours to retain the tombstone markers of a compacted Event
    /// Hub. This value is only used when cleanupPolicy is Compact. Consumer
    /// must complete reading the tombstone marker within this specified
    /// amount of time if consumer begins from starting offset to ensure they
    /// get a valid snapshot for the specific key described by the tombstone
    /// marker within the compacted Event Hub.
    /// </summary>
    public BicepValue<int> TombstoneRetentionTimeInHours { get => _tombstoneRetentionTimeInHours; set => _tombstoneRetentionTimeInHours.Assign(value); }
    private readonly BicepValue<int> _tombstoneRetentionTimeInHours;

    /// <summary>
    /// Creates a new RetentionDescription.
    /// </summary>
    public RetentionDescription()
    {
        _cleanupPolicy = BicepValue<CleanupPolicyRetentionDescription>.DefineProperty(this, "CleanupPolicy", ["cleanupPolicy"]);
        _retentionTimeInHours = BicepValue<long>.DefineProperty(this, "RetentionTimeInHours", ["retentionTimeInHours"]);
        _tombstoneRetentionTimeInHours = BicepValue<int>.DefineProperty(this, "TombstoneRetentionTimeInHours", ["tombstoneRetentionTimeInHours"]);
    }
}
