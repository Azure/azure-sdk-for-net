// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.EventHubs;

/// <summary>
/// Capture storage details for capture description.
/// </summary>
public partial class EventHubDestination : ProvisioningConstruct
{
    /// <summary>
    /// Name for capture destination.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// A value that indicates whether capture description is enabled.
    /// </summary>
    public BicepValue<EventHubsCaptureIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<EventHubsCaptureIdentity> _identity;

    /// <summary>
    /// Resource id of the storage account to be used to create the blobs.
    /// </summary>
    public BicepValue<ResourceIdentifier> StorageAccountResourceId { get => _storageAccountResourceId; set => _storageAccountResourceId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _storageAccountResourceId;

    /// <summary>
    /// Blob container Name.
    /// </summary>
    public BicepValue<string> BlobContainer { get => _blobContainer; set => _blobContainer.Assign(value); }
    private readonly BicepValue<string> _blobContainer;

    /// <summary>
    /// Blob naming convention for archive, e.g.
    /// {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
    /// Here all the parameters (Namespace,EventHub .. etc) are mandatory
    /// irrespective of order.
    /// </summary>
    public BicepValue<string> ArchiveNameFormat { get => _archiveNameFormat; set => _archiveNameFormat.Assign(value); }
    private readonly BicepValue<string> _archiveNameFormat;

    /// <summary>
    /// Subscription Id of Azure Data Lake Store.
    /// </summary>
    public BicepValue<Guid> DataLakeSubscriptionId { get => _dataLakeSubscriptionId; set => _dataLakeSubscriptionId.Assign(value); }
    private readonly BicepValue<Guid> _dataLakeSubscriptionId;

    /// <summary>
    /// The Azure Data Lake Store name for the captured events.
    /// </summary>
    public BicepValue<string> DataLakeAccountName { get => _dataLakeAccountName; set => _dataLakeAccountName.Assign(value); }
    private readonly BicepValue<string> _dataLakeAccountName;

    /// <summary>
    /// The destination folder path for the captured events.
    /// </summary>
    public BicepValue<string> DataLakeFolderPath { get => _dataLakeFolderPath; set => _dataLakeFolderPath.Assign(value); }
    private readonly BicepValue<string> _dataLakeFolderPath;

    /// <summary>
    /// Creates a new EventHubDestination.
    /// </summary>
    public EventHubDestination()
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"]);
        _identity = BicepValue<EventHubsCaptureIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _storageAccountResourceId = BicepValue<ResourceIdentifier>.DefineProperty(this, "StorageAccountResourceId", ["properties", "storageAccountResourceId"]);
        _blobContainer = BicepValue<string>.DefineProperty(this, "BlobContainer", ["properties", "blobContainer"]);
        _archiveNameFormat = BicepValue<string>.DefineProperty(this, "ArchiveNameFormat", ["properties", "archiveNameFormat"]);
        _dataLakeSubscriptionId = BicepValue<Guid>.DefineProperty(this, "DataLakeSubscriptionId", ["properties", "dataLakeSubscriptionId"]);
        _dataLakeAccountName = BicepValue<string>.DefineProperty(this, "DataLakeAccountName", ["properties", "dataLakeAccountName"]);
        _dataLakeFolderPath = BicepValue<string>.DefineProperty(this, "DataLakeFolderPath", ["properties", "dataLakeFolderPath"]);
    }
}
