// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.EventHubs;

/// <summary>
/// Properties to configure capture description for eventhub.
/// </summary>
public partial class CaptureDescription : ProvisioningConstruct
{
    /// <summary>
    /// A value that indicates whether capture description is enabled.
    /// </summary>
    public BicepValue<bool> Enabled { get => _enabled; set => _enabled.Assign(value); }
    private readonly BicepValue<bool> _enabled;

    /// <summary>
    /// Enumerates the possible values for the encoding format of capture
    /// description. Note: &apos;AvroDeflate&apos; will be deprecated in New
    /// API Version.
    /// </summary>
    public BicepValue<EncodingCaptureDescription> Encoding { get => _encoding; set => _encoding.Assign(value); }
    private readonly BicepValue<EncodingCaptureDescription> _encoding;

    /// <summary>
    /// The time window allows you to set the frequency with which the capture
    /// to Azure Blobs will happen, value should between 60 to 900 seconds.
    /// </summary>
    public BicepValue<int> IntervalInSeconds { get => _intervalInSeconds; set => _intervalInSeconds.Assign(value); }
    private readonly BicepValue<int> _intervalInSeconds;

    /// <summary>
    /// The size window defines the amount of data built up in your Event Hub
    /// before an capture operation, value should be between 10485760 to
    /// 524288000 bytes.
    /// </summary>
    public BicepValue<int> SizeLimitInBytes { get => _sizeLimitInBytes; set => _sizeLimitInBytes.Assign(value); }
    private readonly BicepValue<int> _sizeLimitInBytes;

    /// <summary>
    /// Properties of Destination where capture will be stored. (Storage
    /// Account, Blob Names).
    /// </summary>
    public BicepValue<EventHubDestination> Destination { get => _destination; set => _destination.Assign(value); }
    private readonly BicepValue<EventHubDestination> _destination;

    /// <summary>
    /// A value that indicates whether to Skip Empty Archives.
    /// </summary>
    public BicepValue<bool> SkipEmptyArchives { get => _skipEmptyArchives; set => _skipEmptyArchives.Assign(value); }
    private readonly BicepValue<bool> _skipEmptyArchives;

    /// <summary>
    /// Creates a new CaptureDescription.
    /// </summary>
    public CaptureDescription()
    {
        _enabled = BicepValue<bool>.DefineProperty(this, "Enabled", ["enabled"]);
        _encoding = BicepValue<EncodingCaptureDescription>.DefineProperty(this, "Encoding", ["encoding"]);
        _intervalInSeconds = BicepValue<int>.DefineProperty(this, "IntervalInSeconds", ["intervalInSeconds"]);
        _sizeLimitInBytes = BicepValue<int>.DefineProperty(this, "SizeLimitInBytes", ["sizeLimitInBytes"]);
        _destination = BicepValue<EventHubDestination>.DefineProperty(this, "Destination", ["destination"]);
        _skipEmptyArchives = BicepValue<bool>.DefineProperty(this, "SkipEmptyArchives", ["skipEmptyArchives"]);
    }
}
