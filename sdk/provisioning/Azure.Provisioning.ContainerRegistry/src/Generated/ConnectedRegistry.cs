// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.ContainerRegistry;

/// <summary>
/// ConnectedRegistry.
/// </summary>
public partial class ConnectedRegistry : ProvisionableResource
{
    /// <summary>
    /// The name of the connected registry.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// The list of the ACR token resource IDs used to authenticate clients to
    /// the connected registry.
    /// </summary>
    public BicepList<ResourceIdentifier> ClientTokenIds 
    {
        get { Initialize(); return _clientTokenIds!; }
        set { Initialize(); _clientTokenIds!.Assign(value); }
    }
    private BicepList<ResourceIdentifier>? _clientTokenIds;

    /// <summary>
    /// The garbage collection properties of the connected registry.
    /// </summary>
    public GarbageCollectionProperties GarbageCollection 
    {
        get { Initialize(); return _garbageCollection!; }
        set { Initialize(); AssignOrReplace(ref _garbageCollection, value); }
    }
    private GarbageCollectionProperties? _garbageCollection;

    /// <summary>
    /// The logging properties of the connected registry.
    /// </summary>
    public ConnectedRegistryLogging Logging 
    {
        get { Initialize(); return _logging!; }
        set { Initialize(); AssignOrReplace(ref _logging, value); }
    }
    private ConnectedRegistryLogging? _logging;

    /// <summary>
    /// The login server properties of the connected registry.
    /// </summary>
    public ConnectedRegistryLoginServer LoginServer 
    {
        get { Initialize(); return _loginServer!; }
        set { Initialize(); AssignOrReplace(ref _loginServer, value); }
    }
    private ConnectedRegistryLoginServer? _loginServer;

    /// <summary>
    /// The mode of the connected registry resource that indicates the
    /// permissions of the registry.
    /// </summary>
    public BicepValue<ConnectedRegistryMode> Mode 
    {
        get { Initialize(); return _mode!; }
        set { Initialize(); _mode!.Assign(value); }
    }
    private BicepValue<ConnectedRegistryMode>? _mode;

    /// <summary>
    /// The list of notifications subscription information for the connected
    /// registry.
    /// </summary>
    public BicepList<string> NotificationsList 
    {
        get { Initialize(); return _notificationsList!; }
        set { Initialize(); _notificationsList!.Assign(value); }
    }
    private BicepList<string>? _notificationsList;

    /// <summary>
    /// The properties of the connected registry parent.
    /// </summary>
    public ConnectedRegistryParent Parent 
    {
        get { Initialize(); return _parent!; }
        set { Initialize(); AssignOrReplace(ref _parent, value); }
    }
    private ConnectedRegistryParent? _parent;

    /// <summary>
    /// The activation status of the connected registry.
    /// </summary>
    public BicepValue<ConnectedRegistryActivationStatus> ActivationStatus 
    {
        get { Initialize(); return _activationStatus!; }
    }
    private BicepValue<ConnectedRegistryActivationStatus>? _activationStatus;

    /// <summary>
    /// The current connection state of the connected registry.
    /// </summary>
    public BicepValue<ConnectedRegistryConnectionState> ConnectionState 
    {
        get { Initialize(); return _connectionState!; }
    }
    private BicepValue<ConnectedRegistryConnectionState>? _connectionState;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// The last activity time of the connected registry.
    /// </summary>
    public BicepValue<DateTimeOffset> LastActivityOn 
    {
        get { Initialize(); return _lastActivityOn!; }
    }
    private BicepValue<DateTimeOffset>? _lastActivityOn;

    /// <summary>
    /// Provisioning state of the resource.
    /// </summary>
    public BicepValue<ContainerRegistryProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<ContainerRegistryProvisioningState>? _provisioningState;

    /// <summary>
    /// The list of current statuses of the connected registry.
    /// </summary>
    public BicepList<ConnectedRegistryStatusDetail> StatusDetails 
    {
        get { Initialize(); return _statusDetails!; }
    }
    private BicepList<ConnectedRegistryStatusDetail>? _statusDetails;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// The current version of ACR runtime on the connected registry.
    /// </summary>
    public BicepValue<string> Version 
    {
        get { Initialize(); return _version!; }
    }
    private BicepValue<string>? _version;

    /// <summary>
    /// Gets or sets a reference to the parent ContainerRegistryService.
    /// </summary>
    public ContainerRegistryService? Parent
    {
        get { Initialize(); return _parent!.Value; }
        set { Initialize(); _parent!.Value = value; }
    }
    private ResourceReference<ContainerRegistryService>? _parent;

    /// <summary>
    /// Creates a new ConnectedRegistry.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the ConnectedRegistry resource.  This
    /// can be used to refer to the resource in expressions, but is not the
    /// Azure name of the resource.  This value can contain letters, numbers,
    /// and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the ConnectedRegistry.</param>
    public ConnectedRegistry(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.ContainerRegistry/registries/connectedRegistries", resourceVersion ?? "2025-04-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of ConnectedRegistry.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _clientTokenIds = DefineListProperty<ResourceIdentifier>("ClientTokenIds", ["properties", "clientTokenIds"]);
        _garbageCollection = DefineModelProperty<GarbageCollectionProperties>("GarbageCollection", ["properties", "garbageCollection"]);
        _logging = DefineModelProperty<ConnectedRegistryLogging>("Logging", ["properties", "logging"]);
        _loginServer = DefineModelProperty<ConnectedRegistryLoginServer>("LoginServer", ["properties", "loginServer"]);
        _mode = DefineProperty<ConnectedRegistryMode>("Mode", ["properties", "mode"]);
        _notificationsList = DefineListProperty<string>("NotificationsList", ["properties", "notificationsList"]);
        _parent = DefineModelProperty<ConnectedRegistryParent>("Parent", ["properties", "parent"]);
        _activationStatus = DefineProperty<ConnectedRegistryActivationStatus>("ActivationStatus", ["properties", "activation", "status"], isOutput: true);
        _connectionState = DefineProperty<ConnectedRegistryConnectionState>("ConnectionState", ["properties", "connectionState"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _lastActivityOn = DefineProperty<DateTimeOffset>("LastActivityOn", ["properties", "lastActivityTime"], isOutput: true);
        _provisioningState = DefineProperty<ContainerRegistryProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _statusDetails = DefineListProperty<ConnectedRegistryStatusDetail>("StatusDetails", ["properties", "statusDetails"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
        _version = DefineProperty<string>("Version", ["properties", "version"], isOutput: true);
        _parent = DefineResource<ContainerRegistryService>("Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported ConnectedRegistry resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-04-01.
        /// </summary>
        public static readonly string V2025_04_01 = "2025-04-01";
    }

    /// <summary>
    /// Creates a reference to an existing ConnectedRegistry.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the ConnectedRegistry resource.  This
    /// can be used to refer to the resource in expressions, but is not the
    /// Azure name of the resource.  This value can contain letters, numbers,
    /// and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the ConnectedRegistry.</param>
    /// <returns>The existing ConnectedRegistry resource.</returns>
    public static ConnectedRegistry FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
