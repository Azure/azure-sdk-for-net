// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.ContainerRegistry;

/// <summary>
/// ContainerRegistryCacheRule.
/// </summary>
public partial class ContainerRegistryCacheRule : ProvisionableResource
{
    /// <summary>
    /// The name of the cache rule.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// The ARM resource ID of the credential store which is associated with
    /// the cache rule.
    /// </summary>
    public BicepValue<ResourceIdentifier> CredentialSetResourceId 
    {
        get { Initialize(); return _credentialSetResourceId!; }
        set { Initialize(); _credentialSetResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _credentialSetResourceId;

    /// <summary>
    /// Source repository pulled from upstream.
    /// </summary>
    public BicepValue<string> SourceRepository 
    {
        get { Initialize(); return _sourceRepository!; }
        set { Initialize(); _sourceRepository!.Assign(value); }
    }
    private BicepValue<string>? _sourceRepository;

    /// <summary>
    /// Target repository specified in docker pull command.             Eg:
    /// docker pull myregistry.azurecr.io/{targetRepository}:{tag}
    /// </summary>
    public BicepValue<string> TargetRepository 
    {
        get { Initialize(); return _targetRepository!; }
        set { Initialize(); _targetRepository!.Assign(value); }
    }
    private BicepValue<string>? _targetRepository;

    /// <summary>
    /// The creation date of the cache rule.
    /// </summary>
    public BicepValue<DateTimeOffset> CreatedOn 
    {
        get { Initialize(); return _createdOn!; }
    }
    private BicepValue<DateTimeOffset>? _createdOn;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// Provisioning state of the resource.
    /// </summary>
    public BicepValue<ContainerRegistryProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<ContainerRegistryProvisioningState>? _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent ContainerRegistryService.
    /// </summary>
    public ContainerRegistryService? Parent
    {
        get { Initialize(); return _parent!.Value; }
        set { Initialize(); _parent!.Value = value; }
    }
    private ResourceReference<ContainerRegistryService>? _parent;

    /// <summary>
    /// Creates a new ContainerRegistryCacheRule.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the ContainerRegistryCacheRule
    /// resource.  This can be used to refer to the resource in expressions,
    /// but is not the Azure name of the resource.  This value can contain
    /// letters, numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the ContainerRegistryCacheRule.</param>
    public ContainerRegistryCacheRule(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.ContainerRegistry/registries/cacheRules", resourceVersion ?? "2025-04-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of ContainerRegistryCacheRule.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _credentialSetResourceId = DefineProperty<ResourceIdentifier>("CredentialSetResourceId", ["properties", "credentialSetResourceId"]);
        _sourceRepository = DefineProperty<string>("SourceRepository", ["properties", "sourceRepository"]);
        _targetRepository = DefineProperty<string>("TargetRepository", ["properties", "targetRepository"]);
        _createdOn = DefineProperty<DateTimeOffset>("CreatedOn", ["properties", "creationDate"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _provisioningState = DefineProperty<ContainerRegistryProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
        _parent = DefineResource<ContainerRegistryService>("Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported ContainerRegistryCacheRule resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2025-04-01.
        /// </summary>
        public static readonly string V2025_04_01 = "2025-04-01";

        /// <summary>
        /// 2023-07-01.
        /// </summary>
        public static readonly string V2023_07_01 = "2023-07-01";
    }

    /// <summary>
    /// Creates a reference to an existing ContainerRegistryCacheRule.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the ContainerRegistryCacheRule
    /// resource.  This can be used to refer to the resource in expressions,
    /// but is not the Azure name of the resource.  This value can contain
    /// letters, numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the ContainerRegistryCacheRule.</param>
    /// <returns>The existing ContainerRegistryCacheRule resource.</returns>
    public static ContainerRegistryCacheRule FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
