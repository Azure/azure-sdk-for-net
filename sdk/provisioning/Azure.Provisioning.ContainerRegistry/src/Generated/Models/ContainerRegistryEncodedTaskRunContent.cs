// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.ContainerRegistry;

/// <summary>
/// The parameters for a quick task run request.
/// </summary>
public partial class ContainerRegistryEncodedTaskRunContent : ContainerRegistryRunContent
{
    /// <summary>
    /// Base64 encoded value of the template/definition file content.
    /// </summary>
    public BicepValue<string> EncodedTaskContent { get => _encodedTaskContent; set => _encodedTaskContent.Assign(value); }
    private readonly BicepValue<string> _encodedTaskContent;

    /// <summary>
    /// Base64 encoded value of the parameters/values file content.
    /// </summary>
    public BicepValue<string> EncodedValuesContent { get => _encodedValuesContent; set => _encodedValuesContent.Assign(value); }
    private readonly BicepValue<string> _encodedValuesContent;

    /// <summary>
    /// The collection of overridable values that can be passed when running a
    /// task.
    /// </summary>
    public BicepList<ContainerRegistryTaskOverridableValue> Values { get => _values; set => _values.Assign(value); }
    private readonly BicepList<ContainerRegistryTaskOverridableValue> _values;

    /// <summary>
    /// Run timeout in seconds.
    /// </summary>
    public BicepValue<int> TimeoutInSeconds { get => _timeoutInSeconds; set => _timeoutInSeconds.Assign(value); }
    private readonly BicepValue<int> _timeoutInSeconds;

    /// <summary>
    /// The platform properties against which the run has to happen.
    /// </summary>
    public BicepValue<ContainerRegistryPlatformProperties> Platform { get => _platform; set => _platform.Assign(value); }
    private readonly BicepValue<ContainerRegistryPlatformProperties> _platform;

    /// <summary>
    /// The CPU configuration in terms of number of cores required for the run.
    /// </summary>
    public BicepValue<int> AgentCpu { get => _agentCpu; set => _agentCpu.Assign(value); }
    private readonly BicepValue<int> _agentCpu;

    /// <summary>
    /// The URL(absolute or relative) of the source context. It can be an URL
    /// to a tar or git repository.             If it is relative URL, the
    /// relative path should be obtained from calling listBuildSourceUploadUrl
    /// API.
    /// </summary>
    public BicepValue<string> SourceLocation { get => _sourceLocation; set => _sourceLocation.Assign(value); }
    private readonly BicepValue<string> _sourceLocation;

    /// <summary>
    /// The properties that describes a set of credentials that will be used
    /// when this run is invoked.
    /// </summary>
    public BicepValue<ContainerRegistryCredentials> Credentials { get => _credentials; set => _credentials.Assign(value); }
    private readonly BicepValue<ContainerRegistryCredentials> _credentials;

    /// <summary>
    /// Creates a new ContainerRegistryEncodedTaskRunContent.
    /// </summary>
    public ContainerRegistryEncodedTaskRunContent() : base()
    {
        BicepValue<string>.DefineProperty(this, "type", ["type"], defaultValue: "EncodedTaskRunRequest");
        _encodedTaskContent = BicepValue<string>.DefineProperty(this, "EncodedTaskContent", ["encodedTaskContent"]);
        _encodedValuesContent = BicepValue<string>.DefineProperty(this, "EncodedValuesContent", ["encodedValuesContent"]);
        _values = BicepList<ContainerRegistryTaskOverridableValue>.DefineProperty(this, "Values", ["values"]);
        _timeoutInSeconds = BicepValue<int>.DefineProperty(this, "TimeoutInSeconds", ["timeout"]);
        _platform = BicepValue<ContainerRegistryPlatformProperties>.DefineProperty(this, "Platform", ["platform"]);
        _agentCpu = BicepValue<int>.DefineProperty(this, "AgentCpu", ["agentConfiguration", "cpu"]);
        _sourceLocation = BicepValue<string>.DefineProperty(this, "SourceLocation", ["sourceLocation"]);
        _credentials = BicepValue<ContainerRegistryCredentials>.DefineProperty(this, "Credentials", ["credentials"]);
    }
}
