// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.ContainerRegistry;

/// <summary>
/// Authentication credential stored for an upstream.
/// </summary>
public partial class ContainerRegistryAuthCredential : ProvisionableConstruct
{
    /// <summary>
    /// The name of the credential.
    /// </summary>
    public BicepValue<ContainerRegistryCredentialName> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<ContainerRegistryCredentialName>? _name;

    /// <summary>
    /// KeyVault Secret URI for accessing the username.
    /// </summary>
    public BicepValue<string> UsernameSecretIdentifier 
    {
        get { Initialize(); return _usernameSecretIdentifier!; }
        set { Initialize(); _usernameSecretIdentifier!.Assign(value); }
    }
    private BicepValue<string>? _usernameSecretIdentifier;

    /// <summary>
    /// KeyVault Secret URI for accessing the password.
    /// </summary>
    public BicepValue<string> PasswordSecretIdentifier 
    {
        get { Initialize(); return _passwordSecretIdentifier!; }
        set { Initialize(); _passwordSecretIdentifier!.Assign(value); }
    }
    private BicepValue<string>? _passwordSecretIdentifier;

    /// <summary>
    /// This provides data pertaining to the health of the auth credential.
    /// </summary>
    public ContainerRegistryCredentialHealth CredentialHealth 
    {
        get { Initialize(); return _credentialHealth!; }
    }
    private ContainerRegistryCredentialHealth? _credentialHealth;

    /// <summary>
    /// Creates a new ContainerRegistryAuthCredential.
    /// </summary>
    public ContainerRegistryAuthCredential()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// ContainerRegistryAuthCredential.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _name = DefineProperty<ContainerRegistryCredentialName>("Name", ["name"]);
        _usernameSecretIdentifier = DefineProperty<string>("UsernameSecretIdentifier", ["usernameSecretIdentifier"]);
        _passwordSecretIdentifier = DefineProperty<string>("PasswordSecretIdentifier", ["passwordSecretIdentifier"]);
        _credentialHealth = DefineModelProperty<ContainerRegistryCredentialHealth>("CredentialHealth", ["credentialHealth"], isOutput: true);
    }
}
