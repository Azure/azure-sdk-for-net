// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.ContainerRegistry;

/// <summary>
/// The response properties returned for a pipeline run.
/// </summary>
public partial class PipelineRunResult : ProvisionableConstruct
{
    /// <summary>
    /// The current status of the pipeline run.
    /// </summary>
    public BicepValue<string> Status 
    {
        get { Initialize(); return _status!; }
    }
    private BicepValue<string>? _status;

    /// <summary>
    /// The artifacts imported in the pipeline run.
    /// </summary>
    public BicepList<string> ImportedArtifacts 
    {
        get { Initialize(); return _importedArtifacts!; }
    }
    private BicepList<string>? _importedArtifacts;

    /// <summary>
    /// The percentage complete of the copy operation.
    /// </summary>
    public BicepValue<string> ProgressPercentage 
    {
        get { Initialize(); return _progressPercentage!; }
    }
    private BicepValue<string>? _progressPercentage;

    /// <summary>
    /// The time the pipeline run started.
    /// </summary>
    public BicepValue<DateTimeOffset> StartOn 
    {
        get { Initialize(); return _startOn!; }
    }
    private BicepValue<DateTimeOffset>? _startOn;

    /// <summary>
    /// The time the pipeline run finished.
    /// </summary>
    public BicepValue<DateTimeOffset> FinishOn 
    {
        get { Initialize(); return _finishOn!; }
    }
    private BicepValue<DateTimeOffset>? _finishOn;

    /// <summary>
    /// The source of the pipeline run.
    /// </summary>
    public ImportPipelineSourceProperties Source 
    {
        get { Initialize(); return _source!; }
    }
    private ImportPipelineSourceProperties? _source;

    /// <summary>
    /// The target of the pipeline run.
    /// </summary>
    public ExportPipelineTargetProperties Target 
    {
        get { Initialize(); return _target!; }
    }
    private ExportPipelineTargetProperties? _target;

    /// <summary>
    /// The digest of the tar used to transfer the artifacts.
    /// </summary>
    public BicepValue<string> CatalogDigest 
    {
        get { Initialize(); return _catalogDigest!; }
    }
    private BicepValue<string>? _catalogDigest;

    /// <summary>
    /// The timestamp when the source update happened.
    /// </summary>
    public BicepValue<DateTimeOffset> SourceTriggerTimestamp 
    {
        get { Initialize(); return _sourceTriggerTimestamp!; }
    }
    private BicepValue<DateTimeOffset>? _sourceTriggerTimestamp;

    /// <summary>
    /// The detailed error message for the pipeline run in the case of failure.
    /// </summary>
    public BicepValue<string> PipelineRunErrorMessage 
    {
        get { Initialize(); return _pipelineRunErrorMessage!; }
    }
    private BicepValue<string>? _pipelineRunErrorMessage;

    /// <summary>
    /// Creates a new PipelineRunResult.
    /// </summary>
    public PipelineRunResult()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of PipelineRunResult.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _status = DefineProperty<string>("Status", ["status"], isOutput: true);
        _importedArtifacts = DefineListProperty<string>("ImportedArtifacts", ["importedArtifacts"], isOutput: true);
        _progressPercentage = DefineProperty<string>("ProgressPercentage", ["progress", "percentage"], isOutput: true);
        _startOn = DefineProperty<DateTimeOffset>("StartOn", ["startTime"], isOutput: true);
        _finishOn = DefineProperty<DateTimeOffset>("FinishOn", ["finishTime"], isOutput: true);
        _source = DefineModelProperty<ImportPipelineSourceProperties>("Source", ["source"], isOutput: true);
        _target = DefineModelProperty<ExportPipelineTargetProperties>("Target", ["target"], isOutput: true);
        _catalogDigest = DefineProperty<string>("CatalogDigest", ["catalogDigest"], isOutput: true);
        _sourceTriggerTimestamp = DefineProperty<DateTimeOffset>("SourceTriggerTimestamp", ["trigger", "sourceTrigger", "timestamp"], isOutput: true);
        _pipelineRunErrorMessage = DefineProperty<string>("PipelineRunErrorMessage", ["pipelineRunErrorMessage"], isOutput: true);
    }
}
