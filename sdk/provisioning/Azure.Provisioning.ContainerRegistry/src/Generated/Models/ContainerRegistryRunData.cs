// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.ContainerRegistry;

/// <summary>
/// A class representing the ContainerRegistryRun data model.             Run
/// resource properties
/// </summary>
public partial class ContainerRegistryRunData : ProvisioningConstruct
{
    /// <summary>
    /// The unique identifier for the run.
    /// </summary>
    public BicepValue<string> RunId { get => _runId; set => _runId.Assign(value); }
    private readonly BicepValue<string> _runId;

    /// <summary>
    /// The current status of the run.
    /// </summary>
    public BicepValue<ContainerRegistryRunStatus> Status { get => _status; set => _status.Assign(value); }
    private readonly BicepValue<ContainerRegistryRunStatus> _status;

    /// <summary>
    /// The last updated time for the run.
    /// </summary>
    public BicepValue<DateTimeOffset> LastUpdatedOn { get => _lastUpdatedOn; set => _lastUpdatedOn.Assign(value); }
    private readonly BicepValue<DateTimeOffset> _lastUpdatedOn;

    /// <summary>
    /// The type of run.
    /// </summary>
    public BicepValue<ContainerRegistryRunType> RunType { get => _runType; set => _runType.Assign(value); }
    private readonly BicepValue<ContainerRegistryRunType> _runType;

    /// <summary>
    /// The dedicated agent pool for the run.
    /// </summary>
    public BicepValue<string> AgentPoolName { get => _agentPoolName; set => _agentPoolName.Assign(value); }
    private readonly BicepValue<string> _agentPoolName;

    /// <summary>
    /// The time the run was scheduled.
    /// </summary>
    public BicepValue<DateTimeOffset> CreatedOn { get => _createdOn; set => _createdOn.Assign(value); }
    private readonly BicepValue<DateTimeOffset> _createdOn;

    /// <summary>
    /// The time the run started.
    /// </summary>
    public BicepValue<DateTimeOffset> StartOn { get => _startOn; set => _startOn.Assign(value); }
    private readonly BicepValue<DateTimeOffset> _startOn;

    /// <summary>
    /// The time the run finished.
    /// </summary>
    public BicepValue<DateTimeOffset> FinishOn { get => _finishOn; set => _finishOn.Assign(value); }
    private readonly BicepValue<DateTimeOffset> _finishOn;

    /// <summary>
    /// The list of all images that were generated from the run. This is
    /// applicable if the run generates base image dependencies.
    /// </summary>
    public BicepList<ContainerRegistryImageDescriptor> OutputImages { get => _outputImages; set => _outputImages.Assign(value); }
    private readonly BicepList<ContainerRegistryImageDescriptor> _outputImages;

    /// <summary>
    /// The task against which run was scheduled.
    /// </summary>
    public BicepValue<string> Task { get => _task; set => _task.Assign(value); }
    private readonly BicepValue<string> _task;

    /// <summary>
    /// The image update trigger that caused the run. This is applicable if the
    /// task has base image trigger configured.
    /// </summary>
    public BicepValue<ContainerRegistryImageUpdateTrigger> ImageUpdateTrigger { get => _imageUpdateTrigger; set => _imageUpdateTrigger.Assign(value); }
    private readonly BicepValue<ContainerRegistryImageUpdateTrigger> _imageUpdateTrigger;

    /// <summary>
    /// The source trigger that caused the run.
    /// </summary>
    public BicepValue<ContainerRegistrySourceTriggerDescriptor> SourceTrigger { get => _sourceTrigger; set => _sourceTrigger.Assign(value); }
    private readonly BicepValue<ContainerRegistrySourceTriggerDescriptor> _sourceTrigger;

    /// <summary>
    /// The timer trigger that caused the run.
    /// </summary>
    public BicepValue<ContainerRegistryTimerTriggerDescriptor> TimerTrigger { get => _timerTrigger; set => _timerTrigger.Assign(value); }
    private readonly BicepValue<ContainerRegistryTimerTriggerDescriptor> _timerTrigger;

    /// <summary>
    /// The platform properties against which the run will happen.
    /// </summary>
    public BicepValue<ContainerRegistryPlatformProperties> Platform { get => _platform; set => _platform.Assign(value); }
    private readonly BicepValue<ContainerRegistryPlatformProperties> _platform;

    /// <summary>
    /// The CPU configuration in terms of number of cores required for the run.
    /// </summary>
    public BicepValue<int> AgentCpu { get => _agentCpu; set => _agentCpu.Assign(value); }
    private readonly BicepValue<int> _agentCpu;

    /// <summary>
    /// The scope of the credentials that were used to login to the source
    /// registry during this run.
    /// </summary>
    public BicepValue<string> SourceRegistryAuth { get => _sourceRegistryAuth; set => _sourceRegistryAuth.Assign(value); }
    private readonly BicepValue<string> _sourceRegistryAuth;

    /// <summary>
    /// The list of custom registries that were logged in during this run.
    /// </summary>
    public BicepList<string> CustomRegistries { get => _customRegistries; set => _customRegistries.Assign(value); }
    private readonly BicepList<string> _customRegistries;

    /// <summary>
    /// The error message received from backend systems after the run is
    /// scheduled.
    /// </summary>
    public BicepValue<string> RunErrorMessage { get => _runErrorMessage; }
    private readonly BicepValue<string> _runErrorMessage;

    /// <summary>
    /// The update trigger token passed for the Run.
    /// </summary>
    public BicepValue<string> UpdateTriggerToken { get => _updateTriggerToken; set => _updateTriggerToken.Assign(value); }
    private readonly BicepValue<string> _updateTriggerToken;

    /// <summary>
    /// The image description for the log artifact.
    /// </summary>
    public BicepValue<ContainerRegistryImageDescriptor> LogArtifact { get => _logArtifact; }
    private readonly BicepValue<ContainerRegistryImageDescriptor> _logArtifact;

    /// <summary>
    /// The provisioning state of a run.
    /// </summary>
    public BicepValue<ContainerRegistryProvisioningState> ProvisioningState { get => _provisioningState; set => _provisioningState.Assign(value); }
    private readonly BicepValue<ContainerRegistryProvisioningState> _provisioningState;

    /// <summary>
    /// The value that indicates whether archiving is enabled or not.
    /// </summary>
    public BicepValue<bool> IsArchiveEnabled { get => _isArchiveEnabled; set => _isArchiveEnabled.Assign(value); }
    private readonly BicepValue<bool> _isArchiveEnabled;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the Name.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new ContainerRegistryRunData.
    /// </summary>
    public ContainerRegistryRunData()
    {
        _runId = BicepValue<string>.DefineProperty(this, "RunId", ["properties", "runId"]);
        _status = BicepValue<ContainerRegistryRunStatus>.DefineProperty(this, "Status", ["properties", "status"]);
        _lastUpdatedOn = BicepValue<DateTimeOffset>.DefineProperty(this, "LastUpdatedOn", ["properties", "lastUpdatedTime"]);
        _runType = BicepValue<ContainerRegistryRunType>.DefineProperty(this, "RunType", ["properties", "runType"]);
        _agentPoolName = BicepValue<string>.DefineProperty(this, "AgentPoolName", ["properties", "agentPoolName"]);
        _createdOn = BicepValue<DateTimeOffset>.DefineProperty(this, "CreatedOn", ["properties", "createTime"]);
        _startOn = BicepValue<DateTimeOffset>.DefineProperty(this, "StartOn", ["properties", "startTime"]);
        _finishOn = BicepValue<DateTimeOffset>.DefineProperty(this, "FinishOn", ["properties", "finishTime"]);
        _outputImages = BicepList<ContainerRegistryImageDescriptor>.DefineProperty(this, "OutputImages", ["properties", "outputImages"]);
        _task = BicepValue<string>.DefineProperty(this, "Task", ["properties", "task"]);
        _imageUpdateTrigger = BicepValue<ContainerRegistryImageUpdateTrigger>.DefineProperty(this, "ImageUpdateTrigger", ["properties", "imageUpdateTrigger"]);
        _sourceTrigger = BicepValue<ContainerRegistrySourceTriggerDescriptor>.DefineProperty(this, "SourceTrigger", ["properties", "sourceTrigger"]);
        _timerTrigger = BicepValue<ContainerRegistryTimerTriggerDescriptor>.DefineProperty(this, "TimerTrigger", ["properties", "timerTrigger"]);
        _platform = BicepValue<ContainerRegistryPlatformProperties>.DefineProperty(this, "Platform", ["properties", "platform"]);
        _agentCpu = BicepValue<int>.DefineProperty(this, "AgentCpu", ["properties", "agentConfiguration", "cpu"]);
        _sourceRegistryAuth = BicepValue<string>.DefineProperty(this, "SourceRegistryAuth", ["properties", "sourceRegistryAuth"]);
        _customRegistries = BicepList<string>.DefineProperty(this, "CustomRegistries", ["properties", "customRegistries"]);
        _runErrorMessage = BicepValue<string>.DefineProperty(this, "RunErrorMessage", ["properties", "runErrorMessage"], isOutput: true);
        _updateTriggerToken = BicepValue<string>.DefineProperty(this, "UpdateTriggerToken", ["properties", "updateTriggerToken"]);
        _logArtifact = BicepValue<ContainerRegistryImageDescriptor>.DefineProperty(this, "LogArtifact", ["properties", "logArtifact"], isOutput: true);
        _provisioningState = BicepValue<ContainerRegistryProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"]);
        _isArchiveEnabled = BicepValue<bool>.DefineProperty(this, "IsArchiveEnabled", ["properties", "isArchiveEnabled"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }
}
