// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.ContainerRegistry;

/// <summary>
/// The soft delete policy for a container registry.
/// </summary>
public partial class ContainerRegistrySoftDeletePolicy : ProvisionableConstruct
{
    /// <summary>
    /// The number of days after which a soft-deleted item is permanently
    /// deleted.
    /// </summary>
    public BicepValue<int> RetentionDays 
    {
        get { Initialize(); return _retentionDays!; }
        set { Initialize(); _retentionDays!.Assign(value); }
    }
    private BicepValue<int>? _retentionDays;

    /// <summary>
    /// The timestamp when the policy was last updated.
    /// </summary>
    public BicepValue<DateTimeOffset> LastUpdatedOn 
    {
        get { Initialize(); return _lastUpdatedOn!; }
    }
    private BicepValue<DateTimeOffset>? _lastUpdatedOn;

    /// <summary>
    /// The value that indicates whether the policy is enabled or not.
    /// </summary>
    public BicepValue<ContainerRegistryPolicyStatus> Status 
    {
        get { Initialize(); return _status!; }
        set { Initialize(); _status!.Assign(value); }
    }
    private BicepValue<ContainerRegistryPolicyStatus>? _status;

    /// <summary>
    /// Creates a new ContainerRegistrySoftDeletePolicy.
    /// </summary>
    public ContainerRegistrySoftDeletePolicy()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// ContainerRegistrySoftDeletePolicy.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _retentionDays = DefineProperty<int>("RetentionDays", ["retentionDays"]);
        _lastUpdatedOn = DefineProperty<DateTimeOffset>("LastUpdatedOn", ["lastUpdatedTime"], isOutput: true);
        _status = DefineProperty<ContainerRegistryPolicyStatus>("Status", ["status"]);
    }
}
