// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.ContainerRegistry;

/// <summary>
/// The request properties provided for a pipeline run.
/// </summary>
public partial class ConnectedRegistryPipelineRunContent : ProvisionableConstruct
{
    /// <summary>
    /// The resource ID of the pipeline to run.
    /// </summary>
    public BicepValue<ResourceIdentifier> PipelineResourceId 
    {
        get { Initialize(); return _pipelineResourceId!; }
        set { Initialize(); _pipelineResourceId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _pipelineResourceId;

    /// <summary>
    /// List of source artifacts to be transferred by the pipeline.
    /// Specify an image by repository (&apos;hello-world&apos;).
    /// This will use the &apos;latest&apos; tag.             Specify an image
    /// by tag (&apos;hello-world:latest&apos;).             Specify an image
    /// by sha256-based manifest digest
    /// (&apos;hello-world@sha256:abc123&apos;).
    /// </summary>
    public BicepList<string> Artifacts 
    {
        get { Initialize(); return _artifacts!; }
        set { Initialize(); _artifacts!.Assign(value); }
    }
    private BicepList<string>? _artifacts;

    /// <summary>
    /// The source properties of the pipeline run.
    /// </summary>
    public ContainerRegistryPipelineRunSourceProperties Source 
    {
        get { Initialize(); return _source!; }
        set { Initialize(); AssignOrReplace(ref _source, value); }
    }
    private ContainerRegistryPipelineRunSourceProperties? _source;

    /// <summary>
    /// The target properties of the pipeline run.
    /// </summary>
    public ContainerRegistryPipelineRunTargetProperties Target 
    {
        get { Initialize(); return _target!; }
        set { Initialize(); AssignOrReplace(ref _target, value); }
    }
    private ContainerRegistryPipelineRunTargetProperties? _target;

    /// <summary>
    /// The digest of the tar used to transfer the artifacts.
    /// </summary>
    public BicepValue<string> CatalogDigest 
    {
        get { Initialize(); return _catalogDigest!; }
        set { Initialize(); _catalogDigest!.Assign(value); }
    }
    private BicepValue<string>? _catalogDigest;

    /// <summary>
    /// Creates a new ConnectedRegistryPipelineRunContent.
    /// </summary>
    public ConnectedRegistryPipelineRunContent()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// ConnectedRegistryPipelineRunContent.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _pipelineResourceId = DefineProperty<ResourceIdentifier>("PipelineResourceId", ["pipelineResourceId"]);
        _artifacts = DefineListProperty<string>("Artifacts", ["artifacts"]);
        _source = DefineModelProperty<ContainerRegistryPipelineRunSourceProperties>("Source", ["source"]);
        _target = DefineModelProperty<ContainerRegistryPipelineRunTargetProperties>("Target", ["target"]);
        _catalogDigest = DefineProperty<string>("CatalogDigest", ["catalogDigest"]);
    }
}
