// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.ContainerRegistry;

/// <summary>
/// The sync properties of the connected registry with its parent.
/// </summary>
public partial class ConnectedRegistrySyncProperties : ProvisionableConstruct
{
    /// <summary>
    /// The resource ID of the ACR token used to authenticate the connected
    /// registry to its parent during sync.
    /// </summary>
    public BicepValue<ResourceIdentifier> TokenId 
    {
        get { Initialize(); return _tokenId!; }
        set { Initialize(); _tokenId!.Assign(value); }
    }
    private BicepValue<ResourceIdentifier>? _tokenId;

    /// <summary>
    /// The cron expression indicating the schedule that the connected registry
    /// will sync with its parent.
    /// </summary>
    public BicepValue<string> Schedule 
    {
        get { Initialize(); return _schedule!; }
        set { Initialize(); _schedule!.Assign(value); }
    }
    private BicepValue<string>? _schedule;

    /// <summary>
    /// The time window during which sync is enabled for each schedule
    /// occurrence. Specify the duration using the format
    /// P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
    /// </summary>
    public BicepValue<TimeSpan> SyncWindow 
    {
        get { Initialize(); return _syncWindow!; }
        set { Initialize(); _syncWindow!.Assign(value); }
    }
    private BicepValue<TimeSpan>? _syncWindow;

    /// <summary>
    /// The period of time for which a message is available to sync before it
    /// is expired. Specify the duration using the format
    /// P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
    /// </summary>
    public BicepValue<TimeSpan> MessageTtl 
    {
        get { Initialize(); return _messageTtl!; }
        set { Initialize(); _messageTtl!.Assign(value); }
    }
    private BicepValue<TimeSpan>? _messageTtl;

    /// <summary>
    /// The last time a sync occurred between the connected registry and its
    /// parent.
    /// </summary>
    public BicepValue<DateTimeOffset> LastSyncOn 
    {
        get { Initialize(); return _lastSyncOn!; }
    }
    private BicepValue<DateTimeOffset>? _lastSyncOn;

    /// <summary>
    /// The gateway endpoint used by the connected registry to communicate with
    /// its parent.
    /// </summary>
    public BicepValue<string> GatewayEndpoint 
    {
        get { Initialize(); return _gatewayEndpoint!; }
    }
    private BicepValue<string>? _gatewayEndpoint;

    /// <summary>
    /// Creates a new ConnectedRegistrySyncProperties.
    /// </summary>
    public ConnectedRegistrySyncProperties()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of
    /// ConnectedRegistrySyncProperties.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _tokenId = DefineProperty<ResourceIdentifier>("TokenId", ["tokenId"]);
        _schedule = DefineProperty<string>("Schedule", ["schedule"]);
        _syncWindow = DefineProperty<TimeSpan>("SyncWindow", ["syncWindow"]);
        _messageTtl = DefineProperty<TimeSpan>("MessageTtl", ["messageTtl"]);
        _lastSyncOn = DefineProperty<DateTimeOffset>("LastSyncOn", ["lastSyncTime"], isOutput: true);
        _gatewayEndpoint = DefineProperty<string>("GatewayEndpoint", ["gatewayEndpoint"], isOutput: true);
    }
}
