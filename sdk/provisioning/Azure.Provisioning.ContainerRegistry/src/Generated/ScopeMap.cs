// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.ContainerRegistry;

/// <summary>
/// ScopeMap.
/// </summary>
public partial class ScopeMap : Resource
{
    /// <summary>
    /// The name of the scope map.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The list of scoped permissions for registry artifacts.             E.g.
    /// repositories/repository-name/content/read,
    /// repositories/repository-name/metadata/write
    /// </summary>
    public BicepList<string> Actions { get => _actions; set => _actions.Assign(value); }
    private readonly BicepList<string> _actions;

    /// <summary>
    /// The user friendly description of the scope map.
    /// </summary>
    public BicepValue<string> Description { get => _description; set => _description.Assign(value); }
    private readonly BicepValue<string> _description;

    /// <summary>
    /// The creation date of scope map.
    /// </summary>
    public BicepValue<DateTimeOffset> CreatedOn { get => _createdOn; }
    private readonly BicepValue<DateTimeOffset> _createdOn;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Provisioning state of the resource.
    /// </summary>
    public BicepValue<ContainerRegistryProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<ContainerRegistryProvisioningState> _provisioningState;

    /// <summary>
    /// The type of the scope map. E.g. BuildIn scope map.
    /// </summary>
    public BicepValue<string> ScopeMapType { get => _scopeMapType; }
    private readonly BicepValue<string> _scopeMapType;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent ContainerRegistryService.
    /// </summary>
    public ContainerRegistryService? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<ContainerRegistryService> _parent;

    /// <summary>
    /// Creates a new ScopeMap.
    /// </summary>
    /// <param name="resourceName">Name of the ScopeMap.</param>
    /// <param name="resourceVersion">Version of the ScopeMap.</param>
    public ScopeMap(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.ContainerRegistry/registries/scopeMaps", resourceVersion ?? "2023-07-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _actions = BicepList<string>.DefineProperty(this, "Actions", ["properties", "actions"]);
        _description = BicepValue<string>.DefineProperty(this, "Description", ["properties", "description"]);
        _createdOn = BicepValue<DateTimeOffset>.DefineProperty(this, "CreatedOn", ["properties", "creationDate"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningState = BicepValue<ContainerRegistryProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _scopeMapType = BicepValue<string>.DefineProperty(this, "ScopeMapType", ["properties", "type"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<ContainerRegistryService>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported ScopeMap resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2023-11-01-preview.
        /// </summary>
        public static readonly string V2023_11_01_preview = "2023-11-01-preview";

        /// <summary>
        /// 2023-07-01.
        /// </summary>
        public static readonly string V2023_07_01 = "2023-07-01";

        /// <summary>
        /// 2022-12-01.
        /// </summary>
        public static readonly string V2022_12_01 = "2022-12-01";
    }

    /// <summary>
    /// Creates a reference to an existing ScopeMap.
    /// </summary>
    /// <param name="resourceName">Name of the ScopeMap.</param>
    /// <param name="resourceVersion">Version of the ScopeMap.</param>
    /// <returns>The existing ScopeMap resource.</returns>
    public static ScopeMap FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this ScopeMap resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 5, maxLength: 50, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen | ResourceNameCharacters.Underscore);
}
