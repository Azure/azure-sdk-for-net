// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.ContainerRegistry;

/// <summary>
/// ContainerRegistryReplication.
/// </summary>
public partial class ContainerRegistryReplication : Resource
{
    /// <summary>
    /// The name of the replication.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Specifies whether the replication&apos;s regional endpoint is enabled.
    /// Requests will not be routed to a replication whose regional endpoint
    /// is disabled, however its data will continue to be synced with other
    /// replications.
    /// </summary>
    public BicepValue<bool> IsRegionEndpointEnabled { get => _isRegionEndpointEnabled; set => _isRegionEndpointEnabled.Assign(value); }
    private readonly BicepValue<bool> _isRegionEndpointEnabled;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Whether or not zone redundancy is enabled for this container registry
    /// replication.
    /// </summary>
    public BicepValue<ContainerRegistryZoneRedundancy> ZoneRedundancy { get => _zoneRedundancy; set => _zoneRedundancy.Assign(value); }
    private readonly BicepValue<ContainerRegistryZoneRedundancy> _zoneRedundancy;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The provisioning state of the replication at the time the operation was
    /// called.
    /// </summary>
    public BicepValue<ContainerRegistryProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<ContainerRegistryProvisioningState> _provisioningState;

    /// <summary>
    /// The status of the replication at the time the operation was called.
    /// </summary>
    public BicepValue<ContainerRegistryResourceStatus> Status { get => _status; }
    private readonly BicepValue<ContainerRegistryResourceStatus> _status;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent ContainerRegistryService.
    /// </summary>
    public ContainerRegistryService? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<ContainerRegistryService> _parent;

    /// <summary>
    /// Creates a new ContainerRegistryReplication.
    /// </summary>
    /// <param name="resourceName">Name of the ContainerRegistryReplication.</param>
    /// <param name="resourceVersion">Version of the ContainerRegistryReplication.</param>
    public ContainerRegistryReplication(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.ContainerRegistry/registries/replications", resourceVersion ?? "2023-07-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _isRegionEndpointEnabled = BicepValue<bool>.DefineProperty(this, "IsRegionEndpointEnabled", ["properties", "regionEndpointEnabled"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _zoneRedundancy = BicepValue<ContainerRegistryZoneRedundancy>.DefineProperty(this, "ZoneRedundancy", ["properties", "zoneRedundancy"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningState = BicepValue<ContainerRegistryProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _status = BicepValue<ContainerRegistryResourceStatus>.DefineProperty(this, "Status", ["properties", "status"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<ContainerRegistryService>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported ContainerRegistryReplication resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2023-11-01-preview.
        /// </summary>
        public static readonly string V2023_11_01_preview = "2023-11-01-preview";

        /// <summary>
        /// 2023-07-01.
        /// </summary>
        public static readonly string V2023_07_01 = "2023-07-01";

        /// <summary>
        /// 2022-12-01.
        /// </summary>
        public static readonly string V2022_12_01 = "2022-12-01";

        /// <summary>
        /// 2021-09-01.
        /// </summary>
        public static readonly string V2021_09_01 = "2021-09-01";

        /// <summary>
        /// 2019-05-01.
        /// </summary>
        public static readonly string V2019_05_01 = "2019-05-01";

        /// <summary>
        /// 2017-10-01.
        /// </summary>
        public static readonly string V2017_10_01 = "2017-10-01";
    }

    /// <summary>
    /// Creates a reference to an existing ContainerRegistryReplication.
    /// </summary>
    /// <param name="resourceName">Name of the ContainerRegistryReplication.</param>
    /// <param name="resourceVersion">Version of the ContainerRegistryReplication.</param>
    /// <returns>The existing ContainerRegistryReplication resource.</returns>
    public static ContainerRegistryReplication FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this ContainerRegistryReplication
    /// resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 5, maxLength: 50, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers);
}
