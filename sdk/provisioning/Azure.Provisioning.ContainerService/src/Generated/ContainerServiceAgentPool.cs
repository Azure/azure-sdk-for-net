// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.ContainerService;

/// <summary>
/// ContainerServiceAgentPool.
/// </summary>
public partial class ContainerServiceAgentPool : Resource
{
    /// <summary>
    /// The name of the agent pool.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The list of Availability zones to use for nodes. This can only be
    /// specified if the AgentPoolType property is
    /// &apos;VirtualMachineScaleSets&apos;.
    /// </summary>
    public BicepList<string> AvailabilityZones { get => _availabilityZones; set => _availabilityZones.Assign(value); }
    private readonly BicepList<string> _availabilityZones;

    /// <summary>
    /// AKS will associate the specified agent pool with the Capacity
    /// Reservation Group.
    /// </summary>
    public BicepValue<ResourceIdentifier> CapacityReservationGroupId { get => _capacityReservationGroupId; set => _capacityReservationGroupId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _capacityReservationGroupId;

    /// <summary>
    /// Number of agents (VMs) to host docker containers. Allowed values must
    /// be in the range of 0 to 1000 (inclusive) for user pools and in the
    /// range of 1 to 1000 (inclusive) for system pools. The default value is
    /// 1.
    /// </summary>
    public BicepValue<int> Count { get => _count; set => _count.Assign(value); }
    private readonly BicepValue<int> _count;

    /// <summary>
    /// This is the ARM ID of the source object to be used to create the target
    /// object.
    /// </summary>
    public BicepValue<ResourceIdentifier> CreationDataSourceResourceId { get => _creationDataSourceResourceId; set => _creationDataSourceResourceId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _creationDataSourceResourceId;

    /// <summary>
    /// Whether to enable auto-scaler.
    /// </summary>
    public BicepValue<bool> EnableAutoScaling { get => _enableAutoScaling; set => _enableAutoScaling.Assign(value); }
    private readonly BicepValue<bool> _enableAutoScaling;

    /// <summary>
    /// This is only supported on certain VM sizes and in certain Azure
    /// regions. For more information, see:
    /// https://docs.microsoft.com/azure/aks/enable-host-encryption.
    /// </summary>
    public BicepValue<bool> EnableEncryptionAtHost { get => _enableEncryptionAtHost; set => _enableEncryptionAtHost.Assign(value); }
    private readonly BicepValue<bool> _enableEncryptionAtHost;

    /// <summary>
    /// See [Add a FIPS-enabled node
    /// pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview)
    /// for more details.
    /// </summary>
    public BicepValue<bool> EnableFips { get => _enableFips; set => _enableFips.Assign(value); }
    private readonly BicepValue<bool> _enableFips;

    /// <summary>
    /// Some scenarios may require nodes in a node pool to receive their own
    /// dedicated public IP addresses. A common scenario is for gaming
    /// workloads, where a console needs to make a direct connection to a
    /// cloud virtual machine to minimize hops. For more information see
    /// [assigning a public IP per
    /// node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools).
    /// The default is false.
    /// </summary>
    public BicepValue<bool> EnableNodePublicIP { get => _enableNodePublicIP; set => _enableNodePublicIP.Assign(value); }
    private readonly BicepValue<bool> _enableNodePublicIP;

    /// <summary>
    /// Whether to enable UltraSSD.
    /// </summary>
    public BicepValue<bool> EnableUltraSsd { get => _enableUltraSsd; set => _enableUltraSsd.Assign(value); }
    private readonly BicepValue<bool> _enableUltraSsd;

    /// <summary>
    /// GPUInstanceProfile to be used to specify GPU MIG instance profile for
    /// supported GPU VM SKU.
    /// </summary>
    public BicepValue<GpuInstanceProfile> GpuInstanceProfile { get => _gpuInstanceProfile; set => _gpuInstanceProfile.Assign(value); }
    private readonly BicepValue<GpuInstanceProfile> _gpuInstanceProfile;

    /// <summary>
    /// This is of the form:
    /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}.
    /// For more information see [Azure dedicated
    /// hosts](https://docs.microsoft.com/azure/virtual-machines/dedicated-hosts).
    /// </summary>
    public BicepValue<ResourceIdentifier> HostGroupId { get => _hostGroupId; set => _hostGroupId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _hostGroupId;

    /// <summary>
    /// The Kubelet configuration on the agent pool nodes.
    /// </summary>
    public BicepValue<KubeletConfig> KubeletConfig { get => _kubeletConfig; set => _kubeletConfig.Assign(value); }
    private readonly BicepValue<KubeletConfig> _kubeletConfig;

    /// <summary>
    /// Determines the placement of emptyDir volumes, container runtime data
    /// root, and Kubelet ephemeral storage.
    /// </summary>
    public BicepValue<KubeletDiskType> KubeletDiskType { get => _kubeletDiskType; set => _kubeletDiskType.Assign(value); }
    private readonly BicepValue<KubeletDiskType> _kubeletDiskType;

    /// <summary>
    /// The OS configuration of Linux agent nodes.
    /// </summary>
    public BicepValue<LinuxOSConfig> LinuxOSConfig { get => _linuxOSConfig; set => _linuxOSConfig.Assign(value); }
    private readonly BicepValue<LinuxOSConfig> _linuxOSConfig;

    /// <summary>
    /// The maximum number of nodes for auto-scaling.
    /// </summary>
    public BicepValue<int> MaxCount { get => _maxCount; set => _maxCount.Assign(value); }
    private readonly BicepValue<int> _maxCount;

    /// <summary>
    /// The maximum number of pods that can run on a node.
    /// </summary>
    public BicepValue<int> MaxPods { get => _maxPods; set => _maxPods.Assign(value); }
    private readonly BicepValue<int> _maxPods;

    /// <summary>
    /// The minimum number of nodes for auto-scaling.
    /// </summary>
    public BicepValue<int> MinCount { get => _minCount; set => _minCount.Assign(value); }
    private readonly BicepValue<int> _minCount;

    /// <summary>
    /// A cluster must have at least one &apos;System&apos; Agent Pool at all
    /// times. For additional information on agent pool restrictions and best
    /// practices, see: https://docs.microsoft.com/azure/aks/use-system-pools.
    /// </summary>
    public BicepValue<AgentPoolMode> Mode { get => _mode; set => _mode.Assign(value); }
    private readonly BicepValue<AgentPoolMode> _mode;

    /// <summary>
    /// Network-related settings of an agent pool.
    /// </summary>
    public BicepValue<AgentPoolNetworkProfile> NetworkProfile { get => _networkProfile; set => _networkProfile.Assign(value); }
    private readonly BicepValue<AgentPoolNetworkProfile> _networkProfile;

    /// <summary>
    /// The node labels to be persisted across all nodes in agent pool.
    /// </summary>
    public BicepDictionary<string> NodeLabels { get => _nodeLabels; set => _nodeLabels.Assign(value); }
    private readonly BicepDictionary<string> _nodeLabels;

    /// <summary>
    /// This is of the form:
    /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}.
    /// </summary>
    public BicepValue<ResourceIdentifier> NodePublicIPPrefixId { get => _nodePublicIPPrefixId; set => _nodePublicIPPrefixId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _nodePublicIPPrefixId;

    /// <summary>
    /// The taints added to new nodes during node pool create and scale. For
    /// example, key=value:NoSchedule.
    /// </summary>
    public BicepList<string> NodeTaints { get => _nodeTaints; set => _nodeTaints.Assign(value); }
    private readonly BicepList<string> _nodeTaints;

    /// <summary>
    /// Both patch version &lt;major.minor.patch&gt; (e.g. 1.20.13) and
    /// &lt;major.minor&gt; (e.g. 1.20) are supported. When
    /// &lt;major.minor&gt; is specified, the latest supported GA patch
    /// version is chosen automatically. Updating the cluster with the same
    /// &lt;major.minor&gt; once it has been created (e.g. 1.14.x -&gt; 1.14)
    /// will not trigger an upgrade, even if a newer patch version is
    /// available. As a best practice, you should upgrade all node pools in an
    /// AKS cluster to the same Kubernetes version. The node pool version must
    /// have the same major version as the control plane. The node pool minor
    /// version must be within two minor versions of the control plane
    /// version. The node pool version cannot be greater than the control
    /// plane version. For more information see [upgrading a node
    /// pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
    /// </summary>
    public BicepValue<string> OrchestratorVersion { get => _orchestratorVersion; set => _orchestratorVersion.Assign(value); }
    private readonly BicepValue<string> _orchestratorVersion;

    /// <summary>
    /// OS Disk Size in GB to be used to specify the disk size for every
    /// machine in the master/agent pool. If you specify 0, it will apply the
    /// default osDisk size according to the vmSize specified.
    /// </summary>
    public BicepValue<int> OSDiskSizeInGB { get => _oSDiskSizeInGB; set => _oSDiskSizeInGB.Assign(value); }
    private readonly BicepValue<int> _oSDiskSizeInGB;

    /// <summary>
    /// The default is &apos;Ephemeral&apos; if the VM supports it and has a
    /// cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults
    /// to &apos;Managed&apos;. May not be changed after creation. For more
    /// information see [Ephemeral
    /// OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
    /// </summary>
    public BicepValue<ContainerServiceOSDiskType> OSDiskType { get => _oSDiskType; set => _oSDiskType.Assign(value); }
    private readonly BicepValue<ContainerServiceOSDiskType> _oSDiskType;

    /// <summary>
    /// Specifies the OS SKU used by the agent pool. The default is Ubuntu if
    /// OSType is Linux. The default is Windows2019 when Kubernetes &lt;= 1.24
    /// or Windows2022 when Kubernetes &gt;= 1.25 if OSType is Windows.
    /// </summary>
    public BicepValue<ContainerServiceOSSku> OSSku { get => _oSSku; set => _oSSku.Assign(value); }
    private readonly BicepValue<ContainerServiceOSSku> _oSSku;

    /// <summary>
    /// The operating system type. The default is Linux.
    /// </summary>
    public BicepValue<ContainerServiceOSType> OSType { get => _oSType; set => _oSType.Assign(value); }
    private readonly BicepValue<ContainerServiceOSType> _oSType;

    /// <summary>
    /// If omitted, pod IPs are statically assigned on the node subnet (see
    /// vnetSubnetID for more details). This is of the form:
    /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
    /// </summary>
    public BicepValue<ResourceIdentifier> PodSubnetId { get => _podSubnetId; set => _podSubnetId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _podSubnetId;

    /// <summary>
    /// Tells whether the cluster is Running or Stopped.
    /// </summary>
    public BicepValue<ContainerServiceStateCode> PowerStateCode { get => _powerStateCode; set => _powerStateCode.Assign(value); }
    private readonly BicepValue<ContainerServiceStateCode> _powerStateCode;

    /// <summary>
    /// The ID for Proximity Placement Group.
    /// </summary>
    public BicepValue<ResourceIdentifier> ProximityPlacementGroupId { get => _proximityPlacementGroupId; set => _proximityPlacementGroupId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _proximityPlacementGroupId;

    /// <summary>
    /// This also effects the cluster autoscaler behavior. If not specified, it
    /// defaults to Delete.
    /// </summary>
    public BicepValue<ScaleDownMode> ScaleDownMode { get => _scaleDownMode; set => _scaleDownMode.Assign(value); }
    private readonly BicepValue<ScaleDownMode> _scaleDownMode;

    /// <summary>
    /// This cannot be specified unless the scaleSetPriority is
    /// &apos;Spot&apos;. If not specified, the default is &apos;Delete&apos;.
    /// </summary>
    public BicepValue<ScaleSetEvictionPolicy> ScaleSetEvictionPolicy { get => _scaleSetEvictionPolicy; set => _scaleSetEvictionPolicy.Assign(value); }
    private readonly BicepValue<ScaleSetEvictionPolicy> _scaleSetEvictionPolicy;

    /// <summary>
    /// The Virtual Machine Scale Set priority. If not specified, the default
    /// is &apos;Regular&apos;.
    /// </summary>
    public BicepValue<ScaleSetPriority> ScaleSetPriority { get => _scaleSetPriority; set => _scaleSetPriority.Assign(value); }
    private readonly BicepValue<ScaleSetPriority> _scaleSetPriority;

    /// <summary>
    /// Possible values are any decimal value greater than zero or -1 which
    /// indicates the willingness to pay any on-demand price. For more details
    /// on spot pricing, see [spot VMs
    /// pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing).
    /// </summary>
    public BicepValue<float> SpotMaxPrice { get => _spotMaxPrice; set => _spotMaxPrice.Assign(value); }
    private readonly BicepValue<float> _spotMaxPrice;

    /// <summary>
    /// The tags to be persisted on the agent pool virtual machine scale set.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// The type of Agent Pool.
    /// </summary>
    public BicepValue<AgentPoolType> TypePropertiesType { get => _typePropertiesType; set => _typePropertiesType.Assign(value); }
    private readonly BicepValue<AgentPoolType> _typePropertiesType;

    /// <summary>
    /// Settings for upgrading the agentpool.
    /// </summary>
    public BicepValue<AgentPoolUpgradeSettings> UpgradeSettings { get => _upgradeSettings; set => _upgradeSettings.Assign(value); }
    private readonly BicepValue<AgentPoolUpgradeSettings> _upgradeSettings;

    /// <summary>
    /// VM size availability varies by region. If a node contains insufficient
    /// compute resources (memory, cpu, etc) pods might fail to run correctly.
    /// For more details on restricted VM sizes, see:
    /// https://docs.microsoft.com/azure/aks/quotas-skus-regions.
    /// </summary>
    public BicepValue<string> VmSize { get => _vmSize; set => _vmSize.Assign(value); }
    private readonly BicepValue<string> _vmSize;

    /// <summary>
    /// If this is not specified, a VNET and subnet will be generated and used.
    /// If no podSubnetID is specified, this applies to nodes and pods,
    /// otherwise it applies to just nodes. This is of the form:
    /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
    /// </summary>
    public BicepValue<ResourceIdentifier> VnetSubnetId { get => _vnetSubnetId; set => _vnetSubnetId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _vnetSubnetId;

    /// <summary>
    /// Determines the type of workload a node can run.
    /// </summary>
    public BicepValue<WorkloadRuntime> WorkloadRuntime { get => _workloadRuntime; set => _workloadRuntime.Assign(value); }
    private readonly BicepValue<WorkloadRuntime> _workloadRuntime;

    /// <summary>
    /// If orchestratorVersion is a fully specified version
    /// &lt;major.minor.patch&gt;, this field will be exactly equal to it. If
    /// orchestratorVersion is &lt;major.minor&gt;, this field will contain
    /// the full &lt;major.minor.patch&gt; version being used.
    /// </summary>
    public BicepValue<string> CurrentOrchestratorVersion { get => _currentOrchestratorVersion; }
    private readonly BicepValue<string> _currentOrchestratorVersion;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The version of node image.
    /// </summary>
    public BicepValue<string> NodeImageVersion { get => _nodeImageVersion; }
    private readonly BicepValue<string> _nodeImageVersion;

    /// <summary>
    /// The current deployment or provisioning state.
    /// </summary>
    public BicepValue<string> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<string> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent ContainerServiceManagedCluster.
    /// </summary>
    public ContainerServiceManagedCluster? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<ContainerServiceManagedCluster> _parent;

    /// <summary>
    /// Creates a new ContainerServiceAgentPool.
    /// </summary>
    /// <param name="resourceName">Name of the ContainerServiceAgentPool.</param>
    /// <param name="resourceVersion">Version of the ContainerServiceAgentPool.</param>
    public ContainerServiceAgentPool(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.ContainerService/managedClusters/agentPools", resourceVersion ?? "2024-08-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _availabilityZones = BicepList<string>.DefineProperty(this, "AvailabilityZones", ["properties", "availabilityZones"]);
        _capacityReservationGroupId = BicepValue<ResourceIdentifier>.DefineProperty(this, "CapacityReservationGroupId", ["properties", "capacityReservationGroupID"]);
        _count = BicepValue<int>.DefineProperty(this, "Count", ["properties", "count"]);
        _creationDataSourceResourceId = BicepValue<ResourceIdentifier>.DefineProperty(this, "CreationDataSourceResourceId", ["properties", "creationData", "sourceResourceId"]);
        _enableAutoScaling = BicepValue<bool>.DefineProperty(this, "EnableAutoScaling", ["properties", "enableAutoScaling"]);
        _enableEncryptionAtHost = BicepValue<bool>.DefineProperty(this, "EnableEncryptionAtHost", ["properties", "enableEncryptionAtHost"]);
        _enableFips = BicepValue<bool>.DefineProperty(this, "EnableFips", ["properties", "enableFIPS"]);
        _enableNodePublicIP = BicepValue<bool>.DefineProperty(this, "EnableNodePublicIP", ["properties", "enableNodePublicIP"]);
        _enableUltraSsd = BicepValue<bool>.DefineProperty(this, "EnableUltraSsd", ["properties", "enableUltraSSD"]);
        _gpuInstanceProfile = BicepValue<GpuInstanceProfile>.DefineProperty(this, "GpuInstanceProfile", ["properties", "gpuInstanceProfile"]);
        _hostGroupId = BicepValue<ResourceIdentifier>.DefineProperty(this, "HostGroupId", ["properties", "hostGroupID"]);
        _kubeletConfig = BicepValue<KubeletConfig>.DefineProperty(this, "KubeletConfig", ["properties", "kubeletConfig"]);
        _kubeletDiskType = BicepValue<KubeletDiskType>.DefineProperty(this, "KubeletDiskType", ["properties", "kubeletDiskType"]);
        _linuxOSConfig = BicepValue<LinuxOSConfig>.DefineProperty(this, "LinuxOSConfig", ["properties", "linuxOSConfig"]);
        _maxCount = BicepValue<int>.DefineProperty(this, "MaxCount", ["properties", "maxCount"]);
        _maxPods = BicepValue<int>.DefineProperty(this, "MaxPods", ["properties", "maxPods"]);
        _minCount = BicepValue<int>.DefineProperty(this, "MinCount", ["properties", "minCount"]);
        _mode = BicepValue<AgentPoolMode>.DefineProperty(this, "Mode", ["properties", "mode"]);
        _networkProfile = BicepValue<AgentPoolNetworkProfile>.DefineProperty(this, "NetworkProfile", ["properties", "networkProfile"]);
        _nodeLabels = BicepDictionary<string>.DefineProperty(this, "NodeLabels", ["properties", "nodeLabels"]);
        _nodePublicIPPrefixId = BicepValue<ResourceIdentifier>.DefineProperty(this, "NodePublicIPPrefixId", ["properties", "nodePublicIPPrefixID"]);
        _nodeTaints = BicepList<string>.DefineProperty(this, "NodeTaints", ["properties", "nodeTaints"]);
        _orchestratorVersion = BicepValue<string>.DefineProperty(this, "OrchestratorVersion", ["properties", "orchestratorVersion"]);
        _oSDiskSizeInGB = BicepValue<int>.DefineProperty(this, "OSDiskSizeInGB", ["properties", "osDiskSizeGB"]);
        _oSDiskType = BicepValue<ContainerServiceOSDiskType>.DefineProperty(this, "OSDiskType", ["properties", "osDiskType"]);
        _oSSku = BicepValue<ContainerServiceOSSku>.DefineProperty(this, "OSSku", ["properties", "osSKU"]);
        _oSType = BicepValue<ContainerServiceOSType>.DefineProperty(this, "OSType", ["properties", "osType"]);
        _podSubnetId = BicepValue<ResourceIdentifier>.DefineProperty(this, "PodSubnetId", ["properties", "podSubnetID"]);
        _powerStateCode = BicepValue<ContainerServiceStateCode>.DefineProperty(this, "PowerStateCode", ["properties", "powerState", "code"]);
        _proximityPlacementGroupId = BicepValue<ResourceIdentifier>.DefineProperty(this, "ProximityPlacementGroupId", ["properties", "proximityPlacementGroupID"]);
        _scaleDownMode = BicepValue<ScaleDownMode>.DefineProperty(this, "ScaleDownMode", ["properties", "scaleDownMode"]);
        _scaleSetEvictionPolicy = BicepValue<ScaleSetEvictionPolicy>.DefineProperty(this, "ScaleSetEvictionPolicy", ["properties", "scaleSetEvictionPolicy"]);
        _scaleSetPriority = BicepValue<ScaleSetPriority>.DefineProperty(this, "ScaleSetPriority", ["properties", "scaleSetPriority"]);
        _spotMaxPrice = BicepValue<float>.DefineProperty(this, "SpotMaxPrice", ["properties", "spotMaxPrice"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["properties", "tags"]);
        _typePropertiesType = BicepValue<AgentPoolType>.DefineProperty(this, "TypePropertiesType", ["properties", "type"]);
        _upgradeSettings = BicepValue<AgentPoolUpgradeSettings>.DefineProperty(this, "UpgradeSettings", ["properties", "upgradeSettings"]);
        _vmSize = BicepValue<string>.DefineProperty(this, "VmSize", ["properties", "vmSize"]);
        _vnetSubnetId = BicepValue<ResourceIdentifier>.DefineProperty(this, "VnetSubnetId", ["properties", "vnetSubnetID"]);
        _workloadRuntime = BicepValue<WorkloadRuntime>.DefineProperty(this, "WorkloadRuntime", ["properties", "workloadRuntime"]);
        _currentOrchestratorVersion = BicepValue<string>.DefineProperty(this, "CurrentOrchestratorVersion", ["properties", "currentOrchestratorVersion"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _nodeImageVersion = BicepValue<string>.DefineProperty(this, "NodeImageVersion", ["properties", "nodeImageVersion"], isOutput: true);
        _provisioningState = BicepValue<string>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<ContainerServiceManagedCluster>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported ContainerServiceAgentPool resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-08-02-preview.
        /// </summary>
        public static readonly string V2024_08_02_preview = "2024-08-02-preview";

        /// <summary>
        /// 2024-08-01.
        /// </summary>
        public static readonly string V2024_08_01 = "2024-08-01";

        /// <summary>
        /// 2024-07-01.
        /// </summary>
        public static readonly string V2024_07_01 = "2024-07-01";

        /// <summary>
        /// 2024-06-01.
        /// </summary>
        public static readonly string V2024_06_01 = "2024-06-01";

        /// <summary>
        /// 2024-05-01.
        /// </summary>
        public static readonly string V2024_05_01 = "2024-05-01";

        /// <summary>
        /// 2024-02-01.
        /// </summary>
        public static readonly string V2024_02_01 = "2024-02-01";

        /// <summary>
        /// 2024-01-01.
        /// </summary>
        public static readonly string V2024_01_01 = "2024-01-01";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2023-10-01.
        /// </summary>
        public static readonly string V2023_10_01 = "2023-10-01";

        /// <summary>
        /// 2023-09-01.
        /// </summary>
        public static readonly string V2023_09_01 = "2023-09-01";

        /// <summary>
        /// 2023-08-01.
        /// </summary>
        public static readonly string V2023_08_01 = "2023-08-01";

        /// <summary>
        /// 2023-07-01.
        /// </summary>
        public static readonly string V2023_07_01 = "2023-07-01";

        /// <summary>
        /// 2023-06-01.
        /// </summary>
        public static readonly string V2023_06_01 = "2023-06-01";

        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2023-04-01.
        /// </summary>
        public static readonly string V2023_04_01 = "2023-04-01";

        /// <summary>
        /// 2023-03-01.
        /// </summary>
        public static readonly string V2023_03_01 = "2023-03-01";

        /// <summary>
        /// 2023-02-01.
        /// </summary>
        public static readonly string V2023_02_01 = "2023-02-01";

        /// <summary>
        /// 2023-01-01.
        /// </summary>
        public static readonly string V2023_01_01 = "2023-01-01";

        /// <summary>
        /// 2022-11-01.
        /// </summary>
        public static readonly string V2022_11_01 = "2022-11-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2022-08-01.
        /// </summary>
        public static readonly string V2022_08_01 = "2022-08-01";

        /// <summary>
        /// 2022-07-01.
        /// </summary>
        public static readonly string V2022_07_01 = "2022-07-01";

        /// <summary>
        /// 2022-06-01.
        /// </summary>
        public static readonly string V2022_06_01 = "2022-06-01";

        /// <summary>
        /// 2022-04-01.
        /// </summary>
        public static readonly string V2022_04_01 = "2022-04-01";

        /// <summary>
        /// 2022-03-01.
        /// </summary>
        public static readonly string V2022_03_01 = "2022-03-01";

        /// <summary>
        /// 2022-02-01.
        /// </summary>
        public static readonly string V2022_02_01 = "2022-02-01";

        /// <summary>
        /// 2022-01-01.
        /// </summary>
        public static readonly string V2022_01_01 = "2022-01-01";

        /// <summary>
        /// 2021-10-01.
        /// </summary>
        public static readonly string V2021_10_01 = "2021-10-01";

        /// <summary>
        /// 2021-09-01.
        /// </summary>
        public static readonly string V2021_09_01 = "2021-09-01";

        /// <summary>
        /// 2021-08-01.
        /// </summary>
        public static readonly string V2021_08_01 = "2021-08-01";

        /// <summary>
        /// 2021-07-01.
        /// </summary>
        public static readonly string V2021_07_01 = "2021-07-01";

        /// <summary>
        /// 2021-05-01.
        /// </summary>
        public static readonly string V2021_05_01 = "2021-05-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";

        /// <summary>
        /// 2021-02-01.
        /// </summary>
        public static readonly string V2021_02_01 = "2021-02-01";

        /// <summary>
        /// 2020-12-01.
        /// </summary>
        public static readonly string V2020_12_01 = "2020-12-01";

        /// <summary>
        /// 2020-11-01.
        /// </summary>
        public static readonly string V2020_11_01 = "2020-11-01";

        /// <summary>
        /// 2020-09-01.
        /// </summary>
        public static readonly string V2020_09_01 = "2020-09-01";

        /// <summary>
        /// 2020-07-01.
        /// </summary>
        public static readonly string V2020_07_01 = "2020-07-01";

        /// <summary>
        /// 2020-06-01.
        /// </summary>
        public static readonly string V2020_06_01 = "2020-06-01";

        /// <summary>
        /// 2020-04-01.
        /// </summary>
        public static readonly string V2020_04_01 = "2020-04-01";

        /// <summary>
        /// 2020-03-01.
        /// </summary>
        public static readonly string V2020_03_01 = "2020-03-01";

        /// <summary>
        /// 2020-02-01.
        /// </summary>
        public static readonly string V2020_02_01 = "2020-02-01";

        /// <summary>
        /// 2020-01-01.
        /// </summary>
        public static readonly string V2020_01_01 = "2020-01-01";

        /// <summary>
        /// 2019-11-01.
        /// </summary>
        public static readonly string V2019_11_01 = "2019-11-01";

        /// <summary>
        /// 2019-10-01.
        /// </summary>
        public static readonly string V2019_10_01 = "2019-10-01";

        /// <summary>
        /// 2019-08-01.
        /// </summary>
        public static readonly string V2019_08_01 = "2019-08-01";

        /// <summary>
        /// 2019-06-01.
        /// </summary>
        public static readonly string V2019_06_01 = "2019-06-01";

        /// <summary>
        /// 2019-04-01.
        /// </summary>
        public static readonly string V2019_04_01 = "2019-04-01";

        /// <summary>
        /// 2019-02-01.
        /// </summary>
        public static readonly string V2019_02_01 = "2019-02-01";

        /// <summary>
        /// 2018-03-31.
        /// </summary>
        public static readonly string V2018_03_31 = "2018-03-31";

        /// <summary>
        /// 2017-08-31.
        /// </summary>
        public static readonly string V2017_08_31 = "2017-08-31";
    }

    /// <summary>
    /// Creates a reference to an existing ContainerServiceAgentPool.
    /// </summary>
    /// <param name="resourceName">Name of the ContainerServiceAgentPool.</param>
    /// <param name="resourceVersion">Version of the ContainerServiceAgentPool.</param>
    /// <returns>The existing ContainerServiceAgentPool resource.</returns>
    public static ContainerServiceAgentPool FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this ContainerServiceAgentPool resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 12, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.Numbers);
}
