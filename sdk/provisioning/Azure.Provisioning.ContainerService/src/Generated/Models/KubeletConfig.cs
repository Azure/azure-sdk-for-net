// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.ContainerService;

/// <summary>
/// See [AKS custom node
/// configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration)
/// for more details.
/// </summary>
public partial class KubeletConfig : ProvisioningConstruct
{
    /// <summary>
    /// The default is &apos;none&apos;. See [Kubernetes CPU management
    /// policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies)
    /// for more information. Allowed values are &apos;none&apos; and
    /// &apos;static&apos;.
    /// </summary>
    public BicepValue<string> CpuManagerPolicy { get => _cpuManagerPolicy; set => _cpuManagerPolicy.Assign(value); }
    private readonly BicepValue<string> _cpuManagerPolicy;

    /// <summary>
    /// The default is true.
    /// </summary>
    public BicepValue<bool> IsCpuCfsQuotaEnabled { get => _isCpuCfsQuotaEnabled; set => _isCpuCfsQuotaEnabled.Assign(value); }
    private readonly BicepValue<bool> _isCpuCfsQuotaEnabled;

    /// <summary>
    /// The default is &apos;100ms.&apos; Valid values are a sequence of
    /// decimal numbers with an optional fraction and a unit suffix. For
    /// example: &apos;300ms&apos;, &apos;2h45m&apos;. Supported units are
    /// &apos;ns&apos;, &apos;us&apos;, &apos;ms&apos;, &apos;s&apos;,
    /// &apos;m&apos;, and &apos;h&apos;.
    /// </summary>
    public BicepValue<string> CpuCfsQuotaPeriod { get => _cpuCfsQuotaPeriod; set => _cpuCfsQuotaPeriod.Assign(value); }
    private readonly BicepValue<string> _cpuCfsQuotaPeriod;

    /// <summary>
    /// To disable image garbage collection, set to 100. The default is 85%.
    /// </summary>
    public BicepValue<int> ImageGcHighThreshold { get => _imageGcHighThreshold; set => _imageGcHighThreshold.Assign(value); }
    private readonly BicepValue<int> _imageGcHighThreshold;

    /// <summary>
    /// This cannot be set higher than imageGcHighThreshold. The default is 80%.
    /// </summary>
    public BicepValue<int> ImageGcLowThreshold { get => _imageGcLowThreshold; set => _imageGcLowThreshold.Assign(value); }
    private readonly BicepValue<int> _imageGcLowThreshold;

    /// <summary>
    /// For more information see [Kubernetes Topology
    /// Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager).
    /// The default is &apos;none&apos;. Allowed values are &apos;none&apos;,
    /// &apos;best-effort&apos;, &apos;restricted&apos;, and
    /// &apos;single-numa-node&apos;.
    /// </summary>
    public BicepValue<string> TopologyManagerPolicy { get => _topologyManagerPolicy; set => _topologyManagerPolicy.Assign(value); }
    private readonly BicepValue<string> _topologyManagerPolicy;

    /// <summary>
    /// Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in
    /// `*`).
    /// </summary>
    public BicepList<string> AllowedUnsafeSysctls { get => _allowedUnsafeSysctls; set => _allowedUnsafeSysctls.Assign(value); }
    private readonly BicepList<string> _allowedUnsafeSysctls;

    /// <summary>
    /// If set to true it will make the Kubelet fail to start if swap is
    /// enabled on the node.
    /// </summary>
    public BicepValue<bool> FailStartWithSwapOn { get => _failStartWithSwapOn; set => _failStartWithSwapOn.Assign(value); }
    private readonly BicepValue<bool> _failStartWithSwapOn;

    /// <summary>
    /// The maximum size (e.g. 10Mi) of container log file before it is rotated.
    /// </summary>
    public BicepValue<int> ContainerLogMaxSizeInMB { get => _containerLogMaxSizeInMB; set => _containerLogMaxSizeInMB.Assign(value); }
    private readonly BicepValue<int> _containerLogMaxSizeInMB;

    /// <summary>
    /// The maximum number of container log files that can be present for a
    /// container. The number must be â‰¥ 2.
    /// </summary>
    public BicepValue<int> ContainerLogMaxFiles { get => _containerLogMaxFiles; set => _containerLogMaxFiles.Assign(value); }
    private readonly BicepValue<int> _containerLogMaxFiles;

    /// <summary>
    /// The maximum number of processes per pod.
    /// </summary>
    public BicepValue<int> PodMaxPids { get => _podMaxPids; set => _podMaxPids.Assign(value); }
    private readonly BicepValue<int> _podMaxPids;

    /// <summary>
    /// Creates a new KubeletConfig.
    /// </summary>
    public KubeletConfig()
    {
        _cpuManagerPolicy = BicepValue<string>.DefineProperty(this, "CpuManagerPolicy", ["cpuManagerPolicy"]);
        _isCpuCfsQuotaEnabled = BicepValue<bool>.DefineProperty(this, "IsCpuCfsQuotaEnabled", ["cpuCfsQuota"]);
        _cpuCfsQuotaPeriod = BicepValue<string>.DefineProperty(this, "CpuCfsQuotaPeriod", ["cpuCfsQuotaPeriod"]);
        _imageGcHighThreshold = BicepValue<int>.DefineProperty(this, "ImageGcHighThreshold", ["imageGcHighThreshold"]);
        _imageGcLowThreshold = BicepValue<int>.DefineProperty(this, "ImageGcLowThreshold", ["imageGcLowThreshold"]);
        _topologyManagerPolicy = BicepValue<string>.DefineProperty(this, "TopologyManagerPolicy", ["topologyManagerPolicy"]);
        _allowedUnsafeSysctls = BicepList<string>.DefineProperty(this, "AllowedUnsafeSysctls", ["allowedUnsafeSysctls"]);
        _failStartWithSwapOn = BicepValue<bool>.DefineProperty(this, "FailStartWithSwapOn", ["failSwapOn"]);
        _containerLogMaxSizeInMB = BicepValue<int>.DefineProperty(this, "ContainerLogMaxSizeInMB", ["containerLogMaxSizeMB"]);
        _containerLogMaxFiles = BicepValue<int>.DefineProperty(this, "ContainerLogMaxFiles", ["containerLogMaxFiles"]);
        _podMaxPids = BicepValue<int>.DefineProperty(this, "PodMaxPids", ["podMaxPids"]);
    }
}
