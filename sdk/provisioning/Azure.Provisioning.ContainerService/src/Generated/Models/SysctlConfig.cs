// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.ContainerService;

/// <summary>
/// Sysctl settings for Linux agent nodes.
/// </summary>
public partial class SysctlConfig : ProvisioningConstruct
{
    /// <summary>
    /// Sysctl setting net.core.somaxconn.
    /// </summary>
    public BicepValue<int> NetCoreSomaxconn { get => _netCoreSomaxconn; set => _netCoreSomaxconn.Assign(value); }
    private readonly BicepValue<int> _netCoreSomaxconn;

    /// <summary>
    /// Sysctl setting net.core.netdev_max_backlog.
    /// </summary>
    public BicepValue<int> NetCoreNetdevMaxBacklog { get => _netCoreNetdevMaxBacklog; set => _netCoreNetdevMaxBacklog.Assign(value); }
    private readonly BicepValue<int> _netCoreNetdevMaxBacklog;

    /// <summary>
    /// Sysctl setting net.core.rmem_default.
    /// </summary>
    public BicepValue<int> NetCoreRmemDefault { get => _netCoreRmemDefault; set => _netCoreRmemDefault.Assign(value); }
    private readonly BicepValue<int> _netCoreRmemDefault;

    /// <summary>
    /// Sysctl setting net.core.rmem_max.
    /// </summary>
    public BicepValue<int> NetCoreRmemMax { get => _netCoreRmemMax; set => _netCoreRmemMax.Assign(value); }
    private readonly BicepValue<int> _netCoreRmemMax;

    /// <summary>
    /// Sysctl setting net.core.wmem_default.
    /// </summary>
    public BicepValue<int> NetCoreWmemDefault { get => _netCoreWmemDefault; set => _netCoreWmemDefault.Assign(value); }
    private readonly BicepValue<int> _netCoreWmemDefault;

    /// <summary>
    /// Sysctl setting net.core.wmem_max.
    /// </summary>
    public BicepValue<int> NetCoreWmemMax { get => _netCoreWmemMax; set => _netCoreWmemMax.Assign(value); }
    private readonly BicepValue<int> _netCoreWmemMax;

    /// <summary>
    /// Sysctl setting net.core.optmem_max.
    /// </summary>
    public BicepValue<int> NetCoreOptmemMax { get => _netCoreOptmemMax; set => _netCoreOptmemMax.Assign(value); }
    private readonly BicepValue<int> _netCoreOptmemMax;

    /// <summary>
    /// Sysctl setting net.ipv4.tcp_max_syn_backlog.
    /// </summary>
    public BicepValue<int> NetIPv4TcpMaxSynBacklog { get => _netIPv4TcpMaxSynBacklog; set => _netIPv4TcpMaxSynBacklog.Assign(value); }
    private readonly BicepValue<int> _netIPv4TcpMaxSynBacklog;

    /// <summary>
    /// Sysctl setting net.ipv4.tcp_max_tw_buckets.
    /// </summary>
    public BicepValue<int> NetIPv4TcpMaxTwBuckets { get => _netIPv4TcpMaxTwBuckets; set => _netIPv4TcpMaxTwBuckets.Assign(value); }
    private readonly BicepValue<int> _netIPv4TcpMaxTwBuckets;

    /// <summary>
    /// Sysctl setting net.ipv4.tcp_fin_timeout.
    /// </summary>
    public BicepValue<int> NetIPv4TcpFinTimeout { get => _netIPv4TcpFinTimeout; set => _netIPv4TcpFinTimeout.Assign(value); }
    private readonly BicepValue<int> _netIPv4TcpFinTimeout;

    /// <summary>
    /// Sysctl setting net.ipv4.tcp_keepalive_time.
    /// </summary>
    public BicepValue<int> NetIPv4TcpKeepaliveTime { get => _netIPv4TcpKeepaliveTime; set => _netIPv4TcpKeepaliveTime.Assign(value); }
    private readonly BicepValue<int> _netIPv4TcpKeepaliveTime;

    /// <summary>
    /// Sysctl setting net.ipv4.tcp_keepalive_probes.
    /// </summary>
    public BicepValue<int> NetIPv4TcpKeepaliveProbes { get => _netIPv4TcpKeepaliveProbes; set => _netIPv4TcpKeepaliveProbes.Assign(value); }
    private readonly BicepValue<int> _netIPv4TcpKeepaliveProbes;

    /// <summary>
    /// Sysctl setting net.ipv4.tcp_keepalive_intvl.
    /// </summary>
    public BicepValue<int> NetIPv4TcpKeepaliveIntvl { get => _netIPv4TcpKeepaliveIntvl; set => _netIPv4TcpKeepaliveIntvl.Assign(value); }
    private readonly BicepValue<int> _netIPv4TcpKeepaliveIntvl;

    /// <summary>
    /// Sysctl setting net.ipv4.tcp_tw_reuse.
    /// </summary>
    public BicepValue<bool> NetIPv4TcpTwReuse { get => _netIPv4TcpTwReuse; set => _netIPv4TcpTwReuse.Assign(value); }
    private readonly BicepValue<bool> _netIPv4TcpTwReuse;

    /// <summary>
    /// Sysctl setting net.ipv4.ip_local_port_range.
    /// </summary>
    public BicepValue<string> NetIPv4IPLocalPortRange { get => _netIPv4IPLocalPortRange; set => _netIPv4IPLocalPortRange.Assign(value); }
    private readonly BicepValue<string> _netIPv4IPLocalPortRange;

    /// <summary>
    /// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
    /// </summary>
    public BicepValue<int> NetIPv4NeighDefaultGcThresh1 { get => _netIPv4NeighDefaultGcThresh1; set => _netIPv4NeighDefaultGcThresh1.Assign(value); }
    private readonly BicepValue<int> _netIPv4NeighDefaultGcThresh1;

    /// <summary>
    /// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
    /// </summary>
    public BicepValue<int> NetIPv4NeighDefaultGcThresh2 { get => _netIPv4NeighDefaultGcThresh2; set => _netIPv4NeighDefaultGcThresh2.Assign(value); }
    private readonly BicepValue<int> _netIPv4NeighDefaultGcThresh2;

    /// <summary>
    /// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
    /// </summary>
    public BicepValue<int> NetIPv4NeighDefaultGcThresh3 { get => _netIPv4NeighDefaultGcThresh3; set => _netIPv4NeighDefaultGcThresh3.Assign(value); }
    private readonly BicepValue<int> _netIPv4NeighDefaultGcThresh3;

    /// <summary>
    /// Sysctl setting net.netfilter.nf_conntrack_max.
    /// </summary>
    public BicepValue<int> NetNetfilterNfConntrackMax { get => _netNetfilterNfConntrackMax; set => _netNetfilterNfConntrackMax.Assign(value); }
    private readonly BicepValue<int> _netNetfilterNfConntrackMax;

    /// <summary>
    /// Sysctl setting net.netfilter.nf_conntrack_buckets.
    /// </summary>
    public BicepValue<int> NetNetfilterNfConntrackBuckets { get => _netNetfilterNfConntrackBuckets; set => _netNetfilterNfConntrackBuckets.Assign(value); }
    private readonly BicepValue<int> _netNetfilterNfConntrackBuckets;

    /// <summary>
    /// Sysctl setting fs.inotify.max_user_watches.
    /// </summary>
    public BicepValue<int> FsInotifyMaxUserWatches { get => _fsInotifyMaxUserWatches; set => _fsInotifyMaxUserWatches.Assign(value); }
    private readonly BicepValue<int> _fsInotifyMaxUserWatches;

    /// <summary>
    /// Sysctl setting fs.file-max.
    /// </summary>
    public BicepValue<int> FsFileMax { get => _fsFileMax; set => _fsFileMax.Assign(value); }
    private readonly BicepValue<int> _fsFileMax;

    /// <summary>
    /// Sysctl setting fs.aio-max-nr.
    /// </summary>
    public BicepValue<int> FsAioMaxNr { get => _fsAioMaxNr; set => _fsAioMaxNr.Assign(value); }
    private readonly BicepValue<int> _fsAioMaxNr;

    /// <summary>
    /// Sysctl setting fs.nr_open.
    /// </summary>
    public BicepValue<int> FsNrOpen { get => _fsNrOpen; set => _fsNrOpen.Assign(value); }
    private readonly BicepValue<int> _fsNrOpen;

    /// <summary>
    /// Sysctl setting kernel.threads-max.
    /// </summary>
    public BicepValue<int> KernelThreadsMax { get => _kernelThreadsMax; set => _kernelThreadsMax.Assign(value); }
    private readonly BicepValue<int> _kernelThreadsMax;

    /// <summary>
    /// Sysctl setting vm.max_map_count.
    /// </summary>
    public BicepValue<int> VmMaxMapCount { get => _vmMaxMapCount; set => _vmMaxMapCount.Assign(value); }
    private readonly BicepValue<int> _vmMaxMapCount;

    /// <summary>
    /// Sysctl setting vm.swappiness.
    /// </summary>
    public BicepValue<int> VmSwappiness { get => _vmSwappiness; set => _vmSwappiness.Assign(value); }
    private readonly BicepValue<int> _vmSwappiness;

    /// <summary>
    /// Sysctl setting vm.vfs_cache_pressure.
    /// </summary>
    public BicepValue<int> VmVfsCachePressure { get => _vmVfsCachePressure; set => _vmVfsCachePressure.Assign(value); }
    private readonly BicepValue<int> _vmVfsCachePressure;

    /// <summary>
    /// Creates a new SysctlConfig.
    /// </summary>
    public SysctlConfig()
    {
        _netCoreSomaxconn = BicepValue<int>.DefineProperty(this, "NetCoreSomaxconn", ["netCoreSomaxconn"]);
        _netCoreNetdevMaxBacklog = BicepValue<int>.DefineProperty(this, "NetCoreNetdevMaxBacklog", ["netCoreNetdevMaxBacklog"]);
        _netCoreRmemDefault = BicepValue<int>.DefineProperty(this, "NetCoreRmemDefault", ["netCoreRmemDefault"]);
        _netCoreRmemMax = BicepValue<int>.DefineProperty(this, "NetCoreRmemMax", ["netCoreRmemMax"]);
        _netCoreWmemDefault = BicepValue<int>.DefineProperty(this, "NetCoreWmemDefault", ["netCoreWmemDefault"]);
        _netCoreWmemMax = BicepValue<int>.DefineProperty(this, "NetCoreWmemMax", ["netCoreWmemMax"]);
        _netCoreOptmemMax = BicepValue<int>.DefineProperty(this, "NetCoreOptmemMax", ["netCoreOptmemMax"]);
        _netIPv4TcpMaxSynBacklog = BicepValue<int>.DefineProperty(this, "NetIPv4TcpMaxSynBacklog", ["netIpv4TcpMaxSynBacklog"]);
        _netIPv4TcpMaxTwBuckets = BicepValue<int>.DefineProperty(this, "NetIPv4TcpMaxTwBuckets", ["netIpv4TcpMaxTwBuckets"]);
        _netIPv4TcpFinTimeout = BicepValue<int>.DefineProperty(this, "NetIPv4TcpFinTimeout", ["netIpv4TcpFinTimeout"]);
        _netIPv4TcpKeepaliveTime = BicepValue<int>.DefineProperty(this, "NetIPv4TcpKeepaliveTime", ["netIpv4TcpKeepaliveTime"]);
        _netIPv4TcpKeepaliveProbes = BicepValue<int>.DefineProperty(this, "NetIPv4TcpKeepaliveProbes", ["netIpv4TcpKeepaliveProbes"]);
        _netIPv4TcpKeepaliveIntvl = BicepValue<int>.DefineProperty(this, "NetIPv4TcpKeepaliveIntvl", ["netIpv4TcpkeepaliveIntvl"]);
        _netIPv4TcpTwReuse = BicepValue<bool>.DefineProperty(this, "NetIPv4TcpTwReuse", ["netIpv4TcpTwReuse"]);
        _netIPv4IPLocalPortRange = BicepValue<string>.DefineProperty(this, "NetIPv4IPLocalPortRange", ["netIpv4IpLocalPortRange"]);
        _netIPv4NeighDefaultGcThresh1 = BicepValue<int>.DefineProperty(this, "NetIPv4NeighDefaultGcThresh1", ["netIpv4NeighDefaultGcThresh1"]);
        _netIPv4NeighDefaultGcThresh2 = BicepValue<int>.DefineProperty(this, "NetIPv4NeighDefaultGcThresh2", ["netIpv4NeighDefaultGcThresh2"]);
        _netIPv4NeighDefaultGcThresh3 = BicepValue<int>.DefineProperty(this, "NetIPv4NeighDefaultGcThresh3", ["netIpv4NeighDefaultGcThresh3"]);
        _netNetfilterNfConntrackMax = BicepValue<int>.DefineProperty(this, "NetNetfilterNfConntrackMax", ["netNetfilterNfConntrackMax"]);
        _netNetfilterNfConntrackBuckets = BicepValue<int>.DefineProperty(this, "NetNetfilterNfConntrackBuckets", ["netNetfilterNfConntrackBuckets"]);
        _fsInotifyMaxUserWatches = BicepValue<int>.DefineProperty(this, "FsInotifyMaxUserWatches", ["fsInotifyMaxUserWatches"]);
        _fsFileMax = BicepValue<int>.DefineProperty(this, "FsFileMax", ["fsFileMax"]);
        _fsAioMaxNr = BicepValue<int>.DefineProperty(this, "FsAioMaxNr", ["fsAioMaxNr"]);
        _fsNrOpen = BicepValue<int>.DefineProperty(this, "FsNrOpen", ["fsNrOpen"]);
        _kernelThreadsMax = BicepValue<int>.DefineProperty(this, "KernelThreadsMax", ["kernelThreadsMax"]);
        _vmMaxMapCount = BicepValue<int>.DefineProperty(this, "VmMaxMapCount", ["vmMaxMapCount"]);
        _vmSwappiness = BicepValue<int>.DefineProperty(this, "VmSwappiness", ["vmSwappiness"]);
        _vmVfsCachePressure = BicepValue<int>.DefineProperty(this, "VmVfsCachePressure", ["vmVfsCachePressure"]);
    }
}
