// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.ContainerService;

/// <summary>
/// Profile of network configuration.             Serialized Name:
/// ContainerServiceNetworkProfile
/// </summary>
public partial class ContainerServiceNetworkProfile : ProvisioningConstruct
{
    /// <summary>
    /// Network plugin used for building the Kubernetes network.
    /// </summary>
    public BicepValue<ContainerServiceNetworkPlugin> NetworkPlugin { get => _networkPlugin; set => _networkPlugin.Assign(value); }
    private readonly BicepValue<ContainerServiceNetworkPlugin> _networkPlugin;

    /// <summary>
    /// The mode the network plugin should use.
    /// </summary>
    public BicepValue<ContainerServiceNetworkPluginMode> NetworkPluginMode { get => _networkPluginMode; set => _networkPluginMode.Assign(value); }
    private readonly BicepValue<ContainerServiceNetworkPluginMode> _networkPluginMode;

    /// <summary>
    /// Network policy used for building the Kubernetes network.
    /// </summary>
    public BicepValue<ContainerServiceNetworkPolicy> NetworkPolicy { get => _networkPolicy; set => _networkPolicy.Assign(value); }
    private readonly BicepValue<ContainerServiceNetworkPolicy> _networkPolicy;

    /// <summary>
    /// This cannot be specified if networkPlugin is anything other than
    /// &apos;azure&apos;.
    /// </summary>
    public BicepValue<ContainerServiceNetworkMode> NetworkMode { get => _networkMode; set => _networkMode.Assign(value); }
    private readonly BicepValue<ContainerServiceNetworkMode> _networkMode;

    /// <summary>
    /// Network dataplane used in the Kubernetes cluster.
    /// </summary>
    public BicepValue<NetworkDataplane> NetworkDataplane { get => _networkDataplane; set => _networkDataplane.Assign(value); }
    private readonly BicepValue<NetworkDataplane> _networkDataplane;

    /// <summary>
    /// A CIDR notation IP range from which to assign pod IPs when kubenet is
    /// used.
    /// </summary>
    public BicepValue<string> PodCidr { get => _podCidr; set => _podCidr.Assign(value); }
    private readonly BicepValue<string> _podCidr;

    /// <summary>
    /// A CIDR notation IP range from which to assign service cluster IPs. It
    /// must not overlap with any Subnet IP ranges.
    /// </summary>
    public BicepValue<string> ServiceCidr { get => _serviceCidr; set => _serviceCidr.Assign(value); }
    private readonly BicepValue<string> _serviceCidr;

    /// <summary>
    /// An IP address assigned to the Kubernetes DNS service. It must be within
    /// the Kubernetes service address range specified in serviceCidr.
    /// </summary>
    public BicepValue<string> DnsServiceIP { get => _dnsServiceIP; set => _dnsServiceIP.Assign(value); }
    private readonly BicepValue<string> _dnsServiceIP;

    /// <summary>
    /// This can only be set at cluster creation time and cannot be changed
    /// later. For more information see [egress outbound
    /// type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
    /// </summary>
    public BicepValue<ContainerServiceOutboundType> OutboundType { get => _outboundType; set => _outboundType.Assign(value); }
    private readonly BicepValue<ContainerServiceOutboundType> _outboundType;

    /// <summary>
    /// The default is &apos;standard&apos;. See [Azure Load Balancer
    /// SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more
    /// information about the differences between load balancer SKUs.
    /// </summary>
    public BicepValue<ContainerServiceLoadBalancerSku> LoadBalancerSku { get => _loadBalancerSku; set => _loadBalancerSku.Assign(value); }
    private readonly BicepValue<ContainerServiceLoadBalancerSku> _loadBalancerSku;

    /// <summary>
    /// Profile of the cluster load balancer.
    /// </summary>
    public BicepValue<ManagedClusterLoadBalancerProfile> LoadBalancerProfile { get => _loadBalancerProfile; set => _loadBalancerProfile.Assign(value); }
    private readonly BicepValue<ManagedClusterLoadBalancerProfile> _loadBalancerProfile;

    /// <summary>
    /// Profile of the cluster NAT gateway.
    /// </summary>
    public BicepValue<ManagedClusterNatGatewayProfile> NatGatewayProfile { get => _natGatewayProfile; set => _natGatewayProfile.Assign(value); }
    private readonly BicepValue<ManagedClusterNatGatewayProfile> _natGatewayProfile;

    /// <summary>
    /// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one
    /// for each IP family (IPv4/IPv6), is expected for dual-stack networking.
    /// </summary>
    public BicepList<string> PodCidrs { get => _podCidrs; set => _podCidrs.Assign(value); }
    private readonly BicepList<string> _podCidrs;

    /// <summary>
    /// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one
    /// for each IP family (IPv4/IPv6), is expected for dual-stack networking.
    /// They must not overlap with any Subnet IP ranges.
    /// </summary>
    public BicepList<string> ServiceCidrs { get => _serviceCidrs; set => _serviceCidrs.Assign(value); }
    private readonly BicepList<string> _serviceCidrs;

    /// <summary>
    /// IP families are used to determine single-stack or dual-stack clusters.
    /// For single-stack, the expected value is IPv4. For dual-stack, the
    /// expected values are IPv4 and IPv6.
    /// </summary>
    public BicepList<IPFamily> IPFamilies { get => _iPFamilies; set => _iPFamilies.Assign(value); }
    private readonly BicepList<IPFamily> _iPFamilies;

    /// <summary>
    /// Creates a new ContainerServiceNetworkProfile.
    /// </summary>
    public ContainerServiceNetworkProfile()
    {
        _networkPlugin = BicepValue<ContainerServiceNetworkPlugin>.DefineProperty(this, "NetworkPlugin", ["networkPlugin"]);
        _networkPluginMode = BicepValue<ContainerServiceNetworkPluginMode>.DefineProperty(this, "NetworkPluginMode", ["networkPluginMode"]);
        _networkPolicy = BicepValue<ContainerServiceNetworkPolicy>.DefineProperty(this, "NetworkPolicy", ["networkPolicy"]);
        _networkMode = BicepValue<ContainerServiceNetworkMode>.DefineProperty(this, "NetworkMode", ["networkMode"]);
        _networkDataplane = BicepValue<NetworkDataplane>.DefineProperty(this, "NetworkDataplane", ["networkDataplane"]);
        _podCidr = BicepValue<string>.DefineProperty(this, "PodCidr", ["podCidr"]);
        _serviceCidr = BicepValue<string>.DefineProperty(this, "ServiceCidr", ["serviceCidr"]);
        _dnsServiceIP = BicepValue<string>.DefineProperty(this, "DnsServiceIP", ["dnsServiceIP"]);
        _outboundType = BicepValue<ContainerServiceOutboundType>.DefineProperty(this, "OutboundType", ["outboundType"]);
        _loadBalancerSku = BicepValue<ContainerServiceLoadBalancerSku>.DefineProperty(this, "LoadBalancerSku", ["loadBalancerSku"]);
        _loadBalancerProfile = BicepValue<ManagedClusterLoadBalancerProfile>.DefineProperty(this, "LoadBalancerProfile", ["loadBalancerProfile"]);
        _natGatewayProfile = BicepValue<ManagedClusterNatGatewayProfile>.DefineProperty(this, "NatGatewayProfile", ["natGatewayProfile"]);
        _podCidrs = BicepList<string>.DefineProperty(this, "PodCidrs", ["podCidrs"]);
        _serviceCidrs = BicepList<string>.DefineProperty(this, "ServiceCidrs", ["serviceCidrs"]);
        _iPFamilies = BicepList<IPFamily>.DefineProperty(this, "IPFamilies", ["ipFamilies"]);
    }
}
