// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.ContainerService;

/// <summary>
/// Parameters to be applied to the cluster-autoscaler when enabled.
/// </summary>
public partial class ManagedClusterAutoScalerProfile : ProvisioningConstruct
{
    /// <summary>
    /// Valid values are &apos;true&apos; and &apos;false&apos;.
    /// </summary>
    public BicepValue<string> BalanceSimilarNodeGroups { get => _balanceSimilarNodeGroups; set => _balanceSimilarNodeGroups.Assign(value); }
    private readonly BicepValue<string> _balanceSimilarNodeGroups;

    /// <summary>
    /// If not specified, the default is &apos;random&apos;. See
    /// [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders)
    /// for more information.
    /// </summary>
    public BicepValue<AutoScaleExpander> Expander { get => _expander; set => _expander.Assign(value); }
    private readonly BicepValue<AutoScaleExpander> _expander;

    /// <summary>
    /// The default is 10.
    /// </summary>
    public BicepValue<string> MaxEmptyBulkDelete { get => _maxEmptyBulkDelete; set => _maxEmptyBulkDelete.Assign(value); }
    private readonly BicepValue<string> _maxEmptyBulkDelete;

    /// <summary>
    /// The default is 600.
    /// </summary>
    public BicepValue<string> MaxGracefulTerminationSec { get => _maxGracefulTerminationSec; set => _maxGracefulTerminationSec.Assign(value); }
    private readonly BicepValue<string> _maxGracefulTerminationSec;

    /// <summary>
    /// The default is &apos;15m&apos;. Values must be an integer followed by
    /// an &apos;m&apos;. No unit of time other than minutes (m) is supported.
    /// </summary>
    public BicepValue<string> MaxNodeProvisionTime { get => _maxNodeProvisionTime; set => _maxNodeProvisionTime.Assign(value); }
    private readonly BicepValue<string> _maxNodeProvisionTime;

    /// <summary>
    /// The default is 45. The maximum is 100 and the minimum is 0.
    /// </summary>
    public BicepValue<string> MaxTotalUnreadyPercentage { get => _maxTotalUnreadyPercentage; set => _maxTotalUnreadyPercentage.Assign(value); }
    private readonly BicepValue<string> _maxTotalUnreadyPercentage;

    /// <summary>
    /// For scenarios like burst/batch scale where you don&apos;t want CA to
    /// act before the kubernetes scheduler could schedule all the pods, you
    /// can tell CA to ignore unscheduled pods before they&apos;re a certain
    /// age. The default is &apos;0s&apos;. Values must be an integer followed
    /// by a unit (&apos;s&apos; for seconds, &apos;m&apos; for minutes,
    /// &apos;h&apos; for hours, etc).
    /// </summary>
    public BicepValue<string> NewPodScaleUpDelay { get => _newPodScaleUpDelay; set => _newPodScaleUpDelay.Assign(value); }
    private readonly BicepValue<string> _newPodScaleUpDelay;

    /// <summary>
    /// This must be an integer. The default is 3.
    /// </summary>
    public BicepValue<string> OkTotalUnreadyCount { get => _okTotalUnreadyCount; set => _okTotalUnreadyCount.Assign(value); }
    private readonly BicepValue<string> _okTotalUnreadyCount;

    /// <summary>
    /// The default is &apos;10&apos;. Values must be an integer number of
    /// seconds.
    /// </summary>
    public BicepValue<string> ScanIntervalInSeconds { get => _scanIntervalInSeconds; set => _scanIntervalInSeconds.Assign(value); }
    private readonly BicepValue<string> _scanIntervalInSeconds;

    /// <summary>
    /// The default is &apos;10m&apos;. Values must be an integer followed by
    /// an &apos;m&apos;. No unit of time other than minutes (m) is supported.
    /// </summary>
    public BicepValue<string> ScaleDownDelayAfterAdd { get => _scaleDownDelayAfterAdd; set => _scaleDownDelayAfterAdd.Assign(value); }
    private readonly BicepValue<string> _scaleDownDelayAfterAdd;

    /// <summary>
    /// The default is the scan-interval. Values must be an integer followed by
    /// an &apos;m&apos;. No unit of time other than minutes (m) is supported.
    /// </summary>
    public BicepValue<string> ScaleDownDelayAfterDelete { get => _scaleDownDelayAfterDelete; set => _scaleDownDelayAfterDelete.Assign(value); }
    private readonly BicepValue<string> _scaleDownDelayAfterDelete;

    /// <summary>
    /// The default is &apos;3m&apos;. Values must be an integer followed by an
    /// &apos;m&apos;. No unit of time other than minutes (m) is supported.
    /// </summary>
    public BicepValue<string> ScaleDownDelayAfterFailure { get => _scaleDownDelayAfterFailure; set => _scaleDownDelayAfterFailure.Assign(value); }
    private readonly BicepValue<string> _scaleDownDelayAfterFailure;

    /// <summary>
    /// The default is &apos;10m&apos;. Values must be an integer followed by
    /// an &apos;m&apos;. No unit of time other than minutes (m) is supported.
    /// </summary>
    public BicepValue<string> ScaleDownUnneededTime { get => _scaleDownUnneededTime; set => _scaleDownUnneededTime.Assign(value); }
    private readonly BicepValue<string> _scaleDownUnneededTime;

    /// <summary>
    /// The default is &apos;20m&apos;. Values must be an integer followed by
    /// an &apos;m&apos;. No unit of time other than minutes (m) is supported.
    /// </summary>
    public BicepValue<string> ScaleDownUnreadyTime { get => _scaleDownUnreadyTime; set => _scaleDownUnreadyTime.Assign(value); }
    private readonly BicepValue<string> _scaleDownUnreadyTime;

    /// <summary>
    /// The default is &apos;0.5&apos;.
    /// </summary>
    public BicepValue<string> ScaleDownUtilizationThreshold { get => _scaleDownUtilizationThreshold; set => _scaleDownUtilizationThreshold.Assign(value); }
    private readonly BicepValue<string> _scaleDownUtilizationThreshold;

    /// <summary>
    /// The default is true.
    /// </summary>
    public BicepValue<string> SkipNodesWithLocalStorage { get => _skipNodesWithLocalStorage; set => _skipNodesWithLocalStorage.Assign(value); }
    private readonly BicepValue<string> _skipNodesWithLocalStorage;

    /// <summary>
    /// The default is true.
    /// </summary>
    public BicepValue<string> SkipNodesWithSystemPods { get => _skipNodesWithSystemPods; set => _skipNodesWithSystemPods.Assign(value); }
    private readonly BicepValue<string> _skipNodesWithSystemPods;

    /// <summary>
    /// Creates a new ManagedClusterAutoScalerProfile.
    /// </summary>
    public ManagedClusterAutoScalerProfile()
    {
        _balanceSimilarNodeGroups = BicepValue<string>.DefineProperty(this, "BalanceSimilarNodeGroups", ["balance-similar-node-groups"]);
        _expander = BicepValue<AutoScaleExpander>.DefineProperty(this, "Expander", ["expander"]);
        _maxEmptyBulkDelete = BicepValue<string>.DefineProperty(this, "MaxEmptyBulkDelete", ["max-empty-bulk-delete"]);
        _maxGracefulTerminationSec = BicepValue<string>.DefineProperty(this, "MaxGracefulTerminationSec", ["max-graceful-termination-sec"]);
        _maxNodeProvisionTime = BicepValue<string>.DefineProperty(this, "MaxNodeProvisionTime", ["max-node-provision-time"]);
        _maxTotalUnreadyPercentage = BicepValue<string>.DefineProperty(this, "MaxTotalUnreadyPercentage", ["max-total-unready-percentage"]);
        _newPodScaleUpDelay = BicepValue<string>.DefineProperty(this, "NewPodScaleUpDelay", ["new-pod-scale-up-delay"]);
        _okTotalUnreadyCount = BicepValue<string>.DefineProperty(this, "OkTotalUnreadyCount", ["ok-total-unready-count"]);
        _scanIntervalInSeconds = BicepValue<string>.DefineProperty(this, "ScanIntervalInSeconds", ["scan-interval"]);
        _scaleDownDelayAfterAdd = BicepValue<string>.DefineProperty(this, "ScaleDownDelayAfterAdd", ["scale-down-delay-after-add"]);
        _scaleDownDelayAfterDelete = BicepValue<string>.DefineProperty(this, "ScaleDownDelayAfterDelete", ["scale-down-delay-after-delete"]);
        _scaleDownDelayAfterFailure = BicepValue<string>.DefineProperty(this, "ScaleDownDelayAfterFailure", ["scale-down-delay-after-failure"]);
        _scaleDownUnneededTime = BicepValue<string>.DefineProperty(this, "ScaleDownUnneededTime", ["scale-down-unneeded-time"]);
        _scaleDownUnreadyTime = BicepValue<string>.DefineProperty(this, "ScaleDownUnreadyTime", ["scale-down-unready-time"]);
        _scaleDownUtilizationThreshold = BicepValue<string>.DefineProperty(this, "ScaleDownUtilizationThreshold", ["scale-down-utilization-threshold"]);
        _skipNodesWithLocalStorage = BicepValue<string>.DefineProperty(this, "SkipNodesWithLocalStorage", ["skip-nodes-with-local-storage"]);
        _skipNodesWithSystemPods = BicepValue<string>.DefineProperty(this, "SkipNodesWithSystemPods", ["skip-nodes-with-system-pods"]);
    }
}
