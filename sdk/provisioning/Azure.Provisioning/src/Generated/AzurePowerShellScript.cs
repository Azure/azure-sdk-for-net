// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Resources;

/// <summary>
/// AzurePowerShellScript.
/// </summary>
public partial class AzurePowerShellScript : ArmDeploymentScript
{
    /// <summary>
    /// Azure PowerShell module version to be used.
    /// </summary>
    public BicepValue<string> AzPowerShellVersion 
    {
        get { Initialize(); return _azPowerShellVersion!; }
        set { Initialize(); _azPowerShellVersion!.Assign(value); }
    }
    private BicepValue<string>? _azPowerShellVersion;

    /// <summary>
    /// Interval for which the service retains the script resource after it
    /// reaches a terminal state. Resource will be deleted when this duration
    /// expires. Duration is based on ISO 8601 pattern (for example P1D means
    /// one day).
    /// </summary>
    public BicepValue<TimeSpan> RetentionInterval 
    {
        get { Initialize(); return _retentionInterval!; }
        set { Initialize(); _retentionInterval!.Assign(value); }
    }
    private BicepValue<TimeSpan>? _retentionInterval;

    /// <summary>
    /// Command line arguments to pass to the script. Arguments are separated
    /// by spaces. ex: -Name blue* -Location &apos;West US 2&apos;.
    /// </summary>
    public BicepValue<string> Arguments 
    {
        get { Initialize(); return _arguments!; }
        set { Initialize(); _arguments!.Assign(value); }
    }
    private BicepValue<string>? _arguments;

    /// <summary>
    /// The clean up preference when the script execution gets in a terminal
    /// state. Default setting is &apos;Always&apos;.
    /// </summary>
    public BicepValue<ScriptCleanupOptions> CleanupPreference 
    {
        get { Initialize(); return _cleanupPreference!; }
        set { Initialize(); _cleanupPreference!.Assign(value); }
    }
    private BicepValue<ScriptCleanupOptions>? _cleanupPreference;

    /// <summary>
    /// Container group name, if not specified then the name will get
    /// auto-generated. Not specifying a &apos;containerGroupName&apos;
    /// indicates the system to generate a unique name which might end up
    /// flagging an Azure Policy as non-compliant. Use
    /// &apos;containerGroupName&apos; when you have an Azure Policy that
    /// expects a specific naming convention or when you want to fully control
    /// the name. &apos;containerGroupName&apos; property must be between 1
    /// and 63 characters long, must contain only lowercase letters, numbers,
    /// and dashes and it cannot start or end with a dash and consecutive
    /// dashes are not allowed. To specify a &apos;containerGroupName&apos;,
    /// add the following object to properties: {
    /// &quot;containerSettings&quot;: { &quot;containerGroupName&quot;:
    /// &quot;contoso-container&quot; } }. If you do not want to specify a
    /// &apos;containerGroupName&apos; then do not add
    /// &apos;containerSettings&apos; property.
    /// </summary>
    public BicepValue<string> ContainerGroupName 
    {
        get { Initialize(); return _containerGroupName!; }
        set { Initialize(); _containerGroupName!.Assign(value); }
    }
    private BicepValue<string>? _containerGroupName;

    /// <summary>
    /// Container settings.
    /// </summary>
    public ScriptContainerConfiguration ContainerSettings 
    {
        get { Initialize(); return _containerSettings!; }
        set { Initialize(); AssignOrReplace(ref _containerSettings, value); }
    }
    private ScriptContainerConfiguration? _containerSettings;

    /// <summary>
    /// The environment variables to pass over to the script.
    /// </summary>
    public BicepList<ScriptEnvironmentVariable> EnvironmentVariables 
    {
        get { Initialize(); return _environmentVariables!; }
        set { Initialize(); _environmentVariables!.Assign(value); }
    }
    private BicepList<ScriptEnvironmentVariable>? _environmentVariables;

    /// <summary>
    /// Gets or sets how the deployment script should be forced to execute even
    /// if the script resource has not changed. Can be current time stamp or a
    /// GUID.
    /// </summary>
    public BicepValue<string> ForceUpdateTag 
    {
        get { Initialize(); return _forceUpdateTag!; }
        set { Initialize(); _forceUpdateTag!.Assign(value); }
    }
    private BicepValue<string>? _forceUpdateTag;

    /// <summary>
    /// Uri for the script. This is the entry point for the external script.
    /// </summary>
    public BicepValue<Uri> PrimaryScriptUri 
    {
        get { Initialize(); return _primaryScriptUri!; }
        set { Initialize(); _primaryScriptUri!.Assign(value); }
    }
    private BicepValue<Uri>? _primaryScriptUri;

    /// <summary>
    /// Script body.
    /// </summary>
    public BicepValue<string> ScriptContent 
    {
        get { Initialize(); return _scriptContent!; }
        set { Initialize(); _scriptContent!.Assign(value); }
    }
    private BicepValue<string>? _scriptContent;

    /// <summary>
    /// Storage Account settings.
    /// </summary>
    public ScriptStorageConfiguration StorageAccountSettings 
    {
        get { Initialize(); return _storageAccountSettings!; }
        set { Initialize(); AssignOrReplace(ref _storageAccountSettings, value); }
    }
    private ScriptStorageConfiguration? _storageAccountSettings;

    /// <summary>
    /// Supporting files for the external script.
    /// </summary>
    public BicepList<Uri> SupportingScriptUris 
    {
        get { Initialize(); return _supportingScriptUris!; }
        set { Initialize(); _supportingScriptUris!.Assign(value); }
    }
    private BicepList<Uri>? _supportingScriptUris;

    /// <summary>
    /// Maximum allowed script execution time specified in ISO 8601 format.
    /// Default value is P1D.
    /// </summary>
    public BicepValue<TimeSpan> Timeout 
    {
        get { Initialize(); return _timeout!; }
        set { Initialize(); _timeout!.Assign(value); }
    }
    private BicepValue<TimeSpan>? _timeout;

    /// <summary>
    /// List of script outputs.                          To assign an object to
    /// this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepValue<BinaryData> Outputs 
    {
        get { Initialize(); return _outputs!; }
    }
    private BicepValue<BinaryData>? _outputs;

    /// <summary>
    /// State of the script execution. This only appears in the response.
    /// </summary>
    public BicepValue<ScriptProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<ScriptProvisioningState>? _provisioningState;

    /// <summary>
    /// Contains the results of script execution.
    /// </summary>
    public ScriptStatus Status 
    {
        get { Initialize(); return _status!; }
    }
    private ScriptStatus? _status;

    /// <summary>
    /// Creates a new AzurePowerShellScript.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the AzurePowerShellScript resource.
    /// This can be used to refer to the resource in expressions, but is not
    /// the Azure name of the resource.  This value can contain letters,
    /// numbers, and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the AzurePowerShellScript.</param>
    public AzurePowerShellScript(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, resourceVersion)
    {
    }

    /// <summary>
    /// Define all the provisionable properties of AzurePowerShellScript.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        DefineProperty<string>("kind", ["kind"], defaultValue: "AzurePowerShell");
        _azPowerShellVersion = DefineProperty<string>("AzPowerShellVersion", ["properties", "azPowerShellVersion"], isRequired: true);
        _retentionInterval = DefineProperty<TimeSpan>("RetentionInterval", ["properties", "retentionInterval"], isRequired: true, format: "P");
        _arguments = DefineProperty<string>("Arguments", ["properties", "arguments"]);
        _cleanupPreference = DefineProperty<ScriptCleanupOptions>("CleanupPreference", ["properties", "cleanupPreference"]);
        _containerGroupName = DefineProperty<string>("ContainerGroupName", ["properties", "containerSettings", "containerGroupName"]);
        _containerSettings = DefineModelProperty<ScriptContainerConfiguration>("ContainerSettings", ["properties", "containerSettings"]);
        _environmentVariables = DefineListProperty<ScriptEnvironmentVariable>("EnvironmentVariables", ["properties", "environmentVariables"]);
        _forceUpdateTag = DefineProperty<string>("ForceUpdateTag", ["properties", "forceUpdateTag"]);
        _primaryScriptUri = DefineProperty<Uri>("PrimaryScriptUri", ["properties", "primaryScriptUri"]);
        _scriptContent = DefineProperty<string>("ScriptContent", ["properties", "scriptContent"]);
        _storageAccountSettings = DefineModelProperty<ScriptStorageConfiguration>("StorageAccountSettings", ["properties", "storageAccountSettings"]);
        _supportingScriptUris = DefineListProperty<Uri>("SupportingScriptUris", ["properties", "supportingScriptUris"]);
        _timeout = DefineProperty<TimeSpan>("Timeout", ["properties", "timeout"], format: "P");
        _outputs = DefineProperty<BinaryData>("Outputs", ["properties", "outputs"], isOutput: true);
        _provisioningState = DefineProperty<ScriptProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _status = DefineModelProperty<ScriptStatus>("Status", ["properties", "status"], isOutput: true);
    }
}
