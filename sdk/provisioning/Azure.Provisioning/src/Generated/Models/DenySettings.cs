// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Resources;

/// <summary>
/// Defines how resources deployed by the Deployment stack are locked.
/// </summary>
public partial class DenySettings : ProvisionableConstruct
{
    /// <summary>
    /// denySettings Mode that defines denied actions.
    /// </summary>
    public BicepValue<DenySettingsMode> Mode 
    {
        get { Initialize(); return _mode!; }
        set { Initialize(); _mode!.Assign(value); }
    }
    private BicepValue<DenySettingsMode>? _mode;

    /// <summary>
    /// List of AAD principal IDs excluded from the lock. Up to 5 principals
    /// are permitted.
    /// </summary>
    public BicepList<string> ExcludedPrincipals 
    {
        get { Initialize(); return _excludedPrincipals!; }
        set { Initialize(); _excludedPrincipals!.Assign(value); }
    }
    private BicepList<string>? _excludedPrincipals;

    /// <summary>
    /// List of role-based management operations that are excluded from the
    /// denySettings. Up to 200 actions are permitted. If the denySetting mode
    /// is set to &apos;denyWriteAndDelete&apos;, then the following actions
    /// are automatically appended to &apos;excludedActions&apos;:
    /// &apos;*\/read&apos; and
    /// &apos;Microsoft.Authorization/locks/delete&apos;. If the denySetting
    /// mode is set to &apos;denyDelete&apos;, then the following actions are
    /// automatically appended to &apos;excludedActions&apos;:
    /// &apos;Microsoft.Authorization/locks/delete&apos;. Duplicate actions
    /// will be removed.
    /// </summary>
    public BicepList<string> ExcludedActions 
    {
        get { Initialize(); return _excludedActions!; }
        set { Initialize(); _excludedActions!.Assign(value); }
    }
    private BicepList<string>? _excludedActions;

    /// <summary>
    /// DenySettings will be applied to child resource scopes of every managed
    /// resource with a deny assignment.
    /// </summary>
    public BicepValue<bool> ApplyToChildScopes 
    {
        get { Initialize(); return _applyToChildScopes!; }
        set { Initialize(); _applyToChildScopes!.Assign(value); }
    }
    private BicepValue<bool>? _applyToChildScopes;

    /// <summary>
    /// Creates a new DenySettings.
    /// </summary>
    public DenySettings()
    {
    }

    /// <summary>
    /// Define all the provisionable properties of DenySettings.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        base.DefineProvisionableProperties();
        _mode = DefineProperty<DenySettingsMode>("Mode", ["mode"]);
        _excludedPrincipals = DefineListProperty<string>("ExcludedPrincipals", ["excludedPrincipals"]);
        _excludedActions = DefineListProperty<string>("ExcludedActions", ["excludedActions"]);
        _applyToChildScopes = DefineProperty<bool>("ApplyToChildScopes", ["applyToChildScopes"]);
    }
}
