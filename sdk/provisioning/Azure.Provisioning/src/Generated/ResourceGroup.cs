// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Expressions;
using Azure.Provisioning.Primitives;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.Resources;

/// <summary>
/// ResourceGroup.
/// </summary>
public partial class ResourceGroup : Resource
{
    /// <summary>
    /// The name of the resource group to create or update. Can include
    /// alphanumeric, underscore, parentheses, hyphen, period (except at end),
    /// and Unicode characters that match the allowed characters.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The geo-location where the resource lives.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// The ID of the resource that manages this resource group.
    /// </summary>
    public BicepValue<string> ManagedBy { get => _managedBy; set => _managedBy.Assign(value); }
    private readonly BicepValue<string> _managedBy;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// Fully qualified resource ID for the resource. Ex -
    /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The provisioning state.
    /// </summary>
    public BicepValue<string> ResourceGroupProvisioningState { get => _resourceGroupProvisioningState; }
    private readonly BicepValue<string> _resourceGroupProvisioningState;

    /// <summary>
    /// Azure Resource Manager metadata containing createdBy and modifiedBy
    /// information.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new ResourceGroup.
    /// </summary>
    /// <param name="resourceName">Name of the ResourceGroup.</param>
    /// <param name="resourceVersion">Version of the ResourceGroup.</param>
    /// <param name="context">Provisioning context for this resource.</param>
    public ResourceGroup(string resourceName, string? resourceVersion = default, ProvisioningContext? context = default)
        : base(resourceName, "Microsoft.Resources/resourceGroups", resourceVersion, context)
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _managedBy = BicepValue<string>.DefineProperty(this, "ManagedBy", ["managedBy"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _resourceGroupProvisioningState = BicepValue<string>.DefineProperty(this, "ResourceGroupProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Creates a reference to an existing ResourceGroup.
    /// </summary>
    /// <param name="resourceName">Name of the ResourceGroup.</param>
    /// <param name="resourceVersion">Version of the ResourceGroup.</param>
    /// <returns>The existing ResourceGroup resource.</returns>
    public static ResourceGroup FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Creates a new ResourceGroup resource from a Bicep expression that
    /// evaluates to a ResourceGroup.
    /// </summary>
    /// <param name="expression">
    /// A Bicep expression that evaluates to a ResourceGroup resource.
    /// </param>
    /// <returns>A ResourceGroup resource.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public static ResourceGroup FromExpression(Expression expression)
    {
        ResourceGroup resource = new(expression.ToString());
        resource.OverrideWithExpression(expression);
        return resource;
    }

    /// <summary>
    /// Get the requirements for naming this ResourceGroup resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 1, maxLength: 90, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.UppercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen | ResourceNameCharacters.Underscore | ResourceNameCharacters.Period | ResourceNameCharacters.Parentheses);
}
