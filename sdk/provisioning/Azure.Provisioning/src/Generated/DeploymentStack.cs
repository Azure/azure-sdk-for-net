// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Resources;

/// <summary>
/// DeploymentStack.
/// </summary>
public partial class DeploymentStack : ProvisionableResource
{
    /// <summary>
    /// Name of the deployment stack.
    /// </summary>
    public BicepValue<string> Name 
    {
        get { Initialize(); return _name!; }
        set { Initialize(); _name!.Assign(value); }
    }
    private BicepValue<string>? _name;

    /// <summary>
    /// Defines the behavior of resources that are no longer managed after the
    /// Deployment stack is updated or deleted.
    /// </summary>
    public ActionOnUnmanage ActionOnUnmanage 
    {
        get { Initialize(); return _actionOnUnmanage!; }
        set { Initialize(); AssignOrReplace(ref _actionOnUnmanage, value); }
    }
    private ActionOnUnmanage? _actionOnUnmanage;

    /// <summary>
    /// Flag to bypass service errors that indicate the stack resource list is
    /// not correctly synchronized.
    /// </summary>
    public BicepValue<bool> BypassStackOutOfSyncError 
    {
        get { Initialize(); return _bypassStackOutOfSyncError!; }
        set { Initialize(); _bypassStackOutOfSyncError!.Assign(value); }
    }
    private BicepValue<bool>? _bypassStackOutOfSyncError;

    /// <summary>
    /// Specifies the type of information to log for debugging. The permitted
    /// values are none, requestContent, responseContent, or both
    /// requestContent and responseContent separated by a comma. The default
    /// is none. When setting this value, carefully consider the type of
    /// information that is being passed in during deployment. By logging
    /// information about the request or response, sensitive data that is
    /// retrieved through the deployment operations could potentially be
    /// exposed.
    /// </summary>
    public BicepValue<string> DebugSettingDetailLevel 
    {
        get { Initialize(); return _debugSettingDetailLevel!; }
        set { Initialize(); _debugSettingDetailLevel!.Assign(value); }
    }
    private BicepValue<string>? _debugSettingDetailLevel;

    /// <summary>
    /// Defines how resources deployed by the stack are locked.
    /// </summary>
    public DenySettings DenySettings 
    {
        get { Initialize(); return _denySettings!; }
        set { Initialize(); AssignOrReplace(ref _denySettings, value); }
    }
    private DenySettings? _denySettings;

    /// <summary>
    /// The scope at which the initial deployment should be created. If a scope
    /// is not specified, it will default to the scope of the deployment
    /// stack. Valid scopes are: management group (format:
    /// &apos;/providers/Microsoft.Management/managementGroups/{managementGroupId}&apos;),
    /// subscription (format: &apos;/subscriptions/{subscriptionId}&apos;),
    /// resource group (format:
    /// &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos;).
    /// </summary>
    public BicepValue<string> DeploymentScope 
    {
        get { Initialize(); return _deploymentScope!; }
        set { Initialize(); _deploymentScope!.Assign(value); }
    }
    private BicepValue<string>? _deploymentScope;

    /// <summary>
    /// Deployment stack description. Max length of 4096 characters.
    /// </summary>
    public BicepValue<string> Description 
    {
        get { Initialize(); return _description!; }
        set { Initialize(); _description!.Assign(value); }
    }
    private BicepValue<string>? _description;

    /// <summary>
    /// The error detail.
    /// </summary>
    public BicepValue<ResponseError> Error 
    {
        get { Initialize(); return _error!; }
        set { Initialize(); _error!.Assign(value); }
    }
    private BicepValue<ResponseError>? _error;

    /// <summary>
    /// The location of the Deployment stack. It cannot be changed after
    /// creation. It must be one of the supported Azure locations.
    /// </summary>
    public BicepValue<AzureLocation> Location 
    {
        get { Initialize(); return _location!; }
        set { Initialize(); _location!.Assign(value); }
    }
    private BicepValue<AzureLocation>? _location;

    /// <summary>
    /// Name and value pairs that define the deployment parameters for the
    /// template. Use this element when providing the parameter values
    /// directly in the request, rather than linking to an existing parameter
    /// file. Use either the parametersLink property or the parameters
    /// property, but not both.
    /// </summary>
    public BicepDictionary<DeploymentParameter> Parameters 
    {
        get { Initialize(); return _parameters!; }
        set { Initialize(); _parameters!.Assign(value); }
    }
    private BicepDictionary<DeploymentParameter>? _parameters;

    /// <summary>
    /// The URI of parameters file. Use this element to link to an existing
    /// parameters file. Use either the parametersLink property or the
    /// parameters property, but not both.
    /// </summary>
    public DeploymentStacksParametersLink ParametersLink 
    {
        get { Initialize(); return _parametersLink!; }
        set { Initialize(); AssignOrReplace(ref _parametersLink, value); }
    }
    private DeploymentStacksParametersLink? _parametersLink;

    /// <summary>
    /// Deployment stack resource tags.
    /// </summary>
    public BicepDictionary<string> Tags 
    {
        get { Initialize(); return _tags!; }
        set { Initialize(); _tags!.Assign(value); }
    }
    private BicepDictionary<string>? _tags;

    /// <summary>
    /// The template content. You use this element when you want to pass the
    /// template syntax directly in the request rather than link to an
    /// existing template. It can be a JObject or well-formed JSON string. Use
    /// either the templateLink property or the template property, but not
    /// both.                          To assign an object to this property
    /// use System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepValue<BinaryData> Template 
    {
        get { Initialize(); return _template!; }
        set { Initialize(); _template!.Assign(value); }
    }
    private BicepValue<BinaryData>? _template;

    /// <summary>
    /// The URI of the template. Use either the templateLink property or the
    /// template property, but not both.
    /// </summary>
    public DeploymentStacksTemplateLink TemplateLink 
    {
        get { Initialize(); return _templateLink!; }
        set { Initialize(); AssignOrReplace(ref _templateLink, value); }
    }
    private DeploymentStacksTemplateLink? _templateLink;

    /// <summary>
    /// The correlation id of the last Deployment stack upsert or delete
    /// operation. It is in GUID format and is used for tracing.
    /// </summary>
    public BicepValue<string> CorrelationId 
    {
        get { Initialize(); return _correlationId!; }
    }
    private BicepValue<string>? _correlationId;

    /// <summary>
    /// An array of resources that were deleted during the most recent
    /// Deployment stack update. Deleted means that the resource was removed
    /// from the template and relevant deletion operations were specified.
    /// </summary>
    public BicepList<SubResource> DeletedResources 
    {
        get { Initialize(); return _deletedResources!; }
    }
    private BicepList<SubResource>? _deletedResources;

    /// <summary>
    /// The resourceId of the deployment resource created by the deployment
    /// stack.
    /// </summary>
    public BicepValue<string> DeploymentId 
    {
        get { Initialize(); return _deploymentId!; }
    }
    private BicepValue<string>? _deploymentId;

    /// <summary>
    /// An array of resources that were detached during the most recent
    /// Deployment stack update. Detached means that the resource was removed
    /// from the template, but no relevant deletion operations were specified.
    /// So, the resource still exists while no longer being associated with
    /// the stack.
    /// </summary>
    public BicepList<SubResource> DetachedResources 
    {
        get { Initialize(); return _detachedResources!; }
    }
    private BicepList<SubResource>? _detachedResources;

    /// <summary>
    /// The duration of the last successful Deployment stack update.
    /// </summary>
    public BicepValue<TimeSpan> Duration 
    {
        get { Initialize(); return _duration!; }
    }
    private BicepValue<TimeSpan>? _duration;

    /// <summary>
    /// An array of resources that failed to reach goal state during the most
    /// recent update. Each resourceId is accompanied by an error message.
    /// </summary>
    public BicepList<ResourceReferenceExtended> FailedResources 
    {
        get { Initialize(); return _failedResources!; }
    }
    private BicepList<ResourceReferenceExtended>? _failedResources;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id 
    {
        get { Initialize(); return _id!; }
    }
    private BicepValue<ResourceIdentifier>? _id;

    /// <summary>
    /// The outputs of the deployment resource created by the deployment stack.
    /// To assign an object to this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepValue<BinaryData> Outputs 
    {
        get { Initialize(); return _outputs!; }
    }
    private BicepValue<BinaryData>? _outputs;

    /// <summary>
    /// State of the deployment stack.
    /// </summary>
    public BicepValue<DeploymentStackProvisioningState> ProvisioningState 
    {
        get { Initialize(); return _provisioningState!; }
    }
    private BicepValue<DeploymentStackProvisioningState>? _provisioningState;

    /// <summary>
    /// An array of resources currently managed by the deployment stack.
    /// </summary>
    public BicepList<ManagedResourceReference> Resources 
    {
        get { Initialize(); return _resources!; }
    }
    private BicepList<ManagedResourceReference>? _resources;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public SystemData SystemData 
    {
        get { Initialize(); return _systemData!; }
    }
    private SystemData? _systemData;

    /// <summary>
    /// Creates a new DeploymentStack.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the DeploymentStack resource.  This
    /// can be used to refer to the resource in expressions, but is not the
    /// Azure name of the resource.  This value can contain letters, numbers,
    /// and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the DeploymentStack.</param>
    public DeploymentStack(string bicepIdentifier, string? resourceVersion = default)
        : base(bicepIdentifier, "Microsoft.Resources/deploymentStacks", resourceVersion ?? "2024-03-01")
    {
    }

    /// <summary>
    /// Define all the provisionable properties of DeploymentStack.
    /// </summary>
    protected override void DefineProvisionableProperties()
    {
        _name = DefineProperty<string>("Name", ["name"], isRequired: true);
        _actionOnUnmanage = DefineModelProperty<ActionOnUnmanage>("ActionOnUnmanage", ["properties", "actionOnUnmanage"]);
        _bypassStackOutOfSyncError = DefineProperty<bool>("BypassStackOutOfSyncError", ["properties", "bypassStackOutOfSyncError"]);
        _debugSettingDetailLevel = DefineProperty<string>("DebugSettingDetailLevel", ["properties", "debugSetting", "detailLevel"]);
        _denySettings = DefineModelProperty<DenySettings>("DenySettings", ["properties", "denySettings"]);
        _deploymentScope = DefineProperty<string>("DeploymentScope", ["properties", "deploymentScope"]);
        _description = DefineProperty<string>("Description", ["properties", "description"]);
        _error = DefineProperty<ResponseError>("Error", ["properties", "error"]);
        _location = DefineProperty<AzureLocation>("Location", ["location"]);
        _parameters = DefineDictionaryProperty<DeploymentParameter>("Parameters", ["properties", "parameters"]);
        _parametersLink = DefineModelProperty<DeploymentStacksParametersLink>("ParametersLink", ["properties", "parametersLink"]);
        _tags = DefineDictionaryProperty<string>("Tags", ["tags"]);
        _template = DefineProperty<BinaryData>("Template", ["properties", "template"]);
        _templateLink = DefineModelProperty<DeploymentStacksTemplateLink>("TemplateLink", ["properties", "templateLink"]);
        _correlationId = DefineProperty<string>("CorrelationId", ["properties", "correlationId"], isOutput: true);
        _deletedResources = DefineListProperty<SubResource>("DeletedResources", ["properties", "deletedResources"], isOutput: true);
        _deploymentId = DefineProperty<string>("DeploymentId", ["properties", "deploymentId"], isOutput: true);
        _detachedResources = DefineListProperty<SubResource>("DetachedResources", ["properties", "detachedResources"], isOutput: true);
        _duration = DefineProperty<TimeSpan>("Duration", ["properties", "duration"], isOutput: true);
        _failedResources = DefineListProperty<ResourceReferenceExtended>("FailedResources", ["properties", "failedResources"], isOutput: true);
        _id = DefineProperty<ResourceIdentifier>("Id", ["id"], isOutput: true);
        _outputs = DefineProperty<BinaryData>("Outputs", ["properties", "outputs"], isOutput: true);
        _provisioningState = DefineProperty<DeploymentStackProvisioningState>("ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _resources = DefineListProperty<ManagedResourceReference>("Resources", ["properties", "resources"], isOutput: true);
        _systemData = DefineModelProperty<SystemData>("SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported DeploymentStack resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-03-01.
        /// </summary>
        public static readonly string V2024_03_01 = "2024-03-01";
    }

    /// <summary>
    /// Creates a reference to an existing DeploymentStack.
    /// </summary>
    /// <param name="bicepIdentifier">
    /// The the Bicep identifier name of the DeploymentStack resource.  This
    /// can be used to refer to the resource in expressions, but is not the
    /// Azure name of the resource.  This value can contain letters, numbers,
    /// and underscores.
    /// </param>
    /// <param name="resourceVersion">Version of the DeploymentStack.</param>
    /// <returns>The existing DeploymentStack resource.</returns>
    public static DeploymentStack FromExisting(string bicepIdentifier, string? resourceVersion = default) =>
        new(bicepIdentifier, resourceVersion) { IsExistingResource = true };
}
