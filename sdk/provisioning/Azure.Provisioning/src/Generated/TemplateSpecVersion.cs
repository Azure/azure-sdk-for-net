// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Resources;

/// <summary>
/// TemplateSpecVersion.
/// </summary>
public partial class TemplateSpecVersion : Resource
{
    /// <summary>
    /// Gets the Name.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The location of the Template Spec Version. It must match the location
    /// of the parent Template Spec.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Template Spec version description.
    /// </summary>
    public BicepValue<string> Description { get => _description; set => _description.Assign(value); }
    private readonly BicepValue<string> _description;

    /// <summary>
    /// An array of linked template artifacts.
    /// </summary>
    public BicepList<LinkedTemplateArtifact> LinkedTemplates { get => _linkedTemplates; set => _linkedTemplates.Assign(value); }
    private readonly BicepList<LinkedTemplateArtifact> _linkedTemplates;

    /// <summary>
    /// The main Azure Resource Manager template content.
    /// To assign an object to this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepValue<BinaryData> MainTemplate { get => _mainTemplate; set => _mainTemplate.Assign(value); }
    private readonly BicepValue<BinaryData> _mainTemplate;

    /// <summary>
    /// The version metadata. Metadata is an open-ended object and is typically
    /// a collection of key-value pairs.                          To assign an
    /// object to this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepValue<BinaryData> Metadata { get => _metadata; set => _metadata.Assign(value); }
    private readonly BicepValue<BinaryData> _metadata;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// The Azure Resource Manager template UI definition content.
    /// To assign an object to this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepValue<BinaryData> UiFormDefinition { get => _uiFormDefinition; set => _uiFormDefinition.Assign(value); }
    private readonly BicepValue<BinaryData> _uiFormDefinition;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent TemplateSpec.
    /// </summary>
    public TemplateSpec? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<TemplateSpec> _parent;

    /// <summary>
    /// Creates a new TemplateSpecVersion.
    /// </summary>
    /// <param name="resourceName">Name of the TemplateSpecVersion.</param>
    /// <param name="resourceVersion">Version of the TemplateSpecVersion.</param>
    public TemplateSpecVersion(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Resources/templateSpecs/versions", resourceVersion ?? "2022-02-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _description = BicepValue<string>.DefineProperty(this, "Description", ["properties", "description"]);
        _linkedTemplates = BicepList<LinkedTemplateArtifact>.DefineProperty(this, "LinkedTemplates", ["properties", "linkedTemplates"]);
        _mainTemplate = BicepValue<BinaryData>.DefineProperty(this, "MainTemplate", ["properties", "mainTemplate"]);
        _metadata = BicepValue<BinaryData>.DefineProperty(this, "Metadata", ["properties", "metadata"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _uiFormDefinition = BicepValue<BinaryData>.DefineProperty(this, "UiFormDefinition", ["properties", "uiFormDefinition"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<TemplateSpec>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported TemplateSpecVersion resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2022-02-01.
        /// </summary>
        public static readonly string V2022_02_01 = "2022-02-01";

        /// <summary>
        /// 2021-05-01.
        /// </summary>
        public static readonly string V2021_05_01 = "2021-05-01";
    }

    /// <summary>
    /// Creates a reference to an existing TemplateSpecVersion.
    /// </summary>
    /// <param name="resourceName">Name of the TemplateSpecVersion.</param>
    /// <param name="resourceVersion">Version of the TemplateSpecVersion.</param>
    /// <returns>The existing TemplateSpecVersion resource.</returns>
    public static TemplateSpecVersion FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
