// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Resources;

/// <summary>
/// GenericResource.
/// </summary>
public partial class GenericResource : Resource
{
    /// <summary>
    /// The name of the resource.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The geo-location where the resource lives.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Resource extended location.
    /// </summary>
    public BicepValue<ExtendedAzureLocation> ExtendedLocation { get => _extendedLocation; set => _extendedLocation.Assign(value); }
    private readonly BicepValue<ExtendedAzureLocation> _extendedLocation;

    /// <summary>
    /// The identity of the resource.
    /// </summary>
    public BicepValue<ManagedServiceIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<ManagedServiceIdentity> _identity;

    /// <summary>
    /// The kind of the resource.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; set => _kind.Assign(value); }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// ID of the resource that manages this resource.
    /// </summary>
    public BicepValue<string> ManagedBy { get => _managedBy; set => _managedBy.Assign(value); }
    private readonly BicepValue<string> _managedBy;

    /// <summary>
    /// The plan of the resource.
    /// </summary>
    public BicepValue<ArmPlan> Plan { get => _plan; set => _plan.Assign(value); }
    private readonly BicepValue<ArmPlan> _plan;

    /// <summary>
    /// The resource properties.                          To assign an object
    /// to this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepValue<BinaryData> Properties { get => _properties; set => _properties.Assign(value); }
    private readonly BicepValue<BinaryData> _properties;

    /// <summary>
    /// The SKU of the resource.
    /// </summary>
    public BicepValue<ResourcesSku> Sku { get => _sku; set => _sku.Assign(value); }
    private readonly BicepValue<ResourcesSku> _sku;

    /// <summary>
    /// Resource tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// The changed time of the resource. This is only present if requested via
    /// the $expand query parameter.
    /// </summary>
    public BicepValue<DateTimeOffset> ChangedOn { get => _changedOn; }
    private readonly BicepValue<DateTimeOffset> _changedOn;

    /// <summary>
    /// The created time of the resource. This is only present if requested via
    /// the $expand query parameter.
    /// </summary>
    public BicepValue<DateTimeOffset> CreatedOn { get => _createdOn; }
    private readonly BicepValue<DateTimeOffset> _createdOn;

    /// <summary>
    /// Fully qualified resource ID for the resource. Ex -
    /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The provisioning state of the resource. This is only present if
    /// requested via the $expand query parameter.
    /// </summary>
    public BicepValue<string> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<string> _provisioningState;

    /// <summary>
    /// Azure Resource Manager metadata containing createdBy and modifiedBy
    /// information.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new GenericResource.
    /// </summary>
    /// <param name="resourceName">Name of the GenericResource.</param>
    /// <param name="resourceVersion">Version of the GenericResource.</param>
    public GenericResource(string resourceName, string? resourceVersion = default)
        : base(resourceName, "", resourceVersion)
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _extendedLocation = BicepValue<ExtendedAzureLocation>.DefineProperty(this, "ExtendedLocation", ["extendedLocation"]);
        _identity = BicepValue<ManagedServiceIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"]);
        _managedBy = BicepValue<string>.DefineProperty(this, "ManagedBy", ["managedBy"]);
        _plan = BicepValue<ArmPlan>.DefineProperty(this, "Plan", ["plan"]);
        _properties = BicepValue<BinaryData>.DefineProperty(this, "Properties", ["properties"]);
        _sku = BicepValue<ResourcesSku>.DefineProperty(this, "Sku", ["sku"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _changedOn = BicepValue<DateTimeOffset>.DefineProperty(this, "ChangedOn", ["changedTime"], isOutput: true);
        _createdOn = BicepValue<DateTimeOffset>.DefineProperty(this, "CreatedOn", ["createdTime"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningState = BicepValue<string>.DefineProperty(this, "ProvisioningState", ["provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Creates a reference to an existing GenericResource.
    /// </summary>
    /// <param name="resourceName">Name of the GenericResource.</param>
    /// <param name="resourceVersion">Version of the GenericResource.</param>
    /// <returns>The existing GenericResource resource.</returns>
    public static GenericResource FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
