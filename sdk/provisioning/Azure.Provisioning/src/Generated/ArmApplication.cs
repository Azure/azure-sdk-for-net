// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.Resources;

/// <summary>
/// ArmApplication.
/// </summary>
public partial class ArmApplication : Resource
{
    /// <summary>
    /// The name of the managed application.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The kind of the managed application. Allowed values are MarketPlace and
    /// ServiceCatalog.
    /// </summary>
    public BicepValue<string> Kind { get => _kind; set => _kind.Assign(value); }
    private readonly BicepValue<string> _kind;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// The fully qualified path of managed application definition Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> ApplicationDefinitionId { get => _applicationDefinitionId; set => _applicationDefinitionId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _applicationDefinitionId;

    /// <summary>
    /// The identity of the resource.
    /// </summary>
    public BicepValue<ArmApplicationManagedIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<ArmApplicationManagedIdentity> _identity;

    /// <summary>
    /// The managed application Jit access policy.
    /// </summary>
    public BicepValue<ArmApplicationJitAccessPolicy> JitAccessPolicy { get => _jitAccessPolicy; set => _jitAccessPolicy.Assign(value); }
    private readonly BicepValue<ArmApplicationJitAccessPolicy> _jitAccessPolicy;

    /// <summary>
    /// ID of the resource that manages this resource.
    /// </summary>
    public BicepValue<string> ManagedBy { get => _managedBy; set => _managedBy.Assign(value); }
    private readonly BicepValue<string> _managedBy;

    /// <summary>
    /// The managed resource group Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> ManagedResourceGroupId { get => _managedResourceGroupId; set => _managedResourceGroupId.Assign(value); }
    private readonly BicepValue<ResourceIdentifier> _managedResourceGroupId;

    /// <summary>
    /// Name and value pairs that define the managed application parameters. It
    /// can be a JObject or a well formed JSON string.
    /// To assign an object to this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepValue<BinaryData> Parameters { get => _parameters; set => _parameters.Assign(value); }
    private readonly BicepValue<BinaryData> _parameters;

    /// <summary>
    /// The plan information.
    /// </summary>
    public BicepValue<ArmPlan> Plan { get => _plan; set => _plan.Assign(value); }
    private readonly BicepValue<ArmPlan> _plan;

    /// <summary>
    /// The SKU of the resource.
    /// </summary>
    public BicepValue<ArmApplicationSku> Sku { get => _sku; set => _sku.Assign(value); }
    private readonly BicepValue<ArmApplicationSku> _sku;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// The collection of managed application artifacts.
    /// </summary>
    public BicepList<ArmApplicationArtifact> Artifacts { get => _artifacts; }
    private readonly BicepList<ArmApplicationArtifact> _artifacts;

    /// <summary>
    /// The  read-only authorizations property that is retrieved from the
    /// application package.
    /// </summary>
    public BicepList<ArmApplicationAuthorization> Authorizations { get => _authorizations; }
    private readonly BicepList<ArmApplicationAuthorization> _authorizations;

    /// <summary>
    /// The managed application resource usage Id.
    /// </summary>
    public BicepValue<string> BillingDetailsResourceUsageId { get => _billingDetailsResourceUsageId; }
    private readonly BicepValue<string> _billingDetailsResourceUsageId;

    /// <summary>
    /// The client entity that created the JIT request.
    /// </summary>
    public BicepValue<ArmApplicationDetails> CreatedBy { get => _createdBy; }
    private readonly BicepValue<ArmApplicationDetails> _createdBy;

    /// <summary>
    /// The read-only customer support property that is retrieved from the
    /// application package.
    /// </summary>
    public BicepValue<ArmApplicationPackageContact> CustomerSupport { get => _customerSupport; }
    private readonly BicepValue<ArmApplicationPackageContact> _customerSupport;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The managed application management mode.
    /// </summary>
    public BicepValue<ArmApplicationManagementMode> ManagementMode { get => _managementMode; }
    private readonly BicepValue<ArmApplicationManagementMode> _managementMode;

    /// <summary>
    /// Name and value pairs that define the managed application outputs.
    /// To assign an object to this property use
    /// System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions).
    /// To assign an already formatted json string to
    /// this property use System.BinaryData.FromString(System.String).
    /// Examples:
    /// BinaryData.FromObjectAsJson(&quot;foo&quot;)Creates a
    /// payload of
    /// &quot;foo&quot;.BinaryData.FromString(&quot;\&quot;foo\&quot;&quot;)Creates
    /// a payload of &quot;foo&quot;.BinaryData.FromObjectAsJson(new { key =
    /// &quot;value&quot; })Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.BinaryData.FromString(&quot;{\&quot;key\&quot;:
    /// \&quot;value\&quot;}&quot;)Creates a payload of { &quot;key&quot;:
    /// &quot;value&quot; }.
    /// </summary>
    public BicepValue<BinaryData> Outputs { get => _outputs; }
    private readonly BicepValue<BinaryData> _outputs;

    /// <summary>
    /// The managed application provisioning state.
    /// </summary>
    public BicepValue<ResourcesProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<ResourcesProvisioningState> _provisioningState;

    /// <summary>
    /// The publisher tenant Id.
    /// </summary>
    public BicepValue<Guid> PublisherTenantId { get => _publisherTenantId; }
    private readonly BicepValue<Guid> _publisherTenantId;

    /// <summary>
    /// The read-only support URLs property that is retrieved from the
    /// application package.
    /// </summary>
    public BicepValue<ArmApplicationPackageSupportUris> SupportUris { get => _supportUris; }
    private readonly BicepValue<ArmApplicationPackageSupportUris> _supportUris;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// The client entity that last updated the JIT request.
    /// </summary>
    public BicepValue<ArmApplicationDetails> UpdatedBy { get => _updatedBy; }
    private readonly BicepValue<ArmApplicationDetails> _updatedBy;

    /// <summary>
    /// Creates a new ArmApplication.
    /// </summary>
    /// <param name="resourceName">Name of the ArmApplication.</param>
    /// <param name="resourceVersion">Version of the ArmApplication.</param>
    public ArmApplication(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Solutions/applications", resourceVersion ?? "2021-07-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _kind = BicepValue<string>.DefineProperty(this, "Kind", ["kind"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _applicationDefinitionId = BicepValue<ResourceIdentifier>.DefineProperty(this, "ApplicationDefinitionId", ["properties", "applicationDefinitionId"]);
        _identity = BicepValue<ArmApplicationManagedIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _jitAccessPolicy = BicepValue<ArmApplicationJitAccessPolicy>.DefineProperty(this, "JitAccessPolicy", ["properties", "jitAccessPolicy"]);
        _managedBy = BicepValue<string>.DefineProperty(this, "ManagedBy", ["managedBy"]);
        _managedResourceGroupId = BicepValue<ResourceIdentifier>.DefineProperty(this, "ManagedResourceGroupId", ["properties", "managedResourceGroupId"]);
        _parameters = BicepValue<BinaryData>.DefineProperty(this, "Parameters", ["properties", "parameters"]);
        _plan = BicepValue<ArmPlan>.DefineProperty(this, "Plan", ["plan"]);
        _sku = BicepValue<ArmApplicationSku>.DefineProperty(this, "Sku", ["sku"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _artifacts = BicepList<ArmApplicationArtifact>.DefineProperty(this, "Artifacts", ["properties", "artifacts"], isOutput: true);
        _authorizations = BicepList<ArmApplicationAuthorization>.DefineProperty(this, "Authorizations", ["properties", "authorizations"], isOutput: true);
        _billingDetailsResourceUsageId = BicepValue<string>.DefineProperty(this, "BillingDetailsResourceUsageId", ["properties", "billingDetails", "resourceUsageId"], isOutput: true);
        _createdBy = BicepValue<ArmApplicationDetails>.DefineProperty(this, "CreatedBy", ["properties", "createdBy"], isOutput: true);
        _customerSupport = BicepValue<ArmApplicationPackageContact>.DefineProperty(this, "CustomerSupport", ["properties", "customerSupport"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _managementMode = BicepValue<ArmApplicationManagementMode>.DefineProperty(this, "ManagementMode", ["properties", "managementMode"], isOutput: true);
        _outputs = BicepValue<BinaryData>.DefineProperty(this, "Outputs", ["properties", "outputs"], isOutput: true);
        _provisioningState = BicepValue<ResourcesProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _publisherTenantId = BicepValue<Guid>.DefineProperty(this, "PublisherTenantId", ["properties", "publisherTenantId"], isOutput: true);
        _supportUris = BicepValue<ArmApplicationPackageSupportUris>.DefineProperty(this, "SupportUris", ["properties", "supportUrls"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _updatedBy = BicepValue<ArmApplicationDetails>.DefineProperty(this, "UpdatedBy", ["properties", "updatedBy"], isOutput: true);
    }

    /// <summary>
    /// Supported ArmApplication resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2021-07-01.
        /// </summary>
        public static readonly string V2021_07_01 = "2021-07-01";

        /// <summary>
        /// 2019-07-01.
        /// </summary>
        public static readonly string V2019_07_01 = "2019-07-01";

        /// <summary>
        /// 2018-06-01.
        /// </summary>
        public static readonly string V2018_06_01 = "2018-06-01";

        /// <summary>
        /// 2018-03-01.
        /// </summary>
        public static readonly string V2018_03_01 = "2018-03-01";

        /// <summary>
        /// 2018-02-01.
        /// </summary>
        public static readonly string V2018_02_01 = "2018-02-01";

        /// <summary>
        /// 2017-12-01.
        /// </summary>
        public static readonly string V2017_12_01 = "2017-12-01";

        /// <summary>
        /// 2017-09-01.
        /// </summary>
        public static readonly string V2017_09_01 = "2017-09-01";
    }

    /// <summary>
    /// Creates a reference to an existing ArmApplication.
    /// </summary>
    /// <param name="resourceName">Name of the ArmApplication.</param>
    /// <param name="resourceVersion">Version of the ArmApplication.</param>
    /// <returns>The existing ArmApplication resource.</returns>
    public static ArmApplication FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
