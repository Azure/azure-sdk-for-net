// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Authorization;
using Azure.Provisioning.Expressions;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using Azure.Provisioning.Roles;
using System;
using System.ComponentModel;

namespace Azure.Provisioning.Search;

/// <summary>
/// SearchService.
/// </summary>
public partial class SearchService : Resource
{
    /// <summary>
    /// The name of the Azure AI Search service to create or update. Search
    /// service names must only contain lowercase letters, digits or dashes,
    /// cannot use dash as the first two or last one characters, cannot
    /// contain consecutive dashes, and must be between 2 and 60 characters in
    /// length. Search service names must be globally unique since they are
    /// part of the service URI (https://&lt;name&gt;.search.windows.net). You
    /// cannot change the service name after the service is created.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Gets or sets the Location.
    /// </summary>
    public BicepValue<AzureLocation> Location { get => _location; set => _location.Assign(value); }
    private readonly BicepValue<AzureLocation> _location;

    /// <summary>
    /// Defines the options for how the data plane API of a search service
    /// authenticates requests. This cannot be set if
    /// &apos;disableLocalAuth&apos; is set to true.
    /// </summary>
    public BicepValue<SearchAadAuthDataPlaneAuthOptions> AuthOptions { get => _authOptions; set => _authOptions.Assign(value); }
    private readonly BicepValue<SearchAadAuthDataPlaneAuthOptions> _authOptions;

    /// <summary>
    /// A list of data exfiltration scenarios that are explicitly disallowed
    /// for the search service. Currently, the only supported value is
    /// &apos;All&apos; to disable all possible data export scenarios with
    /// more fine grained controls planned for the future.
    /// </summary>
    public BicepList<SearchDisabledDataExfiltrationOption> DisabledDataExfiltrationOptions { get => _disabledDataExfiltrationOptions; set => _disabledDataExfiltrationOptions.Assign(value); }
    private readonly BicepList<SearchDisabledDataExfiltrationOption> _disabledDataExfiltrationOptions;

    /// <summary>
    /// Specifies any policy regarding encryption of resources (such as
    /// indexes) using customer manager keys within a search service.
    /// </summary>
    public BicepValue<SearchEncryptionWithCmk> EncryptionWithCmk { get => _encryptionWithCmk; set => _encryptionWithCmk.Assign(value); }
    private readonly BicepValue<SearchEncryptionWithCmk> _encryptionWithCmk;

    /// <summary>
    /// Applicable only for the standard3 SKU. You can set this property to
    /// enable up to 3 high density partitions that allow up to 1000 indexes,
    /// which is much higher than the maximum indexes allowed for any other
    /// SKU. For the standard3 SKU, the value is either &apos;default&apos; or
    /// &apos;highDensity&apos;. For all other SKUs, this value must be
    /// &apos;default&apos;.
    /// </summary>
    public BicepValue<SearchServiceHostingMode> HostingMode { get => _hostingMode; set => _hostingMode.Assign(value); }
    private readonly BicepValue<SearchServiceHostingMode> _hostingMode;

    /// <summary>
    /// The identity of the resource.
    /// </summary>
    public BicepValue<ManagedServiceIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<ManagedServiceIdentity> _identity;

    /// <summary>
    /// A list of IP restriction rules used for an IP firewall. Any IPs that do
    /// not match the rules are blocked by the firewall. These rules are only
    /// applied when the &apos;publicNetworkAccess&apos; of the search service
    /// is &apos;enabled&apos;.
    /// </summary>
    public BicepList<SearchServiceIPRule> IPRules { get => _iPRules; set => _iPRules.Assign(value); }
    private readonly BicepList<SearchServiceIPRule> _iPRules;

    /// <summary>
    /// When set to true, calls to the search service will not be permitted to
    /// utilize API keys for authentication. This cannot be set to true if
    /// &apos;dataPlaneAuthOptions&apos; are defined.
    /// </summary>
    public BicepValue<bool> IsLocalAuthDisabled { get => _isLocalAuthDisabled; set => _isLocalAuthDisabled.Assign(value); }
    private readonly BicepValue<bool> _isLocalAuthDisabled;

    /// <summary>
    /// Network specific rules that determine how the Azure AI Search service
    /// may be reached.
    /// </summary>
    public BicepValue<SearchServiceNetworkRuleSet> NetworkRuleSet { get => _networkRuleSet; set => _networkRuleSet.Assign(value); }
    private readonly BicepValue<SearchServiceNetworkRuleSet> _networkRuleSet;

    /// <summary>
    /// The number of partitions in the search service; if specified, it can be
    /// 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for
    /// standard SKUs. For &apos;standard3&apos; services with hostingMode set
    /// to &apos;highDensity&apos;, the allowed values are between 1 and 3.
    /// </summary>
    public BicepValue<int> PartitionCount { get => _partitionCount; set => _partitionCount.Assign(value); }
    private readonly BicepValue<int> _partitionCount;

    /// <summary>
    /// This value can be set to &apos;enabled&apos; to avoid breaking changes
    /// on existing customer resources and templates. If set to
    /// &apos;disabled&apos;, traffic over public interface is not allowed,
    /// and private endpoint connections would be the exclusive access method.
    /// </summary>
    public BicepValue<SearchServicePublicNetworkAccess> PublicNetworkAccess { get => _publicNetworkAccess; set => _publicNetworkAccess.Assign(value); }
    private readonly BicepValue<SearchServicePublicNetworkAccess> _publicNetworkAccess;

    /// <summary>
    /// The number of replicas in the search service. If specified, it must be
    /// a value between 1 and 12 inclusive for standard SKUs or between 1 and
    /// 3 inclusive for basic SKU.
    /// </summary>
    public BicepValue<int> ReplicaCount { get => _replicaCount; set => _replicaCount.Assign(value); }
    private readonly BicepValue<int> _replicaCount;

    /// <summary>
    /// The SKU of the search service. Valid values include: &apos;free&apos;:
    /// Shared service. &apos;basic&apos;: Dedicated service with up to 3
    /// replicas. &apos;standard&apos;: Dedicated service with up to 12
    /// partitions and 12 replicas. &apos;standard2&apos;: Similar to
    /// standard, but with more capacity per search unit.
    /// &apos;standard3&apos;: The largest Standard offering with up to 12
    /// partitions and 12 replicas (or up to 3 partitions with more indexes if
    /// you also set the hostingMode property to &apos;highDensity&apos;).
    /// &apos;storage_optimized_l1&apos;: Supports 1TB per partition, up to 12
    /// partitions. &apos;storage_optimized_l2&apos;: Supports 2TB per
    /// partition, up to 12 partitions.&apos;.
    /// </summary>
    public BicepValue<SearchServiceSkuName> SearchSkuName { get => _searchSkuName; set => _searchSkuName.Assign(value); }
    private readonly BicepValue<SearchServiceSkuName> _searchSkuName;

    /// <summary>
    /// Sets options that control the availability of semantic search. This
    /// configuration is only possible for certain Azure AI Search SKUs in
    /// certain locations.
    /// </summary>
    public BicepValue<SearchSemanticSearch> SemanticSearch { get => _semanticSearch; set => _semanticSearch.Assign(value); }
    private readonly BicepValue<SearchSemanticSearch> _semanticSearch;

    /// <summary>
    /// Gets or sets the Tags.
    /// </summary>
    public BicepDictionary<string> Tags { get => _tags; set => _tags.Assign(value); }
    private readonly BicepDictionary<string> _tags;

    /// <summary>
    /// A system generated property representing the service&apos;s etag that
    /// can be for optimistic concurrency control during updates.
    /// </summary>
    public BicepValue<ETag> ETag { get => _eTag; }
    private readonly BicepValue<ETag> _eTag;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The list of private endpoint connections to the Azure AI Search service.
    /// </summary>
    public BicepList<SearchPrivateEndpointConnectionData> PrivateEndpointConnections { get => _privateEndpointConnections; }
    private readonly BicepList<SearchPrivateEndpointConnectionData> _privateEndpointConnections;

    /// <summary>
    /// The state of the last provisioning operation performed on the search
    /// service. Provisioning is an intermediate state that occurs while
    /// service capacity is being established. After capacity is set up,
    /// provisioningState changes to either &apos;succeeded&apos; or
    /// &apos;failed&apos;. Client applications can poll provisioning status
    /// (the recommended polling interval is from 30 seconds to one minute) by
    /// using the Get Search Service operation to see when an operation is
    /// completed. If you are using the free service, this value tends to come
    /// back as &apos;succeeded&apos; directly in the call to Create search
    /// service. This is because the free service uses capacity that is
    /// already set up.
    /// </summary>
    public BicepValue<SearchServiceProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<SearchServiceProvisioningState> _provisioningState;

    /// <summary>
    /// The list of shared private link resources managed by the Azure AI
    /// Search service.
    /// </summary>
    public BicepList<SharedSearchServicePrivateLinkResourceData> SharedPrivateLinkResources { get => _sharedPrivateLinkResources; }
    private readonly BicepList<SharedSearchServicePrivateLinkResourceData> _sharedPrivateLinkResources;

    /// <summary>
    /// The status of the search service. Possible values include:
    /// &apos;running&apos;: The search service is running and no provisioning
    /// operations are underway. &apos;provisioning&apos;: The search service
    /// is being provisioned or scaled up or down. &apos;deleting&apos;: The
    /// search service is being deleted. &apos;degraded&apos;: The search
    /// service is degraded. This can occur when the underlying search units
    /// are not healthy. The search service is most likely operational, but
    /// performance might be slow and some requests might be dropped.
    /// &apos;disabled&apos;: The search service is disabled. In this state,
    /// the service will reject all API requests. &apos;error&apos;: The
    /// search service is in an error state. &apos;stopped&apos;: The search
    /// service is in a subscription that&apos;s disabled. If your service is
    /// in the degraded, disabled, or error states, it means the Azure AI
    /// Search team is actively investigating the underlying issue. Dedicated
    /// services in these states are still chargeable based on the number of
    /// search units provisioned.
    /// </summary>
    public BicepValue<SearchServiceStatus> Status { get => _status; }
    private readonly BicepValue<SearchServiceStatus> _status;

    /// <summary>
    /// The details of the search service status.
    /// </summary>
    public BicepValue<string> StatusDetails { get => _statusDetails; }
    private readonly BicepValue<string> _statusDetails;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new SearchService.
    /// </summary>
    /// <param name="resourceName">Name of the SearchService.</param>
    /// <param name="resourceVersion">Version of the SearchService.</param>
    public SearchService(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.Search/searchServices", resourceVersion ?? "2023-11-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _location = BicepValue<AzureLocation>.DefineProperty(this, "Location", ["location"], isRequired: true);
        _authOptions = BicepValue<SearchAadAuthDataPlaneAuthOptions>.DefineProperty(this, "AuthOptions", ["properties", "authOptions"]);
        _disabledDataExfiltrationOptions = BicepList<SearchDisabledDataExfiltrationOption>.DefineProperty(this, "DisabledDataExfiltrationOptions", ["properties", "disabledDataExfiltrationOptions"]);
        _encryptionWithCmk = BicepValue<SearchEncryptionWithCmk>.DefineProperty(this, "EncryptionWithCmk", ["properties", "encryptionWithCmk"]);
        _hostingMode = BicepValue<SearchServiceHostingMode>.DefineProperty(this, "HostingMode", ["properties", "hostingMode"]);
        _identity = BicepValue<ManagedServiceIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _iPRules = BicepList<SearchServiceIPRule>.DefineProperty(this, "IPRules", ["properties", "networkRuleSet", "ipRules"]);
        _isLocalAuthDisabled = BicepValue<bool>.DefineProperty(this, "IsLocalAuthDisabled", ["properties", "disableLocalAuth"]);
        _networkRuleSet = BicepValue<SearchServiceNetworkRuleSet>.DefineProperty(this, "NetworkRuleSet", ["properties", "networkRuleSet"]);
        _partitionCount = BicepValue<int>.DefineProperty(this, "PartitionCount", ["properties", "partitionCount"]);
        _publicNetworkAccess = BicepValue<SearchServicePublicNetworkAccess>.DefineProperty(this, "PublicNetworkAccess", ["properties", "publicNetworkAccess"]);
        _replicaCount = BicepValue<int>.DefineProperty(this, "ReplicaCount", ["properties", "replicaCount"]);
        _searchSkuName = BicepValue<SearchServiceSkuName>.DefineProperty(this, "SearchSkuName", ["sku", "name"]);
        _semanticSearch = BicepValue<SearchSemanticSearch>.DefineProperty(this, "SemanticSearch", ["properties", "semanticSearch"]);
        _tags = BicepDictionary<string>.DefineProperty(this, "Tags", ["tags"]);
        _eTag = BicepValue<ETag>.DefineProperty(this, "ETag", ["properties", "eTag"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _privateEndpointConnections = BicepList<SearchPrivateEndpointConnectionData>.DefineProperty(this, "PrivateEndpointConnections", ["properties", "privateEndpointConnections"], isOutput: true);
        _provisioningState = BicepValue<SearchServiceProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _sharedPrivateLinkResources = BicepList<SharedSearchServicePrivateLinkResourceData>.DefineProperty(this, "SharedPrivateLinkResources", ["properties", "sharedPrivateLinkResources"], isOutput: true);
        _status = BicepValue<SearchServiceStatus>.DefineProperty(this, "Status", ["properties", "status"], isOutput: true);
        _statusDetails = BicepValue<string>.DefineProperty(this, "StatusDetails", ["properties", "statusDetails"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported SearchService resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-06-01-Preview.
        /// </summary>
        public static readonly string V2024_06_01_Preview = "2024-06-01-Preview";

        /// <summary>
        /// 2024-03-01-Preview.
        /// </summary>
        public static readonly string V2024_03_01_Preview = "2024-03-01-Preview";

        /// <summary>
        /// 2023-11-01.
        /// </summary>
        public static readonly string V2023_11_01 = "2023-11-01";

        /// <summary>
        /// 2022-09-01.
        /// </summary>
        public static readonly string V2022_09_01 = "2022-09-01";

        /// <summary>
        /// 2021-06-06-Preview.
        /// </summary>
        public static readonly string V2021_06_06_Preview = "2021-06-06-Preview";

        /// <summary>
        /// 2021-04-01-Preview.
        /// </summary>
        public static readonly string V2021_04_01_Preview = "2021-04-01-Preview";

        /// <summary>
        /// 2020-08-01-Preview.
        /// </summary>
        public static readonly string V2020_08_01_Preview = "2020-08-01-Preview";

        /// <summary>
        /// 2020-08-01.
        /// </summary>
        public static readonly string V2020_08_01 = "2020-08-01";

        /// <summary>
        /// 2020-03-13.
        /// </summary>
        public static readonly string V2020_03_13 = "2020-03-13";

        /// <summary>
        /// 2019-10-01-Preview.
        /// </summary>
        public static readonly string V2019_10_01_Preview = "2019-10-01-Preview";

        /// <summary>
        /// 2015-08-19.
        /// </summary>
        public static readonly string V2015_08_19 = "2015-08-19";

        /// <summary>
        /// 2015-02-28.
        /// </summary>
        public static readonly string V2015_02_28 = "2015-02-28";

        /// <summary>
        /// 2014-07-31-Preview.
        /// </summary>
        public static readonly string V2014_07_31_Preview = "2014-07-31-Preview";
    }

    /// <summary>
    /// Creates a reference to an existing SearchService.
    /// </summary>
    /// <param name="resourceName">Name of the SearchService.</param>
    /// <param name="resourceVersion">Version of the SearchService.</param>
    /// <returns>The existing SearchService resource.</returns>
    public static SearchService FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Get the requirements for naming this SearchService resource.
    /// </summary>
    /// <returns>Naming requirements.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override ResourceNameRequirements GetResourceNameRequirements() =>
        new(minLength: 2, maxLength: 60, validCharacters: ResourceNameCharacters.LowercaseLetters | ResourceNameCharacters.Numbers | ResourceNameCharacters.Hyphen);

    /// <summary>
    /// Creates a role assignment for a user-assigned identity that grants
    /// access to this SearchService.
    /// </summary>
    /// <param name="role">The role to grant.</param>
    /// <param name="identity">The <see cref="UserAssignedIdentity"/>.</param>
    /// <returns>The <see cref="RoleAssignment"/>.</returns>
    public RoleAssignment CreateRoleAssignment(SearchBuiltInRole role, UserAssignedIdentity identity) =>
        new($"{ResourceName}_{identity.ResourceName}_{SearchBuiltInRole.GetBuiltInRoleName(role)}")
        {
            Name = BicepFunction.CreateGuid(Id, identity.PrincipalId, BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString())),
            Scope = new IdentifierExpression(ResourceName),
            PrincipalType = RoleManagementPrincipalType.ServicePrincipal,
            RoleDefinitionId = BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString()),
            PrincipalId = identity.PrincipalId
        };

    /// <summary>
    /// Creates a role assignment for a principal that grants access to this
    /// SearchService.
    /// </summary>
    /// <param name="role">The role to grant.</param>
    /// <param name="principalType">The type of the principal to assign to.</param>
    /// <param name="principalId">The principal to assign to.</param>
    /// <param name="resourceNameSuffix">Optional role assignment resource name suffix.</param>
    /// <returns>The <see cref="RoleAssignment"/>.</returns>
    public RoleAssignment CreateRoleAssignment(SearchBuiltInRole role, BicepValue<RoleManagementPrincipalType> principalType, BicepValue<Guid> principalId, string? resourceNameSuffix = default) =>
        new($"{ResourceName}_{SearchBuiltInRole.GetBuiltInRoleName(role)}{(resourceNameSuffix is null ? "" : "_")}{resourceNameSuffix}")
        {
            Name = BicepFunction.CreateGuid(Id, principalId, BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString())),
            Scope = new IdentifierExpression(ResourceName),
            PrincipalType = principalType,
            RoleDefinitionId = BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString()),
            PrincipalId = principalId
        };
}
