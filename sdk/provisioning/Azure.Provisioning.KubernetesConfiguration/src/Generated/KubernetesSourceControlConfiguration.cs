// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.KubernetesConfiguration;

/// <summary>
/// KubernetesSourceControlConfiguration.
/// </summary>
public partial class KubernetesSourceControlConfiguration : Resource
{
    /// <summary>
    /// Name of the Source Control Configuration.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Name-value pairs of protected configuration settings for the
    /// configuration.
    /// </summary>
    public BicepDictionary<string> ConfigurationProtectedSettings { get => _configurationProtectedSettings; set => _configurationProtectedSettings.Assign(value); }
    private readonly BicepDictionary<string> _configurationProtectedSettings;

    /// <summary>
    /// Properties for Helm operator.
    /// </summary>
    public BicepValue<HelmOperatorProperties> HelmOperatorProperties { get => _helmOperatorProperties; set => _helmOperatorProperties.Assign(value); }
    private readonly BicepValue<HelmOperatorProperties> _helmOperatorProperties;

    /// <summary>
    /// Option to enable Helm Operator for this git configuration.
    /// </summary>
    public BicepValue<bool> IsHelmOperatorEnabled { get => _isHelmOperatorEnabled; set => _isHelmOperatorEnabled.Assign(value); }
    private readonly BicepValue<bool> _isHelmOperatorEnabled;

    /// <summary>
    /// Instance name of the operator - identifying the specific configuration.
    /// </summary>
    public BicepValue<string> OperatorInstanceName { get => _operatorInstanceName; set => _operatorInstanceName.Assign(value); }
    private readonly BicepValue<string> _operatorInstanceName;

    /// <summary>
    /// The namespace to which this operator is installed to. Maximum of 253
    /// lower case alphanumeric characters, hyphen and period only.
    /// </summary>
    public BicepValue<string> OperatorNamespace { get => _operatorNamespace; set => _operatorNamespace.Assign(value); }
    private readonly BicepValue<string> _operatorNamespace;

    /// <summary>
    /// Any Parameters for the Operator instance in string format.
    /// </summary>
    public BicepValue<string> OperatorParams { get => _operatorParams; set => _operatorParams.Assign(value); }
    private readonly BicepValue<string> _operatorParams;

    /// <summary>
    /// Scope at which the operator will be installed.
    /// </summary>
    public BicepValue<KubernetesOperatorScope> OperatorScope { get => _operatorScope; set => _operatorScope.Assign(value); }
    private readonly BicepValue<KubernetesOperatorScope> _operatorScope;

    /// <summary>
    /// Type of the operator.
    /// </summary>
    public BicepValue<KubernetesOperator> OperatorType { get => _operatorType; set => _operatorType.Assign(value); }
    private readonly BicepValue<KubernetesOperator> _operatorType;

    /// <summary>
    /// Url of the SourceControl Repository.
    /// </summary>
    public BicepValue<Uri> RepositoryUri { get => _repositoryUri; set => _repositoryUri.Assign(value); }
    private readonly BicepValue<Uri> _repositoryUri;

    /// <summary>
    /// Base64-encoded known_hosts contents containing public SSH keys required
    /// to access private Git instances.
    /// </summary>
    public BicepValue<string> SshKnownHostsContents { get => _sshKnownHostsContents; set => _sshKnownHostsContents.Assign(value); }
    private readonly BicepValue<string> _sshKnownHostsContents;

    /// <summary>
    /// Compliance Status of the Configuration.
    /// </summary>
    public BicepValue<KubernetesConfigurationComplianceStatus> ComplianceStatus { get => _complianceStatus; }
    private readonly BicepValue<KubernetesConfigurationComplianceStatus> _complianceStatus;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// The provisioning state of the resource provider.
    /// </summary>
    public BicepValue<KubernetesConfigurationProvisioningStateType> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<KubernetesConfigurationProvisioningStateType> _provisioningState;

    /// <summary>
    /// Public Key associated with this SourceControl configuration (either
    /// generated within the cluster or provided by the user).
    /// </summary>
    public BicepValue<string> RepositoryPublicKey { get => _repositoryPublicKey; }
    private readonly BicepValue<string> _repositoryPublicKey;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new KubernetesSourceControlConfiguration.
    /// </summary>
    /// <param name="resourceName">Name of the KubernetesSourceControlConfiguration.</param>
    /// <param name="resourceVersion">Version of the KubernetesSourceControlConfiguration.</param>
    public KubernetesSourceControlConfiguration(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.KubernetesConfiguration/sourceControlConfigurations", resourceVersion ?? "2023-05-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _configurationProtectedSettings = BicepDictionary<string>.DefineProperty(this, "ConfigurationProtectedSettings", ["properties", "configurationProtectedSettings"]);
        _helmOperatorProperties = BicepValue<HelmOperatorProperties>.DefineProperty(this, "HelmOperatorProperties", ["properties", "helmOperatorProperties"]);
        _isHelmOperatorEnabled = BicepValue<bool>.DefineProperty(this, "IsHelmOperatorEnabled", ["properties", "enableHelmOperator"]);
        _operatorInstanceName = BicepValue<string>.DefineProperty(this, "OperatorInstanceName", ["properties", "operatorInstanceName"]);
        _operatorNamespace = BicepValue<string>.DefineProperty(this, "OperatorNamespace", ["properties", "operatorNamespace"]);
        _operatorParams = BicepValue<string>.DefineProperty(this, "OperatorParams", ["properties", "operatorParams"]);
        _operatorScope = BicepValue<KubernetesOperatorScope>.DefineProperty(this, "OperatorScope", ["properties", "operatorScope"]);
        _operatorType = BicepValue<KubernetesOperator>.DefineProperty(this, "OperatorType", ["properties", "operatorType"]);
        _repositoryUri = BicepValue<Uri>.DefineProperty(this, "RepositoryUri", ["properties", "repositoryUrl"]);
        _sshKnownHostsContents = BicepValue<string>.DefineProperty(this, "SshKnownHostsContents", ["properties", "sshKnownHostsContents"]);
        _complianceStatus = BicepValue<KubernetesConfigurationComplianceStatus>.DefineProperty(this, "ComplianceStatus", ["properties", "complianceStatus"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningState = BicepValue<KubernetesConfigurationProvisioningStateType>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _repositoryPublicKey = BicepValue<string>.DefineProperty(this, "RepositoryPublicKey", ["properties", "repositoryPublicKey"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported KubernetesSourceControlConfiguration resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2022-11-01.
        /// </summary>
        public static readonly string V2022_11_01 = "2022-11-01";

        /// <summary>
        /// 2022-07-01.
        /// </summary>
        public static readonly string V2022_07_01 = "2022-07-01";

        /// <summary>
        /// 2022-03-01.
        /// </summary>
        public static readonly string V2022_03_01 = "2022-03-01";

        /// <summary>
        /// 2021-03-01.
        /// </summary>
        public static readonly string V2021_03_01 = "2021-03-01";
    }

    /// <summary>
    /// Creates a reference to an existing KubernetesSourceControlConfiguration.
    /// </summary>
    /// <param name="resourceName">Name of the KubernetesSourceControlConfiguration.</param>
    /// <param name="resourceVersion">Version of the KubernetesSourceControlConfiguration.</param>
    /// <returns>The existing KubernetesSourceControlConfiguration resource.</returns>
    public static KubernetesSourceControlConfiguration FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
