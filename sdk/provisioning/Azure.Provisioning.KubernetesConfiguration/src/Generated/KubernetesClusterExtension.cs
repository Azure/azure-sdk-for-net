// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure;
using Azure.Core;
using Azure.Provisioning;
using Azure.Provisioning.Authorization;
using Azure.Provisioning.Expressions;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using Azure.Provisioning.Roles;
using System;

namespace Azure.Provisioning.KubernetesConfiguration;

/// <summary>
/// KubernetesClusterExtension.
/// </summary>
public partial class KubernetesClusterExtension : Resource
{
    /// <summary>
    /// Name of the Extension.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Identity of the Extension resource in an AKS cluster. Current supported
    /// identity types: SystemAssigned, UserAssigned.
    /// </summary>
    public BicepValue<ManagedServiceIdentity> AksAssignedIdentity { get => _aksAssignedIdentity; set => _aksAssignedIdentity.Assign(value); }
    private readonly BicepValue<ManagedServiceIdentity> _aksAssignedIdentity;

    /// <summary>
    /// Flag to note if this extension participates in auto upgrade of minor
    /// version, or not.
    /// </summary>
    public BicepValue<bool> AutoUpgradeMinorVersion { get => _autoUpgradeMinorVersion; set => _autoUpgradeMinorVersion.Assign(value); }
    private readonly BicepValue<bool> _autoUpgradeMinorVersion;

    /// <summary>
    /// Configuration settings that are sensitive, as name-value pairs for
    /// configuring this extension.
    /// </summary>
    public BicepDictionary<string> ConfigurationProtectedSettings { get => _configurationProtectedSettings; set => _configurationProtectedSettings.Assign(value); }
    private readonly BicepDictionary<string> _configurationProtectedSettings;

    /// <summary>
    /// Configuration settings, as name-value pairs for configuring this
    /// extension.
    /// </summary>
    public BicepDictionary<string> ConfigurationSettings { get => _configurationSettings; set => _configurationSettings.Assign(value); }
    private readonly BicepDictionary<string> _configurationSettings;

    /// <summary>
    /// Type of the Extension, of which this resource is an instance of.  It
    /// must be one of the Extension Types registered with
    /// Microsoft.KubernetesConfiguration by the Extension publisher.
    /// </summary>
    public BicepValue<string> ExtensionType { get => _extensionType; set => _extensionType.Assign(value); }
    private readonly BicepValue<string> _extensionType;

    /// <summary>
    /// Identity of the Extension resource. Current supported identity types:
    /// SystemAssigned.
    /// </summary>
    public BicepValue<ManagedServiceIdentity> Identity { get => _identity; set => _identity.Assign(value); }
    private readonly BicepValue<ManagedServiceIdentity> _identity;

    /// <summary>
    /// The plan information.
    /// </summary>
    public BicepValue<ArmPlan> Plan { get => _plan; set => _plan.Assign(value); }
    private readonly BicepValue<ArmPlan> _plan;

    /// <summary>
    /// ReleaseTrain this extension participates in for auto-upgrade (e.g.
    /// Stable, Preview, etc.) - only if autoUpgradeMinorVersion is
    /// &apos;true&apos;.
    /// </summary>
    public BicepValue<string> ReleaseTrain { get => _releaseTrain; set => _releaseTrain.Assign(value); }
    private readonly BicepValue<string> _releaseTrain;

    /// <summary>
    /// Scope at which the extension is installed.
    /// </summary>
    public BicepValue<KubernetesClusterExtensionScope> Scope { get => _scope; set => _scope.Assign(value); }
    private readonly BicepValue<KubernetesClusterExtensionScope> _scope;

    /// <summary>
    /// Status from this extension.
    /// </summary>
    public BicepList<KubernetesClusterExtensionStatus> Statuses { get => _statuses; set => _statuses.Assign(value); }
    private readonly BicepList<KubernetesClusterExtensionStatus> _statuses;

    /// <summary>
    /// User-specified version of the extension for this extension to
    /// &apos;pin&apos;. To use &apos;version&apos;, autoUpgradeMinorVersion
    /// must be &apos;false&apos;.
    /// </summary>
    public BicepValue<string> Version { get => _version; set => _version.Assign(value); }
    private readonly BicepValue<string> _version;

    /// <summary>
    /// Currently installed version of the extension.
    /// </summary>
    public BicepValue<string> CurrentVersion { get => _currentVersion; }
    private readonly BicepValue<string> _currentVersion;

    /// <summary>
    /// Custom Location settings properties.
    /// </summary>
    public BicepDictionary<string> CustomLocationSettings { get => _customLocationSettings; }
    private readonly BicepDictionary<string> _customLocationSettings;

    /// <summary>
    /// Error information from the Agent - e.g. errors during installation.
    /// </summary>
    public BicepValue<ResponseError> ErrorInfo { get => _errorInfo; }
    private readonly BicepValue<ResponseError> _errorInfo;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Flag to note if this extension is a system extension.
    /// </summary>
    public BicepValue<bool> IsSystemExtension { get => _isSystemExtension; }
    private readonly BicepValue<bool> _isSystemExtension;

    /// <summary>
    /// Uri of the Helm package.
    /// </summary>
    public BicepValue<Uri> PackageUri { get => _packageUri; }
    private readonly BicepValue<Uri> _packageUri;

    /// <summary>
    /// Status of installation of this extension.
    /// </summary>
    public BicepValue<KubernetesConfigurationProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<KubernetesConfigurationProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Creates a new KubernetesClusterExtension.
    /// </summary>
    /// <param name="resourceName">Name of the KubernetesClusterExtension.</param>
    /// <param name="resourceVersion">Version of the KubernetesClusterExtension.</param>
    public KubernetesClusterExtension(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.KubernetesConfiguration/extensions", resourceVersion ?? "2023-05-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _aksAssignedIdentity = BicepValue<ManagedServiceIdentity>.DefineProperty(this, "AksAssignedIdentity", ["properties", "aksAssignedIdentity"]);
        _autoUpgradeMinorVersion = BicepValue<bool>.DefineProperty(this, "AutoUpgradeMinorVersion", ["properties", "autoUpgradeMinorVersion"]);
        _configurationProtectedSettings = BicepDictionary<string>.DefineProperty(this, "ConfigurationProtectedSettings", ["properties", "configurationProtectedSettings"]);
        _configurationSettings = BicepDictionary<string>.DefineProperty(this, "ConfigurationSettings", ["properties", "configurationSettings"]);
        _extensionType = BicepValue<string>.DefineProperty(this, "ExtensionType", ["properties", "extensionType"]);
        _identity = BicepValue<ManagedServiceIdentity>.DefineProperty(this, "Identity", ["identity"]);
        _plan = BicepValue<ArmPlan>.DefineProperty(this, "Plan", ["plan"]);
        _releaseTrain = BicepValue<string>.DefineProperty(this, "ReleaseTrain", ["properties", "releaseTrain"]);
        _scope = BicepValue<KubernetesClusterExtensionScope>.DefineProperty(this, "Scope", ["properties", "scope"]);
        _statuses = BicepList<KubernetesClusterExtensionStatus>.DefineProperty(this, "Statuses", ["properties", "statuses"]);
        _version = BicepValue<string>.DefineProperty(this, "Version", ["properties", "version"]);
        _currentVersion = BicepValue<string>.DefineProperty(this, "CurrentVersion", ["properties", "currentVersion"], isOutput: true);
        _customLocationSettings = BicepDictionary<string>.DefineProperty(this, "CustomLocationSettings", ["properties", "customLocationSettings"], isOutput: true);
        _errorInfo = BicepValue<ResponseError>.DefineProperty(this, "ErrorInfo", ["properties", "errorInfo"], isOutput: true);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _isSystemExtension = BicepValue<bool>.DefineProperty(this, "IsSystemExtension", ["properties", "isSystemExtension"], isOutput: true);
        _packageUri = BicepValue<Uri>.DefineProperty(this, "PackageUri", ["properties", "packageUri"], isOutput: true);
        _provisioningState = BicepValue<KubernetesConfigurationProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
    }

    /// <summary>
    /// Supported KubernetesClusterExtension resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2023-05-01.
        /// </summary>
        public static readonly string V2023_05_01 = "2023-05-01";

        /// <summary>
        /// 2022-11-01.
        /// </summary>
        public static readonly string V2022_11_01 = "2022-11-01";

        /// <summary>
        /// 2022-07-01.
        /// </summary>
        public static readonly string V2022_07_01 = "2022-07-01";

        /// <summary>
        /// 2022-03-01.
        /// </summary>
        public static readonly string V2022_03_01 = "2022-03-01";
    }

    /// <summary>
    /// Creates a reference to an existing KubernetesClusterExtension.
    /// </summary>
    /// <param name="resourceName">Name of the KubernetesClusterExtension.</param>
    /// <param name="resourceVersion">Version of the KubernetesClusterExtension.</param>
    /// <returns>The existing KubernetesClusterExtension resource.</returns>
    public static KubernetesClusterExtension FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };

    /// <summary>
    /// Creates a role assignment for a user-assigned identity that grants
    /// access to this KubernetesClusterExtension.
    /// </summary>
    /// <param name="role">The role to grant.</param>
    /// <param name="identity">The <see cref="UserAssignedIdentity"/>.</param>
    /// <returns>The <see cref="RoleAssignment"/>.</returns>
    public RoleAssignment CreateRoleAssignment(KubernetesConfigurationBuiltInRole role, UserAssignedIdentity identity) =>
        new($"{ResourceName}_{identity.ResourceName}_{KubernetesConfigurationBuiltInRole.GetBuiltInRoleName(role)}")
        {
            Name = BicepFunction.CreateGuid(Id, identity.PrincipalId, BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString())),
            Scope = new IdentifierExpression(ResourceName),
            PrincipalType = RoleManagementPrincipalType.ServicePrincipal,
            RoleDefinitionId = BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString()),
            PrincipalId = identity.PrincipalId
        };

    /// <summary>
    /// Creates a role assignment for a principal that grants access to this
    /// KubernetesClusterExtension.
    /// </summary>
    /// <param name="role">The role to grant.</param>
    /// <param name="principalType">The type of the principal to assign to.</param>
    /// <param name="principalId">The principal to assign to.</param>
    /// <param name="resourceNameSuffix">Optional role assignment resource name suffix.</param>
    /// <returns>The <see cref="RoleAssignment"/>.</returns>
    public RoleAssignment CreateRoleAssignment(KubernetesConfigurationBuiltInRole role, BicepValue<RoleManagementPrincipalType> principalType, BicepValue<Guid> principalId, string? resourceNameSuffix = default) =>
        new($"{ResourceName}_{KubernetesConfigurationBuiltInRole.GetBuiltInRoleName(role)}{(resourceNameSuffix is null ? "" : "_")}{resourceNameSuffix}")
        {
            Name = BicepFunction.CreateGuid(Id, principalId, BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString())),
            Scope = new IdentifierExpression(ResourceName),
            PrincipalType = principalType,
            RoleDefinitionId = BicepFunction.GetSubscriptionResourceId("Microsoft.Authorization/roleDefinitions", role.ToString()),
            PrincipalId = principalId
        };
}
