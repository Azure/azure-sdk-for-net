// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.KubernetesConfiguration;

/// <summary>
/// Parameters to reconcile to the GitRepository source kind type.
/// </summary>
public partial class KubernetesGitRepository : ProvisioningConstruct
{
    /// <summary>
    /// The URL to sync for the flux configuration git repository.
    /// </summary>
    public BicepValue<Uri> Uri { get => _uri; set => _uri.Assign(value); }
    private readonly BicepValue<Uri> _uri;

    /// <summary>
    /// The maximum time to attempt to reconcile the cluster git repository
    /// source with the remote.
    /// </summary>
    public BicepValue<long> TimeoutInSeconds { get => _timeoutInSeconds; set => _timeoutInSeconds.Assign(value); }
    private readonly BicepValue<long> _timeoutInSeconds;

    /// <summary>
    /// The interval at which to re-reconcile the cluster git repository source
    /// with the remote.
    /// </summary>
    public BicepValue<long> SyncIntervalInSeconds { get => _syncIntervalInSeconds; set => _syncIntervalInSeconds.Assign(value); }
    private readonly BicepValue<long> _syncIntervalInSeconds;

    /// <summary>
    /// The source reference for the GitRepository object.
    /// </summary>
    public BicepValue<KubernetesGitRepositoryRef> RepositoryRef { get => _repositoryRef; set => _repositoryRef.Assign(value); }
    private readonly BicepValue<KubernetesGitRepositoryRef> _repositoryRef;

    /// <summary>
    /// Base64-encoded known_hosts value containing public SSH keys required to
    /// access private git repositories over SSH.
    /// </summary>
    public BicepValue<string> SshKnownHosts { get => _sshKnownHosts; set => _sshKnownHosts.Assign(value); }
    private readonly BicepValue<string> _sshKnownHosts;

    /// <summary>
    /// Plaintext HTTPS username used to access private git repositories over
    /// HTTPS.
    /// </summary>
    public BicepValue<string> HttpsUser { get => _httpsUser; set => _httpsUser.Assign(value); }
    private readonly BicepValue<string> _httpsUser;

    /// <summary>
    /// Base64-encoded HTTPS certificate authority contents used to access git
    /// private git repositories over HTTPS.
    /// </summary>
    public BicepValue<string> HttpsCACert { get => _httpsCACert; set => _httpsCACert.Assign(value); }
    private readonly BicepValue<string> _httpsCACert;

    /// <summary>
    /// Name of a local secret on the Kubernetes cluster to use as the
    /// authentication secret rather than the managed or user-provided
    /// configuration secrets.
    /// </summary>
    public BicepValue<string> LocalAuthRef { get => _localAuthRef; set => _localAuthRef.Assign(value); }
    private readonly BicepValue<string> _localAuthRef;

    /// <summary>
    /// Creates a new KubernetesGitRepository.
    /// </summary>
    public KubernetesGitRepository()
    {
        _uri = BicepValue<Uri>.DefineProperty(this, "Uri", ["url"]);
        _timeoutInSeconds = BicepValue<long>.DefineProperty(this, "TimeoutInSeconds", ["timeoutInSeconds"]);
        _syncIntervalInSeconds = BicepValue<long>.DefineProperty(this, "SyncIntervalInSeconds", ["syncIntervalInSeconds"]);
        _repositoryRef = BicepValue<KubernetesGitRepositoryRef>.DefineProperty(this, "RepositoryRef", ["repositoryRef"]);
        _sshKnownHosts = BicepValue<string>.DefineProperty(this, "SshKnownHosts", ["sshKnownHosts"]);
        _httpsUser = BicepValue<string>.DefineProperty(this, "HttpsUser", ["httpsUser"]);
        _httpsCACert = BicepValue<string>.DefineProperty(this, "HttpsCACert", ["httpsCACert"]);
        _localAuthRef = BicepValue<string>.DefineProperty(this, "LocalAuthRef", ["localAuthRef"]);
    }
}
