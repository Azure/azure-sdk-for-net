// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.KubernetesConfiguration;

/// <summary>
/// Parameters to reconcile to the AzureBlob source kind type.
/// </summary>
public partial class KubernetesAzureBlob : ProvisioningConstruct
{
    /// <summary>
    /// The URL to sync for the flux configuration Azure Blob storage account.
    /// </summary>
    public BicepValue<Uri> Uri { get => _uri; set => _uri.Assign(value); }
    private readonly BicepValue<Uri> _uri;

    /// <summary>
    /// The Azure Blob container name to sync from the url endpoint for the
    /// flux configuration.
    /// </summary>
    public BicepValue<string> ContainerName { get => _containerName; set => _containerName.Assign(value); }
    private readonly BicepValue<string> _containerName;

    /// <summary>
    /// The maximum time to attempt to reconcile the cluster Azure Blob source
    /// with the remote.
    /// </summary>
    public BicepValue<long> TimeoutInSeconds { get => _timeoutInSeconds; set => _timeoutInSeconds.Assign(value); }
    private readonly BicepValue<long> _timeoutInSeconds;

    /// <summary>
    /// The interval at which to re-reconcile the cluster Azure Blob source
    /// with the remote.
    /// </summary>
    public BicepValue<long> SyncIntervalInSeconds { get => _syncIntervalInSeconds; set => _syncIntervalInSeconds.Assign(value); }
    private readonly BicepValue<long> _syncIntervalInSeconds;

    /// <summary>
    /// Parameters to authenticate using Service Principal.
    /// </summary>
    public BicepValue<KubernetesServicePrincipal> ServicePrincipal { get => _servicePrincipal; set => _servicePrincipal.Assign(value); }
    private readonly BicepValue<KubernetesServicePrincipal> _servicePrincipal;

    /// <summary>
    /// The account key (shared key) to access the storage account.
    /// </summary>
    public BicepValue<string> AccountKey { get => _accountKey; set => _accountKey.Assign(value); }
    private readonly BicepValue<string> _accountKey;

    /// <summary>
    /// The Shared Access token to access the storage container.
    /// </summary>
    public BicepValue<string> SasToken { get => _sasToken; set => _sasToken.Assign(value); }
    private readonly BicepValue<string> _sasToken;

    /// <summary>
    /// The client Id for authenticating a Managed Identity.
    /// </summary>
    public BicepValue<Guid> ManagedIdentityClientId { get => _managedIdentityClientId; set => _managedIdentityClientId.Assign(value); }
    private readonly BicepValue<Guid> _managedIdentityClientId;

    /// <summary>
    /// Name of a local secret on the Kubernetes cluster to use as the
    /// authentication secret rather than the managed or user-provided
    /// configuration secrets.
    /// </summary>
    public BicepValue<string> LocalAuthRef { get => _localAuthRef; set => _localAuthRef.Assign(value); }
    private readonly BicepValue<string> _localAuthRef;

    /// <summary>
    /// Creates a new KubernetesAzureBlob.
    /// </summary>
    public KubernetesAzureBlob()
    {
        _uri = BicepValue<Uri>.DefineProperty(this, "Uri", ["url"]);
        _containerName = BicepValue<string>.DefineProperty(this, "ContainerName", ["containerName"]);
        _timeoutInSeconds = BicepValue<long>.DefineProperty(this, "TimeoutInSeconds", ["timeoutInSeconds"]);
        _syncIntervalInSeconds = BicepValue<long>.DefineProperty(this, "SyncIntervalInSeconds", ["syncIntervalInSeconds"]);
        _servicePrincipal = BicepValue<KubernetesServicePrincipal>.DefineProperty(this, "ServicePrincipal", ["servicePrincipal"]);
        _accountKey = BicepValue<string>.DefineProperty(this, "AccountKey", ["accountKey"]);
        _sasToken = BicepValue<string>.DefineProperty(this, "SasToken", ["sasToken"]);
        _managedIdentityClientId = BicepValue<Guid>.DefineProperty(this, "ManagedIdentityClientId", ["managedIdentity", "clientId"]);
        _localAuthRef = BicepValue<string>.DefineProperty(this, "LocalAuthRef", ["localAuthRef"]);
    }
}
