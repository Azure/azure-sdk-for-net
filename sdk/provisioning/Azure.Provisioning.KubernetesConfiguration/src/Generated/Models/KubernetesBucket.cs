// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.KubernetesConfiguration;

/// <summary>
/// Parameters to reconcile to the Bucket source kind type.
/// </summary>
public partial class KubernetesBucket : ProvisioningConstruct
{
    /// <summary>
    /// The URL to sync for the flux configuration S3 bucket.
    /// </summary>
    public BicepValue<Uri> Uri { get => _uri; set => _uri.Assign(value); }
    private readonly BicepValue<Uri> _uri;

    /// <summary>
    /// The bucket name to sync from the url endpoint for the flux
    /// configuration.
    /// </summary>
    public BicepValue<string> BucketName { get => _bucketName; set => _bucketName.Assign(value); }
    private readonly BicepValue<string> _bucketName;

    /// <summary>
    /// Specify whether to use insecure communication when puling data from the
    /// S3 bucket.
    /// </summary>
    public BicepValue<bool> UseInsecureCommunication { get => _useInsecureCommunication; set => _useInsecureCommunication.Assign(value); }
    private readonly BicepValue<bool> _useInsecureCommunication;

    /// <summary>
    /// The maximum time to attempt to reconcile the cluster bucket source with
    /// the remote.
    /// </summary>
    public BicepValue<long> TimeoutInSeconds { get => _timeoutInSeconds; set => _timeoutInSeconds.Assign(value); }
    private readonly BicepValue<long> _timeoutInSeconds;

    /// <summary>
    /// The interval at which to re-reconcile the cluster bucket source with
    /// the remote.
    /// </summary>
    public BicepValue<long> SyncIntervalInSeconds { get => _syncIntervalInSeconds; set => _syncIntervalInSeconds.Assign(value); }
    private readonly BicepValue<long> _syncIntervalInSeconds;

    /// <summary>
    /// Plaintext access key used to securely access the S3 bucket.
    /// </summary>
    public BicepValue<string> AccessKey { get => _accessKey; set => _accessKey.Assign(value); }
    private readonly BicepValue<string> _accessKey;

    /// <summary>
    /// Name of a local secret on the Kubernetes cluster to use as the
    /// authentication secret rather than the managed or user-provided
    /// configuration secrets.
    /// </summary>
    public BicepValue<string> LocalAuthRef { get => _localAuthRef; set => _localAuthRef.Assign(value); }
    private readonly BicepValue<string> _localAuthRef;

    /// <summary>
    /// Creates a new KubernetesBucket.
    /// </summary>
    public KubernetesBucket()
    {
        _uri = BicepValue<Uri>.DefineProperty(this, "Uri", ["url"]);
        _bucketName = BicepValue<string>.DefineProperty(this, "BucketName", ["bucketName"]);
        _useInsecureCommunication = BicepValue<bool>.DefineProperty(this, "UseInsecureCommunication", ["insecure"]);
        _timeoutInSeconds = BicepValue<long>.DefineProperty(this, "TimeoutInSeconds", ["timeoutInSeconds"]);
        _syncIntervalInSeconds = BicepValue<long>.DefineProperty(this, "SyncIntervalInSeconds", ["syncIntervalInSeconds"]);
        _accessKey = BicepValue<string>.DefineProperty(this, "AccessKey", ["accessKey"]);
        _localAuthRef = BicepValue<string>.DefineProperty(this, "LocalAuthRef", ["localAuthRef"]);
    }
}
