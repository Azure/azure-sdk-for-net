// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Provisioning;
using Azure.Provisioning.Primitives;
using System;

namespace Azure.Provisioning.KubernetesConfiguration;

/// <summary>
/// The Kustomization defining how to reconcile the artifact pulled by the
/// source type on the cluster.
/// </summary>
public partial class Kustomization : ProvisioningConstruct
{
    /// <summary>
    /// Name of the Kustomization, matching the key in the Kustomizations
    /// object map.
    /// </summary>
    public BicepValue<string> Name { get => _name; }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// The path in the source reference to reconcile on the cluster.
    /// </summary>
    public BicepValue<string> Path { get => _path; set => _path.Assign(value); }
    private readonly BicepValue<string> _path;

    /// <summary>
    /// Specifies other Kustomizations that this Kustomization depends on. This
    /// Kustomization will not reconcile until all dependencies have completed
    /// their reconciliation.
    /// </summary>
    public BicepList<string> DependsOn { get => _dependsOn; set => _dependsOn.Assign(value); }
    private readonly BicepList<string> _dependsOn;

    /// <summary>
    /// The maximum time to attempt to reconcile the Kustomization on the
    /// cluster.
    /// </summary>
    public BicepValue<long> TimeoutInSeconds { get => _timeoutInSeconds; set => _timeoutInSeconds.Assign(value); }
    private readonly BicepValue<long> _timeoutInSeconds;

    /// <summary>
    /// The interval at which to re-reconcile the Kustomization on the cluster.
    /// </summary>
    public BicepValue<long> SyncIntervalInSeconds { get => _syncIntervalInSeconds; set => _syncIntervalInSeconds.Assign(value); }
    private readonly BicepValue<long> _syncIntervalInSeconds;

    /// <summary>
    /// The interval at which to re-reconcile the Kustomization on the cluster
    /// in the event of failure on reconciliation.
    /// </summary>
    public BicepValue<long> RetryIntervalInSeconds { get => _retryIntervalInSeconds; set => _retryIntervalInSeconds.Assign(value); }
    private readonly BicepValue<long> _retryIntervalInSeconds;

    /// <summary>
    /// Enable/disable garbage collections of Kubernetes objects created by
    /// this Kustomization.
    /// </summary>
    public BicepValue<bool> Prune { get => _prune; set => _prune.Assign(value); }
    private readonly BicepValue<bool> _prune;

    /// <summary>
    /// Enable/disable re-creating Kubernetes resources on the cluster when
    /// patching fails due to an immutable field change.
    /// </summary>
    public BicepValue<bool> Force { get => _force; set => _force.Assign(value); }
    private readonly BicepValue<bool> _force;

    /// <summary>
    /// Creates a new Kustomization.
    /// </summary>
    public Kustomization()
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isOutput: true);
        _path = BicepValue<string>.DefineProperty(this, "Path", ["path"]);
        _dependsOn = BicepList<string>.DefineProperty(this, "DependsOn", ["dependsOn"]);
        _timeoutInSeconds = BicepValue<long>.DefineProperty(this, "TimeoutInSeconds", ["timeoutInSeconds"]);
        _syncIntervalInSeconds = BicepValue<long>.DefineProperty(this, "SyncIntervalInSeconds", ["syncIntervalInSeconds"]);
        _retryIntervalInSeconds = BicepValue<long>.DefineProperty(this, "RetryIntervalInSeconds", ["retryIntervalInSeconds"]);
        _prune = BicepValue<bool>.DefineProperty(this, "Prune", ["prune"]);
        _force = BicepValue<bool>.DefineProperty(this, "Force", ["force"]);
    }
}
