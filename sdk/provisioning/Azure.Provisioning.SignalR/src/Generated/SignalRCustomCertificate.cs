// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using Azure.Core;
using Azure.Provisioning.Primitives;
using Azure.Provisioning.Resources;
using System;

namespace Azure.Provisioning.SignalR;

/// <summary>
/// SignalRCustomCertificate.
/// </summary>
public partial class SignalRCustomCertificate : Resource
{
    /// <summary>
    /// Custom certificate name.
    /// </summary>
    public BicepValue<string> Name { get => _name; set => _name.Assign(value); }
    private readonly BicepValue<string> _name;

    /// <summary>
    /// Base uri of the KeyVault that stores certificate.
    /// </summary>
    public BicepValue<Uri> KeyVaultBaseUri { get => _keyVaultBaseUri; set => _keyVaultBaseUri.Assign(value); }
    private readonly BicepValue<Uri> _keyVaultBaseUri;

    /// <summary>
    /// Certificate secret name.
    /// </summary>
    public BicepValue<string> KeyVaultSecretName { get => _keyVaultSecretName; set => _keyVaultSecretName.Assign(value); }
    private readonly BicepValue<string> _keyVaultSecretName;

    /// <summary>
    /// Certificate secret version.
    /// </summary>
    public BicepValue<string> KeyVaultSecretVersion { get => _keyVaultSecretVersion; set => _keyVaultSecretVersion.Assign(value); }
    private readonly BicepValue<string> _keyVaultSecretVersion;

    /// <summary>
    /// Gets the Id.
    /// </summary>
    public BicepValue<ResourceIdentifier> Id { get => _id; }
    private readonly BicepValue<ResourceIdentifier> _id;

    /// <summary>
    /// Provisioning state of the resource.
    /// </summary>
    public BicepValue<SignalRProvisioningState> ProvisioningState { get => _provisioningState; }
    private readonly BicepValue<SignalRProvisioningState> _provisioningState;

    /// <summary>
    /// Gets the SystemData.
    /// </summary>
    public BicepValue<SystemData> SystemData { get => _systemData; }
    private readonly BicepValue<SystemData> _systemData;

    /// <summary>
    /// Gets or sets a reference to the parent SignalRService.
    /// </summary>
    public SignalRService? Parent { get => _parent!.Value; set => _parent!.Value = value; }
    private readonly ResourceReference<SignalRService> _parent;

    /// <summary>
    /// Creates a new SignalRCustomCertificate.
    /// </summary>
    /// <param name="resourceName">Name of the SignalRCustomCertificate.</param>
    /// <param name="resourceVersion">Version of the SignalRCustomCertificate.</param>
    public SignalRCustomCertificate(string resourceName, string? resourceVersion = default)
        : base(resourceName, "Microsoft.SignalRService/signalR/customCertificates", resourceVersion ?? "2024-03-01")
    {
        _name = BicepValue<string>.DefineProperty(this, "Name", ["name"], isRequired: true);
        _keyVaultBaseUri = BicepValue<Uri>.DefineProperty(this, "KeyVaultBaseUri", ["properties", "keyVaultBaseUri"], isRequired: true);
        _keyVaultSecretName = BicepValue<string>.DefineProperty(this, "KeyVaultSecretName", ["properties", "keyVaultSecretName"], isRequired: true);
        _keyVaultSecretVersion = BicepValue<string>.DefineProperty(this, "KeyVaultSecretVersion", ["properties", "keyVaultSecretVersion"]);
        _id = BicepValue<ResourceIdentifier>.DefineProperty(this, "Id", ["id"], isOutput: true);
        _provisioningState = BicepValue<SignalRProvisioningState>.DefineProperty(this, "ProvisioningState", ["properties", "provisioningState"], isOutput: true);
        _systemData = BicepValue<SystemData>.DefineProperty(this, "SystemData", ["systemData"], isOutput: true);
        _parent = ResourceReference<SignalRService>.DefineResource(this, "Parent", ["parent"], isRequired: true);
    }

    /// <summary>
    /// Supported SignalRCustomCertificate resource versions.
    /// </summary>
    public static class ResourceVersions
    {
        /// <summary>
        /// 2024-04-01-preview.
        /// </summary>
        public static readonly string V2024_04_01_preview = "2024-04-01-preview";

        /// <summary>
        /// 2024-03-01.
        /// </summary>
        public static readonly string V2024_03_01 = "2024-03-01";

        /// <summary>
        /// 2023-02-01.
        /// </summary>
        public static readonly string V2023_02_01 = "2023-02-01";

        /// <summary>
        /// 2022-02-01.
        /// </summary>
        public static readonly string V2022_02_01 = "2022-02-01";

        /// <summary>
        /// 2021-10-01.
        /// </summary>
        public static readonly string V2021_10_01 = "2021-10-01";

        /// <summary>
        /// 2020-05-01.
        /// </summary>
        public static readonly string V2020_05_01 = "2020-05-01";

        /// <summary>
        /// 2018-10-01.
        /// </summary>
        public static readonly string V2018_10_01 = "2018-10-01";
    }

    /// <summary>
    /// Creates a reference to an existing SignalRCustomCertificate.
    /// </summary>
    /// <param name="resourceName">Name of the SignalRCustomCertificate.</param>
    /// <param name="resourceVersion">Version of the SignalRCustomCertificate.</param>
    /// <returns>The existing SignalRCustomCertificate resource.</returns>
    public static SignalRCustomCertificate FromExisting(string resourceName, string? resourceVersion = default) =>
        new(resourceName, resourceVersion) { IsExistingResource = true };
}
