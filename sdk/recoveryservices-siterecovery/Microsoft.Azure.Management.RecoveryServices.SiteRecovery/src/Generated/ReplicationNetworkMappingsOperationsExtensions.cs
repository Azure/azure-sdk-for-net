// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReplicationNetworkMappingsOperations.
    /// </summary>
    public static partial class ReplicationNetworkMappingsOperationsExtensions
    {
            /// <summary>
            /// Gets all the network mappings under a network.
            /// </summary>
            /// <remarks>
            /// Lists all ASR network mappings for the specified network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            public static IPage<NetworkMapping> ListByReplicationNetworks(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName)
            {
                return operations.ListByReplicationNetworksAsync(fabricName, networkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the network mappings under a network.
            /// </summary>
            /// <remarks>
            /// Lists all ASR network mappings for the specified network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkMapping>> ListByReplicationNetworksAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationNetworksWithHttpMessagesAsync(fabricName, networkName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets network mapping by name.
            /// </summary>
            /// <remarks>
            /// Gets the details of an ASR network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            public static NetworkMapping Get(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName)
            {
                return operations.GetAsync(fabricName, networkName, networkMappingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets network mapping by name.
            /// </summary>
            /// <remarks>
            /// Gets the details of an ASR network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkMapping> GetAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, networkName, networkMappingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Create network mapping input.
            /// </param>
            public static NetworkMapping Create(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CreateNetworkMappingInput input)
            {
                return operations.CreateAsync(fabricName, networkName, networkMappingName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Create network mapping input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkMapping> CreateAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CreateNetworkMappingInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(fabricName, networkName, networkMappingName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to delete a network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// ARM Resource Name for network mapping.
            /// </param>
            public static void Delete(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName)
            {
                operations.DeleteAsync(fabricName, networkName, networkMappingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to delete a network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// ARM Resource Name for network mapping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(fabricName, networkName, networkMappingName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to update an ASR network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Update network mapping input.
            /// </param>
            public static NetworkMapping Update(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, UpdateNetworkMappingInput input)
            {
                return operations.UpdateAsync(fabricName, networkName, networkMappingName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to update an ASR network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Update network mapping input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkMapping> UpdateAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, UpdateNetworkMappingInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(fabricName, networkName, networkMappingName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the network mappings under a vault.
            /// </summary>
            /// <remarks>
            /// Lists all ASR network mappings in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<NetworkMapping> List(this IReplicationNetworkMappingsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the network mappings under a vault.
            /// </summary>
            /// <remarks>
            /// Lists all ASR network mappings in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkMapping>> ListAsync(this IReplicationNetworkMappingsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Create network mapping input.
            /// </param>
            public static NetworkMapping BeginCreate(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CreateNetworkMappingInput input)
            {
                return operations.BeginCreateAsync(fabricName, networkName, networkMappingName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Create network mapping input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkMapping> BeginCreateAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CreateNetworkMappingInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fabricName, networkName, networkMappingName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to delete a network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// ARM Resource Name for network mapping.
            /// </param>
            public static void BeginDelete(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName)
            {
                operations.BeginDeleteAsync(fabricName, networkName, networkMappingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to delete a network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// ARM Resource Name for network mapping.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(fabricName, networkName, networkMappingName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to update an ASR network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Update network mapping input.
            /// </param>
            public static NetworkMapping BeginUpdate(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, UpdateNetworkMappingInput input)
            {
                return operations.BeginUpdateAsync(fabricName, networkName, networkMappingName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates network mapping.
            /// </summary>
            /// <remarks>
            /// The operation to update an ASR network mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Primary fabric name.
            /// </param>
            /// <param name='networkName'>
            /// Primary network name.
            /// </param>
            /// <param name='networkMappingName'>
            /// Network mapping name.
            /// </param>
            /// <param name='input'>
            /// Update network mapping input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkMapping> BeginUpdateAsync(this IReplicationNetworkMappingsOperations operations, string fabricName, string networkName, string networkMappingName, UpdateNetworkMappingInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(fabricName, networkName, networkMappingName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the network mappings under a network.
            /// </summary>
            /// <remarks>
            /// Lists all ASR network mappings for the specified network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NetworkMapping> ListByReplicationNetworksNext(this IReplicationNetworkMappingsOperations operations, string nextPageLink)
            {
                return operations.ListByReplicationNetworksNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the network mappings under a network.
            /// </summary>
            /// <remarks>
            /// Lists all ASR network mappings for the specified network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkMapping>> ListByReplicationNetworksNextAsync(this IReplicationNetworkMappingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationNetworksNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the network mappings under a vault.
            /// </summary>
            /// <remarks>
            /// Lists all ASR network mappings in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NetworkMapping> ListNext(this IReplicationNetworkMappingsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the network mappings under a vault.
            /// </summary>
            /// <remarks>
            /// Lists all ASR network mappings in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkMapping>> ListNextAsync(this IReplicationNetworkMappingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
