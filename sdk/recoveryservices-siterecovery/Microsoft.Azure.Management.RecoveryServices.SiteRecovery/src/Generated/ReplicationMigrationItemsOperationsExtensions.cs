// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReplicationMigrationItemsOperations.
    /// </summary>
    public static partial class ReplicationMigrationItemsOperationsExtensions
    {
            /// <summary>
            /// Gets the list of migration items in the protection container.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR migration items in the protection container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            public static IPage<MigrationItem> ListByReplicationProtectionContainers(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName)
            {
                return operations.ListByReplicationProtectionContainersAsync(fabricName, protectionContainerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of migration items in the protection container.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR migration items in the protection container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MigrationItem>> ListByReplicationProtectionContainersAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationProtectionContainersWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of a migration item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            public static MigrationItem Get(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName)
            {
                return operations.GetAsync(fabricName, protectionContainerName, migrationItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a migration item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> GetAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Enables migration.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR migration item (enable migration).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Enable migration input.
            /// </param>
            public static MigrationItem Create(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, EnableMigrationInput input)
            {
                return operations.CreateAsync(fabricName, protectionContainerName, migrationItemName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enables migration.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR migration item (enable migration).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Enable migration input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> CreateAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, EnableMigrationInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the migration item.
            /// </summary>
            /// <remarks>
            /// The operation to delete an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='deleteOption'>
            /// The delete option.
            /// </param>
            public static void Delete(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, string deleteOption = default(string))
            {
                operations.DeleteAsync(fabricName, protectionContainerName, migrationItemName, deleteOption).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the migration item.
            /// </summary>
            /// <remarks>
            /// The operation to delete an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='deleteOption'>
            /// The delete option.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, string deleteOption = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, deleteOption, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates migration item.
            /// </summary>
            /// <remarks>
            /// The operation to update the recovery settings of an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Update migration item input.
            /// </param>
            public static MigrationItem Update(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, UpdateMigrationItemInput input)
            {
                return operations.UpdateAsync(fabricName, protectionContainerName, migrationItemName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates migration item.
            /// </summary>
            /// <remarks>
            /// The operation to update the recovery settings of an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Update migration item input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> UpdateAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, UpdateMigrationItemInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrate item.
            /// </summary>
            /// <remarks>
            /// The operation to initiate migration of the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='migrateInput'>
            /// Migrate input.
            /// </param>
            public static MigrationItem Migrate(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, MigrateInput migrateInput)
            {
                return operations.MigrateAsync(fabricName, protectionContainerName, migrationItemName, migrateInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate item.
            /// </summary>
            /// <remarks>
            /// The operation to initiate migration of the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='migrateInput'>
            /// Migrate input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> MigrateAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, MigrateInput migrateInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, migrateInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resynchronizes replication.
            /// </summary>
            /// <remarks>
            /// The operation to resynchronize replication of an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Resync input.
            /// </param>
            public static MigrationItem Resync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, ResyncInput input)
            {
                return operations.ResyncAsync(fabricName, protectionContainerName, migrationItemName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resynchronizes replication.
            /// </summary>
            /// <remarks>
            /// The operation to resynchronize replication of an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Resync input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> ResyncAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, ResyncInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResyncWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Test migrate item.
            /// </summary>
            /// <remarks>
            /// The operation to initiate test migration of the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='testMigrateInput'>
            /// Test migrate input.
            /// </param>
            public static MigrationItem TestMigrate(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, TestMigrateInput testMigrateInput)
            {
                return operations.TestMigrateAsync(fabricName, protectionContainerName, migrationItemName, testMigrateInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Test migrate item.
            /// </summary>
            /// <remarks>
            /// The operation to initiate test migration of the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='testMigrateInput'>
            /// Test migrate input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> TestMigrateAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, TestMigrateInput testMigrateInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestMigrateWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, testMigrateInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Test migrate cleanup.
            /// </summary>
            /// <remarks>
            /// The operation to initiate test migrate cleanup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='testMigrateCleanupInput'>
            /// Test migrate cleanup input.
            /// </param>
            public static MigrationItem TestMigrateCleanup(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput)
            {
                return operations.TestMigrateCleanupAsync(fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Test migrate cleanup.
            /// </summary>
            /// <remarks>
            /// The operation to initiate test migrate cleanup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='testMigrateCleanupInput'>
            /// Test migrate cleanup input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> TestMigrateCleanupAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestMigrateCleanupWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of migration items in the vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='skipToken'>
            /// The pagination token.
            /// </param>
            public static IPage<MigrationItem> List(this IReplicationMigrationItemsOperations operations, ODataQuery<MigrationItemsQueryParameter> odataQuery = default(ODataQuery<MigrationItemsQueryParameter>), string skipToken = default(string))
            {
                return operations.ListAsync(odataQuery, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of migration items in the vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='skipToken'>
            /// The pagination token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MigrationItem>> ListAsync(this IReplicationMigrationItemsOperations operations, ODataQuery<MigrationItemsQueryParameter> odataQuery = default(ODataQuery<MigrationItemsQueryParameter>), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(odataQuery, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Enables migration.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR migration item (enable migration).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Enable migration input.
            /// </param>
            public static MigrationItem BeginCreate(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, EnableMigrationInput input)
            {
                return operations.BeginCreateAsync(fabricName, protectionContainerName, migrationItemName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enables migration.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR migration item (enable migration).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Enable migration input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> BeginCreateAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, EnableMigrationInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the migration item.
            /// </summary>
            /// <remarks>
            /// The operation to delete an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='deleteOption'>
            /// The delete option.
            /// </param>
            public static void BeginDelete(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, string deleteOption = default(string))
            {
                operations.BeginDeleteAsync(fabricName, protectionContainerName, migrationItemName, deleteOption).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the migration item.
            /// </summary>
            /// <remarks>
            /// The operation to delete an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='deleteOption'>
            /// The delete option.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, string deleteOption = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, deleteOption, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates migration item.
            /// </summary>
            /// <remarks>
            /// The operation to update the recovery settings of an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Update migration item input.
            /// </param>
            public static MigrationItem BeginUpdate(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, UpdateMigrationItemInput input)
            {
                return operations.BeginUpdateAsync(fabricName, protectionContainerName, migrationItemName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates migration item.
            /// </summary>
            /// <remarks>
            /// The operation to update the recovery settings of an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Update migration item input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> BeginUpdateAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, UpdateMigrationItemInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrate item.
            /// </summary>
            /// <remarks>
            /// The operation to initiate migration of the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='migrateInput'>
            /// Migrate input.
            /// </param>
            public static MigrationItem BeginMigrate(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, MigrateInput migrateInput)
            {
                return operations.BeginMigrateAsync(fabricName, protectionContainerName, migrationItemName, migrateInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate item.
            /// </summary>
            /// <remarks>
            /// The operation to initiate migration of the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='migrateInput'>
            /// Migrate input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> BeginMigrateAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, MigrateInput migrateInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, migrateInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resynchronizes replication.
            /// </summary>
            /// <remarks>
            /// The operation to resynchronize replication of an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Resync input.
            /// </param>
            public static MigrationItem BeginResync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, ResyncInput input)
            {
                return operations.BeginResyncAsync(fabricName, protectionContainerName, migrationItemName, input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resynchronizes replication.
            /// </summary>
            /// <remarks>
            /// The operation to resynchronize replication of an ASR migration item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='input'>
            /// Resync input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> BeginResyncAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, ResyncInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResyncWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Test migrate item.
            /// </summary>
            /// <remarks>
            /// The operation to initiate test migration of the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='testMigrateInput'>
            /// Test migrate input.
            /// </param>
            public static MigrationItem BeginTestMigrate(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, TestMigrateInput testMigrateInput)
            {
                return operations.BeginTestMigrateAsync(fabricName, protectionContainerName, migrationItemName, testMigrateInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Test migrate item.
            /// </summary>
            /// <remarks>
            /// The operation to initiate test migration of the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='testMigrateInput'>
            /// Test migrate input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> BeginTestMigrateAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, TestMigrateInput testMigrateInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTestMigrateWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, testMigrateInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Test migrate cleanup.
            /// </summary>
            /// <remarks>
            /// The operation to initiate test migrate cleanup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='testMigrateCleanupInput'>
            /// Test migrate cleanup input.
            /// </param>
            public static MigrationItem BeginTestMigrateCleanup(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput)
            {
                return operations.BeginTestMigrateCleanupAsync(fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Test migrate cleanup.
            /// </summary>
            /// <remarks>
            /// The operation to initiate test migrate cleanup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='migrationItemName'>
            /// Migration item name.
            /// </param>
            /// <param name='testMigrateCleanupInput'>
            /// Test migrate cleanup input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrationItem> BeginTestMigrateCleanupAsync(this IReplicationMigrationItemsOperations operations, string fabricName, string protectionContainerName, string migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTestMigrateCleanupWithHttpMessagesAsync(fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of migration items in the protection container.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR migration items in the protection container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MigrationItem> ListByReplicationProtectionContainersNext(this IReplicationMigrationItemsOperations operations, string nextPageLink)
            {
                return operations.ListByReplicationProtectionContainersNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of migration items in the protection container.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR migration items in the protection container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MigrationItem>> ListByReplicationProtectionContainersNextAsync(this IReplicationMigrationItemsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationProtectionContainersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of migration items in the vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MigrationItem> ListNext(this IReplicationMigrationItemsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of migration items in the vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MigrationItem>> ListNextAsync(this IReplicationMigrationItemsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
