// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReplicationProtectionContainerMappingsOperations.
    /// </summary>
    public static partial class ReplicationProtectionContainerMappingsOperationsExtensions
    {
            /// <summary>
            /// Gets the list of protection container mappings for a protection container.
            /// </summary>
            /// <remarks>
            /// Lists the protection container mappings for a protection container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            public static IPage<ProtectionContainerMapping> ListByReplicationProtectionContainers(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName)
            {
                return operations.ListByReplicationProtectionContainersAsync(fabricName, protectionContainerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of protection container mappings for a protection container.
            /// </summary>
            /// <remarks>
            /// Lists the protection container mappings for a protection container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> ListByReplicationProtectionContainersAsync(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationProtectionContainersWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a protection container mapping.
            /// </summary>
            /// <remarks>
            /// Gets the details of a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection Container mapping name.
            /// </param>
            public static ProtectionContainerMapping Get(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName)
            {
                return operations.GetAsync(fabricName, protectionContainerName, mappingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a protection container mapping.
            /// </summary>
            /// <remarks>
            /// Gets the details of a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection Container mapping name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainerMapping> GetAsync(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to create a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='creationInput'>
            /// Mapping creation input.
            /// </param>
            public static ProtectionContainerMapping Create(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CreateProtectionContainerMappingInput creationInput)
            {
                return operations.CreateAsync(fabricName, protectionContainerName, mappingName, creationInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to create a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='creationInput'>
            /// Mapping creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainerMapping> CreateAsync(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CreateProtectionContainerMappingInput creationInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, creationInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Purge protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to purge(force delete) a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            public static void Purge(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName)
            {
                operations.PurgeAsync(fabricName, protectionContainerName, mappingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purge protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to purge(force delete) a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeAsync(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PurgeWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to update protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='updateInput'>
            /// Mapping update input.
            /// </param>
            public static ProtectionContainerMapping Update(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, UpdateProtectionContainerMappingInput updateInput)
            {
                return operations.UpdateAsync(fabricName, protectionContainerName, mappingName, updateInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to update protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='updateInput'>
            /// Mapping update input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainerMapping> UpdateAsync(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, UpdateProtectionContainerMappingInput updateInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, updateInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to delete or remove a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='removalInput'>
            /// Removal input.
            /// </param>
            public static void Delete(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, RemoveProtectionContainerMappingInput removalInput)
            {
                operations.DeleteAsync(fabricName, protectionContainerName, mappingName, removalInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to delete or remove a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='removalInput'>
            /// Removal input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, RemoveProtectionContainerMappingInput removalInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, removalInput, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <remarks>
            /// Lists the protection container mappings in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ProtectionContainerMapping> List(this IReplicationProtectionContainerMappingsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <remarks>
            /// Lists the protection container mappings in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> ListAsync(this IReplicationProtectionContainerMappingsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to create a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='creationInput'>
            /// Mapping creation input.
            /// </param>
            public static ProtectionContainerMapping BeginCreate(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CreateProtectionContainerMappingInput creationInput)
            {
                return operations.BeginCreateAsync(fabricName, protectionContainerName, mappingName, creationInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to create a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='creationInput'>
            /// Mapping creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainerMapping> BeginCreateAsync(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CreateProtectionContainerMappingInput creationInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, creationInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Purge protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to purge(force delete) a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            public static void BeginPurge(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName)
            {
                operations.BeginPurgeAsync(fabricName, protectionContainerName, mappingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purge protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to purge(force delete) a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPurgeAsync(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginPurgeWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to update protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='updateInput'>
            /// Mapping update input.
            /// </param>
            public static ProtectionContainerMapping BeginUpdate(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, UpdateProtectionContainerMappingInput updateInput)
            {
                return operations.BeginUpdateAsync(fabricName, protectionContainerName, mappingName, updateInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to update protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='updateInput'>
            /// Mapping update input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainerMapping> BeginUpdateAsync(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, UpdateProtectionContainerMappingInput updateInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, updateInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to delete or remove a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='removalInput'>
            /// Removal input.
            /// </param>
            public static void BeginDelete(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, RemoveProtectionContainerMappingInput removalInput)
            {
                operations.BeginDeleteAsync(fabricName, protectionContainerName, mappingName, removalInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove protection container mapping.
            /// </summary>
            /// <remarks>
            /// The operation to delete or remove a protection container mapping.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Protection container mapping name.
            /// </param>
            /// <param name='removalInput'>
            /// Removal input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IReplicationProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, RemoveProtectionContainerMappingInput removalInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, removalInput, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the list of protection container mappings for a protection container.
            /// </summary>
            /// <remarks>
            /// Lists the protection container mappings for a protection container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProtectionContainerMapping> ListByReplicationProtectionContainersNext(this IReplicationProtectionContainerMappingsOperations operations, string nextPageLink)
            {
                return operations.ListByReplicationProtectionContainersNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of protection container mappings for a protection container.
            /// </summary>
            /// <remarks>
            /// Lists the protection container mappings for a protection container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> ListByReplicationProtectionContainersNextAsync(this IReplicationProtectionContainerMappingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationProtectionContainersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <remarks>
            /// Lists the protection container mappings in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProtectionContainerMapping> ListNext(this IReplicationProtectionContainerMappingsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <remarks>
            /// Lists the protection container mappings in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> ListNextAsync(this IReplicationProtectionContainerMappingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
