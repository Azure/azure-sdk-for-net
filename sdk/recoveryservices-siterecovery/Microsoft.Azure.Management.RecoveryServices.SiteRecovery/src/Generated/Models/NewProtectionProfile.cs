// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// New Protection profile input.
    /// </summary>
    [Newtonsoft.Json.JsonObject("New")]
    public partial class NewProtectionProfile : ProtectionProfileCustomDetails
    {
        /// <summary>
        /// Initializes a new instance of the NewProtectionProfile class.
        /// </summary>
        public NewProtectionProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NewProtectionProfile class.
        /// </summary>
        /// <param name="policyName">The protection profile input.</param>
        /// <param name="multiVmSyncStatus">A value indicating whether multi-VM
        /// sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
        /// Possible values include: 'Enable', 'Disable'</param>
        /// <param name="recoveryPointHistory">The duration in minutes until
        /// which the recovery points need to be stored.</param>
        /// <param name="crashConsistentFrequencyInMinutes">The crash
        /// consistent snapshot frequency (in minutes).</param>
        /// <param name="appConsistentFrequencyInMinutes">The app consistent
        /// snapshot frequency (in minutes).</param>
        public NewProtectionProfile(string policyName, string multiVmSyncStatus, int? recoveryPointHistory = default(int?), int? crashConsistentFrequencyInMinutes = default(int?), int? appConsistentFrequencyInMinutes = default(int?))
        {
            PolicyName = policyName;
            RecoveryPointHistory = recoveryPointHistory;
            CrashConsistentFrequencyInMinutes = crashConsistentFrequencyInMinutes;
            AppConsistentFrequencyInMinutes = appConsistentFrequencyInMinutes;
            MultiVmSyncStatus = multiVmSyncStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the protection profile input.
        /// </summary>
        [JsonProperty(PropertyName = "policyName")]
        public string PolicyName { get; set; }

        /// <summary>
        /// Gets or sets the duration in minutes until which the recovery
        /// points need to be stored.
        /// </summary>
        [JsonProperty(PropertyName = "recoveryPointHistory")]
        public int? RecoveryPointHistory { get; set; }

        /// <summary>
        /// Gets or sets the crash consistent snapshot frequency (in minutes).
        /// </summary>
        [JsonProperty(PropertyName = "crashConsistentFrequencyInMinutes")]
        public int? CrashConsistentFrequencyInMinutes { get; set; }

        /// <summary>
        /// Gets or sets the app consistent snapshot frequency (in minutes).
        /// </summary>
        [JsonProperty(PropertyName = "appConsistentFrequencyInMinutes")]
        public int? AppConsistentFrequencyInMinutes { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether multi-VM sync has to be
        /// enabled. Value should be 'Enabled' or 'Disabled'. Possible values
        /// include: 'Enable', 'Disable'
        /// </summary>
        [JsonProperty(PropertyName = "multiVmSyncStatus")]
        public string MultiVmSyncStatus { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PolicyName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PolicyName");
            }
            if (MultiVmSyncStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MultiVmSyncStatus");
            }
        }
    }
}
