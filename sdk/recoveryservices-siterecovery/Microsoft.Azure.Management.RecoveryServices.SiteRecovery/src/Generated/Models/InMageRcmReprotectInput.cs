// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// InMageRcm specific provider input.
    /// </summary>
    [Newtonsoft.Json.JsonObject("InMageRcm")]
    public partial class InMageRcmReprotectInput : ReverseReplicationProviderSpecificInput
    {
        /// <summary>
        /// Initializes a new instance of the InMageRcmReprotectInput class.
        /// </summary>
        public InMageRcmReprotectInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InMageRcmReprotectInput class.
        /// </summary>
        /// <param name="reprotectAgentId">The reprotect agent Id.</param>
        /// <param name="datastoreName">The target datastore name.</param>
        /// <param name="logStorageAccountId">The log storage account ARM
        /// Id.</param>
        /// <param name="policyId">The Policy Id.</param>
        public InMageRcmReprotectInput(string reprotectAgentId, string datastoreName, string logStorageAccountId, string policyId = default(string))
        {
            ReprotectAgentId = reprotectAgentId;
            DatastoreName = datastoreName;
            LogStorageAccountId = logStorageAccountId;
            PolicyId = policyId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the reprotect agent Id.
        /// </summary>
        [JsonProperty(PropertyName = "reprotectAgentId")]
        public string ReprotectAgentId { get; set; }

        /// <summary>
        /// Gets or sets the target datastore name.
        /// </summary>
        [JsonProperty(PropertyName = "datastoreName")]
        public string DatastoreName { get; set; }

        /// <summary>
        /// Gets or sets the log storage account ARM Id.
        /// </summary>
        [JsonProperty(PropertyName = "logStorageAccountId")]
        public string LogStorageAccountId { get; set; }

        /// <summary>
        /// Gets or sets the Policy Id.
        /// </summary>
        [JsonProperty(PropertyName = "policyId")]
        public string PolicyId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ReprotectAgentId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReprotectAgentId");
            }
            if (DatastoreName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DatastoreName");
            }
            if (LogStorageAccountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LogStorageAccountId");
            }
        }
    }
}
