// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// InMageRcm provider specific details.
    /// </summary>
    [Newtonsoft.Json.JsonObject("InMageRcm")]
    public partial class InMageRcmReplicationDetails : ReplicationProviderSpecificSettings
    {
        /// <summary>
        /// Initializes a new instance of the InMageRcmReplicationDetails
        /// class.
        /// </summary>
        public InMageRcmReplicationDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InMageRcmReplicationDetails
        /// class.
        /// </summary>
        /// <param name="internalIdentifier">The virtual machine internal
        /// identifier.</param>
        /// <param name="fabricDiscoveryMachineId">The ARM Id of the discovered
        /// VM.</param>
        /// <param name="multiVmGroupName">The multi VM group name.</param>
        /// <param name="discoveryType">The type of the discovered VM.</param>
        /// <param name="processServerId">The process server Id.</param>
        /// <param name="processorCoreCount">The processor core count.</param>
        /// <param name="allocatedMemoryInMB">The allocated memory in
        /// MB.</param>
        /// <param name="processServerName">The process server name.</param>
        /// <param name="runAsAccountId">The run-as account Id.</param>
        /// <param name="osType">The type of the OS on the VM.</param>
        /// <param name="firmwareType">The firmware type.</param>
        /// <param name="targetGeneration">The target generation.</param>
        /// <param name="licenseType">License Type of the VM to be
        /// used.</param>
        /// <param name="targetVmName">Target VM name.</param>
        /// <param name="targetVmSize">The target VM size.</param>
        /// <param name="targetResourceGroupId">The target resource group
        /// Id.</param>
        /// <param name="targetAvailabilitySetId">The target availability set
        /// Id.</param>
        /// <param name="targetAvailabilityZone">The target availability
        /// zone.</param>
        /// <param name="targetProximityPlacementGroupId">The target proximity
        /// placement group Id.</param>
        /// <param name="targetBootDiagnosticsStorageAccountId">The target boot
        /// diagnostics storage account ARM Id.</param>
        /// <param name="targetNetworkId">The target network Id.</param>
        /// <param name="testNetworkId">The test network Id.</param>
        /// <param name="failoverRecoveryPointId">The recovery point Id to
        /// which the VM was failed over.</param>
        /// <param name="lastRecoveryPointReceived">The last recovery point
        /// received time.</param>
        /// <param name="lastRpoInSeconds">The last recovery point objective
        /// value.</param>
        /// <param name="lastRpoCalculatedTime">The last recovery point
        /// objective calculated time.</param>
        /// <param name="lastRecoveryPointId">The last recovery point
        /// Id.</param>
        /// <param name="initialReplicationProgressPercentage">The initial
        /// replication progress percentage. This is calculated based on total
        /// bytes processed for all disks in the source VM.</param>
        /// <param name="initialReplicationProcessedBytes">The initial
        /// replication processed bytes. This includes sum of total bytes
        /// transferred and matched bytes on all selected disks in source
        /// VM.</param>
        /// <param name="initialReplicationTransferredBytes">The initial
        /// replication transferred bytes from source VM to azure for all
        /// selected disks on source VM.</param>
        /// <param name="resyncProgressPercentage">The resync progress
        /// percentage. This is calculated based on total bytes processed for
        /// all disks in the source VM.</param>
        /// <param name="resyncProcessedBytes">The resync processed bytes. This
        /// includes sum of total bytes transferred and matched bytes on all
        /// selected disks in source VM.</param>
        /// <param name="resyncTransferredBytes">The resync transferred bytes
        /// from source VM to azure for all selected disks on source
        /// VM.</param>
        /// <param name="resyncRequired">A value indicating whether resync is
        /// required.</param>
        /// <param name="resyncState">The resync state. Possible values
        /// include: 'None', 'PreparedForResynchronization',
        /// 'StartedResynchronization'</param>
        /// <param name="agentUpgradeState">The agent auto upgrade state.
        /// Possible values include: 'None', 'Started', 'Completed',
        /// 'Commit'</param>
        /// <param name="lastAgentUpgradeType">The last agent upgrade
        /// type.</param>
        /// <param name="lastAgentUpgradeFailedJobId">The last agent upgrade
        /// failed or cancelled job Id.</param>
        /// <param name="protectedDisks">The list of protected disks.</param>
        /// <param name="isLastUpgradeSuccessful">A value indicating whether
        /// last agent upgrade was successful or not.</param>
        /// <param name="mobilityAgentDetails">The mobility agent
        /// information.</param>
        /// <param name="lastAgentUpgradeErrorDetails">The last agent upgrade
        /// error information.</param>
        /// <param name="agentUpgradeBlockingErrorDetails">The agent upgrade
        /// blocking error information.</param>
        /// <param name="vmNics">The network details.</param>
        public InMageRcmReplicationDetails(string internalIdentifier = default(string), string fabricDiscoveryMachineId = default(string), string multiVmGroupName = default(string), string discoveryType = default(string), string processServerId = default(string), int? processorCoreCount = default(int?), double? allocatedMemoryInMB = default(double?), string processServerName = default(string), string runAsAccountId = default(string), string osType = default(string), string firmwareType = default(string), string targetGeneration = default(string), string licenseType = default(string), string targetVmName = default(string), string targetVmSize = default(string), string targetResourceGroupId = default(string), string targetAvailabilitySetId = default(string), string targetAvailabilityZone = default(string), string targetProximityPlacementGroupId = default(string), string targetBootDiagnosticsStorageAccountId = default(string), string targetNetworkId = default(string), string testNetworkId = default(string), string failoverRecoveryPointId = default(string), System.DateTime? lastRecoveryPointReceived = default(System.DateTime?), long? lastRpoInSeconds = default(long?), System.DateTime? lastRpoCalculatedTime = default(System.DateTime?), string lastRecoveryPointId = default(string), int? initialReplicationProgressPercentage = default(int?), long? initialReplicationProcessedBytes = default(long?), long? initialReplicationTransferredBytes = default(long?), int? resyncProgressPercentage = default(int?), long? resyncProcessedBytes = default(long?), long? resyncTransferredBytes = default(long?), string resyncRequired = default(string), string resyncState = default(string), string agentUpgradeState = default(string), string lastAgentUpgradeType = default(string), string lastAgentUpgradeFailedJobId = default(string), IList<InMageRcmProtectedDiskDetails> protectedDisks = default(IList<InMageRcmProtectedDiskDetails>), string isLastUpgradeSuccessful = default(string), InMageRcmMobilityAgentDetails mobilityAgentDetails = default(InMageRcmMobilityAgentDetails), IList<InMageRcmLastAgentUpgradeErrorDetails> lastAgentUpgradeErrorDetails = default(IList<InMageRcmLastAgentUpgradeErrorDetails>), IList<InMageRcmAgentUpgradeBlockingErrorDetails> agentUpgradeBlockingErrorDetails = default(IList<InMageRcmAgentUpgradeBlockingErrorDetails>), IList<InMageRcmNicDetails> vmNics = default(IList<InMageRcmNicDetails>))
        {
            InternalIdentifier = internalIdentifier;
            FabricDiscoveryMachineId = fabricDiscoveryMachineId;
            MultiVmGroupName = multiVmGroupName;
            DiscoveryType = discoveryType;
            ProcessServerId = processServerId;
            ProcessorCoreCount = processorCoreCount;
            AllocatedMemoryInMB = allocatedMemoryInMB;
            ProcessServerName = processServerName;
            RunAsAccountId = runAsAccountId;
            OsType = osType;
            FirmwareType = firmwareType;
            TargetGeneration = targetGeneration;
            LicenseType = licenseType;
            TargetVmName = targetVmName;
            TargetVmSize = targetVmSize;
            TargetResourceGroupId = targetResourceGroupId;
            TargetAvailabilitySetId = targetAvailabilitySetId;
            TargetAvailabilityZone = targetAvailabilityZone;
            TargetProximityPlacementGroupId = targetProximityPlacementGroupId;
            TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
            TargetNetworkId = targetNetworkId;
            TestNetworkId = testNetworkId;
            FailoverRecoveryPointId = failoverRecoveryPointId;
            LastRecoveryPointReceived = lastRecoveryPointReceived;
            LastRpoInSeconds = lastRpoInSeconds;
            LastRpoCalculatedTime = lastRpoCalculatedTime;
            LastRecoveryPointId = lastRecoveryPointId;
            InitialReplicationProgressPercentage = initialReplicationProgressPercentage;
            InitialReplicationProcessedBytes = initialReplicationProcessedBytes;
            InitialReplicationTransferredBytes = initialReplicationTransferredBytes;
            ResyncProgressPercentage = resyncProgressPercentage;
            ResyncProcessedBytes = resyncProcessedBytes;
            ResyncTransferredBytes = resyncTransferredBytes;
            ResyncRequired = resyncRequired;
            ResyncState = resyncState;
            AgentUpgradeState = agentUpgradeState;
            LastAgentUpgradeType = lastAgentUpgradeType;
            LastAgentUpgradeFailedJobId = lastAgentUpgradeFailedJobId;
            ProtectedDisks = protectedDisks;
            IsLastUpgradeSuccessful = isLastUpgradeSuccessful;
            MobilityAgentDetails = mobilityAgentDetails;
            LastAgentUpgradeErrorDetails = lastAgentUpgradeErrorDetails;
            AgentUpgradeBlockingErrorDetails = agentUpgradeBlockingErrorDetails;
            VmNics = vmNics;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the virtual machine internal identifier.
        /// </summary>
        [JsonProperty(PropertyName = "internalIdentifier")]
        public string InternalIdentifier { get; private set; }

        /// <summary>
        /// Gets the ARM Id of the discovered VM.
        /// </summary>
        [JsonProperty(PropertyName = "fabricDiscoveryMachineId")]
        public string FabricDiscoveryMachineId { get; private set; }

        /// <summary>
        /// Gets the multi VM group name.
        /// </summary>
        [JsonProperty(PropertyName = "multiVmGroupName")]
        public string MultiVmGroupName { get; private set; }

        /// <summary>
        /// Gets the type of the discovered VM.
        /// </summary>
        [JsonProperty(PropertyName = "discoveryType")]
        public string DiscoveryType { get; private set; }

        /// <summary>
        /// Gets the process server Id.
        /// </summary>
        [JsonProperty(PropertyName = "processServerId")]
        public string ProcessServerId { get; private set; }

        /// <summary>
        /// Gets the processor core count.
        /// </summary>
        [JsonProperty(PropertyName = "processorCoreCount")]
        public int? ProcessorCoreCount { get; private set; }

        /// <summary>
        /// Gets the allocated memory in MB.
        /// </summary>
        [JsonProperty(PropertyName = "allocatedMemoryInMB")]
        public double? AllocatedMemoryInMB { get; private set; }

        /// <summary>
        /// Gets the process server name.
        /// </summary>
        [JsonProperty(PropertyName = "processServerName")]
        public string ProcessServerName { get; private set; }

        /// <summary>
        /// Gets the run-as account Id.
        /// </summary>
        [JsonProperty(PropertyName = "runAsAccountId")]
        public string RunAsAccountId { get; private set; }

        /// <summary>
        /// Gets the type of the OS on the VM.
        /// </summary>
        [JsonProperty(PropertyName = "osType")]
        public string OsType { get; private set; }

        /// <summary>
        /// Gets the firmware type.
        /// </summary>
        [JsonProperty(PropertyName = "firmwareType")]
        public string FirmwareType { get; private set; }

        /// <summary>
        /// Gets the target generation.
        /// </summary>
        [JsonProperty(PropertyName = "targetGeneration")]
        public string TargetGeneration { get; private set; }

        /// <summary>
        /// Gets license Type of the VM to be used.
        /// </summary>
        [JsonProperty(PropertyName = "licenseType")]
        public string LicenseType { get; private set; }

        /// <summary>
        /// Gets target VM name.
        /// </summary>
        [JsonProperty(PropertyName = "targetVmName")]
        public string TargetVmName { get; private set; }

        /// <summary>
        /// Gets the target VM size.
        /// </summary>
        [JsonProperty(PropertyName = "targetVmSize")]
        public string TargetVmSize { get; private set; }

        /// <summary>
        /// Gets the target resource group Id.
        /// </summary>
        [JsonProperty(PropertyName = "targetResourceGroupId")]
        public string TargetResourceGroupId { get; private set; }

        /// <summary>
        /// Gets the target availability set Id.
        /// </summary>
        [JsonProperty(PropertyName = "targetAvailabilitySetId")]
        public string TargetAvailabilitySetId { get; private set; }

        /// <summary>
        /// Gets the target availability zone.
        /// </summary>
        [JsonProperty(PropertyName = "targetAvailabilityZone")]
        public string TargetAvailabilityZone { get; private set; }

        /// <summary>
        /// Gets the target proximity placement group Id.
        /// </summary>
        [JsonProperty(PropertyName = "targetProximityPlacementGroupId")]
        public string TargetProximityPlacementGroupId { get; private set; }

        /// <summary>
        /// Gets the target boot diagnostics storage account ARM Id.
        /// </summary>
        [JsonProperty(PropertyName = "targetBootDiagnosticsStorageAccountId")]
        public string TargetBootDiagnosticsStorageAccountId { get; private set; }

        /// <summary>
        /// Gets the target network Id.
        /// </summary>
        [JsonProperty(PropertyName = "targetNetworkId")]
        public string TargetNetworkId { get; private set; }

        /// <summary>
        /// Gets the test network Id.
        /// </summary>
        [JsonProperty(PropertyName = "testNetworkId")]
        public string TestNetworkId { get; private set; }

        /// <summary>
        /// Gets the recovery point Id to which the VM was failed over.
        /// </summary>
        [JsonProperty(PropertyName = "failoverRecoveryPointId")]
        public string FailoverRecoveryPointId { get; private set; }

        /// <summary>
        /// Gets the last recovery point received time.
        /// </summary>
        [JsonProperty(PropertyName = "lastRecoveryPointReceived")]
        public System.DateTime? LastRecoveryPointReceived { get; private set; }

        /// <summary>
        /// Gets the last recovery point objective value.
        /// </summary>
        [JsonProperty(PropertyName = "lastRpoInSeconds")]
        public long? LastRpoInSeconds { get; private set; }

        /// <summary>
        /// Gets the last recovery point objective calculated time.
        /// </summary>
        [JsonProperty(PropertyName = "lastRpoCalculatedTime")]
        public System.DateTime? LastRpoCalculatedTime { get; private set; }

        /// <summary>
        /// Gets the last recovery point Id.
        /// </summary>
        [JsonProperty(PropertyName = "lastRecoveryPointId")]
        public string LastRecoveryPointId { get; private set; }

        /// <summary>
        /// Gets the initial replication progress percentage. This is
        /// calculated based on total bytes processed for all disks in the
        /// source VM.
        /// </summary>
        [JsonProperty(PropertyName = "initialReplicationProgressPercentage")]
        public int? InitialReplicationProgressPercentage { get; private set; }

        /// <summary>
        /// Gets the initial replication processed bytes. This includes sum of
        /// total bytes transferred and matched bytes on all selected disks in
        /// source VM.
        /// </summary>
        [JsonProperty(PropertyName = "initialReplicationProcessedBytes")]
        public long? InitialReplicationProcessedBytes { get; private set; }

        /// <summary>
        /// Gets the initial replication transferred bytes from source VM to
        /// azure for all selected disks on source VM.
        /// </summary>
        [JsonProperty(PropertyName = "initialReplicationTransferredBytes")]
        public long? InitialReplicationTransferredBytes { get; private set; }

        /// <summary>
        /// Gets the resync progress percentage. This is calculated based on
        /// total bytes processed for all disks in the source VM.
        /// </summary>
        [JsonProperty(PropertyName = "resyncProgressPercentage")]
        public int? ResyncProgressPercentage { get; private set; }

        /// <summary>
        /// Gets the resync processed bytes. This includes sum of total bytes
        /// transferred and matched bytes on all selected disks in source VM.
        /// </summary>
        [JsonProperty(PropertyName = "resyncProcessedBytes")]
        public long? ResyncProcessedBytes { get; private set; }

        /// <summary>
        /// Gets the resync transferred bytes from source VM to azure for all
        /// selected disks on source VM.
        /// </summary>
        [JsonProperty(PropertyName = "resyncTransferredBytes")]
        public long? ResyncTransferredBytes { get; private set; }

        /// <summary>
        /// Gets a value indicating whether resync is required.
        /// </summary>
        [JsonProperty(PropertyName = "resyncRequired")]
        public string ResyncRequired { get; private set; }

        /// <summary>
        /// Gets the resync state. Possible values include: 'None',
        /// 'PreparedForResynchronization', 'StartedResynchronization'
        /// </summary>
        [JsonProperty(PropertyName = "resyncState")]
        public string ResyncState { get; private set; }

        /// <summary>
        /// Gets the agent auto upgrade state. Possible values include: 'None',
        /// 'Started', 'Completed', 'Commit'
        /// </summary>
        [JsonProperty(PropertyName = "agentUpgradeState")]
        public string AgentUpgradeState { get; private set; }

        /// <summary>
        /// Gets the last agent upgrade type.
        /// </summary>
        [JsonProperty(PropertyName = "lastAgentUpgradeType")]
        public string LastAgentUpgradeType { get; private set; }

        /// <summary>
        /// Gets the last agent upgrade failed or cancelled job Id.
        /// </summary>
        [JsonProperty(PropertyName = "lastAgentUpgradeFailedJobId")]
        public string LastAgentUpgradeFailedJobId { get; private set; }

        /// <summary>
        /// Gets the list of protected disks.
        /// </summary>
        [JsonProperty(PropertyName = "protectedDisks")]
        public IList<InMageRcmProtectedDiskDetails> ProtectedDisks { get; private set; }

        /// <summary>
        /// Gets a value indicating whether last agent upgrade was successful
        /// or not.
        /// </summary>
        [JsonProperty(PropertyName = "isLastUpgradeSuccessful")]
        public string IsLastUpgradeSuccessful { get; private set; }

        /// <summary>
        /// Gets the mobility agent information.
        /// </summary>
        [JsonProperty(PropertyName = "mobilityAgentDetails")]
        public InMageRcmMobilityAgentDetails MobilityAgentDetails { get; private set; }

        /// <summary>
        /// Gets the last agent upgrade error information.
        /// </summary>
        [JsonProperty(PropertyName = "lastAgentUpgradeErrorDetails")]
        public IList<InMageRcmLastAgentUpgradeErrorDetails> LastAgentUpgradeErrorDetails { get; private set; }

        /// <summary>
        /// Gets the agent upgrade blocking error information.
        /// </summary>
        [JsonProperty(PropertyName = "agentUpgradeBlockingErrorDetails")]
        public IList<InMageRcmAgentUpgradeBlockingErrorDetails> AgentUpgradeBlockingErrorDetails { get; private set; }

        /// <summary>
        /// Gets the network details.
        /// </summary>
        [JsonProperty(PropertyName = "vmNics")]
        public IList<InMageRcmNicDetails> VmNics { get; private set; }

    }
}
