// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Process server details.
    /// </summary>
    public partial class ProcessServerDetails
    {
        /// <summary>
        /// Initializes a new instance of the ProcessServerDetails class.
        /// </summary>
        public ProcessServerDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProcessServerDetails class.
        /// </summary>
        /// <param name="id">The process server Id.</param>
        /// <param name="name">The process server name.</param>
        /// <param name="biosId">The process server Bios Id.</param>
        /// <param name="fabricObjectId">The fabric object Id.</param>
        /// <param name="fqdn">The process server Fqdn.</param>
        /// <param name="version">The version.</param>
        /// <param name="lastHeartbeatUtc">The last heartbeat received from the
        /// process server.</param>
        /// <param name="totalMemoryInBytes">The total memory.</param>
        /// <param name="availableMemoryInBytes">The available memory.</param>
        /// <param name="usedMemoryInBytes">The used memory.</param>
        /// <param name="memoryUsagePercentage">The memory usage
        /// percentage.</param>
        /// <param name="totalSpaceInBytes">The total disk space.</param>
        /// <param name="availableSpaceInBytes">The available disk
        /// space.</param>
        /// <param name="usedSpaceInBytes">The used disk space.</param>
        /// <param name="freeSpacePercentage">The free disk space
        /// percentage.</param>
        /// <param name="throughputUploadPendingDataInBytes">The uploading
        /// pending data in bytes.</param>
        /// <param name="throughputInBytes">The throughput in bytes.</param>
        /// <param name="processorUsagePercentage">The processor usage
        /// percentage.</param>
        /// <param name="throughputStatus">The throughput status. Possible
        /// values include: 'Healthy', 'Warning', 'Critical', 'Unknown'</param>
        /// <param name="systemLoad">The system load.</param>
        /// <param name="systemLoadStatus">The system load status. Possible
        /// values include: 'Healthy', 'Warning', 'Critical', 'Unknown'</param>
        /// <param name="diskUsageStatus">The disk usage status. Possible
        /// values include: 'Healthy', 'Warning', 'Critical', 'Unknown'</param>
        /// <param name="memoryUsageStatus">The memory usage status. Possible
        /// values include: 'Healthy', 'Warning', 'Critical', 'Unknown'</param>
        /// <param name="processorUsageStatus">The processor usage status.
        /// Possible values include: 'Healthy', 'Warning', 'Critical',
        /// 'Unknown'</param>
        /// <param name="health">The health of the process server. Possible
        /// values include: 'None', 'Normal', 'Warning', 'Critical'</param>
        /// <param name="healthErrors">The health errors.</param>
        /// <param name="historicHealth">The historic health of the process
        /// server based on the health in last 24 hours. Possible values
        /// include: 'None', 'Normal', 'Warning', 'Critical'</param>
        public ProcessServerDetails(string id = default(string), string name = default(string), string biosId = default(string), string fabricObjectId = default(string), string fqdn = default(string), string version = default(string), System.DateTime? lastHeartbeatUtc = default(System.DateTime?), long? totalMemoryInBytes = default(long?), long? availableMemoryInBytes = default(long?), long? usedMemoryInBytes = default(long?), double? memoryUsagePercentage = default(double?), long? totalSpaceInBytes = default(long?), long? availableSpaceInBytes = default(long?), long? usedSpaceInBytes = default(long?), double? freeSpacePercentage = default(double?), long? throughputUploadPendingDataInBytes = default(long?), long? throughputInBytes = default(long?), double? processorUsagePercentage = default(double?), string throughputStatus = default(string), long? systemLoad = default(long?), string systemLoadStatus = default(string), string diskUsageStatus = default(string), string memoryUsageStatus = default(string), string processorUsageStatus = default(string), string health = default(string), IList<HealthError> healthErrors = default(IList<HealthError>), string historicHealth = default(string))
        {
            Id = id;
            Name = name;
            BiosId = biosId;
            FabricObjectId = fabricObjectId;
            Fqdn = fqdn;
            Version = version;
            LastHeartbeatUtc = lastHeartbeatUtc;
            TotalMemoryInBytes = totalMemoryInBytes;
            AvailableMemoryInBytes = availableMemoryInBytes;
            UsedMemoryInBytes = usedMemoryInBytes;
            MemoryUsagePercentage = memoryUsagePercentage;
            TotalSpaceInBytes = totalSpaceInBytes;
            AvailableSpaceInBytes = availableSpaceInBytes;
            UsedSpaceInBytes = usedSpaceInBytes;
            FreeSpacePercentage = freeSpacePercentage;
            ThroughputUploadPendingDataInBytes = throughputUploadPendingDataInBytes;
            ThroughputInBytes = throughputInBytes;
            ProcessorUsagePercentage = processorUsagePercentage;
            ThroughputStatus = throughputStatus;
            SystemLoad = systemLoad;
            SystemLoadStatus = systemLoadStatus;
            DiskUsageStatus = diskUsageStatus;
            MemoryUsageStatus = memoryUsageStatus;
            ProcessorUsageStatus = processorUsageStatus;
            Health = health;
            HealthErrors = healthErrors;
            HistoricHealth = historicHealth;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the process server Id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the process server name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the process server Bios Id.
        /// </summary>
        [JsonProperty(PropertyName = "biosId")]
        public string BiosId { get; private set; }

        /// <summary>
        /// Gets the fabric object Id.
        /// </summary>
        [JsonProperty(PropertyName = "fabricObjectId")]
        public string FabricObjectId { get; private set; }

        /// <summary>
        /// Gets the process server Fqdn.
        /// </summary>
        [JsonProperty(PropertyName = "fqdn")]
        public string Fqdn { get; private set; }

        /// <summary>
        /// Gets the version.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; private set; }

        /// <summary>
        /// Gets the last heartbeat received from the process server.
        /// </summary>
        [JsonProperty(PropertyName = "lastHeartbeatUtc")]
        public System.DateTime? LastHeartbeatUtc { get; private set; }

        /// <summary>
        /// Gets the total memory.
        /// </summary>
        [JsonProperty(PropertyName = "totalMemoryInBytes")]
        public long? TotalMemoryInBytes { get; private set; }

        /// <summary>
        /// Gets the available memory.
        /// </summary>
        [JsonProperty(PropertyName = "availableMemoryInBytes")]
        public long? AvailableMemoryInBytes { get; private set; }

        /// <summary>
        /// Gets the used memory.
        /// </summary>
        [JsonProperty(PropertyName = "usedMemoryInBytes")]
        public long? UsedMemoryInBytes { get; private set; }

        /// <summary>
        /// Gets the memory usage percentage.
        /// </summary>
        [JsonProperty(PropertyName = "memoryUsagePercentage")]
        public double? MemoryUsagePercentage { get; private set; }

        /// <summary>
        /// Gets the total disk space.
        /// </summary>
        [JsonProperty(PropertyName = "totalSpaceInBytes")]
        public long? TotalSpaceInBytes { get; private set; }

        /// <summary>
        /// Gets the available disk space.
        /// </summary>
        [JsonProperty(PropertyName = "availableSpaceInBytes")]
        public long? AvailableSpaceInBytes { get; private set; }

        /// <summary>
        /// Gets the used disk space.
        /// </summary>
        [JsonProperty(PropertyName = "usedSpaceInBytes")]
        public long? UsedSpaceInBytes { get; private set; }

        /// <summary>
        /// Gets the free disk space percentage.
        /// </summary>
        [JsonProperty(PropertyName = "freeSpacePercentage")]
        public double? FreeSpacePercentage { get; private set; }

        /// <summary>
        /// Gets the uploading pending data in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "throughputUploadPendingDataInBytes")]
        public long? ThroughputUploadPendingDataInBytes { get; private set; }

        /// <summary>
        /// Gets the throughput in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "throughputInBytes")]
        public long? ThroughputInBytes { get; private set; }

        /// <summary>
        /// Gets the processor usage percentage.
        /// </summary>
        [JsonProperty(PropertyName = "processorUsagePercentage")]
        public double? ProcessorUsagePercentage { get; private set; }

        /// <summary>
        /// Gets the throughput status. Possible values include: 'Healthy',
        /// 'Warning', 'Critical', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "throughputStatus")]
        public string ThroughputStatus { get; private set; }

        /// <summary>
        /// Gets the system load.
        /// </summary>
        [JsonProperty(PropertyName = "systemLoad")]
        public long? SystemLoad { get; private set; }

        /// <summary>
        /// Gets the system load status. Possible values include: 'Healthy',
        /// 'Warning', 'Critical', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "systemLoadStatus")]
        public string SystemLoadStatus { get; private set; }

        /// <summary>
        /// Gets the disk usage status. Possible values include: 'Healthy',
        /// 'Warning', 'Critical', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "diskUsageStatus")]
        public string DiskUsageStatus { get; private set; }

        /// <summary>
        /// Gets the memory usage status. Possible values include: 'Healthy',
        /// 'Warning', 'Critical', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "memoryUsageStatus")]
        public string MemoryUsageStatus { get; private set; }

        /// <summary>
        /// Gets the processor usage status. Possible values include:
        /// 'Healthy', 'Warning', 'Critical', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "processorUsageStatus")]
        public string ProcessorUsageStatus { get; private set; }

        /// <summary>
        /// Gets the health of the process server. Possible values include:
        /// 'None', 'Normal', 'Warning', 'Critical'
        /// </summary>
        [JsonProperty(PropertyName = "health")]
        public string Health { get; private set; }

        /// <summary>
        /// Gets the health errors.
        /// </summary>
        [JsonProperty(PropertyName = "healthErrors")]
        public IList<HealthError> HealthErrors { get; private set; }

        /// <summary>
        /// Gets the historic health of the process server based on the health
        /// in last 24 hours. Possible values include: 'None', 'Normal',
        /// 'Warning', 'Critical'
        /// </summary>
        [JsonProperty(PropertyName = "historicHealth")]
        public string HistoricHealth { get; private set; }

    }
}
