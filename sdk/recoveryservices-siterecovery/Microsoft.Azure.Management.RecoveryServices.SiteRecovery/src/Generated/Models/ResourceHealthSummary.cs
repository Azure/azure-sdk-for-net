// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Base class to define the health summary of the resources contained
    /// under an Arm resource.
    /// </summary>
    public partial class ResourceHealthSummary
    {
        /// <summary>
        /// Initializes a new instance of the ResourceHealthSummary class.
        /// </summary>
        public ResourceHealthSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceHealthSummary class.
        /// </summary>
        /// <param name="resourceCount">The count of total resources under the
        /// container.</param>
        /// <param name="issues">The list of summary of health errors across
        /// the resources under the container.</param>
        /// <param name="categorizedResourceCounts">The categorized resource
        /// counts.</param>
        public ResourceHealthSummary(int? resourceCount = default(int?), IList<HealthErrorSummary> issues = default(IList<HealthErrorSummary>), IDictionary<string, int?> categorizedResourceCounts = default(IDictionary<string, int?>))
        {
            ResourceCount = resourceCount;
            Issues = issues;
            CategorizedResourceCounts = categorizedResourceCounts;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the count of total resources under the container.
        /// </summary>
        [JsonProperty(PropertyName = "resourceCount")]
        public int? ResourceCount { get; set; }

        /// <summary>
        /// Gets or sets the list of summary of health errors across the
        /// resources under the container.
        /// </summary>
        [JsonProperty(PropertyName = "issues")]
        public IList<HealthErrorSummary> Issues { get; set; }

        /// <summary>
        /// Gets or sets the categorized resource counts.
        /// </summary>
        [JsonProperty(PropertyName = "categorizedResourceCounts")]
        public IDictionary<string, int?> CategorizedResourceCounts { get; set; }

    }
}
