// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The properties of an add provider request.
    /// </summary>
    public partial class AddRecoveryServicesProviderInputProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AddRecoveryServicesProviderInputProperties class.
        /// </summary>
        public AddRecoveryServicesProviderInputProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// AddRecoveryServicesProviderInputProperties class.
        /// </summary>
        /// <param name="machineName">The name of the machine where the
        /// provider is getting added.</param>
        /// <param name="authenticationIdentityInput">The identity provider
        /// input for DRA authentication.</param>
        /// <param name="resourceAccessIdentityInput">The identity provider
        /// input for resource access.</param>
        /// <param name="machineId">The Id of the machine where the provider is
        /// getting added.</param>
        /// <param name="biosId">The Bios Id of the machine.</param>
        /// <param name="dataPlaneAuthenticationIdentityInput">The identity
        /// provider input for data plane authentication.</param>
        public AddRecoveryServicesProviderInputProperties(string machineName, IdentityProviderInput authenticationIdentityInput, IdentityProviderInput resourceAccessIdentityInput, string machineId = default(string), string biosId = default(string), IdentityProviderInput dataPlaneAuthenticationIdentityInput = default(IdentityProviderInput))
        {
            MachineName = machineName;
            MachineId = machineId;
            BiosId = biosId;
            AuthenticationIdentityInput = authenticationIdentityInput;
            ResourceAccessIdentityInput = resourceAccessIdentityInput;
            DataPlaneAuthenticationIdentityInput = dataPlaneAuthenticationIdentityInput;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the machine where the provider is getting
        /// added.
        /// </summary>
        [JsonProperty(PropertyName = "machineName")]
        public string MachineName { get; set; }

        /// <summary>
        /// Gets or sets the Id of the machine where the provider is getting
        /// added.
        /// </summary>
        [JsonProperty(PropertyName = "machineId")]
        public string MachineId { get; set; }

        /// <summary>
        /// Gets or sets the Bios Id of the machine.
        /// </summary>
        [JsonProperty(PropertyName = "biosId")]
        public string BiosId { get; set; }

        /// <summary>
        /// Gets or sets the identity provider input for DRA authentication.
        /// </summary>
        [JsonProperty(PropertyName = "authenticationIdentityInput")]
        public IdentityProviderInput AuthenticationIdentityInput { get; set; }

        /// <summary>
        /// Gets or sets the identity provider input for resource access.
        /// </summary>
        [JsonProperty(PropertyName = "resourceAccessIdentityInput")]
        public IdentityProviderInput ResourceAccessIdentityInput { get; set; }

        /// <summary>
        /// Gets or sets the identity provider input for data plane
        /// authentication.
        /// </summary>
        [JsonProperty(PropertyName = "dataPlaneAuthenticationIdentityInput")]
        public IdentityProviderInput DataPlaneAuthenticationIdentityInput { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MachineName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MachineName");
            }
            if (AuthenticationIdentityInput == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AuthenticationIdentityInput");
            }
            if (ResourceAccessIdentityInput == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceAccessIdentityInput");
            }
            if (AuthenticationIdentityInput != null)
            {
                AuthenticationIdentityInput.Validate();
            }
            if (ResourceAccessIdentityInput != null)
            {
                ResourceAccessIdentityInput.Validate();
            }
            if (DataPlaneAuthenticationIdentityInput != null)
            {
                DataPlaneAuthenticationIdentityInput.Validate();
            }
        }
    }
}
