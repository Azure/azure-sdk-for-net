// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.RecoveryServicesSiteRecovery.Models;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    internal partial class ResourceGroupResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _replicationAppliancesClientDiagnostics;
        private ReplicationAppliancesRestOperations _replicationAppliancesRestClient;
        private ClientDiagnostics _replicationNetworkClientDiagnostics;
        private ReplicationNetworksRestOperations _replicationNetworkRestClient;
        private ClientDiagnostics _replicationNetworkMappingClientDiagnostics;
        private ReplicationNetworkMappingsRestOperations _replicationNetworkMappingRestClient;
        private ClientDiagnostics _replicationProtectionContainerClientDiagnostics;
        private ReplicationProtectionContainersRestOperations _replicationProtectionContainerRestClient;
        private ClientDiagnostics _replicationMigrationItemClientDiagnostics;
        private ReplicationMigrationItemsRestOperations _replicationMigrationItemRestClient;
        private ClientDiagnostics _replicationProtectedItemClientDiagnostics;
        private ReplicationProtectedItemsRestOperations _replicationProtectedItemRestClient;
        private ClientDiagnostics _replicationProtectionContainerMappingClientDiagnostics;
        private ReplicationProtectionContainerMappingsRestOperations _replicationProtectionContainerMappingRestClient;
        private ClientDiagnostics _siteRecoveryServicesProviderReplicationRecoveryServicesProvidersClientDiagnostics;
        private ReplicationRecoveryServicesProvidersRestOperations _siteRecoveryServicesProviderReplicationRecoveryServicesProvidersRestClient;
        private ClientDiagnostics _replicationStorageClassificationClientDiagnostics;
        private ReplicationStorageClassificationsRestOperations _replicationStorageClassificationRestClient;
        private ClientDiagnostics _replicationStorageClassificationMappingClientDiagnostics;
        private ReplicationStorageClassificationMappingsRestOperations _replicationStorageClassificationMappingRestClient;
        private ClientDiagnostics _replicationVCenterReplicationvCentersClientDiagnostics;
        private ReplicationvCentersRestOperations _replicationVCenterReplicationvCentersRestClient;
        private ClientDiagnostics _supportedOperatingSystemsClientDiagnostics;
        private SupportedOperatingSystemsRestOperations _supportedOperatingSystemsRestClient;
        private ClientDiagnostics _replicationVaultHealthClientDiagnostics;
        private ReplicationVaultHealthRestOperations _replicationVaultHealthRestClient;

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class for mocking. </summary>
        protected ResourceGroupResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ResourceGroupResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ReplicationAppliancesClientDiagnostics => _replicationAppliancesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ReplicationAppliancesRestOperations ReplicationAppliancesRestClient => _replicationAppliancesRestClient ??= new ReplicationAppliancesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ReplicationNetworkClientDiagnostics => _replicationNetworkClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ReplicationNetworkResource.ResourceType.Namespace, Diagnostics);
        private ReplicationNetworksRestOperations ReplicationNetworkRestClient => _replicationNetworkRestClient ??= new ReplicationNetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ReplicationNetworkResource.ResourceType));
        private ClientDiagnostics ReplicationNetworkMappingClientDiagnostics => _replicationNetworkMappingClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ReplicationNetworkMappingResource.ResourceType.Namespace, Diagnostics);
        private ReplicationNetworkMappingsRestOperations ReplicationNetworkMappingRestClient => _replicationNetworkMappingRestClient ??= new ReplicationNetworkMappingsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ReplicationNetworkMappingResource.ResourceType));
        private ClientDiagnostics ReplicationProtectionContainerClientDiagnostics => _replicationProtectionContainerClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ReplicationProtectionContainerResource.ResourceType.Namespace, Diagnostics);
        private ReplicationProtectionContainersRestOperations ReplicationProtectionContainerRestClient => _replicationProtectionContainerRestClient ??= new ReplicationProtectionContainersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ReplicationProtectionContainerResource.ResourceType));
        private ClientDiagnostics ReplicationMigrationItemClientDiagnostics => _replicationMigrationItemClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ReplicationMigrationItemResource.ResourceType.Namespace, Diagnostics);
        private ReplicationMigrationItemsRestOperations ReplicationMigrationItemRestClient => _replicationMigrationItemRestClient ??= new ReplicationMigrationItemsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ReplicationMigrationItemResource.ResourceType));
        private ClientDiagnostics ReplicationProtectedItemClientDiagnostics => _replicationProtectedItemClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ReplicationProtectedItemResource.ResourceType.Namespace, Diagnostics);
        private ReplicationProtectedItemsRestOperations ReplicationProtectedItemRestClient => _replicationProtectedItemRestClient ??= new ReplicationProtectedItemsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ReplicationProtectedItemResource.ResourceType));
        private ClientDiagnostics ReplicationProtectionContainerMappingClientDiagnostics => _replicationProtectionContainerMappingClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ReplicationProtectionContainerMappingResource.ResourceType.Namespace, Diagnostics);
        private ReplicationProtectionContainerMappingsRestOperations ReplicationProtectionContainerMappingRestClient => _replicationProtectionContainerMappingRestClient ??= new ReplicationProtectionContainerMappingsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ReplicationProtectionContainerMappingResource.ResourceType));
        private ClientDiagnostics SiteRecoveryServicesProviderReplicationRecoveryServicesProvidersClientDiagnostics => _siteRecoveryServicesProviderReplicationRecoveryServicesProvidersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", SiteRecoveryServicesProviderResource.ResourceType.Namespace, Diagnostics);
        private ReplicationRecoveryServicesProvidersRestOperations SiteRecoveryServicesProviderReplicationRecoveryServicesProvidersRestClient => _siteRecoveryServicesProviderReplicationRecoveryServicesProvidersRestClient ??= new ReplicationRecoveryServicesProvidersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SiteRecoveryServicesProviderResource.ResourceType));
        private ClientDiagnostics ReplicationStorageClassificationClientDiagnostics => _replicationStorageClassificationClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ReplicationStorageClassificationResource.ResourceType.Namespace, Diagnostics);
        private ReplicationStorageClassificationsRestOperations ReplicationStorageClassificationRestClient => _replicationStorageClassificationRestClient ??= new ReplicationStorageClassificationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ReplicationStorageClassificationResource.ResourceType));
        private ClientDiagnostics ReplicationStorageClassificationMappingClientDiagnostics => _replicationStorageClassificationMappingClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ReplicationStorageClassificationMappingResource.ResourceType.Namespace, Diagnostics);
        private ReplicationStorageClassificationMappingsRestOperations ReplicationStorageClassificationMappingRestClient => _replicationStorageClassificationMappingRestClient ??= new ReplicationStorageClassificationMappingsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ReplicationStorageClassificationMappingResource.ResourceType));
        private ClientDiagnostics ReplicationVCenterReplicationvCentersClientDiagnostics => _replicationVCenterReplicationvCentersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ReplicationVCenterResource.ResourceType.Namespace, Diagnostics);
        private ReplicationvCentersRestOperations ReplicationVCenterReplicationvCentersRestClient => _replicationVCenterReplicationvCentersRestClient ??= new ReplicationvCentersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ReplicationVCenterResource.ResourceType));
        private ClientDiagnostics SupportedOperatingSystemsClientDiagnostics => _supportedOperatingSystemsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SupportedOperatingSystemsRestOperations SupportedOperatingSystemsRestClient => _supportedOperatingSystemsRestClient ??= new SupportedOperatingSystemsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ReplicationVaultHealthClientDiagnostics => _replicationVaultHealthClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ReplicationVaultHealthRestOperations ReplicationVaultHealthRestClient => _replicationVaultHealthRestClient ??= new ReplicationVaultHealthRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of ReplicationAlertConfigurationResources in the ResourceGroupResource. </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <returns> An object representing collection of ReplicationAlertConfigurationResources and their operations over a ReplicationAlertConfigurationResource. </returns>
        public virtual ReplicationAlertConfigurationCollection GetReplicationAlertConfigurations(string resourceName)
        {
            return new ReplicationAlertConfigurationCollection(Client, Id, resourceName);
        }

        /// <summary> Gets a collection of ReplicationEligibilityResultResources in the ResourceGroupResource. </summary>
        /// <param name="virtualMachineName"> Virtual Machine name. </param>
        /// <returns> An object representing collection of ReplicationEligibilityResultResources and their operations over a ReplicationEligibilityResultResource. </returns>
        public virtual ReplicationEligibilityResultCollection GetReplicationEligibilityResults(string virtualMachineName)
        {
            return new ReplicationEligibilityResultCollection(Client, Id, virtualMachineName);
        }

        /// <summary> Gets a collection of SiteRecoveryEventResources in the ResourceGroupResource. </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <returns> An object representing collection of SiteRecoveryEventResources and their operations over a SiteRecoveryEventResource. </returns>
        public virtual SiteRecoveryEventCollection GetSiteRecoveryEvents(string resourceName)
        {
            return new SiteRecoveryEventCollection(Client, Id, resourceName);
        }

        /// <summary> Gets a collection of SiteRecoveryFabricResources in the ResourceGroupResource. </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <returns> An object representing collection of SiteRecoveryFabricResources and their operations over a SiteRecoveryFabricResource. </returns>
        public virtual SiteRecoveryFabricCollection GetSiteRecoveryFabrics(string resourceName)
        {
            return new SiteRecoveryFabricCollection(Client, Id, resourceName);
        }

        /// <summary> Gets a collection of SiteRecoveryJobResources in the ResourceGroupResource. </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <returns> An object representing collection of SiteRecoveryJobResources and their operations over a SiteRecoveryJobResource. </returns>
        public virtual SiteRecoveryJobCollection GetSiteRecoveryJobs(string resourceName)
        {
            return new SiteRecoveryJobCollection(Client, Id, resourceName);
        }

        /// <summary> Gets a collection of ReplicationPolicyResources in the ResourceGroupResource. </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <returns> An object representing collection of ReplicationPolicyResources and their operations over a ReplicationPolicyResource. </returns>
        public virtual ReplicationPolicyCollection GetReplicationPolicies(string resourceName)
        {
            return new ReplicationPolicyCollection(Client, Id, resourceName);
        }

        /// <summary> Gets a collection of ReplicationProtectionIntentResources in the ResourceGroupResource. </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <returns> An object representing collection of ReplicationProtectionIntentResources and their operations over a ReplicationProtectionIntentResource. </returns>
        public virtual ReplicationProtectionIntentCollection GetReplicationProtectionIntents(string resourceName)
        {
            return new ReplicationProtectionIntentCollection(Client, Id, resourceName);
        }

        /// <summary> Gets a collection of ReplicationRecoveryPlanResources in the ResourceGroupResource. </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <returns> An object representing collection of ReplicationRecoveryPlanResources and their operations over a ReplicationRecoveryPlanResource. </returns>
        public virtual ReplicationRecoveryPlanCollection GetReplicationRecoveryPlans(string resourceName)
        {
            return new ReplicationRecoveryPlanCollection(Client, Id, resourceName);
        }

        /// <summary> Gets a collection of ReplicationVaultSettingResources in the ResourceGroupResource. </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <returns> An object representing collection of ReplicationVaultSettingResources and their operations over a ReplicationVaultSettingResource. </returns>
        public virtual ReplicationVaultSettingCollection GetReplicationVaultSettings(string resourceName)
        {
            return new ReplicationVaultSettingCollection(Client, Id, resourceName);
        }

        /// <summary>
        /// Gets the list of Azure Site Recovery appliances for the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAppliances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationAppliances_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="filter"> OData filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReplicationAppliance" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReplicationAppliance> GetReplicationAppliancesAsync(string resourceName, string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationAppliancesRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationAppliancesRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName, filter);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, ReplicationAppliance.DeserializeReplicationAppliance, ReplicationAppliancesClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationAppliances", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the list of Azure Site Recovery appliances for the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAppliances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationAppliances_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="filter"> OData filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReplicationAppliance" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReplicationAppliance> GetReplicationAppliances(string resourceName, string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationAppliancesRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationAppliancesRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName, filter);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, ReplicationAppliance.DeserializeReplicationAppliance, ReplicationAppliancesClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationAppliances", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the networks available in a vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationNetworks_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReplicationNetworkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReplicationNetworkResource> GetReplicationNetworksAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationNetworkRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationNetworkRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ReplicationNetworkResource(Client, ReplicationNetworkData.DeserializeReplicationNetworkData(e)), ReplicationNetworkClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationNetworks", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the networks available in a vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationNetworks_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReplicationNetworkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReplicationNetworkResource> GetReplicationNetworks(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationNetworkRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationNetworkRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ReplicationNetworkResource(Client, ReplicationNetworkData.DeserializeReplicationNetworkData(e)), ReplicationNetworkClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationNetworks", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all ASR network mappings in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationNetworkMappings</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationNetworkMappings_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReplicationNetworkMappingResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReplicationNetworkMappingResource> GetReplicationNetworkMappingsAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationNetworkMappingRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationNetworkMappingRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ReplicationNetworkMappingResource(Client, ReplicationNetworkMappingData.DeserializeReplicationNetworkMappingData(e)), ReplicationNetworkMappingClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationNetworkMappings", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all ASR network mappings in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationNetworkMappings</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationNetworkMappings_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReplicationNetworkMappingResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReplicationNetworkMappingResource> GetReplicationNetworkMappings(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationNetworkMappingRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationNetworkMappingRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ReplicationNetworkMappingResource(Client, ReplicationNetworkMappingData.DeserializeReplicationNetworkMappingData(e)), ReplicationNetworkMappingClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationNetworkMappings", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the protection containers in a vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectionContainers_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReplicationProtectionContainerResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReplicationProtectionContainerResource> GetReplicationProtectionContainersAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationProtectionContainerRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationProtectionContainerRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ReplicationProtectionContainerResource(Client, ReplicationProtectionContainerData.DeserializeReplicationProtectionContainerData(e)), ReplicationProtectionContainerClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationProtectionContainers", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the protection containers in a vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectionContainers_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReplicationProtectionContainerResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReplicationProtectionContainerResource> GetReplicationProtectionContainers(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationProtectionContainerRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationProtectionContainerRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ReplicationProtectionContainerResource(Client, ReplicationProtectionContainerData.DeserializeReplicationProtectionContainerData(e)), ReplicationProtectionContainerClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationProtectionContainers", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the list of migration items in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationMigrationItems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationMigrationItems_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="skipToken"> The pagination token. </param>
        /// <param name="takeToken"> The page size. </param>
        /// <param name="filter"> OData filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReplicationMigrationItemResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReplicationMigrationItemResource> GetReplicationMigrationItemsAsync(string resourceName, string skipToken = null, string takeToken = null, string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationMigrationItemRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName, skipToken, takeToken, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationMigrationItemRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName, skipToken, takeToken, filter);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ReplicationMigrationItemResource(Client, ReplicationMigrationItemData.DeserializeReplicationMigrationItemData(e)), ReplicationMigrationItemClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationMigrationItems", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the list of migration items in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationMigrationItems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationMigrationItems_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="skipToken"> The pagination token. </param>
        /// <param name="takeToken"> The page size. </param>
        /// <param name="filter"> OData filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReplicationMigrationItemResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReplicationMigrationItemResource> GetReplicationMigrationItems(string resourceName, string skipToken = null, string takeToken = null, string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationMigrationItemRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName, skipToken, takeToken, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationMigrationItemRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName, skipToken, takeToken, filter);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ReplicationMigrationItemResource(Client, ReplicationMigrationItemData.DeserializeReplicationMigrationItemData(e)), ReplicationMigrationItemClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationMigrationItems", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the list of ASR replication protected items in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectedItems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectedItems_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="skipToken"> The pagination token. Possible values: &quot;FabricId&quot; or &quot;FabricId_CloudId&quot; or null. </param>
        /// <param name="filter"> OData filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReplicationProtectedItemResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReplicationProtectedItemResource> GetReplicationProtectedItemsAsync(string resourceName, string skipToken = null, string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationProtectedItemRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName, skipToken, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationProtectedItemRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName, skipToken, filter);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ReplicationProtectedItemResource(Client, ReplicationProtectedItemData.DeserializeReplicationProtectedItemData(e)), ReplicationProtectedItemClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationProtectedItems", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the list of ASR replication protected items in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectedItems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectedItems_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="skipToken"> The pagination token. Possible values: &quot;FabricId&quot; or &quot;FabricId_CloudId&quot; or null. </param>
        /// <param name="filter"> OData filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReplicationProtectedItemResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReplicationProtectedItemResource> GetReplicationProtectedItems(string resourceName, string skipToken = null, string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationProtectedItemRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName, skipToken, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationProtectedItemRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName, skipToken, filter);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ReplicationProtectedItemResource(Client, ReplicationProtectedItemData.DeserializeReplicationProtectedItemData(e)), ReplicationProtectedItemClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationProtectedItems", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the protection container mappings in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainerMappings</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectionContainerMappings_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReplicationProtectionContainerMappingResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReplicationProtectionContainerMappingResource> GetReplicationProtectionContainerMappingsAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationProtectionContainerMappingRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationProtectionContainerMappingRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ReplicationProtectionContainerMappingResource(Client, ReplicationProtectionContainerMappingData.DeserializeReplicationProtectionContainerMappingData(e)), ReplicationProtectionContainerMappingClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationProtectionContainerMappings", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the protection container mappings in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainerMappings</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectionContainerMappings_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReplicationProtectionContainerMappingResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReplicationProtectionContainerMappingResource> GetReplicationProtectionContainerMappings(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationProtectionContainerMappingRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationProtectionContainerMappingRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ReplicationProtectionContainerMappingResource(Client, ReplicationProtectionContainerMappingData.DeserializeReplicationProtectionContainerMappingData(e)), ReplicationProtectionContainerMappingClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationProtectionContainerMappings", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the registered recovery services providers in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryServicesProviders</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationRecoveryServicesProviders_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SiteRecoveryServicesProviderResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SiteRecoveryServicesProviderResource> GetSiteRecoveryServicesProvidersAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SiteRecoveryServicesProviderReplicationRecoveryServicesProvidersRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SiteRecoveryServicesProviderReplicationRecoveryServicesProvidersRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new SiteRecoveryServicesProviderResource(Client, SiteRecoveryServicesProviderData.DeserializeSiteRecoveryServicesProviderData(e)), SiteRecoveryServicesProviderReplicationRecoveryServicesProvidersClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetSiteRecoveryServicesProviders", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the registered recovery services providers in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryServicesProviders</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationRecoveryServicesProviders_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SiteRecoveryServicesProviderResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SiteRecoveryServicesProviderResource> GetSiteRecoveryServicesProviders(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SiteRecoveryServicesProviderReplicationRecoveryServicesProvidersRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SiteRecoveryServicesProviderReplicationRecoveryServicesProvidersRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new SiteRecoveryServicesProviderResource(Client, SiteRecoveryServicesProviderData.DeserializeSiteRecoveryServicesProviderData(e)), SiteRecoveryServicesProviderReplicationRecoveryServicesProvidersClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetSiteRecoveryServicesProviders", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the storage classifications in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassifications</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationStorageClassifications_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReplicationStorageClassificationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReplicationStorageClassificationResource> GetReplicationStorageClassificationsAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationStorageClassificationRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationStorageClassificationRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ReplicationStorageClassificationResource(Client, ReplicationStorageClassificationData.DeserializeReplicationStorageClassificationData(e)), ReplicationStorageClassificationClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationStorageClassifications", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the storage classifications in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassifications</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationStorageClassifications_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReplicationStorageClassificationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReplicationStorageClassificationResource> GetReplicationStorageClassifications(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationStorageClassificationRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationStorageClassificationRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ReplicationStorageClassificationResource(Client, ReplicationStorageClassificationData.DeserializeReplicationStorageClassificationData(e)), ReplicationStorageClassificationClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationStorageClassifications", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the storage classification mappings in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassificationMappings</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationStorageClassificationMappings_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReplicationStorageClassificationMappingResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReplicationStorageClassificationMappingResource> GetReplicationStorageClassificationMappingsAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationStorageClassificationMappingRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationStorageClassificationMappingRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ReplicationStorageClassificationMappingResource(Client, ReplicationStorageClassificationMappingData.DeserializeReplicationStorageClassificationMappingData(e)), ReplicationStorageClassificationMappingClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationStorageClassificationMappings", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the storage classification mappings in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassificationMappings</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationStorageClassificationMappings_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReplicationStorageClassificationMappingResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReplicationStorageClassificationMappingResource> GetReplicationStorageClassificationMappings(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationStorageClassificationMappingRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationStorageClassificationMappingRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ReplicationStorageClassificationMappingResource(Client, ReplicationStorageClassificationMappingData.DeserializeReplicationStorageClassificationMappingData(e)), ReplicationStorageClassificationMappingClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationStorageClassificationMappings", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the vCenter servers registered in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationvCenters</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationvCenters_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReplicationVCenterResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReplicationVCenterResource> GetReplicationVCentersAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationVCenterReplicationvCentersRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationVCenterReplicationvCentersRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ReplicationVCenterResource(Client, ReplicationVCenterData.DeserializeReplicationVCenterData(e)), ReplicationVCenterReplicationvCentersClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationVCenters", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the vCenter servers registered in the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationvCenters</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationvCenters_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReplicationVCenterResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReplicationVCenterResource> GetReplicationVCenters(string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ReplicationVCenterReplicationvCentersRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ReplicationVCenterReplicationvCentersRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ReplicationVCenterResource(Client, ReplicationVCenterData.DeserializeReplicationVCenterData(e)), ReplicationVCenterReplicationvCentersClientDiagnostics, Pipeline, "ResourceGroupResourceExtensionClient.GetReplicationVCenters", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the data of supported operating systems by SRS.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationSupportedOperatingSystems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SupportedOperatingSystems_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="instanceType"> The instance type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SupportedOperatingSystems>> GetSupportedOperatingSystemAsync(string resourceName, string instanceType = null, CancellationToken cancellationToken = default)
        {
            using var scope = SupportedOperatingSystemsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetSupportedOperatingSystem");
            scope.Start();
            try
            {
                var response = await SupportedOperatingSystemsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, resourceName, instanceType, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the data of supported operating systems by SRS.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationSupportedOperatingSystems</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SupportedOperatingSystems_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="instanceType"> The instance type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SupportedOperatingSystems> GetSupportedOperatingSystem(string resourceName, string instanceType = null, CancellationToken cancellationToken = default)
        {
            using var scope = SupportedOperatingSystemsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetSupportedOperatingSystem");
            scope.Start();
            try
            {
                var response = SupportedOperatingSystemsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, resourceName, instanceType, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the health details of the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultHealth</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationVaultHealth_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<VaultHealthDetails>> GetReplicationVaultHealthAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = ReplicationVaultHealthClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetReplicationVaultHealth");
            scope.Start();
            try
            {
                var response = await ReplicationVaultHealthRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the health details of the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultHealth</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationVaultHealth_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<VaultHealthDetails> GetReplicationVaultHealth(string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = ReplicationVaultHealthClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetReplicationVaultHealth");
            scope.Start();
            try
            {
                var response = ReplicationVaultHealthRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, resourceName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Refreshes health summary of the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultHealth/default/refresh</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationVaultHealth_Refresh</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<VaultHealthDetails>> RefreshReplicationVaultHealthAsync(WaitUntil waitUntil, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = ReplicationVaultHealthClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.RefreshReplicationVaultHealth");
            scope.Start();
            try
            {
                var response = await ReplicationVaultHealthRestClient.RefreshAsync(Id.SubscriptionId, Id.ResourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                var operation = new RecoveryServicesSiteRecoveryArmOperation<VaultHealthDetails>(new VaultHealthDetailsOperationSource(), ReplicationVaultHealthClientDiagnostics, Pipeline, ReplicationVaultHealthRestClient.CreateRefreshRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Refreshes health summary of the vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultHealth/default/refresh</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationVaultHealth_Refresh</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="resourceName"> The name of the recovery services vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<VaultHealthDetails> RefreshReplicationVaultHealth(WaitUntil waitUntil, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = ReplicationVaultHealthClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.RefreshReplicationVaultHealth");
            scope.Start();
            try
            {
                var response = ReplicationVaultHealthRestClient.Refresh(Id.SubscriptionId, Id.ResourceGroupName, resourceName, cancellationToken);
                var operation = new RecoveryServicesSiteRecoveryArmOperation<VaultHealthDetails>(new VaultHealthDetailsOperationSource(), ReplicationVaultHealthClientDiagnostics, Pipeline, ReplicationVaultHealthRestClient.CreateRefreshRequest(Id.SubscriptionId, Id.ResourceGroupName, resourceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
