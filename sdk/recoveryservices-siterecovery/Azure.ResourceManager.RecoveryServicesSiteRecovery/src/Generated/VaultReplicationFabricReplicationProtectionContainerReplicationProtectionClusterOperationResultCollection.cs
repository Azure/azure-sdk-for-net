// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery
{
    /// <summary>
    /// A class representing a collection of <see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource"/> and their operations.
    /// Each <see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource"/> in the collection will belong to the same instance of <see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterResource"/>.
    /// To get a <see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection"/> instance call the GetVaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResults method from an instance of <see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterResource"/>.
    /// </summary>
    public partial class VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection : ArmCollection
    {
        private readonly ClientDiagnostics _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersClientDiagnostics;
        private readonly ReplicationProtectionClustersRestOperations _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersRestClient;

        /// <summary> Initializes a new instance of the <see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection"/> class for mocking. </summary>
        protected VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource.ResourceType, out string vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersApiVersion);
            _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersRestClient = new ReplicationProtectionClustersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Track the results of an asynchronous operation on the replication protection cluster.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/operationResults/{jobId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectionClusters_GetOperationResults</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-01-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> job id to track. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public virtual async Task<Response<VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource>> GetAsync(ResourceIdentifier jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(jobId, nameof(jobId));

            using var scope = _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersClientDiagnostics.CreateScope("VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection.Get");
            scope.Start();
            try
            {
                var response = await _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersRestClient.GetOperationResultsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, jobId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Track the results of an asynchronous operation on the replication protection cluster.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/operationResults/{jobId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectionClusters_GetOperationResults</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-01-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> job id to track. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public virtual Response<VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource> Get(ResourceIdentifier jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(jobId, nameof(jobId));

            using var scope = _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersClientDiagnostics.CreateScope("VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection.Get");
            scope.Start();
            try
            {
                var response = _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersRestClient.GetOperationResults(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, jobId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/operationResults/{jobId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectionClusters_GetOperationResults</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-01-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> job id to track. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(ResourceIdentifier jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(jobId, nameof(jobId));

            using var scope = _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersClientDiagnostics.CreateScope("VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection.Exists");
            scope.Start();
            try
            {
                var response = await _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersRestClient.GetOperationResultsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, jobId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/operationResults/{jobId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectionClusters_GetOperationResults</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-01-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> job id to track. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public virtual Response<bool> Exists(ResourceIdentifier jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(jobId, nameof(jobId));

            using var scope = _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersClientDiagnostics.CreateScope("VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection.Exists");
            scope.Start();
            try
            {
                var response = _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersRestClient.GetOperationResults(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, jobId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/operationResults/{jobId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectionClusters_GetOperationResults</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-01-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> job id to track. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public virtual async Task<NullableResponse<VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource>> GetIfExistsAsync(ResourceIdentifier jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(jobId, nameof(jobId));

            using var scope = _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersClientDiagnostics.CreateScope("VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersRestClient.GetOperationResultsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, jobId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource>(response.GetRawResponse());
                return Response.FromValue(new VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/operationResults/{jobId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ReplicationProtectionClusters_GetOperationResults</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-01-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> job id to track. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public virtual NullableResponse<VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource> GetIfExists(ResourceIdentifier jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(jobId, nameof(jobId));

            using var scope = _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersClientDiagnostics.CreateScope("VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _vaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultReplicationProtectionClustersRestClient.GetOperationResults(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, jobId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource>(response.GetRawResponse());
                return Response.FromValue(new VaultReplicationFabricReplicationProtectionContainerReplicationProtectionClusterOperationResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
