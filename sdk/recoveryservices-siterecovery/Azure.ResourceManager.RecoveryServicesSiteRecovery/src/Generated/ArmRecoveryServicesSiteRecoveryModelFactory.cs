// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.RecoveryServicesSiteRecovery;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmRecoveryServicesSiteRecoveryModelFactory
    {
        /// <summary> Initializes a new instance of AlertData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Alert related data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.AlertData"/> instance for mocking. </returns>
        public static AlertData AlertData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AlertProperties properties = null, AzureLocation? location = null)
        {
            return new AlertData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of AlertProperties. </summary>
        /// <param name="sendToOwners"> A value indicating whether to send email to subscription administrator. </param>
        /// <param name="customEmailAddresses"> The custom email address for sending emails. </param>
        /// <param name="locale"> The locale for the email notification. </param>
        /// <returns> A new <see cref="Models.AlertProperties"/> instance for mocking. </returns>
        public static AlertProperties AlertProperties(string sendToOwners = null, IEnumerable<string> customEmailAddresses = null, string locale = null)
        {
            customEmailAddresses ??= new List<string>();

            return new AlertProperties(sendToOwners, customEmailAddresses?.ToList(), locale);
        }

        /// <summary> Initializes a new instance of ReplicationAppliance. </summary>
        /// <param name="replicationApplianceProviderSpecificDetails"> Appliance related data. </param>
        /// <returns> A new <see cref="Models.ReplicationAppliance"/> instance for mocking. </returns>
        public static ReplicationAppliance ReplicationAppliance(ApplianceSpecificDetails replicationApplianceProviderSpecificDetails = null)
        {
            return new ReplicationAppliance(replicationApplianceProviderSpecificDetails != null ? new ReplicationApplianceProperties(replicationApplianceProviderSpecificDetails) : null);
        }

        /// <summary> Initializes a new instance of ReplicationEligibilityResultData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Gets properties model for replication eligibility results API. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.ReplicationEligibilityResultData"/> instance for mocking. </returns>
        public static ReplicationEligibilityResultData ReplicationEligibilityResultData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ReplicationEligibilityResultsProperties properties = null)
        {
            return new ReplicationEligibilityResultData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ReplicationEligibilityResultsProperties. </summary>
        /// <param name="clientRequestId"> The client request Id. </param>
        /// <param name="errors"> The error details. </param>
        /// <returns> A new <see cref="Models.ReplicationEligibilityResultsProperties"/> instance for mocking. </returns>
        public static ReplicationEligibilityResultsProperties ReplicationEligibilityResultsProperties(string clientRequestId = null, IEnumerable<ReplicationEligibilityResultsErrorInfo> errors = null)
        {
            errors ??= new List<ReplicationEligibilityResultsErrorInfo>();

            return new ReplicationEligibilityResultsProperties(clientRequestId, errors?.ToList());
        }

        /// <summary> Initializes a new instance of ReplicationEligibilityResultsErrorInfo. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="possibleCauses"> The possible causes. </param>
        /// <param name="recommendedAction"> The recommended action. </param>
        /// <param name="status"> The error status. </param>
        /// <returns> A new <see cref="Models.ReplicationEligibilityResultsErrorInfo"/> instance for mocking. </returns>
        public static ReplicationEligibilityResultsErrorInfo ReplicationEligibilityResultsErrorInfo(string code = null, string message = null, string possibleCauses = null, string recommendedAction = null, string status = null)
        {
            return new ReplicationEligibilityResultsErrorInfo(code, message, possibleCauses, recommendedAction, status);
        }

        /// <summary> Initializes a new instance of EventData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Event related data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.EventData"/> instance for mocking. </returns>
        public static EventData EventData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, EventProperties properties = null, AzureLocation? location = null)
        {
            return new EventData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of EventProperties. </summary>
        /// <param name="eventCode"> The Id of the monitoring event. </param>
        /// <param name="description"> The event name. </param>
        /// <param name="eventType"> The type of the event. for example: VM Health, Server Health, Job Failure etc. </param>
        /// <param name="affectedObjectFriendlyName"> The friendly name of the source of the event on which it is raised (for example, VM, VMM etc). </param>
        /// <param name="affectedObjectCorrelationId"> The affected object correlationId for the event. </param>
        /// <param name="severity"> The severity of the event. </param>
        /// <param name="timeOfOccurrence"> The time of occurrence of the event. </param>
        /// <param name="fabricId"> The ARM ID of the fabric. </param>
        /// <param name="providerSpecificDetails">
        /// The provider specific settings.
        /// Please note <see cref="EventProviderSpecificDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="A2AEventDetails"/>, <see cref="HyperVReplica2012EventDetails"/>, <see cref="HyperVReplica2012R2EventDetails"/>, <see cref="HyperVReplicaAzureEventDetails"/>, <see cref="HyperVReplicaBaseEventDetails"/>, <see cref="InMageAzureV2EventDetails"/>, <see cref="InMageRcmEventDetails"/>, <see cref="InMageRcmFailbackEventDetails"/> and <see cref="VMwareCbtEventDetails"/>.
        /// </param>
        /// <param name="eventSpecificDetails">
        /// The event specific settings.
        /// Please note <see cref="EventSpecificDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="JobStatusEventDetails"/>.
        /// </param>
        /// <param name="healthErrors"> The list of errors / warnings capturing details associated with the issue(s). </param>
        /// <returns> A new <see cref="Models.EventProperties"/> instance for mocking. </returns>
        public static EventProperties EventProperties(string eventCode = null, string description = null, string eventType = null, string affectedObjectFriendlyName = null, string affectedObjectCorrelationId = null, string severity = null, DateTimeOffset? timeOfOccurrence = null, string fabricId = null, EventProviderSpecificDetails providerSpecificDetails = null, EventSpecificDetails eventSpecificDetails = null, IEnumerable<HealthError> healthErrors = null)
        {
            healthErrors ??= new List<HealthError>();

            return new EventProperties(eventCode, description, eventType, affectedObjectFriendlyName, affectedObjectCorrelationId, severity, timeOfOccurrence, fabricId, providerSpecificDetails, eventSpecificDetails, healthErrors?.ToList());
        }

        /// <summary> Initializes a new instance of HealthError. </summary>
        /// <param name="innerHealthErrors"> The inner health errors. HealthError having a list of HealthError as child errors is problematic. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&amp;gt; InnerException. </param>
        /// <param name="errorSource"> Source of error. </param>
        /// <param name="errorType"> Type of error. </param>
        /// <param name="errorLevel"> Level of error. </param>
        /// <param name="errorCategory"> Category of error. </param>
        /// <param name="errorCode"> Error code. </param>
        /// <param name="summaryMessage"> Summary message of the entity. </param>
        /// <param name="errorMessage"> Error message. </param>
        /// <param name="possibleCauses"> Possible causes of error. </param>
        /// <param name="recommendedAction"> Recommended action to resolve error. </param>
        /// <param name="creationTimeUtc"> Error creation time (UTC). </param>
        /// <param name="recoveryProviderErrorMessage"> DRA error message. </param>
        /// <param name="entityId"> ID of the entity. </param>
        /// <param name="errorId"> The health error unique id. </param>
        /// <param name="customerResolvability"> Value indicating whether the health error is customer resolvable. </param>
        /// <returns> A new <see cref="Models.HealthError"/> instance for mocking. </returns>
        public static HealthError HealthError(IEnumerable<InnerHealthError> innerHealthErrors = null, string errorSource = null, string errorType = null, string errorLevel = null, string errorCategory = null, string errorCode = null, string summaryMessage = null, string errorMessage = null, string possibleCauses = null, string recommendedAction = null, DateTimeOffset? creationTimeUtc = null, string recoveryProviderErrorMessage = null, string entityId = null, string errorId = null, HealthErrorCustomerResolvability? customerResolvability = null)
        {
            innerHealthErrors ??= new List<InnerHealthError>();

            return new HealthError(innerHealthErrors?.ToList(), errorSource, errorType, errorLevel, errorCategory, errorCode, summaryMessage, errorMessage, possibleCauses, recommendedAction, creationTimeUtc, recoveryProviderErrorMessage, entityId, errorId, customerResolvability);
        }

        /// <summary> Initializes a new instance of InnerHealthError. </summary>
        /// <param name="errorSource"> Source of error. </param>
        /// <param name="errorType"> Type of error. </param>
        /// <param name="errorLevel"> Level of error. </param>
        /// <param name="errorCategory"> Category of error. </param>
        /// <param name="errorCode"> Error code. </param>
        /// <param name="summaryMessage"> Summary message of the entity. </param>
        /// <param name="errorMessage"> Error message. </param>
        /// <param name="possibleCauses"> Possible causes of error. </param>
        /// <param name="recommendedAction"> Recommended action to resolve error. </param>
        /// <param name="creationTimeUtc"> Error creation time (UTC). </param>
        /// <param name="recoveryProviderErrorMessage"> DRA error message. </param>
        /// <param name="entityId"> ID of the entity. </param>
        /// <param name="errorId"> The health error unique id. </param>
        /// <param name="customerResolvability"> Value indicating whether the health error is customer resolvable. </param>
        /// <returns> A new <see cref="Models.InnerHealthError"/> instance for mocking. </returns>
        public static InnerHealthError InnerHealthError(string errorSource = null, string errorType = null, string errorLevel = null, string errorCategory = null, string errorCode = null, string summaryMessage = null, string errorMessage = null, string possibleCauses = null, string recommendedAction = null, DateTimeOffset? creationTimeUtc = null, string recoveryProviderErrorMessage = null, string entityId = null, string errorId = null, HealthErrorCustomerResolvability? customerResolvability = null)
        {
            return new InnerHealthError(errorSource, errorType, errorLevel, errorCategory, errorCode, summaryMessage, errorMessage, possibleCauses, recommendedAction, creationTimeUtc, recoveryProviderErrorMessage, entityId, errorId, customerResolvability);
        }

        /// <summary> Initializes a new instance of FabricData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Fabric related data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.FabricData"/> instance for mocking. </returns>
        public static FabricData FabricData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FabricProperties properties = null, AzureLocation? location = null)
        {
            return new FabricData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of FabricProperties. </summary>
        /// <param name="friendlyName"> Friendly name of the fabric. </param>
        /// <param name="encryptionDetails"> Encryption details for the fabric. </param>
        /// <param name="rolloverEncryptionDetails"> Rollover encryption details for the fabric. </param>
        /// <param name="internalIdentifier"> Dra Registration Id. </param>
        /// <param name="bcdrState"> BCDR state of the fabric. </param>
        /// <param name="customDetails">
        /// Fabric specific settings.
        /// Please note <see cref="FabricSpecificDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFabricSpecificDetails"/>, <see cref="HyperVSiteDetails"/>, <see cref="InMageRcmFabricSpecificDetails"/>, <see cref="VmmDetails"/>, <see cref="VMwareDetails"/> and <see cref="VMwareV2FabricSpecificDetails"/>.
        /// </param>
        /// <param name="healthErrorDetails"> Fabric health error details. </param>
        /// <param name="health"> Health of fabric. </param>
        /// <returns> A new <see cref="Models.FabricProperties"/> instance for mocking. </returns>
        public static FabricProperties FabricProperties(string friendlyName = null, EncryptionDetails encryptionDetails = null, EncryptionDetails rolloverEncryptionDetails = null, string internalIdentifier = null, string bcdrState = null, FabricSpecificDetails customDetails = null, IEnumerable<HealthError> healthErrorDetails = null, string health = null)
        {
            healthErrorDetails ??= new List<HealthError>();

            return new FabricProperties(friendlyName, encryptionDetails, rolloverEncryptionDetails, internalIdentifier, bcdrState, customDetails, healthErrorDetails?.ToList(), health);
        }

        /// <summary> Initializes a new instance of EncryptionDetails. </summary>
        /// <param name="kekState"> The key encryption key state for the Vmm. </param>
        /// <param name="kekCertThumbprint"> The key encryption key certificate thumbprint. </param>
        /// <param name="kekCertExpiryOn"> The key encryption key certificate expiry date. </param>
        /// <returns> A new <see cref="Models.EncryptionDetails"/> instance for mocking. </returns>
        public static EncryptionDetails EncryptionDetails(string kekState = null, string kekCertThumbprint = null, DateTimeOffset? kekCertExpiryOn = null)
        {
            return new EncryptionDetails(kekState, kekCertThumbprint, kekCertExpiryOn);
        }

        /// <summary> Initializes a new instance of LogicalNetworkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The Logical Network Properties. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.LogicalNetworkData"/> instance for mocking. </returns>
        public static LogicalNetworkData LogicalNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, LogicalNetworkProperties properties = null, AzureLocation? location = null)
        {
            return new LogicalNetworkData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of LogicalNetworkProperties. </summary>
        /// <param name="friendlyName"> The Friendly Name. </param>
        /// <param name="networkVirtualizationStatus"> A value indicating whether Network Virtualization is enabled for the logical network. </param>
        /// <param name="logicalNetworkUsage"> A value indicating whether logical network is used as private test network by test failover. </param>
        /// <param name="logicalNetworkDefinitionsStatus"> A value indicating whether logical network definitions are isolated. </param>
        /// <returns> A new <see cref="Models.LogicalNetworkProperties"/> instance for mocking. </returns>
        public static LogicalNetworkProperties LogicalNetworkProperties(string friendlyName = null, string networkVirtualizationStatus = null, string logicalNetworkUsage = null, string logicalNetworkDefinitionsStatus = null)
        {
            return new LogicalNetworkProperties(friendlyName, networkVirtualizationStatus, logicalNetworkUsage, logicalNetworkDefinitionsStatus);
        }

        /// <summary> Initializes a new instance of NetworkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The Network Properties. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.NetworkData"/> instance for mocking. </returns>
        public static NetworkData NetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, NetworkProperties properties = null, AzureLocation? location = null)
        {
            return new NetworkData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of NetworkProperties. </summary>
        /// <param name="fabricType"> The Fabric Type. </param>
        /// <param name="subnets"> The List of subnets. </param>
        /// <param name="friendlyName"> The Friendly Name. </param>
        /// <param name="networkType"> The Network Type. </param>
        /// <returns> A new <see cref="Models.NetworkProperties"/> instance for mocking. </returns>
        public static NetworkProperties NetworkProperties(string fabricType = null, IEnumerable<Subnet> subnets = null, string friendlyName = null, string networkType = null)
        {
            subnets ??= new List<Subnet>();

            return new NetworkProperties(fabricType, subnets?.ToList(), friendlyName, networkType);
        }

        /// <summary> Initializes a new instance of Subnet. </summary>
        /// <param name="name"> The subnet name. </param>
        /// <param name="friendlyName"> The subnet friendly name. </param>
        /// <param name="addressList"> The list of addresses for the subnet. </param>
        /// <returns> A new <see cref="Models.Subnet"/> instance for mocking. </returns>
        public static Subnet Subnet(string name = null, string friendlyName = null, IEnumerable<string> addressList = null)
        {
            addressList ??= new List<string>();

            return new Subnet(name, friendlyName, addressList?.ToList());
        }

        /// <summary> Initializes a new instance of NetworkMappingData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The Network Mapping Properties. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.NetworkMappingData"/> instance for mocking. </returns>
        public static NetworkMappingData NetworkMappingData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, NetworkMappingProperties properties = null, AzureLocation? location = null)
        {
            return new NetworkMappingData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of NetworkMappingProperties. </summary>
        /// <param name="state"> The pairing state for network mapping. </param>
        /// <param name="primaryNetworkFriendlyName"> The primary network friendly name. </param>
        /// <param name="primaryNetworkId"> The primary network id for network mapping. </param>
        /// <param name="primaryFabricFriendlyName"> The primary fabric friendly name. </param>
        /// <param name="recoveryNetworkFriendlyName"> The recovery network friendly name. </param>
        /// <param name="recoveryNetworkId"> The recovery network id for network mapping. </param>
        /// <param name="recoveryFabricArmId"> The recovery fabric ARM id. </param>
        /// <param name="recoveryFabricFriendlyName"> The recovery fabric friendly name. </param>
        /// <param name="fabricSpecificSettings">
        /// The fabric specific settings.
        /// Please note <see cref="NetworkMappingFabricSpecificSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureToAzureNetworkMappingSettings"/>, <see cref="VmmToAzureNetworkMappingSettings"/> and <see cref="VmmToVmmNetworkMappingSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.NetworkMappingProperties"/> instance for mocking. </returns>
        public static NetworkMappingProperties NetworkMappingProperties(string state = null, string primaryNetworkFriendlyName = null, string primaryNetworkId = null, string primaryFabricFriendlyName = null, string recoveryNetworkFriendlyName = null, string recoveryNetworkId = null, string recoveryFabricArmId = null, string recoveryFabricFriendlyName = null, NetworkMappingFabricSpecificSettings fabricSpecificSettings = null)
        {
            return new NetworkMappingProperties(state, primaryNetworkFriendlyName, primaryNetworkId, primaryFabricFriendlyName, recoveryNetworkFriendlyName, recoveryNetworkId, recoveryFabricArmId, recoveryFabricFriendlyName, fabricSpecificSettings);
        }

        /// <summary> Initializes a new instance of ProtectionContainerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The custom data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.ProtectionContainerData"/> instance for mocking. </returns>
        public static ProtectionContainerData ProtectionContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ProtectionContainerProperties properties = null, AzureLocation? location = null)
        {
            return new ProtectionContainerData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of ProtectionContainerProperties. </summary>
        /// <param name="fabricFriendlyName"> Fabric friendly name. </param>
        /// <param name="friendlyName"> The name. </param>
        /// <param name="fabricType"> The fabric type. </param>
        /// <param name="protectedItemCount"> Number of protected PEs. </param>
        /// <param name="pairingStatus"> The pairing status of this cloud. </param>
        /// <param name="role"> The role of this cloud. </param>
        /// <param name="fabricSpecificDetailsInstanceType"> Fabric specific details. </param>
        /// <returns> A new <see cref="Models.ProtectionContainerProperties"/> instance for mocking. </returns>
        public static ProtectionContainerProperties ProtectionContainerProperties(string fabricFriendlyName = null, string friendlyName = null, string fabricType = null, int? protectedItemCount = null, string pairingStatus = null, string role = null, string fabricSpecificDetailsInstanceType = null)
        {
            return new ProtectionContainerProperties(fabricFriendlyName, friendlyName, fabricType, protectedItemCount, pairingStatus, role, fabricSpecificDetailsInstanceType != null ? new ProtectionContainerFabricSpecificDetails(fabricSpecificDetailsInstanceType) : null);
        }

        /// <summary> Initializes a new instance of MigrationItemData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The migration item properties. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.MigrationItemData"/> instance for mocking. </returns>
        public static MigrationItemData MigrationItemData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationItemProperties properties = null, AzureLocation? location = null)
        {
            return new MigrationItemData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of MigrationItemProperties. </summary>
        /// <param name="machineName"> The on-premise virtual machine name. </param>
        /// <param name="policyId"> The ARM Id of policy governing this item. </param>
        /// <param name="policyFriendlyName"> The name of policy governing this item. </param>
        /// <param name="recoveryServicesProviderId"> The recovery services provider ARM Id. </param>
        /// <param name="replicationStatus"> The replication status. </param>
        /// <param name="migrationState"> The migration status. </param>
        /// <param name="migrationStateDescription"> The migration state description. </param>
        /// <param name="lastTestMigrationOn"> The last test migration time. </param>
        /// <param name="lastTestMigrationStatus"> The status of the last test migration. </param>
        /// <param name="lastMigrationOn"> The last migration time. </param>
        /// <param name="lastMigrationStatus"> The status of the last migration. </param>
        /// <param name="testMigrateState"> The test migrate state. </param>
        /// <param name="testMigrateStateDescription"> The test migrate state description. </param>
        /// <param name="health"> The consolidated health. </param>
        /// <param name="healthErrors"> The list of health errors. </param>
        /// <param name="allowedOperations"> The allowed operations on the migration item based on the current migration state of the item. </param>
        /// <param name="currentJob"> The current job details. </param>
        /// <param name="criticalJobHistory"> The critical past job details. </param>
        /// <param name="eventCorrelationId"> The correlation Id for events associated with this migration item. </param>
        /// <param name="providerSpecificDetails">
        /// The migration provider custom settings.
        /// Please note <see cref="MigrationProviderSpecificSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VMwareCbtMigrationDetails"/>.
        /// </param>
        /// <returns> A new <see cref="Models.MigrationItemProperties"/> instance for mocking. </returns>
        public static MigrationItemProperties MigrationItemProperties(string machineName = null, string policyId = null, string policyFriendlyName = null, string recoveryServicesProviderId = null, string replicationStatus = null, MigrationState? migrationState = null, string migrationStateDescription = null, DateTimeOffset? lastTestMigrationOn = null, string lastTestMigrationStatus = null, DateTimeOffset? lastMigrationOn = null, string lastMigrationStatus = null, TestMigrationState? testMigrateState = null, string testMigrateStateDescription = null, ProtectionHealth? health = null, IEnumerable<HealthError> healthErrors = null, IEnumerable<MigrationItemOperation> allowedOperations = null, CurrentJobDetails currentJob = null, IEnumerable<CriticalJobHistoryDetails> criticalJobHistory = null, string eventCorrelationId = null, MigrationProviderSpecificSettings providerSpecificDetails = null)
        {
            healthErrors ??= new List<HealthError>();
            allowedOperations ??= new List<MigrationItemOperation>();
            criticalJobHistory ??= new List<CriticalJobHistoryDetails>();

            return new MigrationItemProperties(machineName, policyId, policyFriendlyName, recoveryServicesProviderId, replicationStatus, migrationState, migrationStateDescription, lastTestMigrationOn, lastTestMigrationStatus, lastMigrationOn, lastMigrationStatus, testMigrateState, testMigrateStateDescription, health, healthErrors?.ToList(), allowedOperations?.ToList(), currentJob, criticalJobHistory?.ToList(), eventCorrelationId, providerSpecificDetails);
        }

        /// <summary> Initializes a new instance of CurrentJobDetails. </summary>
        /// <param name="jobName"> The job name. </param>
        /// <param name="jobId"> The ARM Id of the job being executed. </param>
        /// <param name="startOn"> The start time of the job. </param>
        /// <returns> A new <see cref="Models.CurrentJobDetails"/> instance for mocking. </returns>
        public static CurrentJobDetails CurrentJobDetails(string jobName = null, string jobId = null, DateTimeOffset? startOn = null)
        {
            return new CurrentJobDetails(jobName, jobId, startOn);
        }

        /// <summary> Initializes a new instance of CriticalJobHistoryDetails. </summary>
        /// <param name="jobName"> The job name. </param>
        /// <param name="jobId"> The ARM Id of the job being executed. </param>
        /// <param name="startOn"> The start time of the job. </param>
        /// <param name="jobStatus"> The job state. </param>
        /// <returns> A new <see cref="Models.CriticalJobHistoryDetails"/> instance for mocking. </returns>
        public static CriticalJobHistoryDetails CriticalJobHistoryDetails(string jobName = null, string jobId = null, DateTimeOffset? startOn = null, string jobStatus = null)
        {
            return new CriticalJobHistoryDetails(jobName, jobId, startOn, jobStatus);
        }

        /// <summary> Initializes a new instance of MigrationRecoveryPointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Recovery point properties. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.MigrationRecoveryPointData"/> instance for mocking. </returns>
        public static MigrationRecoveryPointData MigrationRecoveryPointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigrationRecoveryPointProperties properties = null, AzureLocation? location = null)
        {
            return new MigrationRecoveryPointData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of MigrationRecoveryPointProperties. </summary>
        /// <param name="recoveryPointOn"> The recovery point time. </param>
        /// <param name="recoveryPointType"> The recovery point type. </param>
        /// <returns> A new <see cref="Models.MigrationRecoveryPointProperties"/> instance for mocking. </returns>
        public static MigrationRecoveryPointProperties MigrationRecoveryPointProperties(DateTimeOffset? recoveryPointOn = null, MigrationRecoveryPointType? recoveryPointType = null)
        {
            return new MigrationRecoveryPointProperties(recoveryPointOn, recoveryPointType);
        }

        /// <summary> Initializes a new instance of ProtectableItemData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The custom data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.ProtectableItemData"/> instance for mocking. </returns>
        public static ProtectableItemData ProtectableItemData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ProtectableItemProperties properties = null, AzureLocation? location = null)
        {
            return new ProtectableItemData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of ProtectableItemProperties. </summary>
        /// <param name="friendlyName"> The name. </param>
        /// <param name="protectionStatus"> The protection status. </param>
        /// <param name="replicationProtectedItemId"> The ARM resource of protected items. </param>
        /// <param name="recoveryServicesProviderId"> The recovery provider ARM Id. </param>
        /// <param name="protectionReadinessErrors"> The Current protection readiness errors. </param>
        /// <param name="supportedReplicationProviders"> The list of replication providers supported for the protectable item. </param>
        /// <param name="customDetails">
        /// The Replication provider custom settings.
        /// Please note <see cref="ConfigurationSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="HyperVVirtualMachineDetails"/>, <see cref="ReplicationGroupDetails"/>, <see cref="VMwareVirtualMachineDetails"/> and <see cref="VmmVirtualMachineDetails"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ProtectableItemProperties"/> instance for mocking. </returns>
        public static ProtectableItemProperties ProtectableItemProperties(string friendlyName = null, string protectionStatus = null, string replicationProtectedItemId = null, string recoveryServicesProviderId = null, IEnumerable<string> protectionReadinessErrors = null, IEnumerable<string> supportedReplicationProviders = null, ConfigurationSettings customDetails = null)
        {
            protectionReadinessErrors ??= new List<string>();
            supportedReplicationProviders ??= new List<string>();

            return new ProtectableItemProperties(friendlyName, protectionStatus, replicationProtectedItemId, recoveryServicesProviderId, protectionReadinessErrors?.ToList(), supportedReplicationProviders?.ToList(), customDetails);
        }

        /// <summary> Initializes a new instance of ReplicationProtectedItemData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The custom data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.ReplicationProtectedItemData"/> instance for mocking. </returns>
        public static ReplicationProtectedItemData ReplicationProtectedItemData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ReplicationProtectedItemProperties properties = null, AzureLocation? location = null)
        {
            return new ReplicationProtectedItemData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of ReplicationProtectedItemProperties. </summary>
        /// <param name="friendlyName"> The name. </param>
        /// <param name="protectedItemType"> The type of protected item type. </param>
        /// <param name="protectableItemId"> The protected item ARM Id. </param>
        /// <param name="recoveryServicesProviderId"> The recovery provider ARM Id. </param>
        /// <param name="primaryFabricFriendlyName"> The friendly name of the primary fabric. </param>
        /// <param name="primaryFabricProvider"> The fabric provider of the primary fabric. </param>
        /// <param name="recoveryFabricFriendlyName"> The friendly name of recovery fabric. </param>
        /// <param name="recoveryFabricId"> The Arm Id of recovery fabric. </param>
        /// <param name="primaryProtectionContainerFriendlyName"> The name of primary protection container friendly name. </param>
        /// <param name="recoveryProtectionContainerFriendlyName"> The name of recovery container friendly name. </param>
        /// <param name="protectionState"> The protection status. </param>
        /// <param name="protectionStateDescription"> The protection state description. </param>
        /// <param name="activeLocation"> The Current active location of the PE. </param>
        /// <param name="testFailoverState"> The Test failover state. </param>
        /// <param name="testFailoverStateDescription"> The Test failover state description. </param>
        /// <param name="switchProviderState"> The switch provider state. </param>
        /// <param name="switchProviderStateDescription"> The switch provider state description. </param>
        /// <param name="allowedOperations"> The allowed operations on the Replication protected item. </param>
        /// <param name="replicationHealth"> The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM&apos;s replication group into account. This is a string representation of the ProtectionHealth enumeration. </param>
        /// <param name="failoverHealth"> The consolidated failover health for the VM. </param>
        /// <param name="healthErrors"> List of health errors. </param>
        /// <param name="policyId"> The ID of Policy governing this PE. </param>
        /// <param name="policyFriendlyName"> The name of Policy governing this PE. </param>
        /// <param name="lastSuccessfulFailoverOn"> The Last successful failover time. </param>
        /// <param name="lastSuccessfulTestFailoverOn"> The Last successful test failover time. </param>
        /// <param name="currentScenario"> The current scenario. </param>
        /// <param name="failoverRecoveryPointId"> The recovery point ARM Id to which the Vm was failed over. </param>
        /// <param name="providerSpecificDetails">
        /// The Replication provider custom settings.
        /// Please note <see cref="ReplicationProviderSpecificSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="A2AReplicationDetails"/>, <see cref="A2ACrossClusterMigrationReplicationDetails"/>, <see cref="HyperVReplicaReplicationDetails"/>, <see cref="HyperVReplicaBlueReplicationDetails"/>, <see cref="HyperVReplicaAzureReplicationDetails"/>, <see cref="HyperVReplicaBaseReplicationDetails"/>, <see cref="InMageReplicationDetails"/>, <see cref="InMageAzureV2ReplicationDetails"/>, <see cref="InMageRcmReplicationDetails"/> and <see cref="InMageRcmFailbackReplicationDetails"/>.
        /// </param>
        /// <param name="recoveryContainerId"> The recovery container Id. </param>
        /// <param name="eventCorrelationId"> The correlation Id for events associated with this protected item. </param>
        /// <returns> A new <see cref="Models.ReplicationProtectedItemProperties"/> instance for mocking. </returns>
        public static ReplicationProtectedItemProperties ReplicationProtectedItemProperties(string friendlyName = null, string protectedItemType = null, string protectableItemId = null, string recoveryServicesProviderId = null, string primaryFabricFriendlyName = null, string primaryFabricProvider = null, string recoveryFabricFriendlyName = null, string recoveryFabricId = null, string primaryProtectionContainerFriendlyName = null, string recoveryProtectionContainerFriendlyName = null, string protectionState = null, string protectionStateDescription = null, string activeLocation = null, string testFailoverState = null, string testFailoverStateDescription = null, string switchProviderState = null, string switchProviderStateDescription = null, IEnumerable<string> allowedOperations = null, string replicationHealth = null, string failoverHealth = null, IEnumerable<HealthError> healthErrors = null, string policyId = null, string policyFriendlyName = null, DateTimeOffset? lastSuccessfulFailoverOn = null, DateTimeOffset? lastSuccessfulTestFailoverOn = null, CurrentScenarioDetails currentScenario = null, string failoverRecoveryPointId = null, ReplicationProviderSpecificSettings providerSpecificDetails = null, string recoveryContainerId = null, string eventCorrelationId = null)
        {
            allowedOperations ??= new List<string>();
            healthErrors ??= new List<HealthError>();

            return new ReplicationProtectedItemProperties(friendlyName, protectedItemType, protectableItemId, recoveryServicesProviderId, primaryFabricFriendlyName, primaryFabricProvider, recoveryFabricFriendlyName, recoveryFabricId, primaryProtectionContainerFriendlyName, recoveryProtectionContainerFriendlyName, protectionState, protectionStateDescription, activeLocation, testFailoverState, testFailoverStateDescription, switchProviderState, switchProviderStateDescription, allowedOperations?.ToList(), replicationHealth, failoverHealth, healthErrors?.ToList(), policyId, policyFriendlyName, lastSuccessfulFailoverOn, lastSuccessfulTestFailoverOn, currentScenario, failoverRecoveryPointId, providerSpecificDetails, recoveryContainerId, eventCorrelationId);
        }

        /// <summary> Initializes a new instance of CurrentScenarioDetails. </summary>
        /// <param name="scenarioName"> Scenario name. </param>
        /// <param name="jobId"> ARM Id of the job being executed. </param>
        /// <param name="startOn"> Start time of the workflow. </param>
        /// <returns> A new <see cref="Models.CurrentScenarioDetails"/> instance for mocking. </returns>
        public static CurrentScenarioDetails CurrentScenarioDetails(string scenarioName = null, string jobId = null, DateTimeOffset? startOn = null)
        {
            return new CurrentScenarioDetails(scenarioName, jobId, startOn);
        }

        /// <summary> Initializes a new instance of RecoveryPointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The recovery point properties. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.RecoveryPointData"/> instance for mocking. </returns>
        public static RecoveryPointData RecoveryPointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RecoveryPointProperties properties = null, AzureLocation? location = null)
        {
            return new RecoveryPointData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of RecoveryPointProperties. </summary>
        /// <param name="recoveryPointOn"> The recovery point time. </param>
        /// <param name="recoveryPointType"> The recovery point type: ApplicationConsistent, CrashConsistent. </param>
        /// <param name="providerSpecificDetails">
        /// The provider specific details for the recovery point.
        /// Please note <see cref="ProviderSpecificRecoveryPointDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="A2ARecoveryPointDetails"/>, <see cref="InMageAzureV2RecoveryPointDetails"/> and <see cref="InMageRcmRecoveryPointDetails"/>.
        /// </param>
        /// <returns> A new <see cref="Models.RecoveryPointProperties"/> instance for mocking. </returns>
        public static RecoveryPointProperties RecoveryPointProperties(DateTimeOffset? recoveryPointOn = null, string recoveryPointType = null, ProviderSpecificRecoveryPointDetails providerSpecificDetails = null)
        {
            return new RecoveryPointProperties(recoveryPointOn, recoveryPointType, providerSpecificDetails);
        }

        /// <summary> Initializes a new instance of TargetComputeSize. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The custom data. </param>
        /// <returns> A new <see cref="Models.TargetComputeSize"/> instance for mocking. </returns>
        public static TargetComputeSize TargetComputeSize(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, TargetComputeSizeProperties properties = null)
        {
            return new TargetComputeSize(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of TargetComputeSizeProperties. </summary>
        /// <param name="name"> Target compute size name. </param>
        /// <param name="friendlyName"> Target compute size display name. </param>
        /// <param name="cpuCoresCount"> The maximum cpu cores count supported by target compute size. </param>
        /// <param name="vCpusAvailable"> The Available vCPUs supported by target compute size. </param>
        /// <param name="memoryInGB"> The maximum memory in GB supported by target compute size. </param>
        /// <param name="maxDataDiskCount"> The maximum data disks count supported by target compute size. </param>
        /// <param name="maxNicsCount"> The maximum Nics count supported by target compute size. </param>
        /// <param name="errors"> The reasons why the target compute size is not applicable for the protected item. </param>
        /// <param name="highIopsSupported"> The value indicating whether the target compute size supports high Iops. </param>
        /// <param name="hyperVGenerations"> The supported HyperV Generations. </param>
        /// <returns> A new <see cref="Models.TargetComputeSizeProperties"/> instance for mocking. </returns>
        public static TargetComputeSizeProperties TargetComputeSizeProperties(string name = null, string friendlyName = null, int? cpuCoresCount = null, int? vCpusAvailable = null, double? memoryInGB = null, int? maxDataDiskCount = null, int? maxNicsCount = null, IEnumerable<ComputeSizeErrorDetails> errors = null, string highIopsSupported = null, IEnumerable<string> hyperVGenerations = null)
        {
            errors ??= new List<ComputeSizeErrorDetails>();
            hyperVGenerations ??= new List<string>();

            return new TargetComputeSizeProperties(name, friendlyName, cpuCoresCount, vCpusAvailable, memoryInGB, maxDataDiskCount, maxNicsCount, errors?.ToList(), highIopsSupported, hyperVGenerations?.ToList());
        }

        /// <summary> Initializes a new instance of ComputeSizeErrorDetails. </summary>
        /// <param name="message"> The error message. </param>
        /// <param name="severity"> The severity of the error. </param>
        /// <returns> A new <see cref="Models.ComputeSizeErrorDetails"/> instance for mocking. </returns>
        public static ComputeSizeErrorDetails ComputeSizeErrorDetails(string message = null, string severity = null)
        {
            return new ComputeSizeErrorDetails(message, severity);
        }

        /// <summary> Initializes a new instance of ProtectionContainerMappingData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The custom data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.ProtectionContainerMappingData"/> instance for mocking. </returns>
        public static ProtectionContainerMappingData ProtectionContainerMappingData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ProtectionContainerMappingProperties properties = null, AzureLocation? location = null)
        {
            return new ProtectionContainerMappingData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of ProtectionContainerMappingProperties. </summary>
        /// <param name="targetProtectionContainerId"> Paired protection container ARM ID. </param>
        /// <param name="targetProtectionContainerFriendlyName"> Friendly name of paired container. </param>
        /// <param name="providerSpecificDetails">
        /// Provider specific provider details.
        /// Please note <see cref="ProtectionContainerMappingProviderSpecificDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="A2AProtectionContainerMappingDetails"/>, <see cref="InMageRcmProtectionContainerMappingDetails"/> and <see cref="VMwareCbtProtectionContainerMappingDetails"/>.
        /// </param>
        /// <param name="health"> Health of pairing. </param>
        /// <param name="healthErrorDetails"> Health error. </param>
        /// <param name="policyId"> Policy ARM Id. </param>
        /// <param name="state"> Association Status. </param>
        /// <param name="sourceProtectionContainerFriendlyName"> Friendly name of source protection container. </param>
        /// <param name="sourceFabricFriendlyName"> Friendly name of source fabric. </param>
        /// <param name="targetFabricFriendlyName"> Friendly name of target fabric. </param>
        /// <param name="policyFriendlyName"> Friendly name of replication policy. </param>
        /// <returns> A new <see cref="Models.ProtectionContainerMappingProperties"/> instance for mocking. </returns>
        public static ProtectionContainerMappingProperties ProtectionContainerMappingProperties(string targetProtectionContainerId = null, string targetProtectionContainerFriendlyName = null, ProtectionContainerMappingProviderSpecificDetails providerSpecificDetails = null, string health = null, IEnumerable<HealthError> healthErrorDetails = null, string policyId = null, string state = null, string sourceProtectionContainerFriendlyName = null, string sourceFabricFriendlyName = null, string targetFabricFriendlyName = null, string policyFriendlyName = null)
        {
            healthErrorDetails ??= new List<HealthError>();

            return new ProtectionContainerMappingProperties(targetProtectionContainerId, targetProtectionContainerFriendlyName, providerSpecificDetails, health, healthErrorDetails?.ToList(), policyId, state, sourceProtectionContainerFriendlyName, sourceFabricFriendlyName, targetFabricFriendlyName, policyFriendlyName);
        }

        /// <summary> Initializes a new instance of RecoveryServicesProviderData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Provider properties. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.RecoveryServicesProviderData"/> instance for mocking. </returns>
        public static RecoveryServicesProviderData RecoveryServicesProviderData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RecoveryServicesProviderProperties properties = null, AzureLocation? location = null)
        {
            return new RecoveryServicesProviderData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of RecoveryServicesProviderProperties. </summary>
        /// <param name="fabricType"> Type of the site. </param>
        /// <param name="friendlyName"> Friendly name of the DRA. </param>
        /// <param name="providerVersion"> The provider version. </param>
        /// <param name="serverVersion"> The fabric provider. </param>
        /// <param name="providerVersionState"> DRA version status. </param>
        /// <param name="providerVersionExpiryOn"> Expiry date of the version. </param>
        /// <param name="fabricFriendlyName"> The fabric friendly name. </param>
        /// <param name="lastHeartBeat"> Time when last heartbeat was sent by the DRA. </param>
        /// <param name="connectionStatus"> A value indicating whether DRA is responsive. </param>
        /// <param name="protectedItemCount"> Number of protected VMs currently managed by the DRA. </param>
        /// <param name="allowedScenarios"> The scenarios allowed on this provider. </param>
        /// <param name="healthErrorDetails"> The recovery services provider health error details. </param>
        /// <param name="draIdentifier"> The DRA Id. </param>
        /// <param name="machineId"> The machine Id. </param>
        /// <param name="machineName"> The machine name. </param>
        /// <param name="biosId"> The Bios Id. </param>
        /// <param name="authenticationIdentityDetails"> The authentication identity details. </param>
        /// <param name="resourceAccessIdentityDetails"> The resource access identity details. </param>
        /// <param name="dataPlaneAuthenticationIdentityDetails"> The data plane authentication identity details. </param>
        /// <param name="providerVersionDetails"> The provider version details. </param>
        /// <returns> A new <see cref="Models.RecoveryServicesProviderProperties"/> instance for mocking. </returns>
        public static RecoveryServicesProviderProperties RecoveryServicesProviderProperties(string fabricType = null, string friendlyName = null, string providerVersion = null, string serverVersion = null, string providerVersionState = null, DateTimeOffset? providerVersionExpiryOn = null, string fabricFriendlyName = null, DateTimeOffset? lastHeartBeat = null, string connectionStatus = null, int? protectedItemCount = null, IEnumerable<string> allowedScenarios = null, IEnumerable<HealthError> healthErrorDetails = null, string draIdentifier = null, string machineId = null, string machineName = null, string biosId = null, IdentityProviderDetails authenticationIdentityDetails = null, IdentityProviderDetails resourceAccessIdentityDetails = null, IdentityProviderDetails dataPlaneAuthenticationIdentityDetails = null, VersionDetails providerVersionDetails = null)
        {
            allowedScenarios ??= new List<string>();
            healthErrorDetails ??= new List<HealthError>();

            return new RecoveryServicesProviderProperties(fabricType, friendlyName, providerVersion, serverVersion, providerVersionState, providerVersionExpiryOn, fabricFriendlyName, lastHeartBeat, connectionStatus, protectedItemCount, allowedScenarios?.ToList(), healthErrorDetails?.ToList(), draIdentifier, machineId, machineName, biosId, authenticationIdentityDetails, resourceAccessIdentityDetails, dataPlaneAuthenticationIdentityDetails, providerVersionDetails);
        }

        /// <summary> Initializes a new instance of IdentityProviderDetails. </summary>
        /// <param name="tenantId"> The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services. </param>
        /// <param name="applicationId"> The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services. </param>
        /// <param name="objectId"> The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services. </param>
        /// <param name="audience"> The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services. </param>
        /// <param name="aadAuthority"> The base authority for Azure Active Directory authentication. </param>
        /// <returns> A new <see cref="Models.IdentityProviderDetails"/> instance for mocking. </returns>
        public static IdentityProviderDetails IdentityProviderDetails(Guid? tenantId = null, string applicationId = null, string objectId = null, string audience = null, string aadAuthority = null)
        {
            return new IdentityProviderDetails(tenantId, applicationId, objectId, audience, aadAuthority);
        }

        /// <summary> Initializes a new instance of VersionDetails. </summary>
        /// <param name="version"> The agent version. </param>
        /// <param name="expiryOn"> Version expiry date. </param>
        /// <param name="status"> A value indicating whether security update required. </param>
        /// <returns> A new <see cref="Models.VersionDetails"/> instance for mocking. </returns>
        public static VersionDetails VersionDetails(string version = null, DateTimeOffset? expiryOn = null, AgentVersionStatus? status = null)
        {
            return new VersionDetails(version, expiryOn, status);
        }

        /// <summary> Initializes a new instance of StorageClassificationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="storageClassificationFriendlyName"> Properties of the storage object. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.StorageClassificationData"/> instance for mocking. </returns>
        public static StorageClassificationData StorageClassificationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string storageClassificationFriendlyName = null, AzureLocation? location = null)
        {
            return new StorageClassificationData(id, name, resourceType, systemData, storageClassificationFriendlyName != null ? new StorageClassificationProperties(storageClassificationFriendlyName) : null, location);
        }

        /// <summary> Initializes a new instance of StorageClassificationMappingData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="targetStorageClassificationId"> Properties of the storage mapping object. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.StorageClassificationMappingData"/> instance for mocking. </returns>
        public static StorageClassificationMappingData StorageClassificationMappingData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string targetStorageClassificationId = null, AzureLocation? location = null)
        {
            return new StorageClassificationMappingData(id, name, resourceType, systemData, targetStorageClassificationId != null ? new StorageClassificationMappingProperties(targetStorageClassificationId) : null, location);
        }

        /// <summary> Initializes a new instance of VCenterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> VCenter related data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.VCenterData"/> instance for mocking. </returns>
        public static VCenterData VCenterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, VCenterProperties properties = null, AzureLocation? location = null)
        {
            return new VCenterData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of VCenterProperties. </summary>
        /// <param name="friendlyName"> Friendly name of the vCenter. </param>
        /// <param name="internalId"> VCenter internal ID. </param>
        /// <param name="lastHeartbeat"> The time when the last heartbeat was received by vCenter. </param>
        /// <param name="discoveryStatus"> The VCenter discovery status. </param>
        /// <param name="processServerId"> The process server Id. </param>
        /// <param name="ipAddress"> The IP address of the vCenter. </param>
        /// <param name="infrastructureId"> The infrastructure Id of vCenter. </param>
        /// <param name="port"> The port number for discovery. </param>
        /// <param name="runAsAccountId"> The account Id which has privileges to discover the vCenter. </param>
        /// <param name="fabricArmResourceName"> The ARM resource name of the fabric containing this VCenter. </param>
        /// <param name="healthErrors"> The health errors for this VCenter. </param>
        /// <returns> A new <see cref="Models.VCenterProperties"/> instance for mocking. </returns>
        public static VCenterProperties VCenterProperties(string friendlyName = null, string internalId = null, DateTimeOffset? lastHeartbeat = null, string discoveryStatus = null, string processServerId = null, string ipAddress = null, string infrastructureId = null, string port = null, string runAsAccountId = null, string fabricArmResourceName = null, IEnumerable<HealthError> healthErrors = null)
        {
            healthErrors ??= new List<HealthError>();

            return new VCenterProperties(friendlyName, internalId, lastHeartbeat, discoveryStatus, processServerId, ipAddress, infrastructureId, port, runAsAccountId, fabricArmResourceName, healthErrors?.ToList());
        }

        /// <summary> Initializes a new instance of JobData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The custom data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.JobData"/> instance for mocking. </returns>
        public static JobData JobData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, JobProperties properties = null, AzureLocation? location = null)
        {
            return new JobData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of JobProperties. </summary>
        /// <param name="activityId"> The activity id. </param>
        /// <param name="scenarioName"> The ScenarioName. </param>
        /// <param name="friendlyName"> The DisplayName. </param>
        /// <param name="state"> The status of the Job. It is one of these values - NotStarted, InProgress, Succeeded, Failed, Cancelled, Suspended or Other. </param>
        /// <param name="stateDescription"> The description of the state of the Job. For e.g. - For Succeeded state, description can be Completed, PartiallySucceeded, CompletedWithInformation or Skipped. </param>
        /// <param name="tasks"> The tasks. </param>
        /// <param name="errors"> The errors. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="allowedActions"> The Allowed action the job. </param>
        /// <param name="targetObjectId"> The affected Object Id. </param>
        /// <param name="targetObjectName"> The name of the affected object. </param>
        /// <param name="targetInstanceType"> The type of the affected object which is of Microsoft.Azure.SiteRecovery.V2015_11_10.AffectedObjectType class. </param>
        /// <param name="customDetails">
        /// The custom job details like test failover job details.
        /// Please note <see cref="JobDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AsrJobDetails"/>, <see cref="ExportJobDetails"/>, <see cref="FailoverJobDetails"/>, <see cref="SwitchProtectionJobDetails"/> and <see cref="TestFailoverJobDetails"/>.
        /// </param>
        /// <returns> A new <see cref="Models.JobProperties"/> instance for mocking. </returns>
        public static JobProperties JobProperties(string activityId = null, string scenarioName = null, string friendlyName = null, string state = null, string stateDescription = null, IEnumerable<ASRTask> tasks = null, IEnumerable<JobErrorDetails> errors = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, IEnumerable<string> allowedActions = null, string targetObjectId = null, string targetObjectName = null, string targetInstanceType = null, JobDetails customDetails = null)
        {
            tasks ??= new List<ASRTask>();
            errors ??= new List<JobErrorDetails>();
            allowedActions ??= new List<string>();

            return new JobProperties(activityId, scenarioName, friendlyName, state, stateDescription, tasks?.ToList(), errors?.ToList(), startOn, endOn, allowedActions?.ToList(), targetObjectId, targetObjectName, targetInstanceType, customDetails);
        }

        /// <summary> Initializes a new instance of ASRTask. </summary>
        /// <param name="taskId"> The Id. </param>
        /// <param name="name"> The unique Task name. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="allowedActions"> The state/actions applicable on this task. </param>
        /// <param name="friendlyName"> The name. </param>
        /// <param name="state"> The State. It is one of these values - NotStarted, InProgress, Succeeded, Failed, Cancelled, Suspended or Other. </param>
        /// <param name="stateDescription"> The description of the task state. For example - For Succeeded state, description can be Completed, PartiallySucceeded, CompletedWithInformation or Skipped. </param>
        /// <param name="taskType"> The type of task. Details in CustomDetails property depend on this type. </param>
        /// <param name="customDetails">
        /// The custom task details based on the task type.
        /// Please note <see cref="TaskTypeDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutomationRunbookTaskDetails"/>, <see cref="ConsistencyCheckTaskDetails"/>, <see cref="FabricReplicationGroupTaskDetails"/>, <see cref="JobTaskDetails"/>, <see cref="ManualActionTaskDetails"/>, <see cref="ScriptActionTaskDetails"/>, <see cref="VirtualMachineTaskDetails"/> and <see cref="VmNicUpdatesTaskDetails"/>.
        /// </param>
        /// <param name="groupTaskCustomDetails">
        /// The custom task details based on the task type, if the task type is GroupTaskDetails or one of the types derived from it.
        /// Please note <see cref="GroupTaskDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="InlineWorkflowTaskDetails"/>, <see cref="RecoveryPlanGroupTaskDetails"/> and <see cref="RecoveryPlanShutdownGroupTaskDetails"/>.
        /// </param>
        /// <param name="errors"> The task error details. </param>
        /// <returns> A new <see cref="Models.ASRTask"/> instance for mocking. </returns>
        public static ASRTask ASRTask(string taskId = null, string name = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, IEnumerable<string> allowedActions = null, string friendlyName = null, string state = null, string stateDescription = null, string taskType = null, TaskTypeDetails customDetails = null, GroupTaskDetails groupTaskCustomDetails = null, IEnumerable<JobErrorDetails> errors = null)
        {
            allowedActions ??= new List<string>();
            errors ??= new List<JobErrorDetails>();

            return new ASRTask(taskId, name, startOn, endOn, allowedActions?.ToList(), friendlyName, state, stateDescription, taskType, customDetails, groupTaskCustomDetails, errors?.ToList());
        }

        /// <summary> Initializes a new instance of GroupTaskDetails. </summary>
        /// <param name="instanceType"> The type of task details. </param>
        /// <param name="childTasks"> The child tasks. </param>
        /// <returns> A new <see cref="Models.GroupTaskDetails"/> instance for mocking. </returns>
        public static GroupTaskDetails GroupTaskDetails(string instanceType = null, IEnumerable<ASRTask> childTasks = null)
        {
            childTasks ??= new List<ASRTask>();

            return new UnknownGroupTaskDetails(instanceType, childTasks?.ToList());
        }

        /// <summary> Initializes a new instance of JobErrorDetails. </summary>
        /// <param name="serviceErrorDetails"> The Service error details. </param>
        /// <param name="providerErrorDetails"> The Provider error details. </param>
        /// <param name="errorLevel"> Error level of error. </param>
        /// <param name="createdOn"> The creation time of job error. </param>
        /// <param name="taskId"> The Id of the task. </param>
        /// <returns> A new <see cref="Models.JobErrorDetails"/> instance for mocking. </returns>
        public static JobErrorDetails JobErrorDetails(ServiceError serviceErrorDetails = null, ProviderError providerErrorDetails = null, string errorLevel = null, DateTimeOffset? createdOn = null, string taskId = null)
        {
            return new JobErrorDetails(serviceErrorDetails, providerErrorDetails, errorLevel, createdOn, taskId);
        }

        /// <summary> Initializes a new instance of ServiceError. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="possibleCauses"> Possible causes of error. </param>
        /// <param name="recommendedAction"> Recommended action to resolve error. </param>
        /// <param name="activityId"> Activity Id. </param>
        /// <returns> A new <see cref="Models.ServiceError"/> instance for mocking. </returns>
        public static ServiceError ServiceError(string code = null, string message = null, string possibleCauses = null, string recommendedAction = null, string activityId = null)
        {
            return new ServiceError(code, message, possibleCauses, recommendedAction, activityId);
        }

        /// <summary> Initializes a new instance of ProviderError. </summary>
        /// <param name="errorCode"> The Error code. </param>
        /// <param name="errorMessage"> The Error message. </param>
        /// <param name="errorId"> The Provider error Id. </param>
        /// <param name="possibleCauses"> The possible causes for the error. </param>
        /// <param name="recommendedAction"> The recommended action to resolve the error. </param>
        /// <returns> A new <see cref="Models.ProviderError"/> instance for mocking. </returns>
        public static ProviderError ProviderError(int? errorCode = null, string errorMessage = null, string errorId = null, string possibleCauses = null, string recommendedAction = null)
        {
            return new ProviderError(errorCode, errorMessage, errorId, possibleCauses, recommendedAction);
        }

        /// <summary> Initializes a new instance of JobDetails. </summary>
        /// <param name="instanceType"> Gets the type of job details (see JobDetailsTypes enum for possible values). </param>
        /// <param name="affectedObjectDetails"> The affected object properties like source server, source cloud, target server, target cloud etc. based on the workflow object details. </param>
        /// <returns> A new <see cref="Models.JobDetails"/> instance for mocking. </returns>
        public static JobDetails JobDetails(string instanceType = null, IReadOnlyDictionary<string, string> affectedObjectDetails = null)
        {
            affectedObjectDetails ??= new Dictionary<string, string>();

            return new UnknownJobDetails(instanceType, affectedObjectDetails);
        }

        /// <summary> Initializes a new instance of PolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The custom data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.PolicyData"/> instance for mocking. </returns>
        public static PolicyData PolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PolicyProperties properties = null, AzureLocation? location = null)
        {
            return new PolicyData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of PolicyProperties. </summary>
        /// <param name="friendlyName"> The FriendlyName. </param>
        /// <param name="providerSpecificDetails">
        /// The ReplicationChannelSetting.
        /// Please note <see cref="PolicyProviderSpecificDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="A2APolicyDetails"/>, <see cref="HyperVReplicaPolicyDetails"/>, <see cref="HyperVReplicaBluePolicyDetails"/>, <see cref="HyperVReplicaAzurePolicyDetails"/>, <see cref="HyperVReplicaBasePolicyDetails"/>, <see cref="InMagePolicyDetails"/>, <see cref="InMageAzureV2PolicyDetails"/>, <see cref="InMageBasePolicyDetails"/>, <see cref="InMageRcmPolicyDetails"/>, <see cref="InMageRcmFailbackPolicyDetails"/> and <see cref="VMwareCbtPolicyDetails"/>.
        /// </param>
        /// <returns> A new <see cref="Models.PolicyProperties"/> instance for mocking. </returns>
        public static PolicyProperties PolicyProperties(string friendlyName = null, PolicyProviderSpecificDetails providerSpecificDetails = null)
        {
            return new PolicyProperties(friendlyName, providerSpecificDetails);
        }

        /// <summary> Initializes a new instance of ReplicationProtectionIntentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The custom data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.ReplicationProtectionIntentData"/> instance for mocking. </returns>
        public static ReplicationProtectionIntentData ReplicationProtectionIntentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ReplicationProtectionIntentProperties properties = null, AzureLocation? location = null)
        {
            return new ReplicationProtectionIntentData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of ReplicationProtectionIntentProperties. </summary>
        /// <param name="friendlyName"> The name. </param>
        /// <param name="jobId"> The job Id. </param>
        /// <param name="jobState"> The job state. </param>
        /// <param name="isActive"> A value indicating whether the intent object is active. </param>
        /// <param name="creationTimeUTC"> The creation time in UTC. </param>
        /// <param name="providerSpecificDetails">
        /// The Replication provider custom settings.
        /// Please note <see cref="ReplicationProtectionIntentProviderSpecificSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="A2AReplicationIntentDetails"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ReplicationProtectionIntentProperties"/> instance for mocking. </returns>
        public static ReplicationProtectionIntentProperties ReplicationProtectionIntentProperties(string friendlyName = null, string jobId = null, string jobState = null, bool? isActive = null, string creationTimeUTC = null, ReplicationProtectionIntentProviderSpecificSettings providerSpecificDetails = null)
        {
            return new ReplicationProtectionIntentProperties(friendlyName, jobId, jobState, isActive, creationTimeUTC, providerSpecificDetails);
        }

        /// <summary> Initializes a new instance of RecoveryPlanData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The custom details. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.RecoveryPlanData"/> instance for mocking. </returns>
        public static RecoveryPlanData RecoveryPlanData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RecoveryPlanProperties properties = null, AzureLocation? location = null)
        {
            return new RecoveryPlanData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of RecoveryPlanProperties. </summary>
        /// <param name="friendlyName"> The friendly name. </param>
        /// <param name="primaryFabricId"> The primary fabric Id. </param>
        /// <param name="primaryFabricFriendlyName"> The primary fabric friendly name. </param>
        /// <param name="recoveryFabricId"> The recovery fabric Id. </param>
        /// <param name="recoveryFabricFriendlyName"> The recovery fabric friendly name. </param>
        /// <param name="failoverDeploymentModel"> The failover deployment model. </param>
        /// <param name="replicationProviders"> The list of replication providers. </param>
        /// <param name="allowedOperations"> The list of allowed operations. </param>
        /// <param name="lastPlannedFailoverOn"> The start time of the last planned failover. </param>
        /// <param name="lastUnplannedFailoverOn"> The start time of the last unplanned failover. </param>
        /// <param name="lastTestFailoverOn"> The start time of the last test failover. </param>
        /// <param name="currentScenario"> The current scenario details. </param>
        /// <param name="currentScenarioStatus"> The recovery plan status. </param>
        /// <param name="currentScenarioStatusDescription"> The recovery plan status description. </param>
        /// <param name="groups"> The recovery plan groups. </param>
        /// <param name="providerSpecificDetails">
        /// The provider id and provider specific details.
        /// Please note <see cref="RecoveryPlanProviderSpecificDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="RecoveryPlanA2ADetails"/>.
        /// </param>
        /// <returns> A new <see cref="Models.RecoveryPlanProperties"/> instance for mocking. </returns>
        public static RecoveryPlanProperties RecoveryPlanProperties(string friendlyName = null, string primaryFabricId = null, string primaryFabricFriendlyName = null, string recoveryFabricId = null, string recoveryFabricFriendlyName = null, string failoverDeploymentModel = null, IEnumerable<string> replicationProviders = null, IEnumerable<string> allowedOperations = null, DateTimeOffset? lastPlannedFailoverOn = null, DateTimeOffset? lastUnplannedFailoverOn = null, DateTimeOffset? lastTestFailoverOn = null, CurrentScenarioDetails currentScenario = null, string currentScenarioStatus = null, string currentScenarioStatusDescription = null, IEnumerable<RecoveryPlanGroup> groups = null, IEnumerable<RecoveryPlanProviderSpecificDetails> providerSpecificDetails = null)
        {
            replicationProviders ??= new List<string>();
            allowedOperations ??= new List<string>();
            groups ??= new List<RecoveryPlanGroup>();
            providerSpecificDetails ??= new List<RecoveryPlanProviderSpecificDetails>();

            return new RecoveryPlanProperties(friendlyName, primaryFabricId, primaryFabricFriendlyName, recoveryFabricId, recoveryFabricFriendlyName, failoverDeploymentModel, replicationProviders?.ToList(), allowedOperations?.ToList(), lastPlannedFailoverOn, lastUnplannedFailoverOn, lastTestFailoverOn, currentScenario, currentScenarioStatus, currentScenarioStatusDescription, groups?.ToList(), providerSpecificDetails?.ToList());
        }

        /// <summary> Initializes a new instance of SupportedOperatingSystems. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="supportedOSList"> The supported operating systems properties. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="Models.SupportedOperatingSystems"/> instance for mocking. </returns>
        public static SupportedOperatingSystems SupportedOperatingSystems(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<SupportedOSProperty> supportedOSList = null, AzureLocation? location = null)
        {
            supportedOSList ??= new List<SupportedOSProperty>();

            return new SupportedOperatingSystems(id, name, resourceType, systemData, supportedOSList != null ? new SupportedOSProperties(supportedOSList?.ToList()) : null, location);
        }

        /// <summary> Initializes a new instance of SupportedOSProperty. </summary>
        /// <param name="instanceType"> The replication provider type. </param>
        /// <param name="supportedOS"> The list of supported operating systems. </param>
        /// <returns> A new <see cref="Models.SupportedOSProperty"/> instance for mocking. </returns>
        public static SupportedOSProperty SupportedOSProperty(string instanceType = null, IEnumerable<SupportedOSDetails> supportedOS = null)
        {
            supportedOS ??= new List<SupportedOSDetails>();

            return new SupportedOSProperty(instanceType, supportedOS?.ToList());
        }

        /// <summary> Initializes a new instance of SupportedOSDetails. </summary>
        /// <param name="osName"> The name. </param>
        /// <param name="osType"> The type. </param>
        /// <param name="osVersions"> The list of version for operating system. </param>
        /// <returns> A new <see cref="Models.SupportedOSDetails"/> instance for mocking. </returns>
        public static SupportedOSDetails SupportedOSDetails(string osName = null, string osType = null, IEnumerable<OSVersionWrapper> osVersions = null)
        {
            osVersions ??= new List<OSVersionWrapper>();

            return new SupportedOSDetails(osName, osType, osVersions?.ToList());
        }

        /// <summary> Initializes a new instance of OSVersionWrapper. </summary>
        /// <param name="version"> The version. </param>
        /// <param name="servicePack"> The service pack. </param>
        /// <returns> A new <see cref="Models.OSVersionWrapper"/> instance for mocking. </returns>
        public static OSVersionWrapper OSVersionWrapper(string version = null, string servicePack = null)
        {
            return new OSVersionWrapper(version, servicePack);
        }

        /// <summary> Initializes a new instance of VaultHealthDetails. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The vault health related data. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="Models.VaultHealthDetails"/> instance for mocking. </returns>
        public static VaultHealthDetails VaultHealthDetails(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, VaultHealthProperties properties = null, AzureLocation? location = null)
        {
            return new VaultHealthDetails(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of VaultHealthProperties. </summary>
        /// <param name="vaultErrors"> The list of errors on the vault. </param>
        /// <param name="protectedItemsHealth"> The list of the health detail of the protected items in the vault. </param>
        /// <param name="fabricsHealth"> The list of the health detail of the fabrics in the vault. </param>
        /// <param name="containersHealth"> The list of the health detail of the containers in the vault. </param>
        /// <returns> A new <see cref="Models.VaultHealthProperties"/> instance for mocking. </returns>
        public static VaultHealthProperties VaultHealthProperties(IEnumerable<HealthError> vaultErrors = null, ResourceHealthSummary protectedItemsHealth = null, ResourceHealthSummary fabricsHealth = null, ResourceHealthSummary containersHealth = null)
        {
            vaultErrors ??= new List<HealthError>();

            return new VaultHealthProperties(vaultErrors?.ToList(), protectedItemsHealth, fabricsHealth, containersHealth);
        }

        /// <summary> Initializes a new instance of ResourceHealthSummary. </summary>
        /// <param name="resourceCount"> The count of total resources under the container. </param>
        /// <param name="issues"> The list of summary of health errors across the resources under the container. </param>
        /// <param name="categorizedResourceCounts"> The categorized resource counts. </param>
        /// <returns> A new <see cref="Models.ResourceHealthSummary"/> instance for mocking. </returns>
        public static ResourceHealthSummary ResourceHealthSummary(int? resourceCount = null, IEnumerable<HealthErrorSummary> issues = null, IReadOnlyDictionary<string, int> categorizedResourceCounts = null)
        {
            issues ??= new List<HealthErrorSummary>();
            categorizedResourceCounts ??= new Dictionary<string, int>();

            return new ResourceHealthSummary(resourceCount, issues?.ToList(), categorizedResourceCounts);
        }

        /// <summary> Initializes a new instance of HealthErrorSummary. </summary>
        /// <param name="summaryCode"> The code of the health error. </param>
        /// <param name="category"> The category of the health error. </param>
        /// <param name="severity"> Severity of error. </param>
        /// <param name="summaryMessage"> The summary message of the health error. </param>
        /// <param name="affectedResourceType"> The type of affected ARM resource. </param>
        /// <param name="affectedResourceSubtype"> The sub type of any subcomponent within the ARM resource that this might be applicable. Value remains null if not applicable. </param>
        /// <param name="affectedResourceCorrelationIds"> The list of affected resource correlation Ids. This can be used to uniquely identify the count of items affected by a specific category and severity as well as count of item affected by an specific issue. </param>
        /// <returns> A new <see cref="Models.HealthErrorSummary"/> instance for mocking. </returns>
        public static HealthErrorSummary HealthErrorSummary(string summaryCode = null, HealthErrorCategory? category = null, Severity? severity = null, string summaryMessage = null, string affectedResourceType = null, string affectedResourceSubtype = null, IEnumerable<string> affectedResourceCorrelationIds = null)
        {
            affectedResourceCorrelationIds ??= new List<string>();

            return new HealthErrorSummary(summaryCode, category, severity, summaryMessage, affectedResourceType, affectedResourceSubtype, affectedResourceCorrelationIds?.ToList());
        }

        /// <summary> Initializes a new instance of VaultSettingData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The vault setting properties. </param>
        /// <param name="location"> Resource Location. </param>
        /// <returns> A new <see cref="RecoveryServicesSiteRecovery.VaultSettingData"/> instance for mocking. </returns>
        public static VaultSettingData VaultSettingData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, VaultSettingProperties properties = null, AzureLocation? location = null)
        {
            return new VaultSettingData(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of VaultSettingProperties. </summary>
        /// <param name="migrationSolutionId"> The migration solution ARM Id. </param>
        /// <param name="vmwareToAzureProviderType"> VMware to Azure provider type. </param>
        /// <returns> A new <see cref="Models.VaultSettingProperties"/> instance for mocking. </returns>
        public static VaultSettingProperties VaultSettingProperties(string migrationSolutionId = null, string vmwareToAzureProviderType = null)
        {
            return new VaultSettingProperties(migrationSolutionId, vmwareToAzureProviderType);
        }

        /// <summary> Initializes a new instance of A2ACrossClusterMigrationReplicationDetails. </summary>
        /// <param name="fabricObjectId"> The fabric specific object Id of the virtual machine. </param>
        /// <param name="primaryFabricLocation"> Primary fabric location. </param>
        /// <param name="osType"> The type of operating system. </param>
        /// <param name="vmProtectionState"> The protection state for the vm. </param>
        /// <param name="vmProtectionStateDescription"> The protection state description for the vm. </param>
        /// <param name="lifecycleId"> An id associated with the PE that survives actions like switch protection which change the backing PE/CPE objects internally.The lifecycle id gets carried forward to have a link/continuity in being able to have an Id that denotes the &quot;same&quot; protected item even though other internal Ids/ARM Id might be changing. </param>
        /// <returns> A new <see cref="Models.A2ACrossClusterMigrationReplicationDetails"/> instance for mocking. </returns>
        public static A2ACrossClusterMigrationReplicationDetails A2ACrossClusterMigrationReplicationDetails(string fabricObjectId = null, string primaryFabricLocation = null, string osType = null, string vmProtectionState = null, string vmProtectionStateDescription = null, string lifecycleId = null)
        {
            return new A2ACrossClusterMigrationReplicationDetails("A2ACrossClusterMigration", fabricObjectId, primaryFabricLocation, osType, vmProtectionState, vmProtectionStateDescription, lifecycleId);
        }

        /// <summary> Initializes a new instance of A2AEventDetails. </summary>
        /// <param name="protectedItemName"> The protected item arm name. </param>
        /// <param name="fabricObjectId"> The azure vm arm id. </param>
        /// <param name="fabricName"> Fabric arm name. </param>
        /// <param name="fabricLocation"> The fabric location. </param>
        /// <param name="remoteFabricName"> Remote fabric arm name. </param>
        /// <param name="remoteFabricLocation"> Remote fabric location. </param>
        /// <returns> A new <see cref="Models.A2AEventDetails"/> instance for mocking. </returns>
        public static A2AEventDetails A2AEventDetails(string protectedItemName = null, string fabricObjectId = null, string fabricName = null, string fabricLocation = null, string remoteFabricName = null, string remoteFabricLocation = null)
        {
            return new A2AEventDetails("A2A", protectedItemName, fabricObjectId, fabricName, fabricLocation, remoteFabricName, remoteFabricLocation);
        }

        /// <summary> Initializes a new instance of A2AExtendedLocationDetails. </summary>
        /// <param name="primaryExtendedLocation"> The primary ExtendedLocation. </param>
        /// <param name="recoveryExtendedLocation"> The recovery ExtendedLocation. </param>
        /// <returns> A new <see cref="Models.A2AExtendedLocationDetails"/> instance for mocking. </returns>
        public static A2AExtendedLocationDetails A2AExtendedLocationDetails(ExtendedLocation primaryExtendedLocation = null, ExtendedLocation recoveryExtendedLocation = null)
        {
            return new A2AExtendedLocationDetails(primaryExtendedLocation, recoveryExtendedLocation);
        }

        /// <summary> Initializes a new instance of A2AFabricSpecificLocationDetails. </summary>
        /// <param name="initialPrimaryZone"> The initial source zone info. </param>
        /// <param name="initialRecoveryZone"> The initial target zone info. </param>
        /// <param name="initialPrimaryExtendedLocation"> The initial primary ExtendedLocation. </param>
        /// <param name="initialRecoveryExtendedLocation"> The initial recovery ExtendedLocation. </param>
        /// <param name="initialPrimaryFabricLocation"> Initial primary fabric location info. </param>
        /// <param name="initialRecoveryFabricLocation"> The initial recovery fabric location info. </param>
        /// <param name="primaryZone"> Source zone info. </param>
        /// <param name="recoveryZone"> The target zone info. </param>
        /// <param name="primaryExtendedLocation"> The primary ExtendedLocation. </param>
        /// <param name="recoveryExtendedLocation"> The recovery ExtendedLocation. </param>
        /// <param name="primaryFabricLocation"> Primary fabric location info. </param>
        /// <param name="recoveryFabricLocation"> The recovery fabric location info. </param>
        /// <returns> A new <see cref="Models.A2AFabricSpecificLocationDetails"/> instance for mocking. </returns>
        public static A2AFabricSpecificLocationDetails A2AFabricSpecificLocationDetails(string initialPrimaryZone = null, string initialRecoveryZone = null, ExtendedLocation initialPrimaryExtendedLocation = null, ExtendedLocation initialRecoveryExtendedLocation = null, string initialPrimaryFabricLocation = null, string initialRecoveryFabricLocation = null, string primaryZone = null, string recoveryZone = null, ExtendedLocation primaryExtendedLocation = null, ExtendedLocation recoveryExtendedLocation = null, string primaryFabricLocation = null, string recoveryFabricLocation = null)
        {
            return new A2AFabricSpecificLocationDetails(initialPrimaryZone, initialRecoveryZone, initialPrimaryExtendedLocation, initialRecoveryExtendedLocation, initialPrimaryFabricLocation, initialRecoveryFabricLocation, primaryZone, recoveryZone, primaryExtendedLocation, recoveryExtendedLocation, primaryFabricLocation, recoveryFabricLocation);
        }

        /// <summary> Initializes a new instance of A2APolicyDetails. </summary>
        /// <param name="recoveryPointThresholdInMinutes"> The recovery point threshold in minutes. </param>
        /// <param name="recoveryPointHistory"> The duration in minutes until which the recovery points need to be stored. </param>
        /// <param name="appConsistentFrequencyInMinutes"> The app consistent snapshot frequency in minutes. </param>
        /// <param name="multiVmSyncStatus"> A value indicating whether multi-VM sync has to be enabled. </param>
        /// <param name="crashConsistentFrequencyInMinutes"> The crash consistent snapshot frequency in minutes. </param>
        /// <returns> A new <see cref="Models.A2APolicyDetails"/> instance for mocking. </returns>
        public static A2APolicyDetails A2APolicyDetails(int? recoveryPointThresholdInMinutes = null, int? recoveryPointHistory = null, int? appConsistentFrequencyInMinutes = null, string multiVmSyncStatus = null, int? crashConsistentFrequencyInMinutes = null)
        {
            return new A2APolicyDetails("A2A", recoveryPointThresholdInMinutes, recoveryPointHistory, appConsistentFrequencyInMinutes, multiVmSyncStatus, crashConsistentFrequencyInMinutes);
        }

        /// <summary> Initializes a new instance of A2AProtectedDiskDetails. </summary>
        /// <param name="diskUri"> The disk uri. </param>
        /// <param name="recoveryAzureStorageAccountId"> The recovery disk storage account. </param>
        /// <param name="primaryDiskAzureStorageAccountId"> The primary disk storage account. </param>
        /// <param name="recoveryDiskUri"> Recovery disk uri. </param>
        /// <param name="diskName"> The disk name. </param>
        /// <param name="diskCapacityInBytes"> The disk capacity in bytes. </param>
        /// <param name="primaryStagingAzureStorageAccountId"> The primary staging storage account. </param>
        /// <param name="diskType"> The type of disk. </param>
        /// <param name="resyncRequired"> A value indicating whether resync is required for this disk. </param>
        /// <param name="monitoringPercentageCompletion"> The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property. </param>
        /// <param name="monitoringJobType"> The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property. </param>
        /// <param name="dataPendingInStagingStorageAccountInMB"> The data pending for replication in MB at staging account. </param>
        /// <param name="dataPendingAtSourceAgentInMB"> The data pending at source virtual machine in MB. </param>
        /// <param name="diskState"> The disk state. </param>
        /// <param name="allowedDiskLevelOperation"> The disk level operations list. </param>
        /// <param name="isDiskEncrypted"> A value indicating whether vm has encrypted os disk or not. </param>
        /// <param name="secretIdentifier"> The secret URL / identifier (BEK). </param>
        /// <param name="dekKeyVaultArmId"> The KeyVault resource id for secret (BEK). </param>
        /// <param name="isDiskKeyEncrypted"> A value indicating whether disk key got encrypted or not. </param>
        /// <param name="keyIdentifier"> The key URL / identifier (KEK). </param>
        /// <param name="kekKeyVaultArmId"> The KeyVault resource id for key (KEK). </param>
        /// <param name="failoverDiskName"> The failover name for the managed disk. </param>
        /// <param name="tfoDiskName"> The test failover name for the managed disk. </param>
        /// <returns> A new <see cref="Models.A2AProtectedDiskDetails"/> instance for mocking. </returns>
        public static A2AProtectedDiskDetails A2AProtectedDiskDetails(Uri diskUri = null, string recoveryAzureStorageAccountId = null, string primaryDiskAzureStorageAccountId = null, Uri recoveryDiskUri = null, string diskName = null, long? diskCapacityInBytes = null, string primaryStagingAzureStorageAccountId = null, string diskType = null, bool? resyncRequired = null, int? monitoringPercentageCompletion = null, string monitoringJobType = null, double? dataPendingInStagingStorageAccountInMB = null, double? dataPendingAtSourceAgentInMB = null, string diskState = null, IEnumerable<string> allowedDiskLevelOperation = null, bool? isDiskEncrypted = null, string secretIdentifier = null, string dekKeyVaultArmId = null, bool? isDiskKeyEncrypted = null, string keyIdentifier = null, string kekKeyVaultArmId = null, string failoverDiskName = null, string tfoDiskName = null)
        {
            allowedDiskLevelOperation ??= new List<string>();

            return new A2AProtectedDiskDetails(diskUri, recoveryAzureStorageAccountId, primaryDiskAzureStorageAccountId, recoveryDiskUri, diskName, diskCapacityInBytes, primaryStagingAzureStorageAccountId, diskType, resyncRequired, monitoringPercentageCompletion, monitoringJobType, dataPendingInStagingStorageAccountInMB, dataPendingAtSourceAgentInMB, diskState, allowedDiskLevelOperation?.ToList(), isDiskEncrypted, secretIdentifier, dekKeyVaultArmId, isDiskKeyEncrypted, keyIdentifier, kekKeyVaultArmId, failoverDiskName, tfoDiskName);
        }

        /// <summary> Initializes a new instance of A2AProtectedManagedDiskDetails. </summary>
        /// <param name="diskId"> The managed disk Arm id. </param>
        /// <param name="recoveryResourceGroupId"> The recovery disk resource group Arm Id. </param>
        /// <param name="recoveryTargetDiskId"> Recovery target disk Arm Id. </param>
        /// <param name="recoveryReplicaDiskId"> Recovery replica disk Arm Id. </param>
        /// <param name="recoveryOrignalTargetDiskId"> Recovery original target disk Arm Id. </param>
        /// <param name="recoveryReplicaDiskAccountType"> The replica disk type. Its an optional value and will be same as source disk type if not user provided. </param>
        /// <param name="recoveryTargetDiskAccountType"> The target disk type after failover. Its an optional value and will be same as source disk type if not user provided. </param>
        /// <param name="recoveryDiskEncryptionSetId"> The recovery disk encryption set Id. </param>
        /// <param name="primaryDiskEncryptionSetId"> The primary disk encryption set Id. </param>
        /// <param name="diskName"> The disk name. </param>
        /// <param name="diskCapacityInBytes"> The disk capacity in bytes. </param>
        /// <param name="primaryStagingAzureStorageAccountId"> The primary staging storage account. </param>
        /// <param name="diskType"> The type of disk. </param>
        /// <param name="resyncRequired"> A value indicating whether resync is required for this disk. </param>
        /// <param name="monitoringPercentageCompletion"> The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property. </param>
        /// <param name="monitoringJobType"> The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property. </param>
        /// <param name="dataPendingInStagingStorageAccountInMB"> The data pending for replication in MB at staging account. </param>
        /// <param name="dataPendingAtSourceAgentInMB"> The data pending at source virtual machine in MB. </param>
        /// <param name="diskState"> The disk state. </param>
        /// <param name="allowedDiskLevelOperation"> The disk level operations list. </param>
        /// <param name="isDiskEncrypted"> A value indicating whether vm has encrypted os disk or not. </param>
        /// <param name="secretIdentifier"> The secret URL / identifier (BEK). </param>
        /// <param name="dekKeyVaultArmId"> The KeyVault resource id for secret (BEK). </param>
        /// <param name="isDiskKeyEncrypted"> A value indicating whether disk key got encrypted or not. </param>
        /// <param name="keyIdentifier"> The key URL / identifier (KEK). </param>
        /// <param name="kekKeyVaultArmId"> The KeyVault resource id for key (KEK). </param>
        /// <param name="failoverDiskName"> The failover name for the managed disk. </param>
        /// <param name="tfoDiskName"> The test failover name for the managed disk. </param>
        /// <returns> A new <see cref="Models.A2AProtectedManagedDiskDetails"/> instance for mocking. </returns>
        public static A2AProtectedManagedDiskDetails A2AProtectedManagedDiskDetails(string diskId = null, string recoveryResourceGroupId = null, string recoveryTargetDiskId = null, string recoveryReplicaDiskId = null, string recoveryOrignalTargetDiskId = null, string recoveryReplicaDiskAccountType = null, string recoveryTargetDiskAccountType = null, string recoveryDiskEncryptionSetId = null, string primaryDiskEncryptionSetId = null, string diskName = null, long? diskCapacityInBytes = null, string primaryStagingAzureStorageAccountId = null, string diskType = null, bool? resyncRequired = null, int? monitoringPercentageCompletion = null, string monitoringJobType = null, double? dataPendingInStagingStorageAccountInMB = null, double? dataPendingAtSourceAgentInMB = null, string diskState = null, IEnumerable<string> allowedDiskLevelOperation = null, bool? isDiskEncrypted = null, string secretIdentifier = null, string dekKeyVaultArmId = null, bool? isDiskKeyEncrypted = null, string keyIdentifier = null, string kekKeyVaultArmId = null, string failoverDiskName = null, string tfoDiskName = null)
        {
            allowedDiskLevelOperation ??= new List<string>();

            return new A2AProtectedManagedDiskDetails(diskId, recoveryResourceGroupId, recoveryTargetDiskId, recoveryReplicaDiskId, recoveryOrignalTargetDiskId, recoveryReplicaDiskAccountType, recoveryTargetDiskAccountType, recoveryDiskEncryptionSetId, primaryDiskEncryptionSetId, diskName, diskCapacityInBytes, primaryStagingAzureStorageAccountId, diskType, resyncRequired, monitoringPercentageCompletion, monitoringJobType, dataPendingInStagingStorageAccountInMB, dataPendingAtSourceAgentInMB, diskState, allowedDiskLevelOperation?.ToList(), isDiskEncrypted, secretIdentifier, dekKeyVaultArmId, isDiskKeyEncrypted, keyIdentifier, kekKeyVaultArmId, failoverDiskName, tfoDiskName);
        }

        /// <summary> Initializes a new instance of A2AProtectionContainerMappingDetails. </summary>
        /// <param name="agentAutoUpdateStatus"> A value indicating whether the auto update is enabled. </param>
        /// <param name="automationAccountArmId"> The automation account arm id. </param>
        /// <param name="automationAccountAuthenticationType"> A value indicating the type authentication to use for automation Account. </param>
        /// <param name="scheduleName"> The schedule arm name. </param>
        /// <param name="jobScheduleName"> The job schedule arm name. </param>
        /// <returns> A new <see cref="Models.A2AProtectionContainerMappingDetails"/> instance for mocking. </returns>
        public static A2AProtectionContainerMappingDetails A2AProtectionContainerMappingDetails(AgentAutoUpdateStatus? agentAutoUpdateStatus = null, string automationAccountArmId = null, AutomationAccountAuthenticationType? automationAccountAuthenticationType = null, string scheduleName = null, string jobScheduleName = null)
        {
            return new A2AProtectionContainerMappingDetails("A2A", agentAutoUpdateStatus, automationAccountArmId, automationAccountAuthenticationType, scheduleName, jobScheduleName);
        }

        /// <summary> Initializes a new instance of A2ARecoveryPointDetails. </summary>
        /// <param name="recoveryPointSyncType"> A value indicating whether the recovery point is multi VM consistent. </param>
        /// <param name="disks"> List of disk ids representing a recovery point. </param>
        /// <returns> A new <see cref="Models.A2ARecoveryPointDetails"/> instance for mocking. </returns>
        public static A2ARecoveryPointDetails A2ARecoveryPointDetails(RecoveryPointSyncType? recoveryPointSyncType = null, IEnumerable<string> disks = null)
        {
            disks ??= new List<string>();

            return new A2ARecoveryPointDetails("A2A", recoveryPointSyncType, disks?.ToList());
        }

        /// <summary> Initializes a new instance of A2AReplicationDetails. </summary>
        /// <param name="fabricObjectId"> The fabric specific object Id of the virtual machine. </param>
        /// <param name="initialPrimaryZone"> The initial primary availability zone. </param>
        /// <param name="initialPrimaryFabricLocation"> The initial primary fabric location. </param>
        /// <param name="initialRecoveryZone"> The initial recovery availability zone. </param>
        /// <param name="initialPrimaryExtendedLocation"> The initial primary extended location. </param>
        /// <param name="initialRecoveryExtendedLocation"> The initial recovery extended location. </param>
        /// <param name="initialRecoveryFabricLocation"> The initial recovery fabric location. </param>
        /// <param name="multiVmGroupId"> The multi vm group Id. </param>
        /// <param name="multiVmGroupName"> The multi vm group name. </param>
        /// <param name="multiVmGroupCreateOption"> Whether Multi VM group is auto created or specified by user. </param>
        /// <param name="managementId"> The management Id. </param>
        /// <param name="protectedDisks"> The list of protected disks. </param>
        /// <param name="unprotectedDisks"> The list of unprotected disks. </param>
        /// <param name="protectedManagedDisks"> The list of protected managed disks. </param>
        /// <param name="recoveryBootDiagStorageAccountId"> The recovery boot diagnostic storage account Arm Id. </param>
        /// <param name="primaryFabricLocation"> Primary fabric location. </param>
        /// <param name="recoveryFabricLocation"> The recovery fabric location. </param>
        /// <param name="osType"> The type of operating system. </param>
        /// <param name="recoveryAzureVmSize"> The size of recovery virtual machine. </param>
        /// <param name="recoveryAzureVmName"> The name of recovery virtual machine. </param>
        /// <param name="recoveryAzureResourceGroupId"> The recovery resource group. </param>
        /// <param name="recoveryCloudService"> The recovery cloud service. </param>
        /// <param name="recoveryAvailabilitySet"> The recovery availability set. </param>
        /// <param name="selectedRecoveryAzureNetworkId"> The recovery virtual network. </param>
        /// <param name="selectedTfoAzureNetworkId"> The test failover virtual network. </param>
        /// <param name="vmNics"> The virtual machine nic details. </param>
        /// <param name="vmSyncedConfigDetails"> The synced configuration details. </param>
        /// <param name="monitoringPercentageCompletion"> The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property. </param>
        /// <param name="monitoringJobType"> The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property. </param>
        /// <param name="lastHeartbeat"> The last heartbeat received from the source server. </param>
        /// <param name="agentVersion"> The agent version. </param>
        /// <param name="agentExpiryOn"> Agent expiry date. </param>
        /// <param name="isReplicationAgentUpdateRequired"> A value indicating whether replication agent update is required. </param>
        /// <param name="agentCertificateExpiryOn"> Agent certificate expiry date. </param>
        /// <param name="isReplicationAgentCertificateUpdateRequired"> A value indicating whether agent certificate update is required. </param>
        /// <param name="recoveryFabricObjectId"> The recovery fabric object Id. </param>
        /// <param name="vmProtectionState"> The protection state for the vm. </param>
        /// <param name="vmProtectionStateDescription"> The protection state description for the vm. </param>
        /// <param name="lifecycleId"> An id associated with the PE that survives actions like switch protection which change the backing PE/CPE objects internally.The lifecycle id gets carried forward to have a link/continuity in being able to have an Id that denotes the &quot;same&quot; protected item even though other internal Ids/ARM Id might be changing. </param>
        /// <param name="testFailoverRecoveryFabricObjectId"> The test failover fabric object Id. </param>
        /// <param name="rpoInSeconds"> The last RPO value in seconds. </param>
        /// <param name="lastRpoCalculatedOn"> The time (in UTC) when the last RPO value was calculated by Protection Service. </param>
        /// <param name="primaryAvailabilityZone"> The primary availability zone. </param>
        /// <param name="recoveryAvailabilityZone"> The recovery availability zone. </param>
        /// <param name="primaryExtendedLocation"> The primary Extended Location. </param>
        /// <param name="recoveryExtendedLocation"> The recovery Extended Location. </param>
        /// <param name="vmEncryptionType"> The encryption type of the VM. </param>
        /// <param name="tfoAzureVmName"> The test failover vm name. </param>
        /// <param name="recoveryAzureGeneration"> The recovery azure generation. </param>
        /// <param name="recoveryProximityPlacementGroupId"> The recovery proximity placement group Id. </param>
        /// <param name="autoProtectionOfDataDisk"> A value indicating whether the auto protection is enabled. </param>
        /// <param name="recoveryVirtualMachineScaleSetId"> The recovery virtual machine scale set id. </param>
        /// <param name="recoveryCapacityReservationGroupId"> The recovery capacity reservation group Id. </param>
        /// <returns> A new <see cref="Models.A2AReplicationDetails"/> instance for mocking. </returns>
        public static A2AReplicationDetails A2AReplicationDetails(string fabricObjectId = null, string initialPrimaryZone = null, string initialPrimaryFabricLocation = null, string initialRecoveryZone = null, ExtendedLocation initialPrimaryExtendedLocation = null, ExtendedLocation initialRecoveryExtendedLocation = null, string initialRecoveryFabricLocation = null, string multiVmGroupId = null, string multiVmGroupName = null, MultiVmGroupCreateOption? multiVmGroupCreateOption = null, string managementId = null, IEnumerable<A2AProtectedDiskDetails> protectedDisks = null, IEnumerable<A2AUnprotectedDiskDetails> unprotectedDisks = null, IEnumerable<A2AProtectedManagedDiskDetails> protectedManagedDisks = null, string recoveryBootDiagStorageAccountId = null, string primaryFabricLocation = null, string recoveryFabricLocation = null, string osType = null, string recoveryAzureVmSize = null, string recoveryAzureVmName = null, string recoveryAzureResourceGroupId = null, string recoveryCloudService = null, string recoveryAvailabilitySet = null, string selectedRecoveryAzureNetworkId = null, string selectedTfoAzureNetworkId = null, IEnumerable<VmNicDetails> vmNics = null, AzureToAzureVmSyncedConfigDetails vmSyncedConfigDetails = null, int? monitoringPercentageCompletion = null, string monitoringJobType = null, DateTimeOffset? lastHeartbeat = null, string agentVersion = null, DateTimeOffset? agentExpiryOn = null, bool? isReplicationAgentUpdateRequired = null, DateTimeOffset? agentCertificateExpiryOn = null, bool? isReplicationAgentCertificateUpdateRequired = null, string recoveryFabricObjectId = null, string vmProtectionState = null, string vmProtectionStateDescription = null, string lifecycleId = null, string testFailoverRecoveryFabricObjectId = null, long? rpoInSeconds = null, DateTimeOffset? lastRpoCalculatedOn = null, string primaryAvailabilityZone = null, string recoveryAvailabilityZone = null, ExtendedLocation primaryExtendedLocation = null, ExtendedLocation recoveryExtendedLocation = null, VmEncryptionType? vmEncryptionType = null, string tfoAzureVmName = null, string recoveryAzureGeneration = null, string recoveryProximityPlacementGroupId = null, AutoProtectionOfDataDisk? autoProtectionOfDataDisk = null, string recoveryVirtualMachineScaleSetId = null, string recoveryCapacityReservationGroupId = null)
        {
            protectedDisks ??= new List<A2AProtectedDiskDetails>();
            unprotectedDisks ??= new List<A2AUnprotectedDiskDetails>();
            protectedManagedDisks ??= new List<A2AProtectedManagedDiskDetails>();
            vmNics ??= new List<VmNicDetails>();

            return new A2AReplicationDetails("A2A", fabricObjectId, initialPrimaryZone, initialPrimaryFabricLocation, initialRecoveryZone, initialPrimaryExtendedLocation, initialRecoveryExtendedLocation, initialRecoveryFabricLocation, multiVmGroupId, multiVmGroupName, multiVmGroupCreateOption, managementId, protectedDisks?.ToList(), unprotectedDisks?.ToList(), protectedManagedDisks?.ToList(), recoveryBootDiagStorageAccountId, primaryFabricLocation, recoveryFabricLocation, osType, recoveryAzureVmSize, recoveryAzureVmName, recoveryAzureResourceGroupId, recoveryCloudService, recoveryAvailabilitySet, selectedRecoveryAzureNetworkId, selectedTfoAzureNetworkId, vmNics?.ToList(), vmSyncedConfigDetails, monitoringPercentageCompletion, monitoringJobType, lastHeartbeat, agentVersion, agentExpiryOn, isReplicationAgentUpdateRequired, agentCertificateExpiryOn, isReplicationAgentCertificateUpdateRequired, recoveryFabricObjectId, vmProtectionState, vmProtectionStateDescription, lifecycleId, testFailoverRecoveryFabricObjectId, rpoInSeconds, lastRpoCalculatedOn, primaryAvailabilityZone, recoveryAvailabilityZone, primaryExtendedLocation, recoveryExtendedLocation, vmEncryptionType, tfoAzureVmName, recoveryAzureGeneration, recoveryProximityPlacementGroupId, autoProtectionOfDataDisk, recoveryVirtualMachineScaleSetId, recoveryCapacityReservationGroupId);
        }

        /// <summary> Initializes a new instance of A2AUnprotectedDiskDetails. </summary>
        /// <param name="diskLunId"> The source lun Id for the data disk. </param>
        /// <param name="diskAutoProtectionStatus"> A value indicating whether the disk auto protection is enabled. </param>
        /// <returns> A new <see cref="Models.A2AUnprotectedDiskDetails"/> instance for mocking. </returns>
        public static A2AUnprotectedDiskDetails A2AUnprotectedDiskDetails(int? diskLunId = null, AutoProtectionOfDataDisk? diskAutoProtectionStatus = null)
        {
            return new A2AUnprotectedDiskDetails(diskLunId, diskAutoProtectionStatus);
        }

        /// <summary> Initializes a new instance of VmNicDetails. </summary>
        /// <param name="nicId"> The nic Id. </param>
        /// <param name="replicaNicId"> The replica nic Id. </param>
        /// <param name="sourceNicArmId"> The source nic ARM Id. </param>
        /// <param name="vmNetworkName"> VM network name. </param>
        /// <param name="recoveryVmNetworkId"> Recovery VM network Id. </param>
        /// <param name="ipConfigs"> The IP configurations of the NIC. </param>
        /// <param name="selectionType"> Selection type for failover. </param>
        /// <param name="recoveryNetworkSecurityGroupId"> The id of the NSG associated with the NIC. </param>
        /// <param name="enableAcceleratedNetworkingOnRecovery"> A value indicating whether the NIC has accelerated networking enabled. </param>
        /// <param name="tfoVmNetworkId"> The network to be used by NIC during test failover. </param>
        /// <param name="tfoNetworkSecurityGroupId"> The NSG to be used by NIC during test failover. </param>
        /// <param name="enableAcceleratedNetworkingOnTfo"> Whether the TFO NIC has accelerated networking enabled. </param>
        /// <param name="recoveryNicName"> The name of the NIC to be used when creating target NICs. </param>
        /// <param name="recoveryNicResourceGroupName"> The resource group of the NIC to be used when creating target NICs. </param>
        /// <param name="reuseExistingNic"> A value indicating whether an existing NIC is allowed to be reused during failover subject to availability. </param>
        /// <param name="tfoRecoveryNicName"> The name of the NIC to be used when creating target NICs in TFO. </param>
        /// <param name="tfoRecoveryNicResourceGroupName"> The resource group of the NIC to be used when creating target NICs in TFO. </param>
        /// <param name="tfoReuseExistingNic"> A value indicating whether an existing NIC is allowed to be reused during test failover subject to availability. </param>
        /// <param name="targetNicName"> Target NIC name. </param>
        /// <returns> A new <see cref="Models.VmNicDetails"/> instance for mocking. </returns>
        public static VmNicDetails VmNicDetails(string nicId = null, string replicaNicId = null, string sourceNicArmId = null, string vmNetworkName = null, string recoveryVmNetworkId = null, IEnumerable<IPConfigDetails> ipConfigs = null, string selectionType = null, string recoveryNetworkSecurityGroupId = null, bool? enableAcceleratedNetworkingOnRecovery = null, string tfoVmNetworkId = null, string tfoNetworkSecurityGroupId = null, bool? enableAcceleratedNetworkingOnTfo = null, string recoveryNicName = null, string recoveryNicResourceGroupName = null, bool? reuseExistingNic = null, string tfoRecoveryNicName = null, string tfoRecoveryNicResourceGroupName = null, bool? tfoReuseExistingNic = null, string targetNicName = null)
        {
            ipConfigs ??= new List<IPConfigDetails>();

            return new VmNicDetails(nicId, replicaNicId, sourceNicArmId, vmNetworkName, recoveryVmNetworkId, ipConfigs?.ToList(), selectionType, recoveryNetworkSecurityGroupId, enableAcceleratedNetworkingOnRecovery, tfoVmNetworkId, tfoNetworkSecurityGroupId, enableAcceleratedNetworkingOnTfo, recoveryNicName, recoveryNicResourceGroupName, reuseExistingNic, tfoRecoveryNicName, tfoRecoveryNicResourceGroupName, tfoReuseExistingNic, targetNicName);
        }

        /// <summary> Initializes a new instance of IPConfigDetails. </summary>
        /// <param name="name"></param>
        /// <param name="isPrimary"></param>
        /// <param name="subnetName"></param>
        /// <param name="staticIPAddress"></param>
        /// <param name="ipAddressType"></param>
        /// <param name="isSeletedForFailover"></param>
        /// <param name="recoverySubnetName"></param>
        /// <param name="recoveryStaticIPAddress"></param>
        /// <param name="recoveryIPAddressType"></param>
        /// <param name="recoveryPublicIPAddressId"></param>
        /// <param name="recoveryLBBackendAddressPoolIds"></param>
        /// <param name="tfoSubnetName"></param>
        /// <param name="tfoStaticIPAddress"></param>
        /// <param name="tfoPublicIPAddressId"></param>
        /// <param name="tfoLBBackendAddressPoolIds"></param>
        /// <returns> A new <see cref="Models.IPConfigDetails"/> instance for mocking. </returns>
        public static IPConfigDetails IPConfigDetails(string name = null, bool? isPrimary = null, string subnetName = null, string staticIPAddress = null, string ipAddressType = null, bool? isSeletedForFailover = null, string recoverySubnetName = null, string recoveryStaticIPAddress = null, string recoveryIPAddressType = null, string recoveryPublicIPAddressId = null, IEnumerable<string> recoveryLBBackendAddressPoolIds = null, string tfoSubnetName = null, string tfoStaticIPAddress = null, string tfoPublicIPAddressId = null, IEnumerable<string> tfoLBBackendAddressPoolIds = null)
        {
            recoveryLBBackendAddressPoolIds ??= new List<string>();
            tfoLBBackendAddressPoolIds ??= new List<string>();

            return new IPConfigDetails(name, isPrimary, subnetName, staticIPAddress, ipAddressType, isSeletedForFailover, recoverySubnetName, recoveryStaticIPAddress, recoveryIPAddressType, recoveryPublicIPAddressId, recoveryLBBackendAddressPoolIds?.ToList(), tfoSubnetName, tfoStaticIPAddress, tfoPublicIPAddressId, tfoLBBackendAddressPoolIds?.ToList());
        }

        /// <summary> Initializes a new instance of AzureToAzureVmSyncedConfigDetails. </summary>
        /// <param name="tags"> The Azure VM tags. </param>
        /// <param name="inputEndpoints"> The Azure VM input endpoints. </param>
        /// <returns> A new <see cref="Models.AzureToAzureVmSyncedConfigDetails"/> instance for mocking. </returns>
        public static AzureToAzureVmSyncedConfigDetails AzureToAzureVmSyncedConfigDetails(IReadOnlyDictionary<string, string> tags = null, IEnumerable<InputEndpoint> inputEndpoints = null)
        {
            tags ??= new Dictionary<string, string>();
            inputEndpoints ??= new List<InputEndpoint>();

            return new AzureToAzureVmSyncedConfigDetails(tags, inputEndpoints?.ToList());
        }

        /// <summary> Initializes a new instance of InputEndpoint. </summary>
        /// <param name="endpointName"></param>
        /// <param name="privatePort"></param>
        /// <param name="publicPort"></param>
        /// <param name="protocol"></param>
        /// <returns> A new <see cref="Models.InputEndpoint"/> instance for mocking. </returns>
        public static InputEndpoint InputEndpoint(string endpointName = null, int? privatePort = null, int? publicPort = null, string protocol = null)
        {
            return new InputEndpoint(endpointName, privatePort, publicPort, protocol);
        }

        /// <summary> Initializes a new instance of A2AReplicationIntentDetails. </summary>
        /// <param name="fabricObjectId"> The fabric specific object Id of the virtual machine. </param>
        /// <param name="primaryLocation"> The primary location for the virtual machine. </param>
        /// <param name="recoveryLocation"> The recovery location for the virtual machine. </param>
        /// <param name="recoverySubscriptionId"> The recovery subscription Id of the virtual machine. </param>
        /// <param name="vmDisks"> The list of vm disk details. </param>
        /// <param name="vmManagedDisks"> The list of vm managed disk details. </param>
        /// <param name="recoveryResourceGroupId"> The recovery resource group id. </param>
        /// <param name="protectionProfile">
        /// The protection profile custom details.
        /// Please note <see cref="ProtectionProfileCustomDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExistingProtectionProfile"/> and <see cref="NewProtectionProfile"/>.
        /// </param>
        /// <param name="primaryStagingStorageAccount">
        /// The primary staging storage account details.
        /// Please note <see cref="StorageAccountCustomDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExistingStorageAccount"/>.
        /// </param>
        /// <param name="recoveryAvailabilitySet">
        /// The recovery availability set details.
        /// Please note <see cref="RecoveryAvailabilitySetCustomDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExistingRecoveryAvailabilitySet"/>.
        /// </param>
        /// <param name="recoveryVirtualNetwork">
        /// The recovery virtual network details.
        /// Please note <see cref="RecoveryVirtualNetworkCustomDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExistingRecoveryVirtualNetwork"/> and <see cref="NewRecoveryVirtualNetwork"/>.
        /// </param>
        /// <param name="recoveryProximityPlacementGroup">
        /// The recovery proximity placement group custom details.
        /// Please note <see cref="RecoveryProximityPlacementGroupCustomDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExistingRecoveryProximityPlacementGroup"/>.
        /// </param>
        /// <param name="autoProtectionOfDataDisk"> A value indicating whether the auto protection is enabled. </param>
        /// <param name="multiVmGroupName"> The multi vm group name. </param>
        /// <param name="multiVmGroupId"> The multi vm group id. </param>
        /// <param name="recoveryBootDiagStorageAccount">
        /// The boot diagnostic storage account.
        /// Please note <see cref="StorageAccountCustomDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExistingStorageAccount"/>.
        /// </param>
        /// <param name="diskEncryptionInfo"> The recovery disk encryption information (for two pass flows). </param>
        /// <param name="recoveryAvailabilityZone"> The recovery availability zone. </param>
        /// <param name="recoveryAvailabilityType"> The recovery availability type of the virtual machine. </param>
        /// <param name="agentAutoUpdateStatus"> A value indicating whether the auto update is enabled. </param>
        /// <param name="automationAccountArmId"> The automation account arm id. </param>
        /// <param name="automationAccountAuthenticationType"> A value indicating the type authentication to use for automation Account. </param>
        /// <returns> A new <see cref="Models.A2AReplicationIntentDetails"/> instance for mocking. </returns>
        public static A2AReplicationIntentDetails A2AReplicationIntentDetails(string fabricObjectId = null, string primaryLocation = null, string recoveryLocation = null, string recoverySubscriptionId = null, IEnumerable<A2AProtectionIntentDiskInputDetails> vmDisks = null, IEnumerable<A2AProtectionIntentManagedDiskInputDetails> vmManagedDisks = null, string recoveryResourceGroupId = null, ProtectionProfileCustomDetails protectionProfile = null, StorageAccountCustomDetails primaryStagingStorageAccount = null, RecoveryAvailabilitySetCustomDetails recoveryAvailabilitySet = null, RecoveryVirtualNetworkCustomDetails recoveryVirtualNetwork = null, RecoveryProximityPlacementGroupCustomDetails recoveryProximityPlacementGroup = null, AutoProtectionOfDataDisk? autoProtectionOfDataDisk = null, string multiVmGroupName = null, string multiVmGroupId = null, StorageAccountCustomDetails recoveryBootDiagStorageAccount = null, DiskEncryptionInfo diskEncryptionInfo = null, string recoveryAvailabilityZone = null, string recoveryAvailabilityType = null, AgentAutoUpdateStatus? agentAutoUpdateStatus = null, string automationAccountArmId = null, AutomationAccountAuthenticationType? automationAccountAuthenticationType = null)
        {
            vmDisks ??= new List<A2AProtectionIntentDiskInputDetails>();
            vmManagedDisks ??= new List<A2AProtectionIntentManagedDiskInputDetails>();

            return new A2AReplicationIntentDetails("A2A", fabricObjectId, primaryLocation, recoveryLocation, recoverySubscriptionId, vmDisks?.ToList(), vmManagedDisks?.ToList(), recoveryResourceGroupId, protectionProfile, primaryStagingStorageAccount, recoveryAvailabilitySet, recoveryVirtualNetwork, recoveryProximityPlacementGroup, autoProtectionOfDataDisk, multiVmGroupName, multiVmGroupId, recoveryBootDiagStorageAccount, diskEncryptionInfo, recoveryAvailabilityZone, recoveryAvailabilityType, agentAutoUpdateStatus, automationAccountArmId, automationAccountAuthenticationType);
        }

        /// <summary> Initializes a new instance of A2AZoneDetails. </summary>
        /// <param name="source"> Source zone info. </param>
        /// <param name="target"> The target zone info. </param>
        /// <returns> A new <see cref="Models.A2AZoneDetails"/> instance for mocking. </returns>
        public static A2AZoneDetails A2AZoneDetails(string source = null, string target = null)
        {
            return new A2AZoneDetails(source, target);
        }

        /// <summary> Initializes a new instance of AgentDetails. </summary>
        /// <param name="agentId"> The Id of the agent running on the server. </param>
        /// <param name="machineId"> The Id of the machine to which the agent is registered. </param>
        /// <param name="biosId"> The machine BIOS Id. </param>
        /// <param name="fqdn"> The machine FQDN. </param>
        /// <param name="disks"> The disks. </param>
        /// <returns> A new <see cref="Models.AgentDetails"/> instance for mocking. </returns>
        public static AgentDetails AgentDetails(string agentId = null, string machineId = null, string biosId = null, string fqdn = null, IEnumerable<AgentDiskDetails> disks = null)
        {
            disks ??= new List<AgentDiskDetails>();

            return new AgentDetails(agentId, machineId, biosId, fqdn, disks?.ToList());
        }

        /// <summary> Initializes a new instance of AgentDiskDetails. </summary>
        /// <param name="diskId"> The disk Id. </param>
        /// <param name="diskName"> The disk name. </param>
        /// <param name="isOSDisk"> A value indicating whether the disk is the OS disk. </param>
        /// <param name="capacityInBytes"> The disk capacity in bytes. </param>
        /// <param name="lunId"> The lun of disk. </param>
        /// <returns> A new <see cref="Models.AgentDiskDetails"/> instance for mocking. </returns>
        public static AgentDiskDetails AgentDiskDetails(string diskId = null, string diskName = null, string isOSDisk = null, long? capacityInBytes = null, int? lunId = null)
        {
            return new AgentDiskDetails(diskId, diskName, isOSDisk, capacityInBytes, lunId);
        }

        /// <summary> Initializes a new instance of AsrJobDetails. </summary>
        /// <param name="affectedObjectDetails"> The affected object properties like source server, source cloud, target server, target cloud etc. based on the workflow object details. </param>
        /// <returns> A new <see cref="Models.AsrJobDetails"/> instance for mocking. </returns>
        public static AsrJobDetails AsrJobDetails(IReadOnlyDictionary<string, string> affectedObjectDetails = null)
        {
            affectedObjectDetails ??= new Dictionary<string, string>();

            return new AsrJobDetails("AsrJobDetails", affectedObjectDetails);
        }

        /// <summary> Initializes a new instance of AutomationRunbookTaskDetails. </summary>
        /// <param name="name"> The recovery plan task name. </param>
        /// <param name="cloudServiceName"> The cloud service of the automation runbook account. </param>
        /// <param name="subscriptionId"> The subscription Id of the automation runbook account. </param>
        /// <param name="accountName"> The automation account name of the runbook. </param>
        /// <param name="runbookId"> The runbook Id. </param>
        /// <param name="runbookName"> The runbook name. </param>
        /// <param name="jobId"> The job Id of the runbook execution. </param>
        /// <param name="jobOutput"> The execution output of the runbook. </param>
        /// <param name="isPrimarySideScript"> A value indicating whether it is a primary side script or not. </param>
        /// <returns> A new <see cref="Models.AutomationRunbookTaskDetails"/> instance for mocking. </returns>
        public static AutomationRunbookTaskDetails AutomationRunbookTaskDetails(string name = null, string cloudServiceName = null, string subscriptionId = null, string accountName = null, string runbookId = null, string runbookName = null, string jobId = null, string jobOutput = null, bool? isPrimarySideScript = null)
        {
            return new AutomationRunbookTaskDetails("AutomationRunbookTaskDetails", name, cloudServiceName, subscriptionId, accountName, runbookId, runbookName, jobId, jobOutput, isPrimarySideScript);
        }

        /// <summary> Initializes a new instance of AzureFabricSpecificDetails. </summary>
        /// <param name="location"> The Location for the Azure fabric. </param>
        /// <param name="containerIds"> The container Ids for the Azure fabric. </param>
        /// <param name="zones"> The zones. </param>
        /// <param name="extendedLocations"> The ExtendedLocations. </param>
        /// <param name="locationDetails"> The location details. </param>
        /// <returns> A new <see cref="Models.AzureFabricSpecificDetails"/> instance for mocking. </returns>
        public static AzureFabricSpecificDetails AzureFabricSpecificDetails(AzureLocation? location = null, IEnumerable<string> containerIds = null, IEnumerable<A2AZoneDetails> zones = null, IEnumerable<A2AExtendedLocationDetails> extendedLocations = null, IEnumerable<A2AFabricSpecificLocationDetails> locationDetails = null)
        {
            containerIds ??= new List<string>();
            zones ??= new List<A2AZoneDetails>();
            extendedLocations ??= new List<A2AExtendedLocationDetails>();
            locationDetails ??= new List<A2AFabricSpecificLocationDetails>();

            return new AzureFabricSpecificDetails("Azure", location, containerIds?.ToList(), zones?.ToList(), extendedLocations?.ToList(), locationDetails?.ToList());
        }

        /// <summary> Initializes a new instance of AzureToAzureNetworkMappingSettings. </summary>
        /// <param name="primaryFabricLocation"> The primary fabric location. </param>
        /// <param name="recoveryFabricLocation"> The recovery fabric location. </param>
        /// <returns> A new <see cref="Models.AzureToAzureNetworkMappingSettings"/> instance for mocking. </returns>
        public static AzureToAzureNetworkMappingSettings AzureToAzureNetworkMappingSettings(string primaryFabricLocation = null, string recoveryFabricLocation = null)
        {
            return new AzureToAzureNetworkMappingSettings("AzureToAzure", primaryFabricLocation, recoveryFabricLocation);
        }

        /// <summary> Initializes a new instance of AzureVmDiskDetails. </summary>
        /// <param name="vhdType"> VHD type. </param>
        /// <param name="vhdId"> The VHD id. </param>
        /// <param name="diskId"> The disk resource id. </param>
        /// <param name="vhdName"> VHD name. </param>
        /// <param name="maxSizeMB"> Max side in MB. </param>
        /// <param name="targetDiskLocation"> Blob uri of the Azure disk. </param>
        /// <param name="targetDiskName"> The target Azure disk name. </param>
        /// <param name="lunId"> Ordinal\LunId of the disk for the Azure VM. </param>
        /// <param name="diskEncryptionSetId"> The DiskEncryptionSet ARM ID. </param>
        /// <param name="customTargetDiskName"> The custom target Azure disk name. </param>
        /// <returns> A new <see cref="Models.AzureVmDiskDetails"/> instance for mocking. </returns>
        public static AzureVmDiskDetails AzureVmDiskDetails(string vhdType = null, string vhdId = null, string diskId = null, string vhdName = null, string maxSizeMB = null, string targetDiskLocation = null, string targetDiskName = null, string lunId = null, string diskEncryptionSetId = null, string customTargetDiskName = null)
        {
            return new AzureVmDiskDetails(vhdType, vhdId, diskId, vhdName, maxSizeMB, targetDiskLocation, targetDiskName, lunId, diskEncryptionSetId, customTargetDiskName);
        }

        /// <summary> Initializes a new instance of ConsistencyCheckTaskDetails. </summary>
        /// <param name="vmDetails"> The list of inconsistent Vm details. </param>
        /// <returns> A new <see cref="Models.ConsistencyCheckTaskDetails"/> instance for mocking. </returns>
        public static ConsistencyCheckTaskDetails ConsistencyCheckTaskDetails(IEnumerable<InconsistentVmDetails> vmDetails = null)
        {
            vmDetails ??= new List<InconsistentVmDetails>();

            return new ConsistencyCheckTaskDetails("ConsistencyCheckTaskDetails", vmDetails?.ToList());
        }

        /// <summary> Initializes a new instance of InconsistentVmDetails. </summary>
        /// <param name="vmName"> The Vm name. </param>
        /// <param name="cloudName"> The Cloud name. </param>
        /// <param name="details"> The list of details regarding state of the Protected Entity in SRS and On prem. </param>
        /// <param name="errorIds"> The list of error ids. </param>
        /// <returns> A new <see cref="Models.InconsistentVmDetails"/> instance for mocking. </returns>
        public static InconsistentVmDetails InconsistentVmDetails(string vmName = null, string cloudName = null, IEnumerable<string> details = null, IEnumerable<string> errorIds = null)
        {
            details ??= new List<string>();
            errorIds ??= new List<string>();

            return new InconsistentVmDetails(vmName, cloudName, details?.ToList(), errorIds?.ToList());
        }

        /// <summary> Initializes a new instance of DataStore. </summary>
        /// <param name="symbolicName"> The symbolic name of data store. </param>
        /// <param name="uuid"> The uuid of data store. </param>
        /// <param name="capacity"> The capacity of data store in GBs. </param>
        /// <param name="freeSpace"> The free space of data store in GBs. </param>
        /// <param name="dataStoreType"> The type of data store. </param>
        /// <returns> A new <see cref="Models.DataStore"/> instance for mocking. </returns>
        public static DataStore DataStore(string symbolicName = null, string uuid = null, string capacity = null, string freeSpace = null, string dataStoreType = null)
        {
            return new DataStore(symbolicName, uuid, capacity, freeSpace, dataStoreType);
        }

        /// <summary> Initializes a new instance of DiskDetails. </summary>
        /// <param name="maxSizeMB"> The hard disk max size in MB. </param>
        /// <param name="vhdType"> The type of the volume. </param>
        /// <param name="vhdId"> The VHD Id. </param>
        /// <param name="vhdName"> The VHD name. </param>
        /// <returns> A new <see cref="Models.DiskDetails"/> instance for mocking. </returns>
        public static DiskDetails DiskDetails(long? maxSizeMB = null, string vhdType = null, string vhdId = null, string vhdName = null)
        {
            return new DiskDetails(maxSizeMB, vhdType, vhdId, vhdName);
        }

        /// <summary> Initializes a new instance of DiskVolumeDetails. </summary>
        /// <param name="label"> The volume label. </param>
        /// <param name="name"> The volume name. </param>
        /// <returns> A new <see cref="Models.DiskVolumeDetails"/> instance for mocking. </returns>
        public static DiskVolumeDetails DiskVolumeDetails(string label = null, string name = null)
        {
            return new DiskVolumeDetails(label, name);
        }

        /// <summary> Initializes a new instance of DraDetails. </summary>
        /// <param name="id"> The DRA Id. </param>
        /// <param name="name"> The DRA name. </param>
        /// <param name="biosId"> The DRA Bios Id. </param>
        /// <param name="version"> The version. </param>
        /// <param name="lastHeartbeatUtc"> The last heartbeat received from the DRA. </param>
        /// <param name="health"> The health. </param>
        /// <param name="healthErrors"> The health errors. </param>
        /// <param name="forwardProtectedItemCount"> The count of protected items which are protected in forward direction. </param>
        /// <param name="reverseProtectedItemCount"> The count of protected items which are protected in reverse direction. </param>
        /// <returns> A new <see cref="Models.DraDetails"/> instance for mocking. </returns>
        public static DraDetails DraDetails(string id = null, string name = null, string biosId = null, string version = null, DateTimeOffset? lastHeartbeatUtc = null, ProtectionHealth? health = null, IEnumerable<HealthError> healthErrors = null, int? forwardProtectedItemCount = null, int? reverseProtectedItemCount = null)
        {
            healthErrors ??= new List<HealthError>();

            return new DraDetails(id, name, biosId, version, lastHeartbeatUtc, health, healthErrors?.ToList(), forwardProtectedItemCount, reverseProtectedItemCount);
        }

        /// <summary> Initializes a new instance of ExportJobDetails. </summary>
        /// <param name="affectedObjectDetails"> The affected object properties like source server, source cloud, target server, target cloud etc. based on the workflow object details. </param>
        /// <param name="blobUri"> BlobUri of the exported jobs. </param>
        /// <param name="sasToken"> The sas token to access blob. </param>
        /// <returns> A new <see cref="Models.ExportJobDetails"/> instance for mocking. </returns>
        public static ExportJobDetails ExportJobDetails(IReadOnlyDictionary<string, string> affectedObjectDetails = null, Uri blobUri = null, string sasToken = null)
        {
            affectedObjectDetails ??= new Dictionary<string, string>();

            return new ExportJobDetails("ExportJobDetails", affectedObjectDetails, blobUri, sasToken);
        }

        /// <summary> Initializes a new instance of FabricReplicationGroupTaskDetails. </summary>
        /// <param name="jobTask"> The job entity. </param>
        /// <param name="skippedReason"> The skipped reason. </param>
        /// <param name="skippedReasonString"> The skipped reason string. </param>
        /// <returns> A new <see cref="Models.FabricReplicationGroupTaskDetails"/> instance for mocking. </returns>
        public static FabricReplicationGroupTaskDetails FabricReplicationGroupTaskDetails(JobEntity jobTask = null, string skippedReason = null, string skippedReasonString = null)
        {
            return new FabricReplicationGroupTaskDetails("FabricReplicationGroupTaskDetails", jobTask, skippedReason, skippedReasonString);
        }

        /// <summary> Initializes a new instance of JobTaskDetails. </summary>
        /// <param name="jobTask"> The job entity. </param>
        /// <returns> A new <see cref="Models.JobTaskDetails"/> instance for mocking. </returns>
        public static JobTaskDetails JobTaskDetails(JobEntity jobTask = null)
        {
            return new JobTaskDetails("JobTaskDetails", jobTask);
        }

        /// <summary> Initializes a new instance of JobEntity. </summary>
        /// <param name="jobId"> The job id. </param>
        /// <param name="jobFriendlyName"> The job display name. </param>
        /// <param name="targetObjectId"> The object id. </param>
        /// <param name="targetObjectName"> The object name. </param>
        /// <param name="targetInstanceType"> The workflow affected object type. </param>
        /// <param name="jobScenarioName"> The job name. Enum type ScenarioName. </param>
        /// <returns> A new <see cref="Models.JobEntity"/> instance for mocking. </returns>
        public static JobEntity JobEntity(string jobId = null, string jobFriendlyName = null, string targetObjectId = null, string targetObjectName = null, string targetInstanceType = null, string jobScenarioName = null)
        {
            return new JobEntity(jobId, jobFriendlyName, targetObjectId, targetObjectName, targetInstanceType, jobScenarioName);
        }

        /// <summary> Initializes a new instance of FailoverJobDetails. </summary>
        /// <param name="affectedObjectDetails"> The affected object properties like source server, source cloud, target server, target cloud etc. based on the workflow object details. </param>
        /// <param name="protectedItemDetails"> The test VM details. </param>
        /// <returns> A new <see cref="Models.FailoverJobDetails"/> instance for mocking. </returns>
        public static FailoverJobDetails FailoverJobDetails(IReadOnlyDictionary<string, string> affectedObjectDetails = null, IEnumerable<FailoverReplicationProtectedItemDetails> protectedItemDetails = null)
        {
            affectedObjectDetails ??= new Dictionary<string, string>();
            protectedItemDetails ??= new List<FailoverReplicationProtectedItemDetails>();

            return new FailoverJobDetails("FailoverJobDetails", affectedObjectDetails, protectedItemDetails?.ToList());
        }

        /// <summary> Initializes a new instance of FailoverReplicationProtectedItemDetails. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="friendlyName"> The friendly name. </param>
        /// <param name="testVmName"> The test Vm name. </param>
        /// <param name="testVmFriendlyName"> The test Vm friendly name. </param>
        /// <param name="networkConnectionStatus"> The network connection status. </param>
        /// <param name="networkFriendlyName"> The network friendly name. </param>
        /// <param name="subnet"> The network subnet. </param>
        /// <param name="recoveryPointId"> The recovery point Id. </param>
        /// <param name="recoveryPointOn"> The recovery point time. </param>
        /// <returns> A new <see cref="Models.FailoverReplicationProtectedItemDetails"/> instance for mocking. </returns>
        public static FailoverReplicationProtectedItemDetails FailoverReplicationProtectedItemDetails(string name = null, string friendlyName = null, string testVmName = null, string testVmFriendlyName = null, string networkConnectionStatus = null, string networkFriendlyName = null, string subnet = null, string recoveryPointId = null, DateTimeOffset? recoveryPointOn = null)
        {
            return new FailoverReplicationProtectedItemDetails(name, friendlyName, testVmName, testVmFriendlyName, networkConnectionStatus, networkFriendlyName, subnet, recoveryPointId, recoveryPointOn);
        }

        /// <summary> Initializes a new instance of HyperVHostDetails. </summary>
        /// <param name="id"> The Hyper-V host Id. </param>
        /// <param name="name"> The Hyper-V host name. </param>
        /// <param name="marsAgentVersion"> The Mars agent version. </param>
        /// <returns> A new <see cref="Models.HyperVHostDetails"/> instance for mocking. </returns>
        public static HyperVHostDetails HyperVHostDetails(string id = null, string name = null, string marsAgentVersion = null)
        {
            return new HyperVHostDetails(id, name, marsAgentVersion);
        }

        /// <summary> Initializes a new instance of HyperVReplica2012EventDetails. </summary>
        /// <param name="containerName"> The container friendly name. </param>
        /// <param name="fabricName"> The fabric friendly name. </param>
        /// <param name="remoteContainerName"> The remote container name. </param>
        /// <param name="remoteFabricName"> The remote fabric name. </param>
        /// <returns> A new <see cref="Models.HyperVReplica2012EventDetails"/> instance for mocking. </returns>
        public static HyperVReplica2012EventDetails HyperVReplica2012EventDetails(string containerName = null, string fabricName = null, string remoteContainerName = null, string remoteFabricName = null)
        {
            return new HyperVReplica2012EventDetails("HyperVReplica2012", containerName, fabricName, remoteContainerName, remoteFabricName);
        }

        /// <summary> Initializes a new instance of HyperVReplica2012R2EventDetails. </summary>
        /// <param name="containerName"> The container friendly name. </param>
        /// <param name="fabricName"> The fabric friendly name. </param>
        /// <param name="remoteContainerName"> The remote container name. </param>
        /// <param name="remoteFabricName"> The remote fabric name. </param>
        /// <returns> A new <see cref="Models.HyperVReplica2012R2EventDetails"/> instance for mocking. </returns>
        public static HyperVReplica2012R2EventDetails HyperVReplica2012R2EventDetails(string containerName = null, string fabricName = null, string remoteContainerName = null, string remoteFabricName = null)
        {
            return new HyperVReplica2012R2EventDetails("HyperVReplica2012R2", containerName, fabricName, remoteContainerName, remoteFabricName);
        }

        /// <summary> Initializes a new instance of HyperVReplicaAzureEventDetails. </summary>
        /// <param name="containerName"> The container friendly name. </param>
        /// <param name="fabricName"> The fabric friendly name. </param>
        /// <param name="remoteContainerName"> The remote container name. </param>
        /// <returns> A new <see cref="Models.HyperVReplicaAzureEventDetails"/> instance for mocking. </returns>
        public static HyperVReplicaAzureEventDetails HyperVReplicaAzureEventDetails(string containerName = null, string fabricName = null, string remoteContainerName = null)
        {
            return new HyperVReplicaAzureEventDetails("HyperVReplicaAzure", containerName, fabricName, remoteContainerName);
        }

        /// <summary> Initializes a new instance of HyperVReplicaAzureManagedDiskDetails. </summary>
        /// <param name="diskId"> The disk Id. </param>
        /// <param name="seedManagedDiskId"> Seed managed disk Id. </param>
        /// <param name="replicaDiskType"> The replica disk type. </param>
        /// <param name="diskEncryptionSetId"> The disk encryption set ARM Id. </param>
        /// <returns> A new <see cref="Models.HyperVReplicaAzureManagedDiskDetails"/> instance for mocking. </returns>
        public static HyperVReplicaAzureManagedDiskDetails HyperVReplicaAzureManagedDiskDetails(string diskId = null, string seedManagedDiskId = null, string replicaDiskType = null, string diskEncryptionSetId = null)
        {
            return new HyperVReplicaAzureManagedDiskDetails(diskId, seedManagedDiskId, replicaDiskType, diskEncryptionSetId);
        }

        /// <summary> Initializes a new instance of HyperVReplicaAzurePolicyDetails. </summary>
        /// <param name="recoveryPointHistoryDurationInHours"> The duration (in hours) to which point the recovery history needs to be maintained. </param>
        /// <param name="applicationConsistentSnapshotFrequencyInHours"> The interval (in hours) at which Hyper-V Replica should create an application consistent snapshot within the VM. </param>
        /// <param name="replicationInterval"> The replication interval. </param>
        /// <param name="onlineReplicationStartTime"> The scheduled start time for the initial replication. If this parameter is Null, the initial replication starts immediately. </param>
        /// <param name="encryption"> A value indicating whether encryption is enabled for virtual machines in this cloud. </param>
        /// <param name="activeStorageAccountId"> The active storage account Id. </param>
        /// <returns> A new <see cref="Models.HyperVReplicaAzurePolicyDetails"/> instance for mocking. </returns>
        public static HyperVReplicaAzurePolicyDetails HyperVReplicaAzurePolicyDetails(int? recoveryPointHistoryDurationInHours = null, int? applicationConsistentSnapshotFrequencyInHours = null, int? replicationInterval = null, string onlineReplicationStartTime = null, string encryption = null, string activeStorageAccountId = null)
        {
            return new HyperVReplicaAzurePolicyDetails("HyperVReplicaAzure", recoveryPointHistoryDurationInHours, applicationConsistentSnapshotFrequencyInHours, replicationInterval, onlineReplicationStartTime, encryption, activeStorageAccountId);
        }

        /// <summary> Initializes a new instance of HyperVReplicaAzureReplicationDetails. </summary>
        /// <param name="azureVmDiskDetails"> Azure VM Disk details. </param>
        /// <param name="recoveryAzureVmName"> Recovery Azure given name. </param>
        /// <param name="recoveryAzureVmSize"> The Recovery Azure VM size. </param>
        /// <param name="recoveryAzureStorageAccount"> The recovery Azure storage account. </param>
        /// <param name="recoveryAzureLogStorageAccountId"> The ARM id of the log storage account used for replication. This will be set to null if no log storage account was provided during enable protection. </param>
        /// <param name="lastReplicatedOn"> The Last replication time. </param>
        /// <param name="rpoInSeconds"> Last RPO value. </param>
        /// <param name="lastRpoCalculatedOn"> The last RPO calculated time. </param>
        /// <param name="vmId"> The virtual machine Id. </param>
        /// <param name="vmProtectionState"> The protection state for the vm. </param>
        /// <param name="vmProtectionStateDescription"> The protection state description for the vm. </param>
        /// <param name="initialReplicationDetails"> Initial replication details. </param>
        /// <param name="vmNics"> The PE Network details. </param>
        /// <param name="selectedRecoveryAzureNetworkId"> The selected recovery azure network Id. </param>
        /// <param name="selectedSourceNicId"> The selected source nic Id which will be used as the primary nic during failover. </param>
        /// <param name="encryption"> The encryption info. </param>
        /// <param name="osDetails"> The operating system info. </param>
        /// <param name="sourceVmRamSizeInMB"> The RAM size of the VM on the primary side. </param>
        /// <param name="sourceVmCpuCount"> The CPU count of the VM on the primary side. </param>
        /// <param name="enableRdpOnTargetOption"> The selected option to enable RDP\SSH on target vm after failover. String value of SrsDataContract.EnableRDPOnTargetOption enum. </param>
        /// <param name="recoveryAzureResourceGroupId"> The target resource group Id. </param>
        /// <param name="recoveryAvailabilitySetId"> The recovery availability set Id. </param>
        /// <param name="targetAvailabilityZone"> The target availability zone. </param>
        /// <param name="targetProximityPlacementGroupId"> The target proximity placement group Id. </param>
        /// <param name="useManagedDisks"> A value indicating whether managed disks should be used during failover. </param>
        /// <param name="licenseType"> License Type of the VM to be used. </param>
        /// <param name="sqlServerLicenseType"> The SQL Server license type. </param>
        /// <param name="lastRecoveryPointReceived"> The last recovery point received time. </param>
        /// <param name="targetVmTags"> The target VM tags. </param>
        /// <param name="seedManagedDiskTags"> The tags for the seed managed disks. </param>
        /// <param name="targetManagedDiskTags"> The tags for the target managed disks. </param>
        /// <param name="targetNicTags"> The tags for the target NICs. </param>
        /// <param name="protectedManagedDisks"> The list of protected managed disks. </param>
        /// <returns> A new <see cref="Models.HyperVReplicaAzureReplicationDetails"/> instance for mocking. </returns>
        public static HyperVReplicaAzureReplicationDetails HyperVReplicaAzureReplicationDetails(IEnumerable<AzureVmDiskDetails> azureVmDiskDetails = null, string recoveryAzureVmName = null, string recoveryAzureVmSize = null, string recoveryAzureStorageAccount = null, string recoveryAzureLogStorageAccountId = null, DateTimeOffset? lastReplicatedOn = null, long? rpoInSeconds = null, DateTimeOffset? lastRpoCalculatedOn = null, string vmId = null, string vmProtectionState = null, string vmProtectionStateDescription = null, InitialReplicationDetails initialReplicationDetails = null, IEnumerable<VmNicDetails> vmNics = null, string selectedRecoveryAzureNetworkId = null, string selectedSourceNicId = null, string encryption = null, OSDetails osDetails = null, int? sourceVmRamSizeInMB = null, int? sourceVmCpuCount = null, string enableRdpOnTargetOption = null, string recoveryAzureResourceGroupId = null, string recoveryAvailabilitySetId = null, string targetAvailabilityZone = null, string targetProximityPlacementGroupId = null, string useManagedDisks = null, string licenseType = null, string sqlServerLicenseType = null, DateTimeOffset? lastRecoveryPointReceived = null, IReadOnlyDictionary<string, string> targetVmTags = null, IReadOnlyDictionary<string, string> seedManagedDiskTags = null, IReadOnlyDictionary<string, string> targetManagedDiskTags = null, IReadOnlyDictionary<string, string> targetNicTags = null, IEnumerable<HyperVReplicaAzureManagedDiskDetails> protectedManagedDisks = null)
        {
            azureVmDiskDetails ??= new List<AzureVmDiskDetails>();
            vmNics ??= new List<VmNicDetails>();
            targetVmTags ??= new Dictionary<string, string>();
            seedManagedDiskTags ??= new Dictionary<string, string>();
            targetManagedDiskTags ??= new Dictionary<string, string>();
            targetNicTags ??= new Dictionary<string, string>();
            protectedManagedDisks ??= new List<HyperVReplicaAzureManagedDiskDetails>();

            return new HyperVReplicaAzureReplicationDetails("HyperVReplicaAzure", azureVmDiskDetails?.ToList(), recoveryAzureVmName, recoveryAzureVmSize, recoveryAzureStorageAccount, recoveryAzureLogStorageAccountId, lastReplicatedOn, rpoInSeconds, lastRpoCalculatedOn, vmId, vmProtectionState, vmProtectionStateDescription, initialReplicationDetails, vmNics?.ToList(), selectedRecoveryAzureNetworkId, selectedSourceNicId, encryption, osDetails, sourceVmRamSizeInMB, sourceVmCpuCount, enableRdpOnTargetOption, recoveryAzureResourceGroupId, recoveryAvailabilitySetId, targetAvailabilityZone, targetProximityPlacementGroupId, useManagedDisks, licenseType, sqlServerLicenseType, lastRecoveryPointReceived, targetVmTags, seedManagedDiskTags, targetManagedDiskTags, targetNicTags, protectedManagedDisks?.ToList());
        }

        /// <summary> Initializes a new instance of InitialReplicationDetails. </summary>
        /// <param name="initialReplicationType"> Initial replication type. </param>
        /// <param name="initialReplicationProgressPercentage"> The initial replication progress percentage. </param>
        /// <returns> A new <see cref="Models.InitialReplicationDetails"/> instance for mocking. </returns>
        public static InitialReplicationDetails InitialReplicationDetails(string initialReplicationType = null, string initialReplicationProgressPercentage = null)
        {
            return new InitialReplicationDetails(initialReplicationType, initialReplicationProgressPercentage);
        }

        /// <summary> Initializes a new instance of OSDetails. </summary>
        /// <param name="osType"> VM Disk details. </param>
        /// <param name="productType"> Product type. </param>
        /// <param name="osEdition"> The OSEdition. </param>
        /// <param name="osVersion"> The OS Version. </param>
        /// <param name="osMajorVersion"> The OS Major Version. </param>
        /// <param name="osMinorVersion"> The OS Minor Version. </param>
        /// <returns> A new <see cref="Models.OSDetails"/> instance for mocking. </returns>
        public static OSDetails OSDetails(string osType = null, string productType = null, string osEdition = null, string osVersion = null, string osMajorVersion = null, string osMinorVersion = null)
        {
            return new OSDetails(osType, productType, osEdition, osVersion, osMajorVersion, osMinorVersion);
        }

        /// <summary> Initializes a new instance of HyperVReplicaBaseEventDetails. </summary>
        /// <param name="containerName"> The container friendly name. </param>
        /// <param name="fabricName"> The fabric friendly name. </param>
        /// <param name="remoteContainerName"> The remote container name. </param>
        /// <param name="remoteFabricName"> The remote fabric name. </param>
        /// <returns> A new <see cref="Models.HyperVReplicaBaseEventDetails"/> instance for mocking. </returns>
        public static HyperVReplicaBaseEventDetails HyperVReplicaBaseEventDetails(string containerName = null, string fabricName = null, string remoteContainerName = null, string remoteFabricName = null)
        {
            return new HyperVReplicaBaseEventDetails("HyperVReplicaBaseEventDetails", containerName, fabricName, remoteContainerName, remoteFabricName);
        }

        /// <summary> Initializes a new instance of HyperVReplicaBasePolicyDetails. </summary>
        /// <param name="recoveryPoints"> A value indicating the number of recovery points. </param>
        /// <param name="applicationConsistentSnapshotFrequencyInHours"> A value indicating the application consistent frequency. </param>
        /// <param name="compression"> A value indicating whether compression has to be enabled. </param>
        /// <param name="initialReplicationMethod"> A value indicating whether IR is online. </param>
        /// <param name="onlineReplicationStartTime"> A value indicating the online IR start time. </param>
        /// <param name="offlineReplicationImportPath"> A value indicating the offline IR import path. </param>
        /// <param name="offlineReplicationExportPath"> A value indicating the offline IR export path. </param>
        /// <param name="replicationPort"> A value indicating the recovery HTTPS port. </param>
        /// <param name="allowedAuthenticationType"> A value indicating the authentication type. </param>
        /// <param name="replicaDeletionOption"> A value indicating whether the VM has to be auto deleted. Supported Values: String.Empty, None, OnRecoveryCloud. </param>
        /// <returns> A new <see cref="Models.HyperVReplicaBasePolicyDetails"/> instance for mocking. </returns>
        public static HyperVReplicaBasePolicyDetails HyperVReplicaBasePolicyDetails(int? recoveryPoints = null, int? applicationConsistentSnapshotFrequencyInHours = null, string compression = null, string initialReplicationMethod = null, string onlineReplicationStartTime = null, string offlineReplicationImportPath = null, string offlineReplicationExportPath = null, int? replicationPort = null, int? allowedAuthenticationType = null, string replicaDeletionOption = null)
        {
            return new HyperVReplicaBasePolicyDetails("HyperVReplicaBasePolicyDetails", recoveryPoints, applicationConsistentSnapshotFrequencyInHours, compression, initialReplicationMethod, onlineReplicationStartTime, offlineReplicationImportPath, offlineReplicationExportPath, replicationPort, allowedAuthenticationType, replicaDeletionOption);
        }

        /// <summary> Initializes a new instance of HyperVReplicaBaseReplicationDetails. </summary>
        /// <param name="lastReplicatedOn"> The Last replication time. </param>
        /// <param name="vmNics"> The PE Network details. </param>
        /// <param name="vmId"> The virtual machine Id. </param>
        /// <param name="vmProtectionState"> The protection state for the vm. </param>
        /// <param name="vmProtectionStateDescription"> The protection state description for the vm. </param>
        /// <param name="initialReplicationDetails"> Initial replication details. </param>
        /// <param name="vmDiskDetails"> VM disk details. </param>
        /// <returns> A new <see cref="Models.HyperVReplicaBaseReplicationDetails"/> instance for mocking. </returns>
        public static HyperVReplicaBaseReplicationDetails HyperVReplicaBaseReplicationDetails(DateTimeOffset? lastReplicatedOn = null, IEnumerable<VmNicDetails> vmNics = null, string vmId = null, string vmProtectionState = null, string vmProtectionStateDescription = null, InitialReplicationDetails initialReplicationDetails = null, IEnumerable<DiskDetails> vmDiskDetails = null)
        {
            vmNics ??= new List<VmNicDetails>();
            vmDiskDetails ??= new List<DiskDetails>();

            return new HyperVReplicaBaseReplicationDetails("HyperVReplicaBaseReplicationDetails", lastReplicatedOn, vmNics?.ToList(), vmId, vmProtectionState, vmProtectionStateDescription, initialReplicationDetails, vmDiskDetails?.ToList());
        }

        /// <summary> Initializes a new instance of HyperVReplicaBluePolicyDetails. </summary>
        /// <param name="replicationFrequencyInSeconds"> A value indicating the replication interval. </param>
        /// <param name="recoveryPoints"> A value indicating the number of recovery points. </param>
        /// <param name="applicationConsistentSnapshotFrequencyInHours"> A value indicating the application consistent frequency. </param>
        /// <param name="compression"> A value indicating whether compression has to be enabled. </param>
        /// <param name="initialReplicationMethod"> A value indicating whether IR is online. </param>
        /// <param name="onlineReplicationStartTime"> A value indicating the online IR start time. </param>
        /// <param name="offlineReplicationImportPath"> A value indicating the offline IR import path. </param>
        /// <param name="offlineReplicationExportPath"> A value indicating the offline IR export path. </param>
        /// <param name="replicationPort"> A value indicating the recovery HTTPS port. </param>
        /// <param name="allowedAuthenticationType"> A value indicating the authentication type. </param>
        /// <param name="replicaDeletionOption"> A value indicating whether the VM has to be auto deleted. Supported Values: String.Empty, None, OnRecoveryCloud. </param>
        /// <returns> A new <see cref="Models.HyperVReplicaBluePolicyDetails"/> instance for mocking. </returns>
        public static HyperVReplicaBluePolicyDetails HyperVReplicaBluePolicyDetails(int? replicationFrequencyInSeconds = null, int? recoveryPoints = null, int? applicationConsistentSnapshotFrequencyInHours = null, string compression = null, string initialReplicationMethod = null, string onlineReplicationStartTime = null, string offlineReplicationImportPath = null, string offlineReplicationExportPath = null, int? replicationPort = null, int? allowedAuthenticationType = null, string replicaDeletionOption = null)
        {
            return new HyperVReplicaBluePolicyDetails("HyperVReplica2012R2", replicationFrequencyInSeconds, recoveryPoints, applicationConsistentSnapshotFrequencyInHours, compression, initialReplicationMethod, onlineReplicationStartTime, offlineReplicationImportPath, offlineReplicationExportPath, replicationPort, allowedAuthenticationType, replicaDeletionOption);
        }

        /// <summary> Initializes a new instance of HyperVReplicaBlueReplicationDetails. </summary>
        /// <param name="lastReplicatedOn"> The Last replication time. </param>
        /// <param name="vmNics"> The PE Network details. </param>
        /// <param name="vmId"> The virtual machine Id. </param>
        /// <param name="vmProtectionState"> The protection state for the vm. </param>
        /// <param name="vmProtectionStateDescription"> The protection state description for the vm. </param>
        /// <param name="initialReplicationDetails"> Initial replication details. </param>
        /// <param name="vmDiskDetails"> VM disk details. </param>
        /// <returns> A new <see cref="Models.HyperVReplicaBlueReplicationDetails"/> instance for mocking. </returns>
        public static HyperVReplicaBlueReplicationDetails HyperVReplicaBlueReplicationDetails(DateTimeOffset? lastReplicatedOn = null, IEnumerable<VmNicDetails> vmNics = null, string vmId = null, string vmProtectionState = null, string vmProtectionStateDescription = null, InitialReplicationDetails initialReplicationDetails = null, IEnumerable<DiskDetails> vmDiskDetails = null)
        {
            vmNics ??= new List<VmNicDetails>();
            vmDiskDetails ??= new List<DiskDetails>();

            return new HyperVReplicaBlueReplicationDetails("HyperVReplica2012R2", lastReplicatedOn, vmNics?.ToList(), vmId, vmProtectionState, vmProtectionStateDescription, initialReplicationDetails, vmDiskDetails?.ToList());
        }

        /// <summary> Initializes a new instance of HyperVReplicaPolicyDetails. </summary>
        /// <param name="recoveryPoints"> A value indicating the number of recovery points. </param>
        /// <param name="applicationConsistentSnapshotFrequencyInHours"> A value indicating the application consistent frequency. </param>
        /// <param name="compression"> A value indicating whether compression has to be enabled. </param>
        /// <param name="initialReplicationMethod"> A value indicating whether IR is online. </param>
        /// <param name="onlineReplicationStartTime"> A value indicating the online IR start time. </param>
        /// <param name="offlineReplicationImportPath"> A value indicating the offline IR import path. </param>
        /// <param name="offlineReplicationExportPath"> A value indicating the offline IR export path. </param>
        /// <param name="replicationPort"> A value indicating the recovery HTTPS port. </param>
        /// <param name="allowedAuthenticationType"> A value indicating the authentication type. </param>
        /// <param name="replicaDeletionOption"> A value indicating whether the VM has to be auto deleted. Supported Values: String.Empty, None, OnRecoveryCloud. </param>
        /// <returns> A new <see cref="Models.HyperVReplicaPolicyDetails"/> instance for mocking. </returns>
        public static HyperVReplicaPolicyDetails HyperVReplicaPolicyDetails(int? recoveryPoints = null, int? applicationConsistentSnapshotFrequencyInHours = null, string compression = null, string initialReplicationMethod = null, string onlineReplicationStartTime = null, string offlineReplicationImportPath = null, string offlineReplicationExportPath = null, int? replicationPort = null, int? allowedAuthenticationType = null, string replicaDeletionOption = null)
        {
            return new HyperVReplicaPolicyDetails("HyperVReplica2012", recoveryPoints, applicationConsistentSnapshotFrequencyInHours, compression, initialReplicationMethod, onlineReplicationStartTime, offlineReplicationImportPath, offlineReplicationExportPath, replicationPort, allowedAuthenticationType, replicaDeletionOption);
        }

        /// <summary> Initializes a new instance of HyperVReplicaReplicationDetails. </summary>
        /// <param name="lastReplicatedOn"> The Last replication time. </param>
        /// <param name="vmNics"> The PE Network details. </param>
        /// <param name="vmId"> The virtual machine Id. </param>
        /// <param name="vmProtectionState"> The protection state for the vm. </param>
        /// <param name="vmProtectionStateDescription"> The protection state description for the vm. </param>
        /// <param name="initialReplicationDetails"> Initial replication details. </param>
        /// <param name="vmDiskDetails"> VM disk details. </param>
        /// <returns> A new <see cref="Models.HyperVReplicaReplicationDetails"/> instance for mocking. </returns>
        public static HyperVReplicaReplicationDetails HyperVReplicaReplicationDetails(DateTimeOffset? lastReplicatedOn = null, IEnumerable<VmNicDetails> vmNics = null, string vmId = null, string vmProtectionState = null, string vmProtectionStateDescription = null, InitialReplicationDetails initialReplicationDetails = null, IEnumerable<DiskDetails> vmDiskDetails = null)
        {
            vmNics ??= new List<VmNicDetails>();
            vmDiskDetails ??= new List<DiskDetails>();

            return new HyperVReplicaReplicationDetails("HyperVReplica2012", lastReplicatedOn, vmNics?.ToList(), vmId, vmProtectionState, vmProtectionStateDescription, initialReplicationDetails, vmDiskDetails?.ToList());
        }

        /// <summary> Initializes a new instance of HyperVSiteDetails. </summary>
        /// <param name="hyperVHosts"> The list of Hyper-V hosts associated with the fabric. </param>
        /// <returns> A new <see cref="Models.HyperVSiteDetails"/> instance for mocking. </returns>
        public static HyperVSiteDetails HyperVSiteDetails(IEnumerable<HyperVHostDetails> hyperVHosts = null)
        {
            hyperVHosts ??= new List<HyperVHostDetails>();

            return new HyperVSiteDetails("HyperVSite", hyperVHosts?.ToList());
        }

        /// <summary> Initializes a new instance of HyperVVirtualMachineDetails. </summary>
        /// <param name="sourceItemId"> The source id of the object. </param>
        /// <param name="generation"> The id of the object in fabric. </param>
        /// <param name="osDetails"> The Last replication time. </param>
        /// <param name="diskDetails"> The Last successful failover time. </param>
        /// <param name="hasPhysicalDisk"> A value indicating whether the VM has a physical disk attached. String value of SrsDataContract.PresenceStatus enum. </param>
        /// <param name="hasFibreChannelAdapter"> A value indicating whether the VM has a fibre channel adapter attached. String value of SrsDataContract.PresenceStatus enum. </param>
        /// <param name="hasSharedVhd"> A value indicating whether the VM has a shared VHD attached. String value of SrsDataContract.PresenceStatus enum. </param>
        /// <param name="hyperVHostId"> The Id of the hyper-v host in fabric. </param>
        /// <returns> A new <see cref="Models.HyperVVirtualMachineDetails"/> instance for mocking. </returns>
        public static HyperVVirtualMachineDetails HyperVVirtualMachineDetails(string sourceItemId = null, string generation = null, OSDetails osDetails = null, IEnumerable<DiskDetails> diskDetails = null, PresenceStatus? hasPhysicalDisk = null, PresenceStatus? hasFibreChannelAdapter = null, PresenceStatus? hasSharedVhd = null, string hyperVHostId = null)
        {
            diskDetails ??= new List<DiskDetails>();

            return new HyperVVirtualMachineDetails("HyperVVirtualMachine", sourceItemId, generation, osDetails, diskDetails?.ToList(), hasPhysicalDisk, hasFibreChannelAdapter, hasSharedVhd, hyperVHostId);
        }

        /// <summary> Initializes a new instance of InlineWorkflowTaskDetails. </summary>
        /// <param name="childTasks"> The child tasks. </param>
        /// <param name="workflowIds"> The list of child workflow ids. </param>
        /// <returns> A new <see cref="Models.InlineWorkflowTaskDetails"/> instance for mocking. </returns>
        public static InlineWorkflowTaskDetails InlineWorkflowTaskDetails(IEnumerable<ASRTask> childTasks = null, IEnumerable<string> workflowIds = null)
        {
            childTasks ??= new List<ASRTask>();
            workflowIds ??= new List<string>();

            return new InlineWorkflowTaskDetails("InlineWorkflowTaskDetails", childTasks?.ToList(), workflowIds?.ToList());
        }

        /// <summary> Initializes a new instance of InMageAgentDetails. </summary>
        /// <param name="agentVersion"> The agent version. </param>
        /// <param name="agentUpdateStatus"> A value indicating whether installed agent needs to be updated. </param>
        /// <param name="postUpdateRebootStatus"> A value indicating whether reboot is required after update is applied. </param>
        /// <param name="agentExpiryOn"> Agent expiry date. </param>
        /// <returns> A new <see cref="Models.InMageAgentDetails"/> instance for mocking. </returns>
        public static InMageAgentDetails InMageAgentDetails(string agentVersion = null, string agentUpdateStatus = null, string postUpdateRebootStatus = null, DateTimeOffset? agentExpiryOn = null)
        {
            return new InMageAgentDetails(agentVersion, agentUpdateStatus, postUpdateRebootStatus, agentExpiryOn);
        }

        /// <summary> Initializes a new instance of InMageAzureV2EventDetails. </summary>
        /// <param name="eventType"> InMage Event type. Takes one of the values of InMageDataContract.InMageMonitoringEventType. </param>
        /// <param name="category"> InMage Event Category. </param>
        /// <param name="component"> InMage Event Component. </param>
        /// <param name="correctiveAction"> Corrective Action string for the event. </param>
        /// <param name="details"> InMage Event Details. </param>
        /// <param name="summary"> InMage Event Summary. </param>
        /// <param name="siteName"> VMware Site name. </param>
        /// <returns> A new <see cref="Models.InMageAzureV2EventDetails"/> instance for mocking. </returns>
        public static InMageAzureV2EventDetails InMageAzureV2EventDetails(string eventType = null, string category = null, string component = null, string correctiveAction = null, string details = null, string summary = null, string siteName = null)
        {
            return new InMageAzureV2EventDetails("InMageAzureV2", eventType, category, component, correctiveAction, details, summary, siteName);
        }

        /// <summary> Initializes a new instance of InMageAzureV2ManagedDiskDetails. </summary>
        /// <param name="diskId"> The disk id. </param>
        /// <param name="seedManagedDiskId"> Seed managed disk Id. </param>
        /// <param name="replicaDiskType"> The replica disk type. </param>
        /// <param name="diskEncryptionSetId"> The DiskEncryptionSet ARM ID. </param>
        /// <param name="targetDiskName"> The target disk name. </param>
        /// <returns> A new <see cref="Models.InMageAzureV2ManagedDiskDetails"/> instance for mocking. </returns>
        public static InMageAzureV2ManagedDiskDetails InMageAzureV2ManagedDiskDetails(string diskId = null, string seedManagedDiskId = null, string replicaDiskType = null, string diskEncryptionSetId = null, string targetDiskName = null)
        {
            return new InMageAzureV2ManagedDiskDetails(diskId, seedManagedDiskId, replicaDiskType, diskEncryptionSetId, targetDiskName);
        }

        /// <summary> Initializes a new instance of InMageAzureV2PolicyDetails. </summary>
        /// <param name="crashConsistentFrequencyInMinutes"> The crash consistent snapshot frequency in minutes. </param>
        /// <param name="recoveryPointThresholdInMinutes"> The recovery point threshold in minutes. </param>
        /// <param name="recoveryPointHistory"> The duration in minutes until which the recovery points need to be stored. </param>
        /// <param name="appConsistentFrequencyInMinutes"> The app consistent snapshot frequency in minutes. </param>
        /// <param name="multiVmSyncStatus"> A value indicating whether multi-VM sync has to be enabled. </param>
        /// <returns> A new <see cref="Models.InMageAzureV2PolicyDetails"/> instance for mocking. </returns>
        public static InMageAzureV2PolicyDetails InMageAzureV2PolicyDetails(int? crashConsistentFrequencyInMinutes = null, int? recoveryPointThresholdInMinutes = null, int? recoveryPointHistory = null, int? appConsistentFrequencyInMinutes = null, string multiVmSyncStatus = null)
        {
            return new InMageAzureV2PolicyDetails("InMageAzureV2", crashConsistentFrequencyInMinutes, recoveryPointThresholdInMinutes, recoveryPointHistory, appConsistentFrequencyInMinutes, multiVmSyncStatus);
        }

        /// <summary> Initializes a new instance of InMageAzureV2ProtectedDiskDetails. </summary>
        /// <param name="diskId"> The disk id. </param>
        /// <param name="diskName"> The disk name. </param>
        /// <param name="protectionStage"> The protection stage. </param>
        /// <param name="healthErrorCode"> The health error code for the disk. </param>
        /// <param name="rpoInSeconds"> The RPO in seconds. </param>
        /// <param name="resyncRequired"> A value indicating whether resync is required for this disk. </param>
        /// <param name="resyncProgressPercentage"> The resync progress percentage. </param>
        /// <param name="resyncDurationInSeconds"> The resync duration in seconds. </param>
        /// <param name="diskCapacityInBytes"> The disk capacity in bytes. </param>
        /// <param name="fileSystemCapacityInBytes"> The disk file system capacity in bytes. </param>
        /// <param name="sourceDataInMegaBytes"> The source data transit in MB. </param>
        /// <param name="psDataInMegaBytes"> The PS data transit in MB. </param>
        /// <param name="targetDataInMegaBytes"> The target data transit in MB. </param>
        /// <param name="diskResized"> A value indicating whether disk is resized. </param>
        /// <param name="lastRpoCalculatedOn"> The last RPO calculated time. </param>
        /// <param name="resyncProcessedBytes"> The resync processed bytes. </param>
        /// <param name="resyncTotalTransferredBytes"> The resync total transferred bytes. </param>
        /// <param name="resyncLast15MinutesTransferredBytes"> The resync last 15 minutes transferred bytes. </param>
        /// <param name="resyncLastDataTransferTimeUTC"> The last data transfer time in UTC. </param>
        /// <param name="resyncStartOn"> The resync start time. </param>
        /// <param name="progressHealth"> The Progress Health. </param>
        /// <param name="progressStatus"> The Progress Status. </param>
        /// <param name="secondsToTakeSwitchProvider"> The seconds to take for switch provider. </param>
        /// <returns> A new <see cref="Models.InMageAzureV2ProtectedDiskDetails"/> instance for mocking. </returns>
        public static InMageAzureV2ProtectedDiskDetails InMageAzureV2ProtectedDiskDetails(string diskId = null, string diskName = null, string protectionStage = null, string healthErrorCode = null, long? rpoInSeconds = null, string resyncRequired = null, int? resyncProgressPercentage = null, long? resyncDurationInSeconds = null, long? diskCapacityInBytes = null, long? fileSystemCapacityInBytes = null, double? sourceDataInMegaBytes = null, double? psDataInMegaBytes = null, double? targetDataInMegaBytes = null, string diskResized = null, DateTimeOffset? lastRpoCalculatedOn = null, long? resyncProcessedBytes = null, long? resyncTotalTransferredBytes = null, long? resyncLast15MinutesTransferredBytes = null, DateTimeOffset? resyncLastDataTransferTimeUTC = null, DateTimeOffset? resyncStartOn = null, string progressHealth = null, string progressStatus = null, long? secondsToTakeSwitchProvider = null)
        {
            return new InMageAzureV2ProtectedDiskDetails(diskId, diskName, protectionStage, healthErrorCode, rpoInSeconds, resyncRequired, resyncProgressPercentage, resyncDurationInSeconds, diskCapacityInBytes, fileSystemCapacityInBytes, sourceDataInMegaBytes, psDataInMegaBytes, targetDataInMegaBytes, diskResized, lastRpoCalculatedOn, resyncProcessedBytes, resyncTotalTransferredBytes, resyncLast15MinutesTransferredBytes, resyncLastDataTransferTimeUTC, resyncStartOn, progressHealth, progressStatus, secondsToTakeSwitchProvider);
        }

        /// <summary> Initializes a new instance of InMageAzureV2RecoveryPointDetails. </summary>
        /// <param name="isMultiVmSyncPoint"> A value indicating whether the recovery point is multi VM consistent. </param>
        /// <returns> A new <see cref="Models.InMageAzureV2RecoveryPointDetails"/> instance for mocking. </returns>
        public static InMageAzureV2RecoveryPointDetails InMageAzureV2RecoveryPointDetails(string isMultiVmSyncPoint = null)
        {
            return new InMageAzureV2RecoveryPointDetails("InMageAzureV2", isMultiVmSyncPoint);
        }

        /// <summary> Initializes a new instance of InMageAzureV2ReplicationDetails. </summary>
        /// <param name="infrastructureVmId"> The infrastructure VM Id. </param>
        /// <param name="vCenterInfrastructureId"> The vCenter infrastructure Id. </param>
        /// <param name="protectionStage"> The protection stage. </param>
        /// <param name="vmId"> The virtual machine Id. </param>
        /// <param name="vmProtectionState"> The protection state for the vm. </param>
        /// <param name="vmProtectionStateDescription"> The protection state description for the vm. </param>
        /// <param name="resyncProgressPercentage"> The resync progress percentage. </param>
        /// <param name="rpoInSeconds"> The RPO in seconds. </param>
        /// <param name="compressedDataRateInMB"> The compressed data change rate in MB. </param>
        /// <param name="uncompressedDataRateInMB"> The uncompressed data change rate in MB. </param>
        /// <param name="ipAddress"> The source IP address. </param>
        /// <param name="agentVersion"> The agent version. </param>
        /// <param name="agentExpiryOn"> Agent expiry date. </param>
        /// <param name="isAgentUpdateRequired"> A value indicating whether installed agent needs to be updated. </param>
        /// <param name="isRebootAfterUpdateRequired"> A value indicating whether the source server requires a restart after update. </param>
        /// <param name="lastHeartbeat"> The last heartbeat received from the source server. </param>
        /// <param name="processServerId"> The process server Id. </param>
        /// <param name="processServerName"> The process server name. </param>
        /// <param name="multiVmGroupId"> The multi vm group Id. </param>
        /// <param name="multiVmGroupName"> The multi vm group name. </param>
        /// <param name="multiVmSyncStatus"> A value indicating whether multi vm sync is enabled or disabled. </param>
        /// <param name="protectedDisks"> The list of protected disks. </param>
        /// <param name="diskResized"> A value indicating whether any disk is resized for this VM. </param>
        /// <param name="masterTargetId"> The master target Id. </param>
        /// <param name="sourceVmCpuCount"> The CPU count of the VM on the primary side. </param>
        /// <param name="sourceVmRamSizeInMB"> The RAM size of the VM on the primary side. </param>
        /// <param name="osType"> The type of the OS on the VM. </param>
        /// <param name="vhdName"> The OS disk VHD name. </param>
        /// <param name="osDiskId"> The id of the disk containing the OS. </param>
        /// <param name="azureVmDiskDetails"> Azure VM Disk details. </param>
        /// <param name="recoveryAzureVmName"> Recovery Azure given name. </param>
        /// <param name="recoveryAzureVmSize"> The Recovery Azure VM size. </param>
        /// <param name="recoveryAzureStorageAccount"> The recovery Azure storage account. </param>
        /// <param name="recoveryAzureLogStorageAccountId"> The ARM id of the log storage account used for replication. This will be set to null if no log storage account was provided during enable protection. </param>
        /// <param name="vmNics"> The PE Network details. </param>
        /// <param name="selectedRecoveryAzureNetworkId"> The selected recovery azure network Id. </param>
        /// <param name="selectedTfoAzureNetworkId"> The test failover virtual network. </param>
        /// <param name="selectedSourceNicId"> The selected source nic Id which will be used as the primary nic during failover. </param>
        /// <param name="discoveryType"> A value indicating the discovery type of the machine. Value can be vCenter or physical. </param>
        /// <param name="enableRdpOnTargetOption"> The selected option to enable RDP\SSH on target vm after failover. String value of SrsDataContract.EnableRDPOnTargetOption enum. </param>
        /// <param name="datastores"> The datastores of the on-premise machine. Value can be list of strings that contain datastore names. </param>
        /// <param name="targetVmId"> The ARM Id of the target Azure VM. This value will be null until the VM is failed over. Only after failure it will be populated with the ARM Id of the Azure VM. </param>
        /// <param name="recoveryAzureResourceGroupId"> The target resource group Id. </param>
        /// <param name="recoveryAvailabilitySetId"> The recovery availability set Id. </param>
        /// <param name="targetAvailabilityZone"> The target availability zone. </param>
        /// <param name="targetProximityPlacementGroupId"> The target proximity placement group Id. </param>
        /// <param name="useManagedDisks"> A value indicating whether managed disks should be used during failover. </param>
        /// <param name="licenseType"> License Type of the VM to be used. </param>
        /// <param name="sqlServerLicenseType"> The SQL Server license type. </param>
        /// <param name="validationErrors"> The validation errors of the on-premise machine Value can be list of validation errors. </param>
        /// <param name="lastRpoCalculatedOn"> The last RPO calculated time. </param>
        /// <param name="lastUpdateReceivedOn"> The last update time received from on-prem components. </param>
        /// <param name="replicaId"> The replica id of the protected item. </param>
        /// <param name="osVersion"> The OS Version of the protected item. </param>
        /// <param name="protectedManagedDisks"> The list of protected managed disks. </param>
        /// <param name="lastRecoveryPointReceived"> The last recovery point received time. </param>
        /// <param name="firmwareType"> The firmware type of this protected item. </param>
        /// <param name="azureVmGeneration"> The target generation for this protected item. </param>
        /// <param name="isAdditionalStatsAvailable"> A value indicating whether additional IR stats are available or not. </param>
        /// <param name="totalDataTransferred"> The total transferred data in bytes. </param>
        /// <param name="totalProgressHealth"> The progress health. </param>
        /// <param name="targetVmTags"> The target VM tags. </param>
        /// <param name="seedManagedDiskTags"> The tags for the seed managed disks. </param>
        /// <param name="targetManagedDiskTags"> The tags for the target managed disks. </param>
        /// <param name="targetNicTags"> The tags for the target NICs. </param>
        /// <param name="switchProviderBlockingErrorDetails"> The switch provider blocking error information. </param>
        /// <param name="switchProviderDetails"> The switch provider blocking error information. </param>
        /// <returns> A new <see cref="Models.InMageAzureV2ReplicationDetails"/> instance for mocking. </returns>
        public static InMageAzureV2ReplicationDetails InMageAzureV2ReplicationDetails(string infrastructureVmId = null, string vCenterInfrastructureId = null, string protectionStage = null, string vmId = null, string vmProtectionState = null, string vmProtectionStateDescription = null, int? resyncProgressPercentage = null, long? rpoInSeconds = null, double? compressedDataRateInMB = null, double? uncompressedDataRateInMB = null, string ipAddress = null, string agentVersion = null, DateTimeOffset? agentExpiryOn = null, string isAgentUpdateRequired = null, string isRebootAfterUpdateRequired = null, DateTimeOffset? lastHeartbeat = null, string processServerId = null, string processServerName = null, string multiVmGroupId = null, string multiVmGroupName = null, string multiVmSyncStatus = null, IEnumerable<InMageAzureV2ProtectedDiskDetails> protectedDisks = null, string diskResized = null, string masterTargetId = null, int? sourceVmCpuCount = null, int? sourceVmRamSizeInMB = null, string osType = null, string vhdName = null, string osDiskId = null, IEnumerable<AzureVmDiskDetails> azureVmDiskDetails = null, string recoveryAzureVmName = null, string recoveryAzureVmSize = null, string recoveryAzureStorageAccount = null, string recoveryAzureLogStorageAccountId = null, IEnumerable<VmNicDetails> vmNics = null, string selectedRecoveryAzureNetworkId = null, string selectedTfoAzureNetworkId = null, string selectedSourceNicId = null, string discoveryType = null, string enableRdpOnTargetOption = null, IEnumerable<string> datastores = null, string targetVmId = null, string recoveryAzureResourceGroupId = null, string recoveryAvailabilitySetId = null, string targetAvailabilityZone = null, string targetProximityPlacementGroupId = null, string useManagedDisks = null, string licenseType = null, string sqlServerLicenseType = null, IEnumerable<HealthError> validationErrors = null, DateTimeOffset? lastRpoCalculatedOn = null, DateTimeOffset? lastUpdateReceivedOn = null, string replicaId = null, string osVersion = null, IEnumerable<InMageAzureV2ManagedDiskDetails> protectedManagedDisks = null, DateTimeOffset? lastRecoveryPointReceived = null, string firmwareType = null, string azureVmGeneration = null, bool? isAdditionalStatsAvailable = null, long? totalDataTransferred = null, string totalProgressHealth = null, IReadOnlyDictionary<string, string> targetVmTags = null, IReadOnlyDictionary<string, string> seedManagedDiskTags = null, IReadOnlyDictionary<string, string> targetManagedDiskTags = null, IReadOnlyDictionary<string, string> targetNicTags = null, IEnumerable<InMageAzureV2SwitchProviderBlockingErrorDetails> switchProviderBlockingErrorDetails = null, InMageAzureV2SwitchProviderDetails switchProviderDetails = null)
        {
            protectedDisks ??= new List<InMageAzureV2ProtectedDiskDetails>();
            azureVmDiskDetails ??= new List<AzureVmDiskDetails>();
            vmNics ??= new List<VmNicDetails>();
            datastores ??= new List<string>();
            validationErrors ??= new List<HealthError>();
            protectedManagedDisks ??= new List<InMageAzureV2ManagedDiskDetails>();
            targetVmTags ??= new Dictionary<string, string>();
            seedManagedDiskTags ??= new Dictionary<string, string>();
            targetManagedDiskTags ??= new Dictionary<string, string>();
            targetNicTags ??= new Dictionary<string, string>();
            switchProviderBlockingErrorDetails ??= new List<InMageAzureV2SwitchProviderBlockingErrorDetails>();

            return new InMageAzureV2ReplicationDetails("InMageAzureV2", infrastructureVmId, vCenterInfrastructureId, protectionStage, vmId, vmProtectionState, vmProtectionStateDescription, resyncProgressPercentage, rpoInSeconds, compressedDataRateInMB, uncompressedDataRateInMB, ipAddress, agentVersion, agentExpiryOn, isAgentUpdateRequired, isRebootAfterUpdateRequired, lastHeartbeat, processServerId, processServerName, multiVmGroupId, multiVmGroupName, multiVmSyncStatus, protectedDisks?.ToList(), diskResized, masterTargetId, sourceVmCpuCount, sourceVmRamSizeInMB, osType, vhdName, osDiskId, azureVmDiskDetails?.ToList(), recoveryAzureVmName, recoveryAzureVmSize, recoveryAzureStorageAccount, recoveryAzureLogStorageAccountId, vmNics?.ToList(), selectedRecoveryAzureNetworkId, selectedTfoAzureNetworkId, selectedSourceNicId, discoveryType, enableRdpOnTargetOption, datastores?.ToList(), targetVmId, recoveryAzureResourceGroupId, recoveryAvailabilitySetId, targetAvailabilityZone, targetProximityPlacementGroupId, useManagedDisks, licenseType, sqlServerLicenseType, validationErrors?.ToList(), lastRpoCalculatedOn, lastUpdateReceivedOn, replicaId, osVersion, protectedManagedDisks?.ToList(), lastRecoveryPointReceived, firmwareType, azureVmGeneration, isAdditionalStatsAvailable, totalDataTransferred, totalProgressHealth, targetVmTags, seedManagedDiskTags, targetManagedDiskTags, targetNicTags, switchProviderBlockingErrorDetails?.ToList(), switchProviderDetails);
        }

        /// <summary> Initializes a new instance of InMageAzureV2SwitchProviderBlockingErrorDetails. </summary>
        /// <param name="errorCode"> The error code. </param>
        /// <param name="errorMessage"> The error message. </param>
        /// <param name="possibleCauses"> The possible causes. </param>
        /// <param name="recommendedAction"> The recommended action. </param>
        /// <param name="errorMessageParameters"> The error message parameters. </param>
        /// <param name="errorTags"> The error tags. </param>
        /// <returns> A new <see cref="Models.InMageAzureV2SwitchProviderBlockingErrorDetails"/> instance for mocking. </returns>
        public static InMageAzureV2SwitchProviderBlockingErrorDetails InMageAzureV2SwitchProviderBlockingErrorDetails(string errorCode = null, string errorMessage = null, string possibleCauses = null, string recommendedAction = null, IReadOnlyDictionary<string, string> errorMessageParameters = null, IReadOnlyDictionary<string, string> errorTags = null)
        {
            errorMessageParameters ??= new Dictionary<string, string>();
            errorTags ??= new Dictionary<string, string>();

            return new InMageAzureV2SwitchProviderBlockingErrorDetails(errorCode, errorMessage, possibleCauses, recommendedAction, errorMessageParameters, errorTags);
        }

        /// <summary> Initializes a new instance of InMageAzureV2SwitchProviderDetails. </summary>
        /// <param name="targetVaultId"> The target vault Id. </param>
        /// <param name="targetResourceId"> The target resource Id. </param>
        /// <param name="targetFabricId"> The target fabric Id. </param>
        /// <param name="targetApplianceId"> The target appliance Id. </param>
        /// <returns> A new <see cref="Models.InMageAzureV2SwitchProviderDetails"/> instance for mocking. </returns>
        public static InMageAzureV2SwitchProviderDetails InMageAzureV2SwitchProviderDetails(string targetVaultId = null, string targetResourceId = null, string targetFabricId = null, string targetApplianceId = null)
        {
            return new InMageAzureV2SwitchProviderDetails(targetVaultId, targetResourceId, targetFabricId, targetApplianceId);
        }

        /// <summary> Initializes a new instance of InMageBasePolicyDetails. </summary>
        /// <param name="recoveryPointThresholdInMinutes"> The recovery point threshold in minutes. </param>
        /// <param name="recoveryPointHistory"> The duration in minutes until which the recovery points need to be stored. </param>
        /// <param name="appConsistentFrequencyInMinutes"> The app consistent snapshot frequency in minutes. </param>
        /// <param name="multiVmSyncStatus"> A value indicating whether multi-VM sync has to be enabled. </param>
        /// <returns> A new <see cref="Models.InMageBasePolicyDetails"/> instance for mocking. </returns>
        public static InMageBasePolicyDetails InMageBasePolicyDetails(int? recoveryPointThresholdInMinutes = null, int? recoveryPointHistory = null, int? appConsistentFrequencyInMinutes = null, string multiVmSyncStatus = null)
        {
            return new InMageBasePolicyDetails("InMageBasePolicyDetails", recoveryPointThresholdInMinutes, recoveryPointHistory, appConsistentFrequencyInMinutes, multiVmSyncStatus);
        }

        /// <summary> Initializes a new instance of InMageDiskDetails. </summary>
        /// <param name="diskId"> The disk Id. </param>
        /// <param name="diskName"> The disk name. </param>
        /// <param name="diskSizeInMB"> The disk size in MB. </param>
        /// <param name="diskType"> Whether disk is system disk or data disk. </param>
        /// <param name="diskConfiguration"> Whether disk is dynamic disk or basic disk. </param>
        /// <param name="volumeList"> Volumes of the disk. </param>
        /// <returns> A new <see cref="Models.InMageDiskDetails"/> instance for mocking. </returns>
        public static InMageDiskDetails InMageDiskDetails(string diskId = null, string diskName = null, string diskSizeInMB = null, string diskType = null, string diskConfiguration = null, IEnumerable<DiskVolumeDetails> volumeList = null)
        {
            volumeList ??= new List<DiskVolumeDetails>();

            return new InMageDiskDetails(diskId, diskName, diskSizeInMB, diskType, diskConfiguration, volumeList?.ToList());
        }

        /// <summary> Initializes a new instance of InMageFabricSwitchProviderBlockingErrorDetails. </summary>
        /// <param name="errorCode"> The error code. </param>
        /// <param name="errorMessage"> The error message. </param>
        /// <param name="possibleCauses"> The possible causes. </param>
        /// <param name="recommendedAction"> The recommended action. </param>
        /// <param name="errorMessageParameters"> The error message parameters. </param>
        /// <param name="errorTags"> The error tags. </param>
        /// <returns> A new <see cref="Models.InMageFabricSwitchProviderBlockingErrorDetails"/> instance for mocking. </returns>
        public static InMageFabricSwitchProviderBlockingErrorDetails InMageFabricSwitchProviderBlockingErrorDetails(string errorCode = null, string errorMessage = null, string possibleCauses = null, string recommendedAction = null, IReadOnlyDictionary<string, string> errorMessageParameters = null, IReadOnlyDictionary<string, string> errorTags = null)
        {
            errorMessageParameters ??= new Dictionary<string, string>();
            errorTags ??= new Dictionary<string, string>();

            return new InMageFabricSwitchProviderBlockingErrorDetails(errorCode, errorMessage, possibleCauses, recommendedAction, errorMessageParameters, errorTags);
        }

        /// <summary> Initializes a new instance of InMagePolicyDetails. </summary>
        /// <param name="recoveryPointThresholdInMinutes"> The recovery point threshold in minutes. </param>
        /// <param name="recoveryPointHistory"> The duration in minutes until which the recovery points need to be stored. </param>
        /// <param name="appConsistentFrequencyInMinutes"> The app consistent snapshot frequency in minutes. </param>
        /// <param name="multiVmSyncStatus"> A value indicating whether multi-VM sync has to be enabled. </param>
        /// <returns> A new <see cref="Models.InMagePolicyDetails"/> instance for mocking. </returns>
        public static InMagePolicyDetails InMagePolicyDetails(int? recoveryPointThresholdInMinutes = null, int? recoveryPointHistory = null, int? appConsistentFrequencyInMinutes = null, string multiVmSyncStatus = null)
        {
            return new InMagePolicyDetails("InMage", recoveryPointThresholdInMinutes, recoveryPointHistory, appConsistentFrequencyInMinutes, multiVmSyncStatus);
        }

        /// <summary> Initializes a new instance of InMageProtectedDiskDetails. </summary>
        /// <param name="diskId"> The disk id. </param>
        /// <param name="diskName"> The disk name. </param>
        /// <param name="protectionStage"> The protection stage. </param>
        /// <param name="healthErrorCode"> The health error code for the disk. </param>
        /// <param name="rpoInSeconds"> The RPO in seconds. </param>
        /// <param name="resyncRequired"> A value indicating whether resync is required for this disk. </param>
        /// <param name="resyncProgressPercentage"> The resync progress percentage. </param>
        /// <param name="resyncDurationInSeconds"> The resync duration in seconds. </param>
        /// <param name="diskCapacityInBytes"> The disk capacity in bytes. </param>
        /// <param name="fileSystemCapacityInBytes"> The file system capacity in bytes. </param>
        /// <param name="sourceDataInMB"> The source data transit in MB. </param>
        /// <param name="psDataInMB"> The PS data transit in MB. </param>
        /// <param name="targetDataInMB"> The target data transit in MB. </param>
        /// <param name="diskResized"> A value indicating whether disk is resized. </param>
        /// <param name="lastRpoCalculatedOn"> The last RPO calculated time. </param>
        /// <param name="resyncProcessedBytes"> The resync processed bytes. </param>
        /// <param name="resyncTotalTransferredBytes"> The resync total transferred bytes. </param>
        /// <param name="resyncLast15MinutesTransferredBytes"> The resync last 15 minutes transferred bytes. </param>
        /// <param name="resyncLastDataTransferTimeUTC"> The last data transfer time in UTC. </param>
        /// <param name="resyncStartOn"> The resync start time. </param>
        /// <param name="progressHealth"> The Progress Health. </param>
        /// <param name="progressStatus"> The Progress Status. </param>
        /// <returns> A new <see cref="Models.InMageProtectedDiskDetails"/> instance for mocking. </returns>
        public static InMageProtectedDiskDetails InMageProtectedDiskDetails(string diskId = null, string diskName = null, string protectionStage = null, string healthErrorCode = null, long? rpoInSeconds = null, string resyncRequired = null, int? resyncProgressPercentage = null, long? resyncDurationInSeconds = null, long? diskCapacityInBytes = null, long? fileSystemCapacityInBytes = null, double? sourceDataInMB = null, double? psDataInMB = null, double? targetDataInMB = null, string diskResized = null, DateTimeOffset? lastRpoCalculatedOn = null, long? resyncProcessedBytes = null, long? resyncTotalTransferredBytes = null, long? resyncLast15MinutesTransferredBytes = null, DateTimeOffset? resyncLastDataTransferTimeUTC = null, DateTimeOffset? resyncStartOn = null, string progressHealth = null, string progressStatus = null)
        {
            return new InMageProtectedDiskDetails(diskId, diskName, protectionStage, healthErrorCode, rpoInSeconds, resyncRequired, resyncProgressPercentage, resyncDurationInSeconds, diskCapacityInBytes, fileSystemCapacityInBytes, sourceDataInMB, psDataInMB, targetDataInMB, diskResized, lastRpoCalculatedOn, resyncProcessedBytes, resyncTotalTransferredBytes, resyncLast15MinutesTransferredBytes, resyncLastDataTransferTimeUTC, resyncStartOn, progressHealth, progressStatus);
        }

        /// <summary> Initializes a new instance of InMageRcmAgentUpgradeBlockingErrorDetails. </summary>
        /// <param name="errorCode"> The error code. </param>
        /// <param name="errorMessage"> The error message. </param>
        /// <param name="possibleCauses"> The possible causes. </param>
        /// <param name="recommendedAction"> The recommended action. </param>
        /// <param name="errorMessageParameters"> The error message parameters. </param>
        /// <param name="errorTags"> The error tags. </param>
        /// <returns> A new <see cref="Models.InMageRcmAgentUpgradeBlockingErrorDetails"/> instance for mocking. </returns>
        public static InMageRcmAgentUpgradeBlockingErrorDetails InMageRcmAgentUpgradeBlockingErrorDetails(string errorCode = null, string errorMessage = null, string possibleCauses = null, string recommendedAction = null, IReadOnlyDictionary<string, string> errorMessageParameters = null, IReadOnlyDictionary<string, string> errorTags = null)
        {
            errorMessageParameters ??= new Dictionary<string, string>();
            errorTags ??= new Dictionary<string, string>();

            return new InMageRcmAgentUpgradeBlockingErrorDetails(errorCode, errorMessage, possibleCauses, recommendedAction, errorMessageParameters, errorTags);
        }

        /// <summary> Initializes a new instance of InMageRcmApplianceDetails. </summary>
        /// <param name="id"> The appliance Id. </param>
        /// <param name="name"> The appliance name. </param>
        /// <param name="fabricArmId"> The fabric ARM Id. </param>
        /// <param name="processServer"> The process server. </param>
        /// <param name="rcmProxy"> The of RCM proxy. </param>
        /// <param name="pushInstaller"> The push installer. </param>
        /// <param name="replicationAgent"> The replication agent. </param>
        /// <param name="reprotectAgent"> The reprotect agent. </param>
        /// <param name="marsAgent"> The Mars agent. </param>
        /// <param name="dra"> The DRA. </param>
        /// <param name="switchProviderBlockingErrorDetails"> The switch provider blocking error information. </param>
        /// <returns> A new <see cref="Models.InMageRcmApplianceDetails"/> instance for mocking. </returns>
        public static InMageRcmApplianceDetails InMageRcmApplianceDetails(string id = null, string name = null, string fabricArmId = null, ProcessServerDetails processServer = null, RcmProxyDetails rcmProxy = null, PushInstallerDetails pushInstaller = null, ReplicationAgentDetails replicationAgent = null, ReprotectAgentDetails reprotectAgent = null, MarsAgentDetails marsAgent = null, DraDetails dra = null, IEnumerable<InMageRcmFabricSwitchProviderBlockingErrorDetails> switchProviderBlockingErrorDetails = null)
        {
            switchProviderBlockingErrorDetails ??= new List<InMageRcmFabricSwitchProviderBlockingErrorDetails>();

            return new InMageRcmApplianceDetails(id, name, fabricArmId, processServer, rcmProxy, pushInstaller, replicationAgent, reprotectAgent, marsAgent, dra, switchProviderBlockingErrorDetails?.ToList());
        }

        /// <summary> Initializes a new instance of ProcessServerDetails. </summary>
        /// <param name="id"> The process server Id. </param>
        /// <param name="name"> The process server name. </param>
        /// <param name="biosId"> The process server Bios Id. </param>
        /// <param name="fabricObjectId"> The fabric object Id. </param>
        /// <param name="fqdn"> The process server Fqdn. </param>
        /// <param name="ipAddresses"> The list of IP addresses for communicating with the RCM component. </param>
        /// <param name="version"> The version. </param>
        /// <param name="lastHeartbeatUtc"> The last heartbeat received from the process server. </param>
        /// <param name="totalMemoryInBytes"> The total memory. </param>
        /// <param name="availableMemoryInBytes"> The available memory. </param>
        /// <param name="usedMemoryInBytes"> The used memory. </param>
        /// <param name="memoryUsagePercentage"> The memory usage percentage. </param>
        /// <param name="totalSpaceInBytes"> The total disk space. </param>
        /// <param name="availableSpaceInBytes"> The available disk space. </param>
        /// <param name="usedSpaceInBytes"> The used disk space. </param>
        /// <param name="freeSpacePercentage"> The free disk space percentage. </param>
        /// <param name="throughputUploadPendingDataInBytes"> The uploading pending data in bytes. </param>
        /// <param name="throughputInBytes"> The throughput in bytes. </param>
        /// <param name="processorUsagePercentage"> The processor usage percentage. </param>
        /// <param name="throughputStatus"> The throughput status. </param>
        /// <param name="systemLoad"> The system load. </param>
        /// <param name="systemLoadStatus"> The system load status. </param>
        /// <param name="diskUsageStatus"> The disk usage status. </param>
        /// <param name="memoryUsageStatus"> The memory usage status. </param>
        /// <param name="processorUsageStatus"> The processor usage status. </param>
        /// <param name="health"> The health of the process server. </param>
        /// <param name="healthErrors"> The health errors. </param>
        /// <param name="protectedItemCount"> The protected item count. </param>
        /// <param name="historicHealth"> The historic health of the process server based on the health in last 24 hours. </param>
        /// <returns> A new <see cref="Models.ProcessServerDetails"/> instance for mocking. </returns>
        public static ProcessServerDetails ProcessServerDetails(string id = null, string name = null, string biosId = null, string fabricObjectId = null, string fqdn = null, IEnumerable<string> ipAddresses = null, string version = null, DateTimeOffset? lastHeartbeatUtc = null, long? totalMemoryInBytes = null, long? availableMemoryInBytes = null, long? usedMemoryInBytes = null, double? memoryUsagePercentage = null, long? totalSpaceInBytes = null, long? availableSpaceInBytes = null, long? usedSpaceInBytes = null, double? freeSpacePercentage = null, long? throughputUploadPendingDataInBytes = null, long? throughputInBytes = null, double? processorUsagePercentage = null, RcmComponentStatus? throughputStatus = null, long? systemLoad = null, RcmComponentStatus? systemLoadStatus = null, RcmComponentStatus? diskUsageStatus = null, RcmComponentStatus? memoryUsageStatus = null, RcmComponentStatus? processorUsageStatus = null, ProtectionHealth? health = null, IEnumerable<HealthError> healthErrors = null, int? protectedItemCount = null, ProtectionHealth? historicHealth = null)
        {
            ipAddresses ??= new List<string>();
            healthErrors ??= new List<HealthError>();

            return new ProcessServerDetails(id, name, biosId, fabricObjectId, fqdn, ipAddresses?.ToList(), version, lastHeartbeatUtc, totalMemoryInBytes, availableMemoryInBytes, usedMemoryInBytes, memoryUsagePercentage, totalSpaceInBytes, availableSpaceInBytes, usedSpaceInBytes, freeSpacePercentage, throughputUploadPendingDataInBytes, throughputInBytes, processorUsagePercentage, throughputStatus, systemLoad, systemLoadStatus, diskUsageStatus, memoryUsageStatus, processorUsageStatus, health, healthErrors?.ToList(), protectedItemCount, historicHealth);
        }

        /// <summary> Initializes a new instance of RcmProxyDetails. </summary>
        /// <param name="id"> The RCM proxy Id. </param>
        /// <param name="name"> The RCM proxy name. </param>
        /// <param name="biosId"> The RCM proxy Bios Id. </param>
        /// <param name="fabricObjectId"> The fabric object Id. </param>
        /// <param name="fqdn"> The RCM proxy Fqdn. </param>
        /// <param name="clientAuthenticationType"> The client authentication type. </param>
        /// <param name="version"> The version. </param>
        /// <param name="lastHeartbeatUtc"> The last heartbeat received from the RCM proxy. </param>
        /// <param name="health"> The health of the RCM proxy. </param>
        /// <param name="healthErrors"> The health errors. </param>
        /// <returns> A new <see cref="Models.RcmProxyDetails"/> instance for mocking. </returns>
        public static RcmProxyDetails RcmProxyDetails(string id = null, string name = null, string biosId = null, string fabricObjectId = null, string fqdn = null, string clientAuthenticationType = null, string version = null, DateTimeOffset? lastHeartbeatUtc = null, ProtectionHealth? health = null, IEnumerable<HealthError> healthErrors = null)
        {
            healthErrors ??= new List<HealthError>();

            return new RcmProxyDetails(id, name, biosId, fabricObjectId, fqdn, clientAuthenticationType, version, lastHeartbeatUtc, health, healthErrors?.ToList());
        }

        /// <summary> Initializes a new instance of PushInstallerDetails. </summary>
        /// <param name="id"> The push installer Id. </param>
        /// <param name="name"> The push installer name. </param>
        /// <param name="biosId"> The push installer Bios Id. </param>
        /// <param name="fabricObjectId"> The fabric object Id. </param>
        /// <param name="fqdn"> The push installer Fqdn. </param>
        /// <param name="version"> The version. </param>
        /// <param name="lastHeartbeatUtc"> The last heartbeat received from the push installer. </param>
        /// <param name="health"> The health of the push installer. </param>
        /// <param name="healthErrors"> The health errors. </param>
        /// <returns> A new <see cref="Models.PushInstallerDetails"/> instance for mocking. </returns>
        public static PushInstallerDetails PushInstallerDetails(string id = null, string name = null, string biosId = null, string fabricObjectId = null, string fqdn = null, string version = null, DateTimeOffset? lastHeartbeatUtc = null, ProtectionHealth? health = null, IEnumerable<HealthError> healthErrors = null)
        {
            healthErrors ??= new List<HealthError>();

            return new PushInstallerDetails(id, name, biosId, fabricObjectId, fqdn, version, lastHeartbeatUtc, health, healthErrors?.ToList());
        }

        /// <summary> Initializes a new instance of ReplicationAgentDetails. </summary>
        /// <param name="id"> The replication agent Id. </param>
        /// <param name="name"> The replication agent name. </param>
        /// <param name="biosId"> The replication agent Bios Id. </param>
        /// <param name="fabricObjectId"> The fabric object Id. </param>
        /// <param name="fqdn"> The replication agent Fqdn. </param>
        /// <param name="version"> The version. </param>
        /// <param name="lastHeartbeatUtc"> The last heartbeat received from the replication agent. </param>
        /// <param name="health"> The health of the replication agent. </param>
        /// <param name="healthErrors"> The health errors. </param>
        /// <returns> A new <see cref="Models.ReplicationAgentDetails"/> instance for mocking. </returns>
        public static ReplicationAgentDetails ReplicationAgentDetails(string id = null, string name = null, string biosId = null, string fabricObjectId = null, string fqdn = null, string version = null, DateTimeOffset? lastHeartbeatUtc = null, ProtectionHealth? health = null, IEnumerable<HealthError> healthErrors = null)
        {
            healthErrors ??= new List<HealthError>();

            return new ReplicationAgentDetails(id, name, biosId, fabricObjectId, fqdn, version, lastHeartbeatUtc, health, healthErrors?.ToList());
        }

        /// <summary> Initializes a new instance of ReprotectAgentDetails. </summary>
        /// <param name="id"> The reprotect agent Id. </param>
        /// <param name="name"> The reprotect agent name. </param>
        /// <param name="biosId"> The reprotect agent Bios Id. </param>
        /// <param name="fabricObjectId"> The fabric object Id. </param>
        /// <param name="fqdn"> The reprotect agent Fqdn. </param>
        /// <param name="version"> The version. </param>
        /// <param name="lastHeartbeatUtc"> The last heartbeat received from the reprotect agent. </param>
        /// <param name="health"> The health of the reprotect agent. </param>
        /// <param name="healthErrors"> The health errors. </param>
        /// <param name="protectedItemCount"> The protected item count. </param>
        /// <param name="accessibleDatastores"> The list of accessible datastores fetched from discovery. </param>
        /// <param name="vCenterId"> The Vcenter Id. </param>
        /// <param name="lastDiscoveryInUtc"> The last time when SDS information discovered in SRS. </param>
        /// <returns> A new <see cref="Models.ReprotectAgentDetails"/> instance for mocking. </returns>
        public static ReprotectAgentDetails ReprotectAgentDetails(string id = null, string name = null, string biosId = null, string fabricObjectId = null, string fqdn = null, string version = null, DateTimeOffset? lastHeartbeatUtc = null, ProtectionHealth? health = null, IEnumerable<HealthError> healthErrors = null, int? protectedItemCount = null, IEnumerable<string> accessibleDatastores = null, string vCenterId = null, DateTimeOffset? lastDiscoveryInUtc = null)
        {
            healthErrors ??= new List<HealthError>();
            accessibleDatastores ??= new List<string>();

            return new ReprotectAgentDetails(id, name, biosId, fabricObjectId, fqdn, version, lastHeartbeatUtc, health, healthErrors?.ToList(), protectedItemCount, accessibleDatastores?.ToList(), vCenterId, lastDiscoveryInUtc);
        }

        /// <summary> Initializes a new instance of MarsAgentDetails. </summary>
        /// <param name="id"> The Mars agent Id. </param>
        /// <param name="name"> The Mars agent name. </param>
        /// <param name="biosId"> The Mars agent Bios Id. </param>
        /// <param name="fabricObjectId"> The fabric object Id. </param>
        /// <param name="fqdn"> The Mars agent Fqdn. </param>
        /// <param name="version"> The version. </param>
        /// <param name="lastHeartbeatUtc"> The last heartbeat received from the Mars agent. </param>
        /// <param name="health"> The health of the Mars agent. </param>
        /// <param name="healthErrors"> The health errors. </param>
        /// <returns> A new <see cref="Models.MarsAgentDetails"/> instance for mocking. </returns>
        public static MarsAgentDetails MarsAgentDetails(string id = null, string name = null, string biosId = null, string fabricObjectId = null, string fqdn = null, string version = null, DateTimeOffset? lastHeartbeatUtc = null, ProtectionHealth? health = null, IEnumerable<HealthError> healthErrors = null)
        {
            healthErrors ??= new List<HealthError>();

            return new MarsAgentDetails(id, name, biosId, fabricObjectId, fqdn, version, lastHeartbeatUtc, health, healthErrors?.ToList());
        }

        /// <summary> Initializes a new instance of InMageRcmFabricSwitchProviderBlockingErrorDetails. </summary>
        /// <param name="errorCode"> The error code. </param>
        /// <param name="errorMessage"> The error message. </param>
        /// <param name="possibleCauses"> The possible causes. </param>
        /// <param name="recommendedAction"> The recommended action. </param>
        /// <param name="errorMessageParameters"> The error message parameters. </param>
        /// <param name="errorTags"> The error tags. </param>
        /// <returns> A new <see cref="Models.InMageRcmFabricSwitchProviderBlockingErrorDetails"/> instance for mocking. </returns>
        public static InMageRcmFabricSwitchProviderBlockingErrorDetails InMageRcmFabricSwitchProviderBlockingErrorDetails(string errorCode = null, string errorMessage = null, string possibleCauses = null, string recommendedAction = null, IReadOnlyDictionary<string, string> errorMessageParameters = null, IReadOnlyDictionary<string, string> errorTags = null)
        {
            errorMessageParameters ??= new Dictionary<string, string>();
            errorTags ??= new Dictionary<string, string>();

            return new InMageRcmFabricSwitchProviderBlockingErrorDetails(errorCode, errorMessage, possibleCauses, recommendedAction, errorMessageParameters, errorTags);
        }

        /// <summary> Initializes a new instance of InMageRcmApplianceSpecificDetails. </summary>
        /// <param name="appliances"> The list of appliances. </param>
        /// <returns> A new <see cref="Models.InMageRcmApplianceSpecificDetails"/> instance for mocking. </returns>
        public static InMageRcmApplianceSpecificDetails InMageRcmApplianceSpecificDetails(IEnumerable<InMageRcmApplianceDetails> appliances = null)
        {
            appliances ??= new List<InMageRcmApplianceDetails>();

            return new InMageRcmApplianceSpecificDetails("InMageRcm", appliances?.ToList());
        }

        /// <summary> Initializes a new instance of InMageRcmDiscoveredProtectedVmDetails. </summary>
        /// <param name="vCenterId"> The VCenter Id. </param>
        /// <param name="vCenterFqdn"> The VCenter fqdn. </param>
        /// <param name="datastores"> The list of datastores. </param>
        /// <param name="ipAddresses"> The list of IP addresses. </param>
        /// <param name="vmwareToolsStatus"> The VMware tools status. </param>
        /// <param name="powerStatus"> The VM power status. </param>
        /// <param name="vmFqdn"> The VM fqdn. </param>
        /// <param name="osName"> The VM&apos;s OS name. </param>
        /// <param name="createdTimestamp"> The SDS created timestamp. </param>
        /// <param name="updatedTimestamp"> The SDS updated timestamp. </param>
        /// <param name="isDeleted"> A value indicating whether the VM is deleted. </param>
        /// <param name="lastDiscoveryTimeInUtc"> The last time when SDS information discovered in SRS. </param>
        /// <returns> A new <see cref="Models.InMageRcmDiscoveredProtectedVmDetails"/> instance for mocking. </returns>
        public static InMageRcmDiscoveredProtectedVmDetails InMageRcmDiscoveredProtectedVmDetails(string vCenterId = null, string vCenterFqdn = null, IEnumerable<string> datastores = null, IEnumerable<string> ipAddresses = null, string vmwareToolsStatus = null, string powerStatus = null, string vmFqdn = null, string osName = null, DateTimeOffset? createdTimestamp = null, DateTimeOffset? updatedTimestamp = null, bool? isDeleted = null, DateTimeOffset? lastDiscoveryTimeInUtc = null)
        {
            datastores ??= new List<string>();
            ipAddresses ??= new List<string>();

            return new InMageRcmDiscoveredProtectedVmDetails(vCenterId, vCenterFqdn, datastores?.ToList(), ipAddresses?.ToList(), vmwareToolsStatus, powerStatus, vmFqdn, osName, createdTimestamp, updatedTimestamp, isDeleted, lastDiscoveryTimeInUtc);
        }

        /// <summary> Initializes a new instance of InMageRcmEventDetails. </summary>
        /// <param name="protectedItemName"> The protected item name. </param>
        /// <param name="vmName"> The protected item name. </param>
        /// <param name="latestAgentVersion"> The latest agent version. </param>
        /// <param name="jobId"> The job Id. </param>
        /// <param name="fabricName"> The fabric name. </param>
        /// <param name="applianceName"> The appliance name. </param>
        /// <param name="serverType"> The server type. </param>
        /// <param name="componentDisplayName"> The component display name. </param>
        /// <returns> A new <see cref="Models.InMageRcmEventDetails"/> instance for mocking. </returns>
        public static InMageRcmEventDetails InMageRcmEventDetails(string protectedItemName = null, string vmName = null, string latestAgentVersion = null, string jobId = null, string fabricName = null, string applianceName = null, string serverType = null, string componentDisplayName = null)
        {
            return new InMageRcmEventDetails("InMageRcm", protectedItemName, vmName, latestAgentVersion, jobId, fabricName, applianceName, serverType, componentDisplayName);
        }

        /// <summary> Initializes a new instance of InMageRcmFabricSpecificDetails. </summary>
        /// <param name="vmwareSiteId"> The ARM Id of the VMware site. </param>
        /// <param name="physicalSiteId"> The ARM Id of the physical site. </param>
        /// <param name="serviceEndpoint"> The service endpoint. </param>
        /// <param name="serviceResourceId"> The service resource Id. </param>
        /// <param name="serviceContainerId"> The service container Id. </param>
        /// <param name="dataPlaneUri"> The data plane Uri. </param>
        /// <param name="controlPlaneUri"> The control plane Uri. </param>
        /// <param name="sourceAgentIdentityDetails"> The source agent identity details. </param>
        /// <param name="processServers"> The list of process servers. </param>
        /// <param name="rcmProxies"> The list of RCM proxies. </param>
        /// <param name="pushInstallers"> The list of push installers. </param>
        /// <param name="replicationAgents"> The list of replication agents. </param>
        /// <param name="reprotectAgents"> The list of reprotect agents. </param>
        /// <param name="marsAgents"> The list of Mars agents. </param>
        /// <param name="dras"> The list of DRAs. </param>
        /// <param name="agentDetails"> The list of agent details. </param>
        /// <returns> A new <see cref="Models.InMageRcmFabricSpecificDetails"/> instance for mocking. </returns>
        public static InMageRcmFabricSpecificDetails InMageRcmFabricSpecificDetails(string vmwareSiteId = null, string physicalSiteId = null, string serviceEndpoint = null, string serviceResourceId = null, string serviceContainerId = null, Uri dataPlaneUri = null, Uri controlPlaneUri = null, IdentityProviderDetails sourceAgentIdentityDetails = null, IEnumerable<ProcessServerDetails> processServers = null, IEnumerable<RcmProxyDetails> rcmProxies = null, IEnumerable<PushInstallerDetails> pushInstallers = null, IEnumerable<ReplicationAgentDetails> replicationAgents = null, IEnumerable<ReprotectAgentDetails> reprotectAgents = null, IEnumerable<MarsAgentDetails> marsAgents = null, IEnumerable<DraDetails> dras = null, IEnumerable<AgentDetails> agentDetails = null)
        {
            processServers ??= new List<ProcessServerDetails>();
            rcmProxies ??= new List<RcmProxyDetails>();
            pushInstallers ??= new List<PushInstallerDetails>();
            replicationAgents ??= new List<ReplicationAgentDetails>();
            reprotectAgents ??= new List<ReprotectAgentDetails>();
            marsAgents ??= new List<MarsAgentDetails>();
            dras ??= new List<DraDetails>();
            agentDetails ??= new List<AgentDetails>();

            return new InMageRcmFabricSpecificDetails("InMageRcm", vmwareSiteId, physicalSiteId, serviceEndpoint, serviceResourceId, serviceContainerId, dataPlaneUri, controlPlaneUri, sourceAgentIdentityDetails, processServers?.ToList(), rcmProxies?.ToList(), pushInstallers?.ToList(), replicationAgents?.ToList(), reprotectAgents?.ToList(), marsAgents?.ToList(), dras?.ToList(), agentDetails?.ToList());
        }

        /// <summary> Initializes a new instance of InMageRcmFailbackDiscoveredProtectedVmDetails. </summary>
        /// <param name="vCenterId"> The VCenter Id. </param>
        /// <param name="vCenterFqdn"> The VCenter fqdn. </param>
        /// <param name="datastores"> The list of datastores. </param>
        /// <param name="ipAddresses"> The list of IP addresses. </param>
        /// <param name="vmwareToolsStatus"> The VMware tools status. </param>
        /// <param name="powerStatus"> The VM power status. </param>
        /// <param name="vmFqdn"> The VM fqdn. </param>
        /// <param name="osName"> The VM&apos;s OS name. </param>
        /// <param name="createdTimestamp"> The SDS created timestamp. </param>
        /// <param name="updatedTimestamp"> The SDS updated timestamp. </param>
        /// <param name="isDeleted"> A value indicating whether the VM is deleted. </param>
        /// <param name="lastDiscoveryTimeInUtc"> The last time when SDS information discovered in SRS. </param>
        /// <returns> A new <see cref="Models.InMageRcmFailbackDiscoveredProtectedVmDetails"/> instance for mocking. </returns>
        public static InMageRcmFailbackDiscoveredProtectedVmDetails InMageRcmFailbackDiscoveredProtectedVmDetails(string vCenterId = null, string vCenterFqdn = null, IEnumerable<string> datastores = null, IEnumerable<string> ipAddresses = null, string vmwareToolsStatus = null, string powerStatus = null, string vmFqdn = null, string osName = null, DateTimeOffset? createdTimestamp = null, DateTimeOffset? updatedTimestamp = null, bool? isDeleted = null, DateTimeOffset? lastDiscoveryTimeInUtc = null)
        {
            datastores ??= new List<string>();
            ipAddresses ??= new List<string>();

            return new InMageRcmFailbackDiscoveredProtectedVmDetails(vCenterId, vCenterFqdn, datastores?.ToList(), ipAddresses?.ToList(), vmwareToolsStatus, powerStatus, vmFqdn, osName, createdTimestamp, updatedTimestamp, isDeleted, lastDiscoveryTimeInUtc);
        }

        /// <summary> Initializes a new instance of InMageRcmFailbackEventDetails. </summary>
        /// <param name="protectedItemName"> The protected item name. </param>
        /// <param name="vmName"> The protected item name. </param>
        /// <param name="applianceName"> The appliance name. </param>
        /// <param name="serverType"> The server type. </param>
        /// <param name="componentDisplayName"> The component display name. </param>
        /// <returns> A new <see cref="Models.InMageRcmFailbackEventDetails"/> instance for mocking. </returns>
        public static InMageRcmFailbackEventDetails InMageRcmFailbackEventDetails(string protectedItemName = null, string vmName = null, string applianceName = null, string serverType = null, string componentDisplayName = null)
        {
            return new InMageRcmFailbackEventDetails("InMageRcmFailback", protectedItemName, vmName, applianceName, serverType, componentDisplayName);
        }

        /// <summary> Initializes a new instance of InMageRcmFailbackMobilityAgentDetails. </summary>
        /// <param name="version"> The agent version. </param>
        /// <param name="latestVersion"> The latest agent version available. </param>
        /// <param name="driverVersion"> The driver version. </param>
        /// <param name="latestUpgradableVersionWithoutReboot"> The latest upgradeable version available without reboot. </param>
        /// <param name="agentVersionExpiryOn"> The agent version expiry date. </param>
        /// <param name="driverVersionExpiryOn"> The driver version expiry date. </param>
        /// <param name="lastHeartbeatUtc"> The time of the last heartbeat received from the agent. </param>
        /// <param name="reasonsBlockingUpgrade"> The whether update is possible or not. </param>
        /// <param name="isUpgradeable"> A value indicating whether agent is upgradeable or not. </param>
        /// <returns> A new <see cref="Models.InMageRcmFailbackMobilityAgentDetails"/> instance for mocking. </returns>
        public static InMageRcmFailbackMobilityAgentDetails InMageRcmFailbackMobilityAgentDetails(string version = null, string latestVersion = null, string driverVersion = null, string latestUpgradableVersionWithoutReboot = null, DateTimeOffset? agentVersionExpiryOn = null, DateTimeOffset? driverVersionExpiryOn = null, DateTimeOffset? lastHeartbeatUtc = null, IEnumerable<AgentUpgradeBlockedReason> reasonsBlockingUpgrade = null, string isUpgradeable = null)
        {
            reasonsBlockingUpgrade ??= new List<AgentUpgradeBlockedReason>();

            return new InMageRcmFailbackMobilityAgentDetails(version, latestVersion, driverVersion, latestUpgradableVersionWithoutReboot, agentVersionExpiryOn, driverVersionExpiryOn, lastHeartbeatUtc, reasonsBlockingUpgrade?.ToList(), isUpgradeable);
        }

        /// <summary> Initializes a new instance of InMageRcmFailbackNicDetails. </summary>
        /// <param name="macAddress"> The mac address. </param>
        /// <param name="networkName"> The network name. </param>
        /// <param name="adapterType"> The adapter type. </param>
        /// <param name="sourceIPAddress"> The IP address. </param>
        /// <returns> A new <see cref="Models.InMageRcmFailbackNicDetails"/> instance for mocking. </returns>
        public static InMageRcmFailbackNicDetails InMageRcmFailbackNicDetails(string macAddress = null, string networkName = null, string adapterType = null, string sourceIPAddress = null)
        {
            return new InMageRcmFailbackNicDetails(macAddress, networkName, adapterType, sourceIPAddress);
        }

        /// <summary> Initializes a new instance of InMageRcmFailbackPolicyDetails. </summary>
        /// <param name="appConsistentFrequencyInMinutes"> The app consistent snapshot frequency in minutes. </param>
        /// <param name="crashConsistentFrequencyInMinutes"> The crash consistent snapshot frequency in minutes. </param>
        /// <returns> A new <see cref="Models.InMageRcmFailbackPolicyDetails"/> instance for mocking. </returns>
        public static InMageRcmFailbackPolicyDetails InMageRcmFailbackPolicyDetails(int? appConsistentFrequencyInMinutes = null, int? crashConsistentFrequencyInMinutes = null)
        {
            return new InMageRcmFailbackPolicyDetails("InMageRcmFailback", appConsistentFrequencyInMinutes, crashConsistentFrequencyInMinutes);
        }

        /// <summary> Initializes a new instance of InMageRcmFailbackProtectedDiskDetails. </summary>
        /// <param name="diskId"> The disk Id (reported by source agent). </param>
        /// <param name="diskName"> The disk name. </param>
        /// <param name="isOSDisk"> A value indicating whether the disk is the OS disk. </param>
        /// <param name="capacityInBytes"> The disk capacity in bytes. </param>
        /// <param name="diskUuid"> The disk Uuid (reported by vCenter). </param>
        /// <param name="dataPendingInLogDataStoreInMB"> The data pending in log data store in MB. </param>
        /// <param name="dataPendingAtSourceAgentInMB"> The data pending at source agent in MB. </param>
        /// <param name="isInitialReplicationComplete"> A value indicating whether initial replication is complete or not. </param>
        /// <param name="irDetails"> The initial replication details. </param>
        /// <param name="resyncDetails"> The resync details. </param>
        /// <param name="lastSyncOn"> The last sync time. </param>
        /// <returns> A new <see cref="Models.InMageRcmFailbackProtectedDiskDetails"/> instance for mocking. </returns>
        public static InMageRcmFailbackProtectedDiskDetails InMageRcmFailbackProtectedDiskDetails(string diskId = null, string diskName = null, string isOSDisk = null, long? capacityInBytes = null, string diskUuid = null, double? dataPendingInLogDataStoreInMB = null, double? dataPendingAtSourceAgentInMB = null, string isInitialReplicationComplete = null, InMageRcmFailbackSyncDetails irDetails = null, InMageRcmFailbackSyncDetails resyncDetails = null, DateTimeOffset? lastSyncOn = null)
        {
            return new InMageRcmFailbackProtectedDiskDetails(diskId, diskName, isOSDisk, capacityInBytes, diskUuid, dataPendingInLogDataStoreInMB, dataPendingAtSourceAgentInMB, isInitialReplicationComplete, irDetails, resyncDetails, lastSyncOn);
        }

        /// <summary> Initializes a new instance of InMageRcmFailbackSyncDetails. </summary>
        /// <param name="progressHealth"> The progress health. </param>
        /// <param name="transferredBytes"> The transferred bytes from source VM to azure for the disk. </param>
        /// <param name="last15MinutesTransferredBytes"> The bytes transferred in last 15 minutes from source VM to target. </param>
        /// <param name="lastDataTransferTimeUtc"> The time of the last data transfer from source VM to target. </param>
        /// <param name="processedBytes"> The total processed bytes. This includes bytes that are transferred from source VM to target and matched bytes. </param>
        /// <param name="startTime"> The start time. </param>
        /// <param name="lastRefreshTime"> The last refresh time. </param>
        /// <param name="progressPercentage"> Progress in percentage. Progress percentage is calculated based on processed bytes. </param>
        /// <returns> A new <see cref="Models.InMageRcmFailbackSyncDetails"/> instance for mocking. </returns>
        public static InMageRcmFailbackSyncDetails InMageRcmFailbackSyncDetails(DiskReplicationProgressHealth? progressHealth = null, long? transferredBytes = null, long? last15MinutesTransferredBytes = null, string lastDataTransferTimeUtc = null, long? processedBytes = null, string startTime = null, string lastRefreshTime = null, int? progressPercentage = null)
        {
            return new InMageRcmFailbackSyncDetails(progressHealth, transferredBytes, last15MinutesTransferredBytes, lastDataTransferTimeUtc, processedBytes, startTime, lastRefreshTime, progressPercentage);
        }

        /// <summary> Initializes a new instance of InMageRcmFailbackReplicationDetails. </summary>
        /// <param name="internalIdentifier"> The virtual machine internal identifier. </param>
        /// <param name="azureVirtualMachineId"> The ARM Id of the azure VM. </param>
        /// <param name="multiVmGroupName"> The multi VM group name. </param>
        /// <param name="reprotectAgentId"> The reprotect agent Id. </param>
        /// <param name="reprotectAgentName"> The reprotect agent name. </param>
        /// <param name="osType"> The type of the OS on the VM. </param>
        /// <param name="logStorageAccountId"> The log storage account ARM Id. </param>
        /// <param name="targetVCenterId"> The target vCenter Id. </param>
        /// <param name="targetDataStoreName"> The target datastore name. </param>
        /// <param name="targetVmName"> The target VM name. </param>
        /// <param name="initialReplicationProgressPercentage"> The initial replication progress percentage. </param>
        /// <param name="initialReplicationProcessedBytes"> The initial replication processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM. </param>
        /// <param name="initialReplicationTransferredBytes"> The initial replication transferred bytes from source VM to target for all selected disks on source VM. </param>
        /// <param name="initialReplicationProgressHealth"> The initial replication progress health. </param>
        /// <param name="resyncProgressPercentage"> The resync progress percentage. </param>
        /// <param name="resyncProcessedBytes"> The resync processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM. </param>
        /// <param name="resyncTransferredBytes"> The resync transferred bytes from source VM to target for all selected disks on source VM. </param>
        /// <param name="resyncProgressHealth"> The resync progress health. </param>
        /// <param name="resyncRequired"> A value indicating whether resync is required. </param>
        /// <param name="resyncState"> The resync state. </param>
        /// <param name="protectedDisks"> The list of protected disks. </param>
        /// <param name="mobilityAgentDetails"> The mobility agent information. </param>
        /// <param name="vmNics"> The network details. </param>
        /// <param name="lastPlannedFailoverStartOn"> The last planned failover start time. </param>
        /// <param name="lastPlannedFailoverStatus"> The last planned failover status. </param>
        /// <param name="discoveredVmDetails"> The discovered VM information. </param>
        /// <param name="lastUsedPolicyId"> The policy Id used by the forward replication. </param>
        /// <param name="lastUsedPolicyFriendlyName"> The policy friendly name used by the forward replication. </param>
        /// <param name="isAgentRegistrationSuccessfulAfterFailover"> A value indicating whether agent registration was successful after failover. </param>
        /// <returns> A new <see cref="Models.InMageRcmFailbackReplicationDetails"/> instance for mocking. </returns>
        public static InMageRcmFailbackReplicationDetails InMageRcmFailbackReplicationDetails(string internalIdentifier = null, string azureVirtualMachineId = null, string multiVmGroupName = null, string reprotectAgentId = null, string reprotectAgentName = null, string osType = null, string logStorageAccountId = null, string targetVCenterId = null, string targetDataStoreName = null, string targetVmName = null, int? initialReplicationProgressPercentage = null, long? initialReplicationProcessedBytes = null, long? initialReplicationTransferredBytes = null, VmReplicationProgressHealth? initialReplicationProgressHealth = null, int? resyncProgressPercentage = null, long? resyncProcessedBytes = null, long? resyncTransferredBytes = null, VmReplicationProgressHealth? resyncProgressHealth = null, string resyncRequired = null, ResyncState? resyncState = null, IEnumerable<InMageRcmFailbackProtectedDiskDetails> protectedDisks = null, InMageRcmFailbackMobilityAgentDetails mobilityAgentDetails = null, IEnumerable<InMageRcmFailbackNicDetails> vmNics = null, DateTimeOffset? lastPlannedFailoverStartOn = null, PlannedFailoverStatus? lastPlannedFailoverStatus = null, InMageRcmFailbackDiscoveredProtectedVmDetails discoveredVmDetails = null, string lastUsedPolicyId = null, string lastUsedPolicyFriendlyName = null, bool? isAgentRegistrationSuccessfulAfterFailover = null)
        {
            protectedDisks ??= new List<InMageRcmFailbackProtectedDiskDetails>();
            vmNics ??= new List<InMageRcmFailbackNicDetails>();

            return new InMageRcmFailbackReplicationDetails("InMageRcmFailback", internalIdentifier, azureVirtualMachineId, multiVmGroupName, reprotectAgentId, reprotectAgentName, osType, logStorageAccountId, targetVCenterId, targetDataStoreName, targetVmName, initialReplicationProgressPercentage, initialReplicationProcessedBytes, initialReplicationTransferredBytes, initialReplicationProgressHealth, resyncProgressPercentage, resyncProcessedBytes, resyncTransferredBytes, resyncProgressHealth, resyncRequired, resyncState, protectedDisks?.ToList(), mobilityAgentDetails, vmNics?.ToList(), lastPlannedFailoverStartOn, lastPlannedFailoverStatus, discoveredVmDetails, lastUsedPolicyId, lastUsedPolicyFriendlyName, isAgentRegistrationSuccessfulAfterFailover);
        }

        /// <summary> Initializes a new instance of InMageRcmLastAgentUpgradeErrorDetails. </summary>
        /// <param name="errorCode"> The error code. </param>
        /// <param name="errorMessage"> The error message. </param>
        /// <param name="possibleCauses"> The possible causes. </param>
        /// <param name="recommendedAction"> The recommended action. </param>
        /// <param name="errorMessageParameters"> The error message parameters. </param>
        /// <param name="errorTags"> The error tags. </param>
        /// <returns> A new <see cref="Models.InMageRcmLastAgentUpgradeErrorDetails"/> instance for mocking. </returns>
        public static InMageRcmLastAgentUpgradeErrorDetails InMageRcmLastAgentUpgradeErrorDetails(string errorCode = null, string errorMessage = null, string possibleCauses = null, string recommendedAction = null, IReadOnlyDictionary<string, string> errorMessageParameters = null, IReadOnlyDictionary<string, string> errorTags = null)
        {
            errorMessageParameters ??= new Dictionary<string, string>();
            errorTags ??= new Dictionary<string, string>();

            return new InMageRcmLastAgentUpgradeErrorDetails(errorCode, errorMessage, possibleCauses, recommendedAction, errorMessageParameters, errorTags);
        }

        /// <summary> Initializes a new instance of InMageRcmMobilityAgentDetails. </summary>
        /// <param name="version"> The agent version. </param>
        /// <param name="latestVersion"> The latest agent version available. </param>
        /// <param name="latestAgentReleaseDate"> The latest agent version release date. </param>
        /// <param name="driverVersion"> The driver version. </param>
        /// <param name="latestUpgradableVersionWithoutReboot"> The latest upgradeable version available without reboot. </param>
        /// <param name="agentVersionExpiryOn"> The agent version expiry date. </param>
        /// <param name="driverVersionExpiryOn"> The driver version expiry date. </param>
        /// <param name="lastHeartbeatUtc"> The time of the last heartbeat received from the agent. </param>
        /// <param name="reasonsBlockingUpgrade"> The whether update is possible or not. </param>
        /// <param name="isUpgradeable"> A value indicating whether agent is upgradeable or not. </param>
        /// <returns> A new <see cref="Models.InMageRcmMobilityAgentDetails"/> instance for mocking. </returns>
        public static InMageRcmMobilityAgentDetails InMageRcmMobilityAgentDetails(string version = null, string latestVersion = null, string latestAgentReleaseDate = null, string driverVersion = null, string latestUpgradableVersionWithoutReboot = null, DateTimeOffset? agentVersionExpiryOn = null, DateTimeOffset? driverVersionExpiryOn = null, DateTimeOffset? lastHeartbeatUtc = null, IEnumerable<AgentUpgradeBlockedReason> reasonsBlockingUpgrade = null, string isUpgradeable = null)
        {
            reasonsBlockingUpgrade ??= new List<AgentUpgradeBlockedReason>();

            return new InMageRcmMobilityAgentDetails(version, latestVersion, latestAgentReleaseDate, driverVersion, latestUpgradableVersionWithoutReboot, agentVersionExpiryOn, driverVersionExpiryOn, lastHeartbeatUtc, reasonsBlockingUpgrade?.ToList(), isUpgradeable);
        }

        /// <summary> Initializes a new instance of InMageRcmNicDetails. </summary>
        /// <param name="nicId"> The NIC Id. </param>
        /// <param name="isPrimaryNic"> A value indicating whether this is the primary NIC. </param>
        /// <param name="isSelectedForFailover"> A value indicating whether this NIC is selected for failover. </param>
        /// <param name="sourceIPAddress"> The source IP address. </param>
        /// <param name="sourceIPAddressType"> The source IP address type. </param>
        /// <param name="sourceNetworkId"> Source network Id. </param>
        /// <param name="sourceSubnetName"> Source subnet name. </param>
        /// <param name="targetIPAddress"> The target IP address. </param>
        /// <param name="targetIPAddressType"> The target IP address type. </param>
        /// <param name="targetSubnetName"> Target subnet name. </param>
        /// <param name="testSubnetName"> Test subnet name. </param>
        /// <param name="testIPAddress"> The test IP address. </param>
        /// <param name="testIPAddressType"> The test IP address type. </param>
        /// <returns> A new <see cref="Models.InMageRcmNicDetails"/> instance for mocking. </returns>
        public static InMageRcmNicDetails InMageRcmNicDetails(string nicId = null, string isPrimaryNic = null, string isSelectedForFailover = null, string sourceIPAddress = null, EthernetAddressType? sourceIPAddressType = null, string sourceNetworkId = null, string sourceSubnetName = null, string targetIPAddress = null, EthernetAddressType? targetIPAddressType = null, string targetSubnetName = null, string testSubnetName = null, string testIPAddress = null, EthernetAddressType? testIPAddressType = null)
        {
            return new InMageRcmNicDetails(nicId, isPrimaryNic, isSelectedForFailover, sourceIPAddress, sourceIPAddressType, sourceNetworkId, sourceSubnetName, targetIPAddress, targetIPAddressType, targetSubnetName, testSubnetName, testIPAddress, testIPAddressType);
        }

        /// <summary> Initializes a new instance of InMageRcmPolicyDetails. </summary>
        /// <param name="recoveryPointHistoryInMinutes"> The duration in minutes until which the recovery points need to be stored. </param>
        /// <param name="appConsistentFrequencyInMinutes"> The app consistent snapshot frequency in minutes. </param>
        /// <param name="crashConsistentFrequencyInMinutes"> The crash consistent snapshot frequency in minutes. </param>
        /// <param name="enableMultiVmSync"> A value indicating whether multi-VM sync has to be enabled. </param>
        /// <returns> A new <see cref="Models.InMageRcmPolicyDetails"/> instance for mocking. </returns>
        public static InMageRcmPolicyDetails InMageRcmPolicyDetails(int? recoveryPointHistoryInMinutes = null, int? appConsistentFrequencyInMinutes = null, int? crashConsistentFrequencyInMinutes = null, string enableMultiVmSync = null)
        {
            return new InMageRcmPolicyDetails("InMageRcm", recoveryPointHistoryInMinutes, appConsistentFrequencyInMinutes, crashConsistentFrequencyInMinutes, enableMultiVmSync);
        }

        /// <summary> Initializes a new instance of InMageRcmProtectedDiskDetails. </summary>
        /// <param name="diskId"> The disk Id. </param>
        /// <param name="diskName"> The disk name. </param>
        /// <param name="isOSDisk"> A value indicating whether the disk is the OS disk. </param>
        /// <param name="capacityInBytes"> The disk capacity in bytes. </param>
        /// <param name="logStorageAccountId"> The log storage account ARM Id. </param>
        /// <param name="diskEncryptionSetId"> The DiskEncryptionSet ARM Id. </param>
        /// <param name="seedManagedDiskId"> The ARM Id of the seed managed disk. </param>
        /// <param name="seedBlobUri"> The uri of the seed blob. </param>
        /// <param name="targetManagedDiskId"> The ARM Id of the target managed disk. </param>
        /// <param name="diskType"> The disk type. </param>
        /// <param name="dataPendingInLogDataStoreInMB"> The data pending in log data store in MB. </param>
        /// <param name="dataPendingAtSourceAgentInMB"> The data pending at source agent in MB. </param>
        /// <param name="isInitialReplicationComplete"> A value indicating whether initial replication is complete or not. </param>
        /// <param name="irDetails"> The initial replication details. </param>
        /// <param name="resyncDetails"> The resync details. </param>
        /// <returns> A new <see cref="Models.InMageRcmProtectedDiskDetails"/> instance for mocking. </returns>
        public static InMageRcmProtectedDiskDetails InMageRcmProtectedDiskDetails(string diskId = null, string diskName = null, string isOSDisk = null, long? capacityInBytes = null, string logStorageAccountId = null, string diskEncryptionSetId = null, string seedManagedDiskId = null, Uri seedBlobUri = null, string targetManagedDiskId = null, DiskAccountType? diskType = null, double? dataPendingInLogDataStoreInMB = null, double? dataPendingAtSourceAgentInMB = null, string isInitialReplicationComplete = null, InMageRcmSyncDetails irDetails = null, InMageRcmSyncDetails resyncDetails = null)
        {
            return new InMageRcmProtectedDiskDetails(diskId, diskName, isOSDisk, capacityInBytes, logStorageAccountId, diskEncryptionSetId, seedManagedDiskId, seedBlobUri, targetManagedDiskId, diskType, dataPendingInLogDataStoreInMB, dataPendingAtSourceAgentInMB, isInitialReplicationComplete, irDetails, resyncDetails);
        }

        /// <summary> Initializes a new instance of InMageRcmSyncDetails. </summary>
        /// <param name="progressHealth"> The progress health. </param>
        /// <param name="transferredBytes"> The transferred bytes from source VM to azure for the disk. </param>
        /// <param name="last15MinutesTransferredBytes"> The bytes transferred in last 15 minutes from source VM to azure. </param>
        /// <param name="lastDataTransferTimeUtc"> The time of the last data transfer from source VM to azure. </param>
        /// <param name="processedBytes"> The total processed bytes. This includes bytes that are transferred from source VM to azure and matched bytes. </param>
        /// <param name="startTime"> The start time. </param>
        /// <param name="lastRefreshTime"> The last refresh time. </param>
        /// <param name="progressPercentage"> Progress in percentage. Progress percentage is calculated based on processed bytes. </param>
        /// <returns> A new <see cref="Models.InMageRcmSyncDetails"/> instance for mocking. </returns>
        public static InMageRcmSyncDetails InMageRcmSyncDetails(DiskReplicationProgressHealth? progressHealth = null, long? transferredBytes = null, long? last15MinutesTransferredBytes = null, string lastDataTransferTimeUtc = null, long? processedBytes = null, string startTime = null, string lastRefreshTime = null, int? progressPercentage = null)
        {
            return new InMageRcmSyncDetails(progressHealth, transferredBytes, last15MinutesTransferredBytes, lastDataTransferTimeUtc, processedBytes, startTime, lastRefreshTime, progressPercentage);
        }

        /// <summary> Initializes a new instance of InMageRcmProtectionContainerMappingDetails. </summary>
        /// <param name="enableAgentAutoUpgrade"> A value indicating whether the flag for enable agent auto upgrade. </param>
        /// <returns> A new <see cref="Models.InMageRcmProtectionContainerMappingDetails"/> instance for mocking. </returns>
        public static InMageRcmProtectionContainerMappingDetails InMageRcmProtectionContainerMappingDetails(string enableAgentAutoUpgrade = null)
        {
            return new InMageRcmProtectionContainerMappingDetails("InMageRcm", enableAgentAutoUpgrade);
        }

        /// <summary> Initializes a new instance of InMageRcmRecoveryPointDetails. </summary>
        /// <param name="isMultiVmSyncPoint"> A value indicating whether the recovery point is multi VM consistent. </param>
        /// <returns> A new <see cref="Models.InMageRcmRecoveryPointDetails"/> instance for mocking. </returns>
        public static InMageRcmRecoveryPointDetails InMageRcmRecoveryPointDetails(string isMultiVmSyncPoint = null)
        {
            return new InMageRcmRecoveryPointDetails("InMageRcm", isMultiVmSyncPoint);
        }

        /// <summary> Initializes a new instance of InMageRcmReplicationDetails. </summary>
        /// <param name="internalIdentifier"> The virtual machine internal identifier. </param>
        /// <param name="fabricDiscoveryMachineId"> The ARM Id of the discovered VM. </param>
        /// <param name="multiVmGroupName"> The multi VM group name. </param>
        /// <param name="discoveryType"> The type of the discovered VM. </param>
        /// <param name="processServerId"> The process server Id. </param>
        /// <param name="processorCoreCount"> The processor core count. </param>
        /// <param name="allocatedMemoryInMB"> The allocated memory in MB. </param>
        /// <param name="processServerName"> The process server name. </param>
        /// <param name="runAsAccountId"> The run-as account Id. </param>
        /// <param name="osType"> The type of the OS on the VM. </param>
        /// <param name="firmwareType"> The firmware type. </param>
        /// <param name="primaryNicIPAddress"> The IP address of the primary network interface. </param>
        /// <param name="targetGeneration"> The target generation. </param>
        /// <param name="licenseType"> License Type of the VM to be used. </param>
        /// <param name="storageAccountId"> The replication storage account ARM Id. This is applicable only for the blob based replication test hook. </param>
        /// <param name="targetVmName"> Target VM name. </param>
        /// <param name="targetVmSize"> The target VM size. </param>
        /// <param name="targetResourceGroupId"> The target resource group Id. </param>
        /// <param name="targetLocation"> The target location. </param>
        /// <param name="targetAvailabilitySetId"> The target availability set Id. </param>
        /// <param name="targetAvailabilityZone"> The target availability zone. </param>
        /// <param name="targetProximityPlacementGroupId"> The target proximity placement group Id. </param>
        /// <param name="targetBootDiagnosticsStorageAccountId"> The target boot diagnostics storage account ARM Id. </param>
        /// <param name="targetNetworkId"> The target network Id. </param>
        /// <param name="testNetworkId"> The test network Id. </param>
        /// <param name="failoverRecoveryPointId"> The recovery point Id to which the VM was failed over. </param>
        /// <param name="lastRecoveryPointReceived"> The last recovery point received time. </param>
        /// <param name="lastRpoInSeconds"> The last recovery point objective value. </param>
        /// <param name="lastRpoCalculatedOn"> The last recovery point objective calculated time. </param>
        /// <param name="lastRecoveryPointId"> The last recovery point Id. </param>
        /// <param name="initialReplicationProgressPercentage"> The initial replication progress percentage. This is calculated based on total bytes processed for all disks in the source VM. </param>
        /// <param name="initialReplicationProcessedBytes"> The initial replication processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM. </param>
        /// <param name="initialReplicationTransferredBytes"> The initial replication transferred bytes from source VM to azure for all selected disks on source VM. </param>
        /// <param name="initialReplicationProgressHealth"> The initial replication progress health. </param>
        /// <param name="resyncProgressPercentage"> The resync progress percentage. This is calculated based on total bytes processed for all disks in the source VM. </param>
        /// <param name="resyncProcessedBytes"> The resync processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM. </param>
        /// <param name="resyncTransferredBytes"> The resync transferred bytes from source VM to azure for all selected disks on source VM. </param>
        /// <param name="resyncProgressHealth"> The resync progress health. </param>
        /// <param name="resyncRequired"> A value indicating whether resync is required. </param>
        /// <param name="resyncState"> The resync state. </param>
        /// <param name="agentUpgradeState"> The agent auto upgrade state. </param>
        /// <param name="lastAgentUpgradeType"> The last agent upgrade type. </param>
        /// <param name="agentUpgradeJobId"> The agent upgrade job Id. </param>
        /// <param name="agentUpgradeAttemptToVersion"> The agent version to which last agent upgrade was attempted. </param>
        /// <param name="protectedDisks"> The list of protected disks. </param>
        /// <param name="isLastUpgradeSuccessful"> A value indicating whether last agent upgrade was successful or not. </param>
        /// <param name="isAgentRegistrationSuccessfulAfterFailover"> A value indicating whether agent registration was successful after failover. </param>
        /// <param name="mobilityAgentDetails"> The mobility agent information. </param>
        /// <param name="lastAgentUpgradeErrorDetails"> The last agent upgrade error information. </param>
        /// <param name="agentUpgradeBlockingErrorDetails"> The agent upgrade blocking error information. </param>
        /// <param name="vmNics"> The network details. </param>
        /// <param name="discoveredVmDetails"> The discovered VM details. </param>
        /// <returns> A new <see cref="Models.InMageRcmReplicationDetails"/> instance for mocking. </returns>
        public static InMageRcmReplicationDetails InMageRcmReplicationDetails(string internalIdentifier = null, string fabricDiscoveryMachineId = null, string multiVmGroupName = null, string discoveryType = null, string processServerId = null, int? processorCoreCount = null, double? allocatedMemoryInMB = null, string processServerName = null, string runAsAccountId = null, string osType = null, string firmwareType = null, string primaryNicIPAddress = null, string targetGeneration = null, string licenseType = null, string storageAccountId = null, string targetVmName = null, string targetVmSize = null, string targetResourceGroupId = null, string targetLocation = null, string targetAvailabilitySetId = null, string targetAvailabilityZone = null, string targetProximityPlacementGroupId = null, string targetBootDiagnosticsStorageAccountId = null, string targetNetworkId = null, string testNetworkId = null, string failoverRecoveryPointId = null, DateTimeOffset? lastRecoveryPointReceived = null, long? lastRpoInSeconds = null, DateTimeOffset? lastRpoCalculatedOn = null, string lastRecoveryPointId = null, int? initialReplicationProgressPercentage = null, long? initialReplicationProcessedBytes = null, long? initialReplicationTransferredBytes = null, VmReplicationProgressHealth? initialReplicationProgressHealth = null, int? resyncProgressPercentage = null, long? resyncProcessedBytes = null, long? resyncTransferredBytes = null, VmReplicationProgressHealth? resyncProgressHealth = null, string resyncRequired = null, ResyncState? resyncState = null, MobilityAgentUpgradeState? agentUpgradeState = null, string lastAgentUpgradeType = null, string agentUpgradeJobId = null, string agentUpgradeAttemptToVersion = null, IEnumerable<InMageRcmProtectedDiskDetails> protectedDisks = null, string isLastUpgradeSuccessful = null, bool? isAgentRegistrationSuccessfulAfterFailover = null, InMageRcmMobilityAgentDetails mobilityAgentDetails = null, IEnumerable<InMageRcmLastAgentUpgradeErrorDetails> lastAgentUpgradeErrorDetails = null, IEnumerable<InMageRcmAgentUpgradeBlockingErrorDetails> agentUpgradeBlockingErrorDetails = null, IEnumerable<InMageRcmNicDetails> vmNics = null, InMageRcmDiscoveredProtectedVmDetails discoveredVmDetails = null)
        {
            protectedDisks ??= new List<InMageRcmProtectedDiskDetails>();
            lastAgentUpgradeErrorDetails ??= new List<InMageRcmLastAgentUpgradeErrorDetails>();
            agentUpgradeBlockingErrorDetails ??= new List<InMageRcmAgentUpgradeBlockingErrorDetails>();
            vmNics ??= new List<InMageRcmNicDetails>();

            return new InMageRcmReplicationDetails("InMageRcm", internalIdentifier, fabricDiscoveryMachineId, multiVmGroupName, discoveryType, processServerId, processorCoreCount, allocatedMemoryInMB, processServerName, runAsAccountId, osType, firmwareType, primaryNicIPAddress, targetGeneration, licenseType, storageAccountId, targetVmName, targetVmSize, targetResourceGroupId, targetLocation, targetAvailabilitySetId, targetAvailabilityZone, targetProximityPlacementGroupId, targetBootDiagnosticsStorageAccountId, targetNetworkId, testNetworkId, failoverRecoveryPointId, lastRecoveryPointReceived, lastRpoInSeconds, lastRpoCalculatedOn, lastRecoveryPointId, initialReplicationProgressPercentage, initialReplicationProcessedBytes, initialReplicationTransferredBytes, initialReplicationProgressHealth, resyncProgressPercentage, resyncProcessedBytes, resyncTransferredBytes, resyncProgressHealth, resyncRequired, resyncState, agentUpgradeState, lastAgentUpgradeType, agentUpgradeJobId, agentUpgradeAttemptToVersion, protectedDisks?.ToList(), isLastUpgradeSuccessful, isAgentRegistrationSuccessfulAfterFailover, mobilityAgentDetails, lastAgentUpgradeErrorDetails?.ToList(), agentUpgradeBlockingErrorDetails?.ToList(), vmNics?.ToList(), discoveredVmDetails);
        }

        /// <summary> Initializes a new instance of InMageReplicationDetails. </summary>
        /// <param name="activeSiteType"> The active location of the VM. If the VM is being protected from Azure, this field will take values from { Azure, OnPrem }. If the VM is being protected between two data-centers, this field will be OnPrem always. </param>
        /// <param name="sourceVmCpuCount"> The CPU count of the VM on the primary side. </param>
        /// <param name="sourceVmRamSizeInMB"> The RAM size of the VM on the primary side. </param>
        /// <param name="osDetails"> The OS details. </param>
        /// <param name="protectionStage"> The protection stage. </param>
        /// <param name="vmId"> The virtual machine Id. </param>
        /// <param name="vmProtectionState"> The protection state for the vm. </param>
        /// <param name="vmProtectionStateDescription"> The protection state description for the vm. </param>
        /// <param name="resyncDetails"> The resync details of the machine. </param>
        /// <param name="retentionWindowStart"> The retention window start time. </param>
        /// <param name="retentionWindowEnd"> The retention window end time. </param>
        /// <param name="compressedDataRateInMB"> The compressed data change rate in MB. </param>
        /// <param name="uncompressedDataRateInMB"> The uncompressed data change rate in MB. </param>
        /// <param name="rpoInSeconds"> The RPO in seconds. </param>
        /// <param name="protectedDisks"> The list of protected disks. </param>
        /// <param name="ipAddress"> The source IP address. </param>
        /// <param name="lastHeartbeat"> The last heartbeat received from the source server. </param>
        /// <param name="processServerId"> The process server Id. </param>
        /// <param name="masterTargetId"> The master target Id. </param>
        /// <param name="consistencyPoints"> The collection of Consistency points. </param>
        /// <param name="diskResized"> A value indicating whether any disk is resized for this VM. </param>
        /// <param name="rebootAfterUpdateStatus"> A value indicating whether the source server requires a restart after update. </param>
        /// <param name="multiVmGroupId"> The multi vm group Id, if any. </param>
        /// <param name="multiVmGroupName"> The multi vm group name, if any. </param>
        /// <param name="multiVmSyncStatus"> A value indicating whether the multi vm sync is enabled or disabled. </param>
        /// <param name="agentDetails"> The agent details. </param>
        /// <param name="vCenterInfrastructureId"> The vCenter infrastructure Id. </param>
        /// <param name="infrastructureVmId"> The infrastructure VM Id. </param>
        /// <param name="vmNics"> The PE Network details. </param>
        /// <param name="discoveryType"> A value indicating the discovery type of the machine. </param>
        /// <param name="azureStorageAccountId"> A value indicating the underlying Azure storage account. If the VM is not running in Azure, this value shall be set to null. </param>
        /// <param name="datastores"> The datastores of the on-premise machine Value can be list of strings that contain datastore names. </param>
        /// <param name="validationErrors"> The validation errors of the on-premise machine Value can be list of validation errors. </param>
        /// <param name="lastRpoCalculatedOn"> The last RPO calculated time. </param>
        /// <param name="lastUpdateReceivedOn"> The last update time received from on-prem components. </param>
        /// <param name="replicaId"> The replica id of the protected item. </param>
        /// <param name="osVersion"> The OS Version of the protected item. </param>
        /// <param name="isAdditionalStatsAvailable"> A value indicating whether additional IR stats are available or not. </param>
        /// <param name="totalDataTransferred"> The total transferred data in bytes. </param>
        /// <param name="totalProgressHealth"> The progress health. </param>
        /// <returns> A new <see cref="Models.InMageReplicationDetails"/> instance for mocking. </returns>
        public static InMageReplicationDetails InMageReplicationDetails(string activeSiteType = null, int? sourceVmCpuCount = null, int? sourceVmRamSizeInMB = null, OSDiskDetails osDetails = null, string protectionStage = null, string vmId = null, string vmProtectionState = null, string vmProtectionStateDescription = null, InitialReplicationDetails resyncDetails = null, DateTimeOffset? retentionWindowStart = null, DateTimeOffset? retentionWindowEnd = null, double? compressedDataRateInMB = null, double? uncompressedDataRateInMB = null, long? rpoInSeconds = null, IEnumerable<InMageProtectedDiskDetails> protectedDisks = null, string ipAddress = null, DateTimeOffset? lastHeartbeat = null, string processServerId = null, string masterTargetId = null, IReadOnlyDictionary<string, DateTimeOffset> consistencyPoints = null, string diskResized = null, string rebootAfterUpdateStatus = null, string multiVmGroupId = null, string multiVmGroupName = null, string multiVmSyncStatus = null, InMageAgentDetails agentDetails = null, string vCenterInfrastructureId = null, string infrastructureVmId = null, IEnumerable<VmNicDetails> vmNics = null, string discoveryType = null, string azureStorageAccountId = null, IEnumerable<string> datastores = null, IEnumerable<HealthError> validationErrors = null, DateTimeOffset? lastRpoCalculatedOn = null, DateTimeOffset? lastUpdateReceivedOn = null, string replicaId = null, string osVersion = null, bool? isAdditionalStatsAvailable = null, long? totalDataTransferred = null, string totalProgressHealth = null)
        {
            protectedDisks ??= new List<InMageProtectedDiskDetails>();
            consistencyPoints ??= new Dictionary<string, DateTimeOffset>();
            vmNics ??= new List<VmNicDetails>();
            datastores ??= new List<string>();
            validationErrors ??= new List<HealthError>();

            return new InMageReplicationDetails("InMage", activeSiteType, sourceVmCpuCount, sourceVmRamSizeInMB, osDetails, protectionStage, vmId, vmProtectionState, vmProtectionStateDescription, resyncDetails, retentionWindowStart, retentionWindowEnd, compressedDataRateInMB, uncompressedDataRateInMB, rpoInSeconds, protectedDisks?.ToList(), ipAddress, lastHeartbeat, processServerId, masterTargetId, consistencyPoints, diskResized, rebootAfterUpdateStatus, multiVmGroupId, multiVmGroupName, multiVmSyncStatus, agentDetails, vCenterInfrastructureId, infrastructureVmId, vmNics?.ToList(), discoveryType, azureStorageAccountId, datastores?.ToList(), validationErrors?.ToList(), lastRpoCalculatedOn, lastUpdateReceivedOn, replicaId, osVersion, isAdditionalStatsAvailable, totalDataTransferred, totalProgressHealth);
        }

        /// <summary> Initializes a new instance of OSDiskDetails. </summary>
        /// <param name="osVhdId"> The id of the disk containing the OS. </param>
        /// <param name="osType"> The type of the OS on the VM. </param>
        /// <param name="vhdName"> The OS disk VHD name. </param>
        /// <returns> A new <see cref="Models.OSDiskDetails"/> instance for mocking. </returns>
        public static OSDiskDetails OSDiskDetails(string osVhdId = null, string osType = null, string vhdName = null)
        {
            return new OSDiskDetails(osVhdId, osType, vhdName);
        }

        /// <summary> Initializes a new instance of JobStatusEventDetails. </summary>
        /// <param name="jobId"> Job arm id for the event. </param>
        /// <param name="jobFriendlyName"> JobName for the Event. </param>
        /// <param name="jobStatus"> JobStatus for the Event. </param>
        /// <param name="affectedObjectType"> AffectedObjectType for the event. </param>
        /// <returns> A new <see cref="Models.JobStatusEventDetails"/> instance for mocking. </returns>
        public static JobStatusEventDetails JobStatusEventDetails(string jobId = null, string jobFriendlyName = null, string jobStatus = null, string affectedObjectType = null)
        {
            return new JobStatusEventDetails("JobStatus", jobId, jobFriendlyName, jobStatus, affectedObjectType);
        }

        /// <summary> Initializes a new instance of ManualActionTaskDetails. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="instructions"> The instructions. </param>
        /// <param name="observation"> The observation. </param>
        /// <returns> A new <see cref="Models.ManualActionTaskDetails"/> instance for mocking. </returns>
        public static ManualActionTaskDetails ManualActionTaskDetails(string name = null, string instructions = null, string observation = null)
        {
            return new ManualActionTaskDetails("ManualActionTaskDetails", name, instructions, observation);
        }

        /// <summary> Initializes a new instance of MasterTargetServer. </summary>
        /// <param name="id"> The server Id. </param>
        /// <param name="ipAddress"> The IP address of the server. </param>
        /// <param name="name"> The server name. </param>
        /// <param name="osType"> The OS type of the server. </param>
        /// <param name="agentVersion"> The version of the scout component on the server. </param>
        /// <param name="lastHeartbeat"> The last heartbeat received from the server. </param>
        /// <param name="versionStatus"> Version status. </param>
        /// <param name="retentionVolumes"> The retention volumes of Master target Server. </param>
        /// <param name="dataStores"> The list of data stores in the fabric. </param>
        /// <param name="validationErrors"> Validation errors. </param>
        /// <param name="healthErrors"> Health errors. </param>
        /// <param name="diskCount"> Disk count of the master target. </param>
        /// <param name="osVersion"> OS Version of the master target. </param>
        /// <param name="agentExpiryOn"> Agent expiry date. </param>
        /// <param name="marsAgentVersion"> MARS agent version. </param>
        /// <param name="marsAgentExpiryOn"> MARS agent expiry date. </param>
        /// <param name="agentVersionDetails"> Agent version details. </param>
        /// <param name="marsAgentVersionDetails"> Mars agent version details. </param>
        /// <returns> A new <see cref="Models.MasterTargetServer"/> instance for mocking. </returns>
        public static MasterTargetServer MasterTargetServer(string id = null, string ipAddress = null, string name = null, string osType = null, string agentVersion = null, DateTimeOffset? lastHeartbeat = null, string versionStatus = null, IEnumerable<RetentionVolume> retentionVolumes = null, IEnumerable<DataStore> dataStores = null, IEnumerable<HealthError> validationErrors = null, IEnumerable<HealthError> healthErrors = null, int? diskCount = null, string osVersion = null, DateTimeOffset? agentExpiryOn = null, string marsAgentVersion = null, DateTimeOffset? marsAgentExpiryOn = null, VersionDetails agentVersionDetails = null, VersionDetails marsAgentVersionDetails = null)
        {
            retentionVolumes ??= new List<RetentionVolume>();
            dataStores ??= new List<DataStore>();
            validationErrors ??= new List<HealthError>();
            healthErrors ??= new List<HealthError>();

            return new MasterTargetServer(id, ipAddress, name, osType, agentVersion, lastHeartbeat, versionStatus, retentionVolumes?.ToList(), dataStores?.ToList(), validationErrors?.ToList(), healthErrors?.ToList(), diskCount, osVersion, agentExpiryOn, marsAgentVersion, marsAgentExpiryOn, agentVersionDetails, marsAgentVersionDetails);
        }

        /// <summary> Initializes a new instance of RetentionVolume. </summary>
        /// <param name="volumeName"> The volume name. </param>
        /// <param name="capacityInBytes"> The volume capacity. </param>
        /// <param name="freeSpaceInBytes"> The free space available in this volume. </param>
        /// <param name="thresholdPercentage"> The threshold percentage. </param>
        /// <returns> A new <see cref="Models.RetentionVolume"/> instance for mocking. </returns>
        public static RetentionVolume RetentionVolume(string volumeName = null, long? capacityInBytes = null, long? freeSpaceInBytes = null, int? thresholdPercentage = null)
        {
            return new RetentionVolume(volumeName, capacityInBytes, freeSpaceInBytes, thresholdPercentage);
        }

        /// <summary> Initializes a new instance of MobilityServiceUpdate. </summary>
        /// <param name="version"> The version of the latest update. </param>
        /// <param name="rebootStatus"> The reboot status of the update - whether it is required or not. </param>
        /// <param name="osType"> The OS type. </param>
        /// <returns> A new <see cref="Models.MobilityServiceUpdate"/> instance for mocking. </returns>
        public static MobilityServiceUpdate MobilityServiceUpdate(string version = null, string rebootStatus = null, string osType = null)
        {
            return new MobilityServiceUpdate(version, rebootStatus, osType);
        }

        /// <summary> Initializes a new instance of ProcessServer. </summary>
        /// <param name="friendlyName"> The Process Server&apos;s friendly name. </param>
        /// <param name="id"> The Process Server Id. </param>
        /// <param name="ipAddress"> The IP address of the server. </param>
        /// <param name="osType"> The OS type of the server. </param>
        /// <param name="agentVersion"> The version of the scout component on the server. </param>
        /// <param name="lastHeartbeat"> The last heartbeat received from the server. </param>
        /// <param name="versionStatus"> Version status. </param>
        /// <param name="mobilityServiceUpdates"> The list of the mobility service updates available on the Process Server. </param>
        /// <param name="hostId"> The agent generated Id. </param>
        /// <param name="machineCount"> The servers configured with this PS. </param>
        /// <param name="replicationPairCount"> The number of replication pairs configured in this PS. </param>
        /// <param name="systemLoad"> The percentage of the system load. </param>
        /// <param name="systemLoadStatus"> The system load status. </param>
        /// <param name="cpuLoad"> The percentage of the CPU load. </param>
        /// <param name="cpuLoadStatus"> The CPU load status. </param>
        /// <param name="totalMemoryInBytes"> The total memory. </param>
        /// <param name="availableMemoryInBytes"> The available memory. </param>
        /// <param name="memoryUsageStatus"> The memory usage status. </param>
        /// <param name="totalSpaceInBytes"> The total space. </param>
        /// <param name="availableSpaceInBytes"> The available space. </param>
        /// <param name="spaceUsageStatus"> The space usage status. </param>
        /// <param name="psServiceStatus"> The PS service status. </param>
        /// <param name="sslCertExpiryOn"> The PS SSL cert expiry date. </param>
        /// <param name="sslCertExpiryRemainingDays"> CS SSL cert expiry date. </param>
        /// <param name="osVersion"> OS Version of the process server. Note: This will get populated if user has CS version greater than 9.12.0.0. </param>
        /// <param name="healthErrors"> Health errors. </param>
        /// <param name="agentExpiryOn"> Agent expiry date. </param>
        /// <param name="agentVersionDetails"> The agent version details. </param>
        /// <param name="health"> The health of Process Server. </param>
        /// <param name="psStatsRefreshOn"> The process server stats refresh time. </param>
        /// <param name="throughputUploadPendingDataInBytes"> The uploading pending data in bytes. </param>
        /// <param name="throughputInMBps"> The throughput in MBps. </param>
        /// <param name="throughputInBytes"> The throughput in bytes. </param>
        /// <param name="throughputStatus"> The throughput status. </param>
        /// <param name="marsCommunicationStatus"> The MARS communication status. </param>
        /// <param name="marsRegistrationStatus"> The MARS registration status. </param>
        /// <returns> A new <see cref="Models.ProcessServer"/> instance for mocking. </returns>
        public static ProcessServer ProcessServer(string friendlyName = null, string id = null, string ipAddress = null, string osType = null, string agentVersion = null, DateTimeOffset? lastHeartbeat = null, string versionStatus = null, IEnumerable<MobilityServiceUpdate> mobilityServiceUpdates = null, string hostId = null, string machineCount = null, string replicationPairCount = null, string systemLoad = null, string systemLoadStatus = null, string cpuLoad = null, string cpuLoadStatus = null, long? totalMemoryInBytes = null, long? availableMemoryInBytes = null, string memoryUsageStatus = null, long? totalSpaceInBytes = null, long? availableSpaceInBytes = null, string spaceUsageStatus = null, string psServiceStatus = null, DateTimeOffset? sslCertExpiryOn = null, int? sslCertExpiryRemainingDays = null, string osVersion = null, IEnumerable<HealthError> healthErrors = null, DateTimeOffset? agentExpiryOn = null, VersionDetails agentVersionDetails = null, ProtectionHealth? health = null, DateTimeOffset? psStatsRefreshOn = null, long? throughputUploadPendingDataInBytes = null, long? throughputInMBps = null, long? throughputInBytes = null, string throughputStatus = null, string marsCommunicationStatus = null, string marsRegistrationStatus = null)
        {
            mobilityServiceUpdates ??= new List<MobilityServiceUpdate>();
            healthErrors ??= new List<HealthError>();

            return new ProcessServer(friendlyName, id, ipAddress, osType, agentVersion, lastHeartbeat, versionStatus, mobilityServiceUpdates?.ToList(), hostId, machineCount, replicationPairCount, systemLoad, systemLoadStatus, cpuLoad, cpuLoadStatus, totalMemoryInBytes, availableMemoryInBytes, memoryUsageStatus, totalSpaceInBytes, availableSpaceInBytes, spaceUsageStatus, psServiceStatus, sslCertExpiryOn, sslCertExpiryRemainingDays, osVersion, healthErrors?.ToList(), agentExpiryOn, agentVersionDetails, health, psStatsRefreshOn, throughputUploadPendingDataInBytes, throughputInMBps, throughputInBytes, throughputStatus, marsCommunicationStatus, marsRegistrationStatus);
        }

        /// <summary> Initializes a new instance of RecoveryPlanA2ADetails. </summary>
        /// <param name="primaryZone"> The primary zone. </param>
        /// <param name="recoveryZone"> The recovery zone. </param>
        /// <param name="primaryExtendedLocation"> The primary extended location. </param>
        /// <param name="recoveryExtendedLocation"> The recovery extended location. </param>
        /// <returns> A new <see cref="Models.RecoveryPlanA2ADetails"/> instance for mocking. </returns>
        public static RecoveryPlanA2ADetails RecoveryPlanA2ADetails(string primaryZone = null, string recoveryZone = null, ExtendedLocation primaryExtendedLocation = null, ExtendedLocation recoveryExtendedLocation = null)
        {
            return new RecoveryPlanA2ADetails("A2A", primaryZone, recoveryZone, primaryExtendedLocation, recoveryExtendedLocation);
        }

        /// <summary> Initializes a new instance of RecoveryPlanGroupTaskDetails. </summary>
        /// <param name="childTasks"> The child tasks. </param>
        /// <param name="name"> The name. </param>
        /// <param name="groupId"> The group identifier. </param>
        /// <param name="rpGroupType"> The group type. </param>
        /// <returns> A new <see cref="Models.RecoveryPlanGroupTaskDetails"/> instance for mocking. </returns>
        public static RecoveryPlanGroupTaskDetails RecoveryPlanGroupTaskDetails(IEnumerable<ASRTask> childTasks = null, string name = null, string groupId = null, string rpGroupType = null)
        {
            childTasks ??= new List<ASRTask>();

            return new RecoveryPlanGroupTaskDetails("RecoveryPlanGroupTaskDetails", childTasks?.ToList(), name, groupId, rpGroupType);
        }

        /// <summary> Initializes a new instance of RecoveryPlanShutdownGroupTaskDetails. </summary>
        /// <param name="childTasks"> The child tasks. </param>
        /// <param name="name"> The name. </param>
        /// <param name="groupId"> The group identifier. </param>
        /// <param name="rpGroupType"> The group type. </param>
        /// <returns> A new <see cref="Models.RecoveryPlanShutdownGroupTaskDetails"/> instance for mocking. </returns>
        public static RecoveryPlanShutdownGroupTaskDetails RecoveryPlanShutdownGroupTaskDetails(IEnumerable<ASRTask> childTasks = null, string name = null, string groupId = null, string rpGroupType = null)
        {
            childTasks ??= new List<ASRTask>();

            return new RecoveryPlanShutdownGroupTaskDetails("RecoveryPlanShutdownGroupTaskDetails", childTasks?.ToList(), name, groupId, rpGroupType);
        }

        /// <summary> Initializes a new instance of RunAsAccount. </summary>
        /// <param name="accountId"> The CS RunAs account Id. </param>
        /// <param name="accountName"> The CS RunAs account name. </param>
        /// <returns> A new <see cref="Models.RunAsAccount"/> instance for mocking. </returns>
        public static RunAsAccount RunAsAccount(string accountId = null, string accountName = null)
        {
            return new RunAsAccount(accountId, accountName);
        }

        /// <summary> Initializes a new instance of ScriptActionTaskDetails. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="path"> The path. </param>
        /// <param name="output"> The output. </param>
        /// <param name="isPrimarySideScript"> A value indicating whether it is a primary side script or not. </param>
        /// <returns> A new <see cref="Models.ScriptActionTaskDetails"/> instance for mocking. </returns>
        public static ScriptActionTaskDetails ScriptActionTaskDetails(string name = null, string path = null, string output = null, bool? isPrimarySideScript = null)
        {
            return new ScriptActionTaskDetails("ScriptActionTaskDetails", name, path, output, isPrimarySideScript);
        }

        /// <summary> Initializes a new instance of SwitchProtectionJobDetails. </summary>
        /// <param name="affectedObjectDetails"> The affected object properties like source server, source cloud, target server, target cloud etc. based on the workflow object details. </param>
        /// <param name="newReplicationProtectedItemId"> ARM Id of the new replication protected item. </param>
        /// <returns> A new <see cref="Models.SwitchProtectionJobDetails"/> instance for mocking. </returns>
        public static SwitchProtectionJobDetails SwitchProtectionJobDetails(IReadOnlyDictionary<string, string> affectedObjectDetails = null, string newReplicationProtectedItemId = null)
        {
            affectedObjectDetails ??= new Dictionary<string, string>();

            return new SwitchProtectionJobDetails("SwitchProtectionJobDetails", affectedObjectDetails, newReplicationProtectedItemId);
        }

        /// <summary> Initializes a new instance of TestFailoverJobDetails. </summary>
        /// <param name="affectedObjectDetails"> The affected object properties like source server, source cloud, target server, target cloud etc. based on the workflow object details. </param>
        /// <param name="testFailoverStatus"> The test failover status. </param>
        /// <param name="comments"> The test failover comments. </param>
        /// <param name="networkName"> The test network name. </param>
        /// <param name="networkFriendlyName"> The test network friendly name. </param>
        /// <param name="networkType"> The test network type (see TestFailoverInput enum for possible values). </param>
        /// <param name="protectedItemDetails"> The test VM details. </param>
        /// <returns> A new <see cref="Models.TestFailoverJobDetails"/> instance for mocking. </returns>
        public static TestFailoverJobDetails TestFailoverJobDetails(IReadOnlyDictionary<string, string> affectedObjectDetails = null, string testFailoverStatus = null, string comments = null, string networkName = null, string networkFriendlyName = null, string networkType = null, IEnumerable<FailoverReplicationProtectedItemDetails> protectedItemDetails = null)
        {
            affectedObjectDetails ??= new Dictionary<string, string>();
            protectedItemDetails ??= new List<FailoverReplicationProtectedItemDetails>();

            return new TestFailoverJobDetails("TestFailoverJobDetails", affectedObjectDetails, testFailoverStatus, comments, networkName, networkFriendlyName, networkType, protectedItemDetails?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachineTaskDetails. </summary>
        /// <param name="jobTask"> The job entity. </param>
        /// <param name="skippedReason"> The skipped reason. </param>
        /// <param name="skippedReasonString"> The skipped reason string. </param>
        /// <returns> A new <see cref="Models.VirtualMachineTaskDetails"/> instance for mocking. </returns>
        public static VirtualMachineTaskDetails VirtualMachineTaskDetails(JobEntity jobTask = null, string skippedReason = null, string skippedReasonString = null)
        {
            return new VirtualMachineTaskDetails("VirtualMachineTaskDetails", jobTask, skippedReason, skippedReasonString);
        }

        /// <summary> Initializes a new instance of VmmVirtualMachineDetails. </summary>
        /// <param name="sourceItemId"> The source id of the object. </param>
        /// <param name="generation"> The id of the object in fabric. </param>
        /// <param name="osDetails"> The Last replication time. </param>
        /// <param name="diskDetails"> The Last successful failover time. </param>
        /// <param name="hasPhysicalDisk"> A value indicating whether the VM has a physical disk attached. String value of SrsDataContract.PresenceStatus enum. </param>
        /// <param name="hasFibreChannelAdapter"> A value indicating whether the VM has a fibre channel adapter attached. String value of SrsDataContract.PresenceStatus enum. </param>
        /// <param name="hasSharedVhd"> A value indicating whether the VM has a shared VHD attached. String value of SrsDataContract.PresenceStatus enum. </param>
        /// <param name="hyperVHostId"> The Id of the hyper-v host in fabric. </param>
        /// <returns> A new <see cref="Models.VmmVirtualMachineDetails"/> instance for mocking. </returns>
        public static VmmVirtualMachineDetails VmmVirtualMachineDetails(string sourceItemId = null, string generation = null, OSDetails osDetails = null, IEnumerable<DiskDetails> diskDetails = null, PresenceStatus? hasPhysicalDisk = null, PresenceStatus? hasFibreChannelAdapter = null, PresenceStatus? hasSharedVhd = null, string hyperVHostId = null)
        {
            diskDetails ??= new List<DiskDetails>();

            return new VmmVirtualMachineDetails("VmmVirtualMachine", sourceItemId, generation, osDetails, diskDetails?.ToList(), hasPhysicalDisk, hasFibreChannelAdapter, hasSharedVhd, hyperVHostId);
        }

        /// <summary> Initializes a new instance of VmNicUpdatesTaskDetails. </summary>
        /// <param name="vmId"> Virtual machine Id. </param>
        /// <param name="nicId"> Nic Id. </param>
        /// <param name="name"> Name of the Nic. </param>
        /// <returns> A new <see cref="Models.VmNicUpdatesTaskDetails"/> instance for mocking. </returns>
        public static VmNicUpdatesTaskDetails VmNicUpdatesTaskDetails(string vmId = null, string nicId = null, string name = null)
        {
            return new VmNicUpdatesTaskDetails("VmNicUpdatesTaskDetails", vmId, nicId, name);
        }

        /// <summary> Initializes a new instance of VMwareCbtEventDetails. </summary>
        /// <param name="migrationItemName"> The migration item name. </param>
        /// <returns> A new <see cref="Models.VMwareCbtEventDetails"/> instance for mocking. </returns>
        public static VMwareCbtEventDetails VMwareCbtEventDetails(string migrationItemName = null)
        {
            return new VMwareCbtEventDetails("VMwareCbt", migrationItemName);
        }

        /// <summary> Initializes a new instance of VMwareCbtMigrationDetails. </summary>
        /// <param name="vmwareMachineId"> The ARM Id of the VM discovered in VMware. </param>
        /// <param name="osType"> The type of the OS on the VM. </param>
        /// <param name="osName"> The name of the OS on the VM. </param>
        /// <param name="firmwareType"> The firmware type. </param>
        /// <param name="targetGeneration"> The target generation. </param>
        /// <param name="licenseType"> License Type of the VM to be used. </param>
        /// <param name="sqlServerLicenseType"> The SQL Server license type. </param>
        /// <param name="dataMoverRunAsAccountId"> The data mover run as account Id. </param>
        /// <param name="snapshotRunAsAccountId"> The snapshot run as account Id. </param>
        /// <param name="storageAccountId"> The replication storage account ARM Id. This is applicable only for the blob based replication test hook. </param>
        /// <param name="targetVmName"> Target VM name. </param>
        /// <param name="targetVmSize"> The target VM size. </param>
        /// <param name="targetLocation"> The target location. </param>
        /// <param name="targetResourceGroupId"> The target resource group Id. </param>
        /// <param name="targetAvailabilitySetId"> The target availability set Id. </param>
        /// <param name="targetAvailabilityZone"> The target availability zone. </param>
        /// <param name="targetProximityPlacementGroupId"> The target proximity placement group Id. </param>
        /// <param name="confidentialVmKeyVaultId"> The confidential VM key vault Id for ADE installation. </param>
        /// <param name="targetVmSecurityProfile"> The target VM security profile. </param>
        /// <param name="targetBootDiagnosticsStorageAccountId"> The target boot diagnostics storage account ARM Id. </param>
        /// <param name="targetVmTags"> The target VM tags. </param>
        /// <param name="protectedDisks"> The list of protected disks. </param>
        /// <param name="targetNetworkId"> The target network Id. </param>
        /// <param name="testNetworkId"> The test network Id. </param>
        /// <param name="vmNics"> The network details. </param>
        /// <param name="targetNicTags"> The tags for the target NICs. </param>
        /// <param name="migrationRecoveryPointId"> The recovery point Id to which the VM was migrated. </param>
        /// <param name="lastRecoveryPointReceived"> The last recovery point received time. </param>
        /// <param name="lastRecoveryPointId"> The last recovery point Id. </param>
        /// <param name="initialSeedingProgressPercentage"> The initial seeding progress percentage. </param>
        /// <param name="migrationProgressPercentage"> The migration progress percentage. </param>
        /// <param name="resyncProgressPercentage"> The resync progress percentage. </param>
        /// <param name="resumeProgressPercentage"> The resume progress percentage. </param>
        /// <param name="initialSeedingRetryCount"> The initial seeding retry count. </param>
        /// <param name="resyncRetryCount"> The resync retry count. </param>
        /// <param name="resumeRetryCount"> The resume retry count. </param>
        /// <param name="resyncRequired"> A value indicating whether resync is required. </param>
        /// <param name="resyncState"> The resync state. </param>
        /// <param name="performAutoResync"> A value indicating whether auto resync is to be done. </param>
        /// <param name="seedDiskTags"> The tags for the seed disks. </param>
        /// <param name="targetDiskTags"> The tags for the target disks. </param>
        /// <param name="supportedOSVersions"> List of supported inplace OS Upgrade versions. </param>
        /// <returns> A new <see cref="Models.VMwareCbtMigrationDetails"/> instance for mocking. </returns>
        public static VMwareCbtMigrationDetails VMwareCbtMigrationDetails(string vmwareMachineId = null, string osType = null, string osName = null, string firmwareType = null, string targetGeneration = null, string licenseType = null, string sqlServerLicenseType = null, string dataMoverRunAsAccountId = null, string snapshotRunAsAccountId = null, string storageAccountId = null, string targetVmName = null, string targetVmSize = null, string targetLocation = null, string targetResourceGroupId = null, string targetAvailabilitySetId = null, string targetAvailabilityZone = null, string targetProximityPlacementGroupId = null, ResourceIdentifier confidentialVmKeyVaultId = null, VMwareCbtSecurityProfileProperties targetVmSecurityProfile = null, string targetBootDiagnosticsStorageAccountId = null, IReadOnlyDictionary<string, string> targetVmTags = null, IEnumerable<VMwareCbtProtectedDiskDetails> protectedDisks = null, string targetNetworkId = null, string testNetworkId = null, IEnumerable<VMwareCbtNicDetails> vmNics = null, IReadOnlyDictionary<string, string> targetNicTags = null, string migrationRecoveryPointId = null, DateTimeOffset? lastRecoveryPointReceived = null, string lastRecoveryPointId = null, int? initialSeedingProgressPercentage = null, int? migrationProgressPercentage = null, int? resyncProgressPercentage = null, int? resumeProgressPercentage = null, long? initialSeedingRetryCount = null, long? resyncRetryCount = null, long? resumeRetryCount = null, string resyncRequired = null, ResyncState? resyncState = null, string performAutoResync = null, IReadOnlyDictionary<string, string> seedDiskTags = null, IReadOnlyDictionary<string, string> targetDiskTags = null, IEnumerable<string> supportedOSVersions = null)
        {
            targetVmTags ??= new Dictionary<string, string>();
            protectedDisks ??= new List<VMwareCbtProtectedDiskDetails>();
            vmNics ??= new List<VMwareCbtNicDetails>();
            targetNicTags ??= new Dictionary<string, string>();
            seedDiskTags ??= new Dictionary<string, string>();
            targetDiskTags ??= new Dictionary<string, string>();
            supportedOSVersions ??= new List<string>();

            return new VMwareCbtMigrationDetails("VMwareCbt", vmwareMachineId, osType, osName, firmwareType, targetGeneration, licenseType, sqlServerLicenseType, dataMoverRunAsAccountId, snapshotRunAsAccountId, storageAccountId, targetVmName, targetVmSize, targetLocation, targetResourceGroupId, targetAvailabilitySetId, targetAvailabilityZone, targetProximityPlacementGroupId, confidentialVmKeyVaultId, targetVmSecurityProfile, targetBootDiagnosticsStorageAccountId, targetVmTags, protectedDisks?.ToList(), targetNetworkId, testNetworkId, vmNics?.ToList(), targetNicTags, migrationRecoveryPointId, lastRecoveryPointReceived, lastRecoveryPointId, initialSeedingProgressPercentage, migrationProgressPercentage, resyncProgressPercentage, resumeProgressPercentage, initialSeedingRetryCount, resyncRetryCount, resumeRetryCount, resyncRequired, resyncState, performAutoResync, seedDiskTags, targetDiskTags, supportedOSVersions?.ToList());
        }

        /// <summary> Initializes a new instance of VMwareCbtProtectedDiskDetails. </summary>
        /// <param name="diskId"> The disk id. </param>
        /// <param name="diskName"> The disk name. </param>
        /// <param name="diskType"> The disk type. </param>
        /// <param name="diskPath"> The disk path. </param>
        /// <param name="isOSDisk"> A value indicating whether the disk is the OS disk. </param>
        /// <param name="capacityInBytes"> The disk capacity in bytes. </param>
        /// <param name="logStorageAccountId"> The log storage account ARM Id. </param>
        /// <param name="logStorageAccountSasSecretName"> The key vault secret name of the log storage account. </param>
        /// <param name="diskEncryptionSetId"> The DiskEncryptionSet ARM Id. </param>
        /// <param name="seedManagedDiskId"> The ARM Id of the seed managed disk. </param>
        /// <param name="seedBlobUri"> The uri of the seed blob. </param>
        /// <param name="targetManagedDiskId"> The ARM Id of the target managed disk. </param>
        /// <param name="targetBlobUri"> The uri of the target blob. </param>
        /// <param name="targetDiskName"> The name for the target managed disk. </param>
        /// <returns> A new <see cref="Models.VMwareCbtProtectedDiskDetails"/> instance for mocking. </returns>
        public static VMwareCbtProtectedDiskDetails VMwareCbtProtectedDiskDetails(string diskId = null, string diskName = null, DiskAccountType? diskType = null, string diskPath = null, string isOSDisk = null, long? capacityInBytes = null, string logStorageAccountId = null, string logStorageAccountSasSecretName = null, string diskEncryptionSetId = null, string seedManagedDiskId = null, Uri seedBlobUri = null, string targetManagedDiskId = null, Uri targetBlobUri = null, string targetDiskName = null)
        {
            return new VMwareCbtProtectedDiskDetails(diskId, diskName, diskType, diskPath, isOSDisk, capacityInBytes, logStorageAccountId, logStorageAccountSasSecretName, diskEncryptionSetId, seedManagedDiskId, seedBlobUri, targetManagedDiskId, targetBlobUri, targetDiskName);
        }

        /// <summary> Initializes a new instance of VMwareCbtNicDetails. </summary>
        /// <param name="nicId"> The NIC Id. </param>
        /// <param name="isPrimaryNic"> A value indicating whether this is the primary NIC. </param>
        /// <param name="sourceIPAddress"> The source IP address. </param>
        /// <param name="sourceIPAddressType"> The source IP address type. </param>
        /// <param name="sourceNetworkId"> Source network Id. </param>
        /// <param name="targetIPAddress"> The target IP address. </param>
        /// <param name="targetIPAddressType"> The target IP address type. </param>
        /// <param name="targetSubnetName"> Target subnet name. </param>
        /// <param name="testNetworkId"> Source network Id. </param>
        /// <param name="testSubnetName"> Test subnet name. </param>
        /// <param name="testIPAddress"> The test IP address. </param>
        /// <param name="testIPAddressType"> The test IP address type. </param>
        /// <param name="targetNicName"> Target NIC name. </param>
        /// <param name="isSelectedForMigration"> A value indicating whether this NIC is selected for migration. </param>
        /// <returns> A new <see cref="Models.VMwareCbtNicDetails"/> instance for mocking. </returns>
        public static VMwareCbtNicDetails VMwareCbtNicDetails(string nicId = null, string isPrimaryNic = null, string sourceIPAddress = null, EthernetAddressType? sourceIPAddressType = null, string sourceNetworkId = null, string targetIPAddress = null, EthernetAddressType? targetIPAddressType = null, string targetSubnetName = null, string testNetworkId = null, string testSubnetName = null, string testIPAddress = null, EthernetAddressType? testIPAddressType = null, string targetNicName = null, string isSelectedForMigration = null)
        {
            return new VMwareCbtNicDetails(nicId, isPrimaryNic, sourceIPAddress, sourceIPAddressType, sourceNetworkId, targetIPAddress, targetIPAddressType, targetSubnetName, testNetworkId, testSubnetName, testIPAddress, testIPAddressType, targetNicName, isSelectedForMigration);
        }

        /// <summary> Initializes a new instance of VMwareCbtPolicyDetails. </summary>
        /// <param name="recoveryPointHistoryInMinutes"> The duration in minutes until which the recovery points need to be stored. </param>
        /// <param name="appConsistentFrequencyInMinutes"> The app consistent snapshot frequency in minutes. </param>
        /// <param name="crashConsistentFrequencyInMinutes"> The crash consistent snapshot frequency in minutes. </param>
        /// <returns> A new <see cref="Models.VMwareCbtPolicyDetails"/> instance for mocking. </returns>
        public static VMwareCbtPolicyDetails VMwareCbtPolicyDetails(int? recoveryPointHistoryInMinutes = null, int? appConsistentFrequencyInMinutes = null, int? crashConsistentFrequencyInMinutes = null)
        {
            return new VMwareCbtPolicyDetails("VMwareCbt", recoveryPointHistoryInMinutes, appConsistentFrequencyInMinutes, crashConsistentFrequencyInMinutes);
        }

        /// <summary> Initializes a new instance of VMwareCbtProtectionContainerMappingDetails. </summary>
        /// <param name="keyVaultId"> The target key vault ARM Id. </param>
        /// <param name="keyVaultUri"> The target key vault URI. </param>
        /// <param name="storageAccountId"> The storage account ARM Id. </param>
        /// <param name="storageAccountSasSecretName"> The secret name of the storage account. </param>
        /// <param name="serviceBusConnectionStringSecretName"> The secret name of the service bus connection string. </param>
        /// <param name="targetLocation"> The target location. </param>
        /// <param name="roleSizeToNicCountMap"> The role size to NIC count map. </param>
        /// <param name="excludedSkus"> The SKUs to be excluded. </param>
        /// <returns> A new <see cref="Models.VMwareCbtProtectionContainerMappingDetails"/> instance for mocking. </returns>
        public static VMwareCbtProtectionContainerMappingDetails VMwareCbtProtectionContainerMappingDetails(string keyVaultId = null, Uri keyVaultUri = null, string storageAccountId = null, string storageAccountSasSecretName = null, string serviceBusConnectionStringSecretName = null, string targetLocation = null, IReadOnlyDictionary<string, int> roleSizeToNicCountMap = null, IEnumerable<string> excludedSkus = null)
        {
            roleSizeToNicCountMap ??= new Dictionary<string, int>();
            excludedSkus ??= new List<string>();

            return new VMwareCbtProtectionContainerMappingDetails("VMwareCbt", keyVaultId, keyVaultUri, storageAccountId, storageAccountSasSecretName, serviceBusConnectionStringSecretName, targetLocation, roleSizeToNicCountMap, excludedSkus?.ToList());
        }

        /// <summary> Initializes a new instance of VMwareDetails. </summary>
        /// <param name="processServers"> The list of Process Servers associated with the fabric. </param>
        /// <param name="masterTargetServers"> The list of Master Target servers associated with the fabric. </param>
        /// <param name="runAsAccounts"> The list of run as accounts created on the server. </param>
        /// <param name="replicationPairCount"> The number of replication pairs configured in this CS. </param>
        /// <param name="processServerCount"> The number of process servers. </param>
        /// <param name="agentCount"> The number of source and target servers configured to talk to this CS. </param>
        /// <param name="protectedServers"> The number of protected servers. </param>
        /// <param name="systemLoad"> The percentage of the system load. </param>
        /// <param name="systemLoadStatus"> The system load status. </param>
        /// <param name="cpuLoad"> The percentage of the CPU load. </param>
        /// <param name="cpuLoadStatus"> The CPU load status. </param>
        /// <param name="totalMemoryInBytes"> The total memory. </param>
        /// <param name="availableMemoryInBytes"> The available memory. </param>
        /// <param name="memoryUsageStatus"> The memory usage status. </param>
        /// <param name="totalSpaceInBytes"> The total space. </param>
        /// <param name="availableSpaceInBytes"> The available space. </param>
        /// <param name="spaceUsageStatus"> The space usage status. </param>
        /// <param name="webLoad"> The web load. </param>
        /// <param name="webLoadStatus"> The web load status. </param>
        /// <param name="databaseServerLoad"> The database server load. </param>
        /// <param name="databaseServerLoadStatus"> The database server load status. </param>
        /// <param name="csServiceStatus"> The CS service status. </param>
        /// <param name="ipAddress"> The IP address. </param>
        /// <param name="agentVersion"> The agent Version. </param>
        /// <param name="hostName"> The host name. </param>
        /// <param name="lastHeartbeat"> The last heartbeat received from CS server. </param>
        /// <param name="versionStatus"> Version status. </param>
        /// <param name="sslCertExpiryOn"> CS SSL cert expiry date. </param>
        /// <param name="sslCertExpiryRemainingDays"> CS SSL cert expiry date. </param>
        /// <param name="psTemplateVersion"> PS template version. </param>
        /// <param name="agentExpiryOn"> Agent expiry date. </param>
        /// <param name="agentVersionDetails"> The agent version details. </param>
        /// <param name="switchProviderBlockingErrorDetails"> The switch provider blocking error information. </param>
        /// <returns> A new <see cref="Models.VMwareDetails"/> instance for mocking. </returns>
        public static VMwareDetails VMwareDetails(IEnumerable<ProcessServer> processServers = null, IEnumerable<MasterTargetServer> masterTargetServers = null, IEnumerable<RunAsAccount> runAsAccounts = null, string replicationPairCount = null, string processServerCount = null, string agentCount = null, string protectedServers = null, string systemLoad = null, string systemLoadStatus = null, string cpuLoad = null, string cpuLoadStatus = null, long? totalMemoryInBytes = null, long? availableMemoryInBytes = null, string memoryUsageStatus = null, long? totalSpaceInBytes = null, long? availableSpaceInBytes = null, string spaceUsageStatus = null, string webLoad = null, string webLoadStatus = null, string databaseServerLoad = null, string databaseServerLoadStatus = null, string csServiceStatus = null, string ipAddress = null, string agentVersion = null, string hostName = null, DateTimeOffset? lastHeartbeat = null, string versionStatus = null, DateTimeOffset? sslCertExpiryOn = null, int? sslCertExpiryRemainingDays = null, string psTemplateVersion = null, DateTimeOffset? agentExpiryOn = null, VersionDetails agentVersionDetails = null, IEnumerable<InMageFabricSwitchProviderBlockingErrorDetails> switchProviderBlockingErrorDetails = null)
        {
            processServers ??= new List<ProcessServer>();
            masterTargetServers ??= new List<MasterTargetServer>();
            runAsAccounts ??= new List<RunAsAccount>();
            switchProviderBlockingErrorDetails ??= new List<InMageFabricSwitchProviderBlockingErrorDetails>();

            return new VMwareDetails("VMware", processServers?.ToList(), masterTargetServers?.ToList(), runAsAccounts?.ToList(), replicationPairCount, processServerCount, agentCount, protectedServers, systemLoad, systemLoadStatus, cpuLoad, cpuLoadStatus, totalMemoryInBytes, availableMemoryInBytes, memoryUsageStatus, totalSpaceInBytes, availableSpaceInBytes, spaceUsageStatus, webLoad, webLoadStatus, databaseServerLoad, databaseServerLoadStatus, csServiceStatus, ipAddress, agentVersion, hostName, lastHeartbeat, versionStatus, sslCertExpiryOn, sslCertExpiryRemainingDays, psTemplateVersion, agentExpiryOn, agentVersionDetails, switchProviderBlockingErrorDetails?.ToList());
        }

        /// <summary> Initializes a new instance of VMwareV2FabricSpecificDetails. </summary>
        /// <param name="vmwareSiteId"> The ARM Id of the VMware site. </param>
        /// <param name="physicalSiteId"> The ARM Id of the physical site. </param>
        /// <param name="migrationSolutionId"> The Migration solution ARM Id. </param>
        /// <param name="serviceEndpoint"> The service endpoint. </param>
        /// <param name="serviceResourceId"> The service resource Id. </param>
        /// <param name="serviceContainerId"> The service container Id. </param>
        /// <param name="processServers"> The list of process servers. </param>
        /// <returns> A new <see cref="Models.VMwareV2FabricSpecificDetails"/> instance for mocking. </returns>
        public static VMwareV2FabricSpecificDetails VMwareV2FabricSpecificDetails(string vmwareSiteId = null, string physicalSiteId = null, string migrationSolutionId = null, string serviceEndpoint = null, string serviceResourceId = null, string serviceContainerId = null, IEnumerable<ProcessServerDetails> processServers = null)
        {
            processServers ??= new List<ProcessServerDetails>();

            return new VMwareV2FabricSpecificDetails("VMwareV2", vmwareSiteId, physicalSiteId, migrationSolutionId, serviceEndpoint, serviceResourceId, serviceContainerId, processServers?.ToList());
        }

        /// <summary> Initializes a new instance of VMwareVirtualMachineDetails. </summary>
        /// <param name="agentGeneratedId"> The ID generated by the InMage agent after it gets installed on guest. This is the ID to be used during InMage CreateProtection. </param>
        /// <param name="agentInstalled"> The value indicating if InMage scout agent is installed on guest. </param>
        /// <param name="osType"> The OsType installed on VM. </param>
        /// <param name="agentVersion"> The agent version. </param>
        /// <param name="ipAddress"> The IP address. </param>
        /// <param name="poweredOn"> The value indicating whether VM is powered on. </param>
        /// <param name="vCenterInfrastructureId"> The VCenter infrastructure Id. </param>
        /// <param name="discoveryType"> A value indicating the discovery type of the machine. Value can be vCenter or physical. </param>
        /// <param name="diskDetails"> The disk details. </param>
        /// <param name="validationErrors"> The validation errors. </param>
        /// <returns> A new <see cref="Models.VMwareVirtualMachineDetails"/> instance for mocking. </returns>
        public static VMwareVirtualMachineDetails VMwareVirtualMachineDetails(string agentGeneratedId = null, string agentInstalled = null, string osType = null, string agentVersion = null, string ipAddress = null, string poweredOn = null, string vCenterInfrastructureId = null, string discoveryType = null, IEnumerable<InMageDiskDetails> diskDetails = null, IEnumerable<HealthError> validationErrors = null)
        {
            diskDetails ??= new List<InMageDiskDetails>();
            validationErrors ??= new List<HealthError>();

            return new VMwareVirtualMachineDetails("VMwareVirtualMachine", agentGeneratedId, agentInstalled, osType, agentVersion, ipAddress, poweredOn, vCenterInfrastructureId, discoveryType, diskDetails?.ToList(), validationErrors?.ToList());
        }
    }
}
