// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary> The migration status. </summary>
    public readonly partial struct MigrationState : IEquatable<MigrationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MigrationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MigrationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string EnableMigrationInProgressValue = "EnableMigrationInProgress";
        private const string EnableMigrationFailedValue = "EnableMigrationFailed";
        private const string DisableMigrationInProgressValue = "DisableMigrationInProgress";
        private const string DisableMigrationFailedValue = "DisableMigrationFailed";
        private const string InitialSeedingInProgressValue = "InitialSeedingInProgress";
        private const string InitialSeedingFailedValue = "InitialSeedingFailed";
        private const string ReplicatingValue = "Replicating";
        private const string MigrationInProgressValue = "MigrationInProgress";
        private const string MigrationSucceededValue = "MigrationSucceeded";
        private const string MigrationFailedValue = "MigrationFailed";
        private const string ResumeInProgressValue = "ResumeInProgress";
        private const string ResumeInitiatedValue = "ResumeInitiated";
        private const string SuspendingProtectionValue = "SuspendingProtection";
        private const string ProtectionSuspendedValue = "ProtectionSuspended";
        private const string MigrationCompletedWithInformationValue = "MigrationCompletedWithInformation";
        private const string MigrationPartiallySucceededValue = "MigrationPartiallySucceeded";

        /// <summary> None. </summary>
        public static MigrationState None { get; } = new MigrationState(NoneValue);
        /// <summary> EnableMigrationInProgress. </summary>
        public static MigrationState EnableMigrationInProgress { get; } = new MigrationState(EnableMigrationInProgressValue);
        /// <summary> EnableMigrationFailed. </summary>
        public static MigrationState EnableMigrationFailed { get; } = new MigrationState(EnableMigrationFailedValue);
        /// <summary> DisableMigrationInProgress. </summary>
        public static MigrationState DisableMigrationInProgress { get; } = new MigrationState(DisableMigrationInProgressValue);
        /// <summary> DisableMigrationFailed. </summary>
        public static MigrationState DisableMigrationFailed { get; } = new MigrationState(DisableMigrationFailedValue);
        /// <summary> InitialSeedingInProgress. </summary>
        public static MigrationState InitialSeedingInProgress { get; } = new MigrationState(InitialSeedingInProgressValue);
        /// <summary> InitialSeedingFailed. </summary>
        public static MigrationState InitialSeedingFailed { get; } = new MigrationState(InitialSeedingFailedValue);
        /// <summary> Replicating. </summary>
        public static MigrationState Replicating { get; } = new MigrationState(ReplicatingValue);
        /// <summary> MigrationInProgress. </summary>
        public static MigrationState MigrationInProgress { get; } = new MigrationState(MigrationInProgressValue);
        /// <summary> MigrationSucceeded. </summary>
        public static MigrationState MigrationSucceeded { get; } = new MigrationState(MigrationSucceededValue);
        /// <summary> MigrationFailed. </summary>
        public static MigrationState MigrationFailed { get; } = new MigrationState(MigrationFailedValue);
        /// <summary> ResumeInProgress. </summary>
        public static MigrationState ResumeInProgress { get; } = new MigrationState(ResumeInProgressValue);
        /// <summary> ResumeInitiated. </summary>
        public static MigrationState ResumeInitiated { get; } = new MigrationState(ResumeInitiatedValue);
        /// <summary> SuspendingProtection. </summary>
        public static MigrationState SuspendingProtection { get; } = new MigrationState(SuspendingProtectionValue);
        /// <summary> ProtectionSuspended. </summary>
        public static MigrationState ProtectionSuspended { get; } = new MigrationState(ProtectionSuspendedValue);
        /// <summary> MigrationCompletedWithInformation. </summary>
        public static MigrationState MigrationCompletedWithInformation { get; } = new MigrationState(MigrationCompletedWithInformationValue);
        /// <summary> MigrationPartiallySucceeded. </summary>
        public static MigrationState MigrationPartiallySucceeded { get; } = new MigrationState(MigrationPartiallySucceededValue);
        /// <summary> Determines if two <see cref="MigrationState"/> values are the same. </summary>
        public static bool operator ==(MigrationState left, MigrationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MigrationState"/> values are not the same. </summary>
        public static bool operator !=(MigrationState left, MigrationState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MigrationState"/>. </summary>
        public static implicit operator MigrationState(string value) => new MigrationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MigrationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MigrationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
