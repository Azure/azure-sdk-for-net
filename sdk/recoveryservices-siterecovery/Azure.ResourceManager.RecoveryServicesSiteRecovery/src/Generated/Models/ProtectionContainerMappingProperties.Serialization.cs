// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class ProtectionContainerMappingProperties : IUtf8JsonSerializable, IJsonModel<ProtectionContainerMappingProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ProtectionContainerMappingProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ProtectionContainerMappingProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProtectionContainerMappingProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProtectionContainerMappingProperties)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (TargetProtectionContainerId != null)
            {
                writer.WritePropertyName("targetProtectionContainerId"u8);
                writer.WriteStringValue(TargetProtectionContainerId);
            }
            if (TargetProtectionContainerFriendlyName != null)
            {
                writer.WritePropertyName("targetProtectionContainerFriendlyName"u8);
                writer.WriteStringValue(TargetProtectionContainerFriendlyName);
            }
            if (ProviderSpecificDetails != null)
            {
                writer.WritePropertyName("providerSpecificDetails"u8);
                writer.WriteObjectValue(ProviderSpecificDetails);
            }
            if (Health != null)
            {
                writer.WritePropertyName("health"u8);
                writer.WriteStringValue(Health);
            }
            if (!(HealthErrorDetails is ChangeTrackingList<SiteRecoveryHealthError> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("healthErrorDetails"u8);
                writer.WriteStartArray();
                foreach (var item in HealthErrorDetails)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (PolicyId != null)
            {
                writer.WritePropertyName("policyId"u8);
                writer.WriteStringValue(PolicyId);
            }
            if (State != null)
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State);
            }
            if (SourceProtectionContainerFriendlyName != null)
            {
                writer.WritePropertyName("sourceProtectionContainerFriendlyName"u8);
                writer.WriteStringValue(SourceProtectionContainerFriendlyName);
            }
            if (SourceFabricFriendlyName != null)
            {
                writer.WritePropertyName("sourceFabricFriendlyName"u8);
                writer.WriteStringValue(SourceFabricFriendlyName);
            }
            if (TargetFabricFriendlyName != null)
            {
                writer.WritePropertyName("targetFabricFriendlyName"u8);
                writer.WriteStringValue(TargetFabricFriendlyName);
            }
            if (PolicyFriendlyName != null)
            {
                writer.WritePropertyName("policyFriendlyName"u8);
                writer.WriteStringValue(PolicyFriendlyName);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ProtectionContainerMappingProperties IJsonModel<ProtectionContainerMappingProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProtectionContainerMappingProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProtectionContainerMappingProperties)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeProtectionContainerMappingProperties(document.RootElement, options);
        }

        internal static ProtectionContainerMappingProperties DeserializeProtectionContainerMappingProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ResourceIdentifier> targetProtectionContainerId = default;
            Optional<string> targetProtectionContainerFriendlyName = default;
            Optional<ProtectionContainerMappingProviderSpecificDetails> providerSpecificDetails = default;
            Optional<string> health = default;
            IReadOnlyList<SiteRecoveryHealthError> healthErrorDetails = default;
            Optional<ResourceIdentifier> policyId = default;
            Optional<string> state = default;
            Optional<string> sourceProtectionContainerFriendlyName = default;
            Optional<string> sourceFabricFriendlyName = default;
            Optional<string> targetFabricFriendlyName = default;
            Optional<string> policyFriendlyName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetProtectionContainerId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetProtectionContainerId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetProtectionContainerFriendlyName"u8))
                {
                    targetProtectionContainerFriendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("providerSpecificDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    providerSpecificDetails = ProtectionContainerMappingProviderSpecificDetails.DeserializeProtectionContainerMappingProviderSpecificDetails(property.Value, options);
                    continue;
                }
                if (property.NameEquals("health"u8))
                {
                    health = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthErrorDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SiteRecoveryHealthError> array = new List<SiteRecoveryHealthError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SiteRecoveryHealthError.DeserializeSiteRecoveryHealthError(item, options));
                    }
                    healthErrorDetails = array;
                    continue;
                }
                if (property.NameEquals("policyId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    policyId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    state = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceProtectionContainerFriendlyName"u8))
                {
                    sourceProtectionContainerFriendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceFabricFriendlyName"u8))
                {
                    sourceFabricFriendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetFabricFriendlyName"u8))
                {
                    targetFabricFriendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyFriendlyName"u8))
                {
                    policyFriendlyName = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ProtectionContainerMappingProperties(
                targetProtectionContainerId.Value,
                targetProtectionContainerFriendlyName.Value,
                providerSpecificDetails.Value,
                health.Value,
                healthErrorDetails ?? new ChangeTrackingList<SiteRecoveryHealthError>(),
                policyId.Value,
                state.Value,
                sourceProtectionContainerFriendlyName.Value,
                sourceFabricFriendlyName.Value,
                targetFabricFriendlyName.Value,
                policyFriendlyName.Value,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ProtectionContainerMappingProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProtectionContainerMappingProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ProtectionContainerMappingProperties)} does not support '{options.Format}' format.");
            }
        }

        ProtectionContainerMappingProperties IPersistableModel<ProtectionContainerMappingProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProtectionContainerMappingProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeProtectionContainerMappingProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ProtectionContainerMappingProperties)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ProtectionContainerMappingProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
