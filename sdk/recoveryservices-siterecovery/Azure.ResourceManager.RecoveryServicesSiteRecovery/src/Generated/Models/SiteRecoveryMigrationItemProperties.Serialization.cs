// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class SiteRecoveryMigrationItemProperties
    {
        internal static SiteRecoveryMigrationItemProperties DeserializeSiteRecoveryMigrationItemProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> machineName = default;
            Core.Optional<ResourceIdentifier> policyId = default;
            Core.Optional<string> policyFriendlyName = default;
            Core.Optional<string> recoveryServicesProviderId = default;
            Core.Optional<string> replicationStatus = default;
            Core.Optional<SiteRecoveryMigrationState> migrationState = default;
            Core.Optional<string> migrationStateDescription = default;
            Core.Optional<DateTimeOffset> lastTestMigrationTime = default;
            Core.Optional<string> lastTestMigrationStatus = default;
            Core.Optional<DateTimeOffset> lastMigrationTime = default;
            Core.Optional<string> lastMigrationStatus = default;
            Core.Optional<TestMigrationState> testMigrateState = default;
            Core.Optional<string> testMigrateStateDescription = default;
            Core.Optional<SiteRecoveryProtectionHealth> health = default;
            Core.Optional<IReadOnlyList<SiteRecoveryHealthError>> healthErrors = default;
            Core.Optional<IReadOnlyList<MigrationItemOperation>> allowedOperations = default;
            Core.Optional<CurrentJobDetails> currentJob = default;
            Core.Optional<IReadOnlyList<CriticalJobHistoryDetails>> criticalJobHistory = default;
            Core.Optional<string> eventCorrelationId = default;
            Core.Optional<MigrationProviderSpecificSettings> providerSpecificDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("machineName"u8))
                {
                    machineName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    policyId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("policyFriendlyName"u8))
                {
                    policyFriendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryServicesProviderId"u8))
                {
                    recoveryServicesProviderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replicationStatus"u8))
                {
                    replicationStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("migrationState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrationState = new SiteRecoveryMigrationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("migrationStateDescription"u8))
                {
                    migrationStateDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastTestMigrationTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastTestMigrationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastTestMigrationStatus"u8))
                {
                    lastTestMigrationStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastMigrationTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastMigrationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastMigrationStatus"u8))
                {
                    lastMigrationStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testMigrateState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    testMigrateState = new TestMigrationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("testMigrateStateDescription"u8))
                {
                    testMigrateStateDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("health"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    health = new SiteRecoveryProtectionHealth(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("healthErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SiteRecoveryHealthError> array = new List<SiteRecoveryHealthError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SiteRecoveryHealthError.DeserializeSiteRecoveryHealthError(item));
                    }
                    healthErrors = array;
                    continue;
                }
                if (property.NameEquals("allowedOperations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MigrationItemOperation> array = new List<MigrationItemOperation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new MigrationItemOperation(item.GetString()));
                    }
                    allowedOperations = array;
                    continue;
                }
                if (property.NameEquals("currentJob"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentJob = CurrentJobDetails.DeserializeCurrentJobDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("criticalJobHistory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CriticalJobHistoryDetails> array = new List<CriticalJobHistoryDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CriticalJobHistoryDetails.DeserializeCriticalJobHistoryDetails(item));
                    }
                    criticalJobHistory = array;
                    continue;
                }
                if (property.NameEquals("eventCorrelationId"u8))
                {
                    eventCorrelationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("providerSpecificDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    providerSpecificDetails = MigrationProviderSpecificSettings.DeserializeMigrationProviderSpecificSettings(property.Value);
                    continue;
                }
            }
            return new SiteRecoveryMigrationItemProperties(machineName.Value, policyId.Value, policyFriendlyName.Value, recoveryServicesProviderId.Value, replicationStatus.Value, Core.Optional.ToNullable(migrationState), migrationStateDescription.Value, Core.Optional.ToNullable(lastTestMigrationTime), lastTestMigrationStatus.Value, Core.Optional.ToNullable(lastMigrationTime), lastMigrationStatus.Value, Core.Optional.ToNullable(testMigrateState), testMigrateStateDescription.Value, Core.Optional.ToNullable(health), Core.Optional.ToList(healthErrors), Core.Optional.ToList(allowedOperations), currentJob.Value, Core.Optional.ToList(criticalJobHistory), eventCorrelationId.Value, providerSpecificDetails.Value);
        }
    }
}
