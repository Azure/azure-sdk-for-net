// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class HealthError
    {
        internal static HealthError DeserializeHealthError(JsonElement element)
        {
            Optional<IReadOnlyList<InnerHealthError>> innerHealthErrors = default;
            Optional<string> errorSource = default;
            Optional<string> errorType = default;
            Optional<string> errorLevel = default;
            Optional<string> errorCategory = default;
            Optional<string> errorCode = default;
            Optional<string> summaryMessage = default;
            Optional<string> errorMessage = default;
            Optional<string> possibleCauses = default;
            Optional<string> recommendedAction = default;
            Optional<DateTimeOffset> creationTimeUtc = default;
            Optional<string> recoveryProviderErrorMessage = default;
            Optional<string> entityId = default;
            Optional<string> errorId = default;
            Optional<HealthErrorCustomerResolvability> customerResolvability = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("innerHealthErrors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<InnerHealthError> array = new List<InnerHealthError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(InnerHealthError.DeserializeInnerHealthError(item));
                    }
                    innerHealthErrors = array;
                    continue;
                }
                if (property.NameEquals("errorSource"))
                {
                    errorSource = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorType"))
                {
                    errorType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorLevel"))
                {
                    errorLevel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorCategory"))
                {
                    errorCategory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorCode"))
                {
                    errorCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("summaryMessage"))
                {
                    summaryMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorMessage"))
                {
                    errorMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("possibleCauses"))
                {
                    possibleCauses = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recommendedAction"))
                {
                    recommendedAction = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("creationTimeUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    creationTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("recoveryProviderErrorMessage"))
                {
                    recoveryProviderErrorMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("entityId"))
                {
                    entityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorId"))
                {
                    errorId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerResolvability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    customerResolvability = new HealthErrorCustomerResolvability(property.Value.GetString());
                    continue;
                }
            }
            return new HealthError(Optional.ToList(innerHealthErrors), errorSource.Value, errorType.Value, errorLevel.Value, errorCategory.Value, errorCode.Value, summaryMessage.Value, errorMessage.Value, possibleCauses.Value, recommendedAction.Value, Optional.ToNullable(creationTimeUtc), recoveryProviderErrorMessage.Value, entityId.Value, errorId.Value, Optional.ToNullable(customerResolvability));
        }
    }
}
