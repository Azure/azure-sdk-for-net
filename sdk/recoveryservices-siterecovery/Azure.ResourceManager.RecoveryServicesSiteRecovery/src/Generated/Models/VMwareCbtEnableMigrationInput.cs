// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary>
    /// VMwareCbt specific enable migration input.
    /// Serialized Name: VMwareCbtEnableMigrationInput
    /// </summary>
    public partial class VMwareCbtEnableMigrationInput : EnableMigrationProviderSpecificInput
    {
        /// <summary> Initializes a new instance of VMwareCbtEnableMigrationInput. </summary>
        /// <param name="vmwareMachineId">
        /// The ARM Id of the VM discovered in VMware.
        /// Serialized Name: VMwareCbtEnableMigrationInput.vmwareMachineId
        /// </param>
        /// <param name="disksToInclude">
        /// The disks to include list.
        /// Serialized Name: VMwareCbtEnableMigrationInput.disksToInclude
        /// </param>
        /// <param name="dataMoverRunAsAccountId">
        /// The data mover run as account Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.dataMoverRunAsAccountId
        /// </param>
        /// <param name="snapshotRunAsAccountId">
        /// The snapshot run as account Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.snapshotRunAsAccountId
        /// </param>
        /// <param name="targetResourceGroupId">
        /// The target resource group ARM Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetResourceGroupId
        /// </param>
        /// <param name="targetNetworkId">
        /// The target network ARM Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetNetworkId
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmwareMachineId"/>, <paramref name="disksToInclude"/>, <paramref name="dataMoverRunAsAccountId"/>, <paramref name="snapshotRunAsAccountId"/>, <paramref name="targetResourceGroupId"/> or <paramref name="targetNetworkId"/> is null. </exception>
        public VMwareCbtEnableMigrationInput(string vmwareMachineId, IEnumerable<VMwareCbtDiskInput> disksToInclude, string dataMoverRunAsAccountId, string snapshotRunAsAccountId, string targetResourceGroupId, string targetNetworkId)
        {
            Argument.AssertNotNull(vmwareMachineId, nameof(vmwareMachineId));
            Argument.AssertNotNull(disksToInclude, nameof(disksToInclude));
            Argument.AssertNotNull(dataMoverRunAsAccountId, nameof(dataMoverRunAsAccountId));
            Argument.AssertNotNull(snapshotRunAsAccountId, nameof(snapshotRunAsAccountId));
            Argument.AssertNotNull(targetResourceGroupId, nameof(targetResourceGroupId));
            Argument.AssertNotNull(targetNetworkId, nameof(targetNetworkId));

            VMwareMachineId = vmwareMachineId;
            DisksToInclude = disksToInclude.ToList();
            DataMoverRunAsAccountId = dataMoverRunAsAccountId;
            SnapshotRunAsAccountId = snapshotRunAsAccountId;
            TargetResourceGroupId = targetResourceGroupId;
            TargetNetworkId = targetNetworkId;
            TargetVmTags = new ChangeTrackingDictionary<string, string>();
            SeedDiskTags = new ChangeTrackingDictionary<string, string>();
            TargetDiskTags = new ChangeTrackingDictionary<string, string>();
            TargetNicTags = new ChangeTrackingDictionary<string, string>();
            InstanceType = "VMwareCbt";
        }

        /// <summary>
        /// The ARM Id of the VM discovered in VMware.
        /// Serialized Name: VMwareCbtEnableMigrationInput.vmwareMachineId
        /// </summary>
        public string VMwareMachineId { get; }
        /// <summary>
        /// The disks to include list.
        /// Serialized Name: VMwareCbtEnableMigrationInput.disksToInclude
        /// </summary>
        public IList<VMwareCbtDiskInput> DisksToInclude { get; }
        /// <summary>
        /// License type.
        /// Serialized Name: VMwareCbtEnableMigrationInput.licenseType
        /// </summary>
        public LicenseType? LicenseType { get; set; }
        /// <summary>
        /// The SQL Server license type.
        /// Serialized Name: VMwareCbtEnableMigrationInput.sqlServerLicenseType
        /// </summary>
        public SqlServerLicenseType? SqlServerLicenseType { get; set; }
        /// <summary>
        /// A value indicating whether bulk SQL RP registration to be done.
        /// Serialized Name: VMwareCbtEnableMigrationInput.performSqlBulkRegistration
        /// </summary>
        public string PerformSqlBulkRegistration { get; set; }
        /// <summary>
        /// The data mover run as account Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.dataMoverRunAsAccountId
        /// </summary>
        public string DataMoverRunAsAccountId { get; }
        /// <summary>
        /// The snapshot run as account Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.snapshotRunAsAccountId
        /// </summary>
        public string SnapshotRunAsAccountId { get; }
        /// <summary>
        /// The target VM name.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetVmName
        /// </summary>
        public string TargetVmName { get; set; }
        /// <summary>
        /// The target VM size.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetVmSize
        /// </summary>
        public string TargetVmSize { get; set; }
        /// <summary>
        /// The target resource group ARM Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetResourceGroupId
        /// </summary>
        public string TargetResourceGroupId { get; }
        /// <summary>
        /// The target network ARM Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetNetworkId
        /// </summary>
        public string TargetNetworkId { get; }
        /// <summary>
        /// The selected test network ARM Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.testNetworkId
        /// </summary>
        public string TestNetworkId { get; set; }
        /// <summary>
        /// The target subnet name.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetSubnetName
        /// </summary>
        public string TargetSubnetName { get; set; }
        /// <summary>
        /// The selected test subnet name.
        /// Serialized Name: VMwareCbtEnableMigrationInput.testSubnetName
        /// </summary>
        public string TestSubnetName { get; set; }
        /// <summary>
        /// The target availability set ARM Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetAvailabilitySetId
        /// </summary>
        public string TargetAvailabilitySetId { get; set; }
        /// <summary>
        /// The target availability zone.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetAvailabilityZone
        /// </summary>
        public string TargetAvailabilityZone { get; set; }
        /// <summary>
        /// The target proximity placement group ARM Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetProximityPlacementGroupId
        /// </summary>
        public string TargetProximityPlacementGroupId { get; set; }
        /// <summary>
        /// The confidential VM key vault Id for ADE installation.
        /// Serialized Name: VMwareCbtEnableMigrationInput.confidentialVmKeyVaultId
        /// </summary>
        public ResourceIdentifier ConfidentialVmKeyVaultId { get; set; }
        /// <summary>
        /// The target VM security profile.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetVmSecurityProfile
        /// </summary>
        public VMwareCbtSecurityProfileProperties TargetVmSecurityProfile { get; set; }
        /// <summary>
        /// The target boot diagnostics storage account ARM Id.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetBootDiagnosticsStorageAccountId
        /// </summary>
        public string TargetBootDiagnosticsStorageAccountId { get; set; }
        /// <summary>
        /// A value indicating whether auto resync is to be done.
        /// Serialized Name: VMwareCbtEnableMigrationInput.performAutoResync
        /// </summary>
        public string PerformAutoResync { get; set; }
        /// <summary>
        /// The target VM tags.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetVmTags
        /// </summary>
        public IDictionary<string, string> TargetVmTags { get; }
        /// <summary>
        /// The tags for the seed disks.
        /// Serialized Name: VMwareCbtEnableMigrationInput.seedDiskTags
        /// </summary>
        public IDictionary<string, string> SeedDiskTags { get; }
        /// <summary>
        /// The tags for the target disks.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetDiskTags
        /// </summary>
        public IDictionary<string, string> TargetDiskTags { get; }
        /// <summary>
        /// The tags for the target NICs.
        /// Serialized Name: VMwareCbtEnableMigrationInput.targetNicTags
        /// </summary>
        public IDictionary<string, string> TargetNicTags { get; }
    }
}
