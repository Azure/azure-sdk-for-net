// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class VMwareCbtSecurityProfileProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(TargetVmSecurityType))
            {
                writer.WritePropertyName("targetVmSecurityType"u8);
                writer.WriteStringValue(TargetVmSecurityType.Value.ToString());
            }
            if (Core.Optional.IsDefined(IsTargetVmSecureBootEnabled))
            {
                writer.WritePropertyName("isTargetVmSecureBootEnabled"u8);
                writer.WriteStringValue(IsTargetVmSecureBootEnabled);
            }
            if (Core.Optional.IsDefined(IsTargetVmTpmEnabled))
            {
                writer.WritePropertyName("isTargetVmTpmEnabled"u8);
                writer.WriteStringValue(IsTargetVmTpmEnabled);
            }
            if (Core.Optional.IsDefined(IsTargetVmIntegrityMonitoringEnabled))
            {
                writer.WritePropertyName("isTargetVmIntegrityMonitoringEnabled"u8);
                writer.WriteStringValue(IsTargetVmIntegrityMonitoringEnabled);
            }
            if (Core.Optional.IsDefined(IsTargetVmConfidentialEncryptionEnabled))
            {
                writer.WritePropertyName("isTargetVmConfidentialEncryptionEnabled"u8);
                writer.WriteStringValue(IsTargetVmConfidentialEncryptionEnabled);
            }
            writer.WriteEndObject();
        }

        internal static VMwareCbtSecurityProfileProperties DeserializeVMwareCbtSecurityProfileProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<SiteRecoveryVmSecurityType> targetVmSecurityType = default;
            Core.Optional<string> isTargetVmSecureBootEnabled = default;
            Core.Optional<string> isTargetVmTpmEnabled = default;
            Core.Optional<string> isTargetVmIntegrityMonitoringEnabled = default;
            Core.Optional<string> isTargetVmConfidentialEncryptionEnabled = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetVmSecurityType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetVmSecurityType = new SiteRecoveryVmSecurityType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isTargetVmSecureBootEnabled"u8))
                {
                    isTargetVmSecureBootEnabled = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isTargetVmTpmEnabled"u8))
                {
                    isTargetVmTpmEnabled = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isTargetVmIntegrityMonitoringEnabled"u8))
                {
                    isTargetVmIntegrityMonitoringEnabled = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isTargetVmConfidentialEncryptionEnabled"u8))
                {
                    isTargetVmConfidentialEncryptionEnabled = property.Value.GetString();
                    continue;
                }
            }
            return new VMwareCbtSecurityProfileProperties(Core.Optional.ToNullable(targetVmSecurityType), isTargetVmSecureBootEnabled.Value, isTargetVmTpmEnabled.Value, isTargetVmIntegrityMonitoringEnabled.Value, isTargetVmConfidentialEncryptionEnabled.Value);
        }
    }
}
