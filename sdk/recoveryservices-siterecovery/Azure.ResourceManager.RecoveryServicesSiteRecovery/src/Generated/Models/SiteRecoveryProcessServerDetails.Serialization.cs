// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class SiteRecoveryProcessServerDetails
    {
        internal static SiteRecoveryProcessServerDetails DeserializeSiteRecoveryProcessServerDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> id = default;
            Core.Optional<string> name = default;
            Core.Optional<string> biosId = default;
            Core.Optional<ResourceIdentifier> fabricObjectId = default;
            Core.Optional<string> fqdn = default;
            Core.Optional<IReadOnlyList<IPAddress>> ipAddresses = default;
            Core.Optional<string> version = default;
            Core.Optional<DateTimeOffset> lastHeartbeatUtc = default;
            Core.Optional<long> totalMemoryInBytes = default;
            Core.Optional<long> availableMemoryInBytes = default;
            Core.Optional<long> usedMemoryInBytes = default;
            Core.Optional<double> memoryUsagePercentage = default;
            Core.Optional<long> totalSpaceInBytes = default;
            Core.Optional<long> availableSpaceInBytes = default;
            Core.Optional<long> usedSpaceInBytes = default;
            Core.Optional<double> freeSpacePercentage = default;
            Core.Optional<long> throughputUploadPendingDataInBytes = default;
            Core.Optional<long> throughputInBytes = default;
            Core.Optional<double> processorUsagePercentage = default;
            Core.Optional<RcmComponentStatus> throughputStatus = default;
            Core.Optional<long> systemLoad = default;
            Core.Optional<RcmComponentStatus> systemLoadStatus = default;
            Core.Optional<RcmComponentStatus> diskUsageStatus = default;
            Core.Optional<RcmComponentStatus> memoryUsageStatus = default;
            Core.Optional<RcmComponentStatus> processorUsageStatus = default;
            Core.Optional<SiteRecoveryProtectionHealth> health = default;
            Core.Optional<IReadOnlyList<SiteRecoveryHealthError>> healthErrors = default;
            Core.Optional<int> protectedItemCount = default;
            Core.Optional<SiteRecoveryProtectionHealth> historicHealth = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("biosId"u8))
                {
                    biosId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fabricObjectId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fabricObjectId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fqdn"u8))
                {
                    fqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddresses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IPAddress> array = new List<IPAddress>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(IPAddress.Parse(item.GetString()));
                        }
                    }
                    ipAddresses = array;
                    continue;
                }
                if (property.NameEquals("version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastHeartbeatUtc"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastHeartbeatUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("totalMemoryInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalMemoryInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("availableMemoryInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableMemoryInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("usedMemoryInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    usedMemoryInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryUsagePercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memoryUsagePercentage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("totalSpaceInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalSpaceInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("availableSpaceInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableSpaceInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("usedSpaceInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    usedSpaceInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("freeSpacePercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    freeSpacePercentage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("throughputUploadPendingDataInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    throughputUploadPendingDataInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("throughputInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    throughputInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("processorUsagePercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    processorUsagePercentage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("throughputStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    throughputStatus = new RcmComponentStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemLoad"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemLoad = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("systemLoadStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemLoadStatus = new RcmComponentStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("diskUsageStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskUsageStatus = new RcmComponentStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("memoryUsageStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memoryUsageStatus = new RcmComponentStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("processorUsageStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    processorUsageStatus = new RcmComponentStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("health"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    health = new SiteRecoveryProtectionHealth(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("healthErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SiteRecoveryHealthError> array = new List<SiteRecoveryHealthError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SiteRecoveryHealthError.DeserializeSiteRecoveryHealthError(item));
                    }
                    healthErrors = array;
                    continue;
                }
                if (property.NameEquals("protectedItemCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    protectedItemCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("historicHealth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    historicHealth = new SiteRecoveryProtectionHealth(property.Value.GetString());
                    continue;
                }
            }
            return new SiteRecoveryProcessServerDetails(id.Value, name.Value, biosId.Value, fabricObjectId.Value, fqdn.Value, Core.Optional.ToList(ipAddresses), version.Value, Core.Optional.ToNullable(lastHeartbeatUtc), Core.Optional.ToNullable(totalMemoryInBytes), Core.Optional.ToNullable(availableMemoryInBytes), Core.Optional.ToNullable(usedMemoryInBytes), Core.Optional.ToNullable(memoryUsagePercentage), Core.Optional.ToNullable(totalSpaceInBytes), Core.Optional.ToNullable(availableSpaceInBytes), Core.Optional.ToNullable(usedSpaceInBytes), Core.Optional.ToNullable(freeSpacePercentage), Core.Optional.ToNullable(throughputUploadPendingDataInBytes), Core.Optional.ToNullable(throughputInBytes), Core.Optional.ToNullable(processorUsagePercentage), Core.Optional.ToNullable(throughputStatus), Core.Optional.ToNullable(systemLoad), Core.Optional.ToNullable(systemLoadStatus), Core.Optional.ToNullable(diskUsageStatus), Core.Optional.ToNullable(memoryUsageStatus), Core.Optional.ToNullable(processorUsageStatus), Core.Optional.ToNullable(health), Core.Optional.ToList(healthErrors), Core.Optional.ToNullable(protectedItemCount), Core.Optional.ToNullable(historicHealth));
        }
    }
}
