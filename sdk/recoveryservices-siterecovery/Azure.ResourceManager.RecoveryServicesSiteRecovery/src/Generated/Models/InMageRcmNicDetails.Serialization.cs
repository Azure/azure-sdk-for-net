// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class InMageRcmNicDetails
    {
        internal static InMageRcmNicDetails DeserializeInMageRcmNicDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> nicId = default;
            Optional<string> isPrimaryNic = default;
            Optional<string> isSelectedForFailover = default;
            Optional<string> sourceIPAddress = default;
            Optional<EthernetAddressType> sourceIPAddressType = default;
            Optional<string> sourceNetworkId = default;
            Optional<string> sourceSubnetName = default;
            Optional<string> targetIPAddress = default;
            Optional<EthernetAddressType> targetIPAddressType = default;
            Optional<string> targetSubnetName = default;
            Optional<string> testSubnetName = default;
            Optional<string> testIPAddress = default;
            Optional<EthernetAddressType> testIPAddressType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nicId"u8))
                {
                    nicId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isPrimaryNic"u8))
                {
                    isPrimaryNic = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isSelectedForFailover"u8))
                {
                    isSelectedForFailover = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceIPAddress"u8))
                {
                    sourceIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceIPAddressType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceIPAddressType = new EthernetAddressType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceNetworkId"u8))
                {
                    sourceNetworkId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceSubnetName"u8))
                {
                    sourceSubnetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetIPAddress"u8))
                {
                    targetIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetIPAddressType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetIPAddressType = new EthernetAddressType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetSubnetName"u8))
                {
                    targetSubnetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testSubnetName"u8))
                {
                    testSubnetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testIPAddress"u8))
                {
                    testIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testIPAddressType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    testIPAddressType = new EthernetAddressType(property.Value.GetString());
                    continue;
                }
            }
            return new InMageRcmNicDetails(nicId.Value, isPrimaryNic.Value, isSelectedForFailover.Value, sourceIPAddress.Value, Optional.ToNullable(sourceIPAddressType), sourceNetworkId.Value, sourceSubnetName.Value, targetIPAddress.Value, Optional.ToNullable(targetIPAddressType), targetSubnetName.Value, testSubnetName.Value, testIPAddress.Value, Optional.ToNullable(testIPAddressType));
        }
    }
}
